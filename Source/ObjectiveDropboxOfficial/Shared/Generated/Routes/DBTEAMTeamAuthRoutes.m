///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <ObjectiveDropboxOfficial/DBACCOUNTPhotoSourceArg.h>
#import <ObjectiveDropboxOfficial/DBACCOUNTSetProfilePhotoError.h>
#import <ObjectiveDropboxOfficial/DBASYNCLaunchEmptyResult.h>
#import <ObjectiveDropboxOfficial/DBASYNCLaunchResultBase.h>
#import <ObjectiveDropboxOfficial/DBASYNCPollArg.h>
#import <ObjectiveDropboxOfficial/DBASYNCPollEmptyResult.h>
#import <ObjectiveDropboxOfficial/DBASYNCPollError.h>
#import <ObjectiveDropboxOfficial/DBASYNCPollResultBase.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESAddTemplateArg.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESAddTemplateResult.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESGetTemplateArg.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESGetTemplateResult.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESListTemplateResult.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESModifyTemplateError.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESPropertyFieldTemplate.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESPropertyGroupTemplate.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESTemplateError.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESUpdateTemplateArg.h>
#import <ObjectiveDropboxOfficial/DBFILEPROPERTIESUpdateTemplateResult.h>
#import <ObjectiveDropboxOfficial/DBFILESContentSyncSetting.h>
#import <ObjectiveDropboxOfficial/DBFILESContentSyncSettingArg.h>
#import <ObjectiveDropboxOfficial/DBFILESSyncSetting.h>
#import <ObjectiveDropboxOfficial/DBFILESSyncSettingArg.h>
#import <ObjectiveDropboxOfficial/DBFILESSyncSettingsError.h>
#import <ObjectiveDropboxOfficial/DBRequestErrors.h>
#import <ObjectiveDropboxOfficial/DBStoneBase.h>
#import <ObjectiveDropboxOfficial/DBTEAMActiveWebSession.h>
#import <ObjectiveDropboxOfficial/DBTEAMAddSecondaryEmailsArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMAddSecondaryEmailsError.h>
#import <ObjectiveDropboxOfficial/DBTEAMAddSecondaryEmailsResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMAdminTier.h>
#import <ObjectiveDropboxOfficial/DBTEAMApiApp.h>
#import <ObjectiveDropboxOfficial/DBTEAMBaseDfbReport.h>
#import <ObjectiveDropboxOfficial/DBTEAMBaseTeamFolderError.h>
#import <ObjectiveDropboxOfficial/DBTEAMCOMMONGroupManagementType.h>
#import <ObjectiveDropboxOfficial/DBTEAMCOMMONGroupSummary.h>
#import <ObjectiveDropboxOfficial/DBTEAMCustomQuotaError.h>
#import <ObjectiveDropboxOfficial/DBTEAMCustomQuotaResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMCustomQuotaUsersArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMDateRange.h>
#import <ObjectiveDropboxOfficial/DBTEAMDateRangeError.h>
#import <ObjectiveDropboxOfficial/DBTEAMDeleteSecondaryEmailsArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMDeleteSecondaryEmailsResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMDesktopClientSession.h>
#import <ObjectiveDropboxOfficial/DBTEAMDeviceSessionArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMDevicesActive.h>
#import <ObjectiveDropboxOfficial/DBTEAMExcludedUsersListArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMExcludedUsersListContinueArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMExcludedUsersListContinueError.h>
#import <ObjectiveDropboxOfficial/DBTEAMExcludedUsersListError.h>
#import <ObjectiveDropboxOfficial/DBTEAMExcludedUsersListResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMExcludedUsersUpdateArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMExcludedUsersUpdateError.h>
#import <ObjectiveDropboxOfficial/DBTEAMExcludedUsersUpdateResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMExcludedUsersUpdateStatus.h>
#import <ObjectiveDropboxOfficial/DBTEAMFeature.h>
#import <ObjectiveDropboxOfficial/DBTEAMFeatureValue.h>
#import <ObjectiveDropboxOfficial/DBTEAMFeaturesGetValuesBatchArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMFeaturesGetValuesBatchError.h>
#import <ObjectiveDropboxOfficial/DBTEAMFeaturesGetValuesBatchResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMGetActivityReport.h>
#import <ObjectiveDropboxOfficial/DBTEAMGetDevicesReport.h>
#import <ObjectiveDropboxOfficial/DBTEAMGetMembershipReport.h>
#import <ObjectiveDropboxOfficial/DBTEAMGetStorageReport.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupAccessType.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupCreateArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupCreateError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupDeleteError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupFullInfo.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMemberInfo.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMemberSelector.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMemberSelectorError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMemberSetAccessTypeError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMembersAddArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMembersAddError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMembersChangeResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMembersRemoveArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMembersRemoveError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMembersSelectorError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupMembersSetAccessTypeArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupSelector.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupSelectorError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupSelectorWithTeamGroupError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupUpdateArgs.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupUpdateError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsGetInfoError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsGetInfoItem.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsListArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsListContinueArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsListContinueError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsListResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsMembersListArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsMembersListContinueArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsMembersListContinueError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsMembersListResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsPollError.h>
#import <ObjectiveDropboxOfficial/DBTEAMGroupsSelector.h>
#import <ObjectiveDropboxOfficial/DBTEAMIncludeMembersArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldHeldRevisionMetadata.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldPolicy.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldStatus.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsError.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsGetPolicyArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsGetPolicyError.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsListHeldRevisionResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsListHeldRevisionsArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsListHeldRevisionsContinueArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsListHeldRevisionsError.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsListPoliciesArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsListPoliciesError.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsListPoliciesResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsPolicyCreateArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsPolicyCreateError.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsPolicyReleaseArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsPolicyReleaseError.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsPolicyUpdateArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMLegalHoldsPolicyUpdateError.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMemberAppsArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMemberAppsError.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMemberAppsResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMemberDevicesArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMemberDevicesError.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMemberDevicesResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMembersAppsArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMembersAppsError.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMembersAppsResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMembersDevicesArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMembersDevicesError.h>
#import <ObjectiveDropboxOfficial/DBTEAMListMembersDevicesResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMListTeamAppsArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMListTeamAppsError.h>
#import <ObjectiveDropboxOfficial/DBTEAMListTeamAppsResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMListTeamDevicesArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMListTeamDevicesError.h>
#import <ObjectiveDropboxOfficial/DBTEAMListTeamDevicesResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMMemberAccess.h>
#import <ObjectiveDropboxOfficial/DBTEAMMemberAddArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMemberAddResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMMemberAddV2Arg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMemberAddV2Result.h>
#import <ObjectiveDropboxOfficial/DBTEAMMemberDevices.h>
#import <ObjectiveDropboxOfficial/DBTEAMMemberLinkedApps.h>
#import <ObjectiveDropboxOfficial/DBTEAMMemberProfile.h>
#import <ObjectiveDropboxOfficial/DBTEAMMemberSelectorError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersAddArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersAddArgBase.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersAddJobStatus.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersAddJobStatusV2Result.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersAddLaunch.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersAddLaunchV2Result.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersAddV2Arg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersDataTransferArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersDeactivateArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersDeactivateBaseArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersDeactivateError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersDeleteProfilePhotoArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersDeleteProfilePhotoError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersGetAvailableTeamMemberRolesResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersGetInfoArgs.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersGetInfoError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersGetInfoItem.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersGetInfoItemBase.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersGetInfoItemV2.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersGetInfoV2Arg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersGetInfoV2Result.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersInfo.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersListArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersListContinueArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersListContinueError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersListError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersListResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersListV2Result.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersRecoverArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersRecoverError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersRemoveArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersRemoveError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSendWelcomeError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSetPermissions2Arg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSetPermissions2Error.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSetPermissions2Result.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSetPermissionsArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSetPermissionsError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSetPermissionsResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSetProfileArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSetProfileError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSetProfilePhotoArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSetProfilePhotoError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersSuspendError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersTransferFilesError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersTransferFormerMembersFilesError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersUnsuspendArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMMembersUnsuspendError.h>
#import <ObjectiveDropboxOfficial/DBTEAMMobileClientSession.h>
#import <ObjectiveDropboxOfficial/DBTEAMNamespaceMetadata.h>
#import <ObjectiveDropboxOfficial/DBTEAMPOLICIESTeamMemberPolicies.h>
#import <ObjectiveDropboxOfficial/DBTEAMRemoveCustomQuotaResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMResendVerificationEmailArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMResendVerificationEmailResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeDesktopClientArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeDeviceSessionArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeDeviceSessionBatchArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeDeviceSessionBatchError.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeDeviceSessionBatchResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeDeviceSessionError.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeDeviceSessionStatus.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeLinkedApiAppArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeLinkedApiAppBatchArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeLinkedAppBatchError.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeLinkedAppBatchResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeLinkedAppError.h>
#import <ObjectiveDropboxOfficial/DBTEAMRevokeLinkedAppStatus.h>
#import <ObjectiveDropboxOfficial/DBTEAMRouteObjects.h>
#import <ObjectiveDropboxOfficial/DBTEAMSetCustomQuotaArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMSetCustomQuotaError.h>
#import <ObjectiveDropboxOfficial/DBTEAMStorageBucket.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamAuthRoutes.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderAccessError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderActivateError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderArchiveArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderArchiveError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderArchiveJobStatus.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderArchiveLaunch.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderCreateArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderCreateError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderGetInfoItem.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderIdArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderIdListArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderInvalidStatusError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderListArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderListContinueArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderListContinueError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderListError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderListResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderMetadata.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderPermanentlyDeleteError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderRenameArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderRenameError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderStatus.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderTeamSharedDropboxError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderUpdateSyncSettingsArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamFolderUpdateSyncSettingsError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamGetInfoResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamMemberInfo.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamMemberInfoV2.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamMemberInfoV2Result.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamMemberProfile.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamMemberRole.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamNamespacesListArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamNamespacesListContinueArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamNamespacesListContinueError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamNamespacesListError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTeamNamespacesListResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMTokenGetAuthenticatedAdminError.h>
#import <ObjectiveDropboxOfficial/DBTEAMTokenGetAuthenticatedAdminResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMUserAddResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMUserCustomQuotaArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMUserCustomQuotaResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMUserDeleteResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMUserResendResult.h>
#import <ObjectiveDropboxOfficial/DBTEAMUserSecondaryEmailsArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMUserSelectorArg.h>
#import <ObjectiveDropboxOfficial/DBTEAMUserSelectorError.h>
#import <ObjectiveDropboxOfficial/DBTransportClientProtocol.h>

@implementation DBTEAMTeamAuthRoutes

- (instancetype)init:(id<DBTransportClient>)client {
  self = [super init];
  if (self) {
    _client = client;
  }
  return self;
}

- (DBRpcTask *)devicesListMemberDevices:(NSString *)teamMemberId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMDevicesListMemberDevices;
  DBTEAMListMemberDevicesArg *arg = [[DBTEAMListMemberDevicesArg alloc] initWithTeamMemberId:teamMemberId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)devicesListMemberDevices:(NSString *)teamMemberId
                     includeWebSessions:(NSNumber *)includeWebSessions
                  includeDesktopClients:(NSNumber *)includeDesktopClients
                   includeMobileClients:(NSNumber *)includeMobileClients {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMDevicesListMemberDevices;
  DBTEAMListMemberDevicesArg *arg = [[DBTEAMListMemberDevicesArg alloc] initWithTeamMemberId:teamMemberId
                                                                          includeWebSessions:includeWebSessions
                                                                       includeDesktopClients:includeDesktopClients
                                                                        includeMobileClients:includeMobileClients];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)devicesListMembersDevices {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMDevicesListMembersDevices;
  DBTEAMListMembersDevicesArg *arg = [[DBTEAMListMembersDevicesArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)devicesListMembersDevices:(NSString *)cursor
                      includeWebSessions:(NSNumber *)includeWebSessions
                   includeDesktopClients:(NSNumber *)includeDesktopClients
                    includeMobileClients:(NSNumber *)includeMobileClients {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMDevicesListMembersDevices;
  DBTEAMListMembersDevicesArg *arg = [[DBTEAMListMembersDevicesArg alloc] initWithCursor:cursor
                                                                      includeWebSessions:includeWebSessions
                                                                   includeDesktopClients:includeDesktopClients
                                                                    includeMobileClients:includeMobileClients];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)devicesListTeamDevices {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMDevicesListTeamDevices;
  DBTEAMListTeamDevicesArg *arg = [[DBTEAMListTeamDevicesArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)devicesListTeamDevices:(NSString *)cursor
                   includeWebSessions:(NSNumber *)includeWebSessions
                includeDesktopClients:(NSNumber *)includeDesktopClients
                 includeMobileClients:(NSNumber *)includeMobileClients {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMDevicesListTeamDevices;
  DBTEAMListTeamDevicesArg *arg = [[DBTEAMListTeamDevicesArg alloc] initWithCursor:cursor
                                                                includeWebSessions:includeWebSessions
                                                             includeDesktopClients:includeDesktopClients
                                                              includeMobileClients:includeMobileClients];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)devicesRevokeDeviceSession:(DBTEAMRevokeDeviceSessionArg *)revokeDeviceSessionArg {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMDevicesRevokeDeviceSession;
  DBTEAMRevokeDeviceSessionArg *arg = revokeDeviceSessionArg;
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)devicesRevokeDeviceSessionBatch:(NSArray<DBTEAMRevokeDeviceSessionArg *> *)revokeDevices {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMDevicesRevokeDeviceSessionBatch;
  DBTEAMRevokeDeviceSessionBatchArg *arg =
      [[DBTEAMRevokeDeviceSessionBatchArg alloc] initWithRevokeDevices:revokeDevices];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)featuresGetValues:(NSArray<DBTEAMFeature *> *)features {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMFeaturesGetValues;
  DBTEAMFeaturesGetValuesBatchArg *arg = [[DBTEAMFeaturesGetValuesBatchArg alloc] initWithFeatures:features];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getInfo {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGetInfo;
  return [self.client requestRpc:route arg:nil];
}

- (DBRpcTask *)groupsCreate:(NSString *)groupName {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsCreate;
  DBTEAMGroupCreateArg *arg = [[DBTEAMGroupCreateArg alloc] initWithGroupName:groupName];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsCreate:(NSString *)groupName
          addCreatorAsOwner:(NSNumber *)addCreatorAsOwner
            groupExternalId:(NSString *)groupExternalId
        groupManagementType:(DBTEAMCOMMONGroupManagementType *)groupManagementType {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsCreate;
  DBTEAMGroupCreateArg *arg = [[DBTEAMGroupCreateArg alloc] initWithGroupName:groupName
                                                            addCreatorAsOwner:addCreatorAsOwner
                                                              groupExternalId:groupExternalId
                                                          groupManagementType:groupManagementType];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsDelete:(DBTEAMGroupSelector *)groupSelector {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsDelete;
  DBTEAMGroupSelector *arg = groupSelector;
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsGetInfo:(DBTEAMGroupsSelector *)groupsSelector {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsGetInfo;
  DBTEAMGroupsSelector *arg = groupsSelector;
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsJobStatusGet:(NSString *)asyncJobId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsJobStatusGet;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsList {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsList;
  DBTEAMGroupsListArg *arg = [[DBTEAMGroupsListArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsList:(NSNumber *)limit {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsList;
  DBTEAMGroupsListArg *arg = [[DBTEAMGroupsListArg alloc] initWithLimit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsListContinue:(NSString *)cursor {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsListContinue;
  DBTEAMGroupsListContinueArg *arg = [[DBTEAMGroupsListContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsMembersAdd:(DBTEAMGroupSelector *)group members:(NSArray<DBTEAMMemberAccess *> *)members {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsMembersAdd;
  DBTEAMGroupMembersAddArg *arg = [[DBTEAMGroupMembersAddArg alloc] initWithGroup:group members:members];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsMembersAdd:(DBTEAMGroupSelector *)group
                        members:(NSArray<DBTEAMMemberAccess *> *)members
                  returnMembers:(NSNumber *)returnMembers {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsMembersAdd;
  DBTEAMGroupMembersAddArg *arg =
      [[DBTEAMGroupMembersAddArg alloc] initWithGroup:group members:members returnMembers:returnMembers];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsMembersList:(DBTEAMGroupSelector *)group {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsMembersList;
  DBTEAMGroupsMembersListArg *arg = [[DBTEAMGroupsMembersListArg alloc] initWithGroup:group];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsMembersList:(DBTEAMGroupSelector *)group limit:(NSNumber *)limit {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsMembersList;
  DBTEAMGroupsMembersListArg *arg = [[DBTEAMGroupsMembersListArg alloc] initWithGroup:group limit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsMembersListContinue:(NSString *)cursor {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsMembersListContinue;
  DBTEAMGroupsMembersListContinueArg *arg = [[DBTEAMGroupsMembersListContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsMembersRemove:(DBTEAMGroupSelector *)group users:(NSArray<DBTEAMUserSelectorArg *> *)users {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsMembersRemove;
  DBTEAMGroupMembersRemoveArg *arg = [[DBTEAMGroupMembersRemoveArg alloc] initWithGroup:group users:users];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsMembersRemove:(DBTEAMGroupSelector *)group
                             users:(NSArray<DBTEAMUserSelectorArg *> *)users
                     returnMembers:(NSNumber *)returnMembers {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsMembersRemove;
  DBTEAMGroupMembersRemoveArg *arg =
      [[DBTEAMGroupMembersRemoveArg alloc] initWithGroup:group users:users returnMembers:returnMembers];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsMembersSetAccessType:(DBTEAMGroupSelector *)group
                                     user:(DBTEAMUserSelectorArg *)user
                               accessType:(DBTEAMGroupAccessType *)accessType {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsMembersSetAccessType;
  DBTEAMGroupMembersSetAccessTypeArg *arg =
      [[DBTEAMGroupMembersSetAccessTypeArg alloc] initWithGroup:group user:user accessType:accessType];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsMembersSetAccessType:(DBTEAMGroupSelector *)group
                                     user:(DBTEAMUserSelectorArg *)user
                               accessType:(DBTEAMGroupAccessType *)accessType
                            returnMembers:(NSNumber *)returnMembers {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsMembersSetAccessType;
  DBTEAMGroupMembersSetAccessTypeArg *arg = [[DBTEAMGroupMembersSetAccessTypeArg alloc] initWithGroup:group
                                                                                                 user:user
                                                                                           accessType:accessType
                                                                                        returnMembers:returnMembers];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsUpdate:(DBTEAMGroupSelector *)group {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsUpdate;
  DBTEAMGroupUpdateArgs *arg = [[DBTEAMGroupUpdateArgs alloc] initWithGroup:group];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)groupsUpdate:(DBTEAMGroupSelector *)group
              returnMembers:(NSNumber *)returnMembers
              dNewGroupName:(NSString *)dNewGroupName
        dNewGroupExternalId:(NSString *)dNewGroupExternalId
    dNewGroupManagementType:(DBTEAMCOMMONGroupManagementType *)dNewGroupManagementType {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMGroupsUpdate;
  DBTEAMGroupUpdateArgs *arg = [[DBTEAMGroupUpdateArgs alloc] initWithGroup:group
                                                              returnMembers:returnMembers
                                                              dNewGroupName:dNewGroupName
                                                        dNewGroupExternalId:dNewGroupExternalId
                                                    dNewGroupManagementType:dNewGroupManagementType];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsCreatePolicy:(NSString *)name members:(NSArray<NSString *> *)members {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsCreatePolicy;
  DBTEAMLegalHoldsPolicyCreateArg *arg = [[DBTEAMLegalHoldsPolicyCreateArg alloc] initWithName:name members:members];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsCreatePolicy:(NSString *)name
                              members:(NSArray<NSString *> *)members
                         description_:(NSString *)description_
                            startDate:(NSDate *)startDate
                              endDate:(NSDate *)endDate {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsCreatePolicy;
  DBTEAMLegalHoldsPolicyCreateArg *arg = [[DBTEAMLegalHoldsPolicyCreateArg alloc] initWithName:name
                                                                                       members:members
                                                                                  description_:description_
                                                                                     startDate:startDate
                                                                                       endDate:endDate];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsGetPolicy:(NSString *)id_ {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsGetPolicy;
  DBTEAMLegalHoldsGetPolicyArg *arg = [[DBTEAMLegalHoldsGetPolicyArg alloc] initWithId_:id_];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsListHeldRevisions:(NSString *)id_ {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsListHeldRevisions;
  DBTEAMLegalHoldsListHeldRevisionsArg *arg = [[DBTEAMLegalHoldsListHeldRevisionsArg alloc] initWithId_:id_];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsListHeldRevisionsContinue:(NSString *)id_ {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsListHeldRevisionsContinue;
  DBTEAMLegalHoldsListHeldRevisionsContinueArg *arg =
      [[DBTEAMLegalHoldsListHeldRevisionsContinueArg alloc] initWithId_:id_];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsListHeldRevisionsContinue:(NSString *)id_ cursor:(NSString *)cursor {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsListHeldRevisionsContinue;
  DBTEAMLegalHoldsListHeldRevisionsContinueArg *arg =
      [[DBTEAMLegalHoldsListHeldRevisionsContinueArg alloc] initWithId_:id_ cursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsListPolicies {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsListPolicies;
  DBTEAMLegalHoldsListPoliciesArg *arg = [[DBTEAMLegalHoldsListPoliciesArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsListPolicies:(NSNumber *)includeReleased {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsListPolicies;
  DBTEAMLegalHoldsListPoliciesArg *arg =
      [[DBTEAMLegalHoldsListPoliciesArg alloc] initWithIncludeReleased:includeReleased];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsReleasePolicy:(NSString *)id_ {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsReleasePolicy;
  DBTEAMLegalHoldsPolicyReleaseArg *arg = [[DBTEAMLegalHoldsPolicyReleaseArg alloc] initWithId_:id_];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsUpdatePolicy:(NSString *)id_ {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsUpdatePolicy;
  DBTEAMLegalHoldsPolicyUpdateArg *arg = [[DBTEAMLegalHoldsPolicyUpdateArg alloc] initWithId_:id_];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)legalHoldsUpdatePolicy:(NSString *)id_
                                 name:(NSString *)name
                         description_:(NSString *)description_
                              members:(NSArray<NSString *> *)members {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLegalHoldsUpdatePolicy;
  DBTEAMLegalHoldsPolicyUpdateArg *arg =
      [[DBTEAMLegalHoldsPolicyUpdateArg alloc] initWithId_:id_ name:name description_:description_ members:members];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)linkedAppsListMemberLinkedApps:(NSString *)teamMemberId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLinkedAppsListMemberLinkedApps;
  DBTEAMListMemberAppsArg *arg = [[DBTEAMListMemberAppsArg alloc] initWithTeamMemberId:teamMemberId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)linkedAppsListMembersLinkedApps {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLinkedAppsListMembersLinkedApps;
  DBTEAMListMembersAppsArg *arg = [[DBTEAMListMembersAppsArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)linkedAppsListMembersLinkedApps:(NSString *)cursor {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLinkedAppsListMembersLinkedApps;
  DBTEAMListMembersAppsArg *arg = [[DBTEAMListMembersAppsArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)linkedAppsListTeamLinkedApps {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLinkedAppsListTeamLinkedApps;
  DBTEAMListTeamAppsArg *arg = [[DBTEAMListTeamAppsArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)linkedAppsListTeamLinkedApps:(NSString *)cursor {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLinkedAppsListTeamLinkedApps;
  DBTEAMListTeamAppsArg *arg = [[DBTEAMListTeamAppsArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)linkedAppsRevokeLinkedApp:(NSString *)appId teamMemberId:(NSString *)teamMemberId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLinkedAppsRevokeLinkedApp;
  DBTEAMRevokeLinkedApiAppArg *arg =
      [[DBTEAMRevokeLinkedApiAppArg alloc] initWithAppId:appId teamMemberId:teamMemberId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)linkedAppsRevokeLinkedApp:(NSString *)appId
                            teamMemberId:(NSString *)teamMemberId
                           keepAppFolder:(NSNumber *)keepAppFolder {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLinkedAppsRevokeLinkedApp;
  DBTEAMRevokeLinkedApiAppArg *arg =
      [[DBTEAMRevokeLinkedApiAppArg alloc] initWithAppId:appId teamMemberId:teamMemberId keepAppFolder:keepAppFolder];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)linkedAppsRevokeLinkedAppBatch:(NSArray<DBTEAMRevokeLinkedApiAppArg *> *)revokeLinkedApp {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMLinkedAppsRevokeLinkedAppBatch;
  DBTEAMRevokeLinkedApiAppBatchArg *arg =
      [[DBTEAMRevokeLinkedApiAppBatchArg alloc] initWithRevokeLinkedApp:revokeLinkedApp];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)memberSpaceLimitsExcludedUsersAdd {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMemberSpaceLimitsExcludedUsersAdd;
  DBTEAMExcludedUsersUpdateArg *arg = [[DBTEAMExcludedUsersUpdateArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)memberSpaceLimitsExcludedUsersAdd:(NSArray<DBTEAMUserSelectorArg *> *)users {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMemberSpaceLimitsExcludedUsersAdd;
  DBTEAMExcludedUsersUpdateArg *arg = [[DBTEAMExcludedUsersUpdateArg alloc] initWithUsers:users];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)memberSpaceLimitsExcludedUsersList {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMemberSpaceLimitsExcludedUsersList;
  DBTEAMExcludedUsersListArg *arg = [[DBTEAMExcludedUsersListArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)memberSpaceLimitsExcludedUsersList:(NSNumber *)limit {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMemberSpaceLimitsExcludedUsersList;
  DBTEAMExcludedUsersListArg *arg = [[DBTEAMExcludedUsersListArg alloc] initWithLimit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)memberSpaceLimitsExcludedUsersListContinue:(NSString *)cursor {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMemberSpaceLimitsExcludedUsersListContinue;
  DBTEAMExcludedUsersListContinueArg *arg = [[DBTEAMExcludedUsersListContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)memberSpaceLimitsExcludedUsersRemove {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMemberSpaceLimitsExcludedUsersRemove;
  DBTEAMExcludedUsersUpdateArg *arg = [[DBTEAMExcludedUsersUpdateArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)memberSpaceLimitsExcludedUsersRemove:(NSArray<DBTEAMUserSelectorArg *> *)users {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMemberSpaceLimitsExcludedUsersRemove;
  DBTEAMExcludedUsersUpdateArg *arg = [[DBTEAMExcludedUsersUpdateArg alloc] initWithUsers:users];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)memberSpaceLimitsGetCustomQuota:(NSArray<DBTEAMUserSelectorArg *> *)users {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMemberSpaceLimitsGetCustomQuota;
  DBTEAMCustomQuotaUsersArg *arg = [[DBTEAMCustomQuotaUsersArg alloc] initWithUsers:users];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)memberSpaceLimitsRemoveCustomQuota:(NSArray<DBTEAMUserSelectorArg *> *)users {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMemberSpaceLimitsRemoveCustomQuota;
  DBTEAMCustomQuotaUsersArg *arg = [[DBTEAMCustomQuotaUsersArg alloc] initWithUsers:users];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)memberSpaceLimitsSetCustomQuota:(NSArray<DBTEAMUserCustomQuotaArg *> *)usersAndQuotas {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMemberSpaceLimitsSetCustomQuota;
  DBTEAMSetCustomQuotaArg *arg = [[DBTEAMSetCustomQuotaArg alloc] initWithUsersAndQuotas:usersAndQuotas];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersAddV2:(NSArray<DBTEAMMemberAddV2Arg *> *)dNewMembers {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersAddV2;
  DBTEAMMembersAddV2Arg *arg = [[DBTEAMMembersAddV2Arg alloc] initWithDNewMembers:dNewMembers];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersAddV2:(NSArray<DBTEAMMemberAddV2Arg *> *)dNewMembers forceAsync:(NSNumber *)forceAsync {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersAddV2;
  DBTEAMMembersAddV2Arg *arg = [[DBTEAMMembersAddV2Arg alloc] initWithDNewMembers:dNewMembers forceAsync:forceAsync];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersAdd:(NSArray<DBTEAMMemberAddArg *> *)dNewMembers {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersAdd;
  DBTEAMMembersAddArg *arg = [[DBTEAMMembersAddArg alloc] initWithDNewMembers:dNewMembers];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersAdd:(NSArray<DBTEAMMemberAddArg *> *)dNewMembers forceAsync:(NSNumber *)forceAsync {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersAdd;
  DBTEAMMembersAddArg *arg = [[DBTEAMMembersAddArg alloc] initWithDNewMembers:dNewMembers forceAsync:forceAsync];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersAddJobStatusGetV2:(NSString *)asyncJobId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersAddJobStatusGetV2;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersAddJobStatusGet:(NSString *)asyncJobId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersAddJobStatusGet;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersDeleteProfilePhotoV2:(DBTEAMUserSelectorArg *)user {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersDeleteProfilePhotoV2;
  DBTEAMMembersDeleteProfilePhotoArg *arg = [[DBTEAMMembersDeleteProfilePhotoArg alloc] initWithUser:user];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersDeleteProfilePhoto:(DBTEAMUserSelectorArg *)user {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersDeleteProfilePhoto;
  DBTEAMMembersDeleteProfilePhotoArg *arg = [[DBTEAMMembersDeleteProfilePhotoArg alloc] initWithUser:user];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersGetAvailableTeamMemberRoles {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersGetAvailableTeamMemberRoles;
  return [self.client requestRpc:route arg:nil];
}

- (DBRpcTask *)membersGetInfoV2:(NSArray<DBTEAMUserSelectorArg *> *)members {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersGetInfoV2;
  DBTEAMMembersGetInfoV2Arg *arg = [[DBTEAMMembersGetInfoV2Arg alloc] initWithMembers:members];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersGetInfo:(NSArray<DBTEAMUserSelectorArg *> *)members {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersGetInfo;
  DBTEAMMembersGetInfoArgs *arg = [[DBTEAMMembersGetInfoArgs alloc] initWithMembers:members];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersListV2 {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersListV2;
  DBTEAMMembersListArg *arg = [[DBTEAMMembersListArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersListV2:(NSNumber *)limit includeRemoved:(NSNumber *)includeRemoved {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersListV2;
  DBTEAMMembersListArg *arg = [[DBTEAMMembersListArg alloc] initWithLimit:limit includeRemoved:includeRemoved];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersList {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersList;
  DBTEAMMembersListArg *arg = [[DBTEAMMembersListArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersList:(NSNumber *)limit includeRemoved:(NSNumber *)includeRemoved {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersList;
  DBTEAMMembersListArg *arg = [[DBTEAMMembersListArg alloc] initWithLimit:limit includeRemoved:includeRemoved];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersListContinueV2:(NSString *)cursor {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersListContinueV2;
  DBTEAMMembersListContinueArg *arg = [[DBTEAMMembersListContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersListContinue:(NSString *)cursor {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersListContinue;
  DBTEAMMembersListContinueArg *arg = [[DBTEAMMembersListContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersMoveFormerMemberFiles:(DBTEAMUserSelectorArg *)user
                             transferDestId:(DBTEAMUserSelectorArg *)transferDestId
                            transferAdminId:(DBTEAMUserSelectorArg *)transferAdminId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersMoveFormerMemberFiles;
  DBTEAMMembersDataTransferArg *arg = [[DBTEAMMembersDataTransferArg alloc] initWithUser:user
                                                                          transferDestId:transferDestId
                                                                         transferAdminId:transferAdminId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersMoveFormerMemberFilesJobStatusCheck:(NSString *)asyncJobId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersMoveFormerMemberFilesJobStatusCheck;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersRecover:(DBTEAMUserSelectorArg *)user {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersRecover;
  DBTEAMMembersRecoverArg *arg = [[DBTEAMMembersRecoverArg alloc] initWithUser:user];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersRemove:(DBTEAMUserSelectorArg *)user {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersRemove;
  DBTEAMMembersRemoveArg *arg = [[DBTEAMMembersRemoveArg alloc] initWithUser:user];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersRemove:(DBTEAMUserSelectorArg *)user
                    wipeData:(NSNumber *)wipeData
              transferDestId:(DBTEAMUserSelectorArg *)transferDestId
             transferAdminId:(DBTEAMUserSelectorArg *)transferAdminId
                 keepAccount:(NSNumber *)keepAccount
            retainTeamShares:(NSNumber *)retainTeamShares {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersRemove;
  DBTEAMMembersRemoveArg *arg = [[DBTEAMMembersRemoveArg alloc] initWithUser:user
                                                                    wipeData:wipeData
                                                              transferDestId:transferDestId
                                                             transferAdminId:transferAdminId
                                                                 keepAccount:keepAccount
                                                            retainTeamShares:retainTeamShares];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersRemoveJobStatusGet:(NSString *)asyncJobId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersRemoveJobStatusGet;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSecondaryEmailsAdd:(NSArray<DBTEAMUserSecondaryEmailsArg *> *)dNewSecondaryEmails {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSecondaryEmailsAdd;
  DBTEAMAddSecondaryEmailsArg *arg =
      [[DBTEAMAddSecondaryEmailsArg alloc] initWithDNewSecondaryEmails:dNewSecondaryEmails];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSecondaryEmailsDelete:(NSArray<DBTEAMUserSecondaryEmailsArg *> *)emailsToDelete {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSecondaryEmailsDelete;
  DBTEAMDeleteSecondaryEmailsArg *arg = [[DBTEAMDeleteSecondaryEmailsArg alloc] initWithEmailsToDelete:emailsToDelete];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSecondaryEmailsResendVerificationEmails:
    (NSArray<DBTEAMUserSecondaryEmailsArg *> *)emailsToResend {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSecondaryEmailsResendVerificationEmails;
  DBTEAMResendVerificationEmailArg *arg =
      [[DBTEAMResendVerificationEmailArg alloc] initWithEmailsToResend:emailsToResend];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSendWelcomeEmail:(DBTEAMUserSelectorArg *)userSelectorArg {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSendWelcomeEmail;
  DBTEAMUserSelectorArg *arg = userSelectorArg;
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSetAdminPermissionsV2:(DBTEAMUserSelectorArg *)user {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSetAdminPermissionsV2;
  DBTEAMMembersSetPermissions2Arg *arg = [[DBTEAMMembersSetPermissions2Arg alloc] initWithUser:user];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSetAdminPermissionsV2:(DBTEAMUserSelectorArg *)user dNewRoles:(NSArray<NSString *> *)dNewRoles {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSetAdminPermissionsV2;
  DBTEAMMembersSetPermissions2Arg *arg =
      [[DBTEAMMembersSetPermissions2Arg alloc] initWithUser:user dNewRoles:dNewRoles];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSetAdminPermissions:(DBTEAMUserSelectorArg *)user dNewRole:(DBTEAMAdminTier *)dNewRole {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSetAdminPermissions;
  DBTEAMMembersSetPermissionsArg *arg = [[DBTEAMMembersSetPermissionsArg alloc] initWithUser:user dNewRole:dNewRole];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSetProfileV2:(DBTEAMUserSelectorArg *)user {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSetProfileV2;
  DBTEAMMembersSetProfileArg *arg = [[DBTEAMMembersSetProfileArg alloc] initWithUser:user];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSetProfileV2:(DBTEAMUserSelectorArg *)user
                         dNewEmail:(NSString *)dNewEmail
                    dNewExternalId:(NSString *)dNewExternalId
                     dNewGivenName:(NSString *)dNewGivenName
                       dNewSurname:(NSString *)dNewSurname
                  dNewPersistentId:(NSString *)dNewPersistentId
         dNewIsDirectoryRestricted:(NSNumber *)dNewIsDirectoryRestricted {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSetProfileV2;
  DBTEAMMembersSetProfileArg *arg = [[DBTEAMMembersSetProfileArg alloc] initWithUser:user
                                                                           dNewEmail:dNewEmail
                                                                      dNewExternalId:dNewExternalId
                                                                       dNewGivenName:dNewGivenName
                                                                         dNewSurname:dNewSurname
                                                                    dNewPersistentId:dNewPersistentId
                                                           dNewIsDirectoryRestricted:dNewIsDirectoryRestricted];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSetProfile:(DBTEAMUserSelectorArg *)user {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSetProfile;
  DBTEAMMembersSetProfileArg *arg = [[DBTEAMMembersSetProfileArg alloc] initWithUser:user];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSetProfile:(DBTEAMUserSelectorArg *)user
                       dNewEmail:(NSString *)dNewEmail
                  dNewExternalId:(NSString *)dNewExternalId
                   dNewGivenName:(NSString *)dNewGivenName
                     dNewSurname:(NSString *)dNewSurname
                dNewPersistentId:(NSString *)dNewPersistentId
       dNewIsDirectoryRestricted:(NSNumber *)dNewIsDirectoryRestricted {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSetProfile;
  DBTEAMMembersSetProfileArg *arg = [[DBTEAMMembersSetProfileArg alloc] initWithUser:user
                                                                           dNewEmail:dNewEmail
                                                                      dNewExternalId:dNewExternalId
                                                                       dNewGivenName:dNewGivenName
                                                                         dNewSurname:dNewSurname
                                                                    dNewPersistentId:dNewPersistentId
                                                           dNewIsDirectoryRestricted:dNewIsDirectoryRestricted];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSetProfilePhotoV2:(DBTEAMUserSelectorArg *)user photo:(DBACCOUNTPhotoSourceArg *)photo {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSetProfilePhotoV2;
  DBTEAMMembersSetProfilePhotoArg *arg = [[DBTEAMMembersSetProfilePhotoArg alloc] initWithUser:user photo:photo];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSetProfilePhoto:(DBTEAMUserSelectorArg *)user photo:(DBACCOUNTPhotoSourceArg *)photo {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSetProfilePhoto;
  DBTEAMMembersSetProfilePhotoArg *arg = [[DBTEAMMembersSetProfilePhotoArg alloc] initWithUser:user photo:photo];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSuspend:(DBTEAMUserSelectorArg *)user {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSuspend;
  DBTEAMMembersDeactivateArg *arg = [[DBTEAMMembersDeactivateArg alloc] initWithUser:user];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersSuspend:(DBTEAMUserSelectorArg *)user wipeData:(NSNumber *)wipeData {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersSuspend;
  DBTEAMMembersDeactivateArg *arg = [[DBTEAMMembersDeactivateArg alloc] initWithUser:user wipeData:wipeData];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)membersUnsuspend:(DBTEAMUserSelectorArg *)user {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMMembersUnsuspend;
  DBTEAMMembersUnsuspendArg *arg = [[DBTEAMMembersUnsuspendArg alloc] initWithUser:user];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)namespacesList {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMNamespacesList;
  DBTEAMTeamNamespacesListArg *arg = [[DBTEAMTeamNamespacesListArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)namespacesList:(NSNumber *)limit {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMNamespacesList;
  DBTEAMTeamNamespacesListArg *arg = [[DBTEAMTeamNamespacesListArg alloc] initWithLimit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)namespacesListContinue:(NSString *)cursor {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMNamespacesListContinue;
  DBTEAMTeamNamespacesListContinueArg *arg = [[DBTEAMTeamNamespacesListContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesTemplateAdd:(NSString *)name
                        description_:(NSString *)description_
                              fields:(NSArray<DBFILEPROPERTIESPropertyFieldTemplate *> *)fields {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMPropertiesTemplateAdd;
  DBFILEPROPERTIESAddTemplateArg *arg =
      [[DBFILEPROPERTIESAddTemplateArg alloc] initWithName:name description_:description_ fields:fields];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesTemplateGet:(NSString *)templateId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMPropertiesTemplateGet;
  DBFILEPROPERTIESGetTemplateArg *arg = [[DBFILEPROPERTIESGetTemplateArg alloc] initWithTemplateId:templateId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesTemplateList {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMPropertiesTemplateList;
  return [self.client requestRpc:route arg:nil];
}

- (DBRpcTask *)propertiesTemplateUpdate:(NSString *)templateId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMPropertiesTemplateUpdate;
  DBFILEPROPERTIESUpdateTemplateArg *arg = [[DBFILEPROPERTIESUpdateTemplateArg alloc] initWithTemplateId:templateId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesTemplateUpdate:(NSString *)templateId
                                   name:(NSString *)name
                           description_:(NSString *)description_
                              addFields:(NSArray<DBFILEPROPERTIESPropertyFieldTemplate *> *)addFields {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMPropertiesTemplateUpdate;
  DBFILEPROPERTIESUpdateTemplateArg *arg = [[DBFILEPROPERTIESUpdateTemplateArg alloc] initWithTemplateId:templateId
                                                                                                    name:name
                                                                                            description_:description_
                                                                                               addFields:addFields];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)reportsGetActivity {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMReportsGetActivity;
  DBTEAMDateRange *arg = [[DBTEAMDateRange alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)reportsGetActivity:(NSDate *)startDate endDate:(NSDate *)endDate {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMReportsGetActivity;
  DBTEAMDateRange *arg = [[DBTEAMDateRange alloc] initWithStartDate:startDate endDate:endDate];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)reportsGetDevices {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMReportsGetDevices;
  DBTEAMDateRange *arg = [[DBTEAMDateRange alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)reportsGetDevices:(NSDate *)startDate endDate:(NSDate *)endDate {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMReportsGetDevices;
  DBTEAMDateRange *arg = [[DBTEAMDateRange alloc] initWithStartDate:startDate endDate:endDate];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)reportsGetMembership {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMReportsGetMembership;
  DBTEAMDateRange *arg = [[DBTEAMDateRange alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)reportsGetMembership:(NSDate *)startDate endDate:(NSDate *)endDate {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMReportsGetMembership;
  DBTEAMDateRange *arg = [[DBTEAMDateRange alloc] initWithStartDate:startDate endDate:endDate];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)reportsGetStorage {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMReportsGetStorage;
  DBTEAMDateRange *arg = [[DBTEAMDateRange alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)reportsGetStorage:(NSDate *)startDate endDate:(NSDate *)endDate {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMReportsGetStorage;
  DBTEAMDateRange *arg = [[DBTEAMDateRange alloc] initWithStartDate:startDate endDate:endDate];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderActivate:(NSString *)teamFolderId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderActivate;
  DBTEAMTeamFolderIdArg *arg = [[DBTEAMTeamFolderIdArg alloc] initWithTeamFolderId:teamFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderArchive:(NSString *)teamFolderId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderArchive;
  DBTEAMTeamFolderArchiveArg *arg = [[DBTEAMTeamFolderArchiveArg alloc] initWithTeamFolderId:teamFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderArchive:(NSString *)teamFolderId forceAsyncOff:(NSNumber *)forceAsyncOff {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderArchive;
  DBTEAMTeamFolderArchiveArg *arg =
      [[DBTEAMTeamFolderArchiveArg alloc] initWithTeamFolderId:teamFolderId forceAsyncOff:forceAsyncOff];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderArchiveCheck:(NSString *)asyncJobId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderArchiveCheck;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderCreate:(NSString *)name {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderCreate;
  DBTEAMTeamFolderCreateArg *arg = [[DBTEAMTeamFolderCreateArg alloc] initWithName:name];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderCreate:(NSString *)name syncSetting:(DBFILESSyncSettingArg *)syncSetting {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderCreate;
  DBTEAMTeamFolderCreateArg *arg = [[DBTEAMTeamFolderCreateArg alloc] initWithName:name syncSetting:syncSetting];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderGetInfo:(NSArray<NSString *> *)teamFolderIds {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderGetInfo;
  DBTEAMTeamFolderIdListArg *arg = [[DBTEAMTeamFolderIdListArg alloc] initWithTeamFolderIds:teamFolderIds];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderList {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderList;
  DBTEAMTeamFolderListArg *arg = [[DBTEAMTeamFolderListArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderList:(NSNumber *)limit {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderList;
  DBTEAMTeamFolderListArg *arg = [[DBTEAMTeamFolderListArg alloc] initWithLimit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderListContinue:(NSString *)cursor {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderListContinue;
  DBTEAMTeamFolderListContinueArg *arg = [[DBTEAMTeamFolderListContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderPermanentlyDelete:(NSString *)teamFolderId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderPermanentlyDelete;
  DBTEAMTeamFolderIdArg *arg = [[DBTEAMTeamFolderIdArg alloc] initWithTeamFolderId:teamFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderRename:(NSString *)teamFolderId name:(NSString *)name {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderRename;
  DBTEAMTeamFolderRenameArg *arg = [[DBTEAMTeamFolderRenameArg alloc] initWithTeamFolderId:teamFolderId name:name];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderUpdateSyncSettings:(NSString *)teamFolderId {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderUpdateSyncSettings;
  DBTEAMTeamFolderUpdateSyncSettingsArg *arg =
      [[DBTEAMTeamFolderUpdateSyncSettingsArg alloc] initWithTeamFolderId:teamFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)teamFolderUpdateSyncSettings:(NSString *)teamFolderId
                                syncSetting:(DBFILESSyncSettingArg *)syncSetting
                        contentSyncSettings:(NSArray<DBFILESContentSyncSettingArg *> *)contentSyncSettings {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTeamFolderUpdateSyncSettings;
  DBTEAMTeamFolderUpdateSyncSettingsArg *arg =
      [[DBTEAMTeamFolderUpdateSyncSettingsArg alloc] initWithTeamFolderId:teamFolderId
                                                              syncSetting:syncSetting
                                                      contentSyncSettings:contentSyncSettings];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)tokenGetAuthenticatedAdmin {
  DBRoute *route = DBTEAMRouteObjects.DBTEAMTokenGetAuthenticatedAdmin;
  return [self.client requestRpc:route arg:nil];
}

@end
