///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBTasks.h"

@class DBASYNCLaunchEmptyResult;
@class DBASYNCLaunchResultBase;
@class DBASYNCPollError;
@class DBFILESLookupError;
@class DBNilObject;
@class DBSHARINGAccessLevel;
@class DBSHARINGAclUpdatePolicy;
@class DBSHARINGAddFileMemberError;
@class DBSHARINGAddFolderMemberError;
@class DBSHARINGAddMember;
@class DBSHARINGAddMemberSelectorError;
@class DBSHARINGCreateSharedLinkError;
@class DBSHARINGCreateSharedLinkWithSettingsError;
@class DBSHARINGFileAction;
@class DBSHARINGFileMemberActionError;
@class DBSHARINGFileMemberActionIndividualResult;
@class DBSHARINGFileMemberActionResult;
@class DBSHARINGFileMemberRemoveActionResult;
@class DBSHARINGFilePermission;
@class DBSHARINGFolderAction;
@class DBSHARINGFolderPermission;
@class DBSHARINGFolderPolicy;
@class DBSHARINGGetFileMetadataBatchResult;
@class DBSHARINGGetFileMetadataError;
@class DBSHARINGGetFileMetadataIndividualResult;
@class DBSHARINGGetSharedLinkFileError;
@class DBSHARINGGetSharedLinksError;
@class DBSHARINGGetSharedLinksResult;
@class DBSHARINGGroupMembershipInfo;
@class DBSHARINGInsufficientQuotaAmounts;
@class DBSHARINGInviteeMembershipInfo;
@class DBSHARINGJobError;
@class DBSHARINGJobStatus;
@class DBSHARINGLinkMetadata;
@class DBSHARINGLinkPermissions;
@class DBSHARINGListFileMembersBatchResult;
@class DBSHARINGListFileMembersContinueError;
@class DBSHARINGListFileMembersError;
@class DBSHARINGListFileMembersIndividualResult;
@class DBSHARINGListFilesContinueError;
@class DBSHARINGListFilesResult;
@class DBSHARINGListFolderMembersContinueError;
@class DBSHARINGListFoldersContinueError;
@class DBSHARINGListFoldersResult;
@class DBSHARINGListSharedLinksError;
@class DBSHARINGListSharedLinksResult;
@class DBSHARINGMemberAccessLevelResult;
@class DBSHARINGMemberAction;
@class DBSHARINGMemberPolicy;
@class DBSHARINGMemberSelector;
@class DBSHARINGModifySharedLinkSettingsError;
@class DBSHARINGMountFolderError;
@class DBSHARINGParentFolderAccessInfo;
@class DBSHARINGPathLinkMetadata;
@class DBSHARINGPendingUploadMode;
@class DBSHARINGRelinquishFileMembershipError;
@class DBSHARINGRelinquishFolderMembershipError;
@class DBSHARINGRemoveFileMemberError;
@class DBSHARINGRemoveFolderMemberError;
@class DBSHARINGRemoveMemberJobStatus;
@class DBSHARINGRequestedVisibility;
@class DBSHARINGRevokeSharedLinkError;
@class DBSHARINGShareFolderError;
@class DBSHARINGShareFolderJobStatus;
@class DBSHARINGShareFolderLaunch;
@class DBSHARINGSharePathError;
@class DBSHARINGSharedFileMembers;
@class DBSHARINGSharedFileMetadata;
@class DBSHARINGSharedFolderAccessError;
@class DBSHARINGSharedFolderMemberError;
@class DBSHARINGSharedFolderMembers;
@class DBSHARINGSharedFolderMetadata;
@class DBSHARINGSharedLinkError;
@class DBSHARINGSharedLinkMetadata;
@class DBSHARINGSharedLinkPolicy;
@class DBSHARINGSharedLinkSettings;
@class DBSHARINGSharedLinkSettingsError;
@class DBSHARINGSharingFileAccessError;
@class DBSHARINGSharingUserError;
@class DBSHARINGTeamMemberInfo;
@class DBSHARINGTransferFolderError;
@class DBSHARINGUnmountFolderError;
@class DBSHARINGUnshareFileError;
@class DBSHARINGUnshareFolderError;
@class DBSHARINGUpdateFolderMemberError;
@class DBSHARINGUpdateFolderPolicyError;
@class DBSHARINGUserMembershipInfo;
@class DBSHARINGVisibility;
@class DBUSERSTeam;

@protocol DBTransportClient;

///
/// Routes for the `Sharing` namespace
///
@interface DBSHARINGRoutes : NSObject

/// An instance of the networking client that each route will use to submit a
/// request.
@property (nonatomic, readonly) id<DBTransportClient> _Nonnull client;

/// Initializes the `DBSHARINGRoutes` namespace container object with a
/// networking client.
- (nonnull instancetype)init:(id<DBTransportClient> _Nonnull)client;

///
/// Adds specified members to a file.
///
/// @param file File to which to add members.
/// @param members Members to add. Note that even an email address is given, this may result in a user being directy
/// added to the membership if that email is the user's main account email.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBSHARINGFileMemberActionResult *>` object
/// on success or a `DBSHARINGAddFileMemberError` object on failure.
///
- (DBRpcTask<NSArray<DBSHARINGFileMemberActionResult *> *, DBSHARINGAddFileMemberError *> * _Nonnull)
addFileMember:(NSString * _Nonnull)file
      members:(NSArray<DBSHARINGMemberSelector *> * _Nonnull)members;

///
/// Adds specified members to a file.
///
/// @param file File to which to add members.
/// @param members Members to add. Note that even an email address is given, this may result in a user being directy
/// added to the membership if that email is the user's main account email.
/// @param customMessage Message to send to added members in their invitation.
/// @param quiet Whether added members should be notified via device notifications of their invitation.
/// @param accessLevel AccessLevel union object, describing what access level we want to give new members.
/// @param addMessageAsComment If the custom message should be added as a comment on the file.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBSHARINGFileMemberActionResult *>` object
/// on success or a `DBSHARINGAddFileMemberError` object on failure.
///
- (DBRpcTask<NSArray<DBSHARINGFileMemberActionResult *> *, DBSHARINGAddFileMemberError *> * _Nonnull)
      addFileMember:(NSString * _Nonnull)file
            members:(NSArray<DBSHARINGMemberSelector *> * _Nonnull)members
      customMessage:(NSString * _Nullable)customMessage
              quiet:(NSNumber * _Nullable)quiet
        accessLevel:(DBSHARINGAccessLevel * _Nullable)accessLevel
addMessageAsComment:(NSNumber * _Nullable)addMessageAsComment;

///
/// Allows an owner or editor (if the ACL update policy allows) of a shared folder to add another member. For the new
/// member to get access to all the functionality for this folder, you will need to call `mountFolder` on their behalf.
/// Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
/// @param members The intended list of members to add.  Added members will receive invites to join the shared folder.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBSHARINGAddFolderMemberError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBSHARINGAddFolderMemberError *> * _Nonnull)
addFolderMember:(NSString * _Nonnull)sharedFolderId
        members:(NSArray<DBSHARINGAddMember *> * _Nonnull)members;

///
/// Allows an owner or editor (if the ACL update policy allows) of a shared folder to add another member. For the new
/// member to get access to all the functionality for this folder, you will need to call `mountFolder` on their behalf.
/// Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
/// @param members The intended list of members to add.  Added members will receive invites to join the shared folder.
/// @param quiet Whether added members should be notified via email and device notifications of their invite.
/// @param customMessage Optional message to display to added members in their invitation.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBSHARINGAddFolderMemberError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBSHARINGAddFolderMemberError *> * _Nonnull)
addFolderMember:(NSString * _Nonnull)sharedFolderId
        members:(NSArray<DBSHARINGAddMember *> * _Nonnull)members
          quiet:(NSNumber * _Nullable)quiet
  customMessage:(NSString * _Nullable)customMessage;

///
/// Changes a member's access on a shared file.
///
/// @param file File for which we are changing a member's access.
/// @param member The member whose access we are changing.
/// @param accessLevel The new access level for the member.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGFileMemberActionResult` object on success
/// or a `DBSHARINGFileMemberActionError` object on failure.
///
- (DBRpcTask<DBSHARINGFileMemberActionResult *, DBSHARINGFileMemberActionError *> * _Nonnull)
changeFileMemberAccess:(NSString * _Nonnull)file
                member:(DBSHARINGMemberSelector * _Nonnull)member
           accessLevel:(DBSHARINGAccessLevel * _Nonnull)accessLevel;

///
/// Returns the status of an asynchronous job. Apps must have full Dropbox access to use this endpoint.
///
/// @param asyncJobId Id of the asynchronous job. This is the value of a response returned from the method that launched
/// the job.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGJobStatus` object on success or a
/// `DBASYNCPollError` object on failure.
///
- (DBRpcTask<DBSHARINGJobStatus *, DBASYNCPollError *> * _Nonnull)checkJobStatus:(NSString * _Nonnull)asyncJobId;

///
/// Returns the status of an asynchronous job for sharing a folder. Apps must have full Dropbox access to use this
/// endpoint.
///
/// @param asyncJobId Id of the asynchronous job. This is the value of a response returned from the method that launched
/// the job.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGRemoveMemberJobStatus` object on success
/// or a `DBASYNCPollError` object on failure.
///
- (DBRpcTask<DBSHARINGRemoveMemberJobStatus *, DBASYNCPollError *> * _Nonnull)checkRemoveMemberJobStatus:
    (NSString * _Nonnull)asyncJobId;

///
/// Returns the status of an asynchronous job for sharing a folder. Apps must have full Dropbox access to use this
/// endpoint.
///
/// @param asyncJobId Id of the asynchronous job. This is the value of a response returned from the method that launched
/// the job.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGShareFolderJobStatus` object on success
/// or a `DBASYNCPollError` object on failure.
///
- (DBRpcTask<DBSHARINGShareFolderJobStatus *, DBASYNCPollError *> * _Nonnull)checkShareJobStatus:
    (NSString * _Nonnull)asyncJobId;

///
/// DEPRECATED: Create a shared link. If a shared link already exists for the given path, that link is returned. Note
/// that in the returned PathLinkMetadata, the `url` in `DBSHARINGPathLinkMetadata` field is the shortened URL if
/// `shortUrl` in `DBSHARINGCreateSharedLinkArg` argument is set to true. Previously, it was technically possible to
/// break a shared link by moving or renaming the corresponding file or folder. In the future, this will no longer be
/// the case, so your app shouldn't rely on this behavior. Instead, if your app needs to revoke a shared link, use
/// `revokeSharedLink`.
///
/// @param path The path to share.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGPathLinkMetadata` object on success or a
/// `DBSHARINGCreateSharedLinkError` object on failure.
///
- (DBRpcTask<DBSHARINGPathLinkMetadata *, DBSHARINGCreateSharedLinkError *> * _Nonnull)createSharedLink:
    (NSString * _Nonnull)path
    __deprecated_msg("create_shared_link is deprecated. Use create_shared_link_with_settings.");

///
/// DEPRECATED: Create a shared link. If a shared link already exists for the given path, that link is returned. Note
/// that in the returned PathLinkMetadata, the `url` in `DBSHARINGPathLinkMetadata` field is the shortened URL if
/// `shortUrl` in `DBSHARINGCreateSharedLinkArg` argument is set to true. Previously, it was technically possible to
/// break a shared link by moving or renaming the corresponding file or folder. In the future, this will no longer be
/// the case, so your app shouldn't rely on this behavior. Instead, if your app needs to revoke a shared link, use
/// `revokeSharedLink`.
///
/// @param path The path to share.
/// @param shortUrl Whether to return a shortened URL.
/// @param pendingUpload If it's okay to share a path that does not yet exist, set this to either `file` in
/// `DBSHARINGPendingUploadMode` or `folder` in `DBSHARINGPendingUploadMode` to indicate whether to assume it's a file
/// or folder.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGPathLinkMetadata` object on success or a
/// `DBSHARINGCreateSharedLinkError` object on failure.
///
- (DBRpcTask<DBSHARINGPathLinkMetadata *, DBSHARINGCreateSharedLinkError *> * _Nonnull)
createSharedLink:(NSString * _Nonnull)path
        shortUrl:(NSNumber * _Nullable)shortUrl
   pendingUpload:(DBSHARINGPendingUploadMode * _Nullable)pendingUpload
    __deprecated_msg("create_shared_link is deprecated. Use create_shared_link_with_settings.");

///
/// Create a shared link with custom settings. If no settings are given then the default visibility is `public` in
/// `DBSHARINGRequestedVisibility` (The resolved visibility, though, may depend on other aspects such as team and shared
/// folder settings).
///
/// @param path The path to be shared by the shared link
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedLinkMetadata` object on success or
/// a `DBSHARINGCreateSharedLinkWithSettingsError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedLinkMetadata *, DBSHARINGCreateSharedLinkWithSettingsError *> * _Nonnull)
createSharedLinkWithSettings:(NSString * _Nonnull)path;

///
/// Create a shared link with custom settings. If no settings are given then the default visibility is `public` in
/// `DBSHARINGRequestedVisibility` (The resolved visibility, though, may depend on other aspects such as team and shared
/// folder settings).
///
/// @param path The path to be shared by the shared link
/// @param settings The requested settings for the newly created shared link
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedLinkMetadata` object on success or
/// a `DBSHARINGCreateSharedLinkWithSettingsError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedLinkMetadata *, DBSHARINGCreateSharedLinkWithSettingsError *> * _Nonnull)
createSharedLinkWithSettings:(NSString * _Nonnull)path
                    settings:(DBSHARINGSharedLinkSettings * _Nullable)settings;

///
/// Returns shared file metadata.
///
/// @param file The file to query.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFileMetadata` object on success or
/// a `DBSHARINGGetFileMetadataError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFileMetadata *, DBSHARINGGetFileMetadataError *> * _Nonnull)getFileMetadata:
    (NSString * _Nonnull)file;

///
/// Returns shared file metadata.
///
/// @param file The file to query.
/// @param actions File actions to query.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFileMetadata` object on success or
/// a `DBSHARINGGetFileMetadataError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFileMetadata *, DBSHARINGGetFileMetadataError *> * _Nonnull)
getFileMetadata:(NSString * _Nonnull)file
        actions:(NSArray<DBSHARINGFileAction *> * _Nullable)actions;

///
/// Returns shared file metadata.
///
/// @param files The files to query.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBSHARINGGetFileMetadataBatchResult *>`
/// object on success or a `DBSHARINGSharingUserError` object on failure.
///
- (DBRpcTask<NSArray<DBSHARINGGetFileMetadataBatchResult *> *, DBSHARINGSharingUserError *> * _Nonnull)
getFileMetadataBatch:(NSArray<NSString *> * _Nonnull)files;

///
/// Returns shared file metadata.
///
/// @param files The files to query.
/// @param actions File actions to query.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBSHARINGGetFileMetadataBatchResult *>`
/// object on success or a `DBSHARINGSharingUserError` object on failure.
///
- (DBRpcTask<NSArray<DBSHARINGGetFileMetadataBatchResult *> *, DBSHARINGSharingUserError *> * _Nonnull)
getFileMetadataBatch:(NSArray<NSString *> * _Nonnull)files
             actions:(NSArray<DBSHARINGFileAction *> * _Nullable)actions;

///
/// Returns shared folder metadata by its folder ID. Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFolderMetadata` object on success
/// or a `DBSHARINGSharedFolderAccessError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFolderMetadata *, DBSHARINGSharedFolderAccessError *> * _Nonnull)getFolderMetadata:
    (NSString * _Nonnull)sharedFolderId;

///
/// Returns shared folder metadata by its folder ID. Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
/// @param actions This is a list indicating whether the returned folder data will include a boolean value  `allow` in
/// `DBSHARINGFolderPermission` that describes whether the current user can perform the  FolderAction on the folder.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFolderMetadata` object on success
/// or a `DBSHARINGSharedFolderAccessError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFolderMetadata *, DBSHARINGSharedFolderAccessError *> * _Nonnull)
getFolderMetadata:(NSString * _Nonnull)sharedFolderId
          actions:(NSArray<DBSHARINGFolderAction *> * _Nullable)actions;

///
/// Download the shared link's file from a user's Dropbox.
///
/// @param url URL of the shared link.
/// @param overwrite A boolean to set behavior in the event of a naming conflict. `YES` will overwrite conflicting file
/// at destination. `NO` will take no action, resulting in an `NSError` returned to the response handler in the event of
/// a file conflict.
/// @param destination The file url of the desired download output location.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedLinkMetadata` object on success or
/// a `DBSHARINGGetSharedLinkFileError` object on failure.
///
- (DBDownloadUrlTask<DBSHARINGSharedLinkMetadata *, DBSHARINGGetSharedLinkFileError *> * _Nonnull)
getSharedLinkFileUrl:(NSString * _Nonnull)url
           overwrite:(BOOL)overwrite
         destination:(NSURL * _Nonnull)destination;

///
/// Download the shared link's file from a user's Dropbox.
///
/// @param url URL of the shared link.
/// @param path If the shared link is to a folder, this parameter can be used to retrieve the metadata for a specific
/// file or sub-folder in this folder. A relative path should be used.
/// @param linkPassword If the shared link has a password, this parameter can be used.
/// @param overwrite A boolean to set behavior in the event of a naming conflict. `YES` will overwrite conflicting file
/// at destination. `NO` will take no action, resulting in an `NSError` returned to the response handler in the event of
/// a file conflict.
/// @param destination The file url of the desired download output location.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedLinkMetadata` object on success or
/// a `DBSHARINGGetSharedLinkFileError` object on failure.
///
- (DBDownloadUrlTask<DBSHARINGSharedLinkMetadata *, DBSHARINGGetSharedLinkFileError *> * _Nonnull)
getSharedLinkFileUrl:(NSString * _Nonnull)url
                path:(NSString * _Nullable)path
        linkPassword:(NSString * _Nullable)linkPassword
           overwrite:(BOOL)overwrite
         destination:(NSURL * _Nonnull)destination;

///
/// Download the shared link's file from a user's Dropbox.
///
/// @param url URL of the shared link.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedLinkMetadata` object on success or
/// a `DBSHARINGGetSharedLinkFileError` object on failure.
///
- (DBDownloadDataTask<DBSHARINGSharedLinkMetadata *, DBSHARINGGetSharedLinkFileError *> * _Nonnull)getSharedLinkFileData:
    (NSString * _Nonnull)url;

///
/// Download the shared link's file from a user's Dropbox.
///
/// @param url URL of the shared link.
/// @param path If the shared link is to a folder, this parameter can be used to retrieve the metadata for a specific
/// file or sub-folder in this folder. A relative path should be used.
/// @param linkPassword If the shared link has a password, this parameter can be used.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedLinkMetadata` object on success or
/// a `DBSHARINGGetSharedLinkFileError` object on failure.
///
- (DBDownloadDataTask<DBSHARINGSharedLinkMetadata *, DBSHARINGGetSharedLinkFileError *> * _Nonnull)
getSharedLinkFileData:(NSString * _Nonnull)url
                 path:(NSString * _Nullable)path
         linkPassword:(NSString * _Nullable)linkPassword;

///
/// Get the shared link's metadata.
///
/// @param url URL of the shared link.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedLinkMetadata` object on success or
/// a `DBSHARINGSharedLinkError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedLinkMetadata *, DBSHARINGSharedLinkError *> * _Nonnull)getSharedLinkMetadata:
    (NSString * _Nonnull)url;

///
/// Get the shared link's metadata.
///
/// @param url URL of the shared link.
/// @param path If the shared link is to a folder, this parameter can be used to retrieve the metadata for a specific
/// file or sub-folder in this folder. A relative path should be used.
/// @param linkPassword If the shared link has a password, this parameter can be used.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedLinkMetadata` object on success or
/// a `DBSHARINGSharedLinkError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedLinkMetadata *, DBSHARINGSharedLinkError *> * _Nonnull)
getSharedLinkMetadata:(NSString * _Nonnull)url
                 path:(NSString * _Nullable)path
         linkPassword:(NSString * _Nullable)linkPassword;

///
/// DEPRECATED: Returns a list of LinkMetadata objects for this user, including collection links. If no path is given,
/// returns a list of all shared links for the current user, including collection links. If a non-empty path is given,
/// returns a list of all shared links that allow access to the given path.  Collection links are never returned in this
/// case. Note that the url field in the response is never the shortened URL.
///
///
/// @return Through the response callback, the caller will receive a `DBSHARINGGetSharedLinksResult` object on success
/// or a `DBSHARINGGetSharedLinksError` object on failure.
///
- (DBRpcTask<DBSHARINGGetSharedLinksResult *, DBSHARINGGetSharedLinksError *> * _Nonnull)getSharedLinks
    __deprecated_msg("get_shared_links is deprecated. Use list_shared_links.");

///
/// DEPRECATED: Returns a list of LinkMetadata objects for this user, including collection links. If no path is given,
/// returns a list of all shared links for the current user, including collection links. If a non-empty path is given,
/// returns a list of all shared links that allow access to the given path.  Collection links are never returned in this
/// case. Note that the url field in the response is never the shortened URL.
///
/// @param path See `getSharedLinks` description.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGGetSharedLinksResult` object on success
/// or a `DBSHARINGGetSharedLinksError` object on failure.
///
- (DBRpcTask<DBSHARINGGetSharedLinksResult *, DBSHARINGGetSharedLinksError *> * _Nonnull)getSharedLinks:
    (NSString * _Nullable)path __deprecated_msg("get_shared_links is deprecated. Use list_shared_links.");

///
/// Use to obtain the members who have been invited to a file, both inherited and uninherited members.
///
/// @param file The file for which you want to see members.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFileMembers` object on success or a
/// `DBSHARINGListFileMembersError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFileMembers *, DBSHARINGListFileMembersError *> * _Nonnull)listFileMembers:
    (NSString * _Nonnull)file;

///
/// Use to obtain the members who have been invited to a file, both inherited and uninherited members.
///
/// @param file The file for which you want to see members.
/// @param actions The actions for which to return permissions on a member
/// @param includeInherited Whether to include members who only have access from a parent shared folder.
/// @param limit Number of members to return max per query. Defaults to 100 if no limit is specified.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFileMembers` object on success or a
/// `DBSHARINGListFileMembersError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFileMembers *, DBSHARINGListFileMembersError *> * _Nonnull)
 listFileMembers:(NSString * _Nonnull)file
         actions:(NSArray<DBSHARINGMemberAction *> * _Nullable)actions
includeInherited:(NSNumber * _Nullable)includeInherited
           limit:(NSNumber * _Nullable)limit;

///
/// Get members of multiple files at once. The arguments to this route are more limited, and the limit on query result
/// size per file is more strict. To customize the results more, use the individual file endpoint. Inherited users and
/// groups are not included in the result, and permissions are not returned for this endpoint.
///
/// @param files Files for which to return members.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBSHARINGListFileMembersBatchResult *>`
/// object on success or a `DBSHARINGSharingUserError` object on failure.
///
- (DBRpcTask<NSArray<DBSHARINGListFileMembersBatchResult *> *, DBSHARINGSharingUserError *> * _Nonnull)
listFileMembersBatch:(NSArray<NSString *> * _Nonnull)files;

///
/// Get members of multiple files at once. The arguments to this route are more limited, and the limit on query result
/// size per file is more strict. To customize the results more, use the individual file endpoint. Inherited users and
/// groups are not included in the result, and permissions are not returned for this endpoint.
///
/// @param files Files for which to return members.
/// @param limit Number of members to return max per query. Defaults to 10 if no limit is specified.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBSHARINGListFileMembersBatchResult *>`
/// object on success or a `DBSHARINGSharingUserError` object on failure.
///
- (DBRpcTask<NSArray<DBSHARINGListFileMembersBatchResult *> *, DBSHARINGSharingUserError *> * _Nonnull)
listFileMembersBatch:(NSArray<NSString *> * _Nonnull)files
               limit:(NSNumber * _Nullable)limit;

///
/// Once a cursor has been retrieved from `listFileMembers` or `listFileMembersBatch`, use this to paginate through all
/// shared file members.
///
/// @param cursor The cursor returned by your last call to `listFileMembers`, `listFileMembersContinue`, or
/// `listFileMembersBatch`.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFileMembers` object on success or a
/// `DBSHARINGListFileMembersContinueError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFileMembers *, DBSHARINGListFileMembersContinueError *> * _Nonnull)listFileMembersContinue:
    (NSString * _Nonnull)cursor;

///
/// Returns shared folder membership by its folder ID. Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFolderMembers` object on success or
/// a `DBSHARINGSharedFolderAccessError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFolderMembers *, DBSHARINGSharedFolderAccessError *> * _Nonnull)listFolderMembers:
    (NSString * _Nonnull)sharedFolderId;

///
/// Returns shared folder membership by its folder ID. Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFolderMembers` object on success or
/// a `DBSHARINGSharedFolderAccessError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFolderMembers *, DBSHARINGSharedFolderAccessError *> * _Nonnull)
listFolderMembers:(NSString * _Nonnull)sharedFolderId
          actions:(NSArray<DBSHARINGMemberAction *> * _Nullable)actions
            limit:(NSNumber * _Nullable)limit;

///
/// Once a cursor has been retrieved from `listFolderMembers`, use this to paginate through all shared folder members.
/// Apps must have full Dropbox access to use this endpoint.
///
/// @param cursor The cursor returned by your last call to `listFolderMembers` or `listFolderMembersContinue`.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFolderMembers` object on success or
/// a `DBSHARINGListFolderMembersContinueError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFolderMembers *, DBSHARINGListFolderMembersContinueError *> * _Nonnull)
listFolderMembersContinue:(NSString * _Nonnull)cursor;

///
/// Return the list of all shared folders the current user has access to. Apps must have full Dropbox access to use this
/// endpoint.
///
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListFoldersResult` object on success or a
/// `void` object on failure.
///
- (DBRpcTask<DBSHARINGListFoldersResult *, DBNilObject *> * _Nonnull)listFolders;

///
/// Return the list of all shared folders the current user has access to. Apps must have full Dropbox access to use this
/// endpoint.
///
/// @param limit The maximum number of results to return per request.
/// @param actions This is a list indicating whether each returned folder data entry will include a boolean field
/// `allow` in `DBSHARINGFolderPermission` that describes whether the current user can perform the `FolderAction` on the
/// folder.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListFoldersResult` object on success or a
/// `void` object on failure.
///
- (DBRpcTask<DBSHARINGListFoldersResult *, DBNilObject *> * _Nonnull)
listFolders:(NSNumber * _Nullable)limit
    actions:(NSArray<DBSHARINGFolderAction *> * _Nullable)actions;

///
/// Once a cursor has been retrieved from `listFolders`, use this to paginate through all shared folders. The cursor
/// must come from a previous call to `listFolders` or `listFoldersContinue`. Apps must have full Dropbox access to use
/// this endpoint.
///
/// @param cursor The cursor returned by the previous API call specified in the endpoint description.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListFoldersResult` object on success or a
/// `DBSHARINGListFoldersContinueError` object on failure.
///
- (DBRpcTask<DBSHARINGListFoldersResult *, DBSHARINGListFoldersContinueError *> * _Nonnull)listFoldersContinue:
    (NSString * _Nonnull)cursor;

///
/// Return the list of all shared folders the current user can mount or unmount. Apps must have full Dropbox access to
/// use this endpoint.
///
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListFoldersResult` object on success or a
/// `void` object on failure.
///
- (DBRpcTask<DBSHARINGListFoldersResult *, DBNilObject *> * _Nonnull)listMountableFolders;

///
/// Return the list of all shared folders the current user can mount or unmount. Apps must have full Dropbox access to
/// use this endpoint.
///
/// @param limit The maximum number of results to return per request.
/// @param actions This is a list indicating whether each returned folder data entry will include a boolean field
/// `allow` in `DBSHARINGFolderPermission` that describes whether the current user can perform the `FolderAction` on the
/// folder.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListFoldersResult` object on success or a
/// `void` object on failure.
///
- (DBRpcTask<DBSHARINGListFoldersResult *, DBNilObject *> * _Nonnull)
listMountableFolders:(NSNumber * _Nullable)limit
             actions:(NSArray<DBSHARINGFolderAction *> * _Nullable)actions;

///
/// Once a cursor has been retrieved from `listMountableFolders`, use this to paginate through all mountable shared
/// folders. The cursor must come from a previous call to `listMountableFolders` or `listMountableFoldersContinue`. Apps
/// must have full Dropbox access to use this endpoint.
///
/// @param cursor The cursor returned by the previous API call specified in the endpoint description.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListFoldersResult` object on success or a
/// `DBSHARINGListFoldersContinueError` object on failure.
///
- (DBRpcTask<DBSHARINGListFoldersResult *, DBSHARINGListFoldersContinueError *> * _Nonnull)listMountableFoldersContinue:
    (NSString * _Nonnull)cursor;

///
/// Returns a list of all files shared with current user.  Does not include files the user has received via shared
/// folders, and does  not include unclaimed invitations.
///
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListFilesResult` object on success or a
/// `DBSHARINGSharingUserError` object on failure.
///
- (DBRpcTask<DBSHARINGListFilesResult *, DBSHARINGSharingUserError *> * _Nonnull)listReceivedFiles;

///
/// Returns a list of all files shared with current user.  Does not include files the user has received via shared
/// folders, and does  not include unclaimed invitations.
///
/// @param limit Number of files to return max per query. Defaults to 100 if no limit is specified.
/// @param actions File actions to query.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListFilesResult` object on success or a
/// `DBSHARINGSharingUserError` object on failure.
///
- (DBRpcTask<DBSHARINGListFilesResult *, DBSHARINGSharingUserError *> * _Nonnull)
listReceivedFiles:(NSNumber * _Nullable)limit
          actions:(NSArray<DBSHARINGFileAction *> * _Nullable)actions;

///
/// Get more results with a cursor from `listReceivedFiles`.
///
/// @param cursor Cursor in `cursor` in `DBSHARINGListFilesResult`
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListFilesResult` object on success or a
/// `DBSHARINGListFilesContinueError` object on failure.
///
- (DBRpcTask<DBSHARINGListFilesResult *, DBSHARINGListFilesContinueError *> * _Nonnull)listReceivedFilesContinue:
    (NSString * _Nonnull)cursor;

///
/// List shared links of this user. If no path is given, returns a list of all shared links for the current user. If a
/// non-empty path is given, returns a list of all shared links that allow access to the given path - direct links to
/// the given path and links to parent folders of the given path. Links to parent folders can be suppressed by setting
/// direct_only to true.
///
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListSharedLinksResult` object on success
/// or a `DBSHARINGListSharedLinksError` object on failure.
///
- (DBRpcTask<DBSHARINGListSharedLinksResult *, DBSHARINGListSharedLinksError *> * _Nonnull)listSharedLinks;

///
/// List shared links of this user. If no path is given, returns a list of all shared links for the current user. If a
/// non-empty path is given, returns a list of all shared links that allow access to the given path - direct links to
/// the given path and links to parent folders of the given path. Links to parent folders can be suppressed by setting
/// direct_only to true.
///
/// @param path See `listSharedLinks` description.
/// @param cursor The cursor returned by your last call to `listSharedLinks`.
/// @param directOnly See `listSharedLinks` description.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGListSharedLinksResult` object on success
/// or a `DBSHARINGListSharedLinksError` object on failure.
///
- (DBRpcTask<DBSHARINGListSharedLinksResult *, DBSHARINGListSharedLinksError *> * _Nonnull)
listSharedLinks:(NSString * _Nullable)path
         cursor:(NSString * _Nullable)cursor
     directOnly:(NSNumber * _Nullable)directOnly;

///
/// Modify the shared link's settings. If the requested visibility conflict with the shared links policy of the team or
/// the shared folder (in case the linked file is part of a shared folder) then the `resolvedVisibility` in
/// `DBSHARINGLinkPermissions` of the returned SharedLinkMetadata will reflect the actual visibility of the shared link
/// and the `requestedVisibility` in `DBSHARINGLinkPermissions` will reflect the requested visibility.
///
/// @param url URL of the shared link to change its settings
/// @param settings Set of settings for the shared link.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedLinkMetadata` object on success or
/// a `DBSHARINGModifySharedLinkSettingsError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedLinkMetadata *, DBSHARINGModifySharedLinkSettingsError *> * _Nonnull)
modifySharedLinkSettings:(NSString * _Nonnull)url
                settings:(DBSHARINGSharedLinkSettings * _Nonnull)settings;

///
/// Modify the shared link's settings. If the requested visibility conflict with the shared links policy of the team or
/// the shared folder (in case the linked file is part of a shared folder) then the `resolvedVisibility` in
/// `DBSHARINGLinkPermissions` of the returned SharedLinkMetadata will reflect the actual visibility of the shared link
/// and the `requestedVisibility` in `DBSHARINGLinkPermissions` will reflect the requested visibility.
///
/// @param url URL of the shared link to change its settings
/// @param settings Set of settings for the shared link.
/// @param removeExpiration If set to true, removes the expiration of the shared link.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedLinkMetadata` object on success or
/// a `DBSHARINGModifySharedLinkSettingsError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedLinkMetadata *, DBSHARINGModifySharedLinkSettingsError *> * _Nonnull)
modifySharedLinkSettings:(NSString * _Nonnull)url
                settings:(DBSHARINGSharedLinkSettings * _Nonnull)settings
        removeExpiration:(NSNumber * _Nullable)removeExpiration;

///
/// The current user mounts the designated folder. Mount a shared folder for a user after they have been added as a
/// member. Once mounted, the shared folder will appear in their Dropbox. Apps must have full Dropbox access to use this
/// endpoint.
///
/// @param sharedFolderId The ID of the shared folder to mount.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFolderMetadata` object on success
/// or a `DBSHARINGMountFolderError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFolderMetadata *, DBSHARINGMountFolderError *> * _Nonnull)mountFolder:
    (NSString * _Nonnull)sharedFolderId;

///
/// The current user relinquishes their membership in the designated file. Note that the current user may still have
/// inherited access to this file through the parent folder. Apps must have full Dropbox access to use this endpoint.
///
/// @param file The path or id for the file.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBSHARINGRelinquishFileMembershipError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBSHARINGRelinquishFileMembershipError *> * _Nonnull)relinquishFileMembership:
    (NSString * _Nonnull)file;

///
/// The current user relinquishes their membership in the designated shared folder and will no longer have access to the
/// folder.  A folder owner cannot relinquish membership in their own folder. This will run synchronously if
/// leave_a_copy is false, and asynchronously if leave_a_copy is true. Apps must have full Dropbox access to use this
/// endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
///
/// @return Through the response callback, the caller will receive a `DBASYNCLaunchEmptyResult` object on success or a
/// `DBSHARINGRelinquishFolderMembershipError` object on failure.
///
- (DBRpcTask<DBASYNCLaunchEmptyResult *, DBSHARINGRelinquishFolderMembershipError *> * _Nonnull)
relinquishFolderMembership:(NSString * _Nonnull)sharedFolderId;

///
/// The current user relinquishes their membership in the designated shared folder and will no longer have access to the
/// folder.  A folder owner cannot relinquish membership in their own folder. This will run synchronously if
/// leave_a_copy is false, and asynchronously if leave_a_copy is true. Apps must have full Dropbox access to use this
/// endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
/// @param leaveACopy Keep a copy of the folder's contents upon relinquishing membership.
///
/// @return Through the response callback, the caller will receive a `DBASYNCLaunchEmptyResult` object on success or a
/// `DBSHARINGRelinquishFolderMembershipError` object on failure.
///
- (DBRpcTask<DBASYNCLaunchEmptyResult *, DBSHARINGRelinquishFolderMembershipError *> * _Nonnull)
relinquishFolderMembership:(NSString * _Nonnull)sharedFolderId
                leaveACopy:(NSNumber * _Nullable)leaveACopy;

///
/// DEPRECATED: Identical to remove_file_member_2 but with less information returned.
///
/// @param file File from which to remove members.
/// @param member Member to remove from this file. Note that even if an email is specified, it may result in the removal
/// of a user (not an invitee) if the user's main account corresponds to that email address.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGFileMemberActionIndividualResult` object
/// on success or a `DBSHARINGRemoveFileMemberError` object on failure.
///
- (DBRpcTask<DBSHARINGFileMemberActionIndividualResult *, DBSHARINGRemoveFileMemberError *> * _Nonnull)
removeFileMember:(NSString * _Nonnull)file
          member:(DBSHARINGMemberSelector * _Nonnull)member
    __deprecated_msg("remove_file_member is deprecated. Use remove_file_member_2.");

///
/// Removes a specified member from the file.
///
/// @param file File from which to remove members.
/// @param member Member to remove from this file. Note that even if an email is specified, it may result in the removal
/// of a user (not an invitee) if the user's main account corresponds to that email address.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGFileMemberRemoveActionResult` object on
/// success or a `DBSHARINGRemoveFileMemberError` object on failure.
///
- (DBRpcTask<DBSHARINGFileMemberRemoveActionResult *, DBSHARINGRemoveFileMemberError *> * _Nonnull)
removeFileMember2:(NSString * _Nonnull)file
           member:(DBSHARINGMemberSelector * _Nonnull)member;

///
/// Allows an owner or editor (if the ACL update policy allows) of a shared folder to remove another member. Apps must
/// have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
/// @param member The member to remove from the folder.
/// @param leaveACopy If true, the removed user will keep their copy of the folder after it's unshared, assuming it was
/// mounted. Otherwise, it will be removed from their Dropbox. Also, this must be set to false when kicking a group.
///
/// @return Through the response callback, the caller will receive a `DBASYNCLaunchResultBase` object on success or a
/// `DBSHARINGRemoveFolderMemberError` object on failure.
///
- (DBRpcTask<DBASYNCLaunchResultBase *, DBSHARINGRemoveFolderMemberError *> * _Nonnull)
removeFolderMember:(NSString * _Nonnull)sharedFolderId
            member:(DBSHARINGMemberSelector * _Nonnull)member
        leaveACopy:(NSNumber * _Nonnull)leaveACopy;

///
/// Revoke a shared link. Note that even after revoking a shared link to a file, the file may be accessible if there are
/// shared links leading to any of the file parent folders. To list all shared links that enable access to a specific
/// file, you can use the `listSharedLinks` with the file as the `path` in `DBSHARINGListSharedLinksArg` argument.
///
/// @param url URL of the shared link.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBSHARINGRevokeSharedLinkError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBSHARINGRevokeSharedLinkError *> * _Nonnull)revokeSharedLink:(NSString * _Nonnull)url;

///
/// Share a folder with collaborators. Most sharing will be completed synchronously. Large folders will be completed
/// asynchronously. To make testing the async case repeatable, set `ShareFolderArg.force_async`. If a `asyncJobId` in
/// `DBSHARINGShareFolderLaunch` is returned, you'll need to call `checkShareJobStatus` until the action completes to
/// get the metadata for the folder. Apps must have full Dropbox access to use this endpoint.
///
/// @param path The path to the folder to share. If it does not exist, then a new one is created.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGShareFolderLaunch` object on success or a
/// `DBSHARINGShareFolderError` object on failure.
///
- (DBRpcTask<DBSHARINGShareFolderLaunch *, DBSHARINGShareFolderError *> * _Nonnull)shareFolder:(NSString * _Nonnull)path;

///
/// Share a folder with collaborators. Most sharing will be completed synchronously. Large folders will be completed
/// asynchronously. To make testing the async case repeatable, set `ShareFolderArg.force_async`. If a `asyncJobId` in
/// `DBSHARINGShareFolderLaunch` is returned, you'll need to call `checkShareJobStatus` until the action completes to
/// get the metadata for the folder. Apps must have full Dropbox access to use this endpoint.
///
/// @param path The path to the folder to share. If it does not exist, then a new one is created.
/// @param memberPolicy Who can be a member of this shared folder. Only applicable if the current user is on a team.
/// @param aclUpdatePolicy Who can add and remove members of this shared folder.
/// @param sharedLinkPolicy The policy to apply to shared links created for content inside this shared folder.  The
/// current user must be on a team to set this policy to `members` in `DBSHARINGSharedLinkPolicy`.
/// @param forceAsync Whether to force the share to happen asynchronously.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGShareFolderLaunch` object on success or a
/// `DBSHARINGShareFolderError` object on failure.
///
- (DBRpcTask<DBSHARINGShareFolderLaunch *, DBSHARINGShareFolderError *> * _Nonnull)
     shareFolder:(NSString * _Nonnull)path
    memberPolicy:(DBSHARINGMemberPolicy * _Nullable)memberPolicy
 aclUpdatePolicy:(DBSHARINGAclUpdatePolicy * _Nullable)aclUpdatePolicy
sharedLinkPolicy:(DBSHARINGSharedLinkPolicy * _Nullable)sharedLinkPolicy
      forceAsync:(NSNumber * _Nullable)forceAsync;

///
/// Transfer ownership of a shared folder to a member of the shared folder. User must have `owner` in
/// `DBSHARINGAccessLevel` access to the shared folder to perform a transfer. Apps must have full Dropbox access to use
/// this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
/// @param toDropboxId A account or team member ID to transfer ownership to.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBSHARINGTransferFolderError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBSHARINGTransferFolderError *> * _Nonnull)transferFolder:(NSString * _Nonnull)sharedFolderId
                                                                         toDropboxId:(NSString * _Nonnull)toDropboxId;

///
/// The current user unmounts the designated folder. They can re-mount the folder at a later time using `mountFolder`.
/// Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBSHARINGUnmountFolderError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBSHARINGUnmountFolderError *> * _Nonnull)unmountFolder:(NSString * _Nonnull)sharedFolderId;

///
/// Remove all members from this file. Does not remove inherited members.
///
/// @param file The file to unshare.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBSHARINGUnshareFileError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBSHARINGUnshareFileError *> * _Nonnull)unshareFile:(NSString * _Nonnull)file;

///
/// Allows a shared folder owner to unshare the folder. You'll need to call `checkJobStatus` to determine if the action
/// has completed successfully. Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
///
/// @return Through the response callback, the caller will receive a `DBASYNCLaunchEmptyResult` object on success or a
/// `DBSHARINGUnshareFolderError` object on failure.
///
- (DBRpcTask<DBASYNCLaunchEmptyResult *, DBSHARINGUnshareFolderError *> * _Nonnull)unshareFolder:
    (NSString * _Nonnull)sharedFolderId;

///
/// Allows a shared folder owner to unshare the folder. You'll need to call `checkJobStatus` to determine if the action
/// has completed successfully. Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
/// @param leaveACopy If true, members of this shared folder will get a copy of this folder after it's unshared.
/// Otherwise, it will be removed from their Dropbox. The current user, who is an owner, will always retain their copy.
///
/// @return Through the response callback, the caller will receive a `DBASYNCLaunchEmptyResult` object on success or a
/// `DBSHARINGUnshareFolderError` object on failure.
///
- (DBRpcTask<DBASYNCLaunchEmptyResult *, DBSHARINGUnshareFolderError *> * _Nonnull)
unshareFolder:(NSString * _Nonnull)sharedFolderId
   leaveACopy:(NSNumber * _Nullable)leaveACopy;

///
/// Allows an owner or editor of a shared folder to update another member's permissions. Apps must have full Dropbox
/// access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
/// @param member The member of the shared folder to update.  Only the `dropboxId` in `DBSHARINGMemberSelector` may be
/// set at this time.
/// @param accessLevel The new access level for member. `owner` in `DBSHARINGAccessLevel` is disallowed.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGMemberAccessLevelResult` object on
/// success or a `DBSHARINGUpdateFolderMemberError` object on failure.
///
- (DBRpcTask<DBSHARINGMemberAccessLevelResult *, DBSHARINGUpdateFolderMemberError *> * _Nonnull)
updateFolderMember:(NSString * _Nonnull)sharedFolderId
            member:(DBSHARINGMemberSelector * _Nonnull)member
       accessLevel:(DBSHARINGAccessLevel * _Nonnull)accessLevel;

///
/// Update the sharing policies for a shared folder. User must have `owner` in `DBSHARINGAccessLevel` access to the
/// shared folder to update its policies. Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFolderMetadata` object on success
/// or a `DBSHARINGUpdateFolderPolicyError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFolderMetadata *, DBSHARINGUpdateFolderPolicyError *> * _Nonnull)updateFolderPolicy:
    (NSString * _Nonnull)sharedFolderId;

///
/// Update the sharing policies for a shared folder. User must have `owner` in `DBSHARINGAccessLevel` access to the
/// shared folder to update its policies. Apps must have full Dropbox access to use this endpoint.
///
/// @param sharedFolderId The ID for the shared folder.
/// @param memberPolicy Who can be a member of this shared folder. Only applicable if the current user is on a team.
/// @param aclUpdatePolicy Who can add and remove members of this shared folder.
/// @param sharedLinkPolicy The policy to apply to shared links created for content inside this shared folder. The
/// current user must be on a team to set this policy to `members` in `DBSHARINGSharedLinkPolicy`.
///
/// @return Through the response callback, the caller will receive a `DBSHARINGSharedFolderMetadata` object on success
/// or a `DBSHARINGUpdateFolderPolicyError` object on failure.
///
- (DBRpcTask<DBSHARINGSharedFolderMetadata *, DBSHARINGUpdateFolderPolicyError *> * _Nonnull)
updateFolderPolicy:(NSString * _Nonnull)sharedFolderId
      memberPolicy:(DBSHARINGMemberPolicy * _Nullable)memberPolicy
   aclUpdatePolicy:(DBSHARINGAclUpdatePolicy * _Nullable)aclUpdatePolicy
  sharedLinkPolicy:(DBSHARINGSharedLinkPolicy * _Nullable)sharedLinkPolicy;

@end
