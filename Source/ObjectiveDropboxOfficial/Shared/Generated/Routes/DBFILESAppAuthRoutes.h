///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBTasks.h"

@class DBASYNCPollError;
@class DBFILEPROPERTIESAddPropertiesError;
@class DBFILEPROPERTIESGetTemplateResult;
@class DBFILEPROPERTIESInvalidPropertyGroupError;
@class DBFILEPROPERTIESListTemplateResult;
@class DBFILEPROPERTIESLookUpPropertiesError;
@class DBFILEPROPERTIESLookupError;
@class DBFILEPROPERTIESPropertyField;
@class DBFILEPROPERTIESPropertyFieldTemplate;
@class DBFILEPROPERTIESPropertyGroup;
@class DBFILEPROPERTIESPropertyGroupUpdate;
@class DBFILEPROPERTIESRemovePropertiesError;
@class DBFILEPROPERTIESTemplateError;
@class DBFILEPROPERTIESTemplateFilterBase;
@class DBFILEPROPERTIESUpdatePropertiesError;
@class DBFILESAlphaGetMetadataError;
@class DBFILESCommitInfo;
@class DBFILESCreateFolderBatchError;
@class DBFILESCreateFolderBatchJobStatus;
@class DBFILESCreateFolderBatchLaunch;
@class DBFILESCreateFolderBatchResult;
@class DBFILESCreateFolderError;
@class DBFILESCreateFolderResult;
@class DBFILESDeleteArg;
@class DBFILESDeleteBatchError;
@class DBFILESDeleteBatchJobStatus;
@class DBFILESDeleteBatchLaunch;
@class DBFILESDeleteBatchResult;
@class DBFILESDeleteError;
@class DBFILESDeleteResult;
@class DBFILESDownloadError;
@class DBFILESDownloadZipError;
@class DBFILESDownloadZipResult;
@class DBFILESExportError;
@class DBFILESExportInfo;
@class DBFILESExportMetadata;
@class DBFILESExportResult;
@class DBFILESFileCategory;
@class DBFILESFileLockMetadata;
@class DBFILESFileMetadata;
@class DBFILESFileSharingInfo;
@class DBFILESFileStatus;
@class DBFILESFolderMetadata;
@class DBFILESFolderSharingInfo;
@class DBFILESGetCopyReferenceError;
@class DBFILESGetCopyReferenceResult;
@class DBFILESGetMetadataError;
@class DBFILESGetTemporaryLinkError;
@class DBFILESGetTemporaryLinkResult;
@class DBFILESGetTemporaryUploadLinkResult;
@class DBFILESGetThumbnailBatchError;
@class DBFILESGetThumbnailBatchResult;
@class DBFILESGetThumbnailBatchResultEntry;
@class DBFILESImportFormat;
@class DBFILESListFolderContinueError;
@class DBFILESListFolderError;
@class DBFILESListFolderGetLatestCursorResult;
@class DBFILESListFolderLongpollError;
@class DBFILESListFolderLongpollResult;
@class DBFILESListFolderResult;
@class DBFILESListRevisionsError;
@class DBFILESListRevisionsMode;
@class DBFILESListRevisionsResult;
@class DBFILESLockConflictError;
@class DBFILESLockFileArg;
@class DBFILESLockFileBatchResult;
@class DBFILESLockFileError;
@class DBFILESLockFileResultEntry;
@class DBFILESLookupError;
@class DBFILESMediaInfo;
@class DBFILESMetadata;
@class DBFILESMinimalFileLinkMetadata;
@class DBFILESMoveIntoVaultError;
@class DBFILESPaperCreateError;
@class DBFILESPaperCreateResult;
@class DBFILESPaperDocUpdatePolicy;
@class DBFILESPaperUpdateError;
@class DBFILESPaperUpdateResult;
@class DBFILESPathOrLink;
@class DBFILESPreviewError;
@class DBFILESPreviewResult;
@class DBFILESRelocationBatchError;
@class DBFILESRelocationBatchJobStatus;
@class DBFILESRelocationBatchLaunch;
@class DBFILESRelocationBatchResult;
@class DBFILESRelocationBatchV2JobStatus;
@class DBFILESRelocationBatchV2Launch;
@class DBFILESRelocationBatchV2Result;
@class DBFILESRelocationError;
@class DBFILESRelocationPath;
@class DBFILESRelocationResult;
@class DBFILESRestoreError;
@class DBFILESSaveCopyReferenceError;
@class DBFILESSaveCopyReferenceResult;
@class DBFILESSaveUrlError;
@class DBFILESSaveUrlJobStatus;
@class DBFILESSaveUrlResult;
@class DBFILESSearchError;
@class DBFILESSearchMatch;
@class DBFILESSearchMatchFieldOptions;
@class DBFILESSearchMatchV2;
@class DBFILESSearchMode;
@class DBFILESSearchOptions;
@class DBFILESSearchOrderBy;
@class DBFILESSearchResult;
@class DBFILESSearchV2Result;
@class DBFILESSharedLink;
@class DBFILESSharedLinkFileInfo;
@class DBFILESSymlinkInfo;
@class DBFILESThumbnailArg;
@class DBFILESThumbnailError;
@class DBFILESThumbnailFormat;
@class DBFILESThumbnailMode;
@class DBFILESThumbnailSize;
@class DBFILESThumbnailV2Error;
@class DBFILESUnlockFileArg;
@class DBFILESUploadError;
@class DBFILESUploadErrorWithProperties;
@class DBFILESUploadSessionCursor;
@class DBFILESUploadSessionFinishArg;
@class DBFILESUploadSessionFinishBatchJobStatus;
@class DBFILESUploadSessionFinishBatchLaunch;
@class DBFILESUploadSessionFinishBatchResult;
@class DBFILESUploadSessionFinishError;
@class DBFILESUploadSessionLookupError;
@class DBFILESUploadSessionOffsetError;
@class DBFILESUploadSessionStartError;
@class DBFILESUploadSessionStartResult;
@class DBFILESUploadSessionType;
@class DBFILESUploadWriteFailed;
@class DBFILESWriteError;
@class DBFILESWriteMode;
@class DBNilObject;

@protocol DBTransportClient;

///
/// Routes for the `Files` namespace
///

NS_ASSUME_NONNULL_BEGIN

@interface DBFILESAppAuthRoutes : NSObject

/// An instance of the networking client that each route will use to submit a
/// request.
@property (nonatomic, readonly) id<DBTransportClient> client;

/// Initializes the `DBFILESAppAuthRoutes` namespace container object with a
/// networking client.
- (instancetype)init:(id<DBTransportClient>)client;

///
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
///
/// @param resource Information specifying which file to preview. This could be a path to a file, a shared link pointing
/// to a file, or a shared link pointing to a folder, with a relative path.
/// @param overwrite A boolean to set behavior in the event of a naming conflict. `YES` will overwrite conflicting file
/// at destination. `NO` will take no action, resulting in an `NSError` returned to the response handler in the event of
/// a file conflict.
/// @param destination The file url of the desired download output location.
///
/// @return Through the response callback, the caller will receive a `DBFILESPreviewResult` object on success or a
/// `DBFILESThumbnailV2Error` object on failure.
///
- (DBDownloadUrlTask<DBFILESPreviewResult *, DBFILESThumbnailV2Error *> *)getThumbnailV2Url:
                                                                              (DBFILESPathOrLink *)resource
                                                                                  overwrite:(BOOL)overwrite
                                                                                destination:(NSURL *)destination;

///
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
///
/// @param resource Information specifying which file to preview. This could be a path to a file, a shared link pointing
/// to a file, or a shared link pointing to a folder, with a relative path.
/// @param format The format for the thumbnail image, jpeg (default) or png. For  images that are photos, jpeg should be
/// preferred, while png is  better for screenshots and digital arts.
/// @param size The size for the thumbnail image.
/// @param mode How to resize and crop the image to achieve the desired size.
/// @param overwrite A boolean to set behavior in the event of a naming conflict. `YES` will overwrite conflicting file
/// at destination. `NO` will take no action, resulting in an `NSError` returned to the response handler in the event of
/// a file conflict.
/// @param destination The file url of the desired download output location.
///
/// @return Through the response callback, the caller will receive a `DBFILESPreviewResult` object on success or a
/// `DBFILESThumbnailV2Error` object on failure.
///
- (DBDownloadUrlTask<DBFILESPreviewResult *, DBFILESThumbnailV2Error *> *)
getThumbnailV2Url:(DBFILESPathOrLink *)resource
           format:(nullable DBFILESThumbnailFormat *)format
             size:(nullable DBFILESThumbnailSize *)size
             mode:(nullable DBFILESThumbnailMode *)mode
        overwrite:(BOOL)overwrite
      destination:(NSURL *)destination;

///
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
///
/// @param resource Information specifying which file to preview. This could be a path to a file, a shared link pointing
/// to a file, or a shared link pointing to a folder, with a relative path.
/// @param overwrite A boolean to set behavior in the event of a naming conflict. `YES` will overwrite conflicting file
/// at destination. `NO` will take no action, resulting in an `NSError` returned to the response handler in the event of
/// a file conflict.
/// @param destination The file url of the desired download output location.
/// @param byteOffsetStart For partial file download. Download file beginning from this starting byte position. Must
/// include valid end range value.
/// @param byteOffsetEnd For partial file download. Download file up until this ending byte position. Must include valid
/// start range value.
///
/// @return Through the response callback, the caller will receive a `DBFILESPreviewResult` object on success or a
/// `DBFILESThumbnailV2Error` object on failure.
///
- (DBDownloadUrlTask<DBFILESPreviewResult *, DBFILESThumbnailV2Error *> *)getThumbnailV2Url:
                                                                              (DBFILESPathOrLink *)resource
                                                                                  overwrite:(BOOL)overwrite
                                                                                destination:(NSURL *)destination
                                                                            byteOffsetStart:(NSNumber *)byteOffsetStart
                                                                              byteOffsetEnd:(NSNumber *)byteOffsetEnd;

///
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
///
/// @param resource Information specifying which file to preview. This could be a path to a file, a shared link pointing
/// to a file, or a shared link pointing to a folder, with a relative path.
/// @param format The format for the thumbnail image, jpeg (default) or png. For  images that are photos, jpeg should be
/// preferred, while png is  better for screenshots and digital arts.
/// @param size The size for the thumbnail image.
/// @param mode How to resize and crop the image to achieve the desired size.
/// @param overwrite A boolean to set behavior in the event of a naming conflict. `YES` will overwrite conflicting file
/// at destination. `NO` will take no action, resulting in an `NSError` returned to the response handler in the event of
/// a file conflict.
/// @param destination The file url of the desired download output location.
/// @param byteOffsetStart For partial file download. Download file beginning from this starting byte position. Must
/// include valid end range value.
/// @param byteOffsetEnd For partial file download. Download file up until this ending byte position. Must include valid
/// start range value.
///
/// @return Through the response callback, the caller will receive a `DBFILESPreviewResult` object on success or a
/// `DBFILESThumbnailV2Error` object on failure.
///
- (DBDownloadUrlTask<DBFILESPreviewResult *, DBFILESThumbnailV2Error *> *)
getThumbnailV2Url:(DBFILESPathOrLink *)resource
           format:(nullable DBFILESThumbnailFormat *)format
             size:(nullable DBFILESThumbnailSize *)size
             mode:(nullable DBFILESThumbnailMode *)mode
        overwrite:(BOOL)overwrite
      destination:(NSURL *)destination
  byteOffsetStart:(NSNumber *)byteOffsetStart
    byteOffsetEnd:(NSNumber *)byteOffsetEnd;

///
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
///
/// @param resource Information specifying which file to preview. This could be a path to a file, a shared link pointing
/// to a file, or a shared link pointing to a folder, with a relative path.
///
/// @return Through the response callback, the caller will receive a `DBFILESPreviewResult` object on success or a
/// `DBFILESThumbnailV2Error` object on failure.
///
- (DBDownloadDataTask<DBFILESPreviewResult *, DBFILESThumbnailV2Error *> *)getThumbnailV2Data:
    (DBFILESPathOrLink *)resource;

///
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
///
/// @param resource Information specifying which file to preview. This could be a path to a file, a shared link pointing
/// to a file, or a shared link pointing to a folder, with a relative path.
/// @param format The format for the thumbnail image, jpeg (default) or png. For  images that are photos, jpeg should be
/// preferred, while png is  better for screenshots and digital arts.
/// @param size The size for the thumbnail image.
/// @param mode How to resize and crop the image to achieve the desired size.
///
/// @return Through the response callback, the caller will receive a `DBFILESPreviewResult` object on success or a
/// `DBFILESThumbnailV2Error` object on failure.
///
- (DBDownloadDataTask<DBFILESPreviewResult *, DBFILESThumbnailV2Error *> *)
getThumbnailV2Data:(DBFILESPathOrLink *)resource
            format:(nullable DBFILESThumbnailFormat *)format
              size:(nullable DBFILESThumbnailSize *)size
              mode:(nullable DBFILESThumbnailMode *)mode;

///
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
///
/// @param resource Information specifying which file to preview. This could be a path to a file, a shared link pointing
/// to a file, or a shared link pointing to a folder, with a relative path.
/// @param byteOffsetStart For partial file download. Download file beginning from this starting byte position. Must
/// include valid end range value.
/// @param byteOffsetEnd For partial file download. Download file up until this ending byte position. Must include valid
/// start range value.
///
/// @return Through the response callback, the caller will receive a `DBFILESPreviewResult` object on success or a
/// `DBFILESThumbnailV2Error` object on failure.
///
- (DBDownloadDataTask<DBFILESPreviewResult *, DBFILESThumbnailV2Error *> *)
getThumbnailV2Data:(DBFILESPathOrLink *)resource
   byteOffsetStart:(NSNumber *)byteOffsetStart
     byteOffsetEnd:(NSNumber *)byteOffsetEnd;

///
/// Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg,
/// png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail.
///
/// @param resource Information specifying which file to preview. This could be a path to a file, a shared link pointing
/// to a file, or a shared link pointing to a folder, with a relative path.
/// @param format The format for the thumbnail image, jpeg (default) or png. For  images that are photos, jpeg should be
/// preferred, while png is  better for screenshots and digital arts.
/// @param size The size for the thumbnail image.
/// @param mode How to resize and crop the image to achieve the desired size.
/// @param byteOffsetStart For partial file download. Download file beginning from this starting byte position. Must
/// include valid end range value.
/// @param byteOffsetEnd For partial file download. Download file up until this ending byte position. Must include valid
/// start range value.
///
/// @return Through the response callback, the caller will receive a `DBFILESPreviewResult` object on success or a
/// `DBFILESThumbnailV2Error` object on failure.
///
- (DBDownloadDataTask<DBFILESPreviewResult *, DBFILESThumbnailV2Error *> *)
getThumbnailV2Data:(DBFILESPathOrLink *)resource
            format:(nullable DBFILESThumbnailFormat *)format
              size:(nullable DBFILESThumbnailSize *)size
              mode:(nullable DBFILESThumbnailMode *)mode
   byteOffsetStart:(NSNumber *)byteOffsetStart
     byteOffsetEnd:(NSNumber *)byteOffsetEnd;

@end

NS_ASSUME_NONNULL_END
