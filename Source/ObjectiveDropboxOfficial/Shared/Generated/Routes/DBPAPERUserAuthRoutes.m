///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <ObjectiveDropboxOfficial/DBPAPERAddMember.h>
#import <ObjectiveDropboxOfficial/DBPAPERAddPaperDocUser.h>
#import <ObjectiveDropboxOfficial/DBPAPERAddPaperDocUserMemberResult.h>
#import <ObjectiveDropboxOfficial/DBPAPERAddPaperDocUserResult.h>
#import <ObjectiveDropboxOfficial/DBPAPERCursor.h>
#import <ObjectiveDropboxOfficial/DBPAPERDocLookupError.h>
#import <ObjectiveDropboxOfficial/DBPAPERExportFormat.h>
#import <ObjectiveDropboxOfficial/DBPAPERFolder.h>
#import <ObjectiveDropboxOfficial/DBPAPERFolderSharingPolicyType.h>
#import <ObjectiveDropboxOfficial/DBPAPERFoldersContainingPaperDoc.h>
#import <ObjectiveDropboxOfficial/DBPAPERImportFormat.h>
#import <ObjectiveDropboxOfficial/DBPAPERInviteeInfoWithPermissionLevel.h>
#import <ObjectiveDropboxOfficial/DBPAPERListDocsCursorError.h>
#import <ObjectiveDropboxOfficial/DBPAPERListPaperDocsArgs.h>
#import <ObjectiveDropboxOfficial/DBPAPERListPaperDocsContinueArgs.h>
#import <ObjectiveDropboxOfficial/DBPAPERListPaperDocsFilterBy.h>
#import <ObjectiveDropboxOfficial/DBPAPERListPaperDocsResponse.h>
#import <ObjectiveDropboxOfficial/DBPAPERListPaperDocsSortBy.h>
#import <ObjectiveDropboxOfficial/DBPAPERListPaperDocsSortOrder.h>
#import <ObjectiveDropboxOfficial/DBPAPERListUsersCursorError.h>
#import <ObjectiveDropboxOfficial/DBPAPERListUsersOnFolderArgs.h>
#import <ObjectiveDropboxOfficial/DBPAPERListUsersOnFolderContinueArgs.h>
#import <ObjectiveDropboxOfficial/DBPAPERListUsersOnFolderResponse.h>
#import <ObjectiveDropboxOfficial/DBPAPERListUsersOnPaperDocArgs.h>
#import <ObjectiveDropboxOfficial/DBPAPERListUsersOnPaperDocContinueArgs.h>
#import <ObjectiveDropboxOfficial/DBPAPERListUsersOnPaperDocResponse.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperApiBaseError.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperApiCursorError.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperDocCreateArgs.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperDocCreateError.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperDocCreateUpdateResult.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperDocExport.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperDocExportResult.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperDocSharingPolicy.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperDocUpdateArgs.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperDocUpdateError.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperDocUpdatePolicy.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperFolderCreateArg.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperFolderCreateError.h>
#import <ObjectiveDropboxOfficial/DBPAPERPaperFolderCreateResult.h>
#import <ObjectiveDropboxOfficial/DBPAPERRefPaperDoc.h>
#import <ObjectiveDropboxOfficial/DBPAPERRemovePaperDocUser.h>
#import <ObjectiveDropboxOfficial/DBPAPERRouteObjects.h>
#import <ObjectiveDropboxOfficial/DBPAPERSharingPolicy.h>
#import <ObjectiveDropboxOfficial/DBPAPERSharingPublicPolicyType.h>
#import <ObjectiveDropboxOfficial/DBPAPERSharingTeamPolicyType.h>
#import <ObjectiveDropboxOfficial/DBPAPERUserAuthRoutes.h>
#import <ObjectiveDropboxOfficial/DBPAPERUserInfoWithPermissionLevel.h>
#import <ObjectiveDropboxOfficial/DBPAPERUserOnPaperDocFilter.h>
#import <ObjectiveDropboxOfficial/DBRequestErrors.h>
#import <ObjectiveDropboxOfficial/DBSHARINGInviteeInfo.h>
#import <ObjectiveDropboxOfficial/DBSHARINGMemberSelector.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUserInfo.h>
#import <ObjectiveDropboxOfficial/DBStoneBase.h>
#import <ObjectiveDropboxOfficial/DBTransportClientProtocol.h>

@implementation DBPAPERUserAuthRoutes

- (instancetype)init:(id<DBTransportClient>)client {
  self = [super init];
  if (self) {
    _client = client;
  }
  return self;
}

- (DBRpcTask *)docsArchive:(NSString *)docId {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsArchive;
  DBPAPERRefPaperDoc *arg = [[DBPAPERRefPaperDoc alloc] initWithDocId:docId];
  return [self.client requestRpc:route arg:arg];
}

- (DBUploadTask *)docsCreateUrl:(DBPAPERImportFormat *)importFormat inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsCreate;
  DBPAPERPaperDocCreateArgs *arg = [[DBPAPERPaperDocCreateArgs alloc] initWithImportFormat:importFormat];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)docsCreateUrl:(DBPAPERImportFormat *)importFormat
                 parentFolderId:(NSString *)parentFolderId
                       inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsCreate;
  DBPAPERPaperDocCreateArgs *arg =
      [[DBPAPERPaperDocCreateArgs alloc] initWithImportFormat:importFormat parentFolderId:parentFolderId];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)docsCreateData:(DBPAPERImportFormat *)importFormat inputData:(NSData *)inputData {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsCreate;
  DBPAPERPaperDocCreateArgs *arg = [[DBPAPERPaperDocCreateArgs alloc] initWithImportFormat:importFormat];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)docsCreateData:(DBPAPERImportFormat *)importFormat
                  parentFolderId:(NSString *)parentFolderId
                       inputData:(NSData *)inputData {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsCreate;
  DBPAPERPaperDocCreateArgs *arg =
      [[DBPAPERPaperDocCreateArgs alloc] initWithImportFormat:importFormat parentFolderId:parentFolderId];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)docsCreateStream:(DBPAPERImportFormat *)importFormat inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsCreate;
  DBPAPERPaperDocCreateArgs *arg = [[DBPAPERPaperDocCreateArgs alloc] initWithImportFormat:importFormat];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)docsCreateStream:(DBPAPERImportFormat *)importFormat
                    parentFolderId:(NSString *)parentFolderId
                       inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsCreate;
  DBPAPERPaperDocCreateArgs *arg =
      [[DBPAPERPaperDocCreateArgs alloc] initWithImportFormat:importFormat parentFolderId:parentFolderId];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBDownloadUrlTask *)docsDownloadUrl:(NSString *)docId
                          exportFormat:(DBPAPERExportFormat *)exportFormat
                             overwrite:(BOOL)overwrite
                           destination:(NSURL *)destination {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsDownload;
  DBPAPERPaperDocExport *arg = [[DBPAPERPaperDocExport alloc] initWithDocId:docId exportFormat:exportFormat];
  return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadUrlTask *)docsDownloadUrl:(NSString *)docId
                          exportFormat:(DBPAPERExportFormat *)exportFormat
                             overwrite:(BOOL)overwrite
                           destination:(NSURL *)destination
                       byteOffsetStart:(NSNumber *)byteOffsetStart
                         byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsDownload;
  DBPAPERPaperDocExport *arg = [[DBPAPERPaperDocExport alloc] initWithDocId:docId exportFormat:exportFormat];
  return [self.client requestDownload:route
                                  arg:arg
                            overwrite:overwrite
                          destination:destination
                      byteOffsetStart:byteOffsetStart
                        byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadDataTask *)docsDownloadData:(NSString *)docId exportFormat:(DBPAPERExportFormat *)exportFormat {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsDownload;
  DBPAPERPaperDocExport *arg = [[DBPAPERPaperDocExport alloc] initWithDocId:docId exportFormat:exportFormat];
  return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)docsDownloadData:(NSString *)docId
                            exportFormat:(DBPAPERExportFormat *)exportFormat
                         byteOffsetStart:(NSNumber *)byteOffsetStart
                           byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsDownload;
  DBPAPERPaperDocExport *arg = [[DBPAPERPaperDocExport alloc] initWithDocId:docId exportFormat:exportFormat];
  return [self.client requestDownload:route arg:arg byteOffsetStart:byteOffsetStart byteOffsetEnd:byteOffsetEnd];
}

- (DBRpcTask *)docsFolderUsersList:(NSString *)docId {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsFolderUsersList;
  DBPAPERListUsersOnFolderArgs *arg = [[DBPAPERListUsersOnFolderArgs alloc] initWithDocId:docId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsFolderUsersList:(NSString *)docId limit:(NSNumber *)limit {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsFolderUsersList;
  DBPAPERListUsersOnFolderArgs *arg = [[DBPAPERListUsersOnFolderArgs alloc] initWithDocId:docId limit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsFolderUsersListContinue:(NSString *)docId cursor:(NSString *)cursor {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsFolderUsersListContinue;
  DBPAPERListUsersOnFolderContinueArgs *arg =
      [[DBPAPERListUsersOnFolderContinueArgs alloc] initWithDocId:docId cursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsGetFolderInfo:(NSString *)docId {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsGetFolderInfo;
  DBPAPERRefPaperDoc *arg = [[DBPAPERRefPaperDoc alloc] initWithDocId:docId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsList {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsList;
  DBPAPERListPaperDocsArgs *arg = [[DBPAPERListPaperDocsArgs alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsList:(DBPAPERListPaperDocsFilterBy *)filterBy
                 sortBy:(DBPAPERListPaperDocsSortBy *)sortBy
              sortOrder:(DBPAPERListPaperDocsSortOrder *)sortOrder
                  limit:(NSNumber *)limit {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsList;
  DBPAPERListPaperDocsArgs *arg =
      [[DBPAPERListPaperDocsArgs alloc] initWithFilterBy:filterBy sortBy:sortBy sortOrder:sortOrder limit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsListContinue:(NSString *)cursor {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsListContinue;
  DBPAPERListPaperDocsContinueArgs *arg = [[DBPAPERListPaperDocsContinueArgs alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsPermanentlyDelete:(NSString *)docId {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsPermanentlyDelete;
  DBPAPERRefPaperDoc *arg = [[DBPAPERRefPaperDoc alloc] initWithDocId:docId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsSharingPolicyGet:(NSString *)docId {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsSharingPolicyGet;
  DBPAPERRefPaperDoc *arg = [[DBPAPERRefPaperDoc alloc] initWithDocId:docId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsSharingPolicySet:(NSString *)docId sharingPolicy:(DBPAPERSharingPolicy *)sharingPolicy {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsSharingPolicySet;
  DBPAPERPaperDocSharingPolicy *arg =
      [[DBPAPERPaperDocSharingPolicy alloc] initWithDocId:docId sharingPolicy:sharingPolicy];
  return [self.client requestRpc:route arg:arg];
}

- (DBUploadTask *)docsUpdateUrl:(NSString *)docId
                docUpdatePolicy:(DBPAPERPaperDocUpdatePolicy *)docUpdatePolicy
                       revision:(NSNumber *)revision
                   importFormat:(DBPAPERImportFormat *)importFormat
                       inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsUpdate;
  DBPAPERPaperDocUpdateArgs *arg = [[DBPAPERPaperDocUpdateArgs alloc] initWithDocId:docId
                                                                    docUpdatePolicy:docUpdatePolicy
                                                                           revision:revision
                                                                       importFormat:importFormat];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)docsUpdateData:(NSString *)docId
                 docUpdatePolicy:(DBPAPERPaperDocUpdatePolicy *)docUpdatePolicy
                        revision:(NSNumber *)revision
                    importFormat:(DBPAPERImportFormat *)importFormat
                       inputData:(NSData *)inputData {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsUpdate;
  DBPAPERPaperDocUpdateArgs *arg = [[DBPAPERPaperDocUpdateArgs alloc] initWithDocId:docId
                                                                    docUpdatePolicy:docUpdatePolicy
                                                                           revision:revision
                                                                       importFormat:importFormat];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)docsUpdateStream:(NSString *)docId
                   docUpdatePolicy:(DBPAPERPaperDocUpdatePolicy *)docUpdatePolicy
                          revision:(NSNumber *)revision
                      importFormat:(DBPAPERImportFormat *)importFormat
                       inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsUpdate;
  DBPAPERPaperDocUpdateArgs *arg = [[DBPAPERPaperDocUpdateArgs alloc] initWithDocId:docId
                                                                    docUpdatePolicy:docUpdatePolicy
                                                                           revision:revision
                                                                       importFormat:importFormat];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBRpcTask *)docsUsersAdd:(NSString *)docId members:(NSArray<DBPAPERAddMember *> *)members {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsUsersAdd;
  DBPAPERAddPaperDocUser *arg = [[DBPAPERAddPaperDocUser alloc] initWithDocId:docId members:members];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsUsersAdd:(NSString *)docId
                    members:(NSArray<DBPAPERAddMember *> *)members
              customMessage:(NSString *)customMessage
                      quiet:(NSNumber *)quiet {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsUsersAdd;
  DBPAPERAddPaperDocUser *arg =
      [[DBPAPERAddPaperDocUser alloc] initWithDocId:docId members:members customMessage:customMessage quiet:quiet];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsUsersList:(NSString *)docId {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsUsersList;
  DBPAPERListUsersOnPaperDocArgs *arg = [[DBPAPERListUsersOnPaperDocArgs alloc] initWithDocId:docId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsUsersList:(NSString *)docId
                       limit:(NSNumber *)limit
                    filterBy:(DBPAPERUserOnPaperDocFilter *)filterBy {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsUsersList;
  DBPAPERListUsersOnPaperDocArgs *arg =
      [[DBPAPERListUsersOnPaperDocArgs alloc] initWithDocId:docId limit:limit filterBy:filterBy];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsUsersListContinue:(NSString *)docId cursor:(NSString *)cursor {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsUsersListContinue;
  DBPAPERListUsersOnPaperDocContinueArgs *arg =
      [[DBPAPERListUsersOnPaperDocContinueArgs alloc] initWithDocId:docId cursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)docsUsersRemove:(NSString *)docId member:(DBSHARINGMemberSelector *)member {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERDocsUsersRemove;
  DBPAPERRemovePaperDocUser *arg = [[DBPAPERRemovePaperDocUser alloc] initWithDocId:docId member:member];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)foldersCreate:(NSString *)name {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERFoldersCreate;
  DBPAPERPaperFolderCreateArg *arg = [[DBPAPERPaperFolderCreateArg alloc] initWithName:name];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)foldersCreate:(NSString *)name
              parentFolderId:(NSString *)parentFolderId
                isTeamFolder:(NSNumber *)isTeamFolder {
  DBRoute *route = DBPAPERRouteObjects.DBPAPERFoldersCreate;
  DBPAPERPaperFolderCreateArg *arg =
      [[DBPAPERPaperFolderCreateArg alloc] initWithName:name parentFolderId:parentFolderId isTeamFolder:isTeamFolder];
  return [self.client requestRpc:route arg:arg];
}

@end
