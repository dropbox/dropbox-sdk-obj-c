///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <ObjectiveDropboxOfficial/DBASYNCLaunchEmptyResult.h>
#import <ObjectiveDropboxOfficial/DBASYNCLaunchResultBase.h>
#import <ObjectiveDropboxOfficial/DBASYNCPollArg.h>
#import <ObjectiveDropboxOfficial/DBASYNCPollError.h>
#import <ObjectiveDropboxOfficial/DBASYNCPollResultBase.h>
#import <ObjectiveDropboxOfficial/DBFILESLookupError.h>
#import <ObjectiveDropboxOfficial/DBRequestErrors.h>
#import <ObjectiveDropboxOfficial/DBSHARINGAccessInheritance.h>
#import <ObjectiveDropboxOfficial/DBSHARINGAccessLevel.h>
#import <ObjectiveDropboxOfficial/DBSHARINGAclUpdatePolicy.h>
#import <ObjectiveDropboxOfficial/DBSHARINGAddFileMemberArgs.h>
#import <ObjectiveDropboxOfficial/DBSHARINGAddFileMemberError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGAddFolderMemberArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGAddFolderMemberError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGAddMember.h>
#import <ObjectiveDropboxOfficial/DBSHARINGAddMemberSelectorError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGChangeFileMemberAccessArgs.h>
#import <ObjectiveDropboxOfficial/DBSHARINGCreateSharedLinkArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGCreateSharedLinkError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGCreateSharedLinkWithSettingsArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGCreateSharedLinkWithSettingsError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGExpectedSharedContentLinkMetadata.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFileAction.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFileLinkMetadata.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFileMemberActionError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFileMemberActionIndividualResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFileMemberActionResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFileMemberRemoveActionResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFilePermission.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFolderAction.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFolderLinkMetadata.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFolderPermission.h>
#import <ObjectiveDropboxOfficial/DBSHARINGFolderPolicy.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetFileMetadataArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetFileMetadataBatchArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetFileMetadataBatchResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetFileMetadataError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetFileMetadataIndividualResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetMetadataArgs.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetSharedLinkFileError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetSharedLinkMetadataArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetSharedLinksArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetSharedLinksError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGetSharedLinksResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGGroupMembershipInfo.h>
#import <ObjectiveDropboxOfficial/DBSHARINGInsufficientQuotaAmounts.h>
#import <ObjectiveDropboxOfficial/DBSHARINGInviteeMembershipInfo.h>
#import <ObjectiveDropboxOfficial/DBSHARINGJobError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGJobStatus.h>
#import <ObjectiveDropboxOfficial/DBSHARINGLinkMetadata.h>
#import <ObjectiveDropboxOfficial/DBSHARINGLinkPermissions.h>
#import <ObjectiveDropboxOfficial/DBSHARINGLinkSettings.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFileMembersArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFileMembersBatchArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFileMembersBatchResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFileMembersContinueArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFileMembersContinueError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFileMembersError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFileMembersIndividualResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFilesArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFilesContinueArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFilesContinueError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFilesResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFolderMembersArgs.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFolderMembersContinueArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFolderMembersContinueError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFolderMembersCursorArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFoldersArgs.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFoldersContinueArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFoldersContinueError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListFoldersResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListSharedLinksArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListSharedLinksError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGListSharedLinksResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGMemberAccessLevelResult.h>
#import <ObjectiveDropboxOfficial/DBSHARINGMemberAction.h>
#import <ObjectiveDropboxOfficial/DBSHARINGMemberPolicy.h>
#import <ObjectiveDropboxOfficial/DBSHARINGMemberSelector.h>
#import <ObjectiveDropboxOfficial/DBSHARINGModifySharedLinkSettingsArgs.h>
#import <ObjectiveDropboxOfficial/DBSHARINGModifySharedLinkSettingsError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGMountFolderArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGMountFolderError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGParentFolderAccessInfo.h>
#import <ObjectiveDropboxOfficial/DBSHARINGPathLinkMetadata.h>
#import <ObjectiveDropboxOfficial/DBSHARINGPendingUploadMode.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRelinquishFileMembershipArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRelinquishFileMembershipError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRelinquishFolderMembershipArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRelinquishFolderMembershipError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRemoveFileMemberArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRemoveFileMemberError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRemoveFolderMemberArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRemoveFolderMemberError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRemoveMemberJobStatus.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRevokeSharedLinkArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRevokeSharedLinkError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGRouteObjects.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSetAccessInheritanceArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSetAccessInheritanceError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGShareFolderArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGShareFolderArgBase.h>
#import <ObjectiveDropboxOfficial/DBSHARINGShareFolderError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGShareFolderErrorBase.h>
#import <ObjectiveDropboxOfficial/DBSHARINGShareFolderJobStatus.h>
#import <ObjectiveDropboxOfficial/DBSHARINGShareFolderLaunch.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharePathError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedContentLinkMetadata.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedFileMembers.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedFileMetadata.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedFolderAccessError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedFolderMemberError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedFolderMembers.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedFolderMetadata.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedFolderMetadataBase.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedLinkAlreadyExistsMetadata.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedLinkError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedLinkMetadata.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedLinkPolicy.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedLinkSettings.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharedLinkSettingsError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharingFileAccessError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGSharingUserError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGTeamMemberInfo.h>
#import <ObjectiveDropboxOfficial/DBSHARINGTransferFolderArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGTransferFolderError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUnmountFolderArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUnmountFolderError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUnshareFileArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUnshareFileError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUnshareFolderArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUnshareFolderError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUpdateFileMemberArgs.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUpdateFolderMemberArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUpdateFolderMemberError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUpdateFolderPolicyArg.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUpdateFolderPolicyError.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUserAuthRoutes.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUserFileMembershipInfo.h>
#import <ObjectiveDropboxOfficial/DBSHARINGUserMembershipInfo.h>
#import <ObjectiveDropboxOfficial/DBSHARINGViewerInfoPolicy.h>
#import <ObjectiveDropboxOfficial/DBSHARINGVisibility.h>
#import <ObjectiveDropboxOfficial/DBStoneBase.h>
#import <ObjectiveDropboxOfficial/DBTransportClientProtocol.h>
#import <ObjectiveDropboxOfficial/DBUSERSTeam.h>

@implementation DBSHARINGUserAuthRoutes

- (instancetype)init:(id<DBTransportClient>)client {
  self = [super init];
  if (self) {
    _client = client;
  }
  return self;
}

- (DBRpcTask *)addFileMember:(NSString *)file members:(NSArray<DBSHARINGMemberSelector *> *)members {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGAddFileMember;
  DBSHARINGAddFileMemberArgs *arg = [[DBSHARINGAddFileMemberArgs alloc] initWithFile:file members:members];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)addFileMember:(NSString *)file
                     members:(NSArray<DBSHARINGMemberSelector *> *)members
               customMessage:(NSString *)customMessage
                       quiet:(NSNumber *)quiet
                 accessLevel:(DBSHARINGAccessLevel *)accessLevel
         addMessageAsComment:(NSNumber *)addMessageAsComment {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGAddFileMember;
  DBSHARINGAddFileMemberArgs *arg = [[DBSHARINGAddFileMemberArgs alloc] initWithFile:file
                                                                             members:members
                                                                       customMessage:customMessage
                                                                               quiet:quiet
                                                                         accessLevel:accessLevel
                                                                 addMessageAsComment:addMessageAsComment];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)addFolderMember:(NSString *)sharedFolderId members:(NSArray<DBSHARINGAddMember *> *)members {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGAddFolderMember;
  DBSHARINGAddFolderMemberArg *arg =
      [[DBSHARINGAddFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId members:members];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)addFolderMember:(NSString *)sharedFolderId
                       members:(NSArray<DBSHARINGAddMember *> *)members
                         quiet:(NSNumber *)quiet
                 customMessage:(NSString *)customMessage {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGAddFolderMember;
  DBSHARINGAddFolderMemberArg *arg = [[DBSHARINGAddFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId
                                                                                         members:members
                                                                                           quiet:quiet
                                                                                   customMessage:customMessage];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)changeFileMemberAccess:(NSString *)file
                               member:(DBSHARINGMemberSelector *)member
                          accessLevel:(DBSHARINGAccessLevel *)accessLevel {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGChangeFileMemberAccess;
  DBSHARINGChangeFileMemberAccessArgs *arg =
      [[DBSHARINGChangeFileMemberAccessArgs alloc] initWithFile:file member:member accessLevel:accessLevel];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)checkJobStatus:(NSString *)asyncJobId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGCheckJobStatus;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)checkRemoveMemberJobStatus:(NSString *)asyncJobId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGCheckRemoveMemberJobStatus;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)checkShareJobStatus:(NSString *)asyncJobId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGCheckShareJobStatus;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)createSharedLink:(NSString *)path {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGCreateSharedLink;
  DBSHARINGCreateSharedLinkArg *arg = [[DBSHARINGCreateSharedLinkArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)createSharedLink:(NSString *)path
                       shortUrl:(NSNumber *)shortUrl
                  pendingUpload:(DBSHARINGPendingUploadMode *)pendingUpload {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGCreateSharedLink;
  DBSHARINGCreateSharedLinkArg *arg =
      [[DBSHARINGCreateSharedLinkArg alloc] initWithPath:path shortUrl:shortUrl pendingUpload:pendingUpload];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)createSharedLinkWithSettings:(NSString *)path {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGCreateSharedLinkWithSettings;
  DBSHARINGCreateSharedLinkWithSettingsArg *arg = [[DBSHARINGCreateSharedLinkWithSettingsArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)createSharedLinkWithSettings:(NSString *)path settings:(DBSHARINGSharedLinkSettings *)settings {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGCreateSharedLinkWithSettings;
  DBSHARINGCreateSharedLinkWithSettingsArg *arg =
      [[DBSHARINGCreateSharedLinkWithSettingsArg alloc] initWithPath:path settings:settings];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getFileMetadata:(NSString *)file {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetFileMetadata;
  DBSHARINGGetFileMetadataArg *arg = [[DBSHARINGGetFileMetadataArg alloc] initWithFile:file];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getFileMetadata:(NSString *)file actions:(NSArray<DBSHARINGFileAction *> *)actions {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetFileMetadata;
  DBSHARINGGetFileMetadataArg *arg = [[DBSHARINGGetFileMetadataArg alloc] initWithFile:file actions:actions];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getFileMetadataBatch:(NSArray<NSString *> *)files {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetFileMetadataBatch;
  DBSHARINGGetFileMetadataBatchArg *arg = [[DBSHARINGGetFileMetadataBatchArg alloc] initWithFiles:files];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getFileMetadataBatch:(NSArray<NSString *> *)files actions:(NSArray<DBSHARINGFileAction *> *)actions {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetFileMetadataBatch;
  DBSHARINGGetFileMetadataBatchArg *arg =
      [[DBSHARINGGetFileMetadataBatchArg alloc] initWithFiles:files actions:actions];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getFolderMetadata:(NSString *)sharedFolderId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetFolderMetadata;
  DBSHARINGGetMetadataArgs *arg = [[DBSHARINGGetMetadataArgs alloc] initWithSharedFolderId:sharedFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getFolderMetadata:(NSString *)sharedFolderId actions:(NSArray<DBSHARINGFolderAction *> *)actions {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetFolderMetadata;
  DBSHARINGGetMetadataArgs *arg =
      [[DBSHARINGGetMetadataArgs alloc] initWithSharedFolderId:sharedFolderId actions:actions];
  return [self.client requestRpc:route arg:arg];
}

- (DBDownloadUrlTask *)getSharedLinkFileUrl:(NSString *)url overwrite:(BOOL)overwrite destination:(NSURL *)destination {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinkFile;
  DBSHARINGGetSharedLinkMetadataArg *arg = [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url];
  return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadUrlTask *)getSharedLinkFileUrl:(NSString *)url
                                       path:(NSString *)path
                               linkPassword:(NSString *)linkPassword
                                  overwrite:(BOOL)overwrite
                                destination:(NSURL *)destination {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinkFile;
  DBSHARINGGetSharedLinkMetadataArg *arg =
      [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
  return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadUrlTask *)getSharedLinkFileUrl:(NSString *)url
                                  overwrite:(BOOL)overwrite
                                destination:(NSURL *)destination
                            byteOffsetStart:(NSNumber *)byteOffsetStart
                              byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinkFile;
  DBSHARINGGetSharedLinkMetadataArg *arg = [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url];
  return [self.client requestDownload:route
                                  arg:arg
                            overwrite:overwrite
                          destination:destination
                      byteOffsetStart:byteOffsetStart
                        byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadUrlTask *)getSharedLinkFileUrl:(NSString *)url
                                       path:(NSString *)path
                               linkPassword:(NSString *)linkPassword
                                  overwrite:(BOOL)overwrite
                                destination:(NSURL *)destination
                            byteOffsetStart:(NSNumber *)byteOffsetStart
                              byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinkFile;
  DBSHARINGGetSharedLinkMetadataArg *arg =
      [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
  return [self.client requestDownload:route
                                  arg:arg
                            overwrite:overwrite
                          destination:destination
                      byteOffsetStart:byteOffsetStart
                        byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadDataTask *)getSharedLinkFileData:(NSString *)url {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinkFile;
  DBSHARINGGetSharedLinkMetadataArg *arg = [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url];
  return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)getSharedLinkFileData:(NSString *)url
                                         path:(NSString *)path
                                 linkPassword:(NSString *)linkPassword {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinkFile;
  DBSHARINGGetSharedLinkMetadataArg *arg =
      [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
  return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)getSharedLinkFileData:(NSString *)url
                              byteOffsetStart:(NSNumber *)byteOffsetStart
                                byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinkFile;
  DBSHARINGGetSharedLinkMetadataArg *arg = [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url];
  return [self.client requestDownload:route arg:arg byteOffsetStart:byteOffsetStart byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadDataTask *)getSharedLinkFileData:(NSString *)url
                                         path:(NSString *)path
                                 linkPassword:(NSString *)linkPassword
                              byteOffsetStart:(NSNumber *)byteOffsetStart
                                byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinkFile;
  DBSHARINGGetSharedLinkMetadataArg *arg =
      [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
  return [self.client requestDownload:route arg:arg byteOffsetStart:byteOffsetStart byteOffsetEnd:byteOffsetEnd];
}

- (DBRpcTask *)getSharedLinkMetadata:(NSString *)url {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinkMetadata;
  DBSHARINGGetSharedLinkMetadataArg *arg = [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getSharedLinkMetadata:(NSString *)url path:(NSString *)path linkPassword:(NSString *)linkPassword {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinkMetadata;
  DBSHARINGGetSharedLinkMetadataArg *arg =
      [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getSharedLinks {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinks;
  DBSHARINGGetSharedLinksArg *arg = [[DBSHARINGGetSharedLinksArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getSharedLinks:(NSString *)path {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGGetSharedLinks;
  DBSHARINGGetSharedLinksArg *arg = [[DBSHARINGGetSharedLinksArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFileMembers:(NSString *)file {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFileMembers;
  DBSHARINGListFileMembersArg *arg = [[DBSHARINGListFileMembersArg alloc] initWithFile:file];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFileMembers:(NSString *)file
                       actions:(NSArray<DBSHARINGMemberAction *> *)actions
              includeInherited:(NSNumber *)includeInherited
                         limit:(NSNumber *)limit {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFileMembers;
  DBSHARINGListFileMembersArg *arg = [[DBSHARINGListFileMembersArg alloc] initWithFile:file
                                                                               actions:actions
                                                                      includeInherited:includeInherited
                                                                                 limit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFileMembersBatch:(NSArray<NSString *> *)files {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFileMembersBatch;
  DBSHARINGListFileMembersBatchArg *arg = [[DBSHARINGListFileMembersBatchArg alloc] initWithFiles:files];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFileMembersBatch:(NSArray<NSString *> *)files limit:(NSNumber *)limit {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFileMembersBatch;
  DBSHARINGListFileMembersBatchArg *arg = [[DBSHARINGListFileMembersBatchArg alloc] initWithFiles:files limit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFileMembersContinue:(NSString *)cursor {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFileMembersContinue;
  DBSHARINGListFileMembersContinueArg *arg = [[DBSHARINGListFileMembersContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderMembers:(NSString *)sharedFolderId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFolderMembers;
  DBSHARINGListFolderMembersArgs *arg = [[DBSHARINGListFolderMembersArgs alloc] initWithSharedFolderId:sharedFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderMembers:(NSString *)sharedFolderId
                         actions:(NSArray<DBSHARINGMemberAction *> *)actions
                           limit:(NSNumber *)limit {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFolderMembers;
  DBSHARINGListFolderMembersArgs *arg =
      [[DBSHARINGListFolderMembersArgs alloc] initWithSharedFolderId:sharedFolderId actions:actions limit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderMembersContinue:(NSString *)cursor {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFolderMembersContinue;
  DBSHARINGListFolderMembersContinueArg *arg = [[DBSHARINGListFolderMembersContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolders {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFolders;
  DBSHARINGListFoldersArgs *arg = [[DBSHARINGListFoldersArgs alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolders:(NSNumber *)limit actions:(NSArray<DBSHARINGFolderAction *> *)actions {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFolders;
  DBSHARINGListFoldersArgs *arg = [[DBSHARINGListFoldersArgs alloc] initWithLimit:limit actions:actions];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFoldersContinue:(NSString *)cursor {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListFoldersContinue;
  DBSHARINGListFoldersContinueArg *arg = [[DBSHARINGListFoldersContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listMountableFolders {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListMountableFolders;
  DBSHARINGListFoldersArgs *arg = [[DBSHARINGListFoldersArgs alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listMountableFolders:(NSNumber *)limit actions:(NSArray<DBSHARINGFolderAction *> *)actions {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListMountableFolders;
  DBSHARINGListFoldersArgs *arg = [[DBSHARINGListFoldersArgs alloc] initWithLimit:limit actions:actions];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listMountableFoldersContinue:(NSString *)cursor {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListMountableFoldersContinue;
  DBSHARINGListFoldersContinueArg *arg = [[DBSHARINGListFoldersContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listReceivedFiles {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListReceivedFiles;
  DBSHARINGListFilesArg *arg = [[DBSHARINGListFilesArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listReceivedFiles:(NSNumber *)limit actions:(NSArray<DBSHARINGFileAction *> *)actions {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListReceivedFiles;
  DBSHARINGListFilesArg *arg = [[DBSHARINGListFilesArg alloc] initWithLimit:limit actions:actions];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listReceivedFilesContinue:(NSString *)cursor {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListReceivedFilesContinue;
  DBSHARINGListFilesContinueArg *arg = [[DBSHARINGListFilesContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listSharedLinks {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListSharedLinks;
  DBSHARINGListSharedLinksArg *arg = [[DBSHARINGListSharedLinksArg alloc] initDefault];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listSharedLinks:(NSString *)path cursor:(NSString *)cursor directOnly:(NSNumber *)directOnly {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGListSharedLinks;
  DBSHARINGListSharedLinksArg *arg =
      [[DBSHARINGListSharedLinksArg alloc] initWithPath:path cursor:cursor directOnly:directOnly];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)modifySharedLinkSettings:(NSString *)url settings:(DBSHARINGSharedLinkSettings *)settings {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGModifySharedLinkSettings;
  DBSHARINGModifySharedLinkSettingsArgs *arg =
      [[DBSHARINGModifySharedLinkSettingsArgs alloc] initWithUrl:url settings:settings];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)modifySharedLinkSettings:(NSString *)url
                               settings:(DBSHARINGSharedLinkSettings *)settings
                       removeExpiration:(NSNumber *)removeExpiration {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGModifySharedLinkSettings;
  DBSHARINGModifySharedLinkSettingsArgs *arg =
      [[DBSHARINGModifySharedLinkSettingsArgs alloc] initWithUrl:url
                                                        settings:settings
                                                removeExpiration:removeExpiration];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)mountFolder:(NSString *)sharedFolderId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGMountFolder;
  DBSHARINGMountFolderArg *arg = [[DBSHARINGMountFolderArg alloc] initWithSharedFolderId:sharedFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)relinquishFileMembership:(NSString *)file {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGRelinquishFileMembership;
  DBSHARINGRelinquishFileMembershipArg *arg = [[DBSHARINGRelinquishFileMembershipArg alloc] initWithFile:file];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)relinquishFolderMembership:(NSString *)sharedFolderId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGRelinquishFolderMembership;
  DBSHARINGRelinquishFolderMembershipArg *arg =
      [[DBSHARINGRelinquishFolderMembershipArg alloc] initWithSharedFolderId:sharedFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)relinquishFolderMembership:(NSString *)sharedFolderId leaveACopy:(NSNumber *)leaveACopy {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGRelinquishFolderMembership;
  DBSHARINGRelinquishFolderMembershipArg *arg =
      [[DBSHARINGRelinquishFolderMembershipArg alloc] initWithSharedFolderId:sharedFolderId leaveACopy:leaveACopy];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)removeFileMember:(NSString *)file member:(DBSHARINGMemberSelector *)member {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGRemoveFileMember;
  DBSHARINGRemoveFileMemberArg *arg = [[DBSHARINGRemoveFileMemberArg alloc] initWithFile:file member:member];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)removeFileMember2:(NSString *)file member:(DBSHARINGMemberSelector *)member {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGRemoveFileMember2;
  DBSHARINGRemoveFileMemberArg *arg = [[DBSHARINGRemoveFileMemberArg alloc] initWithFile:file member:member];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)removeFolderMember:(NSString *)sharedFolderId
                           member:(DBSHARINGMemberSelector *)member
                       leaveACopy:(NSNumber *)leaveACopy {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGRemoveFolderMember;
  DBSHARINGRemoveFolderMemberArg *arg = [[DBSHARINGRemoveFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId
                                                                                                member:member
                                                                                            leaveACopy:leaveACopy];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)revokeSharedLink:(NSString *)url {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGRevokeSharedLink;
  DBSHARINGRevokeSharedLinkArg *arg = [[DBSHARINGRevokeSharedLinkArg alloc] initWithUrl:url];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)setAccessInheritance:(NSString *)sharedFolderId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGSetAccessInheritance;
  DBSHARINGSetAccessInheritanceArg *arg =
      [[DBSHARINGSetAccessInheritanceArg alloc] initWithSharedFolderId:sharedFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)setAccessInheritance:(NSString *)sharedFolderId
                  accessInheritance:(DBSHARINGAccessInheritance *)accessInheritance {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGSetAccessInheritance;
  DBSHARINGSetAccessInheritanceArg *arg =
      [[DBSHARINGSetAccessInheritanceArg alloc] initWithSharedFolderId:sharedFolderId
                                                     accessInheritance:accessInheritance];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)shareFolder:(NSString *)path {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGShareFolder;
  DBSHARINGShareFolderArg *arg = [[DBSHARINGShareFolderArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)shareFolder:(NSString *)path
           aclUpdatePolicy:(DBSHARINGAclUpdatePolicy *)aclUpdatePolicy
                forceAsync:(NSNumber *)forceAsync
              memberPolicy:(DBSHARINGMemberPolicy *)memberPolicy
          sharedLinkPolicy:(DBSHARINGSharedLinkPolicy *)sharedLinkPolicy
          viewerInfoPolicy:(DBSHARINGViewerInfoPolicy *)viewerInfoPolicy
         accessInheritance:(DBSHARINGAccessInheritance *)accessInheritance
                   actions:(NSArray<DBSHARINGFolderAction *> *)actions
              linkSettings:(DBSHARINGLinkSettings *)linkSettings {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGShareFolder;
  DBSHARINGShareFolderArg *arg = [[DBSHARINGShareFolderArg alloc] initWithPath:path
                                                               aclUpdatePolicy:aclUpdatePolicy
                                                                    forceAsync:forceAsync
                                                                  memberPolicy:memberPolicy
                                                              sharedLinkPolicy:sharedLinkPolicy
                                                              viewerInfoPolicy:viewerInfoPolicy
                                                             accessInheritance:accessInheritance
                                                                       actions:actions
                                                                  linkSettings:linkSettings];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)transferFolder:(NSString *)sharedFolderId toDropboxId:(NSString *)toDropboxId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGTransferFolder;
  DBSHARINGTransferFolderArg *arg =
      [[DBSHARINGTransferFolderArg alloc] initWithSharedFolderId:sharedFolderId toDropboxId:toDropboxId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)unmountFolder:(NSString *)sharedFolderId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGUnmountFolder;
  DBSHARINGUnmountFolderArg *arg = [[DBSHARINGUnmountFolderArg alloc] initWithSharedFolderId:sharedFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)unshareFile:(NSString *)file {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGUnshareFile;
  DBSHARINGUnshareFileArg *arg = [[DBSHARINGUnshareFileArg alloc] initWithFile:file];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)unshareFolder:(NSString *)sharedFolderId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGUnshareFolder;
  DBSHARINGUnshareFolderArg *arg = [[DBSHARINGUnshareFolderArg alloc] initWithSharedFolderId:sharedFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)unshareFolder:(NSString *)sharedFolderId leaveACopy:(NSNumber *)leaveACopy {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGUnshareFolder;
  DBSHARINGUnshareFolderArg *arg =
      [[DBSHARINGUnshareFolderArg alloc] initWithSharedFolderId:sharedFolderId leaveACopy:leaveACopy];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)updateFileMember:(NSString *)file
                         member:(DBSHARINGMemberSelector *)member
                    accessLevel:(DBSHARINGAccessLevel *)accessLevel {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGUpdateFileMember;
  DBSHARINGUpdateFileMemberArgs *arg =
      [[DBSHARINGUpdateFileMemberArgs alloc] initWithFile:file member:member accessLevel:accessLevel];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)updateFolderMember:(NSString *)sharedFolderId
                           member:(DBSHARINGMemberSelector *)member
                      accessLevel:(DBSHARINGAccessLevel *)accessLevel {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGUpdateFolderMember;
  DBSHARINGUpdateFolderMemberArg *arg = [[DBSHARINGUpdateFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId
                                                                                                member:member
                                                                                           accessLevel:accessLevel];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)updateFolderPolicy:(NSString *)sharedFolderId {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGUpdateFolderPolicy;
  DBSHARINGUpdateFolderPolicyArg *arg = [[DBSHARINGUpdateFolderPolicyArg alloc] initWithSharedFolderId:sharedFolderId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)updateFolderPolicy:(NSString *)sharedFolderId
                     memberPolicy:(DBSHARINGMemberPolicy *)memberPolicy
                  aclUpdatePolicy:(DBSHARINGAclUpdatePolicy *)aclUpdatePolicy
                 viewerInfoPolicy:(DBSHARINGViewerInfoPolicy *)viewerInfoPolicy
                 sharedLinkPolicy:(DBSHARINGSharedLinkPolicy *)sharedLinkPolicy
                     linkSettings:(DBSHARINGLinkSettings *)linkSettings
                          actions:(NSArray<DBSHARINGFolderAction *> *)actions {
  DBRoute *route = DBSHARINGRouteObjects.DBSHARINGUpdateFolderPolicy;
  DBSHARINGUpdateFolderPolicyArg *arg = [[DBSHARINGUpdateFolderPolicyArg alloc] initWithSharedFolderId:sharedFolderId
                                                                                          memberPolicy:memberPolicy
                                                                                       aclUpdatePolicy:aclUpdatePolicy
                                                                                      viewerInfoPolicy:viewerInfoPolicy
                                                                                      sharedLinkPolicy:sharedLinkPolicy
                                                                                          linkSettings:linkSettings
                                                                                               actions:actions];
  return [self.client requestRpc:route arg:arg];
}

@end
