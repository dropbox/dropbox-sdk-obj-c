///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `Sharing` namespace.

#import "DBSHARINGAccessLevel.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAccessLevel

#pragma mark - Constructors

- (instancetype)initWithOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAccessLevelOwner;
  }
  return self;
}

- (instancetype)initWithEditor {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAccessLevelEditor;
  }
  return self;
}

- (instancetype)initWithViewer {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAccessLevelViewer;
  }
  return self;
}

- (instancetype)initWithViewerNoComment {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAccessLevelViewerNoComment;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAccessLevelOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOwner {
  return _tag == DBSHARINGAccessLevelOwner;
}

- (BOOL)isEditor {
  return _tag == DBSHARINGAccessLevelEditor;
}

- (BOOL)isViewer {
  return _tag == DBSHARINGAccessLevelViewer;
}

- (BOOL)isViewerNoComment {
  return _tag == DBSHARINGAccessLevelViewerNoComment;
}

- (BOOL)isOther {
  return _tag == DBSHARINGAccessLevelOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGAccessLevelOwner:
    return @"DBSHARINGAccessLevelOwner";
  case DBSHARINGAccessLevelEditor:
    return @"DBSHARINGAccessLevelEditor";
  case DBSHARINGAccessLevelViewer:
    return @"DBSHARINGAccessLevelViewer";
  case DBSHARINGAccessLevelViewerNoComment:
    return @"DBSHARINGAccessLevelViewerNoComment";
  case DBSHARINGAccessLevelOther:
    return @"DBSHARINGAccessLevelOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAccessLevelSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAccessLevelSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAccessLevelSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAccessLevelSerializer

+ (NSDictionary *)serialize:(DBSHARINGAccessLevel *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOwner]) {
    jsonDict[@".tag"] = @"owner";
  } else if ([valueObj isEditor]) {
    jsonDict[@".tag"] = @"editor";
  } else if ([valueObj isViewer]) {
    jsonDict[@".tag"] = @"viewer";
  } else if ([valueObj isViewerNoComment]) {
    jsonDict[@".tag"] = @"viewer_no_comment";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGAccessLevel *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"owner"]) {
    return [[DBSHARINGAccessLevel alloc] initWithOwner];
  } else if ([tag isEqualToString:@"editor"]) {
    return [[DBSHARINGAccessLevel alloc] initWithEditor];
  } else if ([tag isEqualToString:@"viewer"]) {
    return [[DBSHARINGAccessLevel alloc] initWithViewer];
  } else if ([tag isEqualToString:@"viewer_no_comment"]) {
    return [[DBSHARINGAccessLevel alloc] initWithViewerNoComment];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGAccessLevel alloc] initWithOther];
  } else {
    return [[DBSHARINGAccessLevel alloc] initWithOther];
  }
}
@end

#import "DBSHARINGAclUpdatePolicy.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAclUpdatePolicy

#pragma mark - Constructors

- (instancetype)initWithOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAclUpdatePolicyOwner;
  }
  return self;
}

- (instancetype)initWithEditors {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAclUpdatePolicyEditors;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAclUpdatePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOwner {
  return _tag == DBSHARINGAclUpdatePolicyOwner;
}

- (BOOL)isEditors {
  return _tag == DBSHARINGAclUpdatePolicyEditors;
}

- (BOOL)isOther {
  return _tag == DBSHARINGAclUpdatePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGAclUpdatePolicyOwner:
    return @"DBSHARINGAclUpdatePolicyOwner";
  case DBSHARINGAclUpdatePolicyEditors:
    return @"DBSHARINGAclUpdatePolicyEditors";
  case DBSHARINGAclUpdatePolicyOther:
    return @"DBSHARINGAclUpdatePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAclUpdatePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAclUpdatePolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAclUpdatePolicySerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAclUpdatePolicySerializer

+ (NSDictionary *)serialize:(DBSHARINGAclUpdatePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOwner]) {
    jsonDict[@".tag"] = @"owner";
  } else if ([valueObj isEditors]) {
    jsonDict[@".tag"] = @"editors";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGAclUpdatePolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"owner"]) {
    return [[DBSHARINGAclUpdatePolicy alloc] initWithOwner];
  } else if ([tag isEqualToString:@"editors"]) {
    return [[DBSHARINGAclUpdatePolicy alloc] initWithEditors];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGAclUpdatePolicy alloc] initWithOther];
  } else {
    return [[DBSHARINGAclUpdatePolicy alloc] initWithOther];
  }
}
@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGAddFileMemberArgs.h"
#import "DBSHARINGMemberSelector.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAddFileMemberArgs

#pragma mark - Constructors

- (instancetype)initWithFile:(NSString *)file
                     members:(NSArray<DBSHARINGMemberSelector *> *)members
               customMessage:(NSString *)customMessage
                       quiet:(NSNumber *)quiet
                 accessLevel:(DBSHARINGAccessLevel *)accessLevel
         addMessageAsComment:(NSNumber *)addMessageAsComment {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"](file);
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](members);

  self = [super init];
  if (self) {
    _file = file;
    _members = members;
    _customMessage = customMessage;
    _quiet = quiet ?: @NO;
    _accessLevel = accessLevel ?: [[DBSHARINGAccessLevel alloc] initWithViewer];
    _addMessageAsComment = addMessageAsComment ?: @NO;
  }
  return self;
}

- (instancetype)initWithFile:(NSString *)file members:(NSArray<DBSHARINGMemberSelector *> *)members {
  return [self initWithFile:file members:members customMessage:nil quiet:nil accessLevel:nil addMessageAsComment:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAddFileMemberArgsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAddFileMemberArgsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAddFileMemberArgsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAddFileMemberArgsSerializer

+ (NSDictionary *)serialize:(DBSHARINGAddFileMemberArgs *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file"] = valueObj.file;
  jsonDict[@"members"] = [DBArraySerializer serialize:valueObj.members
                                            withBlock:^id(id elem) {
                                              return [DBSHARINGMemberSelectorSerializer serialize:elem];
                                            }];
  if (valueObj.customMessage) {
    jsonDict[@"custom_message"] = valueObj.customMessage;
  }
  jsonDict[@"quiet"] = valueObj.quiet;
  jsonDict[@"access_level"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessLevel];
  jsonDict[@"add_message_as_comment"] = valueObj.addMessageAsComment;

  return jsonDict;
}

+ (DBSHARINGAddFileMemberArgs *)deserialize:(NSDictionary *)valueDict {
  NSString *file = valueDict[@"file"];
  NSArray<DBSHARINGMemberSelector *> *members =
      [DBArraySerializer deserialize:valueDict[@"members"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGMemberSelectorSerializer deserialize:elem];
                           }];
  NSString *customMessage = valueDict[@"custom_message"] ?: nil;
  NSNumber *quiet = valueDict[@"quiet"] ?: @NO;
  DBSHARINGAccessLevel *accessLevel = valueDict[@"access_level"]
                                          ? [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_level"]]
                                          : [[DBSHARINGAccessLevel alloc] initWithViewer];
  NSNumber *addMessageAsComment = valueDict[@"add_message_as_comment"] ?: @NO;

  return [[DBSHARINGAddFileMemberArgs alloc] initWithFile:file
                                                  members:members
                                            customMessage:customMessage
                                                    quiet:quiet
                                              accessLevel:accessLevel
                                      addMessageAsComment:addMessageAsComment];
}

@end

#import "DBSHARINGAddFileMemberError.h"
#import "DBSHARINGSharingFileAccessError.h"
#import "DBSHARINGSharingUserError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAddFileMemberError

@synthesize userError = _userError;
@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithUserError:(DBSHARINGSharingUserError *)userError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFileMemberErrorUserError;
    _userError = userError;
  }
  return self;
}

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFileMemberErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithRateLimit {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFileMemberErrorRateLimit;
  }
  return self;
}

- (instancetype)initWithInvalidComment {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFileMemberErrorInvalidComment;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFileMemberErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharingUserError *)userError {
  if (![self isUserError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddFileMemberErrorUserError, but was %@.", [self tagName]];
  }
  return _userError;
}

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddFileMemberErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isUserError {
  return _tag == DBSHARINGAddFileMemberErrorUserError;
}

- (BOOL)isAccessError {
  return _tag == DBSHARINGAddFileMemberErrorAccessError;
}

- (BOOL)isRateLimit {
  return _tag == DBSHARINGAddFileMemberErrorRateLimit;
}

- (BOOL)isInvalidComment {
  return _tag == DBSHARINGAddFileMemberErrorInvalidComment;
}

- (BOOL)isOther {
  return _tag == DBSHARINGAddFileMemberErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGAddFileMemberErrorUserError:
    return @"DBSHARINGAddFileMemberErrorUserError";
  case DBSHARINGAddFileMemberErrorAccessError:
    return @"DBSHARINGAddFileMemberErrorAccessError";
  case DBSHARINGAddFileMemberErrorRateLimit:
    return @"DBSHARINGAddFileMemberErrorRateLimit";
  case DBSHARINGAddFileMemberErrorInvalidComment:
    return @"DBSHARINGAddFileMemberErrorInvalidComment";
  case DBSHARINGAddFileMemberErrorOther:
    return @"DBSHARINGAddFileMemberErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAddFileMemberErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAddFileMemberErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAddFileMemberErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAddFileMemberErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGAddFileMemberError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserError]) {
    jsonDict[@"user_error"] = [[DBSHARINGSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
    jsonDict[@".tag"] = @"user_error";
  } else if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isRateLimit]) {
    jsonDict[@".tag"] = @"rate_limit";
  } else if ([valueObj isInvalidComment]) {
    jsonDict[@".tag"] = @"invalid_comment";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGAddFileMemberError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_error"]) {
    DBSHARINGSharingUserError *userError = [DBSHARINGSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
    return [[DBSHARINGAddFileMemberError alloc] initWithUserError:userError];
  } else if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGAddFileMemberError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"rate_limit"]) {
    return [[DBSHARINGAddFileMemberError alloc] initWithRateLimit];
  } else if ([tag isEqualToString:@"invalid_comment"]) {
    return [[DBSHARINGAddFileMemberError alloc] initWithInvalidComment];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGAddFileMemberError alloc] initWithOther];
  } else {
    return [[DBSHARINGAddFileMemberError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGAddFolderMemberArg.h"
#import "DBSHARINGAddMember.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAddFolderMemberArg

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId
                               members:(NSArray<DBSHARINGAddMember *> *)members
                                 quiet:(NSNumber *)quiet
                         customMessage:(NSString *)customMessage {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](members);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:nil]](customMessage);

  self = [super init];
  if (self) {
    _sharedFolderId = sharedFolderId;
    _members = members;
    _quiet = quiet ?: @NO;
    _customMessage = customMessage;
  }
  return self;
}

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId members:(NSArray<DBSHARINGAddMember *> *)members {
  return [self initWithSharedFolderId:sharedFolderId members:members quiet:nil customMessage:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAddFolderMemberArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAddFolderMemberArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAddFolderMemberArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAddFolderMemberArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGAddFolderMemberArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  jsonDict[@"members"] = [DBArraySerializer serialize:valueObj.members
                                            withBlock:^id(id elem) {
                                              return [DBSHARINGAddMemberSerializer serialize:elem];
                                            }];
  jsonDict[@"quiet"] = valueObj.quiet;
  if (valueObj.customMessage) {
    jsonDict[@"custom_message"] = valueObj.customMessage;
  }

  return jsonDict;
}

+ (DBSHARINGAddFolderMemberArg *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  NSArray<DBSHARINGAddMember *> *members =
      [DBArraySerializer deserialize:valueDict[@"members"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGAddMemberSerializer deserialize:elem];
                           }];
  NSNumber *quiet = valueDict[@"quiet"] ?: @NO;
  NSString *customMessage = valueDict[@"custom_message"] ?: nil;

  return [[DBSHARINGAddFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId
                                                             members:members
                                                               quiet:quiet
                                                       customMessage:customMessage];
}

@end

#import "DBSHARINGAddFolderMemberError.h"
#import "DBSHARINGAddMemberSelectorError.h"
#import "DBSHARINGSharedFolderAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAddFolderMemberError

@synthesize accessError = _accessError;
@synthesize badMember = _badMember;
@synthesize tooManyMembers = _tooManyMembers;
@synthesize tooManyPendingInvites = _tooManyPendingInvites;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithEmailUnverified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorEmailUnverified;
  }
  return self;
}

- (instancetype)initWithBadMember:(DBSHARINGAddMemberSelectorError *)badMember {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorBadMember;
    _badMember = badMember;
  }
  return self;
}

- (instancetype)initWithCantShareOutsideTeam {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorCantShareOutsideTeam;
  }
  return self;
}

- (instancetype)initWithTooManyMembers:(NSNumber *)tooManyMembers {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorTooManyMembers;
    _tooManyMembers = tooManyMembers;
  }
  return self;
}

- (instancetype)initWithTooManyPendingInvites:(NSNumber *)tooManyPendingInvites {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorTooManyPendingInvites;
    _tooManyPendingInvites = tooManyPendingInvites;
  }
  return self;
}

- (instancetype)initWithRateLimit {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorRateLimit;
  }
  return self;
}

- (instancetype)initWithTooManyInvitees {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorTooManyInvitees;
  }
  return self;
}

- (instancetype)initWithInsufficientPlan {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorInsufficientPlan;
  }
  return self;
}

- (instancetype)initWithTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorTeamFolder;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddFolderMemberErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddFolderMemberErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBSHARINGAddMemberSelectorError *)badMember {
  if (![self isBadMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddFolderMemberErrorBadMember, but was %@.", [self tagName]];
  }
  return _badMember;
}

- (NSNumber *)tooManyMembers {
  if (![self isTooManyMembers]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGAddFolderMemberErrorTooManyMembers, but was %@.", [self tagName]];
  }
  return _tooManyMembers;
}

- (NSNumber *)tooManyPendingInvites {
  if (![self isTooManyPendingInvites]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddFolderMemberErrorTooManyPendingInvites, but was %@.",
                       [self tagName]];
  }
  return _tooManyPendingInvites;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGAddFolderMemberErrorAccessError;
}

- (BOOL)isEmailUnverified {
  return _tag == DBSHARINGAddFolderMemberErrorEmailUnverified;
}

- (BOOL)isBadMember {
  return _tag == DBSHARINGAddFolderMemberErrorBadMember;
}

- (BOOL)isCantShareOutsideTeam {
  return _tag == DBSHARINGAddFolderMemberErrorCantShareOutsideTeam;
}

- (BOOL)isTooManyMembers {
  return _tag == DBSHARINGAddFolderMemberErrorTooManyMembers;
}

- (BOOL)isTooManyPendingInvites {
  return _tag == DBSHARINGAddFolderMemberErrorTooManyPendingInvites;
}

- (BOOL)isRateLimit {
  return _tag == DBSHARINGAddFolderMemberErrorRateLimit;
}

- (BOOL)isTooManyInvitees {
  return _tag == DBSHARINGAddFolderMemberErrorTooManyInvitees;
}

- (BOOL)isInsufficientPlan {
  return _tag == DBSHARINGAddFolderMemberErrorInsufficientPlan;
}

- (BOOL)isTeamFolder {
  return _tag == DBSHARINGAddFolderMemberErrorTeamFolder;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGAddFolderMemberErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBSHARINGAddFolderMemberErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGAddFolderMemberErrorAccessError:
    return @"DBSHARINGAddFolderMemberErrorAccessError";
  case DBSHARINGAddFolderMemberErrorEmailUnverified:
    return @"DBSHARINGAddFolderMemberErrorEmailUnverified";
  case DBSHARINGAddFolderMemberErrorBadMember:
    return @"DBSHARINGAddFolderMemberErrorBadMember";
  case DBSHARINGAddFolderMemberErrorCantShareOutsideTeam:
    return @"DBSHARINGAddFolderMemberErrorCantShareOutsideTeam";
  case DBSHARINGAddFolderMemberErrorTooManyMembers:
    return @"DBSHARINGAddFolderMemberErrorTooManyMembers";
  case DBSHARINGAddFolderMemberErrorTooManyPendingInvites:
    return @"DBSHARINGAddFolderMemberErrorTooManyPendingInvites";
  case DBSHARINGAddFolderMemberErrorRateLimit:
    return @"DBSHARINGAddFolderMemberErrorRateLimit";
  case DBSHARINGAddFolderMemberErrorTooManyInvitees:
    return @"DBSHARINGAddFolderMemberErrorTooManyInvitees";
  case DBSHARINGAddFolderMemberErrorInsufficientPlan:
    return @"DBSHARINGAddFolderMemberErrorInsufficientPlan";
  case DBSHARINGAddFolderMemberErrorTeamFolder:
    return @"DBSHARINGAddFolderMemberErrorTeamFolder";
  case DBSHARINGAddFolderMemberErrorNoPermission:
    return @"DBSHARINGAddFolderMemberErrorNoPermission";
  case DBSHARINGAddFolderMemberErrorOther:
    return @"DBSHARINGAddFolderMemberErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAddFolderMemberErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAddFolderMemberErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAddFolderMemberErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAddFolderMemberErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGAddFolderMemberError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isEmailUnverified]) {
    jsonDict[@".tag"] = @"email_unverified";
  } else if ([valueObj isBadMember]) {
    jsonDict[@"bad_member"] = [[DBSHARINGAddMemberSelectorErrorSerializer serialize:valueObj.badMember] mutableCopy];
    jsonDict[@".tag"] = @"bad_member";
  } else if ([valueObj isCantShareOutsideTeam]) {
    jsonDict[@".tag"] = @"cant_share_outside_team";
  } else if ([valueObj isTooManyMembers]) {
    jsonDict[@"too_many_members"] = valueObj.tooManyMembers;
    jsonDict[@".tag"] = @"too_many_members";
  } else if ([valueObj isTooManyPendingInvites]) {
    jsonDict[@"too_many_pending_invites"] = valueObj.tooManyPendingInvites;
    jsonDict[@".tag"] = @"too_many_pending_invites";
  } else if ([valueObj isRateLimit]) {
    jsonDict[@".tag"] = @"rate_limit";
  } else if ([valueObj isTooManyInvitees]) {
    jsonDict[@".tag"] = @"too_many_invitees";
  } else if ([valueObj isInsufficientPlan]) {
    jsonDict[@".tag"] = @"insufficient_plan";
  } else if ([valueObj isTeamFolder]) {
    jsonDict[@".tag"] = @"team_folder";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGAddFolderMemberError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGAddFolderMemberError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"email_unverified"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithEmailUnverified];
  } else if ([tag isEqualToString:@"bad_member"]) {
    DBSHARINGAddMemberSelectorError *badMember =
        [DBSHARINGAddMemberSelectorErrorSerializer deserialize:valueDict[@"bad_member"]];
    return [[DBSHARINGAddFolderMemberError alloc] initWithBadMember:badMember];
  } else if ([tag isEqualToString:@"cant_share_outside_team"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithCantShareOutsideTeam];
  } else if ([tag isEqualToString:@"too_many_members"]) {
    NSNumber *tooManyMembers = valueDict[@"too_many_members"];
    return [[DBSHARINGAddFolderMemberError alloc] initWithTooManyMembers:tooManyMembers];
  } else if ([tag isEqualToString:@"too_many_pending_invites"]) {
    NSNumber *tooManyPendingInvites = valueDict[@"too_many_pending_invites"];
    return [[DBSHARINGAddFolderMemberError alloc] initWithTooManyPendingInvites:tooManyPendingInvites];
  } else if ([tag isEqualToString:@"rate_limit"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithRateLimit];
  } else if ([tag isEqualToString:@"too_many_invitees"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithTooManyInvitees];
  } else if ([tag isEqualToString:@"insufficient_plan"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithInsufficientPlan];
  } else if ([tag isEqualToString:@"team_folder"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithTeamFolder];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGAddFolderMemberError alloc] initWithOther];
  } else {
    return [[DBSHARINGAddFolderMemberError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGAddMember.h"
#import "DBSHARINGMemberSelector.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAddMember

#pragma mark - Constructors

- (instancetype)initWithMember:(DBSHARINGMemberSelector *)member accessLevel:(DBSHARINGAccessLevel *)accessLevel {

  self = [super init];
  if (self) {
    _member = member;
    _accessLevel = accessLevel ?: [[DBSHARINGAccessLevel alloc] initWithViewer];
  }
  return self;
}

- (instancetype)initWithMember:(DBSHARINGMemberSelector *)member {
  return [self initWithMember:member accessLevel:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAddMemberSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAddMemberSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAddMemberSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAddMemberSerializer

+ (NSDictionary *)serialize:(DBSHARINGAddMember *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"member"] = [DBSHARINGMemberSelectorSerializer serialize:valueObj.member];
  jsonDict[@"access_level"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessLevel];

  return jsonDict;
}

+ (DBSHARINGAddMember *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGMemberSelector *member = [DBSHARINGMemberSelectorSerializer deserialize:valueDict[@"member"]];
  DBSHARINGAccessLevel *accessLevel = valueDict[@"access_level"]
                                          ? [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_level"]]
                                          : [[DBSHARINGAccessLevel alloc] initWithViewer];

  return [[DBSHARINGAddMember alloc] initWithMember:member accessLevel:accessLevel];
}

@end

#import "DBSHARINGAddMemberSelectorError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGAddMemberSelectorError

@synthesize invalidDropboxId = _invalidDropboxId;
@synthesize invalidEmail = _invalidEmail;
@synthesize unverifiedDropboxId = _unverifiedDropboxId;

#pragma mark - Constructors

- (instancetype)initWithAutomaticGroup {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddMemberSelectorErrorAutomaticGroup;
  }
  return self;
}

- (instancetype)initWithInvalidDropboxId:(NSString *)invalidDropboxId {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddMemberSelectorErrorInvalidDropboxId;
    _invalidDropboxId = invalidDropboxId;
  }
  return self;
}

- (instancetype)initWithInvalidEmail:(NSString *)invalidEmail {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddMemberSelectorErrorInvalidEmail;
    _invalidEmail = invalidEmail;
  }
  return self;
}

- (instancetype)initWithUnverifiedDropboxId:(NSString *)unverifiedDropboxId {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddMemberSelectorErrorUnverifiedDropboxId;
    _unverifiedDropboxId = unverifiedDropboxId;
  }
  return self;
}

- (instancetype)initWithGroupDeleted {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddMemberSelectorErrorGroupDeleted;
  }
  return self;
}

- (instancetype)initWithGroupNotOnTeam {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddMemberSelectorErrorGroupNotOnTeam;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGAddMemberSelectorErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)invalidDropboxId {
  if (![self isInvalidDropboxId]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGAddMemberSelectorErrorInvalidDropboxId, but was %@.", [self tagName]];
  }
  return _invalidDropboxId;
}

- (NSString *)invalidEmail {
  if (![self isInvalidEmail]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGAddMemberSelectorErrorInvalidEmail, but was %@.", [self tagName]];
  }
  return _invalidEmail;
}

- (NSString *)unverifiedDropboxId {
  if (![self isUnverifiedDropboxId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGAddMemberSelectorErrorUnverifiedDropboxId, but was %@.",
                       [self tagName]];
  }
  return _unverifiedDropboxId;
}

#pragma mark - Tag state methods

- (BOOL)isAutomaticGroup {
  return _tag == DBSHARINGAddMemberSelectorErrorAutomaticGroup;
}

- (BOOL)isInvalidDropboxId {
  return _tag == DBSHARINGAddMemberSelectorErrorInvalidDropboxId;
}

- (BOOL)isInvalidEmail {
  return _tag == DBSHARINGAddMemberSelectorErrorInvalidEmail;
}

- (BOOL)isUnverifiedDropboxId {
  return _tag == DBSHARINGAddMemberSelectorErrorUnverifiedDropboxId;
}

- (BOOL)isGroupDeleted {
  return _tag == DBSHARINGAddMemberSelectorErrorGroupDeleted;
}

- (BOOL)isGroupNotOnTeam {
  return _tag == DBSHARINGAddMemberSelectorErrorGroupNotOnTeam;
}

- (BOOL)isOther {
  return _tag == DBSHARINGAddMemberSelectorErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGAddMemberSelectorErrorAutomaticGroup:
    return @"DBSHARINGAddMemberSelectorErrorAutomaticGroup";
  case DBSHARINGAddMemberSelectorErrorInvalidDropboxId:
    return @"DBSHARINGAddMemberSelectorErrorInvalidDropboxId";
  case DBSHARINGAddMemberSelectorErrorInvalidEmail:
    return @"DBSHARINGAddMemberSelectorErrorInvalidEmail";
  case DBSHARINGAddMemberSelectorErrorUnverifiedDropboxId:
    return @"DBSHARINGAddMemberSelectorErrorUnverifiedDropboxId";
  case DBSHARINGAddMemberSelectorErrorGroupDeleted:
    return @"DBSHARINGAddMemberSelectorErrorGroupDeleted";
  case DBSHARINGAddMemberSelectorErrorGroupNotOnTeam:
    return @"DBSHARINGAddMemberSelectorErrorGroupNotOnTeam";
  case DBSHARINGAddMemberSelectorErrorOther:
    return @"DBSHARINGAddMemberSelectorErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGAddMemberSelectorErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGAddMemberSelectorErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGAddMemberSelectorErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGAddMemberSelectorErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGAddMemberSelectorError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAutomaticGroup]) {
    jsonDict[@".tag"] = @"automatic_group";
  } else if ([valueObj isInvalidDropboxId]) {
    jsonDict[@"invalid_dropbox_id"] = valueObj.invalidDropboxId;
    jsonDict[@".tag"] = @"invalid_dropbox_id";
  } else if ([valueObj isInvalidEmail]) {
    jsonDict[@"invalid_email"] = valueObj.invalidEmail;
    jsonDict[@".tag"] = @"invalid_email";
  } else if ([valueObj isUnverifiedDropboxId]) {
    jsonDict[@"unverified_dropbox_id"] = valueObj.unverifiedDropboxId;
    jsonDict[@".tag"] = @"unverified_dropbox_id";
  } else if ([valueObj isGroupDeleted]) {
    jsonDict[@".tag"] = @"group_deleted";
  } else if ([valueObj isGroupNotOnTeam]) {
    jsonDict[@".tag"] = @"group_not_on_team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGAddMemberSelectorError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"automatic_group"]) {
    return [[DBSHARINGAddMemberSelectorError alloc] initWithAutomaticGroup];
  } else if ([tag isEqualToString:@"invalid_dropbox_id"]) {
    NSString *invalidDropboxId = valueDict[@"invalid_dropbox_id"];
    return [[DBSHARINGAddMemberSelectorError alloc] initWithInvalidDropboxId:invalidDropboxId];
  } else if ([tag isEqualToString:@"invalid_email"]) {
    NSString *invalidEmail = valueDict[@"invalid_email"];
    return [[DBSHARINGAddMemberSelectorError alloc] initWithInvalidEmail:invalidEmail];
  } else if ([tag isEqualToString:@"unverified_dropbox_id"]) {
    NSString *unverifiedDropboxId = valueDict[@"unverified_dropbox_id"];
    return [[DBSHARINGAddMemberSelectorError alloc] initWithUnverifiedDropboxId:unverifiedDropboxId];
  } else if ([tag isEqualToString:@"group_deleted"]) {
    return [[DBSHARINGAddMemberSelectorError alloc] initWithGroupDeleted];
  } else if ([tag isEqualToString:@"group_not_on_team"]) {
    return [[DBSHARINGAddMemberSelectorError alloc] initWithGroupNotOnTeam];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGAddMemberSelectorError alloc] initWithOther];
  } else {
    return [[DBSHARINGAddMemberSelectorError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGChangeFileMemberAccessArgs.h"
#import "DBSHARINGMemberSelector.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGChangeFileMemberAccessArgs

#pragma mark - Constructors

- (instancetype)initWithFile:(NSString *)file
                      member:(DBSHARINGMemberSelector *)member
                 accessLevel:(DBSHARINGAccessLevel *)accessLevel {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"](file);

  self = [super init];
  if (self) {
    _file = file;
    _member = member;
    _accessLevel = accessLevel;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGChangeFileMemberAccessArgsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGChangeFileMemberAccessArgsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGChangeFileMemberAccessArgsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGChangeFileMemberAccessArgsSerializer

+ (NSDictionary *)serialize:(DBSHARINGChangeFileMemberAccessArgs *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file"] = valueObj.file;
  jsonDict[@"member"] = [DBSHARINGMemberSelectorSerializer serialize:valueObj.member];
  jsonDict[@"access_level"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessLevel];

  return jsonDict;
}

+ (DBSHARINGChangeFileMemberAccessArgs *)deserialize:(NSDictionary *)valueDict {
  NSString *file = valueDict[@"file"];
  DBSHARINGMemberSelector *member = [DBSHARINGMemberSelectorSerializer deserialize:valueDict[@"member"]];
  DBSHARINGAccessLevel *accessLevel = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_level"]];

  return [[DBSHARINGChangeFileMemberAccessArgs alloc] initWithFile:file member:member accessLevel:accessLevel];
}

@end

#import "DBSHARINGCollectionLinkMetadata.h"
#import "DBSHARINGLinkMetadata.h"
#import "DBSHARINGPathLinkMetadata.h"
#import "DBSHARINGVisibility.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGLinkMetadata

#pragma mark - Constructors

- (instancetype)initWithUrl:(NSString *)url visibility:(DBSHARINGVisibility *)visibility expires:(NSDate *)expires {

  self = [super init];
  if (self) {
    _url = url;
    _visibility = visibility;
    _expires = expires;
  }
  return self;
}

- (instancetype)initWithUrl:(NSString *)url visibility:(DBSHARINGVisibility *)visibility {
  return [self initWithUrl:url visibility:visibility expires:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGLinkMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGLinkMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGLinkMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGLinkMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGLinkMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"url"] = valueObj.url;
  jsonDict[@"visibility"] = [DBSHARINGVisibilitySerializer serialize:valueObj.visibility];
  if (valueObj.expires) {
    jsonDict[@"expires"] = [DBNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  if ([valueObj isKindOfClass:[DBSHARINGPathLinkMetadata class]]) {
    NSDictionary *subTypeFields = [DBSHARINGPathLinkMetadataSerializer serialize:(DBSHARINGPathLinkMetadata *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"path";
  } else if ([valueObj isKindOfClass:[DBSHARINGCollectionLinkMetadata class]]) {
    NSDictionary *subTypeFields =
        [DBSHARINGCollectionLinkMetadataSerializer serialize:(DBSHARINGCollectionLinkMetadata *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"collection";
  }

  return jsonDict;
}

+ (DBSHARINGLinkMetadata *)deserialize:(NSDictionary *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"path"]) {
    return [DBSHARINGPathLinkMetadataSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"collection"]) {
    return [DBSHARINGCollectionLinkMetadataSerializer deserialize:valueDict];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end

#import "DBSHARINGCollectionLinkMetadata.h"
#import "DBSHARINGLinkMetadata.h"
#import "DBSHARINGVisibility.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGCollectionLinkMetadata

#pragma mark - Constructors

- (instancetype)initWithUrl:(NSString *)url visibility:(DBSHARINGVisibility *)visibility expires:(NSDate *)expires {

  self = [super initWithUrl:url visibility:visibility expires:expires];
  if (self) {
  }
  return self;
}

- (instancetype)initWithUrl:(NSString *)url visibility:(DBSHARINGVisibility *)visibility {
  return [self initWithUrl:url visibility:visibility expires:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGCollectionLinkMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGCollectionLinkMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGCollectionLinkMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGCollectionLinkMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGCollectionLinkMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"url"] = valueObj.url;
  jsonDict[@"visibility"] = [DBSHARINGVisibilitySerializer serialize:valueObj.visibility];
  if (valueObj.expires) {
    jsonDict[@"expires"] = [DBNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return jsonDict;
}

+ (DBSHARINGCollectionLinkMetadata *)deserialize:(NSDictionary *)valueDict {
  NSString *url = valueDict[@"url"];
  DBSHARINGVisibility *visibility = [DBSHARINGVisibilitySerializer deserialize:valueDict[@"visibility"]];
  NSDate *expires = valueDict[@"expires"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"expires"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;

  return [[DBSHARINGCollectionLinkMetadata alloc] initWithUrl:url visibility:visibility expires:expires];
}

@end

#import "DBSHARINGCreateSharedLinkArg.h"
#import "DBSHARINGPendingUploadMode.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGCreateSharedLinkArg

#pragma mark - Constructors

- (instancetype)initWithPath:(NSString *)path
                    shortUrl:(NSNumber *)shortUrl
               pendingUpload:(DBSHARINGPendingUploadMode *)pendingUpload {

  self = [super init];
  if (self) {
    _path = path;
    _shortUrl = shortUrl ?: @NO;
    _pendingUpload = pendingUpload;
  }
  return self;
}

- (instancetype)initWithPath:(NSString *)path {
  return [self initWithPath:path shortUrl:nil pendingUpload:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGCreateSharedLinkArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGCreateSharedLinkArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGCreateSharedLinkArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGCreateSharedLinkArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGCreateSharedLinkArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"path"] = valueObj.path;
  jsonDict[@"short_url"] = valueObj.shortUrl;
  if (valueObj.pendingUpload) {
    jsonDict[@"pending_upload"] = [DBSHARINGPendingUploadModeSerializer serialize:valueObj.pendingUpload];
  }

  return jsonDict;
}

+ (DBSHARINGCreateSharedLinkArg *)deserialize:(NSDictionary *)valueDict {
  NSString *path = valueDict[@"path"];
  NSNumber *shortUrl = valueDict[@"short_url"] ?: @NO;
  DBSHARINGPendingUploadMode *pendingUpload =
      valueDict[@"pending_upload"] ? [DBSHARINGPendingUploadModeSerializer deserialize:valueDict[@"pending_upload"]]
                                   : nil;

  return [[DBSHARINGCreateSharedLinkArg alloc] initWithPath:path shortUrl:shortUrl pendingUpload:pendingUpload];
}

@end

#import "DBFILESLookupError.h"
#import "DBSHARINGCreateSharedLinkError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGCreateSharedLinkError

@synthesize path = _path;

#pragma mark - Constructors

- (instancetype)initWithPath:(DBFILESLookupError *)path {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkErrorPath;
    _path = path;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBFILESLookupError *)path {
  if (![self isPath]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGCreateSharedLinkErrorPath, but was %@.", [self tagName]];
  }
  return _path;
}

#pragma mark - Tag state methods

- (BOOL)isPath {
  return _tag == DBSHARINGCreateSharedLinkErrorPath;
}

- (BOOL)isOther {
  return _tag == DBSHARINGCreateSharedLinkErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGCreateSharedLinkErrorPath:
    return @"DBSHARINGCreateSharedLinkErrorPath";
  case DBSHARINGCreateSharedLinkErrorOther:
    return @"DBSHARINGCreateSharedLinkErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGCreateSharedLinkErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGCreateSharedLinkErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGCreateSharedLinkErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGCreateSharedLinkErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGCreateSharedLinkError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPath]) {
    jsonDict[@"path"] = [[DBFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
    jsonDict[@".tag"] = @"path";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGCreateSharedLinkError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"path"]) {
    DBFILESLookupError *path = [DBFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
    return [[DBSHARINGCreateSharedLinkError alloc] initWithPath:path];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGCreateSharedLinkError alloc] initWithOther];
  } else {
    return [[DBSHARINGCreateSharedLinkError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGCreateSharedLinkWithSettingsArg.h"
#import "DBSHARINGSharedLinkSettings.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGCreateSharedLinkWithSettingsArg

#pragma mark - Constructors

- (instancetype)initWithPath:(NSString *)path settings:(DBSHARINGSharedLinkSettings *)settings {
  [DBStoneValidators stringValidator:nil maxLength:nil
                             pattern:@"(/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)"](path);

  self = [super init];
  if (self) {
    _path = path;
    _settings = settings;
  }
  return self;
}

- (instancetype)initWithPath:(NSString *)path {
  return [self initWithPath:path settings:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGCreateSharedLinkWithSettingsArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGCreateSharedLinkWithSettingsArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGCreateSharedLinkWithSettingsArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGCreateSharedLinkWithSettingsArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGCreateSharedLinkWithSettingsArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"path"] = valueObj.path;
  if (valueObj.settings) {
    jsonDict[@"settings"] = [DBSHARINGSharedLinkSettingsSerializer serialize:valueObj.settings];
  }

  return jsonDict;
}

+ (DBSHARINGCreateSharedLinkWithSettingsArg *)deserialize:(NSDictionary *)valueDict {
  NSString *path = valueDict[@"path"];
  DBSHARINGSharedLinkSettings *settings =
      valueDict[@"settings"] ? [DBSHARINGSharedLinkSettingsSerializer deserialize:valueDict[@"settings"]] : nil;

  return [[DBSHARINGCreateSharedLinkWithSettingsArg alloc] initWithPath:path settings:settings];
}

@end

#import "DBFILESLookupError.h"
#import "DBSHARINGCreateSharedLinkWithSettingsError.h"
#import "DBSHARINGSharedLinkSettingsError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGCreateSharedLinkWithSettingsError

@synthesize path = _path;
@synthesize settingsError = _settingsError;

#pragma mark - Constructors

- (instancetype)initWithPath:(DBFILESLookupError *)path {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkWithSettingsErrorPath;
    _path = path;
  }
  return self;
}

- (instancetype)initWithEmailNotVerified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkWithSettingsErrorEmailNotVerified;
  }
  return self;
}

- (instancetype)initWithSharedLinkAlreadyExists {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkWithSettingsErrorSharedLinkAlreadyExists;
  }
  return self;
}

- (instancetype)initWithSettingsError:(DBSHARINGSharedLinkSettingsError *)settingsError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkWithSettingsErrorSettingsError;
    _settingsError = settingsError;
  }
  return self;
}

- (instancetype)initWithAccessDenied {
  self = [super init];
  if (self) {
    _tag = DBSHARINGCreateSharedLinkWithSettingsErrorAccessDenied;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBFILESLookupError *)path {
  if (![self isPath]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGCreateSharedLinkWithSettingsErrorPath, but was %@.", [self tagName]];
  }
  return _path;
}

- (DBSHARINGSharedLinkSettingsError *)settingsError {
  if (![self isSettingsError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGCreateSharedLinkWithSettingsErrorSettingsError, but was %@.",
                       [self tagName]];
  }
  return _settingsError;
}

#pragma mark - Tag state methods

- (BOOL)isPath {
  return _tag == DBSHARINGCreateSharedLinkWithSettingsErrorPath;
}

- (BOOL)isEmailNotVerified {
  return _tag == DBSHARINGCreateSharedLinkWithSettingsErrorEmailNotVerified;
}

- (BOOL)isSharedLinkAlreadyExists {
  return _tag == DBSHARINGCreateSharedLinkWithSettingsErrorSharedLinkAlreadyExists;
}

- (BOOL)isSettingsError {
  return _tag == DBSHARINGCreateSharedLinkWithSettingsErrorSettingsError;
}

- (BOOL)isAccessDenied {
  return _tag == DBSHARINGCreateSharedLinkWithSettingsErrorAccessDenied;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGCreateSharedLinkWithSettingsErrorPath:
    return @"DBSHARINGCreateSharedLinkWithSettingsErrorPath";
  case DBSHARINGCreateSharedLinkWithSettingsErrorEmailNotVerified:
    return @"DBSHARINGCreateSharedLinkWithSettingsErrorEmailNotVerified";
  case DBSHARINGCreateSharedLinkWithSettingsErrorSharedLinkAlreadyExists:
    return @"DBSHARINGCreateSharedLinkWithSettingsErrorSharedLinkAlreadyExists";
  case DBSHARINGCreateSharedLinkWithSettingsErrorSettingsError:
    return @"DBSHARINGCreateSharedLinkWithSettingsErrorSettingsError";
  case DBSHARINGCreateSharedLinkWithSettingsErrorAccessDenied:
    return @"DBSHARINGCreateSharedLinkWithSettingsErrorAccessDenied";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGCreateSharedLinkWithSettingsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGCreateSharedLinkWithSettingsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGCreateSharedLinkWithSettingsErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGCreateSharedLinkWithSettingsErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGCreateSharedLinkWithSettingsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPath]) {
    jsonDict[@"path"] = [[DBFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
    jsonDict[@".tag"] = @"path";
  } else if ([valueObj isEmailNotVerified]) {
    jsonDict[@".tag"] = @"email_not_verified";
  } else if ([valueObj isSharedLinkAlreadyExists]) {
    jsonDict[@".tag"] = @"shared_link_already_exists";
  } else if ([valueObj isSettingsError]) {
    jsonDict[@"settings_error"] =
        [[DBSHARINGSharedLinkSettingsErrorSerializer serialize:valueObj.settingsError] mutableCopy];
    jsonDict[@".tag"] = @"settings_error";
  } else if ([valueObj isAccessDenied]) {
    jsonDict[@".tag"] = @"access_denied";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGCreateSharedLinkWithSettingsError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"path"]) {
    DBFILESLookupError *path = [DBFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
    return [[DBSHARINGCreateSharedLinkWithSettingsError alloc] initWithPath:path];
  } else if ([tag isEqualToString:@"email_not_verified"]) {
    return [[DBSHARINGCreateSharedLinkWithSettingsError alloc] initWithEmailNotVerified];
  } else if ([tag isEqualToString:@"shared_link_already_exists"]) {
    return [[DBSHARINGCreateSharedLinkWithSettingsError alloc] initWithSharedLinkAlreadyExists];
  } else if ([tag isEqualToString:@"settings_error"]) {
    DBSHARINGSharedLinkSettingsError *settingsError =
        [DBSHARINGSharedLinkSettingsErrorSerializer deserialize:valueDict[@"settings_error"]];
    return [[DBSHARINGCreateSharedLinkWithSettingsError alloc] initWithSettingsError:settingsError];
  } else if ([tag isEqualToString:@"access_denied"]) {
    return [[DBSHARINGCreateSharedLinkWithSettingsError alloc] initWithAccessDenied];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}
@end

#import "DBSHARINGFileAction.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFileAction

#pragma mark - Constructors

- (instancetype)initWithEditContents {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileActionEditContents;
  }
  return self;
}

- (instancetype)initWithInviteViewer {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileActionInviteViewer;
  }
  return self;
}

- (instancetype)initWithInviteViewerNoComment {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileActionInviteViewerNoComment;
  }
  return self;
}

- (instancetype)initWithUnshare {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileActionUnshare;
  }
  return self;
}

- (instancetype)initWithRelinquishMembership {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileActionRelinquishMembership;
  }
  return self;
}

- (instancetype)initWithShareLink {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileActionShareLink;
  }
  return self;
}

- (instancetype)initWithCreateLink {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileActionCreateLink;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileActionOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isEditContents {
  return _tag == DBSHARINGFileActionEditContents;
}

- (BOOL)isInviteViewer {
  return _tag == DBSHARINGFileActionInviteViewer;
}

- (BOOL)isInviteViewerNoComment {
  return _tag == DBSHARINGFileActionInviteViewerNoComment;
}

- (BOOL)isUnshare {
  return _tag == DBSHARINGFileActionUnshare;
}

- (BOOL)isRelinquishMembership {
  return _tag == DBSHARINGFileActionRelinquishMembership;
}

- (BOOL)isShareLink {
  return _tag == DBSHARINGFileActionShareLink;
}

- (BOOL)isCreateLink {
  return _tag == DBSHARINGFileActionCreateLink;
}

- (BOOL)isOther {
  return _tag == DBSHARINGFileActionOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGFileActionEditContents:
    return @"DBSHARINGFileActionEditContents";
  case DBSHARINGFileActionInviteViewer:
    return @"DBSHARINGFileActionInviteViewer";
  case DBSHARINGFileActionInviteViewerNoComment:
    return @"DBSHARINGFileActionInviteViewerNoComment";
  case DBSHARINGFileActionUnshare:
    return @"DBSHARINGFileActionUnshare";
  case DBSHARINGFileActionRelinquishMembership:
    return @"DBSHARINGFileActionRelinquishMembership";
  case DBSHARINGFileActionShareLink:
    return @"DBSHARINGFileActionShareLink";
  case DBSHARINGFileActionCreateLink:
    return @"DBSHARINGFileActionCreateLink";
  case DBSHARINGFileActionOther:
    return @"DBSHARINGFileActionOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFileActionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFileActionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFileActionSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFileActionSerializer

+ (NSDictionary *)serialize:(DBSHARINGFileAction *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEditContents]) {
    jsonDict[@".tag"] = @"edit_contents";
  } else if ([valueObj isInviteViewer]) {
    jsonDict[@".tag"] = @"invite_viewer";
  } else if ([valueObj isInviteViewerNoComment]) {
    jsonDict[@".tag"] = @"invite_viewer_no_comment";
  } else if ([valueObj isUnshare]) {
    jsonDict[@".tag"] = @"unshare";
  } else if ([valueObj isRelinquishMembership]) {
    jsonDict[@".tag"] = @"relinquish_membership";
  } else if ([valueObj isShareLink]) {
    jsonDict[@".tag"] = @"share_link";
  } else if ([valueObj isCreateLink]) {
    jsonDict[@".tag"] = @"create_link";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGFileAction *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"edit_contents"]) {
    return [[DBSHARINGFileAction alloc] initWithEditContents];
  } else if ([tag isEqualToString:@"invite_viewer"]) {
    return [[DBSHARINGFileAction alloc] initWithInviteViewer];
  } else if ([tag isEqualToString:@"invite_viewer_no_comment"]) {
    return [[DBSHARINGFileAction alloc] initWithInviteViewerNoComment];
  } else if ([tag isEqualToString:@"unshare"]) {
    return [[DBSHARINGFileAction alloc] initWithUnshare];
  } else if ([tag isEqualToString:@"relinquish_membership"]) {
    return [[DBSHARINGFileAction alloc] initWithRelinquishMembership];
  } else if ([tag isEqualToString:@"share_link"]) {
    return [[DBSHARINGFileAction alloc] initWithShareLink];
  } else if ([tag isEqualToString:@"create_link"]) {
    return [[DBSHARINGFileAction alloc] initWithCreateLink];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGFileAction alloc] initWithOther];
  } else {
    return [[DBSHARINGFileAction alloc] initWithOther];
  }
}
@end

#import "DBSHARINGFileErrorResult.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFileErrorResult

@synthesize fileNotFoundError = _fileNotFoundError;
@synthesize invalidFileActionError = _invalidFileActionError;
@synthesize permissionDeniedError = _permissionDeniedError;

#pragma mark - Constructors

- (instancetype)initWithFileNotFoundError:(NSString *)fileNotFoundError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileErrorResultFileNotFoundError;
    _fileNotFoundError = fileNotFoundError;
  }
  return self;
}

- (instancetype)initWithInvalidFileActionError:(NSString *)invalidFileActionError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileErrorResultInvalidFileActionError;
    _invalidFileActionError = invalidFileActionError;
  }
  return self;
}

- (instancetype)initWithPermissionDeniedError:(NSString *)permissionDeniedError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileErrorResultPermissionDeniedError;
    _permissionDeniedError = permissionDeniedError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileErrorResultOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)fileNotFoundError {
  if (![self isFileNotFoundError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGFileErrorResultFileNotFoundError, but was %@.", [self tagName]];
  }
  return _fileNotFoundError;
}

- (NSString *)invalidFileActionError {
  if (![self isInvalidFileActionError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGFileErrorResultInvalidFileActionError, but was %@.", [self tagName]];
  }
  return _invalidFileActionError;
}

- (NSString *)permissionDeniedError {
  if (![self isPermissionDeniedError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGFileErrorResultPermissionDeniedError, but was %@.", [self tagName]];
  }
  return _permissionDeniedError;
}

#pragma mark - Tag state methods

- (BOOL)isFileNotFoundError {
  return _tag == DBSHARINGFileErrorResultFileNotFoundError;
}

- (BOOL)isInvalidFileActionError {
  return _tag == DBSHARINGFileErrorResultInvalidFileActionError;
}

- (BOOL)isPermissionDeniedError {
  return _tag == DBSHARINGFileErrorResultPermissionDeniedError;
}

- (BOOL)isOther {
  return _tag == DBSHARINGFileErrorResultOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGFileErrorResultFileNotFoundError:
    return @"DBSHARINGFileErrorResultFileNotFoundError";
  case DBSHARINGFileErrorResultInvalidFileActionError:
    return @"DBSHARINGFileErrorResultInvalidFileActionError";
  case DBSHARINGFileErrorResultPermissionDeniedError:
    return @"DBSHARINGFileErrorResultPermissionDeniedError";
  case DBSHARINGFileErrorResultOther:
    return @"DBSHARINGFileErrorResultOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFileErrorResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFileErrorResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFileErrorResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFileErrorResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGFileErrorResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isFileNotFoundError]) {
    jsonDict[@"file_not_found_error"] = valueObj.fileNotFoundError;
    jsonDict[@".tag"] = @"file_not_found_error";
  } else if ([valueObj isInvalidFileActionError]) {
    jsonDict[@"invalid_file_action_error"] = valueObj.invalidFileActionError;
    jsonDict[@".tag"] = @"invalid_file_action_error";
  } else if ([valueObj isPermissionDeniedError]) {
    jsonDict[@"permission_denied_error"] = valueObj.permissionDeniedError;
    jsonDict[@".tag"] = @"permission_denied_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGFileErrorResult *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"file_not_found_error"]) {
    NSString *fileNotFoundError = valueDict[@"file_not_found_error"];
    return [[DBSHARINGFileErrorResult alloc] initWithFileNotFoundError:fileNotFoundError];
  } else if ([tag isEqualToString:@"invalid_file_action_error"]) {
    NSString *invalidFileActionError = valueDict[@"invalid_file_action_error"];
    return [[DBSHARINGFileErrorResult alloc] initWithInvalidFileActionError:invalidFileActionError];
  } else if ([tag isEqualToString:@"permission_denied_error"]) {
    NSString *permissionDeniedError = valueDict[@"permission_denied_error"];
    return [[DBSHARINGFileErrorResult alloc] initWithPermissionDeniedError:permissionDeniedError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGFileErrorResult alloc] initWithOther];
  } else {
    return [[DBSHARINGFileErrorResult alloc] initWithOther];
  }
}
@end

#import "DBSHARINGFileLinkMetadata.h"
#import "DBSHARINGFolderLinkMetadata.h"
#import "DBSHARINGLinkPermissions.h"
#import "DBSHARINGSharedLinkMetadata.h"
#import "DBSHARINGTeamMemberInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBSHARINGSharedLinkMetadata

#pragma mark - Constructors

- (instancetype)initWithUrl:(NSString *)url
                       name:(NSString *)name
            linkPermissions:(DBSHARINGLinkPermissions *)linkPermissions
                        id_:(NSString *)id_
                    expires:(NSDate *)expires
                  pathLower:(NSString *)pathLower
             teamMemberInfo:(DBSHARINGTeamMemberInfo *)teamMemberInfo
       contentOwnerTeamInfo:(DBUSERSTeam *)contentOwnerTeamInfo {
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:nil]](id_);

  self = [super init];
  if (self) {
    _url = url;
    _id_ = id_;
    _name = name;
    _expires = expires;
    _pathLower = pathLower;
    _linkPermissions = linkPermissions;
    _teamMemberInfo = teamMemberInfo;
    _contentOwnerTeamInfo = contentOwnerTeamInfo;
  }
  return self;
}

- (instancetype)initWithUrl:(NSString *)url
                       name:(NSString *)name
            linkPermissions:(DBSHARINGLinkPermissions *)linkPermissions {
  return [self initWithUrl:url
                      name:name
           linkPermissions:linkPermissions
                       id_:nil
                   expires:nil
                 pathLower:nil
            teamMemberInfo:nil
      contentOwnerTeamInfo:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedLinkMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedLinkMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedLinkMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedLinkMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedLinkMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"url"] = valueObj.url;
  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"link_permissions"] = [DBSHARINGLinkPermissionsSerializer serialize:valueObj.linkPermissions];
  if (valueObj.id_) {
    jsonDict[@"id"] = valueObj.id_;
  }
  if (valueObj.expires) {
    jsonDict[@"expires"] = [DBNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.pathLower) {
    jsonDict[@"path_lower"] = valueObj.pathLower;
  }
  if (valueObj.teamMemberInfo) {
    jsonDict[@"team_member_info"] = [DBSHARINGTeamMemberInfoSerializer serialize:valueObj.teamMemberInfo];
  }
  if (valueObj.contentOwnerTeamInfo) {
    jsonDict[@"content_owner_team_info"] = [DBUSERSTeamSerializer serialize:valueObj.contentOwnerTeamInfo];
  }

  if ([valueObj isKindOfClass:[DBSHARINGFileLinkMetadata class]]) {
    NSDictionary *subTypeFields = [DBSHARINGFileLinkMetadataSerializer serialize:(DBSHARINGFileLinkMetadata *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"file";
  } else if ([valueObj isKindOfClass:[DBSHARINGFolderLinkMetadata class]]) {
    NSDictionary *subTypeFields =
        [DBSHARINGFolderLinkMetadataSerializer serialize:(DBSHARINGFolderLinkMetadata *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"folder";
  }

  return jsonDict;
}

+ (DBSHARINGSharedLinkMetadata *)deserialize:(NSDictionary *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"file"]) {
    return [DBSHARINGFileLinkMetadataSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"folder"]) {
    return [DBSHARINGFolderLinkMetadataSerializer deserialize:valueDict];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end

#import "DBSHARINGFileLinkMetadata.h"
#import "DBSHARINGLinkPermissions.h"
#import "DBSHARINGSharedLinkMetadata.h"
#import "DBSHARINGTeamMemberInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBSHARINGFileLinkMetadata

#pragma mark - Constructors

- (instancetype)initWithUrl:(NSString *)url
                       name:(NSString *)name
            linkPermissions:(DBSHARINGLinkPermissions *)linkPermissions
             clientModified:(NSDate *)clientModified
             serverModified:(NSDate *)serverModified
                        rev:(NSString *)rev
                       size:(NSNumber *)size
                        id_:(NSString *)id_
                    expires:(NSDate *)expires
                  pathLower:(NSString *)pathLower
             teamMemberInfo:(DBSHARINGTeamMemberInfo *)teamMemberInfo
       contentOwnerTeamInfo:(DBUSERSTeam *)contentOwnerTeamInfo {
  [DBStoneValidators stringValidator:@(9) maxLength:nil pattern:@"[0-9a-f]+"](rev);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:nil]](id_);

  self = [super initWithUrl:url
                       name:name
            linkPermissions:linkPermissions
                        id_:id_
                    expires:expires
                  pathLower:pathLower
             teamMemberInfo:teamMemberInfo
       contentOwnerTeamInfo:contentOwnerTeamInfo];
  if (self) {
    _clientModified = clientModified;
    _serverModified = serverModified;
    _rev = rev;
    _size = size;
  }
  return self;
}

- (instancetype)initWithUrl:(NSString *)url
                       name:(NSString *)name
            linkPermissions:(DBSHARINGLinkPermissions *)linkPermissions
             clientModified:(NSDate *)clientModified
             serverModified:(NSDate *)serverModified
                        rev:(NSString *)rev
                       size:(NSNumber *)size {
  return [self initWithUrl:url
                      name:name
           linkPermissions:linkPermissions
            clientModified:clientModified
            serverModified:serverModified
                       rev:rev
                      size:size
                       id_:nil
                   expires:nil
                 pathLower:nil
            teamMemberInfo:nil
      contentOwnerTeamInfo:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFileLinkMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFileLinkMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFileLinkMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFileLinkMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGFileLinkMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"url"] = valueObj.url;
  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"link_permissions"] = [DBSHARINGLinkPermissionsSerializer serialize:valueObj.linkPermissions];
  jsonDict[@"client_modified"] =
      [DBNSDateSerializer serialize:valueObj.clientModified dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  jsonDict[@"server_modified"] =
      [DBNSDateSerializer serialize:valueObj.serverModified dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  jsonDict[@"rev"] = valueObj.rev;
  jsonDict[@"size"] = valueObj.size;
  if (valueObj.id_) {
    jsonDict[@"id"] = valueObj.id_;
  }
  if (valueObj.expires) {
    jsonDict[@"expires"] = [DBNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.pathLower) {
    jsonDict[@"path_lower"] = valueObj.pathLower;
  }
  if (valueObj.teamMemberInfo) {
    jsonDict[@"team_member_info"] = [DBSHARINGTeamMemberInfoSerializer serialize:valueObj.teamMemberInfo];
  }
  if (valueObj.contentOwnerTeamInfo) {
    jsonDict[@"content_owner_team_info"] = [DBUSERSTeamSerializer serialize:valueObj.contentOwnerTeamInfo];
  }

  return jsonDict;
}

+ (DBSHARINGFileLinkMetadata *)deserialize:(NSDictionary *)valueDict {
  NSString *url = valueDict[@"url"];
  NSString *name = valueDict[@"name"];
  DBSHARINGLinkPermissions *linkPermissions =
      [DBSHARINGLinkPermissionsSerializer deserialize:valueDict[@"link_permissions"]];
  NSDate *clientModified =
      [DBNSDateSerializer deserialize:valueDict[@"client_modified"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  NSDate *serverModified =
      [DBNSDateSerializer deserialize:valueDict[@"server_modified"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  NSString *rev = valueDict[@"rev"];
  NSNumber *size = valueDict[@"size"];
  NSString *id_ = valueDict[@"id"] ?: nil;
  NSDate *expires = valueDict[@"expires"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"expires"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSString *pathLower = valueDict[@"path_lower"] ?: nil;
  DBSHARINGTeamMemberInfo *teamMemberInfo =
      valueDict[@"team_member_info"] ? [DBSHARINGTeamMemberInfoSerializer deserialize:valueDict[@"team_member_info"]]
                                     : nil;
  DBUSERSTeam *contentOwnerTeamInfo = valueDict[@"content_owner_team_info"]
                                          ? [DBUSERSTeamSerializer deserialize:valueDict[@"content_owner_team_info"]]
                                          : nil;

  return [[DBSHARINGFileLinkMetadata alloc] initWithUrl:url
                                                   name:name
                                        linkPermissions:linkPermissions
                                         clientModified:clientModified
                                         serverModified:serverModified
                                                    rev:rev
                                                   size:size
                                                    id_:id_
                                                expires:expires
                                              pathLower:pathLower
                                         teamMemberInfo:teamMemberInfo
                                   contentOwnerTeamInfo:contentOwnerTeamInfo];
}

@end

#import "DBSHARINGFileMemberActionError.h"
#import "DBSHARINGSharingFileAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFileMemberActionError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithInvalidMember {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileMemberActionErrorInvalidMember;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileMemberActionErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileMemberActionErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileMemberActionErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGFileMemberActionErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isInvalidMember {
  return _tag == DBSHARINGFileMemberActionErrorInvalidMember;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGFileMemberActionErrorNoPermission;
}

- (BOOL)isAccessError {
  return _tag == DBSHARINGFileMemberActionErrorAccessError;
}

- (BOOL)isOther {
  return _tag == DBSHARINGFileMemberActionErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGFileMemberActionErrorInvalidMember:
    return @"DBSHARINGFileMemberActionErrorInvalidMember";
  case DBSHARINGFileMemberActionErrorNoPermission:
    return @"DBSHARINGFileMemberActionErrorNoPermission";
  case DBSHARINGFileMemberActionErrorAccessError:
    return @"DBSHARINGFileMemberActionErrorAccessError";
  case DBSHARINGFileMemberActionErrorOther:
    return @"DBSHARINGFileMemberActionErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFileMemberActionErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFileMemberActionErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFileMemberActionErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFileMemberActionErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGFileMemberActionError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidMember]) {
    jsonDict[@".tag"] = @"invalid_member";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGFileMemberActionError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_member"]) {
    return [[DBSHARINGFileMemberActionError alloc] initWithInvalidMember];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGFileMemberActionError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGFileMemberActionError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGFileMemberActionError alloc] initWithOther];
  } else {
    return [[DBSHARINGFileMemberActionError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGFileMemberActionError.h"
#import "DBSHARINGFileMemberActionIndividualResult.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFileMemberActionIndividualResult

@synthesize success = _success;
@synthesize memberError = _memberError;

#pragma mark - Constructors

- (instancetype)initWithSuccess:(DBSHARINGAccessLevel *)success {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileMemberActionIndividualResultSuccess;
    _success = success;
  }
  return self;
}

- (instancetype)initWithMemberError:(DBSHARINGFileMemberActionError *)memberError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileMemberActionIndividualResultMemberError;
    _memberError = memberError;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGAccessLevel *)success {
  if (![self isSuccess]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGFileMemberActionIndividualResultSuccess, but was %@.", [self tagName]];
  }
  return _success;
}

- (DBSHARINGFileMemberActionError *)memberError {
  if (![self isMemberError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGFileMemberActionIndividualResultMemberError, but was %@.",
                       [self tagName]];
  }
  return _memberError;
}

#pragma mark - Tag state methods

- (BOOL)isSuccess {
  return _tag == DBSHARINGFileMemberActionIndividualResultSuccess;
}

- (BOOL)isMemberError {
  return _tag == DBSHARINGFileMemberActionIndividualResultMemberError;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGFileMemberActionIndividualResultSuccess:
    return @"DBSHARINGFileMemberActionIndividualResultSuccess";
  case DBSHARINGFileMemberActionIndividualResultMemberError:
    return @"DBSHARINGFileMemberActionIndividualResultMemberError";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFileMemberActionIndividualResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFileMemberActionIndividualResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFileMemberActionIndividualResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFileMemberActionIndividualResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGFileMemberActionIndividualResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSuccess]) {
    if (valueObj.success) {
      jsonDict = [[DBSHARINGAccessLevelSerializer serialize:valueObj.success] mutableCopy];
    }
    jsonDict[@".tag"] = @"success";
  } else if ([valueObj isMemberError]) {
    jsonDict[@"member_error"] = [[DBSHARINGFileMemberActionErrorSerializer serialize:valueObj.memberError] mutableCopy];
    jsonDict[@".tag"] = @"member_error";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGFileMemberActionIndividualResult *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"success"]) {
    DBSHARINGAccessLevel *success =
        valueDict[@"success"] ? [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"success"]] : nil;
    return [[DBSHARINGFileMemberActionIndividualResult alloc] initWithSuccess:success];
  } else if ([tag isEqualToString:@"member_error"]) {
    DBSHARINGFileMemberActionError *memberError =
        [DBSHARINGFileMemberActionErrorSerializer deserialize:valueDict[@"member_error"]];
    return [[DBSHARINGFileMemberActionIndividualResult alloc] initWithMemberError:memberError];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}
@end

#import "DBSHARINGFileMemberActionIndividualResult.h"
#import "DBSHARINGFileMemberActionResult.h"
#import "DBSHARINGMemberSelector.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFileMemberActionResult

#pragma mark - Constructors

- (instancetype)initWithMember:(DBSHARINGMemberSelector *)member
                        result:(DBSHARINGFileMemberActionIndividualResult *)result {

  self = [super init];
  if (self) {
    _member = member;
    _result = result;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFileMemberActionResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFileMemberActionResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFileMemberActionResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFileMemberActionResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGFileMemberActionResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"member"] = [DBSHARINGMemberSelectorSerializer serialize:valueObj.member];
  jsonDict[@"result"] = [DBSHARINGFileMemberActionIndividualResultSerializer serialize:valueObj.result];

  return jsonDict;
}

+ (DBSHARINGFileMemberActionResult *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGMemberSelector *member = [DBSHARINGMemberSelectorSerializer deserialize:valueDict[@"member"]];
  DBSHARINGFileMemberActionIndividualResult *result =
      [DBSHARINGFileMemberActionIndividualResultSerializer deserialize:valueDict[@"result"]];

  return [[DBSHARINGFileMemberActionResult alloc] initWithMember:member result:result];
}

@end

#import "DBSHARINGFileMemberActionError.h"
#import "DBSHARINGFileMemberRemoveActionResult.h"
#import "DBSHARINGMemberAccessLevelResult.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFileMemberRemoveActionResult

@synthesize success = _success;
@synthesize memberError = _memberError;

#pragma mark - Constructors

- (instancetype)initWithSuccess:(DBSHARINGMemberAccessLevelResult *)success {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileMemberRemoveActionResultSuccess;
    _success = success;
  }
  return self;
}

- (instancetype)initWithMemberError:(DBSHARINGFileMemberActionError *)memberError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileMemberRemoveActionResultMemberError;
    _memberError = memberError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFileMemberRemoveActionResultOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGMemberAccessLevelResult *)success {
  if (![self isSuccess]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGFileMemberRemoveActionResultSuccess, but was %@.", [self tagName]];
  }
  return _success;
}

- (DBSHARINGFileMemberActionError *)memberError {
  if (![self isMemberError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGFileMemberRemoveActionResultMemberError, but was %@.", [self tagName]];
  }
  return _memberError;
}

#pragma mark - Tag state methods

- (BOOL)isSuccess {
  return _tag == DBSHARINGFileMemberRemoveActionResultSuccess;
}

- (BOOL)isMemberError {
  return _tag == DBSHARINGFileMemberRemoveActionResultMemberError;
}

- (BOOL)isOther {
  return _tag == DBSHARINGFileMemberRemoveActionResultOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGFileMemberRemoveActionResultSuccess:
    return @"DBSHARINGFileMemberRemoveActionResultSuccess";
  case DBSHARINGFileMemberRemoveActionResultMemberError:
    return @"DBSHARINGFileMemberRemoveActionResultMemberError";
  case DBSHARINGFileMemberRemoveActionResultOther:
    return @"DBSHARINGFileMemberRemoveActionResultOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFileMemberRemoveActionResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFileMemberRemoveActionResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFileMemberRemoveActionResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFileMemberRemoveActionResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGFileMemberRemoveActionResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSuccess]) {
    jsonDict[@"success"] = [[DBSHARINGMemberAccessLevelResultSerializer serialize:valueObj.success] mutableCopy];
    jsonDict[@".tag"] = @"success";
  } else if ([valueObj isMemberError]) {
    jsonDict[@"member_error"] = [[DBSHARINGFileMemberActionErrorSerializer serialize:valueObj.memberError] mutableCopy];
    jsonDict[@".tag"] = @"member_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGFileMemberRemoveActionResult *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"success"]) {
    DBSHARINGMemberAccessLevelResult *success = [DBSHARINGMemberAccessLevelResultSerializer deserialize:valueDict];
    return [[DBSHARINGFileMemberRemoveActionResult alloc] initWithSuccess:success];
  } else if ([tag isEqualToString:@"member_error"]) {
    DBSHARINGFileMemberActionError *memberError =
        [DBSHARINGFileMemberActionErrorSerializer deserialize:valueDict[@"member_error"]];
    return [[DBSHARINGFileMemberRemoveActionResult alloc] initWithMemberError:memberError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGFileMemberRemoveActionResult alloc] initWithOther];
  } else {
    return [[DBSHARINGFileMemberRemoveActionResult alloc] initWithOther];
  }
}
@end

#import "DBSHARINGFileAction.h"
#import "DBSHARINGFilePermission.h"
#import "DBSHARINGPermissionDeniedReason.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFilePermission

#pragma mark - Constructors

- (instancetype)initWithAction:(DBSHARINGFileAction *)action
                         allow:(NSNumber *)allow
                        reason:(DBSHARINGPermissionDeniedReason *)reason {

  self = [super init];
  if (self) {
    _action = action;
    _allow = allow;
    _reason = reason;
  }
  return self;
}

- (instancetype)initWithAction:(DBSHARINGFileAction *)action allow:(NSNumber *)allow {
  return [self initWithAction:action allow:allow reason:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFilePermissionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFilePermissionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFilePermissionSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFilePermissionSerializer

+ (NSDictionary *)serialize:(DBSHARINGFilePermission *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"action"] = [DBSHARINGFileActionSerializer serialize:valueObj.action];
  jsonDict[@"allow"] = valueObj.allow;
  if (valueObj.reason) {
    jsonDict[@"reason"] = [DBSHARINGPermissionDeniedReasonSerializer serialize:valueObj.reason];
  }

  return jsonDict;
}

+ (DBSHARINGFilePermission *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGFileAction *action = [DBSHARINGFileActionSerializer deserialize:valueDict[@"action"]];
  NSNumber *allow = valueDict[@"allow"];
  DBSHARINGPermissionDeniedReason *reason =
      valueDict[@"reason"] ? [DBSHARINGPermissionDeniedReasonSerializer deserialize:valueDict[@"reason"]] : nil;

  return [[DBSHARINGFilePermission alloc] initWithAction:action allow:allow reason:reason];
}

@end

#import "DBSHARINGFolderAction.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFolderAction

#pragma mark - Constructors

- (instancetype)initWithChangeOptions {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionChangeOptions;
  }
  return self;
}

- (instancetype)initWithEditContents {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionEditContents;
  }
  return self;
}

- (instancetype)initWithInviteEditor {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionInviteEditor;
  }
  return self;
}

- (instancetype)initWithInviteViewer {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionInviteViewer;
  }
  return self;
}

- (instancetype)initWithInviteViewerNoComment {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionInviteViewerNoComment;
  }
  return self;
}

- (instancetype)initWithRelinquishMembership {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionRelinquishMembership;
  }
  return self;
}

- (instancetype)initWithUnmount {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionUnmount;
  }
  return self;
}

- (instancetype)initWithUnshare {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionUnshare;
  }
  return self;
}

- (instancetype)initWithLeaveACopy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionLeaveACopy;
  }
  return self;
}

- (instancetype)initWithShareLink {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionShareLink;
  }
  return self;
}

- (instancetype)initWithCreateLink {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionCreateLink;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGFolderActionOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isChangeOptions {
  return _tag == DBSHARINGFolderActionChangeOptions;
}

- (BOOL)isEditContents {
  return _tag == DBSHARINGFolderActionEditContents;
}

- (BOOL)isInviteEditor {
  return _tag == DBSHARINGFolderActionInviteEditor;
}

- (BOOL)isInviteViewer {
  return _tag == DBSHARINGFolderActionInviteViewer;
}

- (BOOL)isInviteViewerNoComment {
  return _tag == DBSHARINGFolderActionInviteViewerNoComment;
}

- (BOOL)isRelinquishMembership {
  return _tag == DBSHARINGFolderActionRelinquishMembership;
}

- (BOOL)isUnmount {
  return _tag == DBSHARINGFolderActionUnmount;
}

- (BOOL)isUnshare {
  return _tag == DBSHARINGFolderActionUnshare;
}

- (BOOL)isLeaveACopy {
  return _tag == DBSHARINGFolderActionLeaveACopy;
}

- (BOOL)isShareLink {
  return _tag == DBSHARINGFolderActionShareLink;
}

- (BOOL)isCreateLink {
  return _tag == DBSHARINGFolderActionCreateLink;
}

- (BOOL)isOther {
  return _tag == DBSHARINGFolderActionOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGFolderActionChangeOptions:
    return @"DBSHARINGFolderActionChangeOptions";
  case DBSHARINGFolderActionEditContents:
    return @"DBSHARINGFolderActionEditContents";
  case DBSHARINGFolderActionInviteEditor:
    return @"DBSHARINGFolderActionInviteEditor";
  case DBSHARINGFolderActionInviteViewer:
    return @"DBSHARINGFolderActionInviteViewer";
  case DBSHARINGFolderActionInviteViewerNoComment:
    return @"DBSHARINGFolderActionInviteViewerNoComment";
  case DBSHARINGFolderActionRelinquishMembership:
    return @"DBSHARINGFolderActionRelinquishMembership";
  case DBSHARINGFolderActionUnmount:
    return @"DBSHARINGFolderActionUnmount";
  case DBSHARINGFolderActionUnshare:
    return @"DBSHARINGFolderActionUnshare";
  case DBSHARINGFolderActionLeaveACopy:
    return @"DBSHARINGFolderActionLeaveACopy";
  case DBSHARINGFolderActionShareLink:
    return @"DBSHARINGFolderActionShareLink";
  case DBSHARINGFolderActionCreateLink:
    return @"DBSHARINGFolderActionCreateLink";
  case DBSHARINGFolderActionOther:
    return @"DBSHARINGFolderActionOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFolderActionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFolderActionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFolderActionSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFolderActionSerializer

+ (NSDictionary *)serialize:(DBSHARINGFolderAction *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isChangeOptions]) {
    jsonDict[@".tag"] = @"change_options";
  } else if ([valueObj isEditContents]) {
    jsonDict[@".tag"] = @"edit_contents";
  } else if ([valueObj isInviteEditor]) {
    jsonDict[@".tag"] = @"invite_editor";
  } else if ([valueObj isInviteViewer]) {
    jsonDict[@".tag"] = @"invite_viewer";
  } else if ([valueObj isInviteViewerNoComment]) {
    jsonDict[@".tag"] = @"invite_viewer_no_comment";
  } else if ([valueObj isRelinquishMembership]) {
    jsonDict[@".tag"] = @"relinquish_membership";
  } else if ([valueObj isUnmount]) {
    jsonDict[@".tag"] = @"unmount";
  } else if ([valueObj isUnshare]) {
    jsonDict[@".tag"] = @"unshare";
  } else if ([valueObj isLeaveACopy]) {
    jsonDict[@".tag"] = @"leave_a_copy";
  } else if ([valueObj isShareLink]) {
    jsonDict[@".tag"] = @"share_link";
  } else if ([valueObj isCreateLink]) {
    jsonDict[@".tag"] = @"create_link";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGFolderAction *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"change_options"]) {
    return [[DBSHARINGFolderAction alloc] initWithChangeOptions];
  } else if ([tag isEqualToString:@"edit_contents"]) {
    return [[DBSHARINGFolderAction alloc] initWithEditContents];
  } else if ([tag isEqualToString:@"invite_editor"]) {
    return [[DBSHARINGFolderAction alloc] initWithInviteEditor];
  } else if ([tag isEqualToString:@"invite_viewer"]) {
    return [[DBSHARINGFolderAction alloc] initWithInviteViewer];
  } else if ([tag isEqualToString:@"invite_viewer_no_comment"]) {
    return [[DBSHARINGFolderAction alloc] initWithInviteViewerNoComment];
  } else if ([tag isEqualToString:@"relinquish_membership"]) {
    return [[DBSHARINGFolderAction alloc] initWithRelinquishMembership];
  } else if ([tag isEqualToString:@"unmount"]) {
    return [[DBSHARINGFolderAction alloc] initWithUnmount];
  } else if ([tag isEqualToString:@"unshare"]) {
    return [[DBSHARINGFolderAction alloc] initWithUnshare];
  } else if ([tag isEqualToString:@"leave_a_copy"]) {
    return [[DBSHARINGFolderAction alloc] initWithLeaveACopy];
  } else if ([tag isEqualToString:@"share_link"]) {
    return [[DBSHARINGFolderAction alloc] initWithShareLink];
  } else if ([tag isEqualToString:@"create_link"]) {
    return [[DBSHARINGFolderAction alloc] initWithCreateLink];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGFolderAction alloc] initWithOther];
  } else {
    return [[DBSHARINGFolderAction alloc] initWithOther];
  }
}
@end

#import "DBSHARINGFolderLinkMetadata.h"
#import "DBSHARINGLinkPermissions.h"
#import "DBSHARINGSharedLinkMetadata.h"
#import "DBSHARINGTeamMemberInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBSHARINGFolderLinkMetadata

#pragma mark - Constructors

- (instancetype)initWithUrl:(NSString *)url
                       name:(NSString *)name
            linkPermissions:(DBSHARINGLinkPermissions *)linkPermissions
                        id_:(NSString *)id_
                    expires:(NSDate *)expires
                  pathLower:(NSString *)pathLower
             teamMemberInfo:(DBSHARINGTeamMemberInfo *)teamMemberInfo
       contentOwnerTeamInfo:(DBUSERSTeam *)contentOwnerTeamInfo {
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:nil]](id_);

  self = [super initWithUrl:url
                       name:name
            linkPermissions:linkPermissions
                        id_:id_
                    expires:expires
                  pathLower:pathLower
             teamMemberInfo:teamMemberInfo
       contentOwnerTeamInfo:contentOwnerTeamInfo];
  if (self) {
  }
  return self;
}

- (instancetype)initWithUrl:(NSString *)url
                       name:(NSString *)name
            linkPermissions:(DBSHARINGLinkPermissions *)linkPermissions {
  return [self initWithUrl:url
                      name:name
           linkPermissions:linkPermissions
                       id_:nil
                   expires:nil
                 pathLower:nil
            teamMemberInfo:nil
      contentOwnerTeamInfo:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFolderLinkMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFolderLinkMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFolderLinkMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFolderLinkMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGFolderLinkMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"url"] = valueObj.url;
  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"link_permissions"] = [DBSHARINGLinkPermissionsSerializer serialize:valueObj.linkPermissions];
  if (valueObj.id_) {
    jsonDict[@"id"] = valueObj.id_;
  }
  if (valueObj.expires) {
    jsonDict[@"expires"] = [DBNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.pathLower) {
    jsonDict[@"path_lower"] = valueObj.pathLower;
  }
  if (valueObj.teamMemberInfo) {
    jsonDict[@"team_member_info"] = [DBSHARINGTeamMemberInfoSerializer serialize:valueObj.teamMemberInfo];
  }
  if (valueObj.contentOwnerTeamInfo) {
    jsonDict[@"content_owner_team_info"] = [DBUSERSTeamSerializer serialize:valueObj.contentOwnerTeamInfo];
  }

  return jsonDict;
}

+ (DBSHARINGFolderLinkMetadata *)deserialize:(NSDictionary *)valueDict {
  NSString *url = valueDict[@"url"];
  NSString *name = valueDict[@"name"];
  DBSHARINGLinkPermissions *linkPermissions =
      [DBSHARINGLinkPermissionsSerializer deserialize:valueDict[@"link_permissions"]];
  NSString *id_ = valueDict[@"id"] ?: nil;
  NSDate *expires = valueDict[@"expires"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"expires"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSString *pathLower = valueDict[@"path_lower"] ?: nil;
  DBSHARINGTeamMemberInfo *teamMemberInfo =
      valueDict[@"team_member_info"] ? [DBSHARINGTeamMemberInfoSerializer deserialize:valueDict[@"team_member_info"]]
                                     : nil;
  DBUSERSTeam *contentOwnerTeamInfo = valueDict[@"content_owner_team_info"]
                                          ? [DBUSERSTeamSerializer deserialize:valueDict[@"content_owner_team_info"]]
                                          : nil;

  return [[DBSHARINGFolderLinkMetadata alloc] initWithUrl:url
                                                     name:name
                                          linkPermissions:linkPermissions
                                                      id_:id_
                                                  expires:expires
                                                pathLower:pathLower
                                           teamMemberInfo:teamMemberInfo
                                     contentOwnerTeamInfo:contentOwnerTeamInfo];
}

@end

#import "DBSHARINGFolderAction.h"
#import "DBSHARINGFolderPermission.h"
#import "DBSHARINGPermissionDeniedReason.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFolderPermission

#pragma mark - Constructors

- (instancetype)initWithAction:(DBSHARINGFolderAction *)action
                         allow:(NSNumber *)allow
                        reason:(DBSHARINGPermissionDeniedReason *)reason {

  self = [super init];
  if (self) {
    _action = action;
    _allow = allow;
    _reason = reason;
  }
  return self;
}

- (instancetype)initWithAction:(DBSHARINGFolderAction *)action allow:(NSNumber *)allow {
  return [self initWithAction:action allow:allow reason:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFolderPermissionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFolderPermissionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFolderPermissionSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFolderPermissionSerializer

+ (NSDictionary *)serialize:(DBSHARINGFolderPermission *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"action"] = [DBSHARINGFolderActionSerializer serialize:valueObj.action];
  jsonDict[@"allow"] = valueObj.allow;
  if (valueObj.reason) {
    jsonDict[@"reason"] = [DBSHARINGPermissionDeniedReasonSerializer serialize:valueObj.reason];
  }

  return jsonDict;
}

+ (DBSHARINGFolderPermission *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGFolderAction *action = [DBSHARINGFolderActionSerializer deserialize:valueDict[@"action"]];
  NSNumber *allow = valueDict[@"allow"];
  DBSHARINGPermissionDeniedReason *reason =
      valueDict[@"reason"] ? [DBSHARINGPermissionDeniedReasonSerializer deserialize:valueDict[@"reason"]] : nil;

  return [[DBSHARINGFolderPermission alloc] initWithAction:action allow:allow reason:reason];
}

@end

#import "DBSHARINGAclUpdatePolicy.h"
#import "DBSHARINGFolderPolicy.h"
#import "DBSHARINGMemberPolicy.h"
#import "DBSHARINGSharedLinkPolicy.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGFolderPolicy

#pragma mark - Constructors

- (instancetype)initWithAclUpdatePolicy:(DBSHARINGAclUpdatePolicy *)aclUpdatePolicy
                       sharedLinkPolicy:(DBSHARINGSharedLinkPolicy *)sharedLinkPolicy
                           memberPolicy:(DBSHARINGMemberPolicy *)memberPolicy
                   resolvedMemberPolicy:(DBSHARINGMemberPolicy *)resolvedMemberPolicy {

  self = [super init];
  if (self) {
    _memberPolicy = memberPolicy;
    _resolvedMemberPolicy = resolvedMemberPolicy;
    _aclUpdatePolicy = aclUpdatePolicy;
    _sharedLinkPolicy = sharedLinkPolicy;
  }
  return self;
}

- (instancetype)initWithAclUpdatePolicy:(DBSHARINGAclUpdatePolicy *)aclUpdatePolicy
                       sharedLinkPolicy:(DBSHARINGSharedLinkPolicy *)sharedLinkPolicy {
  return [self initWithAclUpdatePolicy:aclUpdatePolicy
                      sharedLinkPolicy:sharedLinkPolicy
                          memberPolicy:nil
                  resolvedMemberPolicy:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGFolderPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGFolderPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGFolderPolicySerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGFolderPolicySerializer

+ (NSDictionary *)serialize:(DBSHARINGFolderPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"acl_update_policy"] = [DBSHARINGAclUpdatePolicySerializer serialize:valueObj.aclUpdatePolicy];
  jsonDict[@"shared_link_policy"] = [DBSHARINGSharedLinkPolicySerializer serialize:valueObj.sharedLinkPolicy];
  if (valueObj.memberPolicy) {
    jsonDict[@"member_policy"] = [DBSHARINGMemberPolicySerializer serialize:valueObj.memberPolicy];
  }
  if (valueObj.resolvedMemberPolicy) {
    jsonDict[@"resolved_member_policy"] = [DBSHARINGMemberPolicySerializer serialize:valueObj.resolvedMemberPolicy];
  }

  return jsonDict;
}

+ (DBSHARINGFolderPolicy *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGAclUpdatePolicy *aclUpdatePolicy =
      [DBSHARINGAclUpdatePolicySerializer deserialize:valueDict[@"acl_update_policy"]];
  DBSHARINGSharedLinkPolicy *sharedLinkPolicy =
      [DBSHARINGSharedLinkPolicySerializer deserialize:valueDict[@"shared_link_policy"]];
  DBSHARINGMemberPolicy *memberPolicy =
      valueDict[@"member_policy"] ? [DBSHARINGMemberPolicySerializer deserialize:valueDict[@"member_policy"]] : nil;
  DBSHARINGMemberPolicy *resolvedMemberPolicy =
      valueDict[@"resolved_member_policy"]
          ? [DBSHARINGMemberPolicySerializer deserialize:valueDict[@"resolved_member_policy"]]
          : nil;

  return [[DBSHARINGFolderPolicy alloc] initWithAclUpdatePolicy:aclUpdatePolicy
                                               sharedLinkPolicy:sharedLinkPolicy
                                                   memberPolicy:memberPolicy
                                           resolvedMemberPolicy:resolvedMemberPolicy];
}

@end

#import "DBSHARINGFileAction.h"
#import "DBSHARINGGetFileMetadataArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetFileMetadataArg

#pragma mark - Constructors

- (instancetype)initWithFile:(NSString *)file actions:(NSArray<DBSHARINGFileAction *> *)actions {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"](file);
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](actions);

  self = [super init];
  if (self) {
    _file = file;
    _actions = actions;
  }
  return self;
}

- (instancetype)initWithFile:(NSString *)file {
  return [self initWithFile:file actions:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetFileMetadataArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetFileMetadataArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetFileMetadataArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetFileMetadataArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetFileMetadataArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file"] = valueObj.file;
  if (valueObj.actions) {
    jsonDict[@"actions"] = [DBArraySerializer serialize:valueObj.actions
                                              withBlock:^id(id elem) {
                                                return [DBSHARINGFileActionSerializer serialize:elem];
                                              }];
  }

  return jsonDict;
}

+ (DBSHARINGGetFileMetadataArg *)deserialize:(NSDictionary *)valueDict {
  NSString *file = valueDict[@"file"];
  NSArray<DBSHARINGFileAction *> *actions =
      valueDict[@"actions"] ? [DBArraySerializer deserialize:valueDict[@"actions"]
                                                   withBlock:^id(id elem) {
                                                     return [DBSHARINGFileActionSerializer deserialize:elem];
                                                   }]
                            : nil;

  return [[DBSHARINGGetFileMetadataArg alloc] initWithFile:file actions:actions];
}

@end

#import "DBSHARINGFileAction.h"
#import "DBSHARINGGetFileMetadataBatchArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetFileMetadataBatchArg

#pragma mark - Constructors

- (instancetype)initWithFiles:(NSArray<NSString *> *)files actions:(NSArray<DBSHARINGFileAction *> *)actions {
  [DBStoneValidators arrayValidator:nil maxItems:@(100)
                      itemValidator:[DBStoneValidators
                                        stringValidator:@(1)
                                              maxLength:nil
                                                pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"]](files);
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](actions);

  self = [super init];
  if (self) {
    _files = files;
    _actions = actions;
  }
  return self;
}

- (instancetype)initWithFiles:(NSArray<NSString *> *)files {
  return [self initWithFiles:files actions:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetFileMetadataBatchArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetFileMetadataBatchArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetFileMetadataBatchArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetFileMetadataBatchArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetFileMetadataBatchArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"files"] = [DBArraySerializer serialize:valueObj.files
                                          withBlock:^id(id elem) {
                                            return elem;
                                          }];
  if (valueObj.actions) {
    jsonDict[@"actions"] = [DBArraySerializer serialize:valueObj.actions
                                              withBlock:^id(id elem) {
                                                return [DBSHARINGFileActionSerializer serialize:elem];
                                              }];
  }

  return jsonDict;
}

+ (DBSHARINGGetFileMetadataBatchArg *)deserialize:(NSDictionary *)valueDict {
  NSArray<NSString *> *files = [DBArraySerializer deserialize:valueDict[@"files"]
                                                    withBlock:^id(id elem) {
                                                      return elem;
                                                    }];
  NSArray<DBSHARINGFileAction *> *actions =
      valueDict[@"actions"] ? [DBArraySerializer deserialize:valueDict[@"actions"]
                                                   withBlock:^id(id elem) {
                                                     return [DBSHARINGFileActionSerializer deserialize:elem];
                                                   }]
                            : nil;

  return [[DBSHARINGGetFileMetadataBatchArg alloc] initWithFiles:files actions:actions];
}

@end

#import "DBSHARINGGetFileMetadataBatchResult.h"
#import "DBSHARINGGetFileMetadataIndividualResult.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetFileMetadataBatchResult

#pragma mark - Constructors

- (instancetype)initWithFile:(NSString *)file result:(DBSHARINGGetFileMetadataIndividualResult *)result {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"](file);

  self = [super init];
  if (self) {
    _file = file;
    _result = result;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetFileMetadataBatchResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetFileMetadataBatchResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetFileMetadataBatchResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetFileMetadataBatchResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetFileMetadataBatchResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file"] = valueObj.file;
  jsonDict[@"result"] = [DBSHARINGGetFileMetadataIndividualResultSerializer serialize:valueObj.result];

  return jsonDict;
}

+ (DBSHARINGGetFileMetadataBatchResult *)deserialize:(NSDictionary *)valueDict {
  NSString *file = valueDict[@"file"];
  DBSHARINGGetFileMetadataIndividualResult *result =
      [DBSHARINGGetFileMetadataIndividualResultSerializer deserialize:valueDict[@"result"]];

  return [[DBSHARINGGetFileMetadataBatchResult alloc] initWithFile:file result:result];
}

@end

#import "DBSHARINGGetFileMetadataError.h"
#import "DBSHARINGSharingFileAccessError.h"
#import "DBSHARINGSharingUserError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetFileMetadataError

@synthesize userError = _userError;
@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithUserError:(DBSHARINGSharingUserError *)userError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetFileMetadataErrorUserError;
    _userError = userError;
  }
  return self;
}

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetFileMetadataErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetFileMetadataErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharingUserError *)userError {
  if (![self isUserError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGGetFileMetadataErrorUserError, but was %@.", [self tagName]];
  }
  return _userError;
}

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGGetFileMetadataErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isUserError {
  return _tag == DBSHARINGGetFileMetadataErrorUserError;
}

- (BOOL)isAccessError {
  return _tag == DBSHARINGGetFileMetadataErrorAccessError;
}

- (BOOL)isOther {
  return _tag == DBSHARINGGetFileMetadataErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGGetFileMetadataErrorUserError:
    return @"DBSHARINGGetFileMetadataErrorUserError";
  case DBSHARINGGetFileMetadataErrorAccessError:
    return @"DBSHARINGGetFileMetadataErrorAccessError";
  case DBSHARINGGetFileMetadataErrorOther:
    return @"DBSHARINGGetFileMetadataErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetFileMetadataErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetFileMetadataErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetFileMetadataErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetFileMetadataErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetFileMetadataError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserError]) {
    jsonDict[@"user_error"] = [[DBSHARINGSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
    jsonDict[@".tag"] = @"user_error";
  } else if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGGetFileMetadataError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_error"]) {
    DBSHARINGSharingUserError *userError = [DBSHARINGSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
    return [[DBSHARINGGetFileMetadataError alloc] initWithUserError:userError];
  } else if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGGetFileMetadataError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGGetFileMetadataError alloc] initWithOther];
  } else {
    return [[DBSHARINGGetFileMetadataError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGGetFileMetadataIndividualResult.h"
#import "DBSHARINGSharedFileMetadata.h"
#import "DBSHARINGSharingFileAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetFileMetadataIndividualResult

@synthesize metadata = _metadata;
@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithMetadata:(DBSHARINGSharedFileMetadata *)metadata {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetFileMetadataIndividualResultMetadata;
    _metadata = metadata;
  }
  return self;
}

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetFileMetadataIndividualResultAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetFileMetadataIndividualResultOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFileMetadata *)metadata {
  if (![self isMetadata]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGGetFileMetadataIndividualResultMetadata, but was %@.", [self tagName]];
  }
  return _metadata;
}

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGGetFileMetadataIndividualResultAccessError, but was %@.",
                       [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isMetadata {
  return _tag == DBSHARINGGetFileMetadataIndividualResultMetadata;
}

- (BOOL)isAccessError {
  return _tag == DBSHARINGGetFileMetadataIndividualResultAccessError;
}

- (BOOL)isOther {
  return _tag == DBSHARINGGetFileMetadataIndividualResultOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGGetFileMetadataIndividualResultMetadata:
    return @"DBSHARINGGetFileMetadataIndividualResultMetadata";
  case DBSHARINGGetFileMetadataIndividualResultAccessError:
    return @"DBSHARINGGetFileMetadataIndividualResultAccessError";
  case DBSHARINGGetFileMetadataIndividualResultOther:
    return @"DBSHARINGGetFileMetadataIndividualResultOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetFileMetadataIndividualResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetFileMetadataIndividualResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetFileMetadataIndividualResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetFileMetadataIndividualResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetFileMetadataIndividualResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMetadata]) {
    jsonDict[@"metadata"] = [[DBSHARINGSharedFileMetadataSerializer serialize:valueObj.metadata] mutableCopy];
    jsonDict[@".tag"] = @"metadata";
  } else if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGGetFileMetadataIndividualResult *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"metadata"]) {
    DBSHARINGSharedFileMetadata *metadata = [DBSHARINGSharedFileMetadataSerializer deserialize:valueDict];
    return [[DBSHARINGGetFileMetadataIndividualResult alloc] initWithMetadata:metadata];
  } else if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGGetFileMetadataIndividualResult alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGGetFileMetadataIndividualResult alloc] initWithOther];
  } else {
    return [[DBSHARINGGetFileMetadataIndividualResult alloc] initWithOther];
  }
}
@end

#import "DBSHARINGFolderAction.h"
#import "DBSHARINGGetMetadataArgs.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetMetadataArgs

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId actions:(NSArray<DBSHARINGFolderAction *> *)actions {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](actions);

  self = [super init];
  if (self) {
    _sharedFolderId = sharedFolderId;
    _actions = actions;
  }
  return self;
}

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId {
  return [self initWithSharedFolderId:sharedFolderId actions:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetMetadataArgsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetMetadataArgsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetMetadataArgsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetMetadataArgsSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetMetadataArgs *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  if (valueObj.actions) {
    jsonDict[@"actions"] = [DBArraySerializer serialize:valueObj.actions
                                              withBlock:^id(id elem) {
                                                return [DBSHARINGFolderActionSerializer serialize:elem];
                                              }];
  }

  return jsonDict;
}

+ (DBSHARINGGetMetadataArgs *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  NSArray<DBSHARINGFolderAction *> *actions =
      valueDict[@"actions"] ? [DBArraySerializer deserialize:valueDict[@"actions"]
                                                   withBlock:^id(id elem) {
                                                     return [DBSHARINGFolderActionSerializer deserialize:elem];
                                                   }]
                            : nil;

  return [[DBSHARINGGetMetadataArgs alloc] initWithSharedFolderId:sharedFolderId actions:actions];
}

@end

#import "DBSHARINGSharedLinkError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharedLinkError

#pragma mark - Constructors

- (instancetype)initWithSharedLinkNotFound {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkErrorSharedLinkNotFound;
  }
  return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkErrorSharedLinkAccessDenied;
  }
  return self;
}

- (instancetype)initWithUnsupportedLinkType {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkErrorUnsupportedLinkType;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isSharedLinkNotFound {
  return _tag == DBSHARINGSharedLinkErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
  return _tag == DBSHARINGSharedLinkErrorSharedLinkAccessDenied;
}

- (BOOL)isUnsupportedLinkType {
  return _tag == DBSHARINGSharedLinkErrorUnsupportedLinkType;
}

- (BOOL)isOther {
  return _tag == DBSHARINGSharedLinkErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGSharedLinkErrorSharedLinkNotFound:
    return @"DBSHARINGSharedLinkErrorSharedLinkNotFound";
  case DBSHARINGSharedLinkErrorSharedLinkAccessDenied:
    return @"DBSHARINGSharedLinkErrorSharedLinkAccessDenied";
  case DBSHARINGSharedLinkErrorUnsupportedLinkType:
    return @"DBSHARINGSharedLinkErrorUnsupportedLinkType";
  case DBSHARINGSharedLinkErrorOther:
    return @"DBSHARINGSharedLinkErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedLinkErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedLinkErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedLinkErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedLinkErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedLinkError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSharedLinkNotFound]) {
    jsonDict[@".tag"] = @"shared_link_not_found";
  } else if ([valueObj isSharedLinkAccessDenied]) {
    jsonDict[@".tag"] = @"shared_link_access_denied";
  } else if ([valueObj isUnsupportedLinkType]) {
    jsonDict[@".tag"] = @"unsupported_link_type";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGSharedLinkError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"shared_link_not_found"]) {
    return [[DBSHARINGSharedLinkError alloc] initWithSharedLinkNotFound];
  } else if ([tag isEqualToString:@"shared_link_access_denied"]) {
    return [[DBSHARINGSharedLinkError alloc] initWithSharedLinkAccessDenied];
  } else if ([tag isEqualToString:@"unsupported_link_type"]) {
    return [[DBSHARINGSharedLinkError alloc] initWithUnsupportedLinkType];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGSharedLinkError alloc] initWithOther];
  } else {
    return [[DBSHARINGSharedLinkError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGGetSharedLinkFileError.h"
#import "DBSHARINGSharedLinkError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetSharedLinkFileError

#pragma mark - Constructors

- (instancetype)initWithSharedLinkNotFound {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetSharedLinkFileErrorSharedLinkNotFound;
  }
  return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetSharedLinkFileErrorSharedLinkAccessDenied;
  }
  return self;
}

- (instancetype)initWithUnsupportedLinkType {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetSharedLinkFileErrorUnsupportedLinkType;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetSharedLinkFileErrorOther;
  }
  return self;
}

- (instancetype)initWithSharedLinkIsDirectory {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetSharedLinkFileErrorSharedLinkIsDirectory;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isSharedLinkNotFound {
  return _tag == DBSHARINGGetSharedLinkFileErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
  return _tag == DBSHARINGGetSharedLinkFileErrorSharedLinkAccessDenied;
}

- (BOOL)isUnsupportedLinkType {
  return _tag == DBSHARINGGetSharedLinkFileErrorUnsupportedLinkType;
}

- (BOOL)isOther {
  return _tag == DBSHARINGGetSharedLinkFileErrorOther;
}

- (BOOL)isSharedLinkIsDirectory {
  return _tag == DBSHARINGGetSharedLinkFileErrorSharedLinkIsDirectory;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGGetSharedLinkFileErrorSharedLinkNotFound:
    return @"DBSHARINGGetSharedLinkFileErrorSharedLinkNotFound";
  case DBSHARINGGetSharedLinkFileErrorSharedLinkAccessDenied:
    return @"DBSHARINGGetSharedLinkFileErrorSharedLinkAccessDenied";
  case DBSHARINGGetSharedLinkFileErrorUnsupportedLinkType:
    return @"DBSHARINGGetSharedLinkFileErrorUnsupportedLinkType";
  case DBSHARINGGetSharedLinkFileErrorOther:
    return @"DBSHARINGGetSharedLinkFileErrorOther";
  case DBSHARINGGetSharedLinkFileErrorSharedLinkIsDirectory:
    return @"DBSHARINGGetSharedLinkFileErrorSharedLinkIsDirectory";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetSharedLinkFileErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetSharedLinkFileErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetSharedLinkFileErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetSharedLinkFileErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetSharedLinkFileError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSharedLinkNotFound]) {
    jsonDict[@".tag"] = @"shared_link_not_found";
  } else if ([valueObj isSharedLinkAccessDenied]) {
    jsonDict[@".tag"] = @"shared_link_access_denied";
  } else if ([valueObj isUnsupportedLinkType]) {
    jsonDict[@".tag"] = @"unsupported_link_type";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSharedLinkIsDirectory]) {
    jsonDict[@".tag"] = @"shared_link_is_directory";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGGetSharedLinkFileError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"shared_link_not_found"]) {
    return [[DBSHARINGGetSharedLinkFileError alloc] initWithSharedLinkNotFound];
  } else if ([tag isEqualToString:@"shared_link_access_denied"]) {
    return [[DBSHARINGGetSharedLinkFileError alloc] initWithSharedLinkAccessDenied];
  } else if ([tag isEqualToString:@"unsupported_link_type"]) {
    return [[DBSHARINGGetSharedLinkFileError alloc] initWithUnsupportedLinkType];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGGetSharedLinkFileError alloc] initWithOther];
  } else if ([tag isEqualToString:@"shared_link_is_directory"]) {
    return [[DBSHARINGGetSharedLinkFileError alloc] initWithSharedLinkIsDirectory];
  } else {
    return [[DBSHARINGGetSharedLinkFileError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGGetSharedLinkMetadataArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetSharedLinkMetadataArg

#pragma mark - Constructors

- (instancetype)initWithUrl:(NSString *)url path:(NSString *)path linkPassword:(NSString *)linkPassword {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"/(.|[\\r\\n])*"]](path);

  self = [super init];
  if (self) {
    _url = url;
    _path = path;
    _linkPassword = linkPassword;
  }
  return self;
}

- (instancetype)initWithUrl:(NSString *)url {
  return [self initWithUrl:url path:nil linkPassword:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetSharedLinkMetadataArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetSharedLinkMetadataArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetSharedLinkMetadataArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetSharedLinkMetadataArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetSharedLinkMetadataArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"url"] = valueObj.url;
  if (valueObj.path) {
    jsonDict[@"path"] = valueObj.path;
  }
  if (valueObj.linkPassword) {
    jsonDict[@"link_password"] = valueObj.linkPassword;
  }

  return jsonDict;
}

+ (DBSHARINGGetSharedLinkMetadataArg *)deserialize:(NSDictionary *)valueDict {
  NSString *url = valueDict[@"url"];
  NSString *path = valueDict[@"path"] ?: nil;
  NSString *linkPassword = valueDict[@"link_password"] ?: nil;

  return [[DBSHARINGGetSharedLinkMetadataArg alloc] initWithUrl:url path:path linkPassword:linkPassword];
}

@end

#import "DBSHARINGGetSharedLinksArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetSharedLinksArg

#pragma mark - Constructors

- (instancetype)initWithPath:(NSString *)path {

  self = [super init];
  if (self) {
    _path = path;
  }
  return self;
}

- (instancetype)init {
  return [self initWithPath:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetSharedLinksArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetSharedLinksArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetSharedLinksArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetSharedLinksArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetSharedLinksArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.path) {
    jsonDict[@"path"] = valueObj.path;
  }

  return jsonDict;
}

+ (DBSHARINGGetSharedLinksArg *)deserialize:(NSDictionary *)valueDict {
  NSString *path = valueDict[@"path"] ?: nil;

  return [[DBSHARINGGetSharedLinksArg alloc] initWithPath:path];
}

@end

#import "DBSHARINGGetSharedLinksError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetSharedLinksError

@synthesize path = _path;

#pragma mark - Constructors

- (instancetype)initWithPath:(NSString *)path {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetSharedLinksErrorPath;
    _path = path;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGGetSharedLinksErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)path {
  if (![self isPath]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGGetSharedLinksErrorPath, but was %@.", [self tagName]];
  }
  return _path;
}

#pragma mark - Tag state methods

- (BOOL)isPath {
  return _tag == DBSHARINGGetSharedLinksErrorPath;
}

- (BOOL)isOther {
  return _tag == DBSHARINGGetSharedLinksErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGGetSharedLinksErrorPath:
    return @"DBSHARINGGetSharedLinksErrorPath";
  case DBSHARINGGetSharedLinksErrorOther:
    return @"DBSHARINGGetSharedLinksErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetSharedLinksErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetSharedLinksErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetSharedLinksErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetSharedLinksErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetSharedLinksError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPath]) {
    if (valueObj.path) {
      jsonDict[@"path"] = valueObj.path;
    }
    jsonDict[@".tag"] = @"path";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGGetSharedLinksError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"path"]) {
    NSString *path = valueDict[@"path"] ? valueDict[@"path"] : nil;
    return [[DBSHARINGGetSharedLinksError alloc] initWithPath:path];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGGetSharedLinksError alloc] initWithOther];
  } else {
    return [[DBSHARINGGetSharedLinksError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGGetSharedLinksResult.h"
#import "DBSHARINGLinkMetadata.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGetSharedLinksResult

#pragma mark - Constructors

- (instancetype)initWithLinks:(NSArray<DBSHARINGLinkMetadata *> *)links {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](links);

  self = [super init];
  if (self) {
    _links = links;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGetSharedLinksResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGetSharedLinksResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGetSharedLinksResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGetSharedLinksResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGGetSharedLinksResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"links"] = [DBArraySerializer serialize:valueObj.links
                                          withBlock:^id(id elem) {
                                            return [DBSHARINGLinkMetadataSerializer serialize:elem];
                                          }];

  return jsonDict;
}

+ (DBSHARINGGetSharedLinksResult *)deserialize:(NSDictionary *)valueDict {
  NSArray<DBSHARINGLinkMetadata *> *links =
      [DBArraySerializer deserialize:valueDict[@"links"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGLinkMetadataSerializer deserialize:elem];
                           }];

  return [[DBSHARINGGetSharedLinksResult alloc] initWithLinks:links];
}

@end

#import "DBSHARINGGroupInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONGroupManagementType.h"
#import "DBTEAMCOMMONGroupSummary.h"
#import "DBTEAMCOMMONGroupType.h"

#pragma mark - API Object

@implementation DBSHARINGGroupInfo

#pragma mark - Constructors

- (instancetype)initWithGroupName:(NSString *)groupName
                          groupId:(NSString *)groupId
              groupManagementType:(DBTEAMCOMMONGroupManagementType *)groupManagementType
                        groupType:(DBTEAMCOMMONGroupType *)groupType
                         isMember:(NSNumber *)isMember
                          isOwner:(NSNumber *)isOwner
                         sameTeam:(NSNumber *)sameTeam
                  groupExternalId:(NSString *)groupExternalId
                      memberCount:(NSNumber *)memberCount {

  self = [super initWithGroupName:groupName
                          groupId:groupId
              groupManagementType:groupManagementType
                  groupExternalId:groupExternalId
                      memberCount:memberCount];
  if (self) {
    _groupType = groupType;
    _isMember = isMember;
    _isOwner = isOwner;
    _sameTeam = sameTeam;
  }
  return self;
}

- (instancetype)initWithGroupName:(NSString *)groupName
                          groupId:(NSString *)groupId
              groupManagementType:(DBTEAMCOMMONGroupManagementType *)groupManagementType
                        groupType:(DBTEAMCOMMONGroupType *)groupType
                         isMember:(NSNumber *)isMember
                          isOwner:(NSNumber *)isOwner
                         sameTeam:(NSNumber *)sameTeam {
  return [self initWithGroupName:groupName
                         groupId:groupId
             groupManagementType:groupManagementType
                       groupType:groupType
                        isMember:isMember
                         isOwner:isOwner
                        sameTeam:sameTeam
                 groupExternalId:nil
                     memberCount:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGroupInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGroupInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGroupInfoSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGroupInfoSerializer

+ (NSDictionary *)serialize:(DBSHARINGGroupInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_name"] = valueObj.groupName;
  jsonDict[@"group_id"] = valueObj.groupId;
  jsonDict[@"group_management_type"] =
      [DBTEAMCOMMONGroupManagementTypeSerializer serialize:valueObj.groupManagementType];
  jsonDict[@"group_type"] = [DBTEAMCOMMONGroupTypeSerializer serialize:valueObj.groupType];
  jsonDict[@"is_member"] = valueObj.isMember;
  jsonDict[@"is_owner"] = valueObj.isOwner;
  jsonDict[@"same_team"] = valueObj.sameTeam;
  if (valueObj.groupExternalId) {
    jsonDict[@"group_external_id"] = valueObj.groupExternalId;
  }
  if (valueObj.memberCount) {
    jsonDict[@"member_count"] = valueObj.memberCount;
  }

  return jsonDict;
}

+ (DBSHARINGGroupInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *groupName = valueDict[@"group_name"];
  NSString *groupId = valueDict[@"group_id"];
  DBTEAMCOMMONGroupManagementType *groupManagementType =
      [DBTEAMCOMMONGroupManagementTypeSerializer deserialize:valueDict[@"group_management_type"]];
  DBTEAMCOMMONGroupType *groupType = [DBTEAMCOMMONGroupTypeSerializer deserialize:valueDict[@"group_type"]];
  NSNumber *isMember = valueDict[@"is_member"];
  NSNumber *isOwner = valueDict[@"is_owner"];
  NSNumber *sameTeam = valueDict[@"same_team"];
  NSString *groupExternalId = valueDict[@"group_external_id"] ?: nil;
  NSNumber *memberCount = valueDict[@"member_count"] ?: nil;

  return [[DBSHARINGGroupInfo alloc] initWithGroupName:groupName
                                               groupId:groupId
                                   groupManagementType:groupManagementType
                                             groupType:groupType
                                              isMember:isMember
                                               isOwner:isOwner
                                              sameTeam:sameTeam
                                       groupExternalId:groupExternalId
                                           memberCount:memberCount];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGMemberPermission.h"
#import "DBSHARINGMembershipInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGMembershipInfo

#pragma mark - Constructors

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                       permissions:(NSArray<DBSHARINGMemberPermission *> *)permissions
                          initials:(NSString *)initials
                       isInherited:(NSNumber *)isInherited {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](permissions);

  self = [super init];
  if (self) {
    _accessType = accessType;
    _permissions = permissions;
    _initials = initials;
    _isInherited = isInherited ?: @NO;
  }
  return self;
}

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType {
  return [self initWithAccessType:accessType permissions:nil initials:nil isInherited:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGMembershipInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGMembershipInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGMembershipInfoSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGMembershipInfoSerializer

+ (NSDictionary *)serialize:(DBSHARINGMembershipInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_type"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessType];
  if (valueObj.permissions) {
    jsonDict[@"permissions"] = [DBArraySerializer serialize:valueObj.permissions
                                                  withBlock:^id(id elem) {
                                                    return [DBSHARINGMemberPermissionSerializer serialize:elem];
                                                  }];
  }
  if (valueObj.initials) {
    jsonDict[@"initials"] = valueObj.initials;
  }
  jsonDict[@"is_inherited"] = valueObj.isInherited;

  return jsonDict;
}

+ (DBSHARINGMembershipInfo *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGAccessLevel *accessType = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_type"]];
  NSArray<DBSHARINGMemberPermission *> *permissions =
      valueDict[@"permissions"] ? [DBArraySerializer deserialize:valueDict[@"permissions"]
                                                       withBlock:^id(id elem) {
                                                         return [DBSHARINGMemberPermissionSerializer deserialize:elem];
                                                       }]
                                : nil;
  NSString *initials = valueDict[@"initials"] ?: nil;
  NSNumber *isInherited = valueDict[@"is_inherited"] ?: @NO;

  return [[DBSHARINGMembershipInfo alloc] initWithAccessType:accessType
                                                 permissions:permissions
                                                    initials:initials
                                                 isInherited:isInherited];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGGroupInfo.h"
#import "DBSHARINGGroupMembershipInfo.h"
#import "DBSHARINGMemberPermission.h"
#import "DBSHARINGMembershipInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGGroupMembershipInfo

#pragma mark - Constructors

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                             group:(DBSHARINGGroupInfo *)group
                       permissions:(NSArray<DBSHARINGMemberPermission *> *)permissions
                          initials:(NSString *)initials
                       isInherited:(NSNumber *)isInherited {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](permissions);

  self = [super initWithAccessType:accessType permissions:permissions initials:initials isInherited:isInherited];
  if (self) {
    _group = group;
  }
  return self;
}

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType group:(DBSHARINGGroupInfo *)group {
  return [self initWithAccessType:accessType group:group permissions:nil initials:nil isInherited:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGGroupMembershipInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGGroupMembershipInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGGroupMembershipInfoSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGGroupMembershipInfoSerializer

+ (NSDictionary *)serialize:(DBSHARINGGroupMembershipInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_type"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessType];
  jsonDict[@"group"] = [DBSHARINGGroupInfoSerializer serialize:valueObj.group];
  if (valueObj.permissions) {
    jsonDict[@"permissions"] = [DBArraySerializer serialize:valueObj.permissions
                                                  withBlock:^id(id elem) {
                                                    return [DBSHARINGMemberPermissionSerializer serialize:elem];
                                                  }];
  }
  if (valueObj.initials) {
    jsonDict[@"initials"] = valueObj.initials;
  }
  jsonDict[@"is_inherited"] = valueObj.isInherited;

  return jsonDict;
}

+ (DBSHARINGGroupMembershipInfo *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGAccessLevel *accessType = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_type"]];
  DBSHARINGGroupInfo *group = [DBSHARINGGroupInfoSerializer deserialize:valueDict[@"group"]];
  NSArray<DBSHARINGMemberPermission *> *permissions =
      valueDict[@"permissions"] ? [DBArraySerializer deserialize:valueDict[@"permissions"]
                                                       withBlock:^id(id elem) {
                                                         return [DBSHARINGMemberPermissionSerializer deserialize:elem];
                                                       }]
                                : nil;
  NSString *initials = valueDict[@"initials"] ?: nil;
  NSNumber *isInherited = valueDict[@"is_inherited"] ?: @NO;

  return [[DBSHARINGGroupMembershipInfo alloc] initWithAccessType:accessType
                                                            group:group
                                                      permissions:permissions
                                                         initials:initials
                                                      isInherited:isInherited];
}

@end

#import "DBSHARINGInsufficientQuotaAmounts.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGInsufficientQuotaAmounts

#pragma mark - Constructors

- (instancetype)initWithSpaceNeeded:(NSNumber *)spaceNeeded
                      spaceShortage:(NSNumber *)spaceShortage
                          spaceLeft:(NSNumber *)spaceLeft {

  self = [super init];
  if (self) {
    _spaceNeeded = spaceNeeded;
    _spaceShortage = spaceShortage;
    _spaceLeft = spaceLeft;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGInsufficientQuotaAmountsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGInsufficientQuotaAmountsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGInsufficientQuotaAmountsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGInsufficientQuotaAmountsSerializer

+ (NSDictionary *)serialize:(DBSHARINGInsufficientQuotaAmounts *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"space_needed"] = valueObj.spaceNeeded;
  jsonDict[@"space_shortage"] = valueObj.spaceShortage;
  jsonDict[@"space_left"] = valueObj.spaceLeft;

  return jsonDict;
}

+ (DBSHARINGInsufficientQuotaAmounts *)deserialize:(NSDictionary *)valueDict {
  NSNumber *spaceNeeded = valueDict[@"space_needed"];
  NSNumber *spaceShortage = valueDict[@"space_shortage"];
  NSNumber *spaceLeft = valueDict[@"space_left"];

  return [[DBSHARINGInsufficientQuotaAmounts alloc] initWithSpaceNeeded:spaceNeeded
                                                          spaceShortage:spaceShortage
                                                              spaceLeft:spaceLeft];
}

@end

#import "DBSHARINGInviteeInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGInviteeInfo

@synthesize email = _email;

#pragma mark - Constructors

- (instancetype)initWithEmail:(NSString *)email {
  self = [super init];
  if (self) {
    _tag = DBSHARINGInviteeInfoEmail;
    _email = email;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGInviteeInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)email {
  if (![self isEmail]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGInviteeInfoEmail, but was %@.", [self tagName]];
  }
  return _email;
}

#pragma mark - Tag state methods

- (BOOL)isEmail {
  return _tag == DBSHARINGInviteeInfoEmail;
}

- (BOOL)isOther {
  return _tag == DBSHARINGInviteeInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGInviteeInfoEmail:
    return @"DBSHARINGInviteeInfoEmail";
  case DBSHARINGInviteeInfoOther:
    return @"DBSHARINGInviteeInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGInviteeInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGInviteeInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGInviteeInfoSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGInviteeInfoSerializer

+ (NSDictionary *)serialize:(DBSHARINGInviteeInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEmail]) {
    jsonDict[@"email"] = valueObj.email;
    jsonDict[@".tag"] = @"email";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGInviteeInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"email"]) {
    NSString *email = valueDict[@"email"];
    return [[DBSHARINGInviteeInfo alloc] initWithEmail:email];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGInviteeInfo alloc] initWithOther];
  } else {
    return [[DBSHARINGInviteeInfo alloc] initWithOther];
  }
}
@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGInviteeInfo.h"
#import "DBSHARINGInviteeMembershipInfo.h"
#import "DBSHARINGMemberPermission.h"
#import "DBSHARINGMembershipInfo.h"
#import "DBSHARINGUserInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGInviteeMembershipInfo

#pragma mark - Constructors

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                           invitee:(DBSHARINGInviteeInfo *)invitee
                       permissions:(NSArray<DBSHARINGMemberPermission *> *)permissions
                          initials:(NSString *)initials
                       isInherited:(NSNumber *)isInherited
                              user:(DBSHARINGUserInfo *)user {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](permissions);

  self = [super initWithAccessType:accessType permissions:permissions initials:initials isInherited:isInherited];
  if (self) {
    _invitee = invitee;
    _user = user;
  }
  return self;
}

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType invitee:(DBSHARINGInviteeInfo *)invitee {
  return [self initWithAccessType:accessType invitee:invitee permissions:nil initials:nil isInherited:nil user:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGInviteeMembershipInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGInviteeMembershipInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGInviteeMembershipInfoSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGInviteeMembershipInfoSerializer

+ (NSDictionary *)serialize:(DBSHARINGInviteeMembershipInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_type"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessType];
  jsonDict[@"invitee"] = [DBSHARINGInviteeInfoSerializer serialize:valueObj.invitee];
  if (valueObj.permissions) {
    jsonDict[@"permissions"] = [DBArraySerializer serialize:valueObj.permissions
                                                  withBlock:^id(id elem) {
                                                    return [DBSHARINGMemberPermissionSerializer serialize:elem];
                                                  }];
  }
  if (valueObj.initials) {
    jsonDict[@"initials"] = valueObj.initials;
  }
  jsonDict[@"is_inherited"] = valueObj.isInherited;
  if (valueObj.user) {
    jsonDict[@"user"] = [DBSHARINGUserInfoSerializer serialize:valueObj.user];
  }

  return jsonDict;
}

+ (DBSHARINGInviteeMembershipInfo *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGAccessLevel *accessType = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_type"]];
  DBSHARINGInviteeInfo *invitee = [DBSHARINGInviteeInfoSerializer deserialize:valueDict[@"invitee"]];
  NSArray<DBSHARINGMemberPermission *> *permissions =
      valueDict[@"permissions"] ? [DBArraySerializer deserialize:valueDict[@"permissions"]
                                                       withBlock:^id(id elem) {
                                                         return [DBSHARINGMemberPermissionSerializer deserialize:elem];
                                                       }]
                                : nil;
  NSString *initials = valueDict[@"initials"] ?: nil;
  NSNumber *isInherited = valueDict[@"is_inherited"] ?: @NO;
  DBSHARINGUserInfo *user = valueDict[@"user"] ? [DBSHARINGUserInfoSerializer deserialize:valueDict[@"user"]] : nil;

  return [[DBSHARINGInviteeMembershipInfo alloc] initWithAccessType:accessType
                                                            invitee:invitee
                                                        permissions:permissions
                                                           initials:initials
                                                        isInherited:isInherited
                                                               user:user];
}

@end

#import "DBSHARINGJobError.h"
#import "DBSHARINGRelinquishFolderMembershipError.h"
#import "DBSHARINGRemoveFolderMemberError.h"
#import "DBSHARINGUnshareFolderError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGJobError

@synthesize unshareFolderError = _unshareFolderError;
@synthesize removeFolderMemberError = _removeFolderMemberError;
@synthesize relinquishFolderMembershipError = _relinquishFolderMembershipError;

#pragma mark - Constructors

- (instancetype)initWithUnshareFolderError:(DBSHARINGUnshareFolderError *)unshareFolderError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGJobErrorUnshareFolderError;
    _unshareFolderError = unshareFolderError;
  }
  return self;
}

- (instancetype)initWithRemoveFolderMemberError:(DBSHARINGRemoveFolderMemberError *)removeFolderMemberError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGJobErrorRemoveFolderMemberError;
    _removeFolderMemberError = removeFolderMemberError;
  }
  return self;
}

- (instancetype)initWithRelinquishFolderMembershipError:
    (DBSHARINGRelinquishFolderMembershipError *)relinquishFolderMembershipError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGJobErrorRelinquishFolderMembershipError;
    _relinquishFolderMembershipError = relinquishFolderMembershipError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGJobErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGUnshareFolderError *)unshareFolderError {
  if (![self isUnshareFolderError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGJobErrorUnshareFolderError, but was %@.", [self tagName]];
  }
  return _unshareFolderError;
}

- (DBSHARINGRemoveFolderMemberError *)removeFolderMemberError {
  if (![self isRemoveFolderMemberError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGJobErrorRemoveFolderMemberError, but was %@.", [self tagName]];
  }
  return _removeFolderMemberError;
}

- (DBSHARINGRelinquishFolderMembershipError *)relinquishFolderMembershipError {
  if (![self isRelinquishFolderMembershipError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGJobErrorRelinquishFolderMembershipError, but was %@.", [self tagName]];
  }
  return _relinquishFolderMembershipError;
}

#pragma mark - Tag state methods

- (BOOL)isUnshareFolderError {
  return _tag == DBSHARINGJobErrorUnshareFolderError;
}

- (BOOL)isRemoveFolderMemberError {
  return _tag == DBSHARINGJobErrorRemoveFolderMemberError;
}

- (BOOL)isRelinquishFolderMembershipError {
  return _tag == DBSHARINGJobErrorRelinquishFolderMembershipError;
}

- (BOOL)isOther {
  return _tag == DBSHARINGJobErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGJobErrorUnshareFolderError:
    return @"DBSHARINGJobErrorUnshareFolderError";
  case DBSHARINGJobErrorRemoveFolderMemberError:
    return @"DBSHARINGJobErrorRemoveFolderMemberError";
  case DBSHARINGJobErrorRelinquishFolderMembershipError:
    return @"DBSHARINGJobErrorRelinquishFolderMembershipError";
  case DBSHARINGJobErrorOther:
    return @"DBSHARINGJobErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGJobErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGJobErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGJobErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGJobErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGJobError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUnshareFolderError]) {
    jsonDict[@"unshare_folder_error"] =
        [[DBSHARINGUnshareFolderErrorSerializer serialize:valueObj.unshareFolderError] mutableCopy];
    jsonDict[@".tag"] = @"unshare_folder_error";
  } else if ([valueObj isRemoveFolderMemberError]) {
    jsonDict[@"remove_folder_member_error"] =
        [[DBSHARINGRemoveFolderMemberErrorSerializer serialize:valueObj.removeFolderMemberError] mutableCopy];
    jsonDict[@".tag"] = @"remove_folder_member_error";
  } else if ([valueObj isRelinquishFolderMembershipError]) {
    jsonDict[@"relinquish_folder_membership_error"] = [[DBSHARINGRelinquishFolderMembershipErrorSerializer
        serialize:valueObj.relinquishFolderMembershipError] mutableCopy];
    jsonDict[@".tag"] = @"relinquish_folder_membership_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGJobError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"unshare_folder_error"]) {
    DBSHARINGUnshareFolderError *unshareFolderError =
        [DBSHARINGUnshareFolderErrorSerializer deserialize:valueDict[@"unshare_folder_error"]];
    return [[DBSHARINGJobError alloc] initWithUnshareFolderError:unshareFolderError];
  } else if ([tag isEqualToString:@"remove_folder_member_error"]) {
    DBSHARINGRemoveFolderMemberError *removeFolderMemberError =
        [DBSHARINGRemoveFolderMemberErrorSerializer deserialize:valueDict[@"remove_folder_member_error"]];
    return [[DBSHARINGJobError alloc] initWithRemoveFolderMemberError:removeFolderMemberError];
  } else if ([tag isEqualToString:@"relinquish_folder_membership_error"]) {
    DBSHARINGRelinquishFolderMembershipError *relinquishFolderMembershipError =
        [DBSHARINGRelinquishFolderMembershipErrorSerializer
            deserialize:valueDict[@"relinquish_folder_membership_error"]];
    return [[DBSHARINGJobError alloc] initWithRelinquishFolderMembershipError:relinquishFolderMembershipError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGJobError alloc] initWithOther];
  } else {
    return [[DBSHARINGJobError alloc] initWithOther];
  }
}
@end

#import "DBASYNCPollResultBase.h"
#import "DBSHARINGJobError.h"
#import "DBSHARINGJobStatus.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGJobStatus

@synthesize failed = _failed;

#pragma mark - Constructors

- (instancetype)initWithInProgress {
  self = [super init];
  if (self) {
    _tag = DBSHARINGJobStatusInProgress;
  }
  return self;
}

- (instancetype)initWithComplete {
  self = [super init];
  if (self) {
    _tag = DBSHARINGJobStatusComplete;
  }
  return self;
}

- (instancetype)initWithFailed:(DBSHARINGJobError *)failed {
  self = [super init];
  if (self) {
    _tag = DBSHARINGJobStatusFailed;
    _failed = failed;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGJobError *)failed {
  if (![self isFailed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGJobStatusFailed, but was %@.", [self tagName]];
  }
  return _failed;
}

#pragma mark - Tag state methods

- (BOOL)isInProgress {
  return _tag == DBSHARINGJobStatusInProgress;
}

- (BOOL)isComplete {
  return _tag == DBSHARINGJobStatusComplete;
}

- (BOOL)isFailed {
  return _tag == DBSHARINGJobStatusFailed;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGJobStatusInProgress:
    return @"DBSHARINGJobStatusInProgress";
  case DBSHARINGJobStatusComplete:
    return @"DBSHARINGJobStatusComplete";
  case DBSHARINGJobStatusFailed:
    return @"DBSHARINGJobStatusFailed";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGJobStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGJobStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGJobStatusSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGJobStatusSerializer

+ (NSDictionary *)serialize:(DBSHARINGJobStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInProgress]) {
    jsonDict[@".tag"] = @"in_progress";
  } else if ([valueObj isComplete]) {
    jsonDict[@".tag"] = @"complete";
  } else if ([valueObj isFailed]) {
    jsonDict[@"failed"] = [[DBSHARINGJobErrorSerializer serialize:valueObj.failed] mutableCopy];
    jsonDict[@".tag"] = @"failed";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGJobStatus *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"in_progress"]) {
    return [[DBSHARINGJobStatus alloc] initWithInProgress];
  } else if ([tag isEqualToString:@"complete"]) {
    return [[DBSHARINGJobStatus alloc] initWithComplete];
  } else if ([tag isEqualToString:@"failed"]) {
    DBSHARINGJobError *failed = [DBSHARINGJobErrorSerializer deserialize:valueDict[@"failed"]];
    return [[DBSHARINGJobStatus alloc] initWithFailed:failed];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}
@end

#import "DBSHARINGLinkPermissions.h"
#import "DBSHARINGRequestedVisibility.h"
#import "DBSHARINGResolvedVisibility.h"
#import "DBSHARINGSharedLinkAccessFailureReason.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGLinkPermissions

#pragma mark - Constructors

- (instancetype)initWithCanRevoke:(NSNumber *)canRevoke
               resolvedVisibility:(DBSHARINGResolvedVisibility *)resolvedVisibility
              requestedVisibility:(DBSHARINGRequestedVisibility *)requestedVisibility
              revokeFailureReason:(DBSHARINGSharedLinkAccessFailureReason *)revokeFailureReason {

  self = [super init];
  if (self) {
    _resolvedVisibility = resolvedVisibility;
    _requestedVisibility = requestedVisibility;
    _canRevoke = canRevoke;
    _revokeFailureReason = revokeFailureReason;
  }
  return self;
}

- (instancetype)initWithCanRevoke:(NSNumber *)canRevoke {
  return [self initWithCanRevoke:canRevoke resolvedVisibility:nil requestedVisibility:nil revokeFailureReason:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGLinkPermissionsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGLinkPermissionsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGLinkPermissionsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGLinkPermissionsSerializer

+ (NSDictionary *)serialize:(DBSHARINGLinkPermissions *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"can_revoke"] = valueObj.canRevoke;
  if (valueObj.resolvedVisibility) {
    jsonDict[@"resolved_visibility"] = [DBSHARINGResolvedVisibilitySerializer serialize:valueObj.resolvedVisibility];
  }
  if (valueObj.requestedVisibility) {
    jsonDict[@"requested_visibility"] = [DBSHARINGRequestedVisibilitySerializer serialize:valueObj.requestedVisibility];
  }
  if (valueObj.revokeFailureReason) {
    jsonDict[@"revoke_failure_reason"] =
        [DBSHARINGSharedLinkAccessFailureReasonSerializer serialize:valueObj.revokeFailureReason];
  }

  return jsonDict;
}

+ (DBSHARINGLinkPermissions *)deserialize:(NSDictionary *)valueDict {
  NSNumber *canRevoke = valueDict[@"can_revoke"];
  DBSHARINGResolvedVisibility *resolvedVisibility =
      valueDict[@"resolved_visibility"]
          ? [DBSHARINGResolvedVisibilitySerializer deserialize:valueDict[@"resolved_visibility"]]
          : nil;
  DBSHARINGRequestedVisibility *requestedVisibility =
      valueDict[@"requested_visibility"]
          ? [DBSHARINGRequestedVisibilitySerializer deserialize:valueDict[@"requested_visibility"]]
          : nil;
  DBSHARINGSharedLinkAccessFailureReason *revokeFailureReason =
      valueDict[@"revoke_failure_reason"]
          ? [DBSHARINGSharedLinkAccessFailureReasonSerializer deserialize:valueDict[@"revoke_failure_reason"]]
          : nil;

  return [[DBSHARINGLinkPermissions alloc] initWithCanRevoke:canRevoke
                                          resolvedVisibility:resolvedVisibility
                                         requestedVisibility:requestedVisibility
                                         revokeFailureReason:revokeFailureReason];
}

@end

#import "DBSHARINGListFileMembersArg.h"
#import "DBSHARINGMemberAction.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFileMembersArg

#pragma mark - Constructors

- (instancetype)initWithFile:(NSString *)file
                     actions:(NSArray<DBSHARINGMemberAction *> *)actions
            includeInherited:(NSNumber *)includeInherited
                       limit:(NSNumber *)limit {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"](file);
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](actions);
  [DBStoneValidators numericValidator:@(1) maxValue:@(300)](limit ?: @(100));

  self = [super init];
  if (self) {
    _file = file;
    _actions = actions;
    _includeInherited = includeInherited ?: @YES;
    _limit = limit ?: @(100);
  }
  return self;
}

- (instancetype)initWithFile:(NSString *)file {
  return [self initWithFile:file actions:nil includeInherited:nil limit:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFileMembersArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFileMembersArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFileMembersArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFileMembersArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFileMembersArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file"] = valueObj.file;
  if (valueObj.actions) {
    jsonDict[@"actions"] = [DBArraySerializer serialize:valueObj.actions
                                              withBlock:^id(id elem) {
                                                return [DBSHARINGMemberActionSerializer serialize:elem];
                                              }];
  }
  jsonDict[@"include_inherited"] = valueObj.includeInherited;
  jsonDict[@"limit"] = valueObj.limit;

  return jsonDict;
}

+ (DBSHARINGListFileMembersArg *)deserialize:(NSDictionary *)valueDict {
  NSString *file = valueDict[@"file"];
  NSArray<DBSHARINGMemberAction *> *actions =
      valueDict[@"actions"] ? [DBArraySerializer deserialize:valueDict[@"actions"]
                                                   withBlock:^id(id elem) {
                                                     return [DBSHARINGMemberActionSerializer deserialize:elem];
                                                   }]
                            : nil;
  NSNumber *includeInherited = valueDict[@"include_inherited"] ?: @YES;
  NSNumber *limit = valueDict[@"limit"] ?: @(100);

  return [[DBSHARINGListFileMembersArg alloc] initWithFile:file
                                                   actions:actions
                                          includeInherited:includeInherited
                                                     limit:limit];
}

@end

#import "DBSHARINGListFileMembersBatchArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFileMembersBatchArg

#pragma mark - Constructors

- (instancetype)initWithFiles:(NSArray<NSString *> *)files limit:(NSNumber *)limit {
  [DBStoneValidators arrayValidator:nil maxItems:@(100)
                      itemValidator:[DBStoneValidators
                                        stringValidator:@(1)
                                              maxLength:nil
                                                pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"]](files);
  [DBStoneValidators numericValidator:nil maxValue:@(20)](limit ?: @(10));

  self = [super init];
  if (self) {
    _files = files;
    _limit = limit ?: @(10);
  }
  return self;
}

- (instancetype)initWithFiles:(NSArray<NSString *> *)files {
  return [self initWithFiles:files limit:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFileMembersBatchArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFileMembersBatchArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFileMembersBatchArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFileMembersBatchArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFileMembersBatchArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"files"] = [DBArraySerializer serialize:valueObj.files
                                          withBlock:^id(id elem) {
                                            return elem;
                                          }];
  jsonDict[@"limit"] = valueObj.limit;

  return jsonDict;
}

+ (DBSHARINGListFileMembersBatchArg *)deserialize:(NSDictionary *)valueDict {
  NSArray<NSString *> *files = [DBArraySerializer deserialize:valueDict[@"files"]
                                                    withBlock:^id(id elem) {
                                                      return elem;
                                                    }];
  NSNumber *limit = valueDict[@"limit"] ?: @(10);

  return [[DBSHARINGListFileMembersBatchArg alloc] initWithFiles:files limit:limit];
}

@end

#import "DBSHARINGListFileMembersBatchResult.h"
#import "DBSHARINGListFileMembersIndividualResult.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFileMembersBatchResult

#pragma mark - Constructors

- (instancetype)initWithFile:(NSString *)file result:(DBSHARINGListFileMembersIndividualResult *)result {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"](file);

  self = [super init];
  if (self) {
    _file = file;
    _result = result;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFileMembersBatchResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFileMembersBatchResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFileMembersBatchResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFileMembersBatchResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFileMembersBatchResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file"] = valueObj.file;
  jsonDict[@"result"] = [DBSHARINGListFileMembersIndividualResultSerializer serialize:valueObj.result];

  return jsonDict;
}

+ (DBSHARINGListFileMembersBatchResult *)deserialize:(NSDictionary *)valueDict {
  NSString *file = valueDict[@"file"];
  DBSHARINGListFileMembersIndividualResult *result =
      [DBSHARINGListFileMembersIndividualResultSerializer deserialize:valueDict[@"result"]];

  return [[DBSHARINGListFileMembersBatchResult alloc] initWithFile:file result:result];
}

@end

#import "DBSHARINGListFileMembersContinueArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFileMembersContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFileMembersContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFileMembersContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFileMembersContinueArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFileMembersContinueArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFileMembersContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return jsonDict;
}

+ (DBSHARINGListFileMembersContinueArg *)deserialize:(NSDictionary *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBSHARINGListFileMembersContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBSHARINGListFileMembersContinueError.h"
#import "DBSHARINGSharingFileAccessError.h"
#import "DBSHARINGSharingUserError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFileMembersContinueError

@synthesize userError = _userError;
@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithUserError:(DBSHARINGSharingUserError *)userError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFileMembersContinueErrorUserError;
    _userError = userError;
  }
  return self;
}

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFileMembersContinueErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithInvalidCursor {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFileMembersContinueErrorInvalidCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFileMembersContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharingUserError *)userError {
  if (![self isUserError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGListFileMembersContinueErrorUserError, but was %@.", [self tagName]];
  }
  return _userError;
}

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGListFileMembersContinueErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isUserError {
  return _tag == DBSHARINGListFileMembersContinueErrorUserError;
}

- (BOOL)isAccessError {
  return _tag == DBSHARINGListFileMembersContinueErrorAccessError;
}

- (BOOL)isInvalidCursor {
  return _tag == DBSHARINGListFileMembersContinueErrorInvalidCursor;
}

- (BOOL)isOther {
  return _tag == DBSHARINGListFileMembersContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGListFileMembersContinueErrorUserError:
    return @"DBSHARINGListFileMembersContinueErrorUserError";
  case DBSHARINGListFileMembersContinueErrorAccessError:
    return @"DBSHARINGListFileMembersContinueErrorAccessError";
  case DBSHARINGListFileMembersContinueErrorInvalidCursor:
    return @"DBSHARINGListFileMembersContinueErrorInvalidCursor";
  case DBSHARINGListFileMembersContinueErrorOther:
    return @"DBSHARINGListFileMembersContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFileMembersContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFileMembersContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFileMembersContinueErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFileMembersContinueErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFileMembersContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserError]) {
    jsonDict[@"user_error"] = [[DBSHARINGSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
    jsonDict[@".tag"] = @"user_error";
  } else if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isInvalidCursor]) {
    jsonDict[@".tag"] = @"invalid_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGListFileMembersContinueError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_error"]) {
    DBSHARINGSharingUserError *userError = [DBSHARINGSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
    return [[DBSHARINGListFileMembersContinueError alloc] initWithUserError:userError];
  } else if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGListFileMembersContinueError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"invalid_cursor"]) {
    return [[DBSHARINGListFileMembersContinueError alloc] initWithInvalidCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGListFileMembersContinueError alloc] initWithOther];
  } else {
    return [[DBSHARINGListFileMembersContinueError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGListFileMembersCountResult.h"
#import "DBSHARINGSharedFileMembers.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFileMembersCountResult

#pragma mark - Constructors

- (instancetype)initWithMembers:(DBSHARINGSharedFileMembers *)members memberCount:(NSNumber *)memberCount {

  self = [super init];
  if (self) {
    _members = members;
    _memberCount = memberCount;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFileMembersCountResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFileMembersCountResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFileMembersCountResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFileMembersCountResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFileMembersCountResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"members"] = [DBSHARINGSharedFileMembersSerializer serialize:valueObj.members];
  jsonDict[@"member_count"] = valueObj.memberCount;

  return jsonDict;
}

+ (DBSHARINGListFileMembersCountResult *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGSharedFileMembers *members = [DBSHARINGSharedFileMembersSerializer deserialize:valueDict[@"members"]];
  NSNumber *memberCount = valueDict[@"member_count"];

  return [[DBSHARINGListFileMembersCountResult alloc] initWithMembers:members memberCount:memberCount];
}

@end

#import "DBSHARINGListFileMembersError.h"
#import "DBSHARINGSharingFileAccessError.h"
#import "DBSHARINGSharingUserError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFileMembersError

@synthesize userError = _userError;
@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithUserError:(DBSHARINGSharingUserError *)userError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFileMembersErrorUserError;
    _userError = userError;
  }
  return self;
}

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFileMembersErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFileMembersErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharingUserError *)userError {
  if (![self isUserError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGListFileMembersErrorUserError, but was %@.", [self tagName]];
  }
  return _userError;
}

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGListFileMembersErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isUserError {
  return _tag == DBSHARINGListFileMembersErrorUserError;
}

- (BOOL)isAccessError {
  return _tag == DBSHARINGListFileMembersErrorAccessError;
}

- (BOOL)isOther {
  return _tag == DBSHARINGListFileMembersErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGListFileMembersErrorUserError:
    return @"DBSHARINGListFileMembersErrorUserError";
  case DBSHARINGListFileMembersErrorAccessError:
    return @"DBSHARINGListFileMembersErrorAccessError";
  case DBSHARINGListFileMembersErrorOther:
    return @"DBSHARINGListFileMembersErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFileMembersErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFileMembersErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFileMembersErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFileMembersErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFileMembersError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserError]) {
    jsonDict[@"user_error"] = [[DBSHARINGSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
    jsonDict[@".tag"] = @"user_error";
  } else if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGListFileMembersError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_error"]) {
    DBSHARINGSharingUserError *userError = [DBSHARINGSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
    return [[DBSHARINGListFileMembersError alloc] initWithUserError:userError];
  } else if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGListFileMembersError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGListFileMembersError alloc] initWithOther];
  } else {
    return [[DBSHARINGListFileMembersError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGListFileMembersCountResult.h"
#import "DBSHARINGListFileMembersIndividualResult.h"
#import "DBSHARINGSharingFileAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFileMembersIndividualResult

@synthesize result = _result;
@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithResult:(DBSHARINGListFileMembersCountResult *)result {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFileMembersIndividualResultResult;
    _result = result;
  }
  return self;
}

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFileMembersIndividualResultAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFileMembersIndividualResultOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGListFileMembersCountResult *)result {
  if (![self isResult]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGListFileMembersIndividualResultResult, but was %@.", [self tagName]];
  }
  return _result;
}

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGListFileMembersIndividualResultAccessError, but was %@.",
                       [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isResult {
  return _tag == DBSHARINGListFileMembersIndividualResultResult;
}

- (BOOL)isAccessError {
  return _tag == DBSHARINGListFileMembersIndividualResultAccessError;
}

- (BOOL)isOther {
  return _tag == DBSHARINGListFileMembersIndividualResultOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGListFileMembersIndividualResultResult:
    return @"DBSHARINGListFileMembersIndividualResultResult";
  case DBSHARINGListFileMembersIndividualResultAccessError:
    return @"DBSHARINGListFileMembersIndividualResultAccessError";
  case DBSHARINGListFileMembersIndividualResultOther:
    return @"DBSHARINGListFileMembersIndividualResultOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFileMembersIndividualResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFileMembersIndividualResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFileMembersIndividualResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFileMembersIndividualResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFileMembersIndividualResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isResult]) {
    jsonDict[@"result"] = [[DBSHARINGListFileMembersCountResultSerializer serialize:valueObj.result] mutableCopy];
    jsonDict[@".tag"] = @"result";
  } else if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGListFileMembersIndividualResult *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"result"]) {
    DBSHARINGListFileMembersCountResult *result = [DBSHARINGListFileMembersCountResultSerializer deserialize:valueDict];
    return [[DBSHARINGListFileMembersIndividualResult alloc] initWithResult:result];
  } else if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGListFileMembersIndividualResult alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGListFileMembersIndividualResult alloc] initWithOther];
  } else {
    return [[DBSHARINGListFileMembersIndividualResult alloc] initWithOther];
  }
}
@end

#import "DBSHARINGFileAction.h"
#import "DBSHARINGListFilesArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFilesArg

#pragma mark - Constructors

- (instancetype)initWithLimit:(NSNumber *)limit actions:(NSArray<DBSHARINGFileAction *> *)actions {
  [DBStoneValidators numericValidator:@(1) maxValue:@(300)](limit ?: @(100));
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](actions);

  self = [super init];
  if (self) {
    _limit = limit ?: @(100);
    _actions = actions;
  }
  return self;
}

- (instancetype)init {
  return [self initWithLimit:nil actions:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFilesArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFilesArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFilesArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFilesArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFilesArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"limit"] = valueObj.limit;
  if (valueObj.actions) {
    jsonDict[@"actions"] = [DBArraySerializer serialize:valueObj.actions
                                              withBlock:^id(id elem) {
                                                return [DBSHARINGFileActionSerializer serialize:elem];
                                              }];
  }

  return jsonDict;
}

+ (DBSHARINGListFilesArg *)deserialize:(NSDictionary *)valueDict {
  NSNumber *limit = valueDict[@"limit"] ?: @(100);
  NSArray<DBSHARINGFileAction *> *actions =
      valueDict[@"actions"] ? [DBArraySerializer deserialize:valueDict[@"actions"]
                                                   withBlock:^id(id elem) {
                                                     return [DBSHARINGFileActionSerializer deserialize:elem];
                                                   }]
                            : nil;

  return [[DBSHARINGListFilesArg alloc] initWithLimit:limit actions:actions];
}

@end

#import "DBSHARINGListFilesContinueArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFilesContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFilesContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFilesContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFilesContinueArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFilesContinueArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFilesContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return jsonDict;
}

+ (DBSHARINGListFilesContinueArg *)deserialize:(NSDictionary *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBSHARINGListFilesContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBSHARINGListFilesContinueError.h"
#import "DBSHARINGSharingUserError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFilesContinueError

@synthesize userError = _userError;

#pragma mark - Constructors

- (instancetype)initWithUserError:(DBSHARINGSharingUserError *)userError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFilesContinueErrorUserError;
    _userError = userError;
  }
  return self;
}

- (instancetype)initWithInvalidCursor {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFilesContinueErrorInvalidCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFilesContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharingUserError *)userError {
  if (![self isUserError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGListFilesContinueErrorUserError, but was %@.", [self tagName]];
  }
  return _userError;
}

#pragma mark - Tag state methods

- (BOOL)isUserError {
  return _tag == DBSHARINGListFilesContinueErrorUserError;
}

- (BOOL)isInvalidCursor {
  return _tag == DBSHARINGListFilesContinueErrorInvalidCursor;
}

- (BOOL)isOther {
  return _tag == DBSHARINGListFilesContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGListFilesContinueErrorUserError:
    return @"DBSHARINGListFilesContinueErrorUserError";
  case DBSHARINGListFilesContinueErrorInvalidCursor:
    return @"DBSHARINGListFilesContinueErrorInvalidCursor";
  case DBSHARINGListFilesContinueErrorOther:
    return @"DBSHARINGListFilesContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFilesContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFilesContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFilesContinueErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFilesContinueErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFilesContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserError]) {
    jsonDict[@"user_error"] = [[DBSHARINGSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
    jsonDict[@".tag"] = @"user_error";
  } else if ([valueObj isInvalidCursor]) {
    jsonDict[@".tag"] = @"invalid_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGListFilesContinueError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_error"]) {
    DBSHARINGSharingUserError *userError = [DBSHARINGSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
    return [[DBSHARINGListFilesContinueError alloc] initWithUserError:userError];
  } else if ([tag isEqualToString:@"invalid_cursor"]) {
    return [[DBSHARINGListFilesContinueError alloc] initWithInvalidCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGListFilesContinueError alloc] initWithOther];
  } else {
    return [[DBSHARINGListFilesContinueError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGListFilesResult.h"
#import "DBSHARINGSharedFileMetadata.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFilesResult

#pragma mark - Constructors

- (instancetype)initWithEntries:(NSArray<DBSHARINGSharedFileMetadata *> *)entries cursor:(NSString *)cursor {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](entries);

  self = [super init];
  if (self) {
    _entries = entries;
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initWithEntries:(NSArray<DBSHARINGSharedFileMetadata *> *)entries {
  return [self initWithEntries:entries cursor:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFilesResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFilesResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFilesResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFilesResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFilesResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"entries"] = [DBArraySerializer serialize:valueObj.entries
                                            withBlock:^id(id elem) {
                                              return [DBSHARINGSharedFileMetadataSerializer serialize:elem];
                                            }];
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return jsonDict;
}

+ (DBSHARINGListFilesResult *)deserialize:(NSDictionary *)valueDict {
  NSArray<DBSHARINGSharedFileMetadata *> *entries =
      [DBArraySerializer deserialize:valueDict[@"entries"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGSharedFileMetadataSerializer deserialize:elem];
                           }];
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBSHARINGListFilesResult alloc] initWithEntries:entries cursor:cursor];
}

@end

#import "DBSHARINGListFolderMembersCursorArg.h"
#import "DBSHARINGMemberAction.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFolderMembersCursorArg

#pragma mark - Constructors

- (instancetype)initWithActions:(NSArray<DBSHARINGMemberAction *> *)actions limit:(NSNumber *)limit {
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](actions);
  [DBStoneValidators numericValidator:@(1) maxValue:@(1000)](limit ?: @(1000));

  self = [super init];
  if (self) {
    _actions = actions;
    _limit = limit ?: @(1000);
  }
  return self;
}

- (instancetype)init {
  return [self initWithActions:nil limit:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFolderMembersCursorArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFolderMembersCursorArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFolderMembersCursorArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFolderMembersCursorArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFolderMembersCursorArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.actions) {
    jsonDict[@"actions"] = [DBArraySerializer serialize:valueObj.actions
                                              withBlock:^id(id elem) {
                                                return [DBSHARINGMemberActionSerializer serialize:elem];
                                              }];
  }
  jsonDict[@"limit"] = valueObj.limit;

  return jsonDict;
}

+ (DBSHARINGListFolderMembersCursorArg *)deserialize:(NSDictionary *)valueDict {
  NSArray<DBSHARINGMemberAction *> *actions =
      valueDict[@"actions"] ? [DBArraySerializer deserialize:valueDict[@"actions"]
                                                   withBlock:^id(id elem) {
                                                     return [DBSHARINGMemberActionSerializer deserialize:elem];
                                                   }]
                            : nil;
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);

  return [[DBSHARINGListFolderMembersCursorArg alloc] initWithActions:actions limit:limit];
}

@end

#import "DBSHARINGListFolderMembersArgs.h"
#import "DBSHARINGListFolderMembersCursorArg.h"
#import "DBSHARINGMemberAction.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFolderMembersArgs

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId
                               actions:(NSArray<DBSHARINGMemberAction *> *)actions
                                 limit:(NSNumber *)limit {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](actions);
  [DBStoneValidators numericValidator:@(1) maxValue:@(1000)](limit ?: @(1000));

  self = [super initWithActions:actions limit:limit];
  if (self) {
    _sharedFolderId = sharedFolderId;
  }
  return self;
}

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId {
  return [self initWithSharedFolderId:sharedFolderId actions:nil limit:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFolderMembersArgsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFolderMembersArgsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFolderMembersArgsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFolderMembersArgsSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFolderMembersArgs *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  if (valueObj.actions) {
    jsonDict[@"actions"] = [DBArraySerializer serialize:valueObj.actions
                                              withBlock:^id(id elem) {
                                                return [DBSHARINGMemberActionSerializer serialize:elem];
                                              }];
  }
  jsonDict[@"limit"] = valueObj.limit;

  return jsonDict;
}

+ (DBSHARINGListFolderMembersArgs *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  NSArray<DBSHARINGMemberAction *> *actions =
      valueDict[@"actions"] ? [DBArraySerializer deserialize:valueDict[@"actions"]
                                                   withBlock:^id(id elem) {
                                                     return [DBSHARINGMemberActionSerializer deserialize:elem];
                                                   }]
                            : nil;
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);

  return [[DBSHARINGListFolderMembersArgs alloc] initWithSharedFolderId:sharedFolderId actions:actions limit:limit];
}

@end

#import "DBSHARINGListFolderMembersContinueArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFolderMembersContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFolderMembersContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFolderMembersContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFolderMembersContinueArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFolderMembersContinueArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFolderMembersContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return jsonDict;
}

+ (DBSHARINGListFolderMembersContinueArg *)deserialize:(NSDictionary *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBSHARINGListFolderMembersContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBSHARINGListFolderMembersContinueError.h"
#import "DBSHARINGSharedFolderAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFolderMembersContinueError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFolderMembersContinueErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithInvalidCursor {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFolderMembersContinueErrorInvalidCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFolderMembersContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGListFolderMembersContinueErrorAccessError, but was %@.",
                       [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGListFolderMembersContinueErrorAccessError;
}

- (BOOL)isInvalidCursor {
  return _tag == DBSHARINGListFolderMembersContinueErrorInvalidCursor;
}

- (BOOL)isOther {
  return _tag == DBSHARINGListFolderMembersContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGListFolderMembersContinueErrorAccessError:
    return @"DBSHARINGListFolderMembersContinueErrorAccessError";
  case DBSHARINGListFolderMembersContinueErrorInvalidCursor:
    return @"DBSHARINGListFolderMembersContinueErrorInvalidCursor";
  case DBSHARINGListFolderMembersContinueErrorOther:
    return @"DBSHARINGListFolderMembersContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFolderMembersContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFolderMembersContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFolderMembersContinueErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFolderMembersContinueErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFolderMembersContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isInvalidCursor]) {
    jsonDict[@".tag"] = @"invalid_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGListFolderMembersContinueError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGListFolderMembersContinueError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"invalid_cursor"]) {
    return [[DBSHARINGListFolderMembersContinueError alloc] initWithInvalidCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGListFolderMembersContinueError alloc] initWithOther];
  } else {
    return [[DBSHARINGListFolderMembersContinueError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGFolderAction.h"
#import "DBSHARINGListFoldersArgs.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFoldersArgs

#pragma mark - Constructors

- (instancetype)initWithLimit:(NSNumber *)limit actions:(NSArray<DBSHARINGFolderAction *> *)actions {
  [DBStoneValidators numericValidator:@(1) maxValue:@(1000)](limit ?: @(1000));
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](actions);

  self = [super init];
  if (self) {
    _limit = limit ?: @(1000);
    _actions = actions;
  }
  return self;
}

- (instancetype)init {
  return [self initWithLimit:nil actions:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFoldersArgsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFoldersArgsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFoldersArgsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFoldersArgsSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFoldersArgs *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"limit"] = valueObj.limit;
  if (valueObj.actions) {
    jsonDict[@"actions"] = [DBArraySerializer serialize:valueObj.actions
                                              withBlock:^id(id elem) {
                                                return [DBSHARINGFolderActionSerializer serialize:elem];
                                              }];
  }

  return jsonDict;
}

+ (DBSHARINGListFoldersArgs *)deserialize:(NSDictionary *)valueDict {
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);
  NSArray<DBSHARINGFolderAction *> *actions =
      valueDict[@"actions"] ? [DBArraySerializer deserialize:valueDict[@"actions"]
                                                   withBlock:^id(id elem) {
                                                     return [DBSHARINGFolderActionSerializer deserialize:elem];
                                                   }]
                            : nil;

  return [[DBSHARINGListFoldersArgs alloc] initWithLimit:limit actions:actions];
}

@end

#import "DBSHARINGListFoldersContinueArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFoldersContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFoldersContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFoldersContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFoldersContinueArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFoldersContinueArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFoldersContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return jsonDict;
}

+ (DBSHARINGListFoldersContinueArg *)deserialize:(NSDictionary *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBSHARINGListFoldersContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBSHARINGListFoldersContinueError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFoldersContinueError

#pragma mark - Constructors

- (instancetype)initWithInvalidCursor {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFoldersContinueErrorInvalidCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListFoldersContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidCursor {
  return _tag == DBSHARINGListFoldersContinueErrorInvalidCursor;
}

- (BOOL)isOther {
  return _tag == DBSHARINGListFoldersContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGListFoldersContinueErrorInvalidCursor:
    return @"DBSHARINGListFoldersContinueErrorInvalidCursor";
  case DBSHARINGListFoldersContinueErrorOther:
    return @"DBSHARINGListFoldersContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFoldersContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFoldersContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFoldersContinueErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFoldersContinueErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFoldersContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidCursor]) {
    jsonDict[@".tag"] = @"invalid_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGListFoldersContinueError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_cursor"]) {
    return [[DBSHARINGListFoldersContinueError alloc] initWithInvalidCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGListFoldersContinueError alloc] initWithOther];
  } else {
    return [[DBSHARINGListFoldersContinueError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGListFoldersResult.h"
#import "DBSHARINGSharedFolderMetadata.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListFoldersResult

#pragma mark - Constructors

- (instancetype)initWithEntries:(NSArray<DBSHARINGSharedFolderMetadata *> *)entries cursor:(NSString *)cursor {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](entries);

  self = [super init];
  if (self) {
    _entries = entries;
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initWithEntries:(NSArray<DBSHARINGSharedFolderMetadata *> *)entries {
  return [self initWithEntries:entries cursor:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListFoldersResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListFoldersResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListFoldersResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListFoldersResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGListFoldersResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"entries"] = [DBArraySerializer serialize:valueObj.entries
                                            withBlock:^id(id elem) {
                                              return [DBSHARINGSharedFolderMetadataSerializer serialize:elem];
                                            }];
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return jsonDict;
}

+ (DBSHARINGListFoldersResult *)deserialize:(NSDictionary *)valueDict {
  NSArray<DBSHARINGSharedFolderMetadata *> *entries =
      [DBArraySerializer deserialize:valueDict[@"entries"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGSharedFolderMetadataSerializer deserialize:elem];
                           }];
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBSHARINGListFoldersResult alloc] initWithEntries:entries cursor:cursor];
}

@end

#import "DBSHARINGListSharedLinksArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListSharedLinksArg

#pragma mark - Constructors

- (instancetype)initWithPath:(NSString *)path cursor:(NSString *)cursor directOnly:(NSNumber *)directOnly {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators
                         stringValidator:nil
                               maxLength:nil
                                 pattern:@"(/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)"]](path);

  self = [super init];
  if (self) {
    _path = path;
    _cursor = cursor;
    _directOnly = directOnly;
  }
  return self;
}

- (instancetype)init {
  return [self initWithPath:nil cursor:nil directOnly:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListSharedLinksArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListSharedLinksArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListSharedLinksArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListSharedLinksArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGListSharedLinksArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.path) {
    jsonDict[@"path"] = valueObj.path;
  }
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }
  if (valueObj.directOnly) {
    jsonDict[@"direct_only"] = valueObj.directOnly;
  }

  return jsonDict;
}

+ (DBSHARINGListSharedLinksArg *)deserialize:(NSDictionary *)valueDict {
  NSString *path = valueDict[@"path"] ?: nil;
  NSString *cursor = valueDict[@"cursor"] ?: nil;
  NSNumber *directOnly = valueDict[@"direct_only"] ?: nil;

  return [[DBSHARINGListSharedLinksArg alloc] initWithPath:path cursor:cursor directOnly:directOnly];
}

@end

#import "DBFILESLookupError.h"
#import "DBSHARINGListSharedLinksError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListSharedLinksError

@synthesize path = _path;

#pragma mark - Constructors

- (instancetype)initWithPath:(DBFILESLookupError *)path {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListSharedLinksErrorPath;
    _path = path;
  }
  return self;
}

- (instancetype)initWithReset {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListSharedLinksErrorReset;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGListSharedLinksErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBFILESLookupError *)path {
  if (![self isPath]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGListSharedLinksErrorPath, but was %@.", [self tagName]];
  }
  return _path;
}

#pragma mark - Tag state methods

- (BOOL)isPath {
  return _tag == DBSHARINGListSharedLinksErrorPath;
}

- (BOOL)isReset {
  return _tag == DBSHARINGListSharedLinksErrorReset;
}

- (BOOL)isOther {
  return _tag == DBSHARINGListSharedLinksErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGListSharedLinksErrorPath:
    return @"DBSHARINGListSharedLinksErrorPath";
  case DBSHARINGListSharedLinksErrorReset:
    return @"DBSHARINGListSharedLinksErrorReset";
  case DBSHARINGListSharedLinksErrorOther:
    return @"DBSHARINGListSharedLinksErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListSharedLinksErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListSharedLinksErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListSharedLinksErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListSharedLinksErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGListSharedLinksError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPath]) {
    jsonDict[@"path"] = [[DBFILESLookupErrorSerializer serialize:valueObj.path] mutableCopy];
    jsonDict[@".tag"] = @"path";
  } else if ([valueObj isReset]) {
    jsonDict[@".tag"] = @"reset";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGListSharedLinksError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"path"]) {
    DBFILESLookupError *path = [DBFILESLookupErrorSerializer deserialize:valueDict[@"path"]];
    return [[DBSHARINGListSharedLinksError alloc] initWithPath:path];
  } else if ([tag isEqualToString:@"reset"]) {
    return [[DBSHARINGListSharedLinksError alloc] initWithReset];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGListSharedLinksError alloc] initWithOther];
  } else {
    return [[DBSHARINGListSharedLinksError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGListSharedLinksResult.h"
#import "DBSHARINGSharedLinkMetadata.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGListSharedLinksResult

#pragma mark - Constructors

- (instancetype)initWithLinks:(NSArray<DBSHARINGSharedLinkMetadata *> *)links
                      hasMore:(NSNumber *)hasMore
                       cursor:(NSString *)cursor {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](links);

  self = [super init];
  if (self) {
    _links = links;
    _hasMore = hasMore;
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initWithLinks:(NSArray<DBSHARINGSharedLinkMetadata *> *)links hasMore:(NSNumber *)hasMore {
  return [self initWithLinks:links hasMore:hasMore cursor:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGListSharedLinksResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGListSharedLinksResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGListSharedLinksResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGListSharedLinksResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGListSharedLinksResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"links"] = [DBArraySerializer serialize:valueObj.links
                                          withBlock:^id(id elem) {
                                            return [DBSHARINGSharedLinkMetadataSerializer serialize:elem];
                                          }];
  jsonDict[@"has_more"] = valueObj.hasMore;
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return jsonDict;
}

+ (DBSHARINGListSharedLinksResult *)deserialize:(NSDictionary *)valueDict {
  NSArray<DBSHARINGSharedLinkMetadata *> *links =
      [DBArraySerializer deserialize:valueDict[@"links"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGSharedLinkMetadataSerializer deserialize:elem];
                           }];
  NSNumber *hasMore = valueDict[@"has_more"];
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBSHARINGListSharedLinksResult alloc] initWithLinks:links hasMore:hasMore cursor:cursor];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGMemberAccessLevelResult.h"
#import "DBSHARINGParentFolderAccessInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGMemberAccessLevelResult

#pragma mark - Constructors

- (instancetype)initWithAccessLevel:(DBSHARINGAccessLevel *)accessLevel
                            warning:(NSString *)warning
                      accessDetails:(NSArray<DBSHARINGParentFolderAccessInfo *> *)accessDetails {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](accessDetails);

  self = [super init];
  if (self) {
    _accessLevel = accessLevel;
    _warning = warning;
    _accessDetails = accessDetails;
  }
  return self;
}

- (instancetype)init {
  return [self initWithAccessLevel:nil warning:nil accessDetails:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGMemberAccessLevelResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGMemberAccessLevelResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGMemberAccessLevelResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGMemberAccessLevelResultSerializer

+ (NSDictionary *)serialize:(DBSHARINGMemberAccessLevelResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.accessLevel) {
    jsonDict[@"access_level"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessLevel];
  }
  if (valueObj.warning) {
    jsonDict[@"warning"] = valueObj.warning;
  }
  if (valueObj.accessDetails) {
    jsonDict[@"access_details"] =
        [DBArraySerializer serialize:valueObj.accessDetails
                           withBlock:^id(id elem) {
                             return [DBSHARINGParentFolderAccessInfoSerializer serialize:elem];
                           }];
  }

  return jsonDict;
}

+ (DBSHARINGMemberAccessLevelResult *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGAccessLevel *accessLevel =
      valueDict[@"access_level"] ? [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_level"]] : nil;
  NSString *warning = valueDict[@"warning"] ?: nil;
  NSArray<DBSHARINGParentFolderAccessInfo *> *accessDetails =
      valueDict[@"access_details"]
          ? [DBArraySerializer deserialize:valueDict[@"access_details"]
                                 withBlock:^id(id elem) {
                                   return [DBSHARINGParentFolderAccessInfoSerializer deserialize:elem];
                                 }]
          : nil;

  return [[DBSHARINGMemberAccessLevelResult alloc] initWithAccessLevel:accessLevel
                                                               warning:warning
                                                         accessDetails:accessDetails];
}

@end

#import "DBSHARINGMemberAction.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGMemberAction

#pragma mark - Constructors

- (instancetype)initWithLeaveACopy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberActionLeaveACopy;
  }
  return self;
}

- (instancetype)initWithMakeEditor {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberActionMakeEditor;
  }
  return self;
}

- (instancetype)initWithMakeOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberActionMakeOwner;
  }
  return self;
}

- (instancetype)initWithMakeViewer {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberActionMakeViewer;
  }
  return self;
}

- (instancetype)initWithMakeViewerNoComment {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberActionMakeViewerNoComment;
  }
  return self;
}

- (instancetype)initWithRemove {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberActionRemove;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberActionOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isLeaveACopy {
  return _tag == DBSHARINGMemberActionLeaveACopy;
}

- (BOOL)isMakeEditor {
  return _tag == DBSHARINGMemberActionMakeEditor;
}

- (BOOL)isMakeOwner {
  return _tag == DBSHARINGMemberActionMakeOwner;
}

- (BOOL)isMakeViewer {
  return _tag == DBSHARINGMemberActionMakeViewer;
}

- (BOOL)isMakeViewerNoComment {
  return _tag == DBSHARINGMemberActionMakeViewerNoComment;
}

- (BOOL)isRemove {
  return _tag == DBSHARINGMemberActionRemove;
}

- (BOOL)isOther {
  return _tag == DBSHARINGMemberActionOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGMemberActionLeaveACopy:
    return @"DBSHARINGMemberActionLeaveACopy";
  case DBSHARINGMemberActionMakeEditor:
    return @"DBSHARINGMemberActionMakeEditor";
  case DBSHARINGMemberActionMakeOwner:
    return @"DBSHARINGMemberActionMakeOwner";
  case DBSHARINGMemberActionMakeViewer:
    return @"DBSHARINGMemberActionMakeViewer";
  case DBSHARINGMemberActionMakeViewerNoComment:
    return @"DBSHARINGMemberActionMakeViewerNoComment";
  case DBSHARINGMemberActionRemove:
    return @"DBSHARINGMemberActionRemove";
  case DBSHARINGMemberActionOther:
    return @"DBSHARINGMemberActionOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGMemberActionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGMemberActionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGMemberActionSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGMemberActionSerializer

+ (NSDictionary *)serialize:(DBSHARINGMemberAction *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isLeaveACopy]) {
    jsonDict[@".tag"] = @"leave_a_copy";
  } else if ([valueObj isMakeEditor]) {
    jsonDict[@".tag"] = @"make_editor";
  } else if ([valueObj isMakeOwner]) {
    jsonDict[@".tag"] = @"make_owner";
  } else if ([valueObj isMakeViewer]) {
    jsonDict[@".tag"] = @"make_viewer";
  } else if ([valueObj isMakeViewerNoComment]) {
    jsonDict[@".tag"] = @"make_viewer_no_comment";
  } else if ([valueObj isRemove]) {
    jsonDict[@".tag"] = @"remove";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGMemberAction *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"leave_a_copy"]) {
    return [[DBSHARINGMemberAction alloc] initWithLeaveACopy];
  } else if ([tag isEqualToString:@"make_editor"]) {
    return [[DBSHARINGMemberAction alloc] initWithMakeEditor];
  } else if ([tag isEqualToString:@"make_owner"]) {
    return [[DBSHARINGMemberAction alloc] initWithMakeOwner];
  } else if ([tag isEqualToString:@"make_viewer"]) {
    return [[DBSHARINGMemberAction alloc] initWithMakeViewer];
  } else if ([tag isEqualToString:@"make_viewer_no_comment"]) {
    return [[DBSHARINGMemberAction alloc] initWithMakeViewerNoComment];
  } else if ([tag isEqualToString:@"remove"]) {
    return [[DBSHARINGMemberAction alloc] initWithRemove];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGMemberAction alloc] initWithOther];
  } else {
    return [[DBSHARINGMemberAction alloc] initWithOther];
  }
}
@end

#import "DBSHARINGMemberAction.h"
#import "DBSHARINGMemberPermission.h"
#import "DBSHARINGPermissionDeniedReason.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGMemberPermission

#pragma mark - Constructors

- (instancetype)initWithAction:(DBSHARINGMemberAction *)action
                         allow:(NSNumber *)allow
                        reason:(DBSHARINGPermissionDeniedReason *)reason {

  self = [super init];
  if (self) {
    _action = action;
    _allow = allow;
    _reason = reason;
  }
  return self;
}

- (instancetype)initWithAction:(DBSHARINGMemberAction *)action allow:(NSNumber *)allow {
  return [self initWithAction:action allow:allow reason:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGMemberPermissionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGMemberPermissionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGMemberPermissionSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGMemberPermissionSerializer

+ (NSDictionary *)serialize:(DBSHARINGMemberPermission *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"action"] = [DBSHARINGMemberActionSerializer serialize:valueObj.action];
  jsonDict[@"allow"] = valueObj.allow;
  if (valueObj.reason) {
    jsonDict[@"reason"] = [DBSHARINGPermissionDeniedReasonSerializer serialize:valueObj.reason];
  }

  return jsonDict;
}

+ (DBSHARINGMemberPermission *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGMemberAction *action = [DBSHARINGMemberActionSerializer deserialize:valueDict[@"action"]];
  NSNumber *allow = valueDict[@"allow"];
  DBSHARINGPermissionDeniedReason *reason =
      valueDict[@"reason"] ? [DBSHARINGPermissionDeniedReasonSerializer deserialize:valueDict[@"reason"]] : nil;

  return [[DBSHARINGMemberPermission alloc] initWithAction:action allow:allow reason:reason];
}

@end

#import "DBSHARINGMemberPolicy.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGMemberPolicy

#pragma mark - Constructors

- (instancetype)initWithTeam {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberPolicyTeam;
  }
  return self;
}

- (instancetype)initWithAnyone {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberPolicyAnyone;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isTeam {
  return _tag == DBSHARINGMemberPolicyTeam;
}

- (BOOL)isAnyone {
  return _tag == DBSHARINGMemberPolicyAnyone;
}

- (BOOL)isOther {
  return _tag == DBSHARINGMemberPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGMemberPolicyTeam:
    return @"DBSHARINGMemberPolicyTeam";
  case DBSHARINGMemberPolicyAnyone:
    return @"DBSHARINGMemberPolicyAnyone";
  case DBSHARINGMemberPolicyOther:
    return @"DBSHARINGMemberPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGMemberPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGMemberPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGMemberPolicySerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGMemberPolicySerializer

+ (NSDictionary *)serialize:(DBSHARINGMemberPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeam]) {
    jsonDict[@".tag"] = @"team";
  } else if ([valueObj isAnyone]) {
    jsonDict[@".tag"] = @"anyone";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGMemberPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team"]) {
    return [[DBSHARINGMemberPolicy alloc] initWithTeam];
  } else if ([tag isEqualToString:@"anyone"]) {
    return [[DBSHARINGMemberPolicy alloc] initWithAnyone];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGMemberPolicy alloc] initWithOther];
  } else {
    return [[DBSHARINGMemberPolicy alloc] initWithOther];
  }
}
@end

#import "DBSHARINGMemberSelector.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGMemberSelector

@synthesize dropboxId = _dropboxId;
@synthesize email = _email;

#pragma mark - Constructors

- (instancetype)initWithDropboxId:(NSString *)dropboxId {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberSelectorDropboxId;
    _dropboxId = dropboxId;
  }
  return self;
}

- (instancetype)initWithEmail:(NSString *)email {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberSelectorEmail;
    _email = email;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMemberSelectorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)dropboxId {
  if (![self isDropboxId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGMemberSelectorDropboxId, but was %@.", [self tagName]];
  }
  return _dropboxId;
}

- (NSString *)email {
  if (![self isEmail]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGMemberSelectorEmail, but was %@.", [self tagName]];
  }
  return _email;
}

#pragma mark - Tag state methods

- (BOOL)isDropboxId {
  return _tag == DBSHARINGMemberSelectorDropboxId;
}

- (BOOL)isEmail {
  return _tag == DBSHARINGMemberSelectorEmail;
}

- (BOOL)isOther {
  return _tag == DBSHARINGMemberSelectorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGMemberSelectorDropboxId:
    return @"DBSHARINGMemberSelectorDropboxId";
  case DBSHARINGMemberSelectorEmail:
    return @"DBSHARINGMemberSelectorEmail";
  case DBSHARINGMemberSelectorOther:
    return @"DBSHARINGMemberSelectorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGMemberSelectorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGMemberSelectorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGMemberSelectorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGMemberSelectorSerializer

+ (NSDictionary *)serialize:(DBSHARINGMemberSelector *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDropboxId]) {
    jsonDict[@"dropbox_id"] = valueObj.dropboxId;
    jsonDict[@".tag"] = @"dropbox_id";
  } else if ([valueObj isEmail]) {
    jsonDict[@"email"] = valueObj.email;
    jsonDict[@".tag"] = @"email";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGMemberSelector *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"dropbox_id"]) {
    NSString *dropboxId = valueDict[@"dropbox_id"];
    return [[DBSHARINGMemberSelector alloc] initWithDropboxId:dropboxId];
  } else if ([tag isEqualToString:@"email"]) {
    NSString *email = valueDict[@"email"];
    return [[DBSHARINGMemberSelector alloc] initWithEmail:email];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGMemberSelector alloc] initWithOther];
  } else {
    return [[DBSHARINGMemberSelector alloc] initWithOther];
  }
}
@end

#import "DBSHARINGModifySharedLinkSettingsArgs.h"
#import "DBSHARINGSharedLinkSettings.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGModifySharedLinkSettingsArgs

#pragma mark - Constructors

- (instancetype)initWithUrl:(NSString *)url
                   settings:(DBSHARINGSharedLinkSettings *)settings
           removeExpiration:(NSNumber *)removeExpiration {

  self = [super init];
  if (self) {
    _url = url;
    _settings = settings;
    _removeExpiration = removeExpiration ?: @NO;
  }
  return self;
}

- (instancetype)initWithUrl:(NSString *)url settings:(DBSHARINGSharedLinkSettings *)settings {
  return [self initWithUrl:url settings:settings removeExpiration:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGModifySharedLinkSettingsArgsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGModifySharedLinkSettingsArgsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGModifySharedLinkSettingsArgsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGModifySharedLinkSettingsArgsSerializer

+ (NSDictionary *)serialize:(DBSHARINGModifySharedLinkSettingsArgs *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"url"] = valueObj.url;
  jsonDict[@"settings"] = [DBSHARINGSharedLinkSettingsSerializer serialize:valueObj.settings];
  jsonDict[@"remove_expiration"] = valueObj.removeExpiration;

  return jsonDict;
}

+ (DBSHARINGModifySharedLinkSettingsArgs *)deserialize:(NSDictionary *)valueDict {
  NSString *url = valueDict[@"url"];
  DBSHARINGSharedLinkSettings *settings = [DBSHARINGSharedLinkSettingsSerializer deserialize:valueDict[@"settings"]];
  NSNumber *removeExpiration = valueDict[@"remove_expiration"] ?: @NO;

  return [[DBSHARINGModifySharedLinkSettingsArgs alloc] initWithUrl:url
                                                           settings:settings
                                                   removeExpiration:removeExpiration];
}

@end

#import "DBSHARINGModifySharedLinkSettingsError.h"
#import "DBSHARINGSharedLinkError.h"
#import "DBSHARINGSharedLinkSettingsError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGModifySharedLinkSettingsError

@synthesize settingsError = _settingsError;

#pragma mark - Constructors

- (instancetype)initWithSharedLinkNotFound {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound;
  }
  return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied;
  }
  return self;
}

- (instancetype)initWithUnsupportedLinkType {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorUnsupportedLinkType;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorOther;
  }
  return self;
}

- (instancetype)initWithSettingsError:(DBSHARINGSharedLinkSettingsError *)settingsError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorSettingsError;
    _settingsError = settingsError;
  }
  return self;
}

- (instancetype)initWithEmailNotVerified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGModifySharedLinkSettingsErrorEmailNotVerified;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedLinkSettingsError *)settingsError {
  if (![self isSettingsError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGModifySharedLinkSettingsErrorSettingsError, but was %@.",
                       [self tagName]];
  }
  return _settingsError;
}

#pragma mark - Tag state methods

- (BOOL)isSharedLinkNotFound {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied;
}

- (BOOL)isUnsupportedLinkType {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorUnsupportedLinkType;
}

- (BOOL)isOther {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorOther;
}

- (BOOL)isSettingsError {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorSettingsError;
}

- (BOOL)isEmailNotVerified {
  return _tag == DBSHARINGModifySharedLinkSettingsErrorEmailNotVerified;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound:
    return @"DBSHARINGModifySharedLinkSettingsErrorSharedLinkNotFound";
  case DBSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied:
    return @"DBSHARINGModifySharedLinkSettingsErrorSharedLinkAccessDenied";
  case DBSHARINGModifySharedLinkSettingsErrorUnsupportedLinkType:
    return @"DBSHARINGModifySharedLinkSettingsErrorUnsupportedLinkType";
  case DBSHARINGModifySharedLinkSettingsErrorOther:
    return @"DBSHARINGModifySharedLinkSettingsErrorOther";
  case DBSHARINGModifySharedLinkSettingsErrorSettingsError:
    return @"DBSHARINGModifySharedLinkSettingsErrorSettingsError";
  case DBSHARINGModifySharedLinkSettingsErrorEmailNotVerified:
    return @"DBSHARINGModifySharedLinkSettingsErrorEmailNotVerified";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGModifySharedLinkSettingsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGModifySharedLinkSettingsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGModifySharedLinkSettingsErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGModifySharedLinkSettingsErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGModifySharedLinkSettingsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSharedLinkNotFound]) {
    jsonDict[@".tag"] = @"shared_link_not_found";
  } else if ([valueObj isSharedLinkAccessDenied]) {
    jsonDict[@".tag"] = @"shared_link_access_denied";
  } else if ([valueObj isUnsupportedLinkType]) {
    jsonDict[@".tag"] = @"unsupported_link_type";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSettingsError]) {
    jsonDict[@"settings_error"] =
        [[DBSHARINGSharedLinkSettingsErrorSerializer serialize:valueObj.settingsError] mutableCopy];
    jsonDict[@".tag"] = @"settings_error";
  } else if ([valueObj isEmailNotVerified]) {
    jsonDict[@".tag"] = @"email_not_verified";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGModifySharedLinkSettingsError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"shared_link_not_found"]) {
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithSharedLinkNotFound];
  } else if ([tag isEqualToString:@"shared_link_access_denied"]) {
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithSharedLinkAccessDenied];
  } else if ([tag isEqualToString:@"unsupported_link_type"]) {
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithUnsupportedLinkType];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithOther];
  } else if ([tag isEqualToString:@"settings_error"]) {
    DBSHARINGSharedLinkSettingsError *settingsError =
        [DBSHARINGSharedLinkSettingsErrorSerializer deserialize:valueDict[@"settings_error"]];
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithSettingsError:settingsError];
  } else if ([tag isEqualToString:@"email_not_verified"]) {
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithEmailNotVerified];
  } else {
    return [[DBSHARINGModifySharedLinkSettingsError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGMountFolderArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGMountFolderArg

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);

  self = [super init];
  if (self) {
    _sharedFolderId = sharedFolderId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGMountFolderArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGMountFolderArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGMountFolderArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGMountFolderArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGMountFolderArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;

  return jsonDict;
}

+ (DBSHARINGMountFolderArg *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];

  return [[DBSHARINGMountFolderArg alloc] initWithSharedFolderId:sharedFolderId];
}

@end

#import "DBSHARINGInsufficientQuotaAmounts.h"
#import "DBSHARINGMountFolderError.h"
#import "DBSHARINGSharedFolderAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGMountFolderError

@synthesize accessError = _accessError;
@synthesize insufficientQuota = _insufficientQuota;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithInsideSharedFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorInsideSharedFolder;
  }
  return self;
}

- (instancetype)initWithInsufficientQuota:(DBSHARINGInsufficientQuotaAmounts *)insufficientQuota {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorInsufficientQuota;
    _insufficientQuota = insufficientQuota;
  }
  return self;
}

- (instancetype)initWithAlreadyMounted {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorAlreadyMounted;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithNotMountable {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorNotMountable;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGMountFolderErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGMountFolderErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBSHARINGInsufficientQuotaAmounts *)insufficientQuota {
  if (![self isInsufficientQuota]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGMountFolderErrorInsufficientQuota, but was %@.", [self tagName]];
  }
  return _insufficientQuota;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGMountFolderErrorAccessError;
}

- (BOOL)isInsideSharedFolder {
  return _tag == DBSHARINGMountFolderErrorInsideSharedFolder;
}

- (BOOL)isInsufficientQuota {
  return _tag == DBSHARINGMountFolderErrorInsufficientQuota;
}

- (BOOL)isAlreadyMounted {
  return _tag == DBSHARINGMountFolderErrorAlreadyMounted;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGMountFolderErrorNoPermission;
}

- (BOOL)isNotMountable {
  return _tag == DBSHARINGMountFolderErrorNotMountable;
}

- (BOOL)isOther {
  return _tag == DBSHARINGMountFolderErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGMountFolderErrorAccessError:
    return @"DBSHARINGMountFolderErrorAccessError";
  case DBSHARINGMountFolderErrorInsideSharedFolder:
    return @"DBSHARINGMountFolderErrorInsideSharedFolder";
  case DBSHARINGMountFolderErrorInsufficientQuota:
    return @"DBSHARINGMountFolderErrorInsufficientQuota";
  case DBSHARINGMountFolderErrorAlreadyMounted:
    return @"DBSHARINGMountFolderErrorAlreadyMounted";
  case DBSHARINGMountFolderErrorNoPermission:
    return @"DBSHARINGMountFolderErrorNoPermission";
  case DBSHARINGMountFolderErrorNotMountable:
    return @"DBSHARINGMountFolderErrorNotMountable";
  case DBSHARINGMountFolderErrorOther:
    return @"DBSHARINGMountFolderErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGMountFolderErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGMountFolderErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGMountFolderErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGMountFolderErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGMountFolderError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isInsideSharedFolder]) {
    jsonDict[@".tag"] = @"inside_shared_folder";
  } else if ([valueObj isInsufficientQuota]) {
    jsonDict[@"insufficient_quota"] =
        [[DBSHARINGInsufficientQuotaAmountsSerializer serialize:valueObj.insufficientQuota] mutableCopy];
    jsonDict[@".tag"] = @"insufficient_quota";
  } else if ([valueObj isAlreadyMounted]) {
    jsonDict[@".tag"] = @"already_mounted";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isNotMountable]) {
    jsonDict[@".tag"] = @"not_mountable";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGMountFolderError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGMountFolderError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"inside_shared_folder"]) {
    return [[DBSHARINGMountFolderError alloc] initWithInsideSharedFolder];
  } else if ([tag isEqualToString:@"insufficient_quota"]) {
    DBSHARINGInsufficientQuotaAmounts *insufficientQuota =
        [DBSHARINGInsufficientQuotaAmountsSerializer deserialize:valueDict];
    return [[DBSHARINGMountFolderError alloc] initWithInsufficientQuota:insufficientQuota];
  } else if ([tag isEqualToString:@"already_mounted"]) {
    return [[DBSHARINGMountFolderError alloc] initWithAlreadyMounted];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGMountFolderError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"not_mountable"]) {
    return [[DBSHARINGMountFolderError alloc] initWithNotMountable];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGMountFolderError alloc] initWithOther];
  } else {
    return [[DBSHARINGMountFolderError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGMemberPermission.h"
#import "DBSHARINGParentFolderAccessInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGParentFolderAccessInfo

#pragma mark - Constructors

- (instancetype)initWithFolderName:(NSString *)folderName
                    sharedFolderId:(NSString *)sharedFolderId
                       permissions:(NSArray<DBSHARINGMemberPermission *> *)permissions {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](permissions);

  self = [super init];
  if (self) {
    _folderName = folderName;
    _sharedFolderId = sharedFolderId;
    _permissions = permissions;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGParentFolderAccessInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGParentFolderAccessInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGParentFolderAccessInfoSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGParentFolderAccessInfoSerializer

+ (NSDictionary *)serialize:(DBSHARINGParentFolderAccessInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"folder_name"] = valueObj.folderName;
  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  jsonDict[@"permissions"] = [DBArraySerializer serialize:valueObj.permissions
                                                withBlock:^id(id elem) {
                                                  return [DBSHARINGMemberPermissionSerializer serialize:elem];
                                                }];

  return jsonDict;
}

+ (DBSHARINGParentFolderAccessInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *folderName = valueDict[@"folder_name"];
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  NSArray<DBSHARINGMemberPermission *> *permissions =
      [DBArraySerializer deserialize:valueDict[@"permissions"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGMemberPermissionSerializer deserialize:elem];
                           }];

  return [[DBSHARINGParentFolderAccessInfo alloc] initWithFolderName:folderName
                                                      sharedFolderId:sharedFolderId
                                                         permissions:permissions];
}

@end

#import "DBSHARINGLinkMetadata.h"
#import "DBSHARINGPathLinkMetadata.h"
#import "DBSHARINGVisibility.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGPathLinkMetadata

#pragma mark - Constructors

- (instancetype)initWithUrl:(NSString *)url
                 visibility:(DBSHARINGVisibility *)visibility
                       path:(NSString *)path
                    expires:(NSDate *)expires {

  self = [super initWithUrl:url visibility:visibility expires:expires];
  if (self) {
    _path = path;
  }
  return self;
}

- (instancetype)initWithUrl:(NSString *)url visibility:(DBSHARINGVisibility *)visibility path:(NSString *)path {
  return [self initWithUrl:url visibility:visibility path:path expires:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGPathLinkMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGPathLinkMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGPathLinkMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGPathLinkMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGPathLinkMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"url"] = valueObj.url;
  jsonDict[@"visibility"] = [DBSHARINGVisibilitySerializer serialize:valueObj.visibility];
  jsonDict[@"path"] = valueObj.path;
  if (valueObj.expires) {
    jsonDict[@"expires"] = [DBNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return jsonDict;
}

+ (DBSHARINGPathLinkMetadata *)deserialize:(NSDictionary *)valueDict {
  NSString *url = valueDict[@"url"];
  DBSHARINGVisibility *visibility = [DBSHARINGVisibilitySerializer deserialize:valueDict[@"visibility"]];
  NSString *path = valueDict[@"path"];
  NSDate *expires = valueDict[@"expires"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"expires"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;

  return [[DBSHARINGPathLinkMetadata alloc] initWithUrl:url visibility:visibility path:path expires:expires];
}

@end

#import "DBSHARINGPendingUploadMode.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGPendingUploadMode

#pragma mark - Constructors

- (instancetype)initWithFile {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPendingUploadModeFile;
  }
  return self;
}

- (instancetype)initWithFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPendingUploadModeFolder;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isFile {
  return _tag == DBSHARINGPendingUploadModeFile;
}

- (BOOL)isFolder {
  return _tag == DBSHARINGPendingUploadModeFolder;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGPendingUploadModeFile:
    return @"DBSHARINGPendingUploadModeFile";
  case DBSHARINGPendingUploadModeFolder:
    return @"DBSHARINGPendingUploadModeFolder";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGPendingUploadModeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGPendingUploadModeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGPendingUploadModeSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGPendingUploadModeSerializer

+ (NSDictionary *)serialize:(DBSHARINGPendingUploadMode *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isFile]) {
    jsonDict[@".tag"] = @"file";
  } else if ([valueObj isFolder]) {
    jsonDict[@".tag"] = @"folder";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGPendingUploadMode *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"file"]) {
    return [[DBSHARINGPendingUploadMode alloc] initWithFile];
  } else if ([tag isEqualToString:@"folder"]) {
    return [[DBSHARINGPendingUploadMode alloc] initWithFolder];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}
@end

#import "DBSHARINGPermissionDeniedReason.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGPermissionDeniedReason

#pragma mark - Constructors

- (instancetype)initWithUserNotSameTeamAsOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonUserNotSameTeamAsOwner;
  }
  return self;
}

- (instancetype)initWithUserNotAllowedByOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonUserNotAllowedByOwner;
  }
  return self;
}

- (instancetype)initWithTargetIsIndirectMember {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonTargetIsIndirectMember;
  }
  return self;
}

- (instancetype)initWithTargetIsOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonTargetIsOwner;
  }
  return self;
}

- (instancetype)initWithTargetIsSelf {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonTargetIsSelf;
  }
  return self;
}

- (instancetype)initWithTargetNotActive {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonTargetNotActive;
  }
  return self;
}

- (instancetype)initWithFolderIsLimitedTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonFolderIsLimitedTeamFolder;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGPermissionDeniedReasonOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotSameTeamAsOwner {
  return _tag == DBSHARINGPermissionDeniedReasonUserNotSameTeamAsOwner;
}

- (BOOL)isUserNotAllowedByOwner {
  return _tag == DBSHARINGPermissionDeniedReasonUserNotAllowedByOwner;
}

- (BOOL)isTargetIsIndirectMember {
  return _tag == DBSHARINGPermissionDeniedReasonTargetIsIndirectMember;
}

- (BOOL)isTargetIsOwner {
  return _tag == DBSHARINGPermissionDeniedReasonTargetIsOwner;
}

- (BOOL)isTargetIsSelf {
  return _tag == DBSHARINGPermissionDeniedReasonTargetIsSelf;
}

- (BOOL)isTargetNotActive {
  return _tag == DBSHARINGPermissionDeniedReasonTargetNotActive;
}

- (BOOL)isFolderIsLimitedTeamFolder {
  return _tag == DBSHARINGPermissionDeniedReasonFolderIsLimitedTeamFolder;
}

- (BOOL)isOther {
  return _tag == DBSHARINGPermissionDeniedReasonOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGPermissionDeniedReasonUserNotSameTeamAsOwner:
    return @"DBSHARINGPermissionDeniedReasonUserNotSameTeamAsOwner";
  case DBSHARINGPermissionDeniedReasonUserNotAllowedByOwner:
    return @"DBSHARINGPermissionDeniedReasonUserNotAllowedByOwner";
  case DBSHARINGPermissionDeniedReasonTargetIsIndirectMember:
    return @"DBSHARINGPermissionDeniedReasonTargetIsIndirectMember";
  case DBSHARINGPermissionDeniedReasonTargetIsOwner:
    return @"DBSHARINGPermissionDeniedReasonTargetIsOwner";
  case DBSHARINGPermissionDeniedReasonTargetIsSelf:
    return @"DBSHARINGPermissionDeniedReasonTargetIsSelf";
  case DBSHARINGPermissionDeniedReasonTargetNotActive:
    return @"DBSHARINGPermissionDeniedReasonTargetNotActive";
  case DBSHARINGPermissionDeniedReasonFolderIsLimitedTeamFolder:
    return @"DBSHARINGPermissionDeniedReasonFolderIsLimitedTeamFolder";
  case DBSHARINGPermissionDeniedReasonOther:
    return @"DBSHARINGPermissionDeniedReasonOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGPermissionDeniedReasonSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGPermissionDeniedReasonSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGPermissionDeniedReasonSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGPermissionDeniedReasonSerializer

+ (NSDictionary *)serialize:(DBSHARINGPermissionDeniedReason *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotSameTeamAsOwner]) {
    jsonDict[@".tag"] = @"user_not_same_team_as_owner";
  } else if ([valueObj isUserNotAllowedByOwner]) {
    jsonDict[@".tag"] = @"user_not_allowed_by_owner";
  } else if ([valueObj isTargetIsIndirectMember]) {
    jsonDict[@".tag"] = @"target_is_indirect_member";
  } else if ([valueObj isTargetIsOwner]) {
    jsonDict[@".tag"] = @"target_is_owner";
  } else if ([valueObj isTargetIsSelf]) {
    jsonDict[@".tag"] = @"target_is_self";
  } else if ([valueObj isTargetNotActive]) {
    jsonDict[@".tag"] = @"target_not_active";
  } else if ([valueObj isFolderIsLimitedTeamFolder]) {
    jsonDict[@".tag"] = @"folder_is_limited_team_folder";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGPermissionDeniedReason *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_same_team_as_owner"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithUserNotSameTeamAsOwner];
  } else if ([tag isEqualToString:@"user_not_allowed_by_owner"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithUserNotAllowedByOwner];
  } else if ([tag isEqualToString:@"target_is_indirect_member"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithTargetIsIndirectMember];
  } else if ([tag isEqualToString:@"target_is_owner"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithTargetIsOwner];
  } else if ([tag isEqualToString:@"target_is_self"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithTargetIsSelf];
  } else if ([tag isEqualToString:@"target_not_active"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithTargetNotActive];
  } else if ([tag isEqualToString:@"folder_is_limited_team_folder"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithFolderIsLimitedTeamFolder];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithOther];
  } else {
    return [[DBSHARINGPermissionDeniedReason alloc] initWithOther];
  }
}
@end

#import "DBSHARINGRelinquishFileMembershipArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRelinquishFileMembershipArg

#pragma mark - Constructors

- (instancetype)initWithFile:(NSString *)file {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"](file);

  self = [super init];
  if (self) {
    _file = file;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRelinquishFileMembershipArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRelinquishFileMembershipArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRelinquishFileMembershipArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRelinquishFileMembershipArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGRelinquishFileMembershipArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file"] = valueObj.file;

  return jsonDict;
}

+ (DBSHARINGRelinquishFileMembershipArg *)deserialize:(NSDictionary *)valueDict {
  NSString *file = valueDict[@"file"];

  return [[DBSHARINGRelinquishFileMembershipArg alloc] initWithFile:file];
}

@end

#import "DBSHARINGRelinquishFileMembershipError.h"
#import "DBSHARINGSharingFileAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRelinquishFileMembershipError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFileMembershipErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithGroupAccess {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFileMembershipErrorGroupAccess;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFileMembershipErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFileMembershipErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGRelinquishFileMembershipErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGRelinquishFileMembershipErrorAccessError;
}

- (BOOL)isGroupAccess {
  return _tag == DBSHARINGRelinquishFileMembershipErrorGroupAccess;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGRelinquishFileMembershipErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBSHARINGRelinquishFileMembershipErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGRelinquishFileMembershipErrorAccessError:
    return @"DBSHARINGRelinquishFileMembershipErrorAccessError";
  case DBSHARINGRelinquishFileMembershipErrorGroupAccess:
    return @"DBSHARINGRelinquishFileMembershipErrorGroupAccess";
  case DBSHARINGRelinquishFileMembershipErrorNoPermission:
    return @"DBSHARINGRelinquishFileMembershipErrorNoPermission";
  case DBSHARINGRelinquishFileMembershipErrorOther:
    return @"DBSHARINGRelinquishFileMembershipErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRelinquishFileMembershipErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRelinquishFileMembershipErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRelinquishFileMembershipErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRelinquishFileMembershipErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGRelinquishFileMembershipError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isGroupAccess]) {
    jsonDict[@".tag"] = @"group_access";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGRelinquishFileMembershipError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGRelinquishFileMembershipError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"group_access"]) {
    return [[DBSHARINGRelinquishFileMembershipError alloc] initWithGroupAccess];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGRelinquishFileMembershipError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGRelinquishFileMembershipError alloc] initWithOther];
  } else {
    return [[DBSHARINGRelinquishFileMembershipError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGRelinquishFolderMembershipArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRelinquishFolderMembershipArg

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId leaveACopy:(NSNumber *)leaveACopy {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);

  self = [super init];
  if (self) {
    _sharedFolderId = sharedFolderId;
    _leaveACopy = leaveACopy ?: @NO;
  }
  return self;
}

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId {
  return [self initWithSharedFolderId:sharedFolderId leaveACopy:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRelinquishFolderMembershipArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRelinquishFolderMembershipArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRelinquishFolderMembershipArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRelinquishFolderMembershipArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGRelinquishFolderMembershipArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  jsonDict[@"leave_a_copy"] = valueObj.leaveACopy;

  return jsonDict;
}

+ (DBSHARINGRelinquishFolderMembershipArg *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  NSNumber *leaveACopy = valueDict[@"leave_a_copy"] ?: @NO;

  return [[DBSHARINGRelinquishFolderMembershipArg alloc] initWithSharedFolderId:sharedFolderId leaveACopy:leaveACopy];
}

@end

#import "DBSHARINGRelinquishFolderMembershipError.h"
#import "DBSHARINGSharedFolderAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRelinquishFolderMembershipError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithFolderOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorFolderOwner;
  }
  return self;
}

- (instancetype)initWithMounted {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorMounted;
  }
  return self;
}

- (instancetype)initWithGroupAccess {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorGroupAccess;
  }
  return self;
}

- (instancetype)initWithTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorTeamFolder;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithNoExplicitAccess {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorNoExplicitAccess;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRelinquishFolderMembershipErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGRelinquishFolderMembershipErrorAccessError, but was %@.",
                       [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorAccessError;
}

- (BOOL)isFolderOwner {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorFolderOwner;
}

- (BOOL)isMounted {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorMounted;
}

- (BOOL)isGroupAccess {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorGroupAccess;
}

- (BOOL)isTeamFolder {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorTeamFolder;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorNoPermission;
}

- (BOOL)isNoExplicitAccess {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorNoExplicitAccess;
}

- (BOOL)isOther {
  return _tag == DBSHARINGRelinquishFolderMembershipErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGRelinquishFolderMembershipErrorAccessError:
    return @"DBSHARINGRelinquishFolderMembershipErrorAccessError";
  case DBSHARINGRelinquishFolderMembershipErrorFolderOwner:
    return @"DBSHARINGRelinquishFolderMembershipErrorFolderOwner";
  case DBSHARINGRelinquishFolderMembershipErrorMounted:
    return @"DBSHARINGRelinquishFolderMembershipErrorMounted";
  case DBSHARINGRelinquishFolderMembershipErrorGroupAccess:
    return @"DBSHARINGRelinquishFolderMembershipErrorGroupAccess";
  case DBSHARINGRelinquishFolderMembershipErrorTeamFolder:
    return @"DBSHARINGRelinquishFolderMembershipErrorTeamFolder";
  case DBSHARINGRelinquishFolderMembershipErrorNoPermission:
    return @"DBSHARINGRelinquishFolderMembershipErrorNoPermission";
  case DBSHARINGRelinquishFolderMembershipErrorNoExplicitAccess:
    return @"DBSHARINGRelinquishFolderMembershipErrorNoExplicitAccess";
  case DBSHARINGRelinquishFolderMembershipErrorOther:
    return @"DBSHARINGRelinquishFolderMembershipErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRelinquishFolderMembershipErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRelinquishFolderMembershipErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRelinquishFolderMembershipErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRelinquishFolderMembershipErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGRelinquishFolderMembershipError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isFolderOwner]) {
    jsonDict[@".tag"] = @"folder_owner";
  } else if ([valueObj isMounted]) {
    jsonDict[@".tag"] = @"mounted";
  } else if ([valueObj isGroupAccess]) {
    jsonDict[@".tag"] = @"group_access";
  } else if ([valueObj isTeamFolder]) {
    jsonDict[@".tag"] = @"team_folder";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isNoExplicitAccess]) {
    jsonDict[@".tag"] = @"no_explicit_access";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGRelinquishFolderMembershipError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"folder_owner"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithFolderOwner];
  } else if ([tag isEqualToString:@"mounted"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithMounted];
  } else if ([tag isEqualToString:@"group_access"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithGroupAccess];
  } else if ([tag isEqualToString:@"team_folder"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithTeamFolder];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"no_explicit_access"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithNoExplicitAccess];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithOther];
  } else {
    return [[DBSHARINGRelinquishFolderMembershipError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGMemberSelector.h"
#import "DBSHARINGRemoveFileMemberArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRemoveFileMemberArg

#pragma mark - Constructors

- (instancetype)initWithFile:(NSString *)file member:(DBSHARINGMemberSelector *)member {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"](file);

  self = [super init];
  if (self) {
    _file = file;
    _member = member;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRemoveFileMemberArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRemoveFileMemberArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRemoveFileMemberArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRemoveFileMemberArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGRemoveFileMemberArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file"] = valueObj.file;
  jsonDict[@"member"] = [DBSHARINGMemberSelectorSerializer serialize:valueObj.member];

  return jsonDict;
}

+ (DBSHARINGRemoveFileMemberArg *)deserialize:(NSDictionary *)valueDict {
  NSString *file = valueDict[@"file"];
  DBSHARINGMemberSelector *member = [DBSHARINGMemberSelectorSerializer deserialize:valueDict[@"member"]];

  return [[DBSHARINGRemoveFileMemberArg alloc] initWithFile:file member:member];
}

@end

#import "DBSHARINGMemberAccessLevelResult.h"
#import "DBSHARINGRemoveFileMemberError.h"
#import "DBSHARINGSharingFileAccessError.h"
#import "DBSHARINGSharingUserError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRemoveFileMemberError

@synthesize userError = _userError;
@synthesize accessError = _accessError;
@synthesize noExplicitAccess = _noExplicitAccess;

#pragma mark - Constructors

- (instancetype)initWithUserError:(DBSHARINGSharingUserError *)userError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFileMemberErrorUserError;
    _userError = userError;
  }
  return self;
}

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFileMemberErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithNoExplicitAccess:(DBSHARINGMemberAccessLevelResult *)noExplicitAccess {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFileMemberErrorNoExplicitAccess;
    _noExplicitAccess = noExplicitAccess;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFileMemberErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharingUserError *)userError {
  if (![self isUserError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGRemoveFileMemberErrorUserError, but was %@.", [self tagName]];
  }
  return _userError;
}

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGRemoveFileMemberErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBSHARINGMemberAccessLevelResult *)noExplicitAccess {
  if (![self isNoExplicitAccess]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGRemoveFileMemberErrorNoExplicitAccess, but was %@.", [self tagName]];
  }
  return _noExplicitAccess;
}

#pragma mark - Tag state methods

- (BOOL)isUserError {
  return _tag == DBSHARINGRemoveFileMemberErrorUserError;
}

- (BOOL)isAccessError {
  return _tag == DBSHARINGRemoveFileMemberErrorAccessError;
}

- (BOOL)isNoExplicitAccess {
  return _tag == DBSHARINGRemoveFileMemberErrorNoExplicitAccess;
}

- (BOOL)isOther {
  return _tag == DBSHARINGRemoveFileMemberErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGRemoveFileMemberErrorUserError:
    return @"DBSHARINGRemoveFileMemberErrorUserError";
  case DBSHARINGRemoveFileMemberErrorAccessError:
    return @"DBSHARINGRemoveFileMemberErrorAccessError";
  case DBSHARINGRemoveFileMemberErrorNoExplicitAccess:
    return @"DBSHARINGRemoveFileMemberErrorNoExplicitAccess";
  case DBSHARINGRemoveFileMemberErrorOther:
    return @"DBSHARINGRemoveFileMemberErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRemoveFileMemberErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRemoveFileMemberErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRemoveFileMemberErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRemoveFileMemberErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGRemoveFileMemberError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserError]) {
    jsonDict[@"user_error"] = [[DBSHARINGSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
    jsonDict[@".tag"] = @"user_error";
  } else if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isNoExplicitAccess]) {
    jsonDict[@"no_explicit_access"] =
        [[DBSHARINGMemberAccessLevelResultSerializer serialize:valueObj.noExplicitAccess] mutableCopy];
    jsonDict[@".tag"] = @"no_explicit_access";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGRemoveFileMemberError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_error"]) {
    DBSHARINGSharingUserError *userError = [DBSHARINGSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
    return [[DBSHARINGRemoveFileMemberError alloc] initWithUserError:userError];
  } else if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGRemoveFileMemberError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"no_explicit_access"]) {
    DBSHARINGMemberAccessLevelResult *noExplicitAccess =
        [DBSHARINGMemberAccessLevelResultSerializer deserialize:valueDict];
    return [[DBSHARINGRemoveFileMemberError alloc] initWithNoExplicitAccess:noExplicitAccess];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGRemoveFileMemberError alloc] initWithOther];
  } else {
    return [[DBSHARINGRemoveFileMemberError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGMemberSelector.h"
#import "DBSHARINGRemoveFolderMemberArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRemoveFolderMemberArg

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId
                                member:(DBSHARINGMemberSelector *)member
                            leaveACopy:(NSNumber *)leaveACopy {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);

  self = [super init];
  if (self) {
    _sharedFolderId = sharedFolderId;
    _member = member;
    _leaveACopy = leaveACopy;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRemoveFolderMemberArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRemoveFolderMemberArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRemoveFolderMemberArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRemoveFolderMemberArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGRemoveFolderMemberArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  jsonDict[@"member"] = [DBSHARINGMemberSelectorSerializer serialize:valueObj.member];
  jsonDict[@"leave_a_copy"] = valueObj.leaveACopy;

  return jsonDict;
}

+ (DBSHARINGRemoveFolderMemberArg *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  DBSHARINGMemberSelector *member = [DBSHARINGMemberSelectorSerializer deserialize:valueDict[@"member"]];
  NSNumber *leaveACopy = valueDict[@"leave_a_copy"];

  return [[DBSHARINGRemoveFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId
                                                                 member:member
                                                             leaveACopy:leaveACopy];
}

@end

#import "DBSHARINGRemoveFolderMemberError.h"
#import "DBSHARINGSharedFolderAccessError.h"
#import "DBSHARINGSharedFolderMemberError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRemoveFolderMemberError

@synthesize accessError = _accessError;
@synthesize memberError = _memberError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFolderMemberErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithMemberError:(DBSHARINGSharedFolderMemberError *)memberError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFolderMemberErrorMemberError;
    _memberError = memberError;
  }
  return self;
}

- (instancetype)initWithFolderOwner {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFolderMemberErrorFolderOwner;
  }
  return self;
}

- (instancetype)initWithGroupAccess {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFolderMemberErrorGroupAccess;
  }
  return self;
}

- (instancetype)initWithTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFolderMemberErrorTeamFolder;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFolderMemberErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveFolderMemberErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGRemoveFolderMemberErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBSHARINGSharedFolderMemberError *)memberError {
  if (![self isMemberError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGRemoveFolderMemberErrorMemberError, but was %@.", [self tagName]];
  }
  return _memberError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGRemoveFolderMemberErrorAccessError;
}

- (BOOL)isMemberError {
  return _tag == DBSHARINGRemoveFolderMemberErrorMemberError;
}

- (BOOL)isFolderOwner {
  return _tag == DBSHARINGRemoveFolderMemberErrorFolderOwner;
}

- (BOOL)isGroupAccess {
  return _tag == DBSHARINGRemoveFolderMemberErrorGroupAccess;
}

- (BOOL)isTeamFolder {
  return _tag == DBSHARINGRemoveFolderMemberErrorTeamFolder;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGRemoveFolderMemberErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBSHARINGRemoveFolderMemberErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGRemoveFolderMemberErrorAccessError:
    return @"DBSHARINGRemoveFolderMemberErrorAccessError";
  case DBSHARINGRemoveFolderMemberErrorMemberError:
    return @"DBSHARINGRemoveFolderMemberErrorMemberError";
  case DBSHARINGRemoveFolderMemberErrorFolderOwner:
    return @"DBSHARINGRemoveFolderMemberErrorFolderOwner";
  case DBSHARINGRemoveFolderMemberErrorGroupAccess:
    return @"DBSHARINGRemoveFolderMemberErrorGroupAccess";
  case DBSHARINGRemoveFolderMemberErrorTeamFolder:
    return @"DBSHARINGRemoveFolderMemberErrorTeamFolder";
  case DBSHARINGRemoveFolderMemberErrorNoPermission:
    return @"DBSHARINGRemoveFolderMemberErrorNoPermission";
  case DBSHARINGRemoveFolderMemberErrorOther:
    return @"DBSHARINGRemoveFolderMemberErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRemoveFolderMemberErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRemoveFolderMemberErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRemoveFolderMemberErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRemoveFolderMemberErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGRemoveFolderMemberError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isMemberError]) {
    jsonDict[@"member_error"] =
        [[DBSHARINGSharedFolderMemberErrorSerializer serialize:valueObj.memberError] mutableCopy];
    jsonDict[@".tag"] = @"member_error";
  } else if ([valueObj isFolderOwner]) {
    jsonDict[@".tag"] = @"folder_owner";
  } else if ([valueObj isGroupAccess]) {
    jsonDict[@".tag"] = @"group_access";
  } else if ([valueObj isTeamFolder]) {
    jsonDict[@".tag"] = @"team_folder";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGRemoveFolderMemberError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGRemoveFolderMemberError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"member_error"]) {
    DBSHARINGSharedFolderMemberError *memberError =
        [DBSHARINGSharedFolderMemberErrorSerializer deserialize:valueDict[@"member_error"]];
    return [[DBSHARINGRemoveFolderMemberError alloc] initWithMemberError:memberError];
  } else if ([tag isEqualToString:@"folder_owner"]) {
    return [[DBSHARINGRemoveFolderMemberError alloc] initWithFolderOwner];
  } else if ([tag isEqualToString:@"group_access"]) {
    return [[DBSHARINGRemoveFolderMemberError alloc] initWithGroupAccess];
  } else if ([tag isEqualToString:@"team_folder"]) {
    return [[DBSHARINGRemoveFolderMemberError alloc] initWithTeamFolder];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGRemoveFolderMemberError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGRemoveFolderMemberError alloc] initWithOther];
  } else {
    return [[DBSHARINGRemoveFolderMemberError alloc] initWithOther];
  }
}
@end

#import "DBASYNCPollResultBase.h"
#import "DBSHARINGMemberAccessLevelResult.h"
#import "DBSHARINGRemoveFolderMemberError.h"
#import "DBSHARINGRemoveMemberJobStatus.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRemoveMemberJobStatus

@synthesize complete = _complete;
@synthesize failed = _failed;

#pragma mark - Constructors

- (instancetype)initWithInProgress {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveMemberJobStatusInProgress;
  }
  return self;
}

- (instancetype)initWithComplete:(DBSHARINGMemberAccessLevelResult *)complete {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveMemberJobStatusComplete;
    _complete = complete;
  }
  return self;
}

- (instancetype)initWithFailed:(DBSHARINGRemoveFolderMemberError *)failed {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRemoveMemberJobStatusFailed;
    _failed = failed;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGMemberAccessLevelResult *)complete {
  if (![self isComplete]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGRemoveMemberJobStatusComplete, but was %@.", [self tagName]];
  }
  return _complete;
}

- (DBSHARINGRemoveFolderMemberError *)failed {
  if (![self isFailed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGRemoveMemberJobStatusFailed, but was %@.", [self tagName]];
  }
  return _failed;
}

#pragma mark - Tag state methods

- (BOOL)isInProgress {
  return _tag == DBSHARINGRemoveMemberJobStatusInProgress;
}

- (BOOL)isComplete {
  return _tag == DBSHARINGRemoveMemberJobStatusComplete;
}

- (BOOL)isFailed {
  return _tag == DBSHARINGRemoveMemberJobStatusFailed;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGRemoveMemberJobStatusInProgress:
    return @"DBSHARINGRemoveMemberJobStatusInProgress";
  case DBSHARINGRemoveMemberJobStatusComplete:
    return @"DBSHARINGRemoveMemberJobStatusComplete";
  case DBSHARINGRemoveMemberJobStatusFailed:
    return @"DBSHARINGRemoveMemberJobStatusFailed";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRemoveMemberJobStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRemoveMemberJobStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRemoveMemberJobStatusSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRemoveMemberJobStatusSerializer

+ (NSDictionary *)serialize:(DBSHARINGRemoveMemberJobStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInProgress]) {
    jsonDict[@".tag"] = @"in_progress";
  } else if ([valueObj isComplete]) {
    jsonDict[@"complete"] = [[DBSHARINGMemberAccessLevelResultSerializer serialize:valueObj.complete] mutableCopy];
    jsonDict[@".tag"] = @"complete";
  } else if ([valueObj isFailed]) {
    jsonDict[@"failed"] = [[DBSHARINGRemoveFolderMemberErrorSerializer serialize:valueObj.failed] mutableCopy];
    jsonDict[@".tag"] = @"failed";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGRemoveMemberJobStatus *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"in_progress"]) {
    return [[DBSHARINGRemoveMemberJobStatus alloc] initWithInProgress];
  } else if ([tag isEqualToString:@"complete"]) {
    DBSHARINGMemberAccessLevelResult *complete = [DBSHARINGMemberAccessLevelResultSerializer deserialize:valueDict];
    return [[DBSHARINGRemoveMemberJobStatus alloc] initWithComplete:complete];
  } else if ([tag isEqualToString:@"failed"]) {
    DBSHARINGRemoveFolderMemberError *failed =
        [DBSHARINGRemoveFolderMemberErrorSerializer deserialize:valueDict[@"failed"]];
    return [[DBSHARINGRemoveMemberJobStatus alloc] initWithFailed:failed];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}
@end

#import "DBSHARINGRequestedVisibility.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRequestedVisibility

#pragma mark - Constructors

- (instancetype)initWithPublic {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRequestedVisibilityPublic;
  }
  return self;
}

- (instancetype)initWithTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRequestedVisibilityTeamOnly;
  }
  return self;
}

- (instancetype)initWithPassword {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRequestedVisibilityPassword;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isPublic {
  return _tag == DBSHARINGRequestedVisibilityPublic;
}

- (BOOL)isTeamOnly {
  return _tag == DBSHARINGRequestedVisibilityTeamOnly;
}

- (BOOL)isPassword {
  return _tag == DBSHARINGRequestedVisibilityPassword;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGRequestedVisibilityPublic:
    return @"DBSHARINGRequestedVisibilityPublic";
  case DBSHARINGRequestedVisibilityTeamOnly:
    return @"DBSHARINGRequestedVisibilityTeamOnly";
  case DBSHARINGRequestedVisibilityPassword:
    return @"DBSHARINGRequestedVisibilityPassword";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRequestedVisibilitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRequestedVisibilitySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRequestedVisibilitySerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRequestedVisibilitySerializer

+ (NSDictionary *)serialize:(DBSHARINGRequestedVisibility *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPublic]) {
    jsonDict[@".tag"] = @"public";
  } else if ([valueObj isTeamOnly]) {
    jsonDict[@".tag"] = @"team_only";
  } else if ([valueObj isPassword]) {
    jsonDict[@".tag"] = @"password";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGRequestedVisibility *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"public"]) {
    return [[DBSHARINGRequestedVisibility alloc] initWithPublic];
  } else if ([tag isEqualToString:@"team_only"]) {
    return [[DBSHARINGRequestedVisibility alloc] initWithTeamOnly];
  } else if ([tag isEqualToString:@"password"]) {
    return [[DBSHARINGRequestedVisibility alloc] initWithPassword];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}
@end

#import "DBSHARINGRequestedVisibility.h"
#import "DBSHARINGResolvedVisibility.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGResolvedVisibility

#pragma mark - Constructors

- (instancetype)initWithPublic {
  self = [super init];
  if (self) {
    _tag = DBSHARINGResolvedVisibilityPublic;
  }
  return self;
}

- (instancetype)initWithTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBSHARINGResolvedVisibilityTeamOnly;
  }
  return self;
}

- (instancetype)initWithPassword {
  self = [super init];
  if (self) {
    _tag = DBSHARINGResolvedVisibilityPassword;
  }
  return self;
}

- (instancetype)initWithTeamAndPassword {
  self = [super init];
  if (self) {
    _tag = DBSHARINGResolvedVisibilityTeamAndPassword;
  }
  return self;
}

- (instancetype)initWithSharedFolderOnly {
  self = [super init];
  if (self) {
    _tag = DBSHARINGResolvedVisibilitySharedFolderOnly;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGResolvedVisibilityOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isPublic {
  return _tag == DBSHARINGResolvedVisibilityPublic;
}

- (BOOL)isTeamOnly {
  return _tag == DBSHARINGResolvedVisibilityTeamOnly;
}

- (BOOL)isPassword {
  return _tag == DBSHARINGResolvedVisibilityPassword;
}

- (BOOL)isTeamAndPassword {
  return _tag == DBSHARINGResolvedVisibilityTeamAndPassword;
}

- (BOOL)isSharedFolderOnly {
  return _tag == DBSHARINGResolvedVisibilitySharedFolderOnly;
}

- (BOOL)isOther {
  return _tag == DBSHARINGResolvedVisibilityOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGResolvedVisibilityPublic:
    return @"DBSHARINGResolvedVisibilityPublic";
  case DBSHARINGResolvedVisibilityTeamOnly:
    return @"DBSHARINGResolvedVisibilityTeamOnly";
  case DBSHARINGResolvedVisibilityPassword:
    return @"DBSHARINGResolvedVisibilityPassword";
  case DBSHARINGResolvedVisibilityTeamAndPassword:
    return @"DBSHARINGResolvedVisibilityTeamAndPassword";
  case DBSHARINGResolvedVisibilitySharedFolderOnly:
    return @"DBSHARINGResolvedVisibilitySharedFolderOnly";
  case DBSHARINGResolvedVisibilityOther:
    return @"DBSHARINGResolvedVisibilityOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGResolvedVisibilitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGResolvedVisibilitySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGResolvedVisibilitySerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGResolvedVisibilitySerializer

+ (NSDictionary *)serialize:(DBSHARINGResolvedVisibility *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPublic]) {
    jsonDict[@".tag"] = @"public";
  } else if ([valueObj isTeamOnly]) {
    jsonDict[@".tag"] = @"team_only";
  } else if ([valueObj isPassword]) {
    jsonDict[@".tag"] = @"password";
  } else if ([valueObj isTeamAndPassword]) {
    jsonDict[@".tag"] = @"team_and_password";
  } else if ([valueObj isSharedFolderOnly]) {
    jsonDict[@".tag"] = @"shared_folder_only";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGResolvedVisibility *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"public"]) {
    return [[DBSHARINGResolvedVisibility alloc] initWithPublic];
  } else if ([tag isEqualToString:@"team_only"]) {
    return [[DBSHARINGResolvedVisibility alloc] initWithTeamOnly];
  } else if ([tag isEqualToString:@"password"]) {
    return [[DBSHARINGResolvedVisibility alloc] initWithPassword];
  } else if ([tag isEqualToString:@"team_and_password"]) {
    return [[DBSHARINGResolvedVisibility alloc] initWithTeamAndPassword];
  } else if ([tag isEqualToString:@"shared_folder_only"]) {
    return [[DBSHARINGResolvedVisibility alloc] initWithSharedFolderOnly];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGResolvedVisibility alloc] initWithOther];
  } else {
    return [[DBSHARINGResolvedVisibility alloc] initWithOther];
  }
}
@end

#import "DBSHARINGRevokeSharedLinkArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRevokeSharedLinkArg

#pragma mark - Constructors

- (instancetype)initWithUrl:(NSString *)url {

  self = [super init];
  if (self) {
    _url = url;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRevokeSharedLinkArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRevokeSharedLinkArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRevokeSharedLinkArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRevokeSharedLinkArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGRevokeSharedLinkArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"url"] = valueObj.url;

  return jsonDict;
}

+ (DBSHARINGRevokeSharedLinkArg *)deserialize:(NSDictionary *)valueDict {
  NSString *url = valueDict[@"url"];

  return [[DBSHARINGRevokeSharedLinkArg alloc] initWithUrl:url];
}

@end

#import "DBSHARINGRevokeSharedLinkError.h"
#import "DBSHARINGSharedLinkError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGRevokeSharedLinkError

#pragma mark - Constructors

- (instancetype)initWithSharedLinkNotFound {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRevokeSharedLinkErrorSharedLinkNotFound;
  }
  return self;
}

- (instancetype)initWithSharedLinkAccessDenied {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRevokeSharedLinkErrorSharedLinkAccessDenied;
  }
  return self;
}

- (instancetype)initWithUnsupportedLinkType {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRevokeSharedLinkErrorUnsupportedLinkType;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRevokeSharedLinkErrorOther;
  }
  return self;
}

- (instancetype)initWithSharedLinkMalformed {
  self = [super init];
  if (self) {
    _tag = DBSHARINGRevokeSharedLinkErrorSharedLinkMalformed;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isSharedLinkNotFound {
  return _tag == DBSHARINGRevokeSharedLinkErrorSharedLinkNotFound;
}

- (BOOL)isSharedLinkAccessDenied {
  return _tag == DBSHARINGRevokeSharedLinkErrorSharedLinkAccessDenied;
}

- (BOOL)isUnsupportedLinkType {
  return _tag == DBSHARINGRevokeSharedLinkErrorUnsupportedLinkType;
}

- (BOOL)isOther {
  return _tag == DBSHARINGRevokeSharedLinkErrorOther;
}

- (BOOL)isSharedLinkMalformed {
  return _tag == DBSHARINGRevokeSharedLinkErrorSharedLinkMalformed;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGRevokeSharedLinkErrorSharedLinkNotFound:
    return @"DBSHARINGRevokeSharedLinkErrorSharedLinkNotFound";
  case DBSHARINGRevokeSharedLinkErrorSharedLinkAccessDenied:
    return @"DBSHARINGRevokeSharedLinkErrorSharedLinkAccessDenied";
  case DBSHARINGRevokeSharedLinkErrorUnsupportedLinkType:
    return @"DBSHARINGRevokeSharedLinkErrorUnsupportedLinkType";
  case DBSHARINGRevokeSharedLinkErrorOther:
    return @"DBSHARINGRevokeSharedLinkErrorOther";
  case DBSHARINGRevokeSharedLinkErrorSharedLinkMalformed:
    return @"DBSHARINGRevokeSharedLinkErrorSharedLinkMalformed";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGRevokeSharedLinkErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGRevokeSharedLinkErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGRevokeSharedLinkErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGRevokeSharedLinkErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGRevokeSharedLinkError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSharedLinkNotFound]) {
    jsonDict[@".tag"] = @"shared_link_not_found";
  } else if ([valueObj isSharedLinkAccessDenied]) {
    jsonDict[@".tag"] = @"shared_link_access_denied";
  } else if ([valueObj isUnsupportedLinkType]) {
    jsonDict[@".tag"] = @"unsupported_link_type";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSharedLinkMalformed]) {
    jsonDict[@".tag"] = @"shared_link_malformed";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGRevokeSharedLinkError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"shared_link_not_found"]) {
    return [[DBSHARINGRevokeSharedLinkError alloc] initWithSharedLinkNotFound];
  } else if ([tag isEqualToString:@"shared_link_access_denied"]) {
    return [[DBSHARINGRevokeSharedLinkError alloc] initWithSharedLinkAccessDenied];
  } else if ([tag isEqualToString:@"unsupported_link_type"]) {
    return [[DBSHARINGRevokeSharedLinkError alloc] initWithUnsupportedLinkType];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGRevokeSharedLinkError alloc] initWithOther];
  } else if ([tag isEqualToString:@"shared_link_malformed"]) {
    return [[DBSHARINGRevokeSharedLinkError alloc] initWithSharedLinkMalformed];
  } else {
    return [[DBSHARINGRevokeSharedLinkError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGAclUpdatePolicy.h"
#import "DBSHARINGMemberPolicy.h"
#import "DBSHARINGShareFolderArg.h"
#import "DBSHARINGSharedLinkPolicy.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGShareFolderArg

#pragma mark - Constructors

- (instancetype)initWithPath:(NSString *)path
                memberPolicy:(DBSHARINGMemberPolicy *)memberPolicy
             aclUpdatePolicy:(DBSHARINGAclUpdatePolicy *)aclUpdatePolicy
            sharedLinkPolicy:(DBSHARINGSharedLinkPolicy *)sharedLinkPolicy
                  forceAsync:(NSNumber *)forceAsync {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"(/(.|[\\r\\n])*)|(ns:[0-9]+(/.*)?)"](path);

  self = [super init];
  if (self) {
    _path = path;
    _memberPolicy = memberPolicy ?: [[DBSHARINGMemberPolicy alloc] initWithAnyone];
    _aclUpdatePolicy = aclUpdatePolicy ?: [[DBSHARINGAclUpdatePolicy alloc] initWithOwner];
    _sharedLinkPolicy = sharedLinkPolicy ?: [[DBSHARINGSharedLinkPolicy alloc] initWithAnyone];
    _forceAsync = forceAsync ?: @NO;
  }
  return self;
}

- (instancetype)initWithPath:(NSString *)path {
  return [self initWithPath:path memberPolicy:nil aclUpdatePolicy:nil sharedLinkPolicy:nil forceAsync:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGShareFolderArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGShareFolderArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGShareFolderArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGShareFolderArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGShareFolderArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"path"] = valueObj.path;
  jsonDict[@"member_policy"] = [DBSHARINGMemberPolicySerializer serialize:valueObj.memberPolicy];
  jsonDict[@"acl_update_policy"] = [DBSHARINGAclUpdatePolicySerializer serialize:valueObj.aclUpdatePolicy];
  jsonDict[@"shared_link_policy"] = [DBSHARINGSharedLinkPolicySerializer serialize:valueObj.sharedLinkPolicy];
  jsonDict[@"force_async"] = valueObj.forceAsync;

  return jsonDict;
}

+ (DBSHARINGShareFolderArg *)deserialize:(NSDictionary *)valueDict {
  NSString *path = valueDict[@"path"];
  DBSHARINGMemberPolicy *memberPolicy = valueDict[@"member_policy"]
                                            ? [DBSHARINGMemberPolicySerializer deserialize:valueDict[@"member_policy"]]
                                            : [[DBSHARINGMemberPolicy alloc] initWithAnyone];
  DBSHARINGAclUpdatePolicy *aclUpdatePolicy =
      valueDict[@"acl_update_policy"] ? [DBSHARINGAclUpdatePolicySerializer deserialize:valueDict[@"acl_update_policy"]]
                                      : [[DBSHARINGAclUpdatePolicy alloc] initWithOwner];
  DBSHARINGSharedLinkPolicy *sharedLinkPolicy =
      valueDict[@"shared_link_policy"]
          ? [DBSHARINGSharedLinkPolicySerializer deserialize:valueDict[@"shared_link_policy"]]
          : [[DBSHARINGSharedLinkPolicy alloc] initWithAnyone];
  NSNumber *forceAsync = valueDict[@"force_async"] ?: @NO;

  return [[DBSHARINGShareFolderArg alloc] initWithPath:path
                                          memberPolicy:memberPolicy
                                       aclUpdatePolicy:aclUpdatePolicy
                                      sharedLinkPolicy:sharedLinkPolicy
                                            forceAsync:forceAsync];
}

@end

#import "DBSHARINGShareFolderErrorBase.h"
#import "DBSHARINGSharePathError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGShareFolderErrorBase

@synthesize badPath = _badPath;

#pragma mark - Constructors

- (instancetype)initWithEmailUnverified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorBaseEmailUnverified;
  }
  return self;
}

- (instancetype)initWithBadPath:(DBSHARINGSharePathError *)badPath {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorBaseBadPath;
    _badPath = badPath;
  }
  return self;
}

- (instancetype)initWithTeamPolicyDisallowsMemberPolicy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorBaseTeamPolicyDisallowsMemberPolicy;
  }
  return self;
}

- (instancetype)initWithDisallowedSharedLinkPolicy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorBaseDisallowedSharedLinkPolicy;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorBaseOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharePathError *)badPath {
  if (![self isBadPath]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGShareFolderErrorBaseBadPath, but was %@.", [self tagName]];
  }
  return _badPath;
}

#pragma mark - Tag state methods

- (BOOL)isEmailUnverified {
  return _tag == DBSHARINGShareFolderErrorBaseEmailUnverified;
}

- (BOOL)isBadPath {
  return _tag == DBSHARINGShareFolderErrorBaseBadPath;
}

- (BOOL)isTeamPolicyDisallowsMemberPolicy {
  return _tag == DBSHARINGShareFolderErrorBaseTeamPolicyDisallowsMemberPolicy;
}

- (BOOL)isDisallowedSharedLinkPolicy {
  return _tag == DBSHARINGShareFolderErrorBaseDisallowedSharedLinkPolicy;
}

- (BOOL)isOther {
  return _tag == DBSHARINGShareFolderErrorBaseOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGShareFolderErrorBaseEmailUnverified:
    return @"DBSHARINGShareFolderErrorBaseEmailUnverified";
  case DBSHARINGShareFolderErrorBaseBadPath:
    return @"DBSHARINGShareFolderErrorBaseBadPath";
  case DBSHARINGShareFolderErrorBaseTeamPolicyDisallowsMemberPolicy:
    return @"DBSHARINGShareFolderErrorBaseTeamPolicyDisallowsMemberPolicy";
  case DBSHARINGShareFolderErrorBaseDisallowedSharedLinkPolicy:
    return @"DBSHARINGShareFolderErrorBaseDisallowedSharedLinkPolicy";
  case DBSHARINGShareFolderErrorBaseOther:
    return @"DBSHARINGShareFolderErrorBaseOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGShareFolderErrorBaseSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGShareFolderErrorBaseSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGShareFolderErrorBaseSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGShareFolderErrorBaseSerializer

+ (NSDictionary *)serialize:(DBSHARINGShareFolderErrorBase *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEmailUnverified]) {
    jsonDict[@".tag"] = @"email_unverified";
  } else if ([valueObj isBadPath]) {
    jsonDict[@"bad_path"] = [[DBSHARINGSharePathErrorSerializer serialize:valueObj.badPath] mutableCopy];
    jsonDict[@".tag"] = @"bad_path";
  } else if ([valueObj isTeamPolicyDisallowsMemberPolicy]) {
    jsonDict[@".tag"] = @"team_policy_disallows_member_policy";
  } else if ([valueObj isDisallowedSharedLinkPolicy]) {
    jsonDict[@".tag"] = @"disallowed_shared_link_policy";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGShareFolderErrorBase *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"email_unverified"]) {
    return [[DBSHARINGShareFolderErrorBase alloc] initWithEmailUnverified];
  } else if ([tag isEqualToString:@"bad_path"]) {
    DBSHARINGSharePathError *badPath = [DBSHARINGSharePathErrorSerializer deserialize:valueDict[@"bad_path"]];
    return [[DBSHARINGShareFolderErrorBase alloc] initWithBadPath:badPath];
  } else if ([tag isEqualToString:@"team_policy_disallows_member_policy"]) {
    return [[DBSHARINGShareFolderErrorBase alloc] initWithTeamPolicyDisallowsMemberPolicy];
  } else if ([tag isEqualToString:@"disallowed_shared_link_policy"]) {
    return [[DBSHARINGShareFolderErrorBase alloc] initWithDisallowedSharedLinkPolicy];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGShareFolderErrorBase alloc] initWithOther];
  } else {
    return [[DBSHARINGShareFolderErrorBase alloc] initWithOther];
  }
}
@end

#import "DBSHARINGShareFolderError.h"
#import "DBSHARINGShareFolderErrorBase.h"
#import "DBSHARINGSharePathError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGShareFolderError

@synthesize badPath = _badPath;

#pragma mark - Constructors

- (instancetype)initWithEmailUnverified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorEmailUnverified;
  }
  return self;
}

- (instancetype)initWithBadPath:(DBSHARINGSharePathError *)badPath {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorBadPath;
    _badPath = badPath;
  }
  return self;
}

- (instancetype)initWithTeamPolicyDisallowsMemberPolicy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorTeamPolicyDisallowsMemberPolicy;
  }
  return self;
}

- (instancetype)initWithDisallowedSharedLinkPolicy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorDisallowedSharedLinkPolicy;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorOther;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderErrorNoPermission;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharePathError *)badPath {
  if (![self isBadPath]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGShareFolderErrorBadPath, but was %@.", [self tagName]];
  }
  return _badPath;
}

#pragma mark - Tag state methods

- (BOOL)isEmailUnverified {
  return _tag == DBSHARINGShareFolderErrorEmailUnverified;
}

- (BOOL)isBadPath {
  return _tag == DBSHARINGShareFolderErrorBadPath;
}

- (BOOL)isTeamPolicyDisallowsMemberPolicy {
  return _tag == DBSHARINGShareFolderErrorTeamPolicyDisallowsMemberPolicy;
}

- (BOOL)isDisallowedSharedLinkPolicy {
  return _tag == DBSHARINGShareFolderErrorDisallowedSharedLinkPolicy;
}

- (BOOL)isOther {
  return _tag == DBSHARINGShareFolderErrorOther;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGShareFolderErrorNoPermission;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGShareFolderErrorEmailUnverified:
    return @"DBSHARINGShareFolderErrorEmailUnverified";
  case DBSHARINGShareFolderErrorBadPath:
    return @"DBSHARINGShareFolderErrorBadPath";
  case DBSHARINGShareFolderErrorTeamPolicyDisallowsMemberPolicy:
    return @"DBSHARINGShareFolderErrorTeamPolicyDisallowsMemberPolicy";
  case DBSHARINGShareFolderErrorDisallowedSharedLinkPolicy:
    return @"DBSHARINGShareFolderErrorDisallowedSharedLinkPolicy";
  case DBSHARINGShareFolderErrorOther:
    return @"DBSHARINGShareFolderErrorOther";
  case DBSHARINGShareFolderErrorNoPermission:
    return @"DBSHARINGShareFolderErrorNoPermission";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGShareFolderErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGShareFolderErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGShareFolderErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGShareFolderErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGShareFolderError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEmailUnverified]) {
    jsonDict[@".tag"] = @"email_unverified";
  } else if ([valueObj isBadPath]) {
    jsonDict[@"bad_path"] = [[DBSHARINGSharePathErrorSerializer serialize:valueObj.badPath] mutableCopy];
    jsonDict[@".tag"] = @"bad_path";
  } else if ([valueObj isTeamPolicyDisallowsMemberPolicy]) {
    jsonDict[@".tag"] = @"team_policy_disallows_member_policy";
  } else if ([valueObj isDisallowedSharedLinkPolicy]) {
    jsonDict[@".tag"] = @"disallowed_shared_link_policy";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGShareFolderError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"email_unverified"]) {
    return [[DBSHARINGShareFolderError alloc] initWithEmailUnverified];
  } else if ([tag isEqualToString:@"bad_path"]) {
    DBSHARINGSharePathError *badPath = [DBSHARINGSharePathErrorSerializer deserialize:valueDict[@"bad_path"]];
    return [[DBSHARINGShareFolderError alloc] initWithBadPath:badPath];
  } else if ([tag isEqualToString:@"team_policy_disallows_member_policy"]) {
    return [[DBSHARINGShareFolderError alloc] initWithTeamPolicyDisallowsMemberPolicy];
  } else if ([tag isEqualToString:@"disallowed_shared_link_policy"]) {
    return [[DBSHARINGShareFolderError alloc] initWithDisallowedSharedLinkPolicy];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGShareFolderError alloc] initWithOther];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGShareFolderError alloc] initWithNoPermission];
  } else {
    return [[DBSHARINGShareFolderError alloc] initWithOther];
  }
}
@end

#import "DBASYNCPollResultBase.h"
#import "DBSHARINGShareFolderError.h"
#import "DBSHARINGShareFolderJobStatus.h"
#import "DBSHARINGSharedFolderMetadata.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGShareFolderJobStatus

@synthesize complete = _complete;
@synthesize failed = _failed;

#pragma mark - Constructors

- (instancetype)initWithInProgress {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderJobStatusInProgress;
  }
  return self;
}

- (instancetype)initWithComplete:(DBSHARINGSharedFolderMetadata *)complete {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderJobStatusComplete;
    _complete = complete;
  }
  return self;
}

- (instancetype)initWithFailed:(DBSHARINGShareFolderError *)failed {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderJobStatusFailed;
    _failed = failed;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderMetadata *)complete {
  if (![self isComplete]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGShareFolderJobStatusComplete, but was %@.", [self tagName]];
  }
  return _complete;
}

- (DBSHARINGShareFolderError *)failed {
  if (![self isFailed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGShareFolderJobStatusFailed, but was %@.", [self tagName]];
  }
  return _failed;
}

#pragma mark - Tag state methods

- (BOOL)isInProgress {
  return _tag == DBSHARINGShareFolderJobStatusInProgress;
}

- (BOOL)isComplete {
  return _tag == DBSHARINGShareFolderJobStatusComplete;
}

- (BOOL)isFailed {
  return _tag == DBSHARINGShareFolderJobStatusFailed;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGShareFolderJobStatusInProgress:
    return @"DBSHARINGShareFolderJobStatusInProgress";
  case DBSHARINGShareFolderJobStatusComplete:
    return @"DBSHARINGShareFolderJobStatusComplete";
  case DBSHARINGShareFolderJobStatusFailed:
    return @"DBSHARINGShareFolderJobStatusFailed";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGShareFolderJobStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGShareFolderJobStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGShareFolderJobStatusSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGShareFolderJobStatusSerializer

+ (NSDictionary *)serialize:(DBSHARINGShareFolderJobStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInProgress]) {
    jsonDict[@".tag"] = @"in_progress";
  } else if ([valueObj isComplete]) {
    jsonDict[@"complete"] = [[DBSHARINGSharedFolderMetadataSerializer serialize:valueObj.complete] mutableCopy];
    jsonDict[@".tag"] = @"complete";
  } else if ([valueObj isFailed]) {
    jsonDict[@"failed"] = [[DBSHARINGShareFolderErrorSerializer serialize:valueObj.failed] mutableCopy];
    jsonDict[@".tag"] = @"failed";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGShareFolderJobStatus *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"in_progress"]) {
    return [[DBSHARINGShareFolderJobStatus alloc] initWithInProgress];
  } else if ([tag isEqualToString:@"complete"]) {
    DBSHARINGSharedFolderMetadata *complete = [DBSHARINGSharedFolderMetadataSerializer deserialize:valueDict];
    return [[DBSHARINGShareFolderJobStatus alloc] initWithComplete:complete];
  } else if ([tag isEqualToString:@"failed"]) {
    DBSHARINGShareFolderError *failed = [DBSHARINGShareFolderErrorSerializer deserialize:valueDict[@"failed"]];
    return [[DBSHARINGShareFolderJobStatus alloc] initWithFailed:failed];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}
@end

#import "DBASYNCLaunchResultBase.h"
#import "DBSHARINGShareFolderLaunch.h"
#import "DBSHARINGSharedFolderMetadata.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGShareFolderLaunch

@synthesize asyncJobId = _asyncJobId;
@synthesize complete = _complete;

#pragma mark - Constructors

- (instancetype)initWithAsyncJobId:(NSString *)asyncJobId {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderLaunchAsyncJobId;
    _asyncJobId = asyncJobId;
  }
  return self;
}

- (instancetype)initWithComplete:(DBSHARINGSharedFolderMetadata *)complete {
  self = [super init];
  if (self) {
    _tag = DBSHARINGShareFolderLaunchComplete;
    _complete = complete;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)asyncJobId {
  if (![self isAsyncJobId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGShareFolderLaunchAsyncJobId, but was %@.", [self tagName]];
  }
  return _asyncJobId;
}

- (DBSHARINGSharedFolderMetadata *)complete {
  if (![self isComplete]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGShareFolderLaunchComplete, but was %@.", [self tagName]];
  }
  return _complete;
}

#pragma mark - Tag state methods

- (BOOL)isAsyncJobId {
  return _tag == DBSHARINGShareFolderLaunchAsyncJobId;
}

- (BOOL)isComplete {
  return _tag == DBSHARINGShareFolderLaunchComplete;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGShareFolderLaunchAsyncJobId:
    return @"DBSHARINGShareFolderLaunchAsyncJobId";
  case DBSHARINGShareFolderLaunchComplete:
    return @"DBSHARINGShareFolderLaunchComplete";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGShareFolderLaunchSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGShareFolderLaunchSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGShareFolderLaunchSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGShareFolderLaunchSerializer

+ (NSDictionary *)serialize:(DBSHARINGShareFolderLaunch *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAsyncJobId]) {
    jsonDict[@"async_job_id"] = valueObj.asyncJobId;
    jsonDict[@".tag"] = @"async_job_id";
  } else if ([valueObj isComplete]) {
    jsonDict[@"complete"] = [[DBSHARINGSharedFolderMetadataSerializer serialize:valueObj.complete] mutableCopy];
    jsonDict[@".tag"] = @"complete";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGShareFolderLaunch *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"async_job_id"]) {
    NSString *asyncJobId = valueDict[@"async_job_id"];
    return [[DBSHARINGShareFolderLaunch alloc] initWithAsyncJobId:asyncJobId];
  } else if ([tag isEqualToString:@"complete"]) {
    DBSHARINGSharedFolderMetadata *complete = [DBSHARINGSharedFolderMetadataSerializer deserialize:valueDict];
    return [[DBSHARINGShareFolderLaunch alloc] initWithComplete:complete];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}
@end

#import "DBFILESPathRootError.h"
#import "DBSHARINGSharePathError.h"
#import "DBSHARINGSharedFolderMetadata.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharePathError

@synthesize alreadyShared = _alreadyShared;
@synthesize invalidPathRoot = _invalidPathRoot;

#pragma mark - Constructors

- (instancetype)initWithIsFile {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorIsFile;
  }
  return self;
}

- (instancetype)initWithInsideSharedFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorInsideSharedFolder;
  }
  return self;
}

- (instancetype)initWithContainsSharedFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorContainsSharedFolder;
  }
  return self;
}

- (instancetype)initWithContainsAppFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorContainsAppFolder;
  }
  return self;
}

- (instancetype)initWithContainsTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorContainsTeamFolder;
  }
  return self;
}

- (instancetype)initWithIsAppFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorIsAppFolder;
  }
  return self;
}

- (instancetype)initWithInsideAppFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorInsideAppFolder;
  }
  return self;
}

- (instancetype)initWithIsPublicFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorIsPublicFolder;
  }
  return self;
}

- (instancetype)initWithInsidePublicFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorInsidePublicFolder;
  }
  return self;
}

- (instancetype)initWithAlreadyShared:(DBSHARINGSharedFolderMetadata *)alreadyShared {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorAlreadyShared;
    _alreadyShared = alreadyShared;
  }
  return self;
}

- (instancetype)initWithInvalidPath {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorInvalidPath;
  }
  return self;
}

- (instancetype)initWithIsOsxPackage {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorIsOsxPackage;
  }
  return self;
}

- (instancetype)initWithInsideOsxPackage {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorInsideOsxPackage;
  }
  return self;
}

- (instancetype)initWithInvalidPathRoot:(DBFILESPathRootError *)invalidPathRoot {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorInvalidPathRoot;
    _invalidPathRoot = invalidPathRoot;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharePathErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderMetadata *)alreadyShared {
  if (![self isAlreadyShared]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGSharePathErrorAlreadyShared, but was %@.", [self tagName]];
  }
  return _alreadyShared;
}

- (DBFILESPathRootError *)invalidPathRoot {
  if (![self isInvalidPathRoot]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGSharePathErrorInvalidPathRoot, but was %@.", [self tagName]];
  }
  return _invalidPathRoot;
}

#pragma mark - Tag state methods

- (BOOL)isIsFile {
  return _tag == DBSHARINGSharePathErrorIsFile;
}

- (BOOL)isInsideSharedFolder {
  return _tag == DBSHARINGSharePathErrorInsideSharedFolder;
}

- (BOOL)isContainsSharedFolder {
  return _tag == DBSHARINGSharePathErrorContainsSharedFolder;
}

- (BOOL)isContainsAppFolder {
  return _tag == DBSHARINGSharePathErrorContainsAppFolder;
}

- (BOOL)isContainsTeamFolder {
  return _tag == DBSHARINGSharePathErrorContainsTeamFolder;
}

- (BOOL)isIsAppFolder {
  return _tag == DBSHARINGSharePathErrorIsAppFolder;
}

- (BOOL)isInsideAppFolder {
  return _tag == DBSHARINGSharePathErrorInsideAppFolder;
}

- (BOOL)isIsPublicFolder {
  return _tag == DBSHARINGSharePathErrorIsPublicFolder;
}

- (BOOL)isInsidePublicFolder {
  return _tag == DBSHARINGSharePathErrorInsidePublicFolder;
}

- (BOOL)isAlreadyShared {
  return _tag == DBSHARINGSharePathErrorAlreadyShared;
}

- (BOOL)isInvalidPath {
  return _tag == DBSHARINGSharePathErrorInvalidPath;
}

- (BOOL)isIsOsxPackage {
  return _tag == DBSHARINGSharePathErrorIsOsxPackage;
}

- (BOOL)isInsideOsxPackage {
  return _tag == DBSHARINGSharePathErrorInsideOsxPackage;
}

- (BOOL)isInvalidPathRoot {
  return _tag == DBSHARINGSharePathErrorInvalidPathRoot;
}

- (BOOL)isOther {
  return _tag == DBSHARINGSharePathErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGSharePathErrorIsFile:
    return @"DBSHARINGSharePathErrorIsFile";
  case DBSHARINGSharePathErrorInsideSharedFolder:
    return @"DBSHARINGSharePathErrorInsideSharedFolder";
  case DBSHARINGSharePathErrorContainsSharedFolder:
    return @"DBSHARINGSharePathErrorContainsSharedFolder";
  case DBSHARINGSharePathErrorContainsAppFolder:
    return @"DBSHARINGSharePathErrorContainsAppFolder";
  case DBSHARINGSharePathErrorContainsTeamFolder:
    return @"DBSHARINGSharePathErrorContainsTeamFolder";
  case DBSHARINGSharePathErrorIsAppFolder:
    return @"DBSHARINGSharePathErrorIsAppFolder";
  case DBSHARINGSharePathErrorInsideAppFolder:
    return @"DBSHARINGSharePathErrorInsideAppFolder";
  case DBSHARINGSharePathErrorIsPublicFolder:
    return @"DBSHARINGSharePathErrorIsPublicFolder";
  case DBSHARINGSharePathErrorInsidePublicFolder:
    return @"DBSHARINGSharePathErrorInsidePublicFolder";
  case DBSHARINGSharePathErrorAlreadyShared:
    return @"DBSHARINGSharePathErrorAlreadyShared";
  case DBSHARINGSharePathErrorInvalidPath:
    return @"DBSHARINGSharePathErrorInvalidPath";
  case DBSHARINGSharePathErrorIsOsxPackage:
    return @"DBSHARINGSharePathErrorIsOsxPackage";
  case DBSHARINGSharePathErrorInsideOsxPackage:
    return @"DBSHARINGSharePathErrorInsideOsxPackage";
  case DBSHARINGSharePathErrorInvalidPathRoot:
    return @"DBSHARINGSharePathErrorInvalidPathRoot";
  case DBSHARINGSharePathErrorOther:
    return @"DBSHARINGSharePathErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharePathErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharePathErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharePathErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharePathErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharePathError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isIsFile]) {
    jsonDict[@".tag"] = @"is_file";
  } else if ([valueObj isInsideSharedFolder]) {
    jsonDict[@".tag"] = @"inside_shared_folder";
  } else if ([valueObj isContainsSharedFolder]) {
    jsonDict[@".tag"] = @"contains_shared_folder";
  } else if ([valueObj isContainsAppFolder]) {
    jsonDict[@".tag"] = @"contains_app_folder";
  } else if ([valueObj isContainsTeamFolder]) {
    jsonDict[@".tag"] = @"contains_team_folder";
  } else if ([valueObj isIsAppFolder]) {
    jsonDict[@".tag"] = @"is_app_folder";
  } else if ([valueObj isInsideAppFolder]) {
    jsonDict[@".tag"] = @"inside_app_folder";
  } else if ([valueObj isIsPublicFolder]) {
    jsonDict[@".tag"] = @"is_public_folder";
  } else if ([valueObj isInsidePublicFolder]) {
    jsonDict[@".tag"] = @"inside_public_folder";
  } else if ([valueObj isAlreadyShared]) {
    jsonDict[@"already_shared"] =
        [[DBSHARINGSharedFolderMetadataSerializer serialize:valueObj.alreadyShared] mutableCopy];
    jsonDict[@".tag"] = @"already_shared";
  } else if ([valueObj isInvalidPath]) {
    jsonDict[@".tag"] = @"invalid_path";
  } else if ([valueObj isIsOsxPackage]) {
    jsonDict[@".tag"] = @"is_osx_package";
  } else if ([valueObj isInsideOsxPackage]) {
    jsonDict[@".tag"] = @"inside_osx_package";
  } else if ([valueObj isInvalidPathRoot]) {
    jsonDict[@"invalid_path_root"] = [[DBFILESPathRootErrorSerializer serialize:valueObj.invalidPathRoot] mutableCopy];
    jsonDict[@".tag"] = @"invalid_path_root";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGSharePathError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"is_file"]) {
    return [[DBSHARINGSharePathError alloc] initWithIsFile];
  } else if ([tag isEqualToString:@"inside_shared_folder"]) {
    return [[DBSHARINGSharePathError alloc] initWithInsideSharedFolder];
  } else if ([tag isEqualToString:@"contains_shared_folder"]) {
    return [[DBSHARINGSharePathError alloc] initWithContainsSharedFolder];
  } else if ([tag isEqualToString:@"contains_app_folder"]) {
    return [[DBSHARINGSharePathError alloc] initWithContainsAppFolder];
  } else if ([tag isEqualToString:@"contains_team_folder"]) {
    return [[DBSHARINGSharePathError alloc] initWithContainsTeamFolder];
  } else if ([tag isEqualToString:@"is_app_folder"]) {
    return [[DBSHARINGSharePathError alloc] initWithIsAppFolder];
  } else if ([tag isEqualToString:@"inside_app_folder"]) {
    return [[DBSHARINGSharePathError alloc] initWithInsideAppFolder];
  } else if ([tag isEqualToString:@"is_public_folder"]) {
    return [[DBSHARINGSharePathError alloc] initWithIsPublicFolder];
  } else if ([tag isEqualToString:@"inside_public_folder"]) {
    return [[DBSHARINGSharePathError alloc] initWithInsidePublicFolder];
  } else if ([tag isEqualToString:@"already_shared"]) {
    DBSHARINGSharedFolderMetadata *alreadyShared = [DBSHARINGSharedFolderMetadataSerializer deserialize:valueDict];
    return [[DBSHARINGSharePathError alloc] initWithAlreadyShared:alreadyShared];
  } else if ([tag isEqualToString:@"invalid_path"]) {
    return [[DBSHARINGSharePathError alloc] initWithInvalidPath];
  } else if ([tag isEqualToString:@"is_osx_package"]) {
    return [[DBSHARINGSharePathError alloc] initWithIsOsxPackage];
  } else if ([tag isEqualToString:@"inside_osx_package"]) {
    return [[DBSHARINGSharePathError alloc] initWithInsideOsxPackage];
  } else if ([tag isEqualToString:@"invalid_path_root"]) {
    DBFILESPathRootError *invalidPathRoot = [DBFILESPathRootErrorSerializer deserialize:valueDict];
    return [[DBSHARINGSharePathError alloc] initWithInvalidPathRoot:invalidPathRoot];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGSharePathError alloc] initWithOther];
  } else {
    return [[DBSHARINGSharePathError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGGroupMembershipInfo.h"
#import "DBSHARINGInviteeMembershipInfo.h"
#import "DBSHARINGSharedFileMembers.h"
#import "DBSHARINGUserMembershipInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharedFileMembers

#pragma mark - Constructors

- (instancetype)initWithUsers:(NSArray<DBSHARINGUserMembershipInfo *> *)users
                       groups:(NSArray<DBSHARINGGroupMembershipInfo *> *)groups
                     invitees:(NSArray<DBSHARINGInviteeMembershipInfo *> *)invitees
                       cursor:(NSString *)cursor {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](users);
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](groups);
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](invitees);

  self = [super init];
  if (self) {
    _users = users;
    _groups = groups;
    _invitees = invitees;
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initWithUsers:(NSArray<DBSHARINGUserMembershipInfo *> *)users
                       groups:(NSArray<DBSHARINGGroupMembershipInfo *> *)groups
                     invitees:(NSArray<DBSHARINGInviteeMembershipInfo *> *)invitees {
  return [self initWithUsers:users groups:groups invitees:invitees cursor:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedFileMembersSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedFileMembersSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedFileMembersSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedFileMembersSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedFileMembers *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"users"] = [DBArraySerializer serialize:valueObj.users
                                          withBlock:^id(id elem) {
                                            return [DBSHARINGUserMembershipInfoSerializer serialize:elem];
                                          }];
  jsonDict[@"groups"] = [DBArraySerializer serialize:valueObj.groups
                                           withBlock:^id(id elem) {
                                             return [DBSHARINGGroupMembershipInfoSerializer serialize:elem];
                                           }];
  jsonDict[@"invitees"] = [DBArraySerializer serialize:valueObj.invitees
                                             withBlock:^id(id elem) {
                                               return [DBSHARINGInviteeMembershipInfoSerializer serialize:elem];
                                             }];
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return jsonDict;
}

+ (DBSHARINGSharedFileMembers *)deserialize:(NSDictionary *)valueDict {
  NSArray<DBSHARINGUserMembershipInfo *> *users =
      [DBArraySerializer deserialize:valueDict[@"users"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGUserMembershipInfoSerializer deserialize:elem];
                           }];
  NSArray<DBSHARINGGroupMembershipInfo *> *groups =
      [DBArraySerializer deserialize:valueDict[@"groups"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGGroupMembershipInfoSerializer deserialize:elem];
                           }];
  NSArray<DBSHARINGInviteeMembershipInfo *> *invitees =
      [DBArraySerializer deserialize:valueDict[@"invitees"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGInviteeMembershipInfoSerializer deserialize:elem];
                           }];
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBSHARINGSharedFileMembers alloc] initWithUsers:users groups:groups invitees:invitees cursor:cursor];
}

@end

#import "DBSHARINGFilePermission.h"
#import "DBSHARINGFolderPolicy.h"
#import "DBSHARINGSharedFileMetadata.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBSHARINGSharedFileMetadata

#pragma mark - Constructors

- (instancetype)initWithPolicy:(DBSHARINGFolderPolicy *)policy
                    previewUrl:(NSString *)previewUrl
                          name:(NSString *)name
                           id_:(NSString *)id_
                   permissions:(NSArray<DBSHARINGFilePermission *> *)permissions
                     ownerTeam:(DBUSERSTeam *)ownerTeam
          parentSharedFolderId:(NSString *)parentSharedFolderId
                     pathLower:(NSString *)pathLower
                   pathDisplay:(NSString *)pathDisplay
                   timeInvited:(NSDate *)timeInvited {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"id:.*"](id_);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](permissions);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](
      parentSharedFolderId);

  self = [super init];
  if (self) {
    _policy = policy;
    _permissions = permissions;
    _ownerTeam = ownerTeam;
    _parentSharedFolderId = parentSharedFolderId;
    _previewUrl = previewUrl;
    _pathLower = pathLower;
    _pathDisplay = pathDisplay;
    _name = name;
    _id_ = id_;
    _timeInvited = timeInvited;
  }
  return self;
}

- (instancetype)initWithPolicy:(DBSHARINGFolderPolicy *)policy
                    previewUrl:(NSString *)previewUrl
                          name:(NSString *)name
                           id_:(NSString *)id_ {
  return [self initWithPolicy:policy
                   previewUrl:previewUrl
                         name:name
                          id_:id_
                  permissions:nil
                    ownerTeam:nil
         parentSharedFolderId:nil
                    pathLower:nil
                  pathDisplay:nil
                  timeInvited:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedFileMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedFileMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedFileMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedFileMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedFileMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"policy"] = [DBSHARINGFolderPolicySerializer serialize:valueObj.policy];
  jsonDict[@"preview_url"] = valueObj.previewUrl;
  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"id"] = valueObj.id_;
  if (valueObj.permissions) {
    jsonDict[@"permissions"] = [DBArraySerializer serialize:valueObj.permissions
                                                  withBlock:^id(id elem) {
                                                    return [DBSHARINGFilePermissionSerializer serialize:elem];
                                                  }];
  }
  if (valueObj.ownerTeam) {
    jsonDict[@"owner_team"] = [DBUSERSTeamSerializer serialize:valueObj.ownerTeam];
  }
  if (valueObj.parentSharedFolderId) {
    jsonDict[@"parent_shared_folder_id"] = valueObj.parentSharedFolderId;
  }
  if (valueObj.pathLower) {
    jsonDict[@"path_lower"] = valueObj.pathLower;
  }
  if (valueObj.pathDisplay) {
    jsonDict[@"path_display"] = valueObj.pathDisplay;
  }
  if (valueObj.timeInvited) {
    jsonDict[@"time_invited"] = [DBNSDateSerializer serialize:valueObj.timeInvited dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return jsonDict;
}

+ (DBSHARINGSharedFileMetadata *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGFolderPolicy *policy = [DBSHARINGFolderPolicySerializer deserialize:valueDict[@"policy"]];
  NSString *previewUrl = valueDict[@"preview_url"];
  NSString *name = valueDict[@"name"];
  NSString *id_ = valueDict[@"id"];
  NSArray<DBSHARINGFilePermission *> *permissions =
      valueDict[@"permissions"] ? [DBArraySerializer deserialize:valueDict[@"permissions"]
                                                       withBlock:^id(id elem) {
                                                         return [DBSHARINGFilePermissionSerializer deserialize:elem];
                                                       }]
                                : nil;
  DBUSERSTeam *ownerTeam =
      valueDict[@"owner_team"] ? [DBUSERSTeamSerializer deserialize:valueDict[@"owner_team"]] : nil;
  NSString *parentSharedFolderId = valueDict[@"parent_shared_folder_id"] ?: nil;
  NSString *pathLower = valueDict[@"path_lower"] ?: nil;
  NSString *pathDisplay = valueDict[@"path_display"] ?: nil;
  NSDate *timeInvited = valueDict[@"time_invited"] ? [DBNSDateSerializer deserialize:valueDict[@"time_invited"]
                                                                          dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                                                   : nil;

  return [[DBSHARINGSharedFileMetadata alloc] initWithPolicy:policy
                                                  previewUrl:previewUrl
                                                        name:name
                                                         id_:id_
                                                 permissions:permissions
                                                   ownerTeam:ownerTeam
                                        parentSharedFolderId:parentSharedFolderId
                                                   pathLower:pathLower
                                                 pathDisplay:pathDisplay
                                                 timeInvited:timeInvited];
}

@end

#import "DBSHARINGSharedFolderAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharedFolderAccessError

#pragma mark - Constructors

- (instancetype)initWithInvalidId {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedFolderAccessErrorInvalidId;
  }
  return self;
}

- (instancetype)initWithNotAMember {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedFolderAccessErrorNotAMember;
  }
  return self;
}

- (instancetype)initWithEmailUnverified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedFolderAccessErrorEmailUnverified;
  }
  return self;
}

- (instancetype)initWithUnmounted {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedFolderAccessErrorUnmounted;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedFolderAccessErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidId {
  return _tag == DBSHARINGSharedFolderAccessErrorInvalidId;
}

- (BOOL)isNotAMember {
  return _tag == DBSHARINGSharedFolderAccessErrorNotAMember;
}

- (BOOL)isEmailUnverified {
  return _tag == DBSHARINGSharedFolderAccessErrorEmailUnverified;
}

- (BOOL)isUnmounted {
  return _tag == DBSHARINGSharedFolderAccessErrorUnmounted;
}

- (BOOL)isOther {
  return _tag == DBSHARINGSharedFolderAccessErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGSharedFolderAccessErrorInvalidId:
    return @"DBSHARINGSharedFolderAccessErrorInvalidId";
  case DBSHARINGSharedFolderAccessErrorNotAMember:
    return @"DBSHARINGSharedFolderAccessErrorNotAMember";
  case DBSHARINGSharedFolderAccessErrorEmailUnverified:
    return @"DBSHARINGSharedFolderAccessErrorEmailUnverified";
  case DBSHARINGSharedFolderAccessErrorUnmounted:
    return @"DBSHARINGSharedFolderAccessErrorUnmounted";
  case DBSHARINGSharedFolderAccessErrorOther:
    return @"DBSHARINGSharedFolderAccessErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedFolderAccessErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedFolderAccessErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedFolderAccessErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedFolderAccessErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedFolderAccessError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidId]) {
    jsonDict[@".tag"] = @"invalid_id";
  } else if ([valueObj isNotAMember]) {
    jsonDict[@".tag"] = @"not_a_member";
  } else if ([valueObj isEmailUnverified]) {
    jsonDict[@".tag"] = @"email_unverified";
  } else if ([valueObj isUnmounted]) {
    jsonDict[@".tag"] = @"unmounted";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGSharedFolderAccessError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_id"]) {
    return [[DBSHARINGSharedFolderAccessError alloc] initWithInvalidId];
  } else if ([tag isEqualToString:@"not_a_member"]) {
    return [[DBSHARINGSharedFolderAccessError alloc] initWithNotAMember];
  } else if ([tag isEqualToString:@"email_unverified"]) {
    return [[DBSHARINGSharedFolderAccessError alloc] initWithEmailUnverified];
  } else if ([tag isEqualToString:@"unmounted"]) {
    return [[DBSHARINGSharedFolderAccessError alloc] initWithUnmounted];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGSharedFolderAccessError alloc] initWithOther];
  } else {
    return [[DBSHARINGSharedFolderAccessError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGMemberAccessLevelResult.h"
#import "DBSHARINGSharedFolderMemberError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharedFolderMemberError

@synthesize noExplicitAccess = _noExplicitAccess;

#pragma mark - Constructors

- (instancetype)initWithInvalidDropboxId {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedFolderMemberErrorInvalidDropboxId;
  }
  return self;
}

- (instancetype)initWithNotAMember {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedFolderMemberErrorNotAMember;
  }
  return self;
}

- (instancetype)initWithNoExplicitAccess:(DBSHARINGMemberAccessLevelResult *)noExplicitAccess {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedFolderMemberErrorNoExplicitAccess;
    _noExplicitAccess = noExplicitAccess;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedFolderMemberErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGMemberAccessLevelResult *)noExplicitAccess {
  if (![self isNoExplicitAccess]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGSharedFolderMemberErrorNoExplicitAccess, but was %@.", [self tagName]];
  }
  return _noExplicitAccess;
}

#pragma mark - Tag state methods

- (BOOL)isInvalidDropboxId {
  return _tag == DBSHARINGSharedFolderMemberErrorInvalidDropboxId;
}

- (BOOL)isNotAMember {
  return _tag == DBSHARINGSharedFolderMemberErrorNotAMember;
}

- (BOOL)isNoExplicitAccess {
  return _tag == DBSHARINGSharedFolderMemberErrorNoExplicitAccess;
}

- (BOOL)isOther {
  return _tag == DBSHARINGSharedFolderMemberErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGSharedFolderMemberErrorInvalidDropboxId:
    return @"DBSHARINGSharedFolderMemberErrorInvalidDropboxId";
  case DBSHARINGSharedFolderMemberErrorNotAMember:
    return @"DBSHARINGSharedFolderMemberErrorNotAMember";
  case DBSHARINGSharedFolderMemberErrorNoExplicitAccess:
    return @"DBSHARINGSharedFolderMemberErrorNoExplicitAccess";
  case DBSHARINGSharedFolderMemberErrorOther:
    return @"DBSHARINGSharedFolderMemberErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedFolderMemberErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedFolderMemberErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedFolderMemberErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedFolderMemberErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedFolderMemberError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidDropboxId]) {
    jsonDict[@".tag"] = @"invalid_dropbox_id";
  } else if ([valueObj isNotAMember]) {
    jsonDict[@".tag"] = @"not_a_member";
  } else if ([valueObj isNoExplicitAccess]) {
    jsonDict[@"no_explicit_access"] =
        [[DBSHARINGMemberAccessLevelResultSerializer serialize:valueObj.noExplicitAccess] mutableCopy];
    jsonDict[@".tag"] = @"no_explicit_access";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGSharedFolderMemberError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_dropbox_id"]) {
    return [[DBSHARINGSharedFolderMemberError alloc] initWithInvalidDropboxId];
  } else if ([tag isEqualToString:@"not_a_member"]) {
    return [[DBSHARINGSharedFolderMemberError alloc] initWithNotAMember];
  } else if ([tag isEqualToString:@"no_explicit_access"]) {
    DBSHARINGMemberAccessLevelResult *noExplicitAccess =
        [DBSHARINGMemberAccessLevelResultSerializer deserialize:valueDict];
    return [[DBSHARINGSharedFolderMemberError alloc] initWithNoExplicitAccess:noExplicitAccess];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGSharedFolderMemberError alloc] initWithOther];
  } else {
    return [[DBSHARINGSharedFolderMemberError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGGroupMembershipInfo.h"
#import "DBSHARINGInviteeMembershipInfo.h"
#import "DBSHARINGSharedFolderMembers.h"
#import "DBSHARINGUserMembershipInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharedFolderMembers

#pragma mark - Constructors

- (instancetype)initWithUsers:(NSArray<DBSHARINGUserMembershipInfo *> *)users
                       groups:(NSArray<DBSHARINGGroupMembershipInfo *> *)groups
                     invitees:(NSArray<DBSHARINGInviteeMembershipInfo *> *)invitees
                       cursor:(NSString *)cursor {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](users);
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](groups);
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](invitees);

  self = [super init];
  if (self) {
    _users = users;
    _groups = groups;
    _invitees = invitees;
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initWithUsers:(NSArray<DBSHARINGUserMembershipInfo *> *)users
                       groups:(NSArray<DBSHARINGGroupMembershipInfo *> *)groups
                     invitees:(NSArray<DBSHARINGInviteeMembershipInfo *> *)invitees {
  return [self initWithUsers:users groups:groups invitees:invitees cursor:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedFolderMembersSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedFolderMembersSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedFolderMembersSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedFolderMembersSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedFolderMembers *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"users"] = [DBArraySerializer serialize:valueObj.users
                                          withBlock:^id(id elem) {
                                            return [DBSHARINGUserMembershipInfoSerializer serialize:elem];
                                          }];
  jsonDict[@"groups"] = [DBArraySerializer serialize:valueObj.groups
                                           withBlock:^id(id elem) {
                                             return [DBSHARINGGroupMembershipInfoSerializer serialize:elem];
                                           }];
  jsonDict[@"invitees"] = [DBArraySerializer serialize:valueObj.invitees
                                             withBlock:^id(id elem) {
                                               return [DBSHARINGInviteeMembershipInfoSerializer serialize:elem];
                                             }];
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return jsonDict;
}

+ (DBSHARINGSharedFolderMembers *)deserialize:(NSDictionary *)valueDict {
  NSArray<DBSHARINGUserMembershipInfo *> *users =
      [DBArraySerializer deserialize:valueDict[@"users"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGUserMembershipInfoSerializer deserialize:elem];
                           }];
  NSArray<DBSHARINGGroupMembershipInfo *> *groups =
      [DBArraySerializer deserialize:valueDict[@"groups"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGGroupMembershipInfoSerializer deserialize:elem];
                           }];
  NSArray<DBSHARINGInviteeMembershipInfo *> *invitees =
      [DBArraySerializer deserialize:valueDict[@"invitees"]
                           withBlock:^id(id elem) {
                             return [DBSHARINGInviteeMembershipInfoSerializer deserialize:elem];
                           }];
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBSHARINGSharedFolderMembers alloc] initWithUsers:users groups:groups invitees:invitees cursor:cursor];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGFolderPolicy.h"
#import "DBSHARINGSharedFolderMetadataBase.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBSHARINGSharedFolderMetadataBase

#pragma mark - Constructors

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                      isTeamFolder:(NSNumber *)isTeamFolder
                            policy:(DBSHARINGFolderPolicy *)policy
                         ownerTeam:(DBUSERSTeam *)ownerTeam
              parentSharedFolderId:(NSString *)parentSharedFolderId {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](
      parentSharedFolderId);

  self = [super init];
  if (self) {
    _accessType = accessType;
    _isTeamFolder = isTeamFolder;
    _policy = policy;
    _ownerTeam = ownerTeam;
    _parentSharedFolderId = parentSharedFolderId;
  }
  return self;
}

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                      isTeamFolder:(NSNumber *)isTeamFolder
                            policy:(DBSHARINGFolderPolicy *)policy {
  return [self initWithAccessType:accessType
                     isTeamFolder:isTeamFolder
                           policy:policy
                        ownerTeam:nil
             parentSharedFolderId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedFolderMetadataBaseSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedFolderMetadataBaseSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedFolderMetadataBaseSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedFolderMetadataBaseSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedFolderMetadataBase *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_type"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessType];
  jsonDict[@"is_team_folder"] = valueObj.isTeamFolder;
  jsonDict[@"policy"] = [DBSHARINGFolderPolicySerializer serialize:valueObj.policy];
  if (valueObj.ownerTeam) {
    jsonDict[@"owner_team"] = [DBUSERSTeamSerializer serialize:valueObj.ownerTeam];
  }
  if (valueObj.parentSharedFolderId) {
    jsonDict[@"parent_shared_folder_id"] = valueObj.parentSharedFolderId;
  }

  return jsonDict;
}

+ (DBSHARINGSharedFolderMetadataBase *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGAccessLevel *accessType = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_type"]];
  NSNumber *isTeamFolder = valueDict[@"is_team_folder"];
  DBSHARINGFolderPolicy *policy = [DBSHARINGFolderPolicySerializer deserialize:valueDict[@"policy"]];
  DBUSERSTeam *ownerTeam =
      valueDict[@"owner_team"] ? [DBUSERSTeamSerializer deserialize:valueDict[@"owner_team"]] : nil;
  NSString *parentSharedFolderId = valueDict[@"parent_shared_folder_id"] ?: nil;

  return [[DBSHARINGSharedFolderMetadataBase alloc] initWithAccessType:accessType
                                                          isTeamFolder:isTeamFolder
                                                                policy:policy
                                                             ownerTeam:ownerTeam
                                                  parentSharedFolderId:parentSharedFolderId];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGFolderPermission.h"
#import "DBSHARINGFolderPolicy.h"
#import "DBSHARINGSharedFolderMetadata.h"
#import "DBSHARINGSharedFolderMetadataBase.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBSHARINGSharedFolderMetadata

#pragma mark - Constructors

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                      isTeamFolder:(NSNumber *)isTeamFolder
                            policy:(DBSHARINGFolderPolicy *)policy
                              name:(NSString *)name
                    sharedFolderId:(NSString *)sharedFolderId
                       timeInvited:(NSDate *)timeInvited
                        previewUrl:(NSString *)previewUrl
                         ownerTeam:(DBUSERSTeam *)ownerTeam
              parentSharedFolderId:(NSString *)parentSharedFolderId
                         pathLower:(NSString *)pathLower
                       permissions:(NSArray<DBSHARINGFolderPermission *> *)permissions {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](
      parentSharedFolderId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](permissions);

  self = [super initWithAccessType:accessType
                      isTeamFolder:isTeamFolder
                            policy:policy
                         ownerTeam:ownerTeam
              parentSharedFolderId:parentSharedFolderId];
  if (self) {
    _pathLower = pathLower;
    _name = name;
    _sharedFolderId = sharedFolderId;
    _permissions = permissions;
    _timeInvited = timeInvited;
    _previewUrl = previewUrl;
  }
  return self;
}

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                      isTeamFolder:(NSNumber *)isTeamFolder
                            policy:(DBSHARINGFolderPolicy *)policy
                              name:(NSString *)name
                    sharedFolderId:(NSString *)sharedFolderId
                       timeInvited:(NSDate *)timeInvited
                        previewUrl:(NSString *)previewUrl {
  return [self initWithAccessType:accessType
                     isTeamFolder:isTeamFolder
                           policy:policy
                             name:name
                   sharedFolderId:sharedFolderId
                      timeInvited:timeInvited
                       previewUrl:previewUrl
                        ownerTeam:nil
             parentSharedFolderId:nil
                        pathLower:nil
                      permissions:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedFolderMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedFolderMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedFolderMetadataSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedFolderMetadataSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedFolderMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_type"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessType];
  jsonDict[@"is_team_folder"] = valueObj.isTeamFolder;
  jsonDict[@"policy"] = [DBSHARINGFolderPolicySerializer serialize:valueObj.policy];
  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  jsonDict[@"time_invited"] = [DBNSDateSerializer serialize:valueObj.timeInvited dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  jsonDict[@"preview_url"] = valueObj.previewUrl;
  if (valueObj.ownerTeam) {
    jsonDict[@"owner_team"] = [DBUSERSTeamSerializer serialize:valueObj.ownerTeam];
  }
  if (valueObj.parentSharedFolderId) {
    jsonDict[@"parent_shared_folder_id"] = valueObj.parentSharedFolderId;
  }
  if (valueObj.pathLower) {
    jsonDict[@"path_lower"] = valueObj.pathLower;
  }
  if (valueObj.permissions) {
    jsonDict[@"permissions"] = [DBArraySerializer serialize:valueObj.permissions
                                                  withBlock:^id(id elem) {
                                                    return [DBSHARINGFolderPermissionSerializer serialize:elem];
                                                  }];
  }

  return jsonDict;
}

+ (DBSHARINGSharedFolderMetadata *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGAccessLevel *accessType = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_type"]];
  NSNumber *isTeamFolder = valueDict[@"is_team_folder"];
  DBSHARINGFolderPolicy *policy = [DBSHARINGFolderPolicySerializer deserialize:valueDict[@"policy"]];
  NSString *name = valueDict[@"name"];
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  NSDate *timeInvited = [DBNSDateSerializer deserialize:valueDict[@"time_invited"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  NSString *previewUrl = valueDict[@"preview_url"];
  DBUSERSTeam *ownerTeam =
      valueDict[@"owner_team"] ? [DBUSERSTeamSerializer deserialize:valueDict[@"owner_team"]] : nil;
  NSString *parentSharedFolderId = valueDict[@"parent_shared_folder_id"] ?: nil;
  NSString *pathLower = valueDict[@"path_lower"] ?: nil;
  NSArray<DBSHARINGFolderPermission *> *permissions =
      valueDict[@"permissions"] ? [DBArraySerializer deserialize:valueDict[@"permissions"]
                                                       withBlock:^id(id elem) {
                                                         return [DBSHARINGFolderPermissionSerializer deserialize:elem];
                                                       }]
                                : nil;

  return [[DBSHARINGSharedFolderMetadata alloc] initWithAccessType:accessType
                                                      isTeamFolder:isTeamFolder
                                                            policy:policy
                                                              name:name
                                                    sharedFolderId:sharedFolderId
                                                       timeInvited:timeInvited
                                                        previewUrl:previewUrl
                                                         ownerTeam:ownerTeam
                                              parentSharedFolderId:parentSharedFolderId
                                                         pathLower:pathLower
                                                       permissions:permissions];
}

@end

#import "DBSHARINGSharedLinkAccessFailureReason.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharedLinkAccessFailureReason

#pragma mark - Constructors

- (instancetype)initWithLoginRequired {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkAccessFailureReasonLoginRequired;
  }
  return self;
}

- (instancetype)initWithEmailVerifyRequired {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkAccessFailureReasonEmailVerifyRequired;
  }
  return self;
}

- (instancetype)initWithPasswordRequired {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkAccessFailureReasonPasswordRequired;
  }
  return self;
}

- (instancetype)initWithTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkAccessFailureReasonTeamOnly;
  }
  return self;
}

- (instancetype)initWithOwnerOnly {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkAccessFailureReasonOwnerOnly;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkAccessFailureReasonOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isLoginRequired {
  return _tag == DBSHARINGSharedLinkAccessFailureReasonLoginRequired;
}

- (BOOL)isEmailVerifyRequired {
  return _tag == DBSHARINGSharedLinkAccessFailureReasonEmailVerifyRequired;
}

- (BOOL)isPasswordRequired {
  return _tag == DBSHARINGSharedLinkAccessFailureReasonPasswordRequired;
}

- (BOOL)isTeamOnly {
  return _tag == DBSHARINGSharedLinkAccessFailureReasonTeamOnly;
}

- (BOOL)isOwnerOnly {
  return _tag == DBSHARINGSharedLinkAccessFailureReasonOwnerOnly;
}

- (BOOL)isOther {
  return _tag == DBSHARINGSharedLinkAccessFailureReasonOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGSharedLinkAccessFailureReasonLoginRequired:
    return @"DBSHARINGSharedLinkAccessFailureReasonLoginRequired";
  case DBSHARINGSharedLinkAccessFailureReasonEmailVerifyRequired:
    return @"DBSHARINGSharedLinkAccessFailureReasonEmailVerifyRequired";
  case DBSHARINGSharedLinkAccessFailureReasonPasswordRequired:
    return @"DBSHARINGSharedLinkAccessFailureReasonPasswordRequired";
  case DBSHARINGSharedLinkAccessFailureReasonTeamOnly:
    return @"DBSHARINGSharedLinkAccessFailureReasonTeamOnly";
  case DBSHARINGSharedLinkAccessFailureReasonOwnerOnly:
    return @"DBSHARINGSharedLinkAccessFailureReasonOwnerOnly";
  case DBSHARINGSharedLinkAccessFailureReasonOther:
    return @"DBSHARINGSharedLinkAccessFailureReasonOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedLinkAccessFailureReasonSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedLinkAccessFailureReasonSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedLinkAccessFailureReasonSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedLinkAccessFailureReasonSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedLinkAccessFailureReason *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isLoginRequired]) {
    jsonDict[@".tag"] = @"login_required";
  } else if ([valueObj isEmailVerifyRequired]) {
    jsonDict[@".tag"] = @"email_verify_required";
  } else if ([valueObj isPasswordRequired]) {
    jsonDict[@".tag"] = @"password_required";
  } else if ([valueObj isTeamOnly]) {
    jsonDict[@".tag"] = @"team_only";
  } else if ([valueObj isOwnerOnly]) {
    jsonDict[@".tag"] = @"owner_only";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGSharedLinkAccessFailureReason *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"login_required"]) {
    return [[DBSHARINGSharedLinkAccessFailureReason alloc] initWithLoginRequired];
  } else if ([tag isEqualToString:@"email_verify_required"]) {
    return [[DBSHARINGSharedLinkAccessFailureReason alloc] initWithEmailVerifyRequired];
  } else if ([tag isEqualToString:@"password_required"]) {
    return [[DBSHARINGSharedLinkAccessFailureReason alloc] initWithPasswordRequired];
  } else if ([tag isEqualToString:@"team_only"]) {
    return [[DBSHARINGSharedLinkAccessFailureReason alloc] initWithTeamOnly];
  } else if ([tag isEqualToString:@"owner_only"]) {
    return [[DBSHARINGSharedLinkAccessFailureReason alloc] initWithOwnerOnly];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGSharedLinkAccessFailureReason alloc] initWithOther];
  } else {
    return [[DBSHARINGSharedLinkAccessFailureReason alloc] initWithOther];
  }
}
@end

#import "DBSHARINGSharedLinkPolicy.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharedLinkPolicy

#pragma mark - Constructors

- (instancetype)initWithAnyone {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkPolicyAnyone;
  }
  return self;
}

- (instancetype)initWithMembers {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkPolicyMembers;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAnyone {
  return _tag == DBSHARINGSharedLinkPolicyAnyone;
}

- (BOOL)isMembers {
  return _tag == DBSHARINGSharedLinkPolicyMembers;
}

- (BOOL)isOther {
  return _tag == DBSHARINGSharedLinkPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGSharedLinkPolicyAnyone:
    return @"DBSHARINGSharedLinkPolicyAnyone";
  case DBSHARINGSharedLinkPolicyMembers:
    return @"DBSHARINGSharedLinkPolicyMembers";
  case DBSHARINGSharedLinkPolicyOther:
    return @"DBSHARINGSharedLinkPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedLinkPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedLinkPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedLinkPolicySerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedLinkPolicySerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedLinkPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAnyone]) {
    jsonDict[@".tag"] = @"anyone";
  } else if ([valueObj isMembers]) {
    jsonDict[@".tag"] = @"members";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGSharedLinkPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"anyone"]) {
    return [[DBSHARINGSharedLinkPolicy alloc] initWithAnyone];
  } else if ([tag isEqualToString:@"members"]) {
    return [[DBSHARINGSharedLinkPolicy alloc] initWithMembers];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGSharedLinkPolicy alloc] initWithOther];
  } else {
    return [[DBSHARINGSharedLinkPolicy alloc] initWithOther];
  }
}
@end

#import "DBSHARINGRequestedVisibility.h"
#import "DBSHARINGSharedLinkSettings.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharedLinkSettings

#pragma mark - Constructors

- (instancetype)initWithRequestedVisibility:(DBSHARINGRequestedVisibility *)requestedVisibility
                               linkPassword:(NSString *)linkPassword
                                    expires:(NSDate *)expires {

  self = [super init];
  if (self) {
    _requestedVisibility = requestedVisibility;
    _linkPassword = linkPassword;
    _expires = expires;
  }
  return self;
}

- (instancetype)init {
  return [self initWithRequestedVisibility:nil linkPassword:nil expires:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedLinkSettingsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedLinkSettingsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedLinkSettingsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedLinkSettingsSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedLinkSettings *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.requestedVisibility) {
    jsonDict[@"requested_visibility"] = [DBSHARINGRequestedVisibilitySerializer serialize:valueObj.requestedVisibility];
  }
  if (valueObj.linkPassword) {
    jsonDict[@"link_password"] = valueObj.linkPassword;
  }
  if (valueObj.expires) {
    jsonDict[@"expires"] = [DBNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return jsonDict;
}

+ (DBSHARINGSharedLinkSettings *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGRequestedVisibility *requestedVisibility =
      valueDict[@"requested_visibility"]
          ? [DBSHARINGRequestedVisibilitySerializer deserialize:valueDict[@"requested_visibility"]]
          : nil;
  NSString *linkPassword = valueDict[@"link_password"] ?: nil;
  NSDate *expires = valueDict[@"expires"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"expires"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;

  return [[DBSHARINGSharedLinkSettings alloc] initWithRequestedVisibility:requestedVisibility
                                                             linkPassword:linkPassword
                                                                  expires:expires];
}

@end

#import "DBSHARINGSharedLinkSettingsError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharedLinkSettingsError

#pragma mark - Constructors

- (instancetype)initWithInvalidSettings {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkSettingsErrorInvalidSettings;
  }
  return self;
}

- (instancetype)initWithNotAuthorized {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharedLinkSettingsErrorNotAuthorized;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidSettings {
  return _tag == DBSHARINGSharedLinkSettingsErrorInvalidSettings;
}

- (BOOL)isNotAuthorized {
  return _tag == DBSHARINGSharedLinkSettingsErrorNotAuthorized;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGSharedLinkSettingsErrorInvalidSettings:
    return @"DBSHARINGSharedLinkSettingsErrorInvalidSettings";
  case DBSHARINGSharedLinkSettingsErrorNotAuthorized:
    return @"DBSHARINGSharedLinkSettingsErrorNotAuthorized";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharedLinkSettingsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharedLinkSettingsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharedLinkSettingsErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharedLinkSettingsErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharedLinkSettingsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidSettings]) {
    jsonDict[@".tag"] = @"invalid_settings";
  } else if ([valueObj isNotAuthorized]) {
    jsonDict[@".tag"] = @"not_authorized";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return jsonDict;
}

+ (DBSHARINGSharedLinkSettingsError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_settings"]) {
    return [[DBSHARINGSharedLinkSettingsError alloc] initWithInvalidSettings];
  } else if ([tag isEqualToString:@"not_authorized"]) {
    return [[DBSHARINGSharedLinkSettingsError alloc] initWithNotAuthorized];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}
@end

#import "DBSHARINGSharingFileAccessError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharingFileAccessError

#pragma mark - Constructors

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharingFileAccessErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithInvalidFile {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharingFileAccessErrorInvalidFile;
  }
  return self;
}

- (instancetype)initWithIsFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharingFileAccessErrorIsFolder;
  }
  return self;
}

- (instancetype)initWithInsidePublicFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharingFileAccessErrorInsidePublicFolder;
  }
  return self;
}

- (instancetype)initWithInsideOsxPackage {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharingFileAccessErrorInsideOsxPackage;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharingFileAccessErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isNoPermission {
  return _tag == DBSHARINGSharingFileAccessErrorNoPermission;
}

- (BOOL)isInvalidFile {
  return _tag == DBSHARINGSharingFileAccessErrorInvalidFile;
}

- (BOOL)isIsFolder {
  return _tag == DBSHARINGSharingFileAccessErrorIsFolder;
}

- (BOOL)isInsidePublicFolder {
  return _tag == DBSHARINGSharingFileAccessErrorInsidePublicFolder;
}

- (BOOL)isInsideOsxPackage {
  return _tag == DBSHARINGSharingFileAccessErrorInsideOsxPackage;
}

- (BOOL)isOther {
  return _tag == DBSHARINGSharingFileAccessErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGSharingFileAccessErrorNoPermission:
    return @"DBSHARINGSharingFileAccessErrorNoPermission";
  case DBSHARINGSharingFileAccessErrorInvalidFile:
    return @"DBSHARINGSharingFileAccessErrorInvalidFile";
  case DBSHARINGSharingFileAccessErrorIsFolder:
    return @"DBSHARINGSharingFileAccessErrorIsFolder";
  case DBSHARINGSharingFileAccessErrorInsidePublicFolder:
    return @"DBSHARINGSharingFileAccessErrorInsidePublicFolder";
  case DBSHARINGSharingFileAccessErrorInsideOsxPackage:
    return @"DBSHARINGSharingFileAccessErrorInsideOsxPackage";
  case DBSHARINGSharingFileAccessErrorOther:
    return @"DBSHARINGSharingFileAccessErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharingFileAccessErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharingFileAccessErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharingFileAccessErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharingFileAccessErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharingFileAccessError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isInvalidFile]) {
    jsonDict[@".tag"] = @"invalid_file";
  } else if ([valueObj isIsFolder]) {
    jsonDict[@".tag"] = @"is_folder";
  } else if ([valueObj isInsidePublicFolder]) {
    jsonDict[@".tag"] = @"inside_public_folder";
  } else if ([valueObj isInsideOsxPackage]) {
    jsonDict[@".tag"] = @"inside_osx_package";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGSharingFileAccessError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGSharingFileAccessError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"invalid_file"]) {
    return [[DBSHARINGSharingFileAccessError alloc] initWithInvalidFile];
  } else if ([tag isEqualToString:@"is_folder"]) {
    return [[DBSHARINGSharingFileAccessError alloc] initWithIsFolder];
  } else if ([tag isEqualToString:@"inside_public_folder"]) {
    return [[DBSHARINGSharingFileAccessError alloc] initWithInsidePublicFolder];
  } else if ([tag isEqualToString:@"inside_osx_package"]) {
    return [[DBSHARINGSharingFileAccessError alloc] initWithInsideOsxPackage];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGSharingFileAccessError alloc] initWithOther];
  } else {
    return [[DBSHARINGSharingFileAccessError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGSharingUserError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGSharingUserError

#pragma mark - Constructors

- (instancetype)initWithEmailUnverified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharingUserErrorEmailUnverified;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGSharingUserErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isEmailUnverified {
  return _tag == DBSHARINGSharingUserErrorEmailUnverified;
}

- (BOOL)isOther {
  return _tag == DBSHARINGSharingUserErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGSharingUserErrorEmailUnverified:
    return @"DBSHARINGSharingUserErrorEmailUnverified";
  case DBSHARINGSharingUserErrorOther:
    return @"DBSHARINGSharingUserErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGSharingUserErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGSharingUserErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGSharingUserErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGSharingUserErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGSharingUserError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEmailUnverified]) {
    jsonDict[@".tag"] = @"email_unverified";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGSharingUserError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"email_unverified"]) {
    return [[DBSHARINGSharingUserError alloc] initWithEmailUnverified];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGSharingUserError alloc] initWithOther];
  } else {
    return [[DBSHARINGSharingUserError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGTeamMemberInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBSHARINGTeamMemberInfo

#pragma mark - Constructors

- (instancetype)initWithTeamInfo:(DBUSERSTeam *)teamInfo
                     displayName:(NSString *)displayName
                        memberId:(NSString *)memberId {

  self = [super init];
  if (self) {
    _teamInfo = teamInfo;
    _displayName = displayName;
    _memberId = memberId;
  }
  return self;
}

- (instancetype)initWithTeamInfo:(DBUSERSTeam *)teamInfo displayName:(NSString *)displayName {
  return [self initWithTeamInfo:teamInfo displayName:displayName memberId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGTeamMemberInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGTeamMemberInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGTeamMemberInfoSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGTeamMemberInfoSerializer

+ (NSDictionary *)serialize:(DBSHARINGTeamMemberInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_info"] = [DBUSERSTeamSerializer serialize:valueObj.teamInfo];
  jsonDict[@"display_name"] = valueObj.displayName;
  if (valueObj.memberId) {
    jsonDict[@"member_id"] = valueObj.memberId;
  }

  return jsonDict;
}

+ (DBSHARINGTeamMemberInfo *)deserialize:(NSDictionary *)valueDict {
  DBUSERSTeam *teamInfo = [DBUSERSTeamSerializer deserialize:valueDict[@"team_info"]];
  NSString *displayName = valueDict[@"display_name"];
  NSString *memberId = valueDict[@"member_id"] ?: nil;

  return [[DBSHARINGTeamMemberInfo alloc] initWithTeamInfo:teamInfo displayName:displayName memberId:memberId];
}

@end

#import "DBSHARINGTransferFolderArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGTransferFolderArg

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId toDropboxId:(NSString *)toDropboxId {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:nil](toDropboxId);

  self = [super init];
  if (self) {
    _sharedFolderId = sharedFolderId;
    _toDropboxId = toDropboxId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGTransferFolderArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGTransferFolderArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGTransferFolderArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGTransferFolderArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGTransferFolderArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  jsonDict[@"to_dropbox_id"] = valueObj.toDropboxId;

  return jsonDict;
}

+ (DBSHARINGTransferFolderArg *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  NSString *toDropboxId = valueDict[@"to_dropbox_id"];

  return [[DBSHARINGTransferFolderArg alloc] initWithSharedFolderId:sharedFolderId toDropboxId:toDropboxId];
}

@end

#import "DBSHARINGSharedFolderAccessError.h"
#import "DBSHARINGTransferFolderError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGTransferFolderError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithInvalidDropboxId {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorInvalidDropboxId;
  }
  return self;
}

- (instancetype)initWithDNewOwnerNotAMember {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorDNewOwnerNotAMember;
  }
  return self;
}

- (instancetype)initWithDNewOwnerUnmounted {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorDNewOwnerUnmounted;
  }
  return self;
}

- (instancetype)initWithDNewOwnerEmailUnverified {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorDNewOwnerEmailUnverified;
  }
  return self;
}

- (instancetype)initWithTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorTeamFolder;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGTransferFolderErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGTransferFolderErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGTransferFolderErrorAccessError;
}

- (BOOL)isInvalidDropboxId {
  return _tag == DBSHARINGTransferFolderErrorInvalidDropboxId;
}

- (BOOL)isDNewOwnerNotAMember {
  return _tag == DBSHARINGTransferFolderErrorDNewOwnerNotAMember;
}

- (BOOL)isDNewOwnerUnmounted {
  return _tag == DBSHARINGTransferFolderErrorDNewOwnerUnmounted;
}

- (BOOL)isDNewOwnerEmailUnverified {
  return _tag == DBSHARINGTransferFolderErrorDNewOwnerEmailUnverified;
}

- (BOOL)isTeamFolder {
  return _tag == DBSHARINGTransferFolderErrorTeamFolder;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGTransferFolderErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBSHARINGTransferFolderErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGTransferFolderErrorAccessError:
    return @"DBSHARINGTransferFolderErrorAccessError";
  case DBSHARINGTransferFolderErrorInvalidDropboxId:
    return @"DBSHARINGTransferFolderErrorInvalidDropboxId";
  case DBSHARINGTransferFolderErrorDNewOwnerNotAMember:
    return @"DBSHARINGTransferFolderErrorDNewOwnerNotAMember";
  case DBSHARINGTransferFolderErrorDNewOwnerUnmounted:
    return @"DBSHARINGTransferFolderErrorDNewOwnerUnmounted";
  case DBSHARINGTransferFolderErrorDNewOwnerEmailUnverified:
    return @"DBSHARINGTransferFolderErrorDNewOwnerEmailUnverified";
  case DBSHARINGTransferFolderErrorTeamFolder:
    return @"DBSHARINGTransferFolderErrorTeamFolder";
  case DBSHARINGTransferFolderErrorNoPermission:
    return @"DBSHARINGTransferFolderErrorNoPermission";
  case DBSHARINGTransferFolderErrorOther:
    return @"DBSHARINGTransferFolderErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGTransferFolderErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGTransferFolderErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGTransferFolderErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGTransferFolderErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGTransferFolderError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isInvalidDropboxId]) {
    jsonDict[@".tag"] = @"invalid_dropbox_id";
  } else if ([valueObj isDNewOwnerNotAMember]) {
    jsonDict[@".tag"] = @"new_owner_not_a_member";
  } else if ([valueObj isDNewOwnerUnmounted]) {
    jsonDict[@".tag"] = @"new_owner_unmounted";
  } else if ([valueObj isDNewOwnerEmailUnverified]) {
    jsonDict[@".tag"] = @"new_owner_email_unverified";
  } else if ([valueObj isTeamFolder]) {
    jsonDict[@".tag"] = @"team_folder";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGTransferFolderError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGTransferFolderError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"invalid_dropbox_id"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithInvalidDropboxId];
  } else if ([tag isEqualToString:@"new_owner_not_a_member"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithDNewOwnerNotAMember];
  } else if ([tag isEqualToString:@"new_owner_unmounted"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithDNewOwnerUnmounted];
  } else if ([tag isEqualToString:@"new_owner_email_unverified"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithDNewOwnerEmailUnverified];
  } else if ([tag isEqualToString:@"team_folder"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithTeamFolder];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGTransferFolderError alloc] initWithOther];
  } else {
    return [[DBSHARINGTransferFolderError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGUnmountFolderArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUnmountFolderArg

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);

  self = [super init];
  if (self) {
    _sharedFolderId = sharedFolderId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUnmountFolderArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUnmountFolderArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUnmountFolderArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUnmountFolderArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGUnmountFolderArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;

  return jsonDict;
}

+ (DBSHARINGUnmountFolderArg *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];

  return [[DBSHARINGUnmountFolderArg alloc] initWithSharedFolderId:sharedFolderId];
}

@end

#import "DBSHARINGSharedFolderAccessError.h"
#import "DBSHARINGUnmountFolderError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUnmountFolderError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnmountFolderErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnmountFolderErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithNotUnmountable {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnmountFolderErrorNotUnmountable;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnmountFolderErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGUnmountFolderErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGUnmountFolderErrorAccessError;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGUnmountFolderErrorNoPermission;
}

- (BOOL)isNotUnmountable {
  return _tag == DBSHARINGUnmountFolderErrorNotUnmountable;
}

- (BOOL)isOther {
  return _tag == DBSHARINGUnmountFolderErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGUnmountFolderErrorAccessError:
    return @"DBSHARINGUnmountFolderErrorAccessError";
  case DBSHARINGUnmountFolderErrorNoPermission:
    return @"DBSHARINGUnmountFolderErrorNoPermission";
  case DBSHARINGUnmountFolderErrorNotUnmountable:
    return @"DBSHARINGUnmountFolderErrorNotUnmountable";
  case DBSHARINGUnmountFolderErrorOther:
    return @"DBSHARINGUnmountFolderErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUnmountFolderErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUnmountFolderErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUnmountFolderErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUnmountFolderErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGUnmountFolderError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isNotUnmountable]) {
    jsonDict[@".tag"] = @"not_unmountable";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGUnmountFolderError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGUnmountFolderError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGUnmountFolderError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"not_unmountable"]) {
    return [[DBSHARINGUnmountFolderError alloc] initWithNotUnmountable];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGUnmountFolderError alloc] initWithOther];
  } else {
    return [[DBSHARINGUnmountFolderError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGUnshareFileArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUnshareFileArg

#pragma mark - Constructors

- (instancetype)initWithFile:(NSString *)file {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"((/|id:).*|nspath:[0-9]+:.*)|ns:[0-9]+(/.*)?"](file);

  self = [super init];
  if (self) {
    _file = file;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUnshareFileArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUnshareFileArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUnshareFileArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUnshareFileArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGUnshareFileArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"file"] = valueObj.file;

  return jsonDict;
}

+ (DBSHARINGUnshareFileArg *)deserialize:(NSDictionary *)valueDict {
  NSString *file = valueDict[@"file"];

  return [[DBSHARINGUnshareFileArg alloc] initWithFile:file];
}

@end

#import "DBSHARINGSharingFileAccessError.h"
#import "DBSHARINGSharingUserError.h"
#import "DBSHARINGUnshareFileError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUnshareFileError

@synthesize userError = _userError;
@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithUserError:(DBSHARINGSharingUserError *)userError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnshareFileErrorUserError;
    _userError = userError;
  }
  return self;
}

- (instancetype)initWithAccessError:(DBSHARINGSharingFileAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnshareFileErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnshareFileErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharingUserError *)userError {
  if (![self isUserError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGUnshareFileErrorUserError, but was %@.", [self tagName]];
  }
  return _userError;
}

- (DBSHARINGSharingFileAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGUnshareFileErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isUserError {
  return _tag == DBSHARINGUnshareFileErrorUserError;
}

- (BOOL)isAccessError {
  return _tag == DBSHARINGUnshareFileErrorAccessError;
}

- (BOOL)isOther {
  return _tag == DBSHARINGUnshareFileErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGUnshareFileErrorUserError:
    return @"DBSHARINGUnshareFileErrorUserError";
  case DBSHARINGUnshareFileErrorAccessError:
    return @"DBSHARINGUnshareFileErrorAccessError";
  case DBSHARINGUnshareFileErrorOther:
    return @"DBSHARINGUnshareFileErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUnshareFileErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUnshareFileErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUnshareFileErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUnshareFileErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGUnshareFileError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserError]) {
    jsonDict[@"user_error"] = [[DBSHARINGSharingUserErrorSerializer serialize:valueObj.userError] mutableCopy];
    jsonDict[@".tag"] = @"user_error";
  } else if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharingFileAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGUnshareFileError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_error"]) {
    DBSHARINGSharingUserError *userError = [DBSHARINGSharingUserErrorSerializer deserialize:valueDict[@"user_error"]];
    return [[DBSHARINGUnshareFileError alloc] initWithUserError:userError];
  } else if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharingFileAccessError *accessError =
        [DBSHARINGSharingFileAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGUnshareFileError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGUnshareFileError alloc] initWithOther];
  } else {
    return [[DBSHARINGUnshareFileError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGUnshareFolderArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUnshareFolderArg

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId leaveACopy:(NSNumber *)leaveACopy {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);

  self = [super init];
  if (self) {
    _sharedFolderId = sharedFolderId;
    _leaveACopy = leaveACopy ?: @NO;
  }
  return self;
}

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId {
  return [self initWithSharedFolderId:sharedFolderId leaveACopy:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUnshareFolderArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUnshareFolderArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUnshareFolderArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUnshareFolderArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGUnshareFolderArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  jsonDict[@"leave_a_copy"] = valueObj.leaveACopy;

  return jsonDict;
}

+ (DBSHARINGUnshareFolderArg *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  NSNumber *leaveACopy = valueDict[@"leave_a_copy"] ?: @NO;

  return [[DBSHARINGUnshareFolderArg alloc] initWithSharedFolderId:sharedFolderId leaveACopy:leaveACopy];
}

@end

#import "DBSHARINGSharedFolderAccessError.h"
#import "DBSHARINGUnshareFolderError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUnshareFolderError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnshareFolderErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnshareFolderErrorTeamFolder;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnshareFolderErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithTooManyFiles {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnshareFolderErrorTooManyFiles;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUnshareFolderErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBSHARINGUnshareFolderErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGUnshareFolderErrorAccessError;
}

- (BOOL)isTeamFolder {
  return _tag == DBSHARINGUnshareFolderErrorTeamFolder;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGUnshareFolderErrorNoPermission;
}

- (BOOL)isTooManyFiles {
  return _tag == DBSHARINGUnshareFolderErrorTooManyFiles;
}

- (BOOL)isOther {
  return _tag == DBSHARINGUnshareFolderErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGUnshareFolderErrorAccessError:
    return @"DBSHARINGUnshareFolderErrorAccessError";
  case DBSHARINGUnshareFolderErrorTeamFolder:
    return @"DBSHARINGUnshareFolderErrorTeamFolder";
  case DBSHARINGUnshareFolderErrorNoPermission:
    return @"DBSHARINGUnshareFolderErrorNoPermission";
  case DBSHARINGUnshareFolderErrorTooManyFiles:
    return @"DBSHARINGUnshareFolderErrorTooManyFiles";
  case DBSHARINGUnshareFolderErrorOther:
    return @"DBSHARINGUnshareFolderErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUnshareFolderErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUnshareFolderErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUnshareFolderErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUnshareFolderErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGUnshareFolderError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isTeamFolder]) {
    jsonDict[@".tag"] = @"team_folder";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isTooManyFiles]) {
    jsonDict[@".tag"] = @"too_many_files";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGUnshareFolderError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGUnshareFolderError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"team_folder"]) {
    return [[DBSHARINGUnshareFolderError alloc] initWithTeamFolder];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGUnshareFolderError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"too_many_files"]) {
    return [[DBSHARINGUnshareFolderError alloc] initWithTooManyFiles];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGUnshareFolderError alloc] initWithOther];
  } else {
    return [[DBSHARINGUnshareFolderError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGMemberSelector.h"
#import "DBSHARINGUpdateFolderMemberArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUpdateFolderMemberArg

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId
                                member:(DBSHARINGMemberSelector *)member
                           accessLevel:(DBSHARINGAccessLevel *)accessLevel {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);

  self = [super init];
  if (self) {
    _sharedFolderId = sharedFolderId;
    _member = member;
    _accessLevel = accessLevel;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUpdateFolderMemberArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUpdateFolderMemberArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUpdateFolderMemberArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUpdateFolderMemberArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGUpdateFolderMemberArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  jsonDict[@"member"] = [DBSHARINGMemberSelectorSerializer serialize:valueObj.member];
  jsonDict[@"access_level"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessLevel];

  return jsonDict;
}

+ (DBSHARINGUpdateFolderMemberArg *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  DBSHARINGMemberSelector *member = [DBSHARINGMemberSelectorSerializer deserialize:valueDict[@"member"]];
  DBSHARINGAccessLevel *accessLevel = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_level"]];

  return [[DBSHARINGUpdateFolderMemberArg alloc] initWithSharedFolderId:sharedFolderId
                                                                 member:member
                                                            accessLevel:accessLevel];
}

@end

#import "DBSHARINGAddFolderMemberError.h"
#import "DBSHARINGSharedFolderAccessError.h"
#import "DBSHARINGSharedFolderMemberError.h"
#import "DBSHARINGUpdateFolderMemberError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUpdateFolderMemberError

@synthesize accessError = _accessError;
@synthesize memberError = _memberError;
@synthesize noExplicitAccess = _noExplicitAccess;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderMemberErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithMemberError:(DBSHARINGSharedFolderMemberError *)memberError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderMemberErrorMemberError;
    _memberError = memberError;
  }
  return self;
}

- (instancetype)initWithNoExplicitAccess:(DBSHARINGAddFolderMemberError *)noExplicitAccess {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderMemberErrorNoExplicitAccess;
    _noExplicitAccess = noExplicitAccess;
  }
  return self;
}

- (instancetype)initWithInsufficientPlan {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderMemberErrorInsufficientPlan;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderMemberErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderMemberErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGUpdateFolderMemberErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBSHARINGSharedFolderMemberError *)memberError {
  if (![self isMemberError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGUpdateFolderMemberErrorMemberError, but was %@.", [self tagName]];
  }
  return _memberError;
}

- (DBSHARINGAddFolderMemberError *)noExplicitAccess {
  if (![self isNoExplicitAccess]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGUpdateFolderMemberErrorNoExplicitAccess, but was %@.", [self tagName]];
  }
  return _noExplicitAccess;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGUpdateFolderMemberErrorAccessError;
}

- (BOOL)isMemberError {
  return _tag == DBSHARINGUpdateFolderMemberErrorMemberError;
}

- (BOOL)isNoExplicitAccess {
  return _tag == DBSHARINGUpdateFolderMemberErrorNoExplicitAccess;
}

- (BOOL)isInsufficientPlan {
  return _tag == DBSHARINGUpdateFolderMemberErrorInsufficientPlan;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGUpdateFolderMemberErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBSHARINGUpdateFolderMemberErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGUpdateFolderMemberErrorAccessError:
    return @"DBSHARINGUpdateFolderMemberErrorAccessError";
  case DBSHARINGUpdateFolderMemberErrorMemberError:
    return @"DBSHARINGUpdateFolderMemberErrorMemberError";
  case DBSHARINGUpdateFolderMemberErrorNoExplicitAccess:
    return @"DBSHARINGUpdateFolderMemberErrorNoExplicitAccess";
  case DBSHARINGUpdateFolderMemberErrorInsufficientPlan:
    return @"DBSHARINGUpdateFolderMemberErrorInsufficientPlan";
  case DBSHARINGUpdateFolderMemberErrorNoPermission:
    return @"DBSHARINGUpdateFolderMemberErrorNoPermission";
  case DBSHARINGUpdateFolderMemberErrorOther:
    return @"DBSHARINGUpdateFolderMemberErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUpdateFolderMemberErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUpdateFolderMemberErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUpdateFolderMemberErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUpdateFolderMemberErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGUpdateFolderMemberError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isMemberError]) {
    jsonDict[@"member_error"] =
        [[DBSHARINGSharedFolderMemberErrorSerializer serialize:valueObj.memberError] mutableCopy];
    jsonDict[@".tag"] = @"member_error";
  } else if ([valueObj isNoExplicitAccess]) {
    jsonDict[@"no_explicit_access"] =
        [[DBSHARINGAddFolderMemberErrorSerializer serialize:valueObj.noExplicitAccess] mutableCopy];
    jsonDict[@".tag"] = @"no_explicit_access";
  } else if ([valueObj isInsufficientPlan]) {
    jsonDict[@".tag"] = @"insufficient_plan";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGUpdateFolderMemberError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGUpdateFolderMemberError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"member_error"]) {
    DBSHARINGSharedFolderMemberError *memberError =
        [DBSHARINGSharedFolderMemberErrorSerializer deserialize:valueDict[@"member_error"]];
    return [[DBSHARINGUpdateFolderMemberError alloc] initWithMemberError:memberError];
  } else if ([tag isEqualToString:@"no_explicit_access"]) {
    DBSHARINGAddFolderMemberError *noExplicitAccess =
        [DBSHARINGAddFolderMemberErrorSerializer deserialize:valueDict[@"no_explicit_access"]];
    return [[DBSHARINGUpdateFolderMemberError alloc] initWithNoExplicitAccess:noExplicitAccess];
  } else if ([tag isEqualToString:@"insufficient_plan"]) {
    return [[DBSHARINGUpdateFolderMemberError alloc] initWithInsufficientPlan];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGUpdateFolderMemberError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGUpdateFolderMemberError alloc] initWithOther];
  } else {
    return [[DBSHARINGUpdateFolderMemberError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGAclUpdatePolicy.h"
#import "DBSHARINGMemberPolicy.h"
#import "DBSHARINGSharedLinkPolicy.h"
#import "DBSHARINGUpdateFolderPolicyArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUpdateFolderPolicyArg

#pragma mark - Constructors

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId
                          memberPolicy:(DBSHARINGMemberPolicy *)memberPolicy
                       aclUpdatePolicy:(DBSHARINGAclUpdatePolicy *)aclUpdatePolicy
                      sharedLinkPolicy:(DBSHARINGSharedLinkPolicy *)sharedLinkPolicy {
  [DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"](sharedFolderId);

  self = [super init];
  if (self) {
    _sharedFolderId = sharedFolderId;
    _memberPolicy = memberPolicy;
    _aclUpdatePolicy = aclUpdatePolicy;
    _sharedLinkPolicy = sharedLinkPolicy;
  }
  return self;
}

- (instancetype)initWithSharedFolderId:(NSString *)sharedFolderId {
  return [self initWithSharedFolderId:sharedFolderId memberPolicy:nil aclUpdatePolicy:nil sharedLinkPolicy:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUpdateFolderPolicyArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUpdateFolderPolicyArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUpdateFolderPolicyArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUpdateFolderPolicyArgSerializer

+ (NSDictionary *)serialize:(DBSHARINGUpdateFolderPolicyArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_id"] = valueObj.sharedFolderId;
  if (valueObj.memberPolicy) {
    jsonDict[@"member_policy"] = [DBSHARINGMemberPolicySerializer serialize:valueObj.memberPolicy];
  }
  if (valueObj.aclUpdatePolicy) {
    jsonDict[@"acl_update_policy"] = [DBSHARINGAclUpdatePolicySerializer serialize:valueObj.aclUpdatePolicy];
  }
  if (valueObj.sharedLinkPolicy) {
    jsonDict[@"shared_link_policy"] = [DBSHARINGSharedLinkPolicySerializer serialize:valueObj.sharedLinkPolicy];
  }

  return jsonDict;
}

+ (DBSHARINGUpdateFolderPolicyArg *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedFolderId = valueDict[@"shared_folder_id"];
  DBSHARINGMemberPolicy *memberPolicy =
      valueDict[@"member_policy"] ? [DBSHARINGMemberPolicySerializer deserialize:valueDict[@"member_policy"]] : nil;
  DBSHARINGAclUpdatePolicy *aclUpdatePolicy =
      valueDict[@"acl_update_policy"] ? [DBSHARINGAclUpdatePolicySerializer deserialize:valueDict[@"acl_update_policy"]]
                                      : nil;
  DBSHARINGSharedLinkPolicy *sharedLinkPolicy =
      valueDict[@"shared_link_policy"]
          ? [DBSHARINGSharedLinkPolicySerializer deserialize:valueDict[@"shared_link_policy"]]
          : nil;

  return [[DBSHARINGUpdateFolderPolicyArg alloc] initWithSharedFolderId:sharedFolderId
                                                           memberPolicy:memberPolicy
                                                        aclUpdatePolicy:aclUpdatePolicy
                                                       sharedLinkPolicy:sharedLinkPolicy];
}

@end

#import "DBSHARINGSharedFolderAccessError.h"
#import "DBSHARINGUpdateFolderPolicyError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUpdateFolderPolicyError

@synthesize accessError = _accessError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBSHARINGSharedFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithNotOnTeam {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorNotOnTeam;
  }
  return self;
}

- (instancetype)initWithTeamPolicyDisallowsMemberPolicy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy;
  }
  return self;
}

- (instancetype)initWithDisallowedSharedLinkPolicy {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGUpdateFolderPolicyErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBSHARINGSharedFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBSHARINGUpdateFolderPolicyErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBSHARINGUpdateFolderPolicyErrorAccessError;
}

- (BOOL)isNotOnTeam {
  return _tag == DBSHARINGUpdateFolderPolicyErrorNotOnTeam;
}

- (BOOL)isTeamPolicyDisallowsMemberPolicy {
  return _tag == DBSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy;
}

- (BOOL)isDisallowedSharedLinkPolicy {
  return _tag == DBSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy;
}

- (BOOL)isNoPermission {
  return _tag == DBSHARINGUpdateFolderPolicyErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBSHARINGUpdateFolderPolicyErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGUpdateFolderPolicyErrorAccessError:
    return @"DBSHARINGUpdateFolderPolicyErrorAccessError";
  case DBSHARINGUpdateFolderPolicyErrorNotOnTeam:
    return @"DBSHARINGUpdateFolderPolicyErrorNotOnTeam";
  case DBSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy:
    return @"DBSHARINGUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy";
  case DBSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy:
    return @"DBSHARINGUpdateFolderPolicyErrorDisallowedSharedLinkPolicy";
  case DBSHARINGUpdateFolderPolicyErrorNoPermission:
    return @"DBSHARINGUpdateFolderPolicyErrorNoPermission";
  case DBSHARINGUpdateFolderPolicyErrorOther:
    return @"DBSHARINGUpdateFolderPolicyErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUpdateFolderPolicyErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUpdateFolderPolicyErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUpdateFolderPolicyErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUpdateFolderPolicyErrorSerializer

+ (NSDictionary *)serialize:(DBSHARINGUpdateFolderPolicyError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] =
        [[DBSHARINGSharedFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isNotOnTeam]) {
    jsonDict[@".tag"] = @"not_on_team";
  } else if ([valueObj isTeamPolicyDisallowsMemberPolicy]) {
    jsonDict[@".tag"] = @"team_policy_disallows_member_policy";
  } else if ([valueObj isDisallowedSharedLinkPolicy]) {
    jsonDict[@".tag"] = @"disallowed_shared_link_policy";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGUpdateFolderPolicyError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBSHARINGSharedFolderAccessError *accessError =
        [DBSHARINGSharedFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"not_on_team"]) {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithNotOnTeam];
  } else if ([tag isEqualToString:@"team_policy_disallows_member_policy"]) {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithTeamPolicyDisallowsMemberPolicy];
  } else if ([tag isEqualToString:@"disallowed_shared_link_policy"]) {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithDisallowedSharedLinkPolicy];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithOther];
  } else {
    return [[DBSHARINGUpdateFolderPolicyError alloc] initWithOther];
  }
}
@end

#import "DBSHARINGUserInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUserInfo

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId
                         sameTeam:(NSNumber *)sameTeam
                     teamMemberId:(NSString *)teamMemberId {
  [DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil](accountId);

  self = [super init];
  if (self) {
    _accountId = accountId;
    _sameTeam = sameTeam;
    _teamMemberId = teamMemberId;
  }
  return self;
}

- (instancetype)initWithAccountId:(NSString *)accountId sameTeam:(NSNumber *)sameTeam {
  return [self initWithAccountId:accountId sameTeam:sameTeam teamMemberId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUserInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUserInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUserInfoSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUserInfoSerializer

+ (NSDictionary *)serialize:(DBSHARINGUserInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"account_id"] = valueObj.accountId;
  jsonDict[@"same_team"] = valueObj.sameTeam;
  if (valueObj.teamMemberId) {
    jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  }

  return jsonDict;
}

+ (DBSHARINGUserInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *accountId = valueDict[@"account_id"];
  NSNumber *sameTeam = valueDict[@"same_team"];
  NSString *teamMemberId = valueDict[@"team_member_id"] ?: nil;

  return [[DBSHARINGUserInfo alloc] initWithAccountId:accountId sameTeam:sameTeam teamMemberId:teamMemberId];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBSHARINGMemberPermission.h"
#import "DBSHARINGMembershipInfo.h"
#import "DBSHARINGUserInfo.h"
#import "DBSHARINGUserMembershipInfo.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGUserMembershipInfo

#pragma mark - Constructors

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType
                              user:(DBSHARINGUserInfo *)user
                       permissions:(NSArray<DBSHARINGMemberPermission *> *)permissions
                          initials:(NSString *)initials
                       isInherited:(NSNumber *)isInherited {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](permissions);

  self = [super initWithAccessType:accessType permissions:permissions initials:initials isInherited:isInherited];
  if (self) {
    _user = user;
  }
  return self;
}

- (instancetype)initWithAccessType:(DBSHARINGAccessLevel *)accessType user:(DBSHARINGUserInfo *)user {
  return [self initWithAccessType:accessType user:user permissions:nil initials:nil isInherited:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGUserMembershipInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGUserMembershipInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGUserMembershipInfoSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGUserMembershipInfoSerializer

+ (NSDictionary *)serialize:(DBSHARINGUserMembershipInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_type"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.accessType];
  jsonDict[@"user"] = [DBSHARINGUserInfoSerializer serialize:valueObj.user];
  if (valueObj.permissions) {
    jsonDict[@"permissions"] = [DBArraySerializer serialize:valueObj.permissions
                                                  withBlock:^id(id elem) {
                                                    return [DBSHARINGMemberPermissionSerializer serialize:elem];
                                                  }];
  }
  if (valueObj.initials) {
    jsonDict[@"initials"] = valueObj.initials;
  }
  jsonDict[@"is_inherited"] = valueObj.isInherited;

  return jsonDict;
}

+ (DBSHARINGUserMembershipInfo *)deserialize:(NSDictionary *)valueDict {
  DBSHARINGAccessLevel *accessType = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"access_type"]];
  DBSHARINGUserInfo *user = [DBSHARINGUserInfoSerializer deserialize:valueDict[@"user"]];
  NSArray<DBSHARINGMemberPermission *> *permissions =
      valueDict[@"permissions"] ? [DBArraySerializer deserialize:valueDict[@"permissions"]
                                                       withBlock:^id(id elem) {
                                                         return [DBSHARINGMemberPermissionSerializer deserialize:elem];
                                                       }]
                                : nil;
  NSString *initials = valueDict[@"initials"] ?: nil;
  NSNumber *isInherited = valueDict[@"is_inherited"] ?: @NO;

  return [[DBSHARINGUserMembershipInfo alloc] initWithAccessType:accessType
                                                            user:user
                                                     permissions:permissions
                                                        initials:initials
                                                     isInherited:isInherited];
}

@end

#import "DBSHARINGVisibility.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBSHARINGVisibility

#pragma mark - Constructors

- (instancetype)initWithPublic {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilityPublic;
  }
  return self;
}

- (instancetype)initWithTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilityTeamOnly;
  }
  return self;
}

- (instancetype)initWithPassword {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilityPassword;
  }
  return self;
}

- (instancetype)initWithTeamAndPassword {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilityTeamAndPassword;
  }
  return self;
}

- (instancetype)initWithSharedFolderOnly {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilitySharedFolderOnly;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBSHARINGVisibilityOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isPublic {
  return _tag == DBSHARINGVisibilityPublic;
}

- (BOOL)isTeamOnly {
  return _tag == DBSHARINGVisibilityTeamOnly;
}

- (BOOL)isPassword {
  return _tag == DBSHARINGVisibilityPassword;
}

- (BOOL)isTeamAndPassword {
  return _tag == DBSHARINGVisibilityTeamAndPassword;
}

- (BOOL)isSharedFolderOnly {
  return _tag == DBSHARINGVisibilitySharedFolderOnly;
}

- (BOOL)isOther {
  return _tag == DBSHARINGVisibilityOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBSHARINGVisibilityPublic:
    return @"DBSHARINGVisibilityPublic";
  case DBSHARINGVisibilityTeamOnly:
    return @"DBSHARINGVisibilityTeamOnly";
  case DBSHARINGVisibilityPassword:
    return @"DBSHARINGVisibilityPassword";
  case DBSHARINGVisibilityTeamAndPassword:
    return @"DBSHARINGVisibilityTeamAndPassword";
  case DBSHARINGVisibilitySharedFolderOnly:
    return @"DBSHARINGVisibilitySharedFolderOnly";
  case DBSHARINGVisibilityOther:
    return @"DBSHARINGVisibilityOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBSHARINGVisibilitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBSHARINGVisibilitySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBSHARINGVisibilitySerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBSHARINGVisibilitySerializer

+ (NSDictionary *)serialize:(DBSHARINGVisibility *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPublic]) {
    jsonDict[@".tag"] = @"public";
  } else if ([valueObj isTeamOnly]) {
    jsonDict[@".tag"] = @"team_only";
  } else if ([valueObj isPassword]) {
    jsonDict[@".tag"] = @"password";
  } else if ([valueObj isTeamAndPassword]) {
    jsonDict[@".tag"] = @"team_and_password";
  } else if ([valueObj isSharedFolderOnly]) {
    jsonDict[@".tag"] = @"shared_folder_only";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBSHARINGVisibility *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"public"]) {
    return [[DBSHARINGVisibility alloc] initWithPublic];
  } else if ([tag isEqualToString:@"team_only"]) {
    return [[DBSHARINGVisibility alloc] initWithTeamOnly];
  } else if ([tag isEqualToString:@"password"]) {
    return [[DBSHARINGVisibility alloc] initWithPassword];
  } else if ([tag isEqualToString:@"team_and_password"]) {
    return [[DBSHARINGVisibility alloc] initWithTeamAndPassword];
  } else if ([tag isEqualToString:@"shared_folder_only"]) {
    return [[DBSHARINGVisibility alloc] initWithSharedFolderOnly];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBSHARINGVisibility alloc] initWithOther];
  } else {
    return [[DBSHARINGVisibility alloc] initWithOther];
  }
}
@end
