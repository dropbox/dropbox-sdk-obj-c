///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `Properties` namespace.

#import "DBPROPERTIESGetPropertyTemplateArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESGetPropertyTemplateArg

#pragma mark - Constructors

- (instancetype)initWithTemplateId:(NSString *)templateId {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"(/|ptid:).*"](templateId);

  self = [super init];
  if (self) {
    _templateId = templateId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESGetPropertyTemplateArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESGetPropertyTemplateArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESGetPropertyTemplateArgSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESGetPropertyTemplateArgSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESGetPropertyTemplateArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"template_id"] = valueObj.templateId;

  return jsonDict;
}

+ (DBPROPERTIESGetPropertyTemplateArg *)deserialize:(NSDictionary *)valueDict {
  NSString *templateId = valueDict[@"template_id"];

  return [[DBPROPERTIESGetPropertyTemplateArg alloc] initWithTemplateId:templateId];
}

@end

#import "DBPROPERTIESPropertyFieldTemplate.h"
#import "DBPROPERTIESPropertyGroupTemplate.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESPropertyGroupTemplate

#pragma mark - Constructors

- (instancetype)initWithName:(NSString *)name
                description_:(NSString *)description_
                      fields:(NSArray<DBPROPERTIESPropertyFieldTemplate *> *)fields {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](fields);

  self = [super init];
  if (self) {
    _name = name;
    _description_ = description_;
    _fields = fields;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESPropertyGroupTemplateSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESPropertyGroupTemplateSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESPropertyGroupTemplateSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESPropertyGroupTemplateSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESPropertyGroupTemplate *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"description"] = valueObj.description_;
  jsonDict[@"fields"] = [DBArraySerializer serialize:valueObj.fields
                                           withBlock:^id(id elem) {
                                             return [DBPROPERTIESPropertyFieldTemplateSerializer serialize:elem];
                                           }];

  return jsonDict;
}

+ (DBPROPERTIESPropertyGroupTemplate *)deserialize:(NSDictionary *)valueDict {
  NSString *name = valueDict[@"name"];
  NSString *description_ = valueDict[@"description"];
  NSArray<DBPROPERTIESPropertyFieldTemplate *> *fields =
      [DBArraySerializer deserialize:valueDict[@"fields"]
                           withBlock:^id(id elem) {
                             return [DBPROPERTIESPropertyFieldTemplateSerializer deserialize:elem];
                           }];

  return [[DBPROPERTIESPropertyGroupTemplate alloc] initWithName:name description_:description_ fields:fields];
}

@end

#import "DBPROPERTIESGetPropertyTemplateResult.h"
#import "DBPROPERTIESPropertyFieldTemplate.h"
#import "DBPROPERTIESPropertyGroupTemplate.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESGetPropertyTemplateResult

#pragma mark - Constructors

- (instancetype)initWithName:(NSString *)name
                description_:(NSString *)description_
                      fields:(NSArray<DBPROPERTIESPropertyFieldTemplate *> *)fields {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](fields);

  self = [super initWithName:name description_:description_ fields:fields];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESGetPropertyTemplateResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESGetPropertyTemplateResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESGetPropertyTemplateResultSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESGetPropertyTemplateResultSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESGetPropertyTemplateResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"description"] = valueObj.description_;
  jsonDict[@"fields"] = [DBArraySerializer serialize:valueObj.fields
                                           withBlock:^id(id elem) {
                                             return [DBPROPERTIESPropertyFieldTemplateSerializer serialize:elem];
                                           }];

  return jsonDict;
}

+ (DBPROPERTIESGetPropertyTemplateResult *)deserialize:(NSDictionary *)valueDict {
  NSString *name = valueDict[@"name"];
  NSString *description_ = valueDict[@"description"];
  NSArray<DBPROPERTIESPropertyFieldTemplate *> *fields =
      [DBArraySerializer deserialize:valueDict[@"fields"]
                           withBlock:^id(id elem) {
                             return [DBPROPERTIESPropertyFieldTemplateSerializer deserialize:elem];
                           }];

  return [[DBPROPERTIESGetPropertyTemplateResult alloc] initWithName:name description_:description_ fields:fields];
}

@end

#import "DBPROPERTIESListPropertyTemplateIds.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESListPropertyTemplateIds

#pragma mark - Constructors

- (instancetype)initWithTemplateIds:(NSArray<NSString *> *)templateIds {
  [DBStoneValidators arrayValidator:nil maxItems:nil
                      itemValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"(/|ptid:).*"]](
      templateIds);

  self = [super init];
  if (self) {
    _templateIds = templateIds;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESListPropertyTemplateIdsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESListPropertyTemplateIdsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESListPropertyTemplateIdsSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESListPropertyTemplateIdsSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESListPropertyTemplateIds *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"template_ids"] = [DBArraySerializer serialize:valueObj.templateIds
                                                 withBlock:^id(id elem) {
                                                   return elem;
                                                 }];

  return jsonDict;
}

+ (DBPROPERTIESListPropertyTemplateIds *)deserialize:(NSDictionary *)valueDict {
  NSArray<NSString *> *templateIds = [DBArraySerializer deserialize:valueDict[@"template_ids"]
                                                          withBlock:^id(id elem) {
                                                            return elem;
                                                          }];

  return [[DBPROPERTIESListPropertyTemplateIds alloc] initWithTemplateIds:templateIds];
}

@end

#import "DBPROPERTIESPropertyTemplateError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESPropertyTemplateError

@synthesize templateNotFound = _templateNotFound;

#pragma mark - Constructors

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESPropertyTemplateErrorTemplateNotFound;
    _templateNotFound = templateNotFound;
  }
  return self;
}

- (instancetype)initWithRestrictedContent {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESPropertyTemplateErrorRestrictedContent;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESPropertyTemplateErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)templateNotFound {
  if (![self isTemplateNotFound]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBPROPERTIESPropertyTemplateErrorTemplateNotFound, but was %@.", [self tagName]];
  }
  return _templateNotFound;
}

#pragma mark - Tag state methods

- (BOOL)isTemplateNotFound {
  return _tag == DBPROPERTIESPropertyTemplateErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
  return _tag == DBPROPERTIESPropertyTemplateErrorRestrictedContent;
}

- (BOOL)isOther {
  return _tag == DBPROPERTIESPropertyTemplateErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBPROPERTIESPropertyTemplateErrorTemplateNotFound:
    return @"DBPROPERTIESPropertyTemplateErrorTemplateNotFound";
  case DBPROPERTIESPropertyTemplateErrorRestrictedContent:
    return @"DBPROPERTIESPropertyTemplateErrorRestrictedContent";
  case DBPROPERTIESPropertyTemplateErrorOther:
    return @"DBPROPERTIESPropertyTemplateErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESPropertyTemplateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESPropertyTemplateErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESPropertyTemplateErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESPropertyTemplateErrorSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESPropertyTemplateError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTemplateNotFound]) {
    jsonDict[@"template_not_found"] = valueObj.templateNotFound;
    jsonDict[@".tag"] = @"template_not_found";
  } else if ([valueObj isRestrictedContent]) {
    jsonDict[@".tag"] = @"restricted_content";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBPROPERTIESPropertyTemplateError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"template_not_found"]) {
    NSString *templateNotFound = valueDict[@"template_not_found"];
    return [[DBPROPERTIESPropertyTemplateError alloc] initWithTemplateNotFound:templateNotFound];
  } else if ([tag isEqualToString:@"restricted_content"]) {
    return [[DBPROPERTIESPropertyTemplateError alloc] initWithRestrictedContent];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBPROPERTIESPropertyTemplateError alloc] initWithOther];
  } else {
    return [[DBPROPERTIESPropertyTemplateError alloc] initWithOther];
  }
}
@end

#import "DBPROPERTIESModifyPropertyTemplateError.h"
#import "DBPROPERTIESPropertyTemplateError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESModifyPropertyTemplateError

@synthesize templateNotFound = _templateNotFound;

#pragma mark - Constructors

- (instancetype)initWithTemplateNotFound:(NSString *)templateNotFound {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorTemplateNotFound;
    _templateNotFound = templateNotFound;
  }
  return self;
}

- (instancetype)initWithRestrictedContent {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorRestrictedContent;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorOther;
  }
  return self;
}

- (instancetype)initWithConflictingPropertyNames {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames;
  }
  return self;
}

- (instancetype)initWithTooManyProperties {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorTooManyProperties;
  }
  return self;
}

- (instancetype)initWithTooManyTemplates {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorTooManyTemplates;
  }
  return self;
}

- (instancetype)initWithTemplateAttributeTooLarge {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)templateNotFound {
  if (![self isTemplateNotFound]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBPROPERTIESModifyPropertyTemplateErrorTemplateNotFound, but was %@.",
                       [self tagName]];
  }
  return _templateNotFound;
}

#pragma mark - Tag state methods

- (BOOL)isTemplateNotFound {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorTemplateNotFound;
}

- (BOOL)isRestrictedContent {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorRestrictedContent;
}

- (BOOL)isOther {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorOther;
}

- (BOOL)isConflictingPropertyNames {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames;
}

- (BOOL)isTooManyProperties {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorTooManyProperties;
}

- (BOOL)isTooManyTemplates {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorTooManyTemplates;
}

- (BOOL)isTemplateAttributeTooLarge {
  return _tag == DBPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBPROPERTIESModifyPropertyTemplateErrorTemplateNotFound:
    return @"DBPROPERTIESModifyPropertyTemplateErrorTemplateNotFound";
  case DBPROPERTIESModifyPropertyTemplateErrorRestrictedContent:
    return @"DBPROPERTIESModifyPropertyTemplateErrorRestrictedContent";
  case DBPROPERTIESModifyPropertyTemplateErrorOther:
    return @"DBPROPERTIESModifyPropertyTemplateErrorOther";
  case DBPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames:
    return @"DBPROPERTIESModifyPropertyTemplateErrorConflictingPropertyNames";
  case DBPROPERTIESModifyPropertyTemplateErrorTooManyProperties:
    return @"DBPROPERTIESModifyPropertyTemplateErrorTooManyProperties";
  case DBPROPERTIESModifyPropertyTemplateErrorTooManyTemplates:
    return @"DBPROPERTIESModifyPropertyTemplateErrorTooManyTemplates";
  case DBPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge:
    return @"DBPROPERTIESModifyPropertyTemplateErrorTemplateAttributeTooLarge";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESModifyPropertyTemplateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESModifyPropertyTemplateErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESModifyPropertyTemplateErrorSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESModifyPropertyTemplateErrorSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESModifyPropertyTemplateError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTemplateNotFound]) {
    jsonDict[@"template_not_found"] = valueObj.templateNotFound;
    jsonDict[@".tag"] = @"template_not_found";
  } else if ([valueObj isRestrictedContent]) {
    jsonDict[@".tag"] = @"restricted_content";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isConflictingPropertyNames]) {
    jsonDict[@".tag"] = @"conflicting_property_names";
  } else if ([valueObj isTooManyProperties]) {
    jsonDict[@".tag"] = @"too_many_properties";
  } else if ([valueObj isTooManyTemplates]) {
    jsonDict[@".tag"] = @"too_many_templates";
  } else if ([valueObj isTemplateAttributeTooLarge]) {
    jsonDict[@".tag"] = @"template_attribute_too_large";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBPROPERTIESModifyPropertyTemplateError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"template_not_found"]) {
    NSString *templateNotFound = valueDict[@"template_not_found"];
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithTemplateNotFound:templateNotFound];
  } else if ([tag isEqualToString:@"restricted_content"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithRestrictedContent];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithOther];
  } else if ([tag isEqualToString:@"conflicting_property_names"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithConflictingPropertyNames];
  } else if ([tag isEqualToString:@"too_many_properties"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithTooManyProperties];
  } else if ([tag isEqualToString:@"too_many_templates"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithTooManyTemplates];
  } else if ([tag isEqualToString:@"template_attribute_too_large"]) {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithTemplateAttributeTooLarge];
  } else {
    return [[DBPROPERTIESModifyPropertyTemplateError alloc] initWithOther];
  }
}
@end

#import "DBPROPERTIESPropertyField.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESPropertyField

#pragma mark - Constructors

- (instancetype)initWithName:(NSString *)name value:(NSString *)value {

  self = [super init];
  if (self) {
    _name = name;
    _value = value;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESPropertyFieldSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESPropertyFieldSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESPropertyFieldSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESPropertyFieldSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESPropertyField *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"value"] = valueObj.value;

  return jsonDict;
}

+ (DBPROPERTIESPropertyField *)deserialize:(NSDictionary *)valueDict {
  NSString *name = valueDict[@"name"];
  NSString *value = valueDict[@"value"];

  return [[DBPROPERTIESPropertyField alloc] initWithName:name value:value];
}

@end

#import "DBPROPERTIESPropertyFieldTemplate.h"
#import "DBPROPERTIESPropertyType.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESPropertyFieldTemplate

#pragma mark - Constructors

- (instancetype)initWithName:(NSString *)name
                description_:(NSString *)description_
                        type:(DBPROPERTIESPropertyType *)type {

  self = [super init];
  if (self) {
    _name = name;
    _description_ = description_;
    _type = type;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESPropertyFieldTemplateSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESPropertyFieldTemplateSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESPropertyFieldTemplateSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESPropertyFieldTemplateSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESPropertyFieldTemplate *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"description"] = valueObj.description_;
  jsonDict[@"type"] = [DBPROPERTIESPropertyTypeSerializer serialize:valueObj.type];

  return jsonDict;
}

+ (DBPROPERTIESPropertyFieldTemplate *)deserialize:(NSDictionary *)valueDict {
  NSString *name = valueDict[@"name"];
  NSString *description_ = valueDict[@"description"];
  DBPROPERTIESPropertyType *type = [DBPROPERTIESPropertyTypeSerializer deserialize:valueDict[@"type"]];

  return [[DBPROPERTIESPropertyFieldTemplate alloc] initWithName:name description_:description_ type:type];
}

@end

#import "DBPROPERTIESPropertyField.h"
#import "DBPROPERTIESPropertyGroup.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESPropertyGroup

#pragma mark - Constructors

- (instancetype)initWithTemplateId:(NSString *)templateId fields:(NSArray<DBPROPERTIESPropertyField *> *)fields {
  [DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"(/|ptid:).*"](templateId);
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](fields);

  self = [super init];
  if (self) {
    _templateId = templateId;
    _fields = fields;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESPropertyGroupSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESPropertyGroupSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESPropertyGroupSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESPropertyGroupSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESPropertyGroup *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"template_id"] = valueObj.templateId;
  jsonDict[@"fields"] = [DBArraySerializer serialize:valueObj.fields
                                           withBlock:^id(id elem) {
                                             return [DBPROPERTIESPropertyFieldSerializer serialize:elem];
                                           }];

  return jsonDict;
}

+ (DBPROPERTIESPropertyGroup *)deserialize:(NSDictionary *)valueDict {
  NSString *templateId = valueDict[@"template_id"];
  NSArray<DBPROPERTIESPropertyField *> *fields =
      [DBArraySerializer deserialize:valueDict[@"fields"]
                           withBlock:^id(id elem) {
                             return [DBPROPERTIESPropertyFieldSerializer deserialize:elem];
                           }];

  return [[DBPROPERTIESPropertyGroup alloc] initWithTemplateId:templateId fields:fields];
}

@end

#import "DBPROPERTIESPropertyType.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBPROPERTIESPropertyType

#pragma mark - Constructors

- (instancetype)initWithString {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESPropertyTypeString;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBPROPERTIESPropertyTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isString {
  return _tag == DBPROPERTIESPropertyTypeString;
}

- (BOOL)isOther {
  return _tag == DBPROPERTIESPropertyTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBPROPERTIESPropertyTypeString:
    return @"DBPROPERTIESPropertyTypeString";
  case DBPROPERTIESPropertyTypeOther:
    return @"DBPROPERTIESPropertyTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBPROPERTIESPropertyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBPROPERTIESPropertyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBPROPERTIESPropertyTypeSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBPROPERTIESPropertyTypeSerializer

+ (NSDictionary *)serialize:(DBPROPERTIESPropertyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isString]) {
    jsonDict[@".tag"] = @"string";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBPROPERTIESPropertyType *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"string"]) {
    return [[DBPROPERTIESPropertyType alloc] initWithString];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBPROPERTIESPropertyType alloc] initWithOther];
  } else {
    return [[DBPROPERTIESPropertyType alloc] initWithOther];
  }
}
@end
