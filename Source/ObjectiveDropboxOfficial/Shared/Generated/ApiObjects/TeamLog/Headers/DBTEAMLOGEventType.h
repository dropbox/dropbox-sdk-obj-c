///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBSerializableProtocol.h"

@class DBTEAMLOGAccountCaptureChangeAvailabilityType;
@class DBTEAMLOGAccountCaptureChangePolicyType;
@class DBTEAMLOGAccountCaptureMigrateAccountType;
@class DBTEAMLOGAccountCaptureNotificationEmailsSentType;
@class DBTEAMLOGAccountCaptureRelinquishAccountType;
@class DBTEAMLOGAllowDownloadDisabledType;
@class DBTEAMLOGAllowDownloadEnabledType;
@class DBTEAMLOGAppLinkTeamType;
@class DBTEAMLOGAppLinkUserType;
@class DBTEAMLOGAppUnlinkTeamType;
@class DBTEAMLOGAppUnlinkUserType;
@class DBTEAMLOGCollectionShareType;
@class DBTEAMLOGCreateFolderType;
@class DBTEAMLOGDataPlacementRestrictionChangePolicyType;
@class DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType;
@class DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType;
@class DBTEAMLOGDeviceApprovalsChangeMobilePolicyType;
@class DBTEAMLOGDeviceApprovalsChangeOverageActionType;
@class DBTEAMLOGDeviceApprovalsChangeUnlinkActionType;
@class DBTEAMLOGDeviceChangeIpDesktopType;
@class DBTEAMLOGDeviceChangeIpMobileType;
@class DBTEAMLOGDeviceChangeIpWebType;
@class DBTEAMLOGDeviceDeleteOnUnlinkFailType;
@class DBTEAMLOGDeviceDeleteOnUnlinkSuccessType;
@class DBTEAMLOGDeviceLinkFailType;
@class DBTEAMLOGDeviceLinkSuccessType;
@class DBTEAMLOGDeviceManagementDisabledType;
@class DBTEAMLOGDeviceManagementEnabledType;
@class DBTEAMLOGDeviceUnlinkType;
@class DBTEAMLOGDirectoryRestrictionsAddMembersType;
@class DBTEAMLOGDirectoryRestrictionsRemoveMembersType;
@class DBTEAMLOGDisabledDomainInvitesType;
@class DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType;
@class DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType;
@class DBTEAMLOGDomainInvitesEmailExistingUsersType;
@class DBTEAMLOGDomainInvitesRequestToJoinTeamType;
@class DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType;
@class DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType;
@class DBTEAMLOGDomainVerificationAddDomainFailType;
@class DBTEAMLOGDomainVerificationAddDomainSuccessType;
@class DBTEAMLOGDomainVerificationRemoveDomainType;
@class DBTEAMLOGEmmAddExceptionType;
@class DBTEAMLOGEmmChangePolicyType;
@class DBTEAMLOGEmmCreateExceptionsReportType;
@class DBTEAMLOGEmmCreateUsageReportType;
@class DBTEAMLOGEmmErrorType;
@class DBTEAMLOGEmmRefreshAuthTokenType;
@class DBTEAMLOGEmmRemoveExceptionType;
@class DBTEAMLOGEnabledDomainInvitesType;
@class DBTEAMLOGEventType;
@class DBTEAMLOGExportMembersReportType;
@class DBTEAMLOGExtendedVersionHistoryChangePolicyType;
@class DBTEAMLOGFileAddCommentType;
@class DBTEAMLOGFileAddType;
@class DBTEAMLOGFileChangeCommentSubscriptionType;
@class DBTEAMLOGFileCommentsChangePolicyType;
@class DBTEAMLOGFileCopyType;
@class DBTEAMLOGFileDeleteCommentType;
@class DBTEAMLOGFileDeleteType;
@class DBTEAMLOGFileDownloadType;
@class DBTEAMLOGFileEditType;
@class DBTEAMLOGFileGetCopyReferenceType;
@class DBTEAMLOGFileLikeCommentType;
@class DBTEAMLOGFileMoveType;
@class DBTEAMLOGFilePermanentlyDeleteType;
@class DBTEAMLOGFilePreviewType;
@class DBTEAMLOGFileRenameType;
@class DBTEAMLOGFileRequestChangeType;
@class DBTEAMLOGFileRequestCloseType;
@class DBTEAMLOGFileRequestCreateType;
@class DBTEAMLOGFileRequestReceiveFileType;
@class DBTEAMLOGFileRequestsChangePolicyType;
@class DBTEAMLOGFileRequestsEmailsEnabledType;
@class DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType;
@class DBTEAMLOGFileResolveCommentType;
@class DBTEAMLOGFileRestoreType;
@class DBTEAMLOGFileRevertType;
@class DBTEAMLOGFileRollbackChangesType;
@class DBTEAMLOGFileSaveCopyReferenceType;
@class DBTEAMLOGFileUnlikeCommentType;
@class DBTEAMLOGFileUnresolveCommentType;
@class DBTEAMLOGGoogleSsoChangePolicyType;
@class DBTEAMLOGGroupAddExternalIdType;
@class DBTEAMLOGGroupAddMemberType;
@class DBTEAMLOGGroupChangeExternalIdType;
@class DBTEAMLOGGroupChangeManagementTypeType;
@class DBTEAMLOGGroupChangeMemberRoleType;
@class DBTEAMLOGGroupCreateType;
@class DBTEAMLOGGroupDeleteType;
@class DBTEAMLOGGroupDescriptionUpdatedType;
@class DBTEAMLOGGroupJoinPolicyUpdatedType;
@class DBTEAMLOGGroupMovedType;
@class DBTEAMLOGGroupRemoveExternalIdType;
@class DBTEAMLOGGroupRemoveMemberType;
@class DBTEAMLOGGroupRenameType;
@class DBTEAMLOGGroupUserManagementChangePolicyType;
@class DBTEAMLOGLoginFailType;
@class DBTEAMLOGLoginSuccessType;
@class DBTEAMLOGLogoutType;
@class DBTEAMLOGMemberAddNameType;
@class DBTEAMLOGMemberChangeAdminRoleType;
@class DBTEAMLOGMemberChangeEmailType;
@class DBTEAMLOGMemberChangeMembershipTypeType;
@class DBTEAMLOGMemberChangeNameType;
@class DBTEAMLOGMemberChangeStatusType;
@class DBTEAMLOGMemberPermanentlyDeleteAccountContentsType;
@class DBTEAMLOGMemberRequestsChangePolicyType;
@class DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType;
@class DBTEAMLOGMemberSpaceLimitsAddExceptionType;
@class DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType;
@class DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType;
@class DBTEAMLOGMemberSpaceLimitsChangePolicyType;
@class DBTEAMLOGMemberSpaceLimitsChangeStatusType;
@class DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType;
@class DBTEAMLOGMemberSpaceLimitsRemoveExceptionType;
@class DBTEAMLOGMemberSuggestType;
@class DBTEAMLOGMemberSuggestionsChangePolicyType;
@class DBTEAMLOGMemberTransferAccountContentsType;
@class DBTEAMLOGMicrosoftOfficeAddinChangePolicyType;
@class DBTEAMLOGNetworkControlChangePolicyType;
@class DBTEAMLOGNoteAclInviteOnlyType;
@class DBTEAMLOGNoteAclLinkType;
@class DBTEAMLOGNoteAclTeamLinkType;
@class DBTEAMLOGNoteShareReceiveType;
@class DBTEAMLOGNoteSharedType;
@class DBTEAMLOGOpenNoteSharedType;
@class DBTEAMLOGPaperAdminExportStartType;
@class DBTEAMLOGPaperChangeDeploymentPolicyType;
@class DBTEAMLOGPaperChangeMemberLinkPolicyType;
@class DBTEAMLOGPaperChangeMemberPolicyType;
@class DBTEAMLOGPaperChangePolicyType;
@class DBTEAMLOGPaperContentAddMemberType;
@class DBTEAMLOGPaperContentAddToFolderType;
@class DBTEAMLOGPaperContentArchiveType;
@class DBTEAMLOGPaperContentCreateType;
@class DBTEAMLOGPaperContentPermanentlyDeleteType;
@class DBTEAMLOGPaperContentRemoveFromFolderType;
@class DBTEAMLOGPaperContentRemoveMemberType;
@class DBTEAMLOGPaperContentRenameType;
@class DBTEAMLOGPaperContentRestoreType;
@class DBTEAMLOGPaperDocAddCommentType;
@class DBTEAMLOGPaperDocChangeMemberRoleType;
@class DBTEAMLOGPaperDocChangeSharingPolicyType;
@class DBTEAMLOGPaperDocChangeSubscriptionType;
@class DBTEAMLOGPaperDocDeleteCommentType;
@class DBTEAMLOGPaperDocDeletedType;
@class DBTEAMLOGPaperDocDownloadType;
@class DBTEAMLOGPaperDocEditCommentType;
@class DBTEAMLOGPaperDocEditType;
@class DBTEAMLOGPaperDocFollowedType;
@class DBTEAMLOGPaperDocMentionType;
@class DBTEAMLOGPaperDocRequestAccessType;
@class DBTEAMLOGPaperDocResolveCommentType;
@class DBTEAMLOGPaperDocRevertType;
@class DBTEAMLOGPaperDocSlackShareType;
@class DBTEAMLOGPaperDocTeamInviteType;
@class DBTEAMLOGPaperDocTrashedType;
@class DBTEAMLOGPaperDocUnresolveCommentType;
@class DBTEAMLOGPaperDocUntrashedType;
@class DBTEAMLOGPaperDocViewType;
@class DBTEAMLOGPaperEnabledUsersGroupAdditionType;
@class DBTEAMLOGPaperEnabledUsersGroupRemovalType;
@class DBTEAMLOGPaperExternalViewAllowType;
@class DBTEAMLOGPaperExternalViewDefaultTeamType;
@class DBTEAMLOGPaperExternalViewForbidType;
@class DBTEAMLOGPaperFolderChangeSubscriptionType;
@class DBTEAMLOGPaperFolderDeletedType;
@class DBTEAMLOGPaperFolderFollowedType;
@class DBTEAMLOGPaperFolderTeamInviteType;
@class DBTEAMLOGPasswordChangeType;
@class DBTEAMLOGPasswordResetAllType;
@class DBTEAMLOGPasswordResetType;
@class DBTEAMLOGPermanentDeleteChangePolicyType;
@class DBTEAMLOGResellerSupportSessionEndType;
@class DBTEAMLOGResellerSupportSessionStartType;
@class DBTEAMLOGSecondaryMailsPolicyChangedType;
@class DBTEAMLOGSfAddGroupType;
@class DBTEAMLOGSfAllowNonMembersToViewSharedLinksType;
@class DBTEAMLOGSfExternalInviteWarnType;
@class DBTEAMLOGSfFbInviteChangeRoleType;
@class DBTEAMLOGSfFbInviteType;
@class DBTEAMLOGSfFbUninviteType;
@class DBTEAMLOGSfInviteGroupType;
@class DBTEAMLOGSfTeamGrantAccessType;
@class DBTEAMLOGSfTeamInviteChangeRoleType;
@class DBTEAMLOGSfTeamInviteType;
@class DBTEAMLOGSfTeamJoinFromOobLinkType;
@class DBTEAMLOGSfTeamJoinType;
@class DBTEAMLOGSfTeamUninviteType;
@class DBTEAMLOGSharedContentAddInviteesType;
@class DBTEAMLOGSharedContentAddLinkExpiryType;
@class DBTEAMLOGSharedContentAddLinkPasswordType;
@class DBTEAMLOGSharedContentAddMemberType;
@class DBTEAMLOGSharedContentChangeDownloadsPolicyType;
@class DBTEAMLOGSharedContentChangeInviteeRoleType;
@class DBTEAMLOGSharedContentChangeLinkAudienceType;
@class DBTEAMLOGSharedContentChangeLinkExpiryType;
@class DBTEAMLOGSharedContentChangeLinkPasswordType;
@class DBTEAMLOGSharedContentChangeMemberRoleType;
@class DBTEAMLOGSharedContentChangeViewerInfoPolicyType;
@class DBTEAMLOGSharedContentClaimInvitationType;
@class DBTEAMLOGSharedContentCopyType;
@class DBTEAMLOGSharedContentDownloadType;
@class DBTEAMLOGSharedContentRelinquishMembershipType;
@class DBTEAMLOGSharedContentRemoveInviteesType;
@class DBTEAMLOGSharedContentRemoveLinkExpiryType;
@class DBTEAMLOGSharedContentRemoveLinkPasswordType;
@class DBTEAMLOGSharedContentRemoveMemberType;
@class DBTEAMLOGSharedContentRequestAccessType;
@class DBTEAMLOGSharedContentUnshareType;
@class DBTEAMLOGSharedContentViewType;
@class DBTEAMLOGSharedFolderChangeLinkPolicyType;
@class DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType;
@class DBTEAMLOGSharedFolderChangeMembersManagementPolicyType;
@class DBTEAMLOGSharedFolderChangeMembersPolicyType;
@class DBTEAMLOGSharedFolderCreateType;
@class DBTEAMLOGSharedFolderDeclineInvitationType;
@class DBTEAMLOGSharedFolderMountType;
@class DBTEAMLOGSharedFolderNestType;
@class DBTEAMLOGSharedFolderTransferOwnershipType;
@class DBTEAMLOGSharedFolderUnmountType;
@class DBTEAMLOGSharedLinkAddExpiryType;
@class DBTEAMLOGSharedLinkChangeExpiryType;
@class DBTEAMLOGSharedLinkChangeVisibilityType;
@class DBTEAMLOGSharedLinkCopyType;
@class DBTEAMLOGSharedLinkCreateType;
@class DBTEAMLOGSharedLinkDisableType;
@class DBTEAMLOGSharedLinkDownloadType;
@class DBTEAMLOGSharedLinkRemoveExpiryType;
@class DBTEAMLOGSharedLinkShareType;
@class DBTEAMLOGSharedLinkViewType;
@class DBTEAMLOGSharedNoteOpenedType;
@class DBTEAMLOGSharingChangeFolderJoinPolicyType;
@class DBTEAMLOGSharingChangeLinkPolicyType;
@class DBTEAMLOGSharingChangeMemberPolicyType;
@class DBTEAMLOGShmodelGroupShareType;
@class DBTEAMLOGShowcaseAccessGrantedType;
@class DBTEAMLOGShowcaseAddMemberType;
@class DBTEAMLOGShowcaseArchivedType;
@class DBTEAMLOGShowcaseChangeDownloadPolicyType;
@class DBTEAMLOGShowcaseChangeEnabledPolicyType;
@class DBTEAMLOGShowcaseChangeExternalSharingPolicyType;
@class DBTEAMLOGShowcaseCreatedType;
@class DBTEAMLOGShowcaseDeleteCommentType;
@class DBTEAMLOGShowcaseEditCommentType;
@class DBTEAMLOGShowcaseEditedType;
@class DBTEAMLOGShowcaseFileAddedType;
@class DBTEAMLOGShowcaseFileDownloadType;
@class DBTEAMLOGShowcaseFileRemovedType;
@class DBTEAMLOGShowcaseFileViewType;
@class DBTEAMLOGShowcasePermanentlyDeletedType;
@class DBTEAMLOGShowcasePostCommentType;
@class DBTEAMLOGShowcaseRemoveMemberType;
@class DBTEAMLOGShowcaseRenamedType;
@class DBTEAMLOGShowcaseRequestAccessType;
@class DBTEAMLOGShowcaseResolveCommentType;
@class DBTEAMLOGShowcaseRestoredType;
@class DBTEAMLOGShowcaseTrashedDeprecatedType;
@class DBTEAMLOGShowcaseTrashedType;
@class DBTEAMLOGShowcaseUnresolveCommentType;
@class DBTEAMLOGShowcaseUntrashedDeprecatedType;
@class DBTEAMLOGShowcaseUntrashedType;
@class DBTEAMLOGShowcaseViewType;
@class DBTEAMLOGSignInAsSessionEndType;
@class DBTEAMLOGSignInAsSessionStartType;
@class DBTEAMLOGSmartSyncChangePolicyType;
@class DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType;
@class DBTEAMLOGSmartSyncNotOptOutType;
@class DBTEAMLOGSmartSyncOptOutType;
@class DBTEAMLOGSsoAddCertType;
@class DBTEAMLOGSsoAddLoginUrlType;
@class DBTEAMLOGSsoAddLogoutUrlType;
@class DBTEAMLOGSsoChangeCertType;
@class DBTEAMLOGSsoChangeLoginUrlType;
@class DBTEAMLOGSsoChangeLogoutUrlType;
@class DBTEAMLOGSsoChangePolicyType;
@class DBTEAMLOGSsoChangeSamlIdentityModeType;
@class DBTEAMLOGSsoErrorType;
@class DBTEAMLOGSsoRemoveCertType;
@class DBTEAMLOGSsoRemoveLoginUrlType;
@class DBTEAMLOGSsoRemoveLogoutUrlType;
@class DBTEAMLOGTeamActivityCreateReportType;
@class DBTEAMLOGTeamFolderChangeStatusType;
@class DBTEAMLOGTeamFolderCreateType;
@class DBTEAMLOGTeamFolderDowngradeType;
@class DBTEAMLOGTeamFolderPermanentlyDeleteType;
@class DBTEAMLOGTeamFolderRenameType;
@class DBTEAMLOGTeamMergeFromType;
@class DBTEAMLOGTeamMergeToType;
@class DBTEAMLOGTeamProfileAddLogoType;
@class DBTEAMLOGTeamProfileChangeDefaultLanguageType;
@class DBTEAMLOGTeamProfileChangeLogoType;
@class DBTEAMLOGTeamProfileChangeNameType;
@class DBTEAMLOGTeamProfileRemoveLogoType;
@class DBTEAMLOGTeamSelectiveSyncSettingsChangedType;
@class DBTEAMLOGTfaAddBackupPhoneType;
@class DBTEAMLOGTfaAddSecurityKeyType;
@class DBTEAMLOGTfaChangeBackupPhoneType;
@class DBTEAMLOGTfaChangePolicyType;
@class DBTEAMLOGTfaChangeStatusType;
@class DBTEAMLOGTfaRemoveBackupPhoneType;
@class DBTEAMLOGTfaRemoveSecurityKeyType;
@class DBTEAMLOGTfaResetType;
@class DBTEAMLOGTwoAccountChangePolicyType;
@class DBTEAMLOGWebSessionsChangeFixedLengthPolicyType;
@class DBTEAMLOGWebSessionsChangeIdleLengthPolicyType;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - API Object

///
/// The `EventType` union.
///
/// The type of the event.
///
/// This class implements the `DBSerializable` protocol (serialize and
/// deserialize instance methods), which is required for all Obj-C SDK API route
/// objects.
///
@interface DBTEAMLOGEventType : NSObject <DBSerializable, NSCopying>

#pragma mark - Instance fields

/// The `DBTEAMLOGEventTypeTag` enum type represents the possible tag states
/// with which the `DBTEAMLOGEventType` union can exist.
typedef NS_ENUM(NSInteger, DBTEAMLOGEventTypeTag) {
  /// (apps) Linked app for team
  DBTEAMLOGEventTypeAppLinkTeam,

  /// (apps) Linked app for member
  DBTEAMLOGEventTypeAppLinkUser,

  /// (apps) Unlinked app for team
  DBTEAMLOGEventTypeAppUnlinkTeam,

  /// (apps) Unlinked app for member
  DBTEAMLOGEventTypeAppUnlinkUser,

  /// (comments) Added file comment
  DBTEAMLOGEventTypeFileAddComment,

  /// (comments) Subscribed to or unsubscribed from comment notifications for
  /// file
  DBTEAMLOGEventTypeFileChangeCommentSubscription,

  /// (comments) Deleted file comment
  DBTEAMLOGEventTypeFileDeleteComment,

  /// (comments) Liked file comment (deprecated, no longer logged)
  DBTEAMLOGEventTypeFileLikeComment,

  /// (comments) Resolved file comment
  DBTEAMLOGEventTypeFileResolveComment,

  /// (comments) Unliked file comment (deprecated, no longer logged)
  DBTEAMLOGEventTypeFileUnlikeComment,

  /// (comments) Unresolved file comment
  DBTEAMLOGEventTypeFileUnresolveComment,

  /// (devices) Changed IP address associated with active desktop session
  DBTEAMLOGEventTypeDeviceChangeIpDesktop,

  /// (devices) Changed IP address associated with active mobile session
  DBTEAMLOGEventTypeDeviceChangeIpMobile,

  /// (devices) Changed IP address associated with active web session
  DBTEAMLOGEventTypeDeviceChangeIpWeb,

  /// (devices) Failed to delete all files from unlinked device
  DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail,

  /// (devices) Deleted all files from unlinked device
  DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess,

  /// (devices) Failed to link device
  DBTEAMLOGEventTypeDeviceLinkFail,

  /// (devices) Linked device
  DBTEAMLOGEventTypeDeviceLinkSuccess,

  /// (devices) Disabled device management (deprecated, no longer logged)
  DBTEAMLOGEventTypeDeviceManagementDisabled,

  /// (devices) Enabled device management (deprecated, no longer logged)
  DBTEAMLOGEventTypeDeviceManagementEnabled,

  /// (devices) Disconnected device
  DBTEAMLOGEventTypeDeviceUnlink,

  /// (devices) Refreshed auth token used for setting up enterprise mobility
  /// management
  DBTEAMLOGEventTypeEmmRefreshAuthToken,

  /// (domains) Granted/revoked option to enable account capture on team
  /// domains
  DBTEAMLOGEventTypeAccountCaptureChangeAvailability,

  /// (domains) Account-captured user migrated account to team
  DBTEAMLOGEventTypeAccountCaptureMigrateAccount,

  /// (domains) Sent proactive account capture email to all unmanaged members
  DBTEAMLOGEventTypeAccountCaptureNotificationEmailsSent,

  /// (domains) Account-captured user changed account email to personal email
  DBTEAMLOGEventTypeAccountCaptureRelinquishAccount,

  /// (domains) Disabled domain invites (deprecated, no longer logged)
  DBTEAMLOGEventTypeDisabledDomainInvites,

  /// (domains) Approved user's request to join team
  DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam,

  /// (domains) Declined user's request to join team
  DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam,

  /// (domains) Sent domain invites to existing domain accounts (deprecated,
  /// no longer logged)
  DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers,

  /// (domains) Requested to join team
  DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam,

  /// (domains) Disabled "Automatically invite new users" (deprecated, no
  /// longer logged)
  DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo,

  /// (domains) Enabled "Automatically invite new users" (deprecated, no
  /// longer logged)
  DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes,

  /// (domains) Failed to verify team domain
  DBTEAMLOGEventTypeDomainVerificationAddDomainFail,

  /// (domains) Verified team domain
  DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess,

  /// (domains) Removed domain from list of verified team domains
  DBTEAMLOGEventTypeDomainVerificationRemoveDomain,

  /// (domains) Enabled domain invites (deprecated, no longer logged)
  DBTEAMLOGEventTypeEnabledDomainInvites,

  /// (file_operations) Created folders (deprecated, no longer logged)
  DBTEAMLOGEventTypeCreateFolder,

  /// (file_operations) Added files and/or folders
  DBTEAMLOGEventTypeFileAdd,

  /// (file_operations) Copied files and/or folders
  DBTEAMLOGEventTypeFileCopy,

  /// (file_operations) Deleted files and/or folders
  DBTEAMLOGEventTypeFileDelete,

  /// (file_operations) Downloaded files and/or folders
  DBTEAMLOGEventTypeFileDownload,

  /// (file_operations) Edited files
  DBTEAMLOGEventTypeFileEdit,

  /// (file_operations) Created copy reference to file/folder
  DBTEAMLOGEventTypeFileGetCopyReference,

  /// (file_operations) Moved files and/or folders
  DBTEAMLOGEventTypeFileMove,

  /// (file_operations) Permanently deleted files and/or folders
  DBTEAMLOGEventTypeFilePermanentlyDelete,

  /// (file_operations) Previewed files and/or folders
  DBTEAMLOGEventTypeFilePreview,

  /// (file_operations) Renamed files and/or folders
  DBTEAMLOGEventTypeFileRename,

  /// (file_operations) Restored deleted files and/or folders
  DBTEAMLOGEventTypeFileRestore,

  /// (file_operations) Reverted files to previous version
  DBTEAMLOGEventTypeFileRevert,

  /// (file_operations) Rolled back file actions
  DBTEAMLOGEventTypeFileRollbackChanges,

  /// (file_operations) Saved file/folder using copy reference
  DBTEAMLOGEventTypeFileSaveCopyReference,

  /// (file_requests) Changed file request
  DBTEAMLOGEventTypeFileRequestChange,

  /// (file_requests) Closed file request
  DBTEAMLOGEventTypeFileRequestClose,

  /// (file_requests) Created file request
  DBTEAMLOGEventTypeFileRequestCreate,

  /// (file_requests) Received files for file request
  DBTEAMLOGEventTypeFileRequestReceiveFile,

  /// (groups) Added external ID for group
  DBTEAMLOGEventTypeGroupAddExternalId,

  /// (groups) Added team members to group
  DBTEAMLOGEventTypeGroupAddMember,

  /// (groups) Changed external ID for group
  DBTEAMLOGEventTypeGroupChangeExternalId,

  /// (groups) Changed group management type
  DBTEAMLOGEventTypeGroupChangeManagementType,

  /// (groups) Changed manager permissions of group member
  DBTEAMLOGEventTypeGroupChangeMemberRole,

  /// (groups) Created group
  DBTEAMLOGEventTypeGroupCreate,

  /// (groups) Deleted group
  DBTEAMLOGEventTypeGroupDelete,

  /// (groups) Updated group (deprecated, no longer logged)
  DBTEAMLOGEventTypeGroupDescriptionUpdated,

  /// (groups) Updated group join policy (deprecated, no longer logged)
  DBTEAMLOGEventTypeGroupJoinPolicyUpdated,

  /// (groups) Moved group (deprecated, no longer logged)
  DBTEAMLOGEventTypeGroupMoved,

  /// (groups) Removed external ID for group
  DBTEAMLOGEventTypeGroupRemoveExternalId,

  /// (groups) Removed team members from group
  DBTEAMLOGEventTypeGroupRemoveMember,

  /// (groups) Renamed group
  DBTEAMLOGEventTypeGroupRename,

  /// (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed to
  /// sign in')
  DBTEAMLOGEventTypeEmmError,

  /// (logins) Failed to sign in
  DBTEAMLOGEventTypeLoginFail,

  /// (logins) Signed in
  DBTEAMLOGEventTypeLoginSuccess,

  /// (logins) Signed out
  DBTEAMLOGEventTypeLogout,

  /// (logins) Ended reseller support session
  DBTEAMLOGEventTypeResellerSupportSessionEnd,

  /// (logins) Started reseller support session
  DBTEAMLOGEventTypeResellerSupportSessionStart,

  /// (logins) Ended admin sign-in-as session
  DBTEAMLOGEventTypeSignInAsSessionEnd,

  /// (logins) Started admin sign-in-as session
  DBTEAMLOGEventTypeSignInAsSessionStart,

  /// (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed to
  /// sign in')
  DBTEAMLOGEventTypeSsoError,

  /// (members) Added team member name
  DBTEAMLOGEventTypeMemberAddName,

  /// (members) Changed team member admin role
  DBTEAMLOGEventTypeMemberChangeAdminRole,

  /// (members) Changed team member email
  DBTEAMLOGEventTypeMemberChangeEmail,

  /// (members) Changed membership type (limited/full) of member (deprecated,
  /// no longer logged)
  DBTEAMLOGEventTypeMemberChangeMembershipType,

  /// (members) Changed team member name
  DBTEAMLOGEventTypeMemberChangeName,

  /// (members) Changed member status (invited, joined, suspended, etc.)
  DBTEAMLOGEventTypeMemberChangeStatus,

  /// (members) Permanently deleted contents of deleted team member account
  DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents,

  /// (members) Set custom member space limit
  DBTEAMLOGEventTypeMemberSpaceLimitsAddCustomQuota,

  /// (members) Changed custom member space limit
  DBTEAMLOGEventTypeMemberSpaceLimitsChangeCustomQuota,

  /// (members) Changed space limit status
  DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus,

  /// (members) Removed custom member space limit
  DBTEAMLOGEventTypeMemberSpaceLimitsRemoveCustomQuota,

  /// (members) Suggested person to add to team
  DBTEAMLOGEventTypeMemberSuggest,

  /// (members) Transferred contents of deleted member account to another
  /// member
  DBTEAMLOGEventTypeMemberTransferAccountContents,

  /// (members) Secondary mails policy changed
  DBTEAMLOGEventTypeSecondaryMailsPolicyChanged,

  /// (paper) Added team member to Paper doc/folder
  DBTEAMLOGEventTypePaperContentAddMember,

  /// (paper) Added Paper doc/folder to folder
  DBTEAMLOGEventTypePaperContentAddToFolder,

  /// (paper) Archived Paper doc/folder
  DBTEAMLOGEventTypePaperContentArchive,

  /// (paper) Created Paper doc/folder
  DBTEAMLOGEventTypePaperContentCreate,

  /// (paper) Permanently deleted Paper doc/folder
  DBTEAMLOGEventTypePaperContentPermanentlyDelete,

  /// (paper) Removed Paper doc/folder from folder
  DBTEAMLOGEventTypePaperContentRemoveFromFolder,

  /// (paper) Removed team member from Paper doc/folder
  DBTEAMLOGEventTypePaperContentRemoveMember,

  /// (paper) Renamed Paper doc/folder
  DBTEAMLOGEventTypePaperContentRename,

  /// (paper) Restored archived Paper doc/folder
  DBTEAMLOGEventTypePaperContentRestore,

  /// (paper) Added Paper doc comment
  DBTEAMLOGEventTypePaperDocAddComment,

  /// (paper) Changed team member permissions for Paper doc
  DBTEAMLOGEventTypePaperDocChangeMemberRole,

  /// (paper) Changed sharing setting for Paper doc
  DBTEAMLOGEventTypePaperDocChangeSharingPolicy,

  /// (paper) Followed/unfollowed Paper doc
  DBTEAMLOGEventTypePaperDocChangeSubscription,

  /// (paper) Archived Paper doc (deprecated, no longer logged)
  DBTEAMLOGEventTypePaperDocDeleted,

  /// (paper) Deleted Paper doc comment
  DBTEAMLOGEventTypePaperDocDeleteComment,

  /// (paper) Downloaded Paper doc in specific format
  DBTEAMLOGEventTypePaperDocDownload,

  /// (paper) Edited Paper doc
  DBTEAMLOGEventTypePaperDocEdit,

  /// (paper) Edited Paper doc comment
  DBTEAMLOGEventTypePaperDocEditComment,

  /// (paper) Followed Paper doc (deprecated, replaced by 'Followed/unfollowed
  /// Paper doc')
  DBTEAMLOGEventTypePaperDocFollowed,

  /// (paper) Mentioned team member in Paper doc
  DBTEAMLOGEventTypePaperDocMention,

  /// (paper) Requested access to Paper doc
  DBTEAMLOGEventTypePaperDocRequestAccess,

  /// (paper) Resolved Paper doc comment
  DBTEAMLOGEventTypePaperDocResolveComment,

  /// (paper) Restored Paper doc to previous version
  DBTEAMLOGEventTypePaperDocRevert,

  /// (paper) Shared Paper doc via Slack
  DBTEAMLOGEventTypePaperDocSlackShare,

  /// (paper) Shared Paper doc with team member (deprecated, no longer logged)
  DBTEAMLOGEventTypePaperDocTeamInvite,

  /// (paper) Deleted Paper doc
  DBTEAMLOGEventTypePaperDocTrashed,

  /// (paper) Unresolved Paper doc comment
  DBTEAMLOGEventTypePaperDocUnresolveComment,

  /// (paper) Restored Paper doc
  DBTEAMLOGEventTypePaperDocUntrashed,

  /// (paper) Viewed Paper doc
  DBTEAMLOGEventTypePaperDocView,

  /// (paper) Changed Paper external sharing setting to anyone (deprecated, no
  /// longer logged)
  DBTEAMLOGEventTypePaperExternalViewAllow,

  /// (paper) Changed Paper external sharing setting to default team
  /// (deprecated, no longer logged)
  DBTEAMLOGEventTypePaperExternalViewDefaultTeam,

  /// (paper) Changed Paper external sharing setting to team-only (deprecated,
  /// no longer logged)
  DBTEAMLOGEventTypePaperExternalViewForbid,

  /// (paper) Followed/unfollowed Paper folder
  DBTEAMLOGEventTypePaperFolderChangeSubscription,

  /// (paper) Archived Paper folder (deprecated, no longer logged)
  DBTEAMLOGEventTypePaperFolderDeleted,

  /// (paper) Followed Paper folder (deprecated, replaced by
  /// 'Followed/unfollowed Paper folder')
  DBTEAMLOGEventTypePaperFolderFollowed,

  /// (paper) Shared Paper folder with member (deprecated, no longer logged)
  DBTEAMLOGEventTypePaperFolderTeamInvite,

  /// (passwords) Changed password
  DBTEAMLOGEventTypePasswordChange,

  /// (passwords) Reset password
  DBTEAMLOGEventTypePasswordReset,

  /// (passwords) Reset all team member passwords
  DBTEAMLOGEventTypePasswordResetAll,

  /// (reports) Created EMM-excluded users report
  DBTEAMLOGEventTypeEmmCreateExceptionsReport,

  /// (reports) Created EMM mobile app usage report
  DBTEAMLOGEventTypeEmmCreateUsageReport,

  /// (reports) Created member data report
  DBTEAMLOGEventTypeExportMembersReport,

  /// (reports) Exported all team Paper docs
  DBTEAMLOGEventTypePaperAdminExportStart,

  /// (reports) Created Smart Sync non-admin devices report
  DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport,

  /// (reports) Created team activity report
  DBTEAMLOGEventTypeTeamActivityCreateReport,

  /// (sharing) Shared album
  DBTEAMLOGEventTypeCollectionShare,

  /// (sharing) Changed Paper doc to invite-only (deprecated, no longer
  /// logged)
  DBTEAMLOGEventTypeNoteAclInviteOnly,

  /// (sharing) Changed Paper doc to link-accessible (deprecated, no longer
  /// logged)
  DBTEAMLOGEventTypeNoteAclLink,

  /// (sharing) Changed Paper doc to link-accessible for team (deprecated, no
  /// longer logged)
  DBTEAMLOGEventTypeNoteAclTeamLink,

  /// (sharing) Shared Paper doc (deprecated, no longer logged)
  DBTEAMLOGEventTypeNoteShared,

  /// (sharing) Shared received Paper doc (deprecated, no longer logged)
  DBTEAMLOGEventTypeNoteShareReceive,

  /// (sharing) Opened shared Paper doc (deprecated, no longer logged)
  DBTEAMLOGEventTypeOpenNoteShared,

  /// (sharing) Added team to shared folder (deprecated, no longer logged)
  DBTEAMLOGEventTypeSfAddGroup,

  /// (sharing) Allowed non-collaborators to view links to files in shared
  /// folder (deprecated, no longer logged)
  DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks,

  /// (sharing) Set team members to see warning before sharing folders outside
  /// team (deprecated, no longer logged)
  DBTEAMLOGEventTypeSfExternalInviteWarn,

  /// (sharing) Invited Facebook users to shared folder (deprecated, no longer
  /// logged)
  DBTEAMLOGEventTypeSfFbInvite,

  /// (sharing) Changed Facebook user's role in shared folder (deprecated, no
  /// longer logged)
  DBTEAMLOGEventTypeSfFbInviteChangeRole,

  /// (sharing) Uninvited Facebook user from shared folder (deprecated, no
  /// longer logged)
  DBTEAMLOGEventTypeSfFbUninvite,

  /// (sharing) Invited group to shared folder (deprecated, no longer logged)
  DBTEAMLOGEventTypeSfInviteGroup,

  /// (sharing) Granted access to shared folder (deprecated, no longer logged)
  DBTEAMLOGEventTypeSfTeamGrantAccess,

  /// (sharing) Invited team members to shared folder (deprecated, replaced by
  /// 'Invited user to Dropbox and added them to shared file/folder')
  DBTEAMLOGEventTypeSfTeamInvite,

  /// (sharing) Changed team member's role in shared folder (deprecated, no
  /// longer logged)
  DBTEAMLOGEventTypeSfTeamInviteChangeRole,

  /// (sharing) Joined team member's shared folder (deprecated, no longer
  /// logged)
  DBTEAMLOGEventTypeSfTeamJoin,

  /// (sharing) Joined team member's shared folder from link (deprecated, no
  /// longer logged)
  DBTEAMLOGEventTypeSfTeamJoinFromOobLink,

  /// (sharing) Unshared folder with team member (deprecated, replaced by
  /// 'Removed invitee from shared file/folder before invite was accepted')
  DBTEAMLOGEventTypeSfTeamUninvite,

  /// (sharing) Invited user to Dropbox and added them to shared file/folder
  DBTEAMLOGEventTypeSharedContentAddInvitees,

  /// (sharing) Added expiration date to link for shared file/folder
  DBTEAMLOGEventTypeSharedContentAddLinkExpiry,

  /// (sharing) Added password to link for shared file/folder
  DBTEAMLOGEventTypeSharedContentAddLinkPassword,

  /// (sharing) Added users and/or groups to shared file/folder
  DBTEAMLOGEventTypeSharedContentAddMember,

  /// (sharing) Changed whether members can download shared file/folder
  DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy,

  /// (sharing) Changed access type of invitee to shared file/folder before
  /// invite was accepted
  DBTEAMLOGEventTypeSharedContentChangeInviteeRole,

  /// (sharing) Changed link audience of shared file/folder
  DBTEAMLOGEventTypeSharedContentChangeLinkAudience,

  /// (sharing) Changed link expiration of shared file/folder
  DBTEAMLOGEventTypeSharedContentChangeLinkExpiry,

  /// (sharing) Changed link password of shared file/folder
  DBTEAMLOGEventTypeSharedContentChangeLinkPassword,

  /// (sharing) Changed access type of shared file/folder member
  DBTEAMLOGEventTypeSharedContentChangeMemberRole,

  /// (sharing) Changed whether members can see who viewed shared file/folder
  DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy,

  /// (sharing) Acquired membership of shared file/folder by accepting invite
  DBTEAMLOGEventTypeSharedContentClaimInvitation,

  /// (sharing) Copied shared file/folder to own Dropbox
  DBTEAMLOGEventTypeSharedContentCopy,

  /// (sharing) Downloaded shared file/folder
  DBTEAMLOGEventTypeSharedContentDownload,

  /// (sharing) Left shared file/folder
  DBTEAMLOGEventTypeSharedContentRelinquishMembership,

  /// (sharing) Removed invitee from shared file/folder before invite was
  /// accepted
  DBTEAMLOGEventTypeSharedContentRemoveInvitees,

  /// (sharing) Removed link expiration date of shared file/folder
  DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry,

  /// (sharing) Removed link password of shared file/folder
  DBTEAMLOGEventTypeSharedContentRemoveLinkPassword,

  /// (sharing) Removed user/group from shared file/folder
  DBTEAMLOGEventTypeSharedContentRemoveMember,

  /// (sharing) Requested access to shared file/folder
  DBTEAMLOGEventTypeSharedContentRequestAccess,

  /// (sharing) Unshared file/folder by clearing membership and turning off
  /// link
  DBTEAMLOGEventTypeSharedContentUnshare,

  /// (sharing) Previewed shared file/folder
  DBTEAMLOGEventTypeSharedContentView,

  /// (sharing) Changed who can access shared folder via link
  DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy,

  /// (sharing) Changed whether shared folder inherits members from parent
  /// folder
  DBTEAMLOGEventTypeSharedFolderChangeMembersInheritancePolicy,

  /// (sharing) Changed who can add/remove members of shared folder
  DBTEAMLOGEventTypeSharedFolderChangeMembersManagementPolicy,

  /// (sharing) Changed who can become member of shared folder
  DBTEAMLOGEventTypeSharedFolderChangeMembersPolicy,

  /// (sharing) Created shared folder
  DBTEAMLOGEventTypeSharedFolderCreate,

  /// (sharing) Declined team member's invite to shared folder
  DBTEAMLOGEventTypeSharedFolderDeclineInvitation,

  /// (sharing) Added shared folder to own Dropbox
  DBTEAMLOGEventTypeSharedFolderMount,

  /// (sharing) Changed parent of shared folder
  DBTEAMLOGEventTypeSharedFolderNest,

  /// (sharing) Transferred ownership of shared folder to another member
  DBTEAMLOGEventTypeSharedFolderTransferOwnership,

  /// (sharing) Deleted shared folder from Dropbox
  DBTEAMLOGEventTypeSharedFolderUnmount,

  /// (sharing) Added shared link expiration date
  DBTEAMLOGEventTypeSharedLinkAddExpiry,

  /// (sharing) Changed shared link expiration date
  DBTEAMLOGEventTypeSharedLinkChangeExpiry,

  /// (sharing) Changed visibility of shared link
  DBTEAMLOGEventTypeSharedLinkChangeVisibility,

  /// (sharing) Added file/folder to Dropbox from shared link
  DBTEAMLOGEventTypeSharedLinkCopy,

  /// (sharing) Created shared link
  DBTEAMLOGEventTypeSharedLinkCreate,

  /// (sharing) Removed shared link
  DBTEAMLOGEventTypeSharedLinkDisable,

  /// (sharing) Downloaded file/folder from shared link
  DBTEAMLOGEventTypeSharedLinkDownload,

  /// (sharing) Removed shared link expiration date
  DBTEAMLOGEventTypeSharedLinkRemoveExpiry,

  /// (sharing) Added members as audience of shared link
  DBTEAMLOGEventTypeSharedLinkShare,

  /// (sharing) Opened shared link
  DBTEAMLOGEventTypeSharedLinkView,

  /// (sharing) Opened shared Paper doc (deprecated, no longer logged)
  DBTEAMLOGEventTypeSharedNoteOpened,

  /// (sharing) Shared link with group (deprecated, no longer logged)
  DBTEAMLOGEventTypeShmodelGroupShare,

  /// (showcase) Granted access to showcase
  DBTEAMLOGEventTypeShowcaseAccessGranted,

  /// (showcase) Added member to showcase
  DBTEAMLOGEventTypeShowcaseAddMember,

  /// (showcase) Archived showcase
  DBTEAMLOGEventTypeShowcaseArchived,

  /// (showcase) Created showcase
  DBTEAMLOGEventTypeShowcaseCreated,

  /// (showcase) Deleted showcase comment
  DBTEAMLOGEventTypeShowcaseDeleteComment,

  /// (showcase) Edited showcase
  DBTEAMLOGEventTypeShowcaseEdited,

  /// (showcase) Edited showcase comment
  DBTEAMLOGEventTypeShowcaseEditComment,

  /// (showcase) Added file to showcase
  DBTEAMLOGEventTypeShowcaseFileAdded,

  /// (showcase) Downloaded file from showcase
  DBTEAMLOGEventTypeShowcaseFileDownload,

  /// (showcase) Removed file from showcase
  DBTEAMLOGEventTypeShowcaseFileRemoved,

  /// (showcase) Viewed file in showcase
  DBTEAMLOGEventTypeShowcaseFileView,

  /// (showcase) Permanently deleted showcase
  DBTEAMLOGEventTypeShowcasePermanentlyDeleted,

  /// (showcase) Added showcase comment
  DBTEAMLOGEventTypeShowcasePostComment,

  /// (showcase) Removed member from showcase
  DBTEAMLOGEventTypeShowcaseRemoveMember,

  /// (showcase) Renamed showcase
  DBTEAMLOGEventTypeShowcaseRenamed,

  /// (showcase) Requested access to showcase
  DBTEAMLOGEventTypeShowcaseRequestAccess,

  /// (showcase) Resolved showcase comment
  DBTEAMLOGEventTypeShowcaseResolveComment,

  /// (showcase) Unarchived showcase
  DBTEAMLOGEventTypeShowcaseRestored,

  /// (showcase) Deleted showcase
  DBTEAMLOGEventTypeShowcaseTrashed,

  /// (showcase) Deleted showcase (old version) (deprecated, replaced by
  /// 'Deleted showcase')
  DBTEAMLOGEventTypeShowcaseTrashedDeprecated,

  /// (showcase) Unresolved showcase comment
  DBTEAMLOGEventTypeShowcaseUnresolveComment,

  /// (showcase) Restored showcase
  DBTEAMLOGEventTypeShowcaseUntrashed,

  /// (showcase) Restored showcase (old version) (deprecated, replaced by
  /// 'Restored showcase')
  DBTEAMLOGEventTypeShowcaseUntrashedDeprecated,

  /// (showcase) Viewed showcase
  DBTEAMLOGEventTypeShowcaseView,

  /// (sso) Added X.509 certificate for SSO
  DBTEAMLOGEventTypeSsoAddCert,

  /// (sso) Added sign-in URL for SSO
  DBTEAMLOGEventTypeSsoAddLoginUrl,

  /// (sso) Added sign-out URL for SSO
  DBTEAMLOGEventTypeSsoAddLogoutUrl,

  /// (sso) Changed X.509 certificate for SSO
  DBTEAMLOGEventTypeSsoChangeCert,

  /// (sso) Changed sign-in URL for SSO
  DBTEAMLOGEventTypeSsoChangeLoginUrl,

  /// (sso) Changed sign-out URL for SSO
  DBTEAMLOGEventTypeSsoChangeLogoutUrl,

  /// (sso) Changed SAML identity mode for SSO
  DBTEAMLOGEventTypeSsoChangeSamlIdentityMode,

  /// (sso) Removed X.509 certificate for SSO
  DBTEAMLOGEventTypeSsoRemoveCert,

  /// (sso) Removed sign-in URL for SSO
  DBTEAMLOGEventTypeSsoRemoveLoginUrl,

  /// (sso) Removed sign-out URL for SSO
  DBTEAMLOGEventTypeSsoRemoveLogoutUrl,

  /// (team_folders) Changed archival status of team folder
  DBTEAMLOGEventTypeTeamFolderChangeStatus,

  /// (team_folders) Created team folder in active status
  DBTEAMLOGEventTypeTeamFolderCreate,

  /// (team_folders) Downgraded team folder to regular shared folder
  DBTEAMLOGEventTypeTeamFolderDowngrade,

  /// (team_folders) Permanently deleted archived team folder
  DBTEAMLOGEventTypeTeamFolderPermanentlyDelete,

  /// (team_folders) Renamed active/archived team folder
  DBTEAMLOGEventTypeTeamFolderRename,

  /// (team_folders) Changed sync default
  DBTEAMLOGEventTypeTeamSelectiveSyncSettingsChanged,

  /// (team_policies) Changed account capture setting on team domain
  DBTEAMLOGEventTypeAccountCaptureChangePolicy,

  /// (team_policies) Disabled downloads (deprecated, no longer logged)
  DBTEAMLOGEventTypeAllowDownloadDisabled,

  /// (team_policies) Enabled downloads (deprecated, no longer logged)
  DBTEAMLOGEventTypeAllowDownloadEnabled,

  /// (team_policies) Set restrictions on data center locations where team
  /// data resides
  DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy,

  /// (team_policies) Completed restrictions on data center locations where
  /// team data resides
  DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy,

  /// (team_policies) Set/removed limit on number of computers member can link
  /// to team Dropbox account
  DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy,

  /// (team_policies) Set/removed limit on number of mobile devices member can
  /// link to team Dropbox account
  DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy,

  /// (team_policies) Changed device approvals setting when member is over
  /// limit
  DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction,

  /// (team_policies) Changed device approvals setting when member unlinks
  /// approved device
  DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction,

  /// (team_policies) Added members to directory restrictions list
  DBTEAMLOGEventTypeDirectoryRestrictionsAddMembers,

  /// (team_policies) Removed members from directory restrictions list
  DBTEAMLOGEventTypeDirectoryRestrictionsRemoveMembers,

  /// (team_policies) Added members to EMM exception list
  DBTEAMLOGEventTypeEmmAddException,

  /// (team_policies) Enabled/disabled enterprise mobility management for
  /// members
  DBTEAMLOGEventTypeEmmChangePolicy,

  /// (team_policies) Removed members from EMM exception list
  DBTEAMLOGEventTypeEmmRemoveException,

  /// (team_policies) Accepted/opted out of extended version history
  DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy,

  /// (team_policies) Enabled/disabled commenting on team files
  DBTEAMLOGEventTypeFileCommentsChangePolicy,

  /// (team_policies) Enabled/disabled file requests
  DBTEAMLOGEventTypeFileRequestsChangePolicy,

  /// (team_policies) Enabled file request emails for everyone (deprecated, no
  /// longer logged)
  DBTEAMLOGEventTypeFileRequestsEmailsEnabled,

  /// (team_policies) Enabled file request emails for team (deprecated, no
  /// longer logged)
  DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly,

  /// (team_policies) Enabled/disabled Google single sign-on for team
  DBTEAMLOGEventTypeGoogleSsoChangePolicy,

  /// (team_policies) Changed who can create groups
  DBTEAMLOGEventTypeGroupUserManagementChangePolicy,

  /// (team_policies) Changed whether users can find team when not invited
  DBTEAMLOGEventTypeMemberRequestsChangePolicy,

  /// (team_policies) Added members to member space limit exception list
  DBTEAMLOGEventTypeMemberSpaceLimitsAddException,

  /// (team_policies) Changed member space limit type for team
  DBTEAMLOGEventTypeMemberSpaceLimitsChangeCapsTypePolicy,

  /// (team_policies) Changed team default member space limit
  DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy,

  /// (team_policies) Removed members from member space limit exception list
  DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException,

  /// (team_policies) Enabled/disabled option for team members to suggest
  /// people to add to team
  DBTEAMLOGEventTypeMemberSuggestionsChangePolicy,

  /// (team_policies) Enabled/disabled Microsoft Office add-in
  DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy,

  /// (team_policies) Enabled/disabled network control
  DBTEAMLOGEventTypeNetworkControlChangePolicy,

  /// (team_policies) Changed whether Dropbox Paper, when enabled, is deployed
  /// to all members or to specific members
  DBTEAMLOGEventTypePaperChangeDeploymentPolicy,

  /// (team_policies) Changed whether non-members can view Paper docs with
  /// link (deprecated, no longer logged)
  DBTEAMLOGEventTypePaperChangeMemberLinkPolicy,

  /// (team_policies) Changed whether members can share Paper docs outside
  /// team, and if docs are accessible only by team members or anyone by
  /// default
  DBTEAMLOGEventTypePaperChangeMemberPolicy,

  /// (team_policies) Enabled/disabled Dropbox Paper for team
  DBTEAMLOGEventTypePaperChangePolicy,

  /// (team_policies) Added users to Paper-enabled users list
  DBTEAMLOGEventTypePaperEnabledUsersGroupAddition,

  /// (team_policies) Removed users from Paper-enabled users list
  DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval,

  /// (team_policies) Enabled/disabled ability of team members to permanently
  /// delete content
  DBTEAMLOGEventTypePermanentDeleteChangePolicy,

  /// (team_policies) Changed whether team members can join shared folders
  /// owned outside team
  DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy,

  /// (team_policies) Changed whether members can share links outside team,
  /// and if links are accessible only by team members or anyone by default
  DBTEAMLOGEventTypeSharingChangeLinkPolicy,

  /// (team_policies) Changed whether members can share files/folders outside
  /// team
  DBTEAMLOGEventTypeSharingChangeMemberPolicy,

  /// (team_policies) Enabled/disabled downloading files from Dropbox Showcase
  /// for team
  DBTEAMLOGEventTypeShowcaseChangeDownloadPolicy,

  /// (team_policies) Enabled/disabled Dropbox Showcase for team
  DBTEAMLOGEventTypeShowcaseChangeEnabledPolicy,

  /// (team_policies) Enabled/disabled sharing Dropbox Showcase externally for
  /// team
  DBTEAMLOGEventTypeShowcaseChangeExternalSharingPolicy,

  /// (team_policies) Changed default Smart Sync setting for team members
  DBTEAMLOGEventTypeSmartSyncChangePolicy,

  /// (team_policies) Opted team into Smart Sync
  DBTEAMLOGEventTypeSmartSyncNotOptOut,

  /// (team_policies) Opted team out of Smart Sync
  DBTEAMLOGEventTypeSmartSyncOptOut,

  /// (team_policies) Changed single sign-on setting for team
  DBTEAMLOGEventTypeSsoChangePolicy,

  /// (team_policies) Changed two-step verification setting for team
  DBTEAMLOGEventTypeTfaChangePolicy,

  /// (team_policies) Enabled/disabled option for members to link personal
  /// Dropbox account and team account to same computer
  DBTEAMLOGEventTypeTwoAccountChangePolicy,

  /// (team_policies) Changed how long members can stay signed in to
  /// Dropbox.com
  DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy,

  /// (team_policies) Changed how long team members can be idle while signed
  /// in to Dropbox.com
  DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy,

  /// (team_profile) Merged another team into this team
  DBTEAMLOGEventTypeTeamMergeFrom,

  /// (team_profile) Merged this team into another team
  DBTEAMLOGEventTypeTeamMergeTo,

  /// (team_profile) Added team logo to display on shared link headers
  DBTEAMLOGEventTypeTeamProfileAddLogo,

  /// (team_profile) Changed default language for team
  DBTEAMLOGEventTypeTeamProfileChangeDefaultLanguage,

  /// (team_profile) Changed team logo displayed on shared link headers
  DBTEAMLOGEventTypeTeamProfileChangeLogo,

  /// (team_profile) Changed team name
  DBTEAMLOGEventTypeTeamProfileChangeName,

  /// (team_profile) Removed team logo displayed on shared link headers
  DBTEAMLOGEventTypeTeamProfileRemoveLogo,

  /// (tfa) Added backup phone for two-step verification
  DBTEAMLOGEventTypeTfaAddBackupPhone,

  /// (tfa) Added security key for two-step verification
  DBTEAMLOGEventTypeTfaAddSecurityKey,

  /// (tfa) Changed backup phone for two-step verification
  DBTEAMLOGEventTypeTfaChangeBackupPhone,

  /// (tfa) Enabled/disabled/changed two-step verification setting
  DBTEAMLOGEventTypeTfaChangeStatus,

  /// (tfa) Removed backup phone for two-step verification
  DBTEAMLOGEventTypeTfaRemoveBackupPhone,

  /// (tfa) Removed security key for two-step verification
  DBTEAMLOGEventTypeTfaRemoveSecurityKey,

  /// (tfa) Reset two-step verification for team member
  DBTEAMLOGEventTypeTfaReset,

  /// (no description).
  DBTEAMLOGEventTypeOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBTEAMLOGEventTypeTag tag;

/// (apps) Linked app for team @note Ensure the `isAppLinkTeam` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAppLinkTeamType *appLinkTeam;

/// (apps) Linked app for member @note Ensure the `isAppLinkUser` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAppLinkUserType *appLinkUser;

/// (apps) Unlinked app for team @note Ensure the `isAppUnlinkTeam` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAppUnlinkTeamType *appUnlinkTeam;

/// (apps) Unlinked app for member @note Ensure the `isAppUnlinkUser` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAppUnlinkUserType *appUnlinkUser;

/// (comments) Added file comment @note Ensure the `isFileAddComment` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileAddCommentType *fileAddComment;

/// (comments) Subscribed to or unsubscribed from comment notifications for file
/// @note Ensure the `isFileChangeCommentSubscription` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileChangeCommentSubscriptionType *fileChangeCommentSubscription;

/// (comments) Deleted file comment @note Ensure the `isFileDeleteComment`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGFileDeleteCommentType *fileDeleteComment;

/// (comments) Liked file comment (deprecated, no longer logged) @note Ensure
/// the `isFileLikeComment` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileLikeCommentType *fileLikeComment;

/// (comments) Resolved file comment @note Ensure the `isFileResolveComment`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGFileResolveCommentType *fileResolveComment;

/// (comments) Unliked file comment (deprecated, no longer logged) @note Ensure
/// the `isFileUnlikeComment` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileUnlikeCommentType *fileUnlikeComment;

/// (comments) Unresolved file comment @note Ensure the `isFileUnresolveComment`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGFileUnresolveCommentType *fileUnresolveComment;

/// (devices) Changed IP address associated with active desktop session @note
/// Ensure the `isDeviceChangeIpDesktop` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceChangeIpDesktopType *deviceChangeIpDesktop;

/// (devices) Changed IP address associated with active mobile session @note
/// Ensure the `isDeviceChangeIpMobile` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceChangeIpMobileType *deviceChangeIpMobile;

/// (devices) Changed IP address associated with active web session @note Ensure
/// the `isDeviceChangeIpWeb` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceChangeIpWebType *deviceChangeIpWeb;

/// (devices) Failed to delete all files from unlinked device @note Ensure the
/// `isDeviceDeleteOnUnlinkFail` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceDeleteOnUnlinkFailType *deviceDeleteOnUnlinkFail;

/// (devices) Deleted all files from unlinked device @note Ensure the
/// `isDeviceDeleteOnUnlinkSuccess` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *deviceDeleteOnUnlinkSuccess;

/// (devices) Failed to link device @note Ensure the `isDeviceLinkFail` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceLinkFailType *deviceLinkFail;

/// (devices) Linked device @note Ensure the `isDeviceLinkSuccess` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceLinkSuccessType *deviceLinkSuccess;

/// (devices) Disabled device management (deprecated, no longer logged) @note
/// Ensure the `isDeviceManagementDisabled` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceManagementDisabledType *deviceManagementDisabled;

/// (devices) Enabled device management (deprecated, no longer logged) @note
/// Ensure the `isDeviceManagementEnabled` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceManagementEnabledType *deviceManagementEnabled;

/// (devices) Disconnected device @note Ensure the `isDeviceUnlink` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceUnlinkType *deviceUnlink;

/// (devices) Refreshed auth token used for setting up enterprise mobility
/// management @note Ensure the `isEmmRefreshAuthToken` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGEmmRefreshAuthTokenType *emmRefreshAuthToken;

/// (domains) Granted/revoked option to enable account capture on team domains
/// @note Ensure the `isAccountCaptureChangeAvailability` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAccountCaptureChangeAvailabilityType *accountCaptureChangeAvailability;

/// (domains) Account-captured user migrated account to team @note Ensure the
/// `isAccountCaptureMigrateAccount` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAccountCaptureMigrateAccountType *accountCaptureMigrateAccount;

/// (domains) Sent proactive account capture email to all unmanaged members
/// @note Ensure the `isAccountCaptureNotificationEmailsSent` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAccountCaptureNotificationEmailsSentType *accountCaptureNotificationEmailsSent;

/// (domains) Account-captured user changed account email to personal email
/// @note Ensure the `isAccountCaptureRelinquishAccount` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAccountCaptureRelinquishAccountType *accountCaptureRelinquishAccount;

/// (domains) Disabled domain invites (deprecated, no longer logged) @note
/// Ensure the `isDisabledDomainInvites` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDisabledDomainInvitesType *disabledDomainInvites;

/// (domains) Approved user's request to join team @note Ensure the
/// `isDomainInvitesApproveRequestToJoinTeam` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly)
    DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *domainInvitesApproveRequestToJoinTeam;

/// (domains) Declined user's request to join team @note Ensure the
/// `isDomainInvitesDeclineRequestToJoinTeam` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly)
    DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *domainInvitesDeclineRequestToJoinTeam;

/// (domains) Sent domain invites to existing domain accounts (deprecated, no
/// longer logged) @note Ensure the `isDomainInvitesEmailExistingUsers` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDomainInvitesEmailExistingUsersType *domainInvitesEmailExistingUsers;

/// (domains) Requested to join team @note Ensure the
/// `isDomainInvitesRequestToJoinTeam` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDomainInvitesRequestToJoinTeamType *domainInvitesRequestToJoinTeam;

/// (domains) Disabled "Automatically invite new users" (deprecated, no longer
/// logged) @note Ensure the `isDomainInvitesSetInviteNewUserPrefToNo` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly)
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *domainInvitesSetInviteNewUserPrefToNo;

/// (domains) Enabled "Automatically invite new users" (deprecated, no longer
/// logged) @note Ensure the `isDomainInvitesSetInviteNewUserPrefToYes` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly)
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *domainInvitesSetInviteNewUserPrefToYes;

/// (domains) Failed to verify team domain @note Ensure the
/// `isDomainVerificationAddDomainFail` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDomainVerificationAddDomainFailType *domainVerificationAddDomainFail;

/// (domains) Verified team domain @note Ensure the
/// `isDomainVerificationAddDomainSuccess` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDomainVerificationAddDomainSuccessType *domainVerificationAddDomainSuccess;

/// (domains) Removed domain from list of verified team domains @note Ensure the
/// `isDomainVerificationRemoveDomain` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDomainVerificationRemoveDomainType *domainVerificationRemoveDomain;

/// (domains) Enabled domain invites (deprecated, no longer logged) @note Ensure
/// the `isEnabledDomainInvites` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGEnabledDomainInvitesType *enabledDomainInvites;

/// (file_operations) Created folders (deprecated, no longer logged) @note
/// Ensure the `isCreateFolder` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGCreateFolderType *createFolder;

/// (file_operations) Added files and/or folders @note Ensure the `isFileAdd`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGFileAddType *fileAdd;

/// (file_operations) Copied files and/or folders @note Ensure the `isFileCopy`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGFileCopyType *fileCopy;

/// (file_operations) Deleted files and/or folders @note Ensure the
/// `isFileDelete` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileDeleteType *fileDelete;

/// (file_operations) Downloaded files and/or folders @note Ensure the
/// `isFileDownload` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileDownloadType *fileDownload;

/// (file_operations) Edited files @note Ensure the `isFileEdit` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileEditType *fileEdit;

/// (file_operations) Created copy reference to file/folder @note Ensure the
/// `isFileGetCopyReference` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileGetCopyReferenceType *fileGetCopyReference;

/// (file_operations) Moved files and/or folders @note Ensure the `isFileMove`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGFileMoveType *fileMove;

/// (file_operations) Permanently deleted files and/or folders @note Ensure the
/// `isFilePermanentlyDelete` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFilePermanentlyDeleteType *filePermanentlyDelete;

/// (file_operations) Previewed files and/or folders @note Ensure the
/// `isFilePreview` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFilePreviewType *filePreview;

/// (file_operations) Renamed files and/or folders @note Ensure the
/// `isFileRename` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileRenameType *fileRename;

/// (file_operations) Restored deleted files and/or folders @note Ensure the
/// `isFileRestore` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileRestoreType *fileRestore;

/// (file_operations) Reverted files to previous version @note Ensure the
/// `isFileRevert` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileRevertType *fileRevert;

/// (file_operations) Rolled back file actions @note Ensure the
/// `isFileRollbackChanges` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileRollbackChangesType *fileRollbackChanges;

/// (file_operations) Saved file/folder using copy reference @note Ensure the
/// `isFileSaveCopyReference` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileSaveCopyReferenceType *fileSaveCopyReference;

/// (file_requests) Changed file request @note Ensure the `isFileRequestChange`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGFileRequestChangeType *fileRequestChange;

/// (file_requests) Closed file request @note Ensure the `isFileRequestClose`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGFileRequestCloseType *fileRequestClose;

/// (file_requests) Created file request @note Ensure the `isFileRequestCreate`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGFileRequestCreateType *fileRequestCreate;

/// (file_requests) Received files for file request @note Ensure the
/// `isFileRequestReceiveFile` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileRequestReceiveFileType *fileRequestReceiveFile;

/// (groups) Added external ID for group @note Ensure the `isGroupAddExternalId`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGGroupAddExternalIdType *groupAddExternalId;

/// (groups) Added team members to group @note Ensure the `isGroupAddMember`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGGroupAddMemberType *groupAddMember;

/// (groups) Changed external ID for group @note Ensure the
/// `isGroupChangeExternalId` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupChangeExternalIdType *groupChangeExternalId;

/// (groups) Changed group management type @note Ensure the
/// `isGroupChangeManagementType` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupChangeManagementTypeType *groupChangeManagementType;

/// (groups) Changed manager permissions of group member @note Ensure the
/// `isGroupChangeMemberRole` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupChangeMemberRoleType *groupChangeMemberRole;

/// (groups) Created group @note Ensure the `isGroupCreate` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupCreateType *groupCreate;

/// (groups) Deleted group @note Ensure the `isGroupDelete` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupDeleteType *groupDelete;

/// (groups) Updated group (deprecated, no longer logged) @note Ensure the
/// `isGroupDescriptionUpdated` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupDescriptionUpdatedType *groupDescriptionUpdated;

/// (groups) Updated group join policy (deprecated, no longer logged) @note
/// Ensure the `isGroupJoinPolicyUpdated` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupJoinPolicyUpdatedType *groupJoinPolicyUpdated;

/// (groups) Moved group (deprecated, no longer logged) @note Ensure the
/// `isGroupMoved` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupMovedType *groupMoved;

/// (groups) Removed external ID for group @note Ensure the
/// `isGroupRemoveExternalId` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupRemoveExternalIdType *groupRemoveExternalId;

/// (groups) Removed team members from group @note Ensure the
/// `isGroupRemoveMember` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupRemoveMemberType *groupRemoveMember;

/// (groups) Renamed group @note Ensure the `isGroupRename` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupRenameType *groupRename;

/// (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed to sign
/// in') @note Ensure the `isEmmError` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGEmmErrorType *emmError;

/// (logins) Failed to sign in @note Ensure the `isLoginFail` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGLoginFailType *loginFail;

/// (logins) Signed in @note Ensure the `isLoginSuccess` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGLoginSuccessType *loginSuccess;

/// (logins) Signed out @note Ensure the `isLogout` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGLogoutType *logout;

/// (logins) Ended reseller support session @note Ensure the
/// `isResellerSupportSessionEnd` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGResellerSupportSessionEndType *resellerSupportSessionEnd;

/// (logins) Started reseller support session @note Ensure the
/// `isResellerSupportSessionStart` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGResellerSupportSessionStartType *resellerSupportSessionStart;

/// (logins) Ended admin sign-in-as session @note Ensure the
/// `isSignInAsSessionEnd` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSignInAsSessionEndType *signInAsSessionEnd;

/// (logins) Started admin sign-in-as session @note Ensure the
/// `isSignInAsSessionStart` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSignInAsSessionStartType *signInAsSessionStart;

/// (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed to sign
/// in') @note Ensure the `isSsoError` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSsoErrorType *ssoError;

/// (members) Added team member name @note Ensure the `isMemberAddName` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberAddNameType *memberAddName;

/// (members) Changed team member admin role @note Ensure the
/// `isMemberChangeAdminRole` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberChangeAdminRoleType *memberChangeAdminRole;

/// (members) Changed team member email @note Ensure the `isMemberChangeEmail`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGMemberChangeEmailType *memberChangeEmail;

/// (members) Changed membership type (limited/full) of member (deprecated, no
/// longer logged) @note Ensure the `isMemberChangeMembershipType` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberChangeMembershipTypeType *memberChangeMembershipType;

/// (members) Changed team member name @note Ensure the `isMemberChangeName`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGMemberChangeNameType *memberChangeName;

/// (members) Changed member status (invited, joined, suspended, etc.) @note
/// Ensure the `isMemberChangeStatus` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberChangeStatusType *memberChangeStatus;

/// (members) Permanently deleted contents of deleted team member account @note
/// Ensure the `isMemberPermanentlyDeleteAccountContents` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly)
    DBTEAMLOGMemberPermanentlyDeleteAccountContentsType *memberPermanentlyDeleteAccountContents;

/// (members) Set custom member space limit @note Ensure the
/// `isMemberSpaceLimitsAddCustomQuota` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType *memberSpaceLimitsAddCustomQuota;

/// (members) Changed custom member space limit @note Ensure the
/// `isMemberSpaceLimitsChangeCustomQuota` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType *memberSpaceLimitsChangeCustomQuota;

/// (members) Changed space limit status @note Ensure the
/// `isMemberSpaceLimitsChangeStatus` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberSpaceLimitsChangeStatusType *memberSpaceLimitsChangeStatus;

/// (members) Removed custom member space limit @note Ensure the
/// `isMemberSpaceLimitsRemoveCustomQuota` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType *memberSpaceLimitsRemoveCustomQuota;

/// (members) Suggested person to add to team @note Ensure the `isMemberSuggest`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGMemberSuggestType *memberSuggest;

/// (members) Transferred contents of deleted member account to another member
/// @note Ensure the `isMemberTransferAccountContents` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberTransferAccountContentsType *memberTransferAccountContents;

/// (members) Secondary mails policy changed @note Ensure the
/// `isSecondaryMailsPolicyChanged` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSecondaryMailsPolicyChangedType *secondaryMailsPolicyChanged;

/// (paper) Added team member to Paper doc/folder @note Ensure the
/// `isPaperContentAddMember` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperContentAddMemberType *paperContentAddMember;

/// (paper) Added Paper doc/folder to folder @note Ensure the
/// `isPaperContentAddToFolder` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperContentAddToFolderType *paperContentAddToFolder;

/// (paper) Archived Paper doc/folder @note Ensure the `isPaperContentArchive`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGPaperContentArchiveType *paperContentArchive;

/// (paper) Created Paper doc/folder @note Ensure the `isPaperContentCreate`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGPaperContentCreateType *paperContentCreate;

/// (paper) Permanently deleted Paper doc/folder @note Ensure the
/// `isPaperContentPermanentlyDelete` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperContentPermanentlyDeleteType *paperContentPermanentlyDelete;

/// (paper) Removed Paper doc/folder from folder @note Ensure the
/// `isPaperContentRemoveFromFolder` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperContentRemoveFromFolderType *paperContentRemoveFromFolder;

/// (paper) Removed team member from Paper doc/folder @note Ensure the
/// `isPaperContentRemoveMember` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperContentRemoveMemberType *paperContentRemoveMember;

/// (paper) Renamed Paper doc/folder @note Ensure the `isPaperContentRename`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGPaperContentRenameType *paperContentRename;

/// (paper) Restored archived Paper doc/folder @note Ensure the
/// `isPaperContentRestore` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperContentRestoreType *paperContentRestore;

/// (paper) Added Paper doc comment @note Ensure the `isPaperDocAddComment`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocAddCommentType *paperDocAddComment;

/// (paper) Changed team member permissions for Paper doc @note Ensure the
/// `isPaperDocChangeMemberRole` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocChangeMemberRoleType *paperDocChangeMemberRole;

/// (paper) Changed sharing setting for Paper doc @note Ensure the
/// `isPaperDocChangeSharingPolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocChangeSharingPolicyType *paperDocChangeSharingPolicy;

/// (paper) Followed/unfollowed Paper doc @note Ensure the
/// `isPaperDocChangeSubscription` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocChangeSubscriptionType *paperDocChangeSubscription;

/// (paper) Archived Paper doc (deprecated, no longer logged) @note Ensure the
/// `isPaperDocDeleted` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocDeletedType *paperDocDeleted;

/// (paper) Deleted Paper doc comment @note Ensure the `isPaperDocDeleteComment`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocDeleteCommentType *paperDocDeleteComment;

/// (paper) Downloaded Paper doc in specific format @note Ensure the
/// `isPaperDocDownload` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocDownloadType *paperDocDownload;

/// (paper) Edited Paper doc @note Ensure the `isPaperDocEdit` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocEditType *paperDocEdit;

/// (paper) Edited Paper doc comment @note Ensure the `isPaperDocEditComment`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocEditCommentType *paperDocEditComment;

/// (paper) Followed Paper doc (deprecated, replaced by 'Followed/unfollowed
/// Paper doc') @note Ensure the `isPaperDocFollowed` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocFollowedType *paperDocFollowed;

/// (paper) Mentioned team member in Paper doc @note Ensure the
/// `isPaperDocMention` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocMentionType *paperDocMention;

/// (paper) Requested access to Paper doc @note Ensure the
/// `isPaperDocRequestAccess` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocRequestAccessType *paperDocRequestAccess;

/// (paper) Resolved Paper doc comment @note Ensure the
/// `isPaperDocResolveComment` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocResolveCommentType *paperDocResolveComment;

/// (paper) Restored Paper doc to previous version @note Ensure the
/// `isPaperDocRevert` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocRevertType *paperDocRevert;

/// (paper) Shared Paper doc via Slack @note Ensure the `isPaperDocSlackShare`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocSlackShareType *paperDocSlackShare;

/// (paper) Shared Paper doc with team member (deprecated, no longer logged)
/// @note Ensure the `isPaperDocTeamInvite` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocTeamInviteType *paperDocTeamInvite;

/// (paper) Deleted Paper doc @note Ensure the `isPaperDocTrashed` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocTrashedType *paperDocTrashed;

/// (paper) Unresolved Paper doc comment @note Ensure the
/// `isPaperDocUnresolveComment` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocUnresolveCommentType *paperDocUnresolveComment;

/// (paper) Restored Paper doc @note Ensure the `isPaperDocUntrashed` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocUntrashedType *paperDocUntrashed;

/// (paper) Viewed Paper doc @note Ensure the `isPaperDocView` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperDocViewType *paperDocView;

/// (paper) Changed Paper external sharing setting to anyone (deprecated, no
/// longer logged) @note Ensure the `isPaperExternalViewAllow` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperExternalViewAllowType *paperExternalViewAllow;

/// (paper) Changed Paper external sharing setting to default team (deprecated,
/// no longer logged) @note Ensure the `isPaperExternalViewDefaultTeam` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperExternalViewDefaultTeamType *paperExternalViewDefaultTeam;

/// (paper) Changed Paper external sharing setting to team-only (deprecated, no
/// longer logged) @note Ensure the `isPaperExternalViewForbid` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperExternalViewForbidType *paperExternalViewForbid;

/// (paper) Followed/unfollowed Paper folder @note Ensure the
/// `isPaperFolderChangeSubscription` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperFolderChangeSubscriptionType *paperFolderChangeSubscription;

/// (paper) Archived Paper folder (deprecated, no longer logged) @note Ensure
/// the `isPaperFolderDeleted` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperFolderDeletedType *paperFolderDeleted;

/// (paper) Followed Paper folder (deprecated, replaced by 'Followed/unfollowed
/// Paper folder') @note Ensure the `isPaperFolderFollowed` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperFolderFollowedType *paperFolderFollowed;

/// (paper) Shared Paper folder with member (deprecated, no longer logged) @note
/// Ensure the `isPaperFolderTeamInvite` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperFolderTeamInviteType *paperFolderTeamInvite;

/// (passwords) Changed password @note Ensure the `isPasswordChange` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPasswordChangeType *passwordChange;

/// (passwords) Reset password @note Ensure the `isPasswordReset` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPasswordResetType *passwordReset;

/// (passwords) Reset all team member passwords @note Ensure the
/// `isPasswordResetAll` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPasswordResetAllType *passwordResetAll;

/// (reports) Created EMM-excluded users report @note Ensure the
/// `isEmmCreateExceptionsReport` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGEmmCreateExceptionsReportType *emmCreateExceptionsReport;

/// (reports) Created EMM mobile app usage report @note Ensure the
/// `isEmmCreateUsageReport` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGEmmCreateUsageReportType *emmCreateUsageReport;

/// (reports) Created member data report @note Ensure the
/// `isExportMembersReport` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGExportMembersReportType *exportMembersReport;

/// (reports) Exported all team Paper docs @note Ensure the
/// `isPaperAdminExportStart` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperAdminExportStartType *paperAdminExportStart;

/// (reports) Created Smart Sync non-admin devices report @note Ensure the
/// `isSmartSyncCreateAdminPrivilegeReport` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType *smartSyncCreateAdminPrivilegeReport;

/// (reports) Created team activity report @note Ensure the
/// `isTeamActivityCreateReport` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamActivityCreateReportType *teamActivityCreateReport;

/// (sharing) Shared album @note Ensure the `isCollectionShare` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGCollectionShareType *collectionShare;

/// (sharing) Changed Paper doc to invite-only (deprecated, no longer logged)
/// @note Ensure the `isNoteAclInviteOnly` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGNoteAclInviteOnlyType *noteAclInviteOnly;

/// (sharing) Changed Paper doc to link-accessible (deprecated, no longer
/// logged) @note Ensure the `isNoteAclLink` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGNoteAclLinkType *noteAclLink;

/// (sharing) Changed Paper doc to link-accessible for team (deprecated, no
/// longer logged) @note Ensure the `isNoteAclTeamLink` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGNoteAclTeamLinkType *noteAclTeamLink;

/// (sharing) Shared Paper doc (deprecated, no longer logged) @note Ensure the
/// `isNoteShared` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGNoteSharedType *noteShared;

/// (sharing) Shared received Paper doc (deprecated, no longer logged) @note
/// Ensure the `isNoteShareReceive` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGNoteShareReceiveType *noteShareReceive;

/// (sharing) Opened shared Paper doc (deprecated, no longer logged) @note
/// Ensure the `isOpenNoteShared` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGOpenNoteSharedType *openNoteShared;

/// (sharing) Added team to shared folder (deprecated, no longer logged) @note
/// Ensure the `isSfAddGroup` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfAddGroupType *sfAddGroup;

/// (sharing) Allowed non-collaborators to view links to files in shared folder
/// (deprecated, no longer logged) @note Ensure the
/// `isSfAllowNonMembersToViewSharedLinks` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfAllowNonMembersToViewSharedLinksType *sfAllowNonMembersToViewSharedLinks;

/// (sharing) Set team members to see warning before sharing folders outside
/// team (deprecated, no longer logged) @note Ensure the
/// `isSfExternalInviteWarn` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfExternalInviteWarnType *sfExternalInviteWarn;

/// (sharing) Invited Facebook users to shared folder (deprecated, no longer
/// logged) @note Ensure the `isSfFbInvite` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfFbInviteType *sfFbInvite;

/// (sharing) Changed Facebook user's role in shared folder (deprecated, no
/// longer logged) @note Ensure the `isSfFbInviteChangeRole` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfFbInviteChangeRoleType *sfFbInviteChangeRole;

/// (sharing) Uninvited Facebook user from shared folder (deprecated, no longer
/// logged) @note Ensure the `isSfFbUninvite` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfFbUninviteType *sfFbUninvite;

/// (sharing) Invited group to shared folder (deprecated, no longer logged)
/// @note Ensure the `isSfInviteGroup` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfInviteGroupType *sfInviteGroup;

/// (sharing) Granted access to shared folder (deprecated, no longer logged)
/// @note Ensure the `isSfTeamGrantAccess` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfTeamGrantAccessType *sfTeamGrantAccess;

/// (sharing) Invited team members to shared folder (deprecated, replaced by
/// 'Invited user to Dropbox and added them to shared file/folder') @note Ensure
/// the `isSfTeamInvite` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfTeamInviteType *sfTeamInvite;

/// (sharing) Changed team member's role in shared folder (deprecated, no longer
/// logged) @note Ensure the `isSfTeamInviteChangeRole` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfTeamInviteChangeRoleType *sfTeamInviteChangeRole;

/// (sharing) Joined team member's shared folder (deprecated, no longer logged)
/// @note Ensure the `isSfTeamJoin` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfTeamJoinType *sfTeamJoin;

/// (sharing) Joined team member's shared folder from link (deprecated, no
/// longer logged) @note Ensure the `isSfTeamJoinFromOobLink` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfTeamJoinFromOobLinkType *sfTeamJoinFromOobLink;

/// (sharing) Unshared folder with team member (deprecated, replaced by 'Removed
/// invitee from shared file/folder before invite was accepted') @note Ensure
/// the `isSfTeamUninvite` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSfTeamUninviteType *sfTeamUninvite;

/// (sharing) Invited user to Dropbox and added them to shared file/folder @note
/// Ensure the `isSharedContentAddInvitees` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentAddInviteesType *sharedContentAddInvitees;

/// (sharing) Added expiration date to link for shared file/folder @note Ensure
/// the `isSharedContentAddLinkExpiry` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentAddLinkExpiryType *sharedContentAddLinkExpiry;

/// (sharing) Added password to link for shared file/folder @note Ensure the
/// `isSharedContentAddLinkPassword` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentAddLinkPasswordType *sharedContentAddLinkPassword;

/// (sharing) Added users and/or groups to shared file/folder @note Ensure the
/// `isSharedContentAddMember` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentAddMemberType *sharedContentAddMember;

/// (sharing) Changed whether members can download shared file/folder @note
/// Ensure the `isSharedContentChangeDownloadsPolicy` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentChangeDownloadsPolicyType *sharedContentChangeDownloadsPolicy;

/// (sharing) Changed access type of invitee to shared file/folder before invite
/// was accepted @note Ensure the `isSharedContentChangeInviteeRole` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentChangeInviteeRoleType *sharedContentChangeInviteeRole;

/// (sharing) Changed link audience of shared file/folder @note Ensure the
/// `isSharedContentChangeLinkAudience` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentChangeLinkAudienceType *sharedContentChangeLinkAudience;

/// (sharing) Changed link expiration of shared file/folder @note Ensure the
/// `isSharedContentChangeLinkExpiry` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentChangeLinkExpiryType *sharedContentChangeLinkExpiry;

/// (sharing) Changed link password of shared file/folder @note Ensure the
/// `isSharedContentChangeLinkPassword` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentChangeLinkPasswordType *sharedContentChangeLinkPassword;

/// (sharing) Changed access type of shared file/folder member @note Ensure the
/// `isSharedContentChangeMemberRole` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentChangeMemberRoleType *sharedContentChangeMemberRole;

/// (sharing) Changed whether members can see who viewed shared file/folder
/// @note Ensure the `isSharedContentChangeViewerInfoPolicy` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentChangeViewerInfoPolicyType *sharedContentChangeViewerInfoPolicy;

/// (sharing) Acquired membership of shared file/folder by accepting invite
/// @note Ensure the `isSharedContentClaimInvitation` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentClaimInvitationType *sharedContentClaimInvitation;

/// (sharing) Copied shared file/folder to own Dropbox @note Ensure the
/// `isSharedContentCopy` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentCopyType *sharedContentCopy;

/// (sharing) Downloaded shared file/folder @note Ensure the
/// `isSharedContentDownload` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentDownloadType *sharedContentDownload;

/// (sharing) Left shared file/folder @note Ensure the
/// `isSharedContentRelinquishMembership` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentRelinquishMembershipType *sharedContentRelinquishMembership;

/// (sharing) Removed invitee from shared file/folder before invite was accepted
/// @note Ensure the `isSharedContentRemoveInvitees` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentRemoveInviteesType *sharedContentRemoveInvitees;

/// (sharing) Removed link expiration date of shared file/folder @note Ensure
/// the `isSharedContentRemoveLinkExpiry` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentRemoveLinkExpiryType *sharedContentRemoveLinkExpiry;

/// (sharing) Removed link password of shared file/folder @note Ensure the
/// `isSharedContentRemoveLinkPassword` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentRemoveLinkPasswordType *sharedContentRemoveLinkPassword;

/// (sharing) Removed user/group from shared file/folder @note Ensure the
/// `isSharedContentRemoveMember` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentRemoveMemberType *sharedContentRemoveMember;

/// (sharing) Requested access to shared file/folder @note Ensure the
/// `isSharedContentRequestAccess` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentRequestAccessType *sharedContentRequestAccess;

/// (sharing) Unshared file/folder by clearing membership and turning off link
/// @note Ensure the `isSharedContentUnshare` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentUnshareType *sharedContentUnshare;

/// (sharing) Previewed shared file/folder @note Ensure the
/// `isSharedContentView` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedContentViewType *sharedContentView;

/// (sharing) Changed who can access shared folder via link @note Ensure the
/// `isSharedFolderChangeLinkPolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedFolderChangeLinkPolicyType *sharedFolderChangeLinkPolicy;

/// (sharing) Changed whether shared folder inherits members from parent folder
/// @note Ensure the `isSharedFolderChangeMembersInheritancePolicy` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly)
    DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType *sharedFolderChangeMembersInheritancePolicy;

/// (sharing) Changed who can add/remove members of shared folder @note Ensure
/// the `isSharedFolderChangeMembersManagementPolicy` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly)
    DBTEAMLOGSharedFolderChangeMembersManagementPolicyType *sharedFolderChangeMembersManagementPolicy;

/// (sharing) Changed who can become member of shared folder @note Ensure the
/// `isSharedFolderChangeMembersPolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedFolderChangeMembersPolicyType *sharedFolderChangeMembersPolicy;

/// (sharing) Created shared folder @note Ensure the `isSharedFolderCreate`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGSharedFolderCreateType *sharedFolderCreate;

/// (sharing) Declined team member's invite to shared folder @note Ensure the
/// `isSharedFolderDeclineInvitation` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedFolderDeclineInvitationType *sharedFolderDeclineInvitation;

/// (sharing) Added shared folder to own Dropbox @note Ensure the
/// `isSharedFolderMount` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedFolderMountType *sharedFolderMount;

/// (sharing) Changed parent of shared folder @note Ensure the
/// `isSharedFolderNest` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedFolderNestType *sharedFolderNest;

/// (sharing) Transferred ownership of shared folder to another member @note
/// Ensure the `isSharedFolderTransferOwnership` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedFolderTransferOwnershipType *sharedFolderTransferOwnership;

/// (sharing) Deleted shared folder from Dropbox @note Ensure the
/// `isSharedFolderUnmount` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedFolderUnmountType *sharedFolderUnmount;

/// (sharing) Added shared link expiration date @note Ensure the
/// `isSharedLinkAddExpiry` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedLinkAddExpiryType *sharedLinkAddExpiry;

/// (sharing) Changed shared link expiration date @note Ensure the
/// `isSharedLinkChangeExpiry` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedLinkChangeExpiryType *sharedLinkChangeExpiry;

/// (sharing) Changed visibility of shared link @note Ensure the
/// `isSharedLinkChangeVisibility` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedLinkChangeVisibilityType *sharedLinkChangeVisibility;

/// (sharing) Added file/folder to Dropbox from shared link @note Ensure the
/// `isSharedLinkCopy` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedLinkCopyType *sharedLinkCopy;

/// (sharing) Created shared link @note Ensure the `isSharedLinkCreate` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedLinkCreateType *sharedLinkCreate;

/// (sharing) Removed shared link @note Ensure the `isSharedLinkDisable` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedLinkDisableType *sharedLinkDisable;

/// (sharing) Downloaded file/folder from shared link @note Ensure the
/// `isSharedLinkDownload` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedLinkDownloadType *sharedLinkDownload;

/// (sharing) Removed shared link expiration date @note Ensure the
/// `isSharedLinkRemoveExpiry` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedLinkRemoveExpiryType *sharedLinkRemoveExpiry;

/// (sharing) Added members as audience of shared link @note Ensure the
/// `isSharedLinkShare` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedLinkShareType *sharedLinkShare;

/// (sharing) Opened shared link @note Ensure the `isSharedLinkView` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedLinkViewType *sharedLinkView;

/// (sharing) Opened shared Paper doc (deprecated, no longer logged) @note
/// Ensure the `isSharedNoteOpened` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharedNoteOpenedType *sharedNoteOpened;

/// (sharing) Shared link with group (deprecated, no longer logged) @note Ensure
/// the `isShmodelGroupShare` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShmodelGroupShareType *shmodelGroupShare;

/// (showcase) Granted access to showcase @note Ensure the
/// `isShowcaseAccessGranted` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseAccessGrantedType *showcaseAccessGranted;

/// (showcase) Added member to showcase @note Ensure the `isShowcaseAddMember`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseAddMemberType *showcaseAddMember;

/// (showcase) Archived showcase @note Ensure the `isShowcaseArchived` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseArchivedType *showcaseArchived;

/// (showcase) Created showcase @note Ensure the `isShowcaseCreated` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseCreatedType *showcaseCreated;

/// (showcase) Deleted showcase comment @note Ensure the
/// `isShowcaseDeleteComment` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseDeleteCommentType *showcaseDeleteComment;

/// (showcase) Edited showcase @note Ensure the `isShowcaseEdited` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseEditedType *showcaseEdited;

/// (showcase) Edited showcase comment @note Ensure the `isShowcaseEditComment`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseEditCommentType *showcaseEditComment;

/// (showcase) Added file to showcase @note Ensure the `isShowcaseFileAdded`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseFileAddedType *showcaseFileAdded;

/// (showcase) Downloaded file from showcase @note Ensure the
/// `isShowcaseFileDownload` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseFileDownloadType *showcaseFileDownload;

/// (showcase) Removed file from showcase @note Ensure the
/// `isShowcaseFileRemoved` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseFileRemovedType *showcaseFileRemoved;

/// (showcase) Viewed file in showcase @note Ensure the `isShowcaseFileView`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseFileViewType *showcaseFileView;

/// (showcase) Permanently deleted showcase @note Ensure the
/// `isShowcasePermanentlyDeleted` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcasePermanentlyDeletedType *showcasePermanentlyDeleted;

/// (showcase) Added showcase comment @note Ensure the `isShowcasePostComment`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGShowcasePostCommentType *showcasePostComment;

/// (showcase) Removed member from showcase @note Ensure the
/// `isShowcaseRemoveMember` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseRemoveMemberType *showcaseRemoveMember;

/// (showcase) Renamed showcase @note Ensure the `isShowcaseRenamed` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseRenamedType *showcaseRenamed;

/// (showcase) Requested access to showcase @note Ensure the
/// `isShowcaseRequestAccess` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseRequestAccessType *showcaseRequestAccess;

/// (showcase) Resolved showcase comment @note Ensure the
/// `isShowcaseResolveComment` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseResolveCommentType *showcaseResolveComment;

/// (showcase) Unarchived showcase @note Ensure the `isShowcaseRestored` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseRestoredType *showcaseRestored;

/// (showcase) Deleted showcase @note Ensure the `isShowcaseTrashed` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseTrashedType *showcaseTrashed;

/// (showcase) Deleted showcase (old version) (deprecated, replaced by 'Deleted
/// showcase') @note Ensure the `isShowcaseTrashedDeprecated` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseTrashedDeprecatedType *showcaseTrashedDeprecated;

/// (showcase) Unresolved showcase comment @note Ensure the
/// `isShowcaseUnresolveComment` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseUnresolveCommentType *showcaseUnresolveComment;

/// (showcase) Restored showcase @note Ensure the `isShowcaseUntrashed` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseUntrashedType *showcaseUntrashed;

/// (showcase) Restored showcase (old version) (deprecated, replaced by
/// 'Restored showcase') @note Ensure the `isShowcaseUntrashedDeprecated` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseUntrashedDeprecatedType *showcaseUntrashedDeprecated;

/// (showcase) Viewed showcase @note Ensure the `isShowcaseView` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseViewType *showcaseView;

/// (sso) Added X.509 certificate for SSO @note Ensure the `isSsoAddCert` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSsoAddCertType *ssoAddCert;

/// (sso) Added sign-in URL for SSO @note Ensure the `isSsoAddLoginUrl` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSsoAddLoginUrlType *ssoAddLoginUrl;

/// (sso) Added sign-out URL for SSO @note Ensure the `isSsoAddLogoutUrl` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSsoAddLogoutUrlType *ssoAddLogoutUrl;

/// (sso) Changed X.509 certificate for SSO @note Ensure the `isSsoChangeCert`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGSsoChangeCertType *ssoChangeCert;

/// (sso) Changed sign-in URL for SSO @note Ensure the `isSsoChangeLoginUrl`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGSsoChangeLoginUrlType *ssoChangeLoginUrl;

/// (sso) Changed sign-out URL for SSO @note Ensure the `isSsoChangeLogoutUrl`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGSsoChangeLogoutUrlType *ssoChangeLogoutUrl;

/// (sso) Changed SAML identity mode for SSO @note Ensure the
/// `isSsoChangeSamlIdentityMode` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSsoChangeSamlIdentityModeType *ssoChangeSamlIdentityMode;

/// (sso) Removed X.509 certificate for SSO @note Ensure the `isSsoRemoveCert`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGSsoRemoveCertType *ssoRemoveCert;

/// (sso) Removed sign-in URL for SSO @note Ensure the `isSsoRemoveLoginUrl`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGSsoRemoveLoginUrlType *ssoRemoveLoginUrl;

/// (sso) Removed sign-out URL for SSO @note Ensure the `isSsoRemoveLogoutUrl`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGSsoRemoveLogoutUrlType *ssoRemoveLogoutUrl;

/// (team_folders) Changed archival status of team folder @note Ensure the
/// `isTeamFolderChangeStatus` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamFolderChangeStatusType *teamFolderChangeStatus;

/// (team_folders) Created team folder in active status @note Ensure the
/// `isTeamFolderCreate` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamFolderCreateType *teamFolderCreate;

/// (team_folders) Downgraded team folder to regular shared folder @note Ensure
/// the `isTeamFolderDowngrade` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamFolderDowngradeType *teamFolderDowngrade;

/// (team_folders) Permanently deleted archived team folder @note Ensure the
/// `isTeamFolderPermanentlyDelete` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamFolderPermanentlyDeleteType *teamFolderPermanentlyDelete;

/// (team_folders) Renamed active/archived team folder @note Ensure the
/// `isTeamFolderRename` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamFolderRenameType *teamFolderRename;

/// (team_folders) Changed sync default @note Ensure the
/// `isTeamSelectiveSyncSettingsChanged` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamSelectiveSyncSettingsChangedType *teamSelectiveSyncSettingsChanged;

/// (team_policies) Changed account capture setting on team domain @note Ensure
/// the `isAccountCaptureChangePolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAccountCaptureChangePolicyType *accountCaptureChangePolicy;

/// (team_policies) Disabled downloads (deprecated, no longer logged) @note
/// Ensure the `isAllowDownloadDisabled` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAllowDownloadDisabledType *allowDownloadDisabled;

/// (team_policies) Enabled downloads (deprecated, no longer logged) @note
/// Ensure the `isAllowDownloadEnabled` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGAllowDownloadEnabledType *allowDownloadEnabled;

/// (team_policies) Set restrictions on data center locations where team data
/// resides @note Ensure the `isDataPlacementRestrictionChangePolicy` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDataPlacementRestrictionChangePolicyType *dataPlacementRestrictionChangePolicy;

/// (team_policies) Completed restrictions on data center locations where team
/// data resides @note Ensure the `isDataPlacementRestrictionSatisfyPolicy`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly)
    DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *dataPlacementRestrictionSatisfyPolicy;

/// (team_policies) Set/removed limit on number of computers member can link to
/// team Dropbox account @note Ensure the `isDeviceApprovalsChangeDesktopPolicy`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *deviceApprovalsChangeDesktopPolicy;

/// (team_policies) Set/removed limit on number of mobile devices member can
/// link to team Dropbox account @note Ensure the
/// `isDeviceApprovalsChangeMobilePolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *deviceApprovalsChangeMobilePolicy;

/// (team_policies) Changed device approvals setting when member is over limit
/// @note Ensure the `isDeviceApprovalsChangeOverageAction` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceApprovalsChangeOverageActionType *deviceApprovalsChangeOverageAction;

/// (team_policies) Changed device approvals setting when member unlinks
/// approved device @note Ensure the `isDeviceApprovalsChangeUnlinkAction`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *deviceApprovalsChangeUnlinkAction;

/// (team_policies) Added members to directory restrictions list @note Ensure
/// the `isDirectoryRestrictionsAddMembers` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDirectoryRestrictionsAddMembersType *directoryRestrictionsAddMembers;

/// (team_policies) Removed members from directory restrictions list @note
/// Ensure the `isDirectoryRestrictionsRemoveMembers` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGDirectoryRestrictionsRemoveMembersType *directoryRestrictionsRemoveMembers;

/// (team_policies) Added members to EMM exception list @note Ensure the
/// `isEmmAddException` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGEmmAddExceptionType *emmAddException;

/// (team_policies) Enabled/disabled enterprise mobility management for members
/// @note Ensure the `isEmmChangePolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGEmmChangePolicyType *emmChangePolicy;

/// (team_policies) Removed members from EMM exception list @note Ensure the
/// `isEmmRemoveException` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGEmmRemoveExceptionType *emmRemoveException;

/// (team_policies) Accepted/opted out of extended version history @note Ensure
/// the `isExtendedVersionHistoryChangePolicy` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGExtendedVersionHistoryChangePolicyType *extendedVersionHistoryChangePolicy;

/// (team_policies) Enabled/disabled commenting on team files @note Ensure the
/// `isFileCommentsChangePolicy` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileCommentsChangePolicyType *fileCommentsChangePolicy;

/// (team_policies) Enabled/disabled file requests @note Ensure the
/// `isFileRequestsChangePolicy` method returns true before accessing, otherwise
/// a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileRequestsChangePolicyType *fileRequestsChangePolicy;

/// (team_policies) Enabled file request emails for everyone (deprecated, no
/// longer logged) @note Ensure the `isFileRequestsEmailsEnabled` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGFileRequestsEmailsEnabledType *fileRequestsEmailsEnabled;

/// (team_policies) Enabled file request emails for team (deprecated, no longer
/// logged) @note Ensure the `isFileRequestsEmailsRestrictedToTeamOnly` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly)
    DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType *fileRequestsEmailsRestrictedToTeamOnly;

/// (team_policies) Enabled/disabled Google single sign-on for team @note Ensure
/// the `isGoogleSsoChangePolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGoogleSsoChangePolicyType *googleSsoChangePolicy;

/// (team_policies) Changed who can create groups @note Ensure the
/// `isGroupUserManagementChangePolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGGroupUserManagementChangePolicyType *groupUserManagementChangePolicy;

/// (team_policies) Changed whether users can find team when not invited @note
/// Ensure the `isMemberRequestsChangePolicy` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberRequestsChangePolicyType *memberRequestsChangePolicy;

/// (team_policies) Added members to member space limit exception list @note
/// Ensure the `isMemberSpaceLimitsAddException` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberSpaceLimitsAddExceptionType *memberSpaceLimitsAddException;

/// (team_policies) Changed member space limit type for team @note Ensure the
/// `isMemberSpaceLimitsChangeCapsTypePolicy` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly)
    DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType *memberSpaceLimitsChangeCapsTypePolicy;

/// (team_policies) Changed team default member space limit @note Ensure the
/// `isMemberSpaceLimitsChangePolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberSpaceLimitsChangePolicyType *memberSpaceLimitsChangePolicy;

/// (team_policies) Removed members from member space limit exception list @note
/// Ensure the `isMemberSpaceLimitsRemoveException` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberSpaceLimitsRemoveExceptionType *memberSpaceLimitsRemoveException;

/// (team_policies) Enabled/disabled option for team members to suggest people
/// to add to team @note Ensure the `isMemberSuggestionsChangePolicy` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMemberSuggestionsChangePolicyType *memberSuggestionsChangePolicy;

/// (team_policies) Enabled/disabled Microsoft Office add-in @note Ensure the
/// `isMicrosoftOfficeAddinChangePolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGMicrosoftOfficeAddinChangePolicyType *microsoftOfficeAddinChangePolicy;

/// (team_policies) Enabled/disabled network control @note Ensure the
/// `isNetworkControlChangePolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGNetworkControlChangePolicyType *networkControlChangePolicy;

/// (team_policies) Changed whether Dropbox Paper, when enabled, is deployed to
/// all members or to specific members @note Ensure the
/// `isPaperChangeDeploymentPolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperChangeDeploymentPolicyType *paperChangeDeploymentPolicy;

/// (team_policies) Changed whether non-members can view Paper docs with link
/// (deprecated, no longer logged) @note Ensure the
/// `isPaperChangeMemberLinkPolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperChangeMemberLinkPolicyType *paperChangeMemberLinkPolicy;

/// (team_policies) Changed whether members can share Paper docs outside team,
/// and if docs are accessible only by team members or anyone by default @note
/// Ensure the `isPaperChangeMemberPolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperChangeMemberPolicyType *paperChangeMemberPolicy;

/// (team_policies) Enabled/disabled Dropbox Paper for team @note Ensure the
/// `isPaperChangePolicy` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperChangePolicyType *paperChangePolicy;

/// (team_policies) Added users to Paper-enabled users list @note Ensure the
/// `isPaperEnabledUsersGroupAddition` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperEnabledUsersGroupAdditionType *paperEnabledUsersGroupAddition;

/// (team_policies) Removed users from Paper-enabled users list @note Ensure the
/// `isPaperEnabledUsersGroupRemoval` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPaperEnabledUsersGroupRemovalType *paperEnabledUsersGroupRemoval;

/// (team_policies) Enabled/disabled ability of team members to permanently
/// delete content @note Ensure the `isPermanentDeleteChangePolicy` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGPermanentDeleteChangePolicyType *permanentDeleteChangePolicy;

/// (team_policies) Changed whether team members can join shared folders owned
/// outside team @note Ensure the `isSharingChangeFolderJoinPolicy` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharingChangeFolderJoinPolicyType *sharingChangeFolderJoinPolicy;

/// (team_policies) Changed whether members can share links outside team, and if
/// links are accessible only by team members or anyone by default @note Ensure
/// the `isSharingChangeLinkPolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharingChangeLinkPolicyType *sharingChangeLinkPolicy;

/// (team_policies) Changed whether members can share files/folders outside team
/// @note Ensure the `isSharingChangeMemberPolicy` method returns true before
/// accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSharingChangeMemberPolicyType *sharingChangeMemberPolicy;

/// (team_policies) Enabled/disabled downloading files from Dropbox Showcase for
/// team @note Ensure the `isShowcaseChangeDownloadPolicy` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseChangeDownloadPolicyType *showcaseChangeDownloadPolicy;

/// (team_policies) Enabled/disabled Dropbox Showcase for team @note Ensure the
/// `isShowcaseChangeEnabledPolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseChangeEnabledPolicyType *showcaseChangeEnabledPolicy;

/// (team_policies) Enabled/disabled sharing Dropbox Showcase externally for
/// team @note Ensure the `isShowcaseChangeExternalSharingPolicy` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGShowcaseChangeExternalSharingPolicyType *showcaseChangeExternalSharingPolicy;

/// (team_policies) Changed default Smart Sync setting for team members @note
/// Ensure the `isSmartSyncChangePolicy` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSmartSyncChangePolicyType *smartSyncChangePolicy;

/// (team_policies) Opted team into Smart Sync @note Ensure the
/// `isSmartSyncNotOptOut` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSmartSyncNotOptOutType *smartSyncNotOptOut;

/// (team_policies) Opted team out of Smart Sync @note Ensure the
/// `isSmartSyncOptOut` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSmartSyncOptOutType *smartSyncOptOut;

/// (team_policies) Changed single sign-on setting for team @note Ensure the
/// `isSsoChangePolicy` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGSsoChangePolicyType *ssoChangePolicy;

/// (team_policies) Changed two-step verification setting for team @note Ensure
/// the `isTfaChangePolicy` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTfaChangePolicyType *tfaChangePolicy;

/// (team_policies) Enabled/disabled option for members to link personal Dropbox
/// account and team account to same computer @note Ensure the
/// `isTwoAccountChangePolicy` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTwoAccountChangePolicyType *twoAccountChangePolicy;

/// (team_policies) Changed how long members can stay signed in to Dropbox.com
/// @note Ensure the `isWebSessionsChangeFixedLengthPolicy` method returns true
/// before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGWebSessionsChangeFixedLengthPolicyType *webSessionsChangeFixedLengthPolicy;

/// (team_policies) Changed how long team members can be idle while signed in to
/// Dropbox.com @note Ensure the `isWebSessionsChangeIdleLengthPolicy` method
/// returns true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGWebSessionsChangeIdleLengthPolicyType *webSessionsChangeIdleLengthPolicy;

/// (team_profile) Merged another team into this team @note Ensure the
/// `isTeamMergeFrom` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamMergeFromType *teamMergeFrom;

/// (team_profile) Merged this team into another team @note Ensure the
/// `isTeamMergeTo` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamMergeToType *teamMergeTo;

/// (team_profile) Added team logo to display on shared link headers @note
/// Ensure the `isTeamProfileAddLogo` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamProfileAddLogoType *teamProfileAddLogo;

/// (team_profile) Changed default language for team @note Ensure the
/// `isTeamProfileChangeDefaultLanguage` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamProfileChangeDefaultLanguageType *teamProfileChangeDefaultLanguage;

/// (team_profile) Changed team logo displayed on shared link headers @note
/// Ensure the `isTeamProfileChangeLogo` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamProfileChangeLogoType *teamProfileChangeLogo;

/// (team_profile) Changed team name @note Ensure the `isTeamProfileChangeName`
/// method returns true before accessing, otherwise a runtime exception will be
/// raised.
@property (nonatomic, readonly) DBTEAMLOGTeamProfileChangeNameType *teamProfileChangeName;

/// (team_profile) Removed team logo displayed on shared link headers @note
/// Ensure the `isTeamProfileRemoveLogo` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTeamProfileRemoveLogoType *teamProfileRemoveLogo;

/// (tfa) Added backup phone for two-step verification @note Ensure the
/// `isTfaAddBackupPhone` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTfaAddBackupPhoneType *tfaAddBackupPhone;

/// (tfa) Added security key for two-step verification @note Ensure the
/// `isTfaAddSecurityKey` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTfaAddSecurityKeyType *tfaAddSecurityKey;

/// (tfa) Changed backup phone for two-step verification @note Ensure the
/// `isTfaChangeBackupPhone` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTfaChangeBackupPhoneType *tfaChangeBackupPhone;

/// (tfa) Enabled/disabled/changed two-step verification setting @note Ensure
/// the `isTfaChangeStatus` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTfaChangeStatusType *tfaChangeStatus;

/// (tfa) Removed backup phone for two-step verification @note Ensure the
/// `isTfaRemoveBackupPhone` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTfaRemoveBackupPhoneType *tfaRemoveBackupPhone;

/// (tfa) Removed security key for two-step verification @note Ensure the
/// `isTfaRemoveSecurityKey` method returns true before accessing, otherwise a
/// runtime exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTfaRemoveSecurityKeyType *tfaRemoveSecurityKey;

/// (tfa) Reset two-step verification for team member @note Ensure the
/// `isTfaReset` method returns true before accessing, otherwise a runtime
/// exception will be raised.
@property (nonatomic, readonly) DBTEAMLOGTfaResetType *tfaReset;

#pragma mark - Constructors

///
/// Initializes union class with tag state of "app_link_team".
///
/// Description of the "app_link_team" tag state: (apps) Linked app for team
///
/// @param appLinkTeam (apps) Linked app for team
///
/// @return An initialized instance.
///
- (instancetype)initWithAppLinkTeam:(DBTEAMLOGAppLinkTeamType *)appLinkTeam;

///
/// Initializes union class with tag state of "app_link_user".
///
/// Description of the "app_link_user" tag state: (apps) Linked app for member
///
/// @param appLinkUser (apps) Linked app for member
///
/// @return An initialized instance.
///
- (instancetype)initWithAppLinkUser:(DBTEAMLOGAppLinkUserType *)appLinkUser;

///
/// Initializes union class with tag state of "app_unlink_team".
///
/// Description of the "app_unlink_team" tag state: (apps) Unlinked app for team
///
/// @param appUnlinkTeam (apps) Unlinked app for team
///
/// @return An initialized instance.
///
- (instancetype)initWithAppUnlinkTeam:(DBTEAMLOGAppUnlinkTeamType *)appUnlinkTeam;

///
/// Initializes union class with tag state of "app_unlink_user".
///
/// Description of the "app_unlink_user" tag state: (apps) Unlinked app for
/// member
///
/// @param appUnlinkUser (apps) Unlinked app for member
///
/// @return An initialized instance.
///
- (instancetype)initWithAppUnlinkUser:(DBTEAMLOGAppUnlinkUserType *)appUnlinkUser;

///
/// Initializes union class with tag state of "file_add_comment".
///
/// Description of the "file_add_comment" tag state: (comments) Added file
/// comment
///
/// @param fileAddComment (comments) Added file comment
///
/// @return An initialized instance.
///
- (instancetype)initWithFileAddComment:(DBTEAMLOGFileAddCommentType *)fileAddComment;

///
/// Initializes union class with tag state of
/// "file_change_comment_subscription".
///
/// Description of the "file_change_comment_subscription" tag state: (comments)
/// Subscribed to or unsubscribed from comment notifications for file
///
/// @param fileChangeCommentSubscription (comments) Subscribed to or
/// unsubscribed from comment notifications for file
///
/// @return An initialized instance.
///
- (instancetype)initWithFileChangeCommentSubscription:
    (DBTEAMLOGFileChangeCommentSubscriptionType *)fileChangeCommentSubscription;

///
/// Initializes union class with tag state of "file_delete_comment".
///
/// Description of the "file_delete_comment" tag state: (comments) Deleted file
/// comment
///
/// @param fileDeleteComment (comments) Deleted file comment
///
/// @return An initialized instance.
///
- (instancetype)initWithFileDeleteComment:(DBTEAMLOGFileDeleteCommentType *)fileDeleteComment;

///
/// Initializes union class with tag state of "file_like_comment".
///
/// Description of the "file_like_comment" tag state: (comments) Liked file
/// comment (deprecated, no longer logged)
///
/// @param fileLikeComment (comments) Liked file comment (deprecated, no longer
/// logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithFileLikeComment:(DBTEAMLOGFileLikeCommentType *)fileLikeComment;

///
/// Initializes union class with tag state of "file_resolve_comment".
///
/// Description of the "file_resolve_comment" tag state: (comments) Resolved
/// file comment
///
/// @param fileResolveComment (comments) Resolved file comment
///
/// @return An initialized instance.
///
- (instancetype)initWithFileResolveComment:(DBTEAMLOGFileResolveCommentType *)fileResolveComment;

///
/// Initializes union class with tag state of "file_unlike_comment".
///
/// Description of the "file_unlike_comment" tag state: (comments) Unliked file
/// comment (deprecated, no longer logged)
///
/// @param fileUnlikeComment (comments) Unliked file comment (deprecated, no
/// longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithFileUnlikeComment:(DBTEAMLOGFileUnlikeCommentType *)fileUnlikeComment;

///
/// Initializes union class with tag state of "file_unresolve_comment".
///
/// Description of the "file_unresolve_comment" tag state: (comments) Unresolved
/// file comment
///
/// @param fileUnresolveComment (comments) Unresolved file comment
///
/// @return An initialized instance.
///
- (instancetype)initWithFileUnresolveComment:(DBTEAMLOGFileUnresolveCommentType *)fileUnresolveComment;

///
/// Initializes union class with tag state of "device_change_ip_desktop".
///
/// Description of the "device_change_ip_desktop" tag state: (devices) Changed
/// IP address associated with active desktop session
///
/// @param deviceChangeIpDesktop (devices) Changed IP address associated with
/// active desktop session
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceChangeIpDesktop:(DBTEAMLOGDeviceChangeIpDesktopType *)deviceChangeIpDesktop;

///
/// Initializes union class with tag state of "device_change_ip_mobile".
///
/// Description of the "device_change_ip_mobile" tag state: (devices) Changed IP
/// address associated with active mobile session
///
/// @param deviceChangeIpMobile (devices) Changed IP address associated with
/// active mobile session
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceChangeIpMobile:(DBTEAMLOGDeviceChangeIpMobileType *)deviceChangeIpMobile;

///
/// Initializes union class with tag state of "device_change_ip_web".
///
/// Description of the "device_change_ip_web" tag state: (devices) Changed IP
/// address associated with active web session
///
/// @param deviceChangeIpWeb (devices) Changed IP address associated with active
/// web session
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceChangeIpWeb:(DBTEAMLOGDeviceChangeIpWebType *)deviceChangeIpWeb;

///
/// Initializes union class with tag state of "device_delete_on_unlink_fail".
///
/// Description of the "device_delete_on_unlink_fail" tag state: (devices)
/// Failed to delete all files from unlinked device
///
/// @param deviceDeleteOnUnlinkFail (devices) Failed to delete all files from
/// unlinked device
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceDeleteOnUnlinkFail:(DBTEAMLOGDeviceDeleteOnUnlinkFailType *)deviceDeleteOnUnlinkFail;

///
/// Initializes union class with tag state of "device_delete_on_unlink_success".
///
/// Description of the "device_delete_on_unlink_success" tag state: (devices)
/// Deleted all files from unlinked device
///
/// @param deviceDeleteOnUnlinkSuccess (devices) Deleted all files from unlinked
/// device
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceDeleteOnUnlinkSuccess:
    (DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *)deviceDeleteOnUnlinkSuccess;

///
/// Initializes union class with tag state of "device_link_fail".
///
/// Description of the "device_link_fail" tag state: (devices) Failed to link
/// device
///
/// @param deviceLinkFail (devices) Failed to link device
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceLinkFail:(DBTEAMLOGDeviceLinkFailType *)deviceLinkFail;

///
/// Initializes union class with tag state of "device_link_success".
///
/// Description of the "device_link_success" tag state: (devices) Linked device
///
/// @param deviceLinkSuccess (devices) Linked device
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceLinkSuccess:(DBTEAMLOGDeviceLinkSuccessType *)deviceLinkSuccess;

///
/// Initializes union class with tag state of "device_management_disabled".
///
/// Description of the "device_management_disabled" tag state: (devices)
/// Disabled device management (deprecated, no longer logged)
///
/// @param deviceManagementDisabled (devices) Disabled device management
/// (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceManagementDisabled:(DBTEAMLOGDeviceManagementDisabledType *)deviceManagementDisabled;

///
/// Initializes union class with tag state of "device_management_enabled".
///
/// Description of the "device_management_enabled" tag state: (devices) Enabled
/// device management (deprecated, no longer logged)
///
/// @param deviceManagementEnabled (devices) Enabled device management
/// (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceManagementEnabled:(DBTEAMLOGDeviceManagementEnabledType *)deviceManagementEnabled;

///
/// Initializes union class with tag state of "device_unlink".
///
/// Description of the "device_unlink" tag state: (devices) Disconnected device
///
/// @param deviceUnlink (devices) Disconnected device
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceUnlink:(DBTEAMLOGDeviceUnlinkType *)deviceUnlink;

///
/// Initializes union class with tag state of "emm_refresh_auth_token".
///
/// Description of the "emm_refresh_auth_token" tag state: (devices) Refreshed
/// auth token used for setting up enterprise mobility management
///
/// @param emmRefreshAuthToken (devices) Refreshed auth token used for setting
/// up enterprise mobility management
///
/// @return An initialized instance.
///
- (instancetype)initWithEmmRefreshAuthToken:(DBTEAMLOGEmmRefreshAuthTokenType *)emmRefreshAuthToken;

///
/// Initializes union class with tag state of
/// "account_capture_change_availability".
///
/// Description of the "account_capture_change_availability" tag state:
/// (domains) Granted/revoked option to enable account capture on team domains
///
/// @param accountCaptureChangeAvailability (domains) Granted/revoked option to
/// enable account capture on team domains
///
/// @return An initialized instance.
///
- (instancetype)initWithAccountCaptureChangeAvailability:
    (DBTEAMLOGAccountCaptureChangeAvailabilityType *)accountCaptureChangeAvailability;

///
/// Initializes union class with tag state of "account_capture_migrate_account".
///
/// Description of the "account_capture_migrate_account" tag state: (domains)
/// Account-captured user migrated account to team
///
/// @param accountCaptureMigrateAccount (domains) Account-captured user migrated
/// account to team
///
/// @return An initialized instance.
///
- (instancetype)initWithAccountCaptureMigrateAccount:
    (DBTEAMLOGAccountCaptureMigrateAccountType *)accountCaptureMigrateAccount;

///
/// Initializes union class with tag state of
/// "account_capture_notification_emails_sent".
///
/// Description of the "account_capture_notification_emails_sent" tag state:
/// (domains) Sent proactive account capture email to all unmanaged members
///
/// @param accountCaptureNotificationEmailsSent (domains) Sent proactive account
/// capture email to all unmanaged members
///
/// @return An initialized instance.
///
- (instancetype)initWithAccountCaptureNotificationEmailsSent:
    (DBTEAMLOGAccountCaptureNotificationEmailsSentType *)accountCaptureNotificationEmailsSent;

///
/// Initializes union class with tag state of
/// "account_capture_relinquish_account".
///
/// Description of the "account_capture_relinquish_account" tag state: (domains)
/// Account-captured user changed account email to personal email
///
/// @param accountCaptureRelinquishAccount (domains) Account-captured user
/// changed account email to personal email
///
/// @return An initialized instance.
///
- (instancetype)initWithAccountCaptureRelinquishAccount:
    (DBTEAMLOGAccountCaptureRelinquishAccountType *)accountCaptureRelinquishAccount;

///
/// Initializes union class with tag state of "disabled_domain_invites".
///
/// Description of the "disabled_domain_invites" tag state: (domains) Disabled
/// domain invites (deprecated, no longer logged)
///
/// @param disabledDomainInvites (domains) Disabled domain invites (deprecated,
/// no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithDisabledDomainInvites:(DBTEAMLOGDisabledDomainInvitesType *)disabledDomainInvites;

///
/// Initializes union class with tag state of
/// "domain_invites_approve_request_to_join_team".
///
/// Description of the "domain_invites_approve_request_to_join_team" tag state:
/// (domains) Approved user's request to join team
///
/// @param domainInvitesApproveRequestToJoinTeam (domains) Approved user's
/// request to join team
///
/// @return An initialized instance.
///
- (instancetype)initWithDomainInvitesApproveRequestToJoinTeam:
    (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *)domainInvitesApproveRequestToJoinTeam;

///
/// Initializes union class with tag state of
/// "domain_invites_decline_request_to_join_team".
///
/// Description of the "domain_invites_decline_request_to_join_team" tag state:
/// (domains) Declined user's request to join team
///
/// @param domainInvitesDeclineRequestToJoinTeam (domains) Declined user's
/// request to join team
///
/// @return An initialized instance.
///
- (instancetype)initWithDomainInvitesDeclineRequestToJoinTeam:
    (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *)domainInvitesDeclineRequestToJoinTeam;

///
/// Initializes union class with tag state of
/// "domain_invites_email_existing_users".
///
/// Description of the "domain_invites_email_existing_users" tag state:
/// (domains) Sent domain invites to existing domain accounts (deprecated, no
/// longer logged)
///
/// @param domainInvitesEmailExistingUsers (domains) Sent domain invites to
/// existing domain accounts (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithDomainInvitesEmailExistingUsers:
    (DBTEAMLOGDomainInvitesEmailExistingUsersType *)domainInvitesEmailExistingUsers;

///
/// Initializes union class with tag state of
/// "domain_invites_request_to_join_team".
///
/// Description of the "domain_invites_request_to_join_team" tag state:
/// (domains) Requested to join team
///
/// @param domainInvitesRequestToJoinTeam (domains) Requested to join team
///
/// @return An initialized instance.
///
- (instancetype)initWithDomainInvitesRequestToJoinTeam:
    (DBTEAMLOGDomainInvitesRequestToJoinTeamType *)domainInvitesRequestToJoinTeam;

///
/// Initializes union class with tag state of
/// "domain_invites_set_invite_new_user_pref_to_no".
///
/// Description of the "domain_invites_set_invite_new_user_pref_to_no" tag
/// state: (domains) Disabled "Automatically invite new users" (deprecated, no
/// longer logged)
///
/// @param domainInvitesSetInviteNewUserPrefToNo (domains) Disabled
/// "Automatically invite new users" (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToNo:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *)domainInvitesSetInviteNewUserPrefToNo;

///
/// Initializes union class with tag state of
/// "domain_invites_set_invite_new_user_pref_to_yes".
///
/// Description of the "domain_invites_set_invite_new_user_pref_to_yes" tag
/// state: (domains) Enabled "Automatically invite new users" (deprecated, no
/// longer logged)
///
/// @param domainInvitesSetInviteNewUserPrefToYes (domains) Enabled
/// "Automatically invite new users" (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToYes:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *)domainInvitesSetInviteNewUserPrefToYes;

///
/// Initializes union class with tag state of
/// "domain_verification_add_domain_fail".
///
/// Description of the "domain_verification_add_domain_fail" tag state:
/// (domains) Failed to verify team domain
///
/// @param domainVerificationAddDomainFail (domains) Failed to verify team
/// domain
///
/// @return An initialized instance.
///
- (instancetype)initWithDomainVerificationAddDomainFail:
    (DBTEAMLOGDomainVerificationAddDomainFailType *)domainVerificationAddDomainFail;

///
/// Initializes union class with tag state of
/// "domain_verification_add_domain_success".
///
/// Description of the "domain_verification_add_domain_success" tag state:
/// (domains) Verified team domain
///
/// @param domainVerificationAddDomainSuccess (domains) Verified team domain
///
/// @return An initialized instance.
///
- (instancetype)initWithDomainVerificationAddDomainSuccess:
    (DBTEAMLOGDomainVerificationAddDomainSuccessType *)domainVerificationAddDomainSuccess;

///
/// Initializes union class with tag state of
/// "domain_verification_remove_domain".
///
/// Description of the "domain_verification_remove_domain" tag state: (domains)
/// Removed domain from list of verified team domains
///
/// @param domainVerificationRemoveDomain (domains) Removed domain from list of
/// verified team domains
///
/// @return An initialized instance.
///
- (instancetype)initWithDomainVerificationRemoveDomain:
    (DBTEAMLOGDomainVerificationRemoveDomainType *)domainVerificationRemoveDomain;

///
/// Initializes union class with tag state of "enabled_domain_invites".
///
/// Description of the "enabled_domain_invites" tag state: (domains) Enabled
/// domain invites (deprecated, no longer logged)
///
/// @param enabledDomainInvites (domains) Enabled domain invites (deprecated, no
/// longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithEnabledDomainInvites:(DBTEAMLOGEnabledDomainInvitesType *)enabledDomainInvites;

///
/// Initializes union class with tag state of "create_folder".
///
/// Description of the "create_folder" tag state: (file_operations) Created
/// folders (deprecated, no longer logged)
///
/// @param createFolder (file_operations) Created folders (deprecated, no longer
/// logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithCreateFolder:(DBTEAMLOGCreateFolderType *)createFolder;

///
/// Initializes union class with tag state of "file_add".
///
/// Description of the "file_add" tag state: (file_operations) Added files
/// and/or folders
///
/// @param fileAdd (file_operations) Added files and/or folders
///
/// @return An initialized instance.
///
- (instancetype)initWithFileAdd:(DBTEAMLOGFileAddType *)fileAdd;

///
/// Initializes union class with tag state of "file_copy".
///
/// Description of the "file_copy" tag state: (file_operations) Copied files
/// and/or folders
///
/// @param fileCopy (file_operations) Copied files and/or folders
///
/// @return An initialized instance.
///
- (instancetype)initWithFileCopy:(DBTEAMLOGFileCopyType *)fileCopy;

///
/// Initializes union class with tag state of "file_delete".
///
/// Description of the "file_delete" tag state: (file_operations) Deleted files
/// and/or folders
///
/// @param fileDelete (file_operations) Deleted files and/or folders
///
/// @return An initialized instance.
///
- (instancetype)initWithFileDelete:(DBTEAMLOGFileDeleteType *)fileDelete;

///
/// Initializes union class with tag state of "file_download".
///
/// Description of the "file_download" tag state: (file_operations) Downloaded
/// files and/or folders
///
/// @param fileDownload (file_operations) Downloaded files and/or folders
///
/// @return An initialized instance.
///
- (instancetype)initWithFileDownload:(DBTEAMLOGFileDownloadType *)fileDownload;

///
/// Initializes union class with tag state of "file_edit".
///
/// Description of the "file_edit" tag state: (file_operations) Edited files
///
/// @param fileEdit (file_operations) Edited files
///
/// @return An initialized instance.
///
- (instancetype)initWithFileEdit:(DBTEAMLOGFileEditType *)fileEdit;

///
/// Initializes union class with tag state of "file_get_copy_reference".
///
/// Description of the "file_get_copy_reference" tag state: (file_operations)
/// Created copy reference to file/folder
///
/// @param fileGetCopyReference (file_operations) Created copy reference to
/// file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithFileGetCopyReference:(DBTEAMLOGFileGetCopyReferenceType *)fileGetCopyReference;

///
/// Initializes union class with tag state of "file_move".
///
/// Description of the "file_move" tag state: (file_operations) Moved files
/// and/or folders
///
/// @param fileMove (file_operations) Moved files and/or folders
///
/// @return An initialized instance.
///
- (instancetype)initWithFileMove:(DBTEAMLOGFileMoveType *)fileMove;

///
/// Initializes union class with tag state of "file_permanently_delete".
///
/// Description of the "file_permanently_delete" tag state: (file_operations)
/// Permanently deleted files and/or folders
///
/// @param filePermanentlyDelete (file_operations) Permanently deleted files
/// and/or folders
///
/// @return An initialized instance.
///
- (instancetype)initWithFilePermanentlyDelete:(DBTEAMLOGFilePermanentlyDeleteType *)filePermanentlyDelete;

///
/// Initializes union class with tag state of "file_preview".
///
/// Description of the "file_preview" tag state: (file_operations) Previewed
/// files and/or folders
///
/// @param filePreview (file_operations) Previewed files and/or folders
///
/// @return An initialized instance.
///
- (instancetype)initWithFilePreview:(DBTEAMLOGFilePreviewType *)filePreview;

///
/// Initializes union class with tag state of "file_rename".
///
/// Description of the "file_rename" tag state: (file_operations) Renamed files
/// and/or folders
///
/// @param fileRename (file_operations) Renamed files and/or folders
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRename:(DBTEAMLOGFileRenameType *)fileRename;

///
/// Initializes union class with tag state of "file_restore".
///
/// Description of the "file_restore" tag state: (file_operations) Restored
/// deleted files and/or folders
///
/// @param fileRestore (file_operations) Restored deleted files and/or folders
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRestore:(DBTEAMLOGFileRestoreType *)fileRestore;

///
/// Initializes union class with tag state of "file_revert".
///
/// Description of the "file_revert" tag state: (file_operations) Reverted files
/// to previous version
///
/// @param fileRevert (file_operations) Reverted files to previous version
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRevert:(DBTEAMLOGFileRevertType *)fileRevert;

///
/// Initializes union class with tag state of "file_rollback_changes".
///
/// Description of the "file_rollback_changes" tag state: (file_operations)
/// Rolled back file actions
///
/// @param fileRollbackChanges (file_operations) Rolled back file actions
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRollbackChanges:(DBTEAMLOGFileRollbackChangesType *)fileRollbackChanges;

///
/// Initializes union class with tag state of "file_save_copy_reference".
///
/// Description of the "file_save_copy_reference" tag state: (file_operations)
/// Saved file/folder using copy reference
///
/// @param fileSaveCopyReference (file_operations) Saved file/folder using copy
/// reference
///
/// @return An initialized instance.
///
- (instancetype)initWithFileSaveCopyReference:(DBTEAMLOGFileSaveCopyReferenceType *)fileSaveCopyReference;

///
/// Initializes union class with tag state of "file_request_change".
///
/// Description of the "file_request_change" tag state: (file_requests) Changed
/// file request
///
/// @param fileRequestChange (file_requests) Changed file request
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRequestChange:(DBTEAMLOGFileRequestChangeType *)fileRequestChange;

///
/// Initializes union class with tag state of "file_request_close".
///
/// Description of the "file_request_close" tag state: (file_requests) Closed
/// file request
///
/// @param fileRequestClose (file_requests) Closed file request
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRequestClose:(DBTEAMLOGFileRequestCloseType *)fileRequestClose;

///
/// Initializes union class with tag state of "file_request_create".
///
/// Description of the "file_request_create" tag state: (file_requests) Created
/// file request
///
/// @param fileRequestCreate (file_requests) Created file request
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRequestCreate:(DBTEAMLOGFileRequestCreateType *)fileRequestCreate;

///
/// Initializes union class with tag state of "file_request_receive_file".
///
/// Description of the "file_request_receive_file" tag state: (file_requests)
/// Received files for file request
///
/// @param fileRequestReceiveFile (file_requests) Received files for file
/// request
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRequestReceiveFile:(DBTEAMLOGFileRequestReceiveFileType *)fileRequestReceiveFile;

///
/// Initializes union class with tag state of "group_add_external_id".
///
/// Description of the "group_add_external_id" tag state: (groups) Added
/// external ID for group
///
/// @param groupAddExternalId (groups) Added external ID for group
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupAddExternalId:(DBTEAMLOGGroupAddExternalIdType *)groupAddExternalId;

///
/// Initializes union class with tag state of "group_add_member".
///
/// Description of the "group_add_member" tag state: (groups) Added team members
/// to group
///
/// @param groupAddMember (groups) Added team members to group
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupAddMember:(DBTEAMLOGGroupAddMemberType *)groupAddMember;

///
/// Initializes union class with tag state of "group_change_external_id".
///
/// Description of the "group_change_external_id" tag state: (groups) Changed
/// external ID for group
///
/// @param groupChangeExternalId (groups) Changed external ID for group
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupChangeExternalId:(DBTEAMLOGGroupChangeExternalIdType *)groupChangeExternalId;

///
/// Initializes union class with tag state of "group_change_management_type".
///
/// Description of the "group_change_management_type" tag state: (groups)
/// Changed group management type
///
/// @param groupChangeManagementType (groups) Changed group management type
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupChangeManagementType:(DBTEAMLOGGroupChangeManagementTypeType *)groupChangeManagementType;

///
/// Initializes union class with tag state of "group_change_member_role".
///
/// Description of the "group_change_member_role" tag state: (groups) Changed
/// manager permissions of group member
///
/// @param groupChangeMemberRole (groups) Changed manager permissions of group
/// member
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupChangeMemberRole:(DBTEAMLOGGroupChangeMemberRoleType *)groupChangeMemberRole;

///
/// Initializes union class with tag state of "group_create".
///
/// Description of the "group_create" tag state: (groups) Created group
///
/// @param groupCreate (groups) Created group
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupCreate:(DBTEAMLOGGroupCreateType *)groupCreate;

///
/// Initializes union class with tag state of "group_delete".
///
/// Description of the "group_delete" tag state: (groups) Deleted group
///
/// @param groupDelete (groups) Deleted group
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupDelete:(DBTEAMLOGGroupDeleteType *)groupDelete;

///
/// Initializes union class with tag state of "group_description_updated".
///
/// Description of the "group_description_updated" tag state: (groups) Updated
/// group (deprecated, no longer logged)
///
/// @param groupDescriptionUpdated (groups) Updated group (deprecated, no longer
/// logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupDescriptionUpdated:(DBTEAMLOGGroupDescriptionUpdatedType *)groupDescriptionUpdated;

///
/// Initializes union class with tag state of "group_join_policy_updated".
///
/// Description of the "group_join_policy_updated" tag state: (groups) Updated
/// group join policy (deprecated, no longer logged)
///
/// @param groupJoinPolicyUpdated (groups) Updated group join policy
/// (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupJoinPolicyUpdated:(DBTEAMLOGGroupJoinPolicyUpdatedType *)groupJoinPolicyUpdated;

///
/// Initializes union class with tag state of "group_moved".
///
/// Description of the "group_moved" tag state: (groups) Moved group
/// (deprecated, no longer logged)
///
/// @param groupMoved (groups) Moved group (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupMoved:(DBTEAMLOGGroupMovedType *)groupMoved;

///
/// Initializes union class with tag state of "group_remove_external_id".
///
/// Description of the "group_remove_external_id" tag state: (groups) Removed
/// external ID for group
///
/// @param groupRemoveExternalId (groups) Removed external ID for group
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupRemoveExternalId:(DBTEAMLOGGroupRemoveExternalIdType *)groupRemoveExternalId;

///
/// Initializes union class with tag state of "group_remove_member".
///
/// Description of the "group_remove_member" tag state: (groups) Removed team
/// members from group
///
/// @param groupRemoveMember (groups) Removed team members from group
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupRemoveMember:(DBTEAMLOGGroupRemoveMemberType *)groupRemoveMember;

///
/// Initializes union class with tag state of "group_rename".
///
/// Description of the "group_rename" tag state: (groups) Renamed group
///
/// @param groupRename (groups) Renamed group
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupRename:(DBTEAMLOGGroupRenameType *)groupRename;

///
/// Initializes union class with tag state of "emm_error".
///
/// Description of the "emm_error" tag state: (logins) Failed to sign in via EMM
/// (deprecated, replaced by 'Failed to sign in')
///
/// @param emmError (logins) Failed to sign in via EMM (deprecated, replaced by
/// 'Failed to sign in')
///
/// @return An initialized instance.
///
- (instancetype)initWithEmmError:(DBTEAMLOGEmmErrorType *)emmError;

///
/// Initializes union class with tag state of "login_fail".
///
/// Description of the "login_fail" tag state: (logins) Failed to sign in
///
/// @param loginFail (logins) Failed to sign in
///
/// @return An initialized instance.
///
- (instancetype)initWithLoginFail:(DBTEAMLOGLoginFailType *)loginFail;

///
/// Initializes union class with tag state of "login_success".
///
/// Description of the "login_success" tag state: (logins) Signed in
///
/// @param loginSuccess (logins) Signed in
///
/// @return An initialized instance.
///
- (instancetype)initWithLoginSuccess:(DBTEAMLOGLoginSuccessType *)loginSuccess;

///
/// Initializes union class with tag state of "logout".
///
/// Description of the "logout" tag state: (logins) Signed out
///
/// @param logout (logins) Signed out
///
/// @return An initialized instance.
///
- (instancetype)initWithLogout:(DBTEAMLOGLogoutType *)logout;

///
/// Initializes union class with tag state of "reseller_support_session_end".
///
/// Description of the "reseller_support_session_end" tag state: (logins) Ended
/// reseller support session
///
/// @param resellerSupportSessionEnd (logins) Ended reseller support session
///
/// @return An initialized instance.
///
- (instancetype)initWithResellerSupportSessionEnd:(DBTEAMLOGResellerSupportSessionEndType *)resellerSupportSessionEnd;

///
/// Initializes union class with tag state of "reseller_support_session_start".
///
/// Description of the "reseller_support_session_start" tag state: (logins)
/// Started reseller support session
///
/// @param resellerSupportSessionStart (logins) Started reseller support session
///
/// @return An initialized instance.
///
- (instancetype)initWithResellerSupportSessionStart:
    (DBTEAMLOGResellerSupportSessionStartType *)resellerSupportSessionStart;

///
/// Initializes union class with tag state of "sign_in_as_session_end".
///
/// Description of the "sign_in_as_session_end" tag state: (logins) Ended admin
/// sign-in-as session
///
/// @param signInAsSessionEnd (logins) Ended admin sign-in-as session
///
/// @return An initialized instance.
///
- (instancetype)initWithSignInAsSessionEnd:(DBTEAMLOGSignInAsSessionEndType *)signInAsSessionEnd;

///
/// Initializes union class with tag state of "sign_in_as_session_start".
///
/// Description of the "sign_in_as_session_start" tag state: (logins) Started
/// admin sign-in-as session
///
/// @param signInAsSessionStart (logins) Started admin sign-in-as session
///
/// @return An initialized instance.
///
- (instancetype)initWithSignInAsSessionStart:(DBTEAMLOGSignInAsSessionStartType *)signInAsSessionStart;

///
/// Initializes union class with tag state of "sso_error".
///
/// Description of the "sso_error" tag state: (logins) Failed to sign in via SSO
/// (deprecated, replaced by 'Failed to sign in')
///
/// @param ssoError (logins) Failed to sign in via SSO (deprecated, replaced by
/// 'Failed to sign in')
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoError:(DBTEAMLOGSsoErrorType *)ssoError;

///
/// Initializes union class with tag state of "member_add_name".
///
/// Description of the "member_add_name" tag state: (members) Added team member
/// name
///
/// @param memberAddName (members) Added team member name
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberAddName:(DBTEAMLOGMemberAddNameType *)memberAddName;

///
/// Initializes union class with tag state of "member_change_admin_role".
///
/// Description of the "member_change_admin_role" tag state: (members) Changed
/// team member admin role
///
/// @param memberChangeAdminRole (members) Changed team member admin role
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberChangeAdminRole:(DBTEAMLOGMemberChangeAdminRoleType *)memberChangeAdminRole;

///
/// Initializes union class with tag state of "member_change_email".
///
/// Description of the "member_change_email" tag state: (members) Changed team
/// member email
///
/// @param memberChangeEmail (members) Changed team member email
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberChangeEmail:(DBTEAMLOGMemberChangeEmailType *)memberChangeEmail;

///
/// Initializes union class with tag state of "member_change_membership_type".
///
/// Description of the "member_change_membership_type" tag state: (members)
/// Changed membership type (limited/full) of member (deprecated, no longer
/// logged)
///
/// @param memberChangeMembershipType (members) Changed membership type
/// (limited/full) of member (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberChangeMembershipType:
    (DBTEAMLOGMemberChangeMembershipTypeType *)memberChangeMembershipType;

///
/// Initializes union class with tag state of "member_change_name".
///
/// Description of the "member_change_name" tag state: (members) Changed team
/// member name
///
/// @param memberChangeName (members) Changed team member name
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberChangeName:(DBTEAMLOGMemberChangeNameType *)memberChangeName;

///
/// Initializes union class with tag state of "member_change_status".
///
/// Description of the "member_change_status" tag state: (members) Changed
/// member status (invited, joined, suspended, etc.)
///
/// @param memberChangeStatus (members) Changed member status (invited, joined,
/// suspended, etc.)
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberChangeStatus:(DBTEAMLOGMemberChangeStatusType *)memberChangeStatus;

///
/// Initializes union class with tag state of
/// "member_permanently_delete_account_contents".
///
/// Description of the "member_permanently_delete_account_contents" tag state:
/// (members) Permanently deleted contents of deleted team member account
///
/// @param memberPermanentlyDeleteAccountContents (members) Permanently deleted
/// contents of deleted team member account
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberPermanentlyDeleteAccountContents:
    (DBTEAMLOGMemberPermanentlyDeleteAccountContentsType *)memberPermanentlyDeleteAccountContents;

///
/// Initializes union class with tag state of
/// "member_space_limits_add_custom_quota".
///
/// Description of the "member_space_limits_add_custom_quota" tag state:
/// (members) Set custom member space limit
///
/// @param memberSpaceLimitsAddCustomQuota (members) Set custom member space
/// limit
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberSpaceLimitsAddCustomQuota:
    (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType *)memberSpaceLimitsAddCustomQuota;

///
/// Initializes union class with tag state of
/// "member_space_limits_change_custom_quota".
///
/// Description of the "member_space_limits_change_custom_quota" tag state:
/// (members) Changed custom member space limit
///
/// @param memberSpaceLimitsChangeCustomQuota (members) Changed custom member
/// space limit
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberSpaceLimitsChangeCustomQuota:
    (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType *)memberSpaceLimitsChangeCustomQuota;

///
/// Initializes union class with tag state of
/// "member_space_limits_change_status".
///
/// Description of the "member_space_limits_change_status" tag state: (members)
/// Changed space limit status
///
/// @param memberSpaceLimitsChangeStatus (members) Changed space limit status
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberSpaceLimitsChangeStatus:
    (DBTEAMLOGMemberSpaceLimitsChangeStatusType *)memberSpaceLimitsChangeStatus;

///
/// Initializes union class with tag state of
/// "member_space_limits_remove_custom_quota".
///
/// Description of the "member_space_limits_remove_custom_quota" tag state:
/// (members) Removed custom member space limit
///
/// @param memberSpaceLimitsRemoveCustomQuota (members) Removed custom member
/// space limit
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberSpaceLimitsRemoveCustomQuota:
    (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType *)memberSpaceLimitsRemoveCustomQuota;

///
/// Initializes union class with tag state of "member_suggest".
///
/// Description of the "member_suggest" tag state: (members) Suggested person to
/// add to team
///
/// @param memberSuggest (members) Suggested person to add to team
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberSuggest:(DBTEAMLOGMemberSuggestType *)memberSuggest;

///
/// Initializes union class with tag state of
/// "member_transfer_account_contents".
///
/// Description of the "member_transfer_account_contents" tag state: (members)
/// Transferred contents of deleted member account to another member
///
/// @param memberTransferAccountContents (members) Transferred contents of
/// deleted member account to another member
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberTransferAccountContents:
    (DBTEAMLOGMemberTransferAccountContentsType *)memberTransferAccountContents;

///
/// Initializes union class with tag state of "secondary_mails_policy_changed".
///
/// Description of the "secondary_mails_policy_changed" tag state: (members)
/// Secondary mails policy changed
///
/// @param secondaryMailsPolicyChanged (members) Secondary mails policy changed
///
/// @return An initialized instance.
///
- (instancetype)initWithSecondaryMailsPolicyChanged:
    (DBTEAMLOGSecondaryMailsPolicyChangedType *)secondaryMailsPolicyChanged;

///
/// Initializes union class with tag state of "paper_content_add_member".
///
/// Description of the "paper_content_add_member" tag state: (paper) Added team
/// member to Paper doc/folder
///
/// @param paperContentAddMember (paper) Added team member to Paper doc/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperContentAddMember:(DBTEAMLOGPaperContentAddMemberType *)paperContentAddMember;

///
/// Initializes union class with tag state of "paper_content_add_to_folder".
///
/// Description of the "paper_content_add_to_folder" tag state: (paper) Added
/// Paper doc/folder to folder
///
/// @param paperContentAddToFolder (paper) Added Paper doc/folder to folder
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperContentAddToFolder:(DBTEAMLOGPaperContentAddToFolderType *)paperContentAddToFolder;

///
/// Initializes union class with tag state of "paper_content_archive".
///
/// Description of the "paper_content_archive" tag state: (paper) Archived Paper
/// doc/folder
///
/// @param paperContentArchive (paper) Archived Paper doc/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperContentArchive:(DBTEAMLOGPaperContentArchiveType *)paperContentArchive;

///
/// Initializes union class with tag state of "paper_content_create".
///
/// Description of the "paper_content_create" tag state: (paper) Created Paper
/// doc/folder
///
/// @param paperContentCreate (paper) Created Paper doc/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperContentCreate:(DBTEAMLOGPaperContentCreateType *)paperContentCreate;

///
/// Initializes union class with tag state of
/// "paper_content_permanently_delete".
///
/// Description of the "paper_content_permanently_delete" tag state: (paper)
/// Permanently deleted Paper doc/folder
///
/// @param paperContentPermanentlyDelete (paper) Permanently deleted Paper
/// doc/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperContentPermanentlyDelete:
    (DBTEAMLOGPaperContentPermanentlyDeleteType *)paperContentPermanentlyDelete;

///
/// Initializes union class with tag state of
/// "paper_content_remove_from_folder".
///
/// Description of the "paper_content_remove_from_folder" tag state: (paper)
/// Removed Paper doc/folder from folder
///
/// @param paperContentRemoveFromFolder (paper) Removed Paper doc/folder from
/// folder
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperContentRemoveFromFolder:
    (DBTEAMLOGPaperContentRemoveFromFolderType *)paperContentRemoveFromFolder;

///
/// Initializes union class with tag state of "paper_content_remove_member".
///
/// Description of the "paper_content_remove_member" tag state: (paper) Removed
/// team member from Paper doc/folder
///
/// @param paperContentRemoveMember (paper) Removed team member from Paper
/// doc/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperContentRemoveMember:(DBTEAMLOGPaperContentRemoveMemberType *)paperContentRemoveMember;

///
/// Initializes union class with tag state of "paper_content_rename".
///
/// Description of the "paper_content_rename" tag state: (paper) Renamed Paper
/// doc/folder
///
/// @param paperContentRename (paper) Renamed Paper doc/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperContentRename:(DBTEAMLOGPaperContentRenameType *)paperContentRename;

///
/// Initializes union class with tag state of "paper_content_restore".
///
/// Description of the "paper_content_restore" tag state: (paper) Restored
/// archived Paper doc/folder
///
/// @param paperContentRestore (paper) Restored archived Paper doc/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperContentRestore:(DBTEAMLOGPaperContentRestoreType *)paperContentRestore;

///
/// Initializes union class with tag state of "paper_doc_add_comment".
///
/// Description of the "paper_doc_add_comment" tag state: (paper) Added Paper
/// doc comment
///
/// @param paperDocAddComment (paper) Added Paper doc comment
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocAddComment:(DBTEAMLOGPaperDocAddCommentType *)paperDocAddComment;

///
/// Initializes union class with tag state of "paper_doc_change_member_role".
///
/// Description of the "paper_doc_change_member_role" tag state: (paper) Changed
/// team member permissions for Paper doc
///
/// @param paperDocChangeMemberRole (paper) Changed team member permissions for
/// Paper doc
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocChangeMemberRole:(DBTEAMLOGPaperDocChangeMemberRoleType *)paperDocChangeMemberRole;

///
/// Initializes union class with tag state of "paper_doc_change_sharing_policy".
///
/// Description of the "paper_doc_change_sharing_policy" tag state: (paper)
/// Changed sharing setting for Paper doc
///
/// @param paperDocChangeSharingPolicy (paper) Changed sharing setting for Paper
/// doc
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocChangeSharingPolicy:
    (DBTEAMLOGPaperDocChangeSharingPolicyType *)paperDocChangeSharingPolicy;

///
/// Initializes union class with tag state of "paper_doc_change_subscription".
///
/// Description of the "paper_doc_change_subscription" tag state: (paper)
/// Followed/unfollowed Paper doc
///
/// @param paperDocChangeSubscription (paper) Followed/unfollowed Paper doc
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocChangeSubscription:
    (DBTEAMLOGPaperDocChangeSubscriptionType *)paperDocChangeSubscription;

///
/// Initializes union class with tag state of "paper_doc_deleted".
///
/// Description of the "paper_doc_deleted" tag state: (paper) Archived Paper doc
/// (deprecated, no longer logged)
///
/// @param paperDocDeleted (paper) Archived Paper doc (deprecated, no longer
/// logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocDeleted:(DBTEAMLOGPaperDocDeletedType *)paperDocDeleted;

///
/// Initializes union class with tag state of "paper_doc_delete_comment".
///
/// Description of the "paper_doc_delete_comment" tag state: (paper) Deleted
/// Paper doc comment
///
/// @param paperDocDeleteComment (paper) Deleted Paper doc comment
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocDeleteComment:(DBTEAMLOGPaperDocDeleteCommentType *)paperDocDeleteComment;

///
/// Initializes union class with tag state of "paper_doc_download".
///
/// Description of the "paper_doc_download" tag state: (paper) Downloaded Paper
/// doc in specific format
///
/// @param paperDocDownload (paper) Downloaded Paper doc in specific format
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocDownload:(DBTEAMLOGPaperDocDownloadType *)paperDocDownload;

///
/// Initializes union class with tag state of "paper_doc_edit".
///
/// Description of the "paper_doc_edit" tag state: (paper) Edited Paper doc
///
/// @param paperDocEdit (paper) Edited Paper doc
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocEdit:(DBTEAMLOGPaperDocEditType *)paperDocEdit;

///
/// Initializes union class with tag state of "paper_doc_edit_comment".
///
/// Description of the "paper_doc_edit_comment" tag state: (paper) Edited Paper
/// doc comment
///
/// @param paperDocEditComment (paper) Edited Paper doc comment
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocEditComment:(DBTEAMLOGPaperDocEditCommentType *)paperDocEditComment;

///
/// Initializes union class with tag state of "paper_doc_followed".
///
/// Description of the "paper_doc_followed" tag state: (paper) Followed Paper
/// doc (deprecated, replaced by 'Followed/unfollowed Paper doc')
///
/// @param paperDocFollowed (paper) Followed Paper doc (deprecated, replaced by
/// 'Followed/unfollowed Paper doc')
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocFollowed:(DBTEAMLOGPaperDocFollowedType *)paperDocFollowed;

///
/// Initializes union class with tag state of "paper_doc_mention".
///
/// Description of the "paper_doc_mention" tag state: (paper) Mentioned team
/// member in Paper doc
///
/// @param paperDocMention (paper) Mentioned team member in Paper doc
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocMention:(DBTEAMLOGPaperDocMentionType *)paperDocMention;

///
/// Initializes union class with tag state of "paper_doc_request_access".
///
/// Description of the "paper_doc_request_access" tag state: (paper) Requested
/// access to Paper doc
///
/// @param paperDocRequestAccess (paper) Requested access to Paper doc
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocRequestAccess:(DBTEAMLOGPaperDocRequestAccessType *)paperDocRequestAccess;

///
/// Initializes union class with tag state of "paper_doc_resolve_comment".
///
/// Description of the "paper_doc_resolve_comment" tag state: (paper) Resolved
/// Paper doc comment
///
/// @param paperDocResolveComment (paper) Resolved Paper doc comment
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocResolveComment:(DBTEAMLOGPaperDocResolveCommentType *)paperDocResolveComment;

///
/// Initializes union class with tag state of "paper_doc_revert".
///
/// Description of the "paper_doc_revert" tag state: (paper) Restored Paper doc
/// to previous version
///
/// @param paperDocRevert (paper) Restored Paper doc to previous version
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocRevert:(DBTEAMLOGPaperDocRevertType *)paperDocRevert;

///
/// Initializes union class with tag state of "paper_doc_slack_share".
///
/// Description of the "paper_doc_slack_share" tag state: (paper) Shared Paper
/// doc via Slack
///
/// @param paperDocSlackShare (paper) Shared Paper doc via Slack
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocSlackShare:(DBTEAMLOGPaperDocSlackShareType *)paperDocSlackShare;

///
/// Initializes union class with tag state of "paper_doc_team_invite".
///
/// Description of the "paper_doc_team_invite" tag state: (paper) Shared Paper
/// doc with team member (deprecated, no longer logged)
///
/// @param paperDocTeamInvite (paper) Shared Paper doc with team member
/// (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocTeamInvite:(DBTEAMLOGPaperDocTeamInviteType *)paperDocTeamInvite;

///
/// Initializes union class with tag state of "paper_doc_trashed".
///
/// Description of the "paper_doc_trashed" tag state: (paper) Deleted Paper doc
///
/// @param paperDocTrashed (paper) Deleted Paper doc
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocTrashed:(DBTEAMLOGPaperDocTrashedType *)paperDocTrashed;

///
/// Initializes union class with tag state of "paper_doc_unresolve_comment".
///
/// Description of the "paper_doc_unresolve_comment" tag state: (paper)
/// Unresolved Paper doc comment
///
/// @param paperDocUnresolveComment (paper) Unresolved Paper doc comment
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocUnresolveComment:(DBTEAMLOGPaperDocUnresolveCommentType *)paperDocUnresolveComment;

///
/// Initializes union class with tag state of "paper_doc_untrashed".
///
/// Description of the "paper_doc_untrashed" tag state: (paper) Restored Paper
/// doc
///
/// @param paperDocUntrashed (paper) Restored Paper doc
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocUntrashed:(DBTEAMLOGPaperDocUntrashedType *)paperDocUntrashed;

///
/// Initializes union class with tag state of "paper_doc_view".
///
/// Description of the "paper_doc_view" tag state: (paper) Viewed Paper doc
///
/// @param paperDocView (paper) Viewed Paper doc
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperDocView:(DBTEAMLOGPaperDocViewType *)paperDocView;

///
/// Initializes union class with tag state of "paper_external_view_allow".
///
/// Description of the "paper_external_view_allow" tag state: (paper) Changed
/// Paper external sharing setting to anyone (deprecated, no longer logged)
///
/// @param paperExternalViewAllow (paper) Changed Paper external sharing setting
/// to anyone (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperExternalViewAllow:(DBTEAMLOGPaperExternalViewAllowType *)paperExternalViewAllow;

///
/// Initializes union class with tag state of
/// "paper_external_view_default_team".
///
/// Description of the "paper_external_view_default_team" tag state: (paper)
/// Changed Paper external sharing setting to default team (deprecated, no
/// longer logged)
///
/// @param paperExternalViewDefaultTeam (paper) Changed Paper external sharing
/// setting to default team (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperExternalViewDefaultTeam:
    (DBTEAMLOGPaperExternalViewDefaultTeamType *)paperExternalViewDefaultTeam;

///
/// Initializes union class with tag state of "paper_external_view_forbid".
///
/// Description of the "paper_external_view_forbid" tag state: (paper) Changed
/// Paper external sharing setting to team-only (deprecated, no longer logged)
///
/// @param paperExternalViewForbid (paper) Changed Paper external sharing
/// setting to team-only (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperExternalViewForbid:(DBTEAMLOGPaperExternalViewForbidType *)paperExternalViewForbid;

///
/// Initializes union class with tag state of
/// "paper_folder_change_subscription".
///
/// Description of the "paper_folder_change_subscription" tag state: (paper)
/// Followed/unfollowed Paper folder
///
/// @param paperFolderChangeSubscription (paper) Followed/unfollowed Paper
/// folder
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperFolderChangeSubscription:
    (DBTEAMLOGPaperFolderChangeSubscriptionType *)paperFolderChangeSubscription;

///
/// Initializes union class with tag state of "paper_folder_deleted".
///
/// Description of the "paper_folder_deleted" tag state: (paper) Archived Paper
/// folder (deprecated, no longer logged)
///
/// @param paperFolderDeleted (paper) Archived Paper folder (deprecated, no
/// longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperFolderDeleted:(DBTEAMLOGPaperFolderDeletedType *)paperFolderDeleted;

///
/// Initializes union class with tag state of "paper_folder_followed".
///
/// Description of the "paper_folder_followed" tag state: (paper) Followed Paper
/// folder (deprecated, replaced by 'Followed/unfollowed Paper folder')
///
/// @param paperFolderFollowed (paper) Followed Paper folder (deprecated,
/// replaced by 'Followed/unfollowed Paper folder')
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperFolderFollowed:(DBTEAMLOGPaperFolderFollowedType *)paperFolderFollowed;

///
/// Initializes union class with tag state of "paper_folder_team_invite".
///
/// Description of the "paper_folder_team_invite" tag state: (paper) Shared
/// Paper folder with member (deprecated, no longer logged)
///
/// @param paperFolderTeamInvite (paper) Shared Paper folder with member
/// (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperFolderTeamInvite:(DBTEAMLOGPaperFolderTeamInviteType *)paperFolderTeamInvite;

///
/// Initializes union class with tag state of "password_change".
///
/// Description of the "password_change" tag state: (passwords) Changed password
///
/// @param passwordChange (passwords) Changed password
///
/// @return An initialized instance.
///
- (instancetype)initWithPasswordChange:(DBTEAMLOGPasswordChangeType *)passwordChange;

///
/// Initializes union class with tag state of "password_reset".
///
/// Description of the "password_reset" tag state: (passwords) Reset password
///
/// @param passwordReset (passwords) Reset password
///
/// @return An initialized instance.
///
- (instancetype)initWithPasswordReset:(DBTEAMLOGPasswordResetType *)passwordReset;

///
/// Initializes union class with tag state of "password_reset_all".
///
/// Description of the "password_reset_all" tag state: (passwords) Reset all
/// team member passwords
///
/// @param passwordResetAll (passwords) Reset all team member passwords
///
/// @return An initialized instance.
///
- (instancetype)initWithPasswordResetAll:(DBTEAMLOGPasswordResetAllType *)passwordResetAll;

///
/// Initializes union class with tag state of "emm_create_exceptions_report".
///
/// Description of the "emm_create_exceptions_report" tag state: (reports)
/// Created EMM-excluded users report
///
/// @param emmCreateExceptionsReport (reports) Created EMM-excluded users report
///
/// @return An initialized instance.
///
- (instancetype)initWithEmmCreateExceptionsReport:(DBTEAMLOGEmmCreateExceptionsReportType *)emmCreateExceptionsReport;

///
/// Initializes union class with tag state of "emm_create_usage_report".
///
/// Description of the "emm_create_usage_report" tag state: (reports) Created
/// EMM mobile app usage report
///
/// @param emmCreateUsageReport (reports) Created EMM mobile app usage report
///
/// @return An initialized instance.
///
- (instancetype)initWithEmmCreateUsageReport:(DBTEAMLOGEmmCreateUsageReportType *)emmCreateUsageReport;

///
/// Initializes union class with tag state of "export_members_report".
///
/// Description of the "export_members_report" tag state: (reports) Created
/// member data report
///
/// @param exportMembersReport (reports) Created member data report
///
/// @return An initialized instance.
///
- (instancetype)initWithExportMembersReport:(DBTEAMLOGExportMembersReportType *)exportMembersReport;

///
/// Initializes union class with tag state of "paper_admin_export_start".
///
/// Description of the "paper_admin_export_start" tag state: (reports) Exported
/// all team Paper docs
///
/// @param paperAdminExportStart (reports) Exported all team Paper docs
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperAdminExportStart:(DBTEAMLOGPaperAdminExportStartType *)paperAdminExportStart;

///
/// Initializes union class with tag state of
/// "smart_sync_create_admin_privilege_report".
///
/// Description of the "smart_sync_create_admin_privilege_report" tag state:
/// (reports) Created Smart Sync non-admin devices report
///
/// @param smartSyncCreateAdminPrivilegeReport (reports) Created Smart Sync
/// non-admin devices report
///
/// @return An initialized instance.
///
- (instancetype)initWithSmartSyncCreateAdminPrivilegeReport:
    (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType *)smartSyncCreateAdminPrivilegeReport;

///
/// Initializes union class with tag state of "team_activity_create_report".
///
/// Description of the "team_activity_create_report" tag state: (reports)
/// Created team activity report
///
/// @param teamActivityCreateReport (reports) Created team activity report
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamActivityCreateReport:(DBTEAMLOGTeamActivityCreateReportType *)teamActivityCreateReport;

///
/// Initializes union class with tag state of "collection_share".
///
/// Description of the "collection_share" tag state: (sharing) Shared album
///
/// @param collectionShare (sharing) Shared album
///
/// @return An initialized instance.
///
- (instancetype)initWithCollectionShare:(DBTEAMLOGCollectionShareType *)collectionShare;

///
/// Initializes union class with tag state of "note_acl_invite_only".
///
/// Description of the "note_acl_invite_only" tag state: (sharing) Changed Paper
/// doc to invite-only (deprecated, no longer logged)
///
/// @param noteAclInviteOnly (sharing) Changed Paper doc to invite-only
/// (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithNoteAclInviteOnly:(DBTEAMLOGNoteAclInviteOnlyType *)noteAclInviteOnly;

///
/// Initializes union class with tag state of "note_acl_link".
///
/// Description of the "note_acl_link" tag state: (sharing) Changed Paper doc to
/// link-accessible (deprecated, no longer logged)
///
/// @param noteAclLink (sharing) Changed Paper doc to link-accessible
/// (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithNoteAclLink:(DBTEAMLOGNoteAclLinkType *)noteAclLink;

///
/// Initializes union class with tag state of "note_acl_team_link".
///
/// Description of the "note_acl_team_link" tag state: (sharing) Changed Paper
/// doc to link-accessible for team (deprecated, no longer logged)
///
/// @param noteAclTeamLink (sharing) Changed Paper doc to link-accessible for
/// team (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithNoteAclTeamLink:(DBTEAMLOGNoteAclTeamLinkType *)noteAclTeamLink;

///
/// Initializes union class with tag state of "note_shared".
///
/// Description of the "note_shared" tag state: (sharing) Shared Paper doc
/// (deprecated, no longer logged)
///
/// @param noteShared (sharing) Shared Paper doc (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithNoteShared:(DBTEAMLOGNoteSharedType *)noteShared;

///
/// Initializes union class with tag state of "note_share_receive".
///
/// Description of the "note_share_receive" tag state: (sharing) Shared received
/// Paper doc (deprecated, no longer logged)
///
/// @param noteShareReceive (sharing) Shared received Paper doc (deprecated, no
/// longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithNoteShareReceive:(DBTEAMLOGNoteShareReceiveType *)noteShareReceive;

///
/// Initializes union class with tag state of "open_note_shared".
///
/// Description of the "open_note_shared" tag state: (sharing) Opened shared
/// Paper doc (deprecated, no longer logged)
///
/// @param openNoteShared (sharing) Opened shared Paper doc (deprecated, no
/// longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithOpenNoteShared:(DBTEAMLOGOpenNoteSharedType *)openNoteShared;

///
/// Initializes union class with tag state of "sf_add_group".
///
/// Description of the "sf_add_group" tag state: (sharing) Added team to shared
/// folder (deprecated, no longer logged)
///
/// @param sfAddGroup (sharing) Added team to shared folder (deprecated, no
/// longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfAddGroup:(DBTEAMLOGSfAddGroupType *)sfAddGroup;

///
/// Initializes union class with tag state of
/// "sf_allow_non_members_to_view_shared_links".
///
/// Description of the "sf_allow_non_members_to_view_shared_links" tag state:
/// (sharing) Allowed non-collaborators to view links to files in shared folder
/// (deprecated, no longer logged)
///
/// @param sfAllowNonMembersToViewSharedLinks (sharing) Allowed
/// non-collaborators to view links to files in shared folder (deprecated, no
/// longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfAllowNonMembersToViewSharedLinks:
    (DBTEAMLOGSfAllowNonMembersToViewSharedLinksType *)sfAllowNonMembersToViewSharedLinks;

///
/// Initializes union class with tag state of "sf_external_invite_warn".
///
/// Description of the "sf_external_invite_warn" tag state: (sharing) Set team
/// members to see warning before sharing folders outside team (deprecated, no
/// longer logged)
///
/// @param sfExternalInviteWarn (sharing) Set team members to see warning before
/// sharing folders outside team (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfExternalInviteWarn:(DBTEAMLOGSfExternalInviteWarnType *)sfExternalInviteWarn;

///
/// Initializes union class with tag state of "sf_fb_invite".
///
/// Description of the "sf_fb_invite" tag state: (sharing) Invited Facebook
/// users to shared folder (deprecated, no longer logged)
///
/// @param sfFbInvite (sharing) Invited Facebook users to shared folder
/// (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfFbInvite:(DBTEAMLOGSfFbInviteType *)sfFbInvite;

///
/// Initializes union class with tag state of "sf_fb_invite_change_role".
///
/// Description of the "sf_fb_invite_change_role" tag state: (sharing) Changed
/// Facebook user's role in shared folder (deprecated, no longer logged)
///
/// @param sfFbInviteChangeRole (sharing) Changed Facebook user's role in shared
/// folder (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfFbInviteChangeRole:(DBTEAMLOGSfFbInviteChangeRoleType *)sfFbInviteChangeRole;

///
/// Initializes union class with tag state of "sf_fb_uninvite".
///
/// Description of the "sf_fb_uninvite" tag state: (sharing) Uninvited Facebook
/// user from shared folder (deprecated, no longer logged)
///
/// @param sfFbUninvite (sharing) Uninvited Facebook user from shared folder
/// (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfFbUninvite:(DBTEAMLOGSfFbUninviteType *)sfFbUninvite;

///
/// Initializes union class with tag state of "sf_invite_group".
///
/// Description of the "sf_invite_group" tag state: (sharing) Invited group to
/// shared folder (deprecated, no longer logged)
///
/// @param sfInviteGroup (sharing) Invited group to shared folder (deprecated,
/// no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfInviteGroup:(DBTEAMLOGSfInviteGroupType *)sfInviteGroup;

///
/// Initializes union class with tag state of "sf_team_grant_access".
///
/// Description of the "sf_team_grant_access" tag state: (sharing) Granted
/// access to shared folder (deprecated, no longer logged)
///
/// @param sfTeamGrantAccess (sharing) Granted access to shared folder
/// (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfTeamGrantAccess:(DBTEAMLOGSfTeamGrantAccessType *)sfTeamGrantAccess;

///
/// Initializes union class with tag state of "sf_team_invite".
///
/// Description of the "sf_team_invite" tag state: (sharing) Invited team
/// members to shared folder (deprecated, replaced by 'Invited user to Dropbox
/// and added them to shared file/folder')
///
/// @param sfTeamInvite (sharing) Invited team members to shared folder
/// (deprecated, replaced by 'Invited user to Dropbox and added them to shared
/// file/folder')
///
/// @return An initialized instance.
///
- (instancetype)initWithSfTeamInvite:(DBTEAMLOGSfTeamInviteType *)sfTeamInvite;

///
/// Initializes union class with tag state of "sf_team_invite_change_role".
///
/// Description of the "sf_team_invite_change_role" tag state: (sharing) Changed
/// team member's role in shared folder (deprecated, no longer logged)
///
/// @param sfTeamInviteChangeRole (sharing) Changed team member's role in shared
/// folder (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfTeamInviteChangeRole:(DBTEAMLOGSfTeamInviteChangeRoleType *)sfTeamInviteChangeRole;

///
/// Initializes union class with tag state of "sf_team_join".
///
/// Description of the "sf_team_join" tag state: (sharing) Joined team member's
/// shared folder (deprecated, no longer logged)
///
/// @param sfTeamJoin (sharing) Joined team member's shared folder (deprecated,
/// no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfTeamJoin:(DBTEAMLOGSfTeamJoinType *)sfTeamJoin;

///
/// Initializes union class with tag state of "sf_team_join_from_oob_link".
///
/// Description of the "sf_team_join_from_oob_link" tag state: (sharing) Joined
/// team member's shared folder from link (deprecated, no longer logged)
///
/// @param sfTeamJoinFromOobLink (sharing) Joined team member's shared folder
/// from link (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSfTeamJoinFromOobLink:(DBTEAMLOGSfTeamJoinFromOobLinkType *)sfTeamJoinFromOobLink;

///
/// Initializes union class with tag state of "sf_team_uninvite".
///
/// Description of the "sf_team_uninvite" tag state: (sharing) Unshared folder
/// with team member (deprecated, replaced by 'Removed invitee from shared
/// file/folder before invite was accepted')
///
/// @param sfTeamUninvite (sharing) Unshared folder with team member
/// (deprecated, replaced by 'Removed invitee from shared file/folder before
/// invite was accepted')
///
/// @return An initialized instance.
///
- (instancetype)initWithSfTeamUninvite:(DBTEAMLOGSfTeamUninviteType *)sfTeamUninvite;

///
/// Initializes union class with tag state of "shared_content_add_invitees".
///
/// Description of the "shared_content_add_invitees" tag state: (sharing)
/// Invited user to Dropbox and added them to shared file/folder
///
/// @param sharedContentAddInvitees (sharing) Invited user to Dropbox and added
/// them to shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentAddInvitees:(DBTEAMLOGSharedContentAddInviteesType *)sharedContentAddInvitees;

///
/// Initializes union class with tag state of "shared_content_add_link_expiry".
///
/// Description of the "shared_content_add_link_expiry" tag state: (sharing)
/// Added expiration date to link for shared file/folder
///
/// @param sharedContentAddLinkExpiry (sharing) Added expiration date to link
/// for shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentAddLinkExpiry:
    (DBTEAMLOGSharedContentAddLinkExpiryType *)sharedContentAddLinkExpiry;

///
/// Initializes union class with tag state of
/// "shared_content_add_link_password".
///
/// Description of the "shared_content_add_link_password" tag state: (sharing)
/// Added password to link for shared file/folder
///
/// @param sharedContentAddLinkPassword (sharing) Added password to link for
/// shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentAddLinkPassword:
    (DBTEAMLOGSharedContentAddLinkPasswordType *)sharedContentAddLinkPassword;

///
/// Initializes union class with tag state of "shared_content_add_member".
///
/// Description of the "shared_content_add_member" tag state: (sharing) Added
/// users and/or groups to shared file/folder
///
/// @param sharedContentAddMember (sharing) Added users and/or groups to shared
/// file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentAddMember:(DBTEAMLOGSharedContentAddMemberType *)sharedContentAddMember;

///
/// Initializes union class with tag state of
/// "shared_content_change_downloads_policy".
///
/// Description of the "shared_content_change_downloads_policy" tag state:
/// (sharing) Changed whether members can download shared file/folder
///
/// @param sharedContentChangeDownloadsPolicy (sharing) Changed whether members
/// can download shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentChangeDownloadsPolicy:
    (DBTEAMLOGSharedContentChangeDownloadsPolicyType *)sharedContentChangeDownloadsPolicy;

///
/// Initializes union class with tag state of
/// "shared_content_change_invitee_role".
///
/// Description of the "shared_content_change_invitee_role" tag state: (sharing)
/// Changed access type of invitee to shared file/folder before invite was
/// accepted
///
/// @param sharedContentChangeInviteeRole (sharing) Changed access type of
/// invitee to shared file/folder before invite was accepted
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentChangeInviteeRole:
    (DBTEAMLOGSharedContentChangeInviteeRoleType *)sharedContentChangeInviteeRole;

///
/// Initializes union class with tag state of
/// "shared_content_change_link_audience".
///
/// Description of the "shared_content_change_link_audience" tag state:
/// (sharing) Changed link audience of shared file/folder
///
/// @param sharedContentChangeLinkAudience (sharing) Changed link audience of
/// shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentChangeLinkAudience:
    (DBTEAMLOGSharedContentChangeLinkAudienceType *)sharedContentChangeLinkAudience;

///
/// Initializes union class with tag state of
/// "shared_content_change_link_expiry".
///
/// Description of the "shared_content_change_link_expiry" tag state: (sharing)
/// Changed link expiration of shared file/folder
///
/// @param sharedContentChangeLinkExpiry (sharing) Changed link expiration of
/// shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentChangeLinkExpiry:
    (DBTEAMLOGSharedContentChangeLinkExpiryType *)sharedContentChangeLinkExpiry;

///
/// Initializes union class with tag state of
/// "shared_content_change_link_password".
///
/// Description of the "shared_content_change_link_password" tag state:
/// (sharing) Changed link password of shared file/folder
///
/// @param sharedContentChangeLinkPassword (sharing) Changed link password of
/// shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentChangeLinkPassword:
    (DBTEAMLOGSharedContentChangeLinkPasswordType *)sharedContentChangeLinkPassword;

///
/// Initializes union class with tag state of
/// "shared_content_change_member_role".
///
/// Description of the "shared_content_change_member_role" tag state: (sharing)
/// Changed access type of shared file/folder member
///
/// @param sharedContentChangeMemberRole (sharing) Changed access type of shared
/// file/folder member
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentChangeMemberRole:
    (DBTEAMLOGSharedContentChangeMemberRoleType *)sharedContentChangeMemberRole;

///
/// Initializes union class with tag state of
/// "shared_content_change_viewer_info_policy".
///
/// Description of the "shared_content_change_viewer_info_policy" tag state:
/// (sharing) Changed whether members can see who viewed shared file/folder
///
/// @param sharedContentChangeViewerInfoPolicy (sharing) Changed whether members
/// can see who viewed shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentChangeViewerInfoPolicy:
    (DBTEAMLOGSharedContentChangeViewerInfoPolicyType *)sharedContentChangeViewerInfoPolicy;

///
/// Initializes union class with tag state of "shared_content_claim_invitation".
///
/// Description of the "shared_content_claim_invitation" tag state: (sharing)
/// Acquired membership of shared file/folder by accepting invite
///
/// @param sharedContentClaimInvitation (sharing) Acquired membership of shared
/// file/folder by accepting invite
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentClaimInvitation:
    (DBTEAMLOGSharedContentClaimInvitationType *)sharedContentClaimInvitation;

///
/// Initializes union class with tag state of "shared_content_copy".
///
/// Description of the "shared_content_copy" tag state: (sharing) Copied shared
/// file/folder to own Dropbox
///
/// @param sharedContentCopy (sharing) Copied shared file/folder to own Dropbox
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentCopy:(DBTEAMLOGSharedContentCopyType *)sharedContentCopy;

///
/// Initializes union class with tag state of "shared_content_download".
///
/// Description of the "shared_content_download" tag state: (sharing) Downloaded
/// shared file/folder
///
/// @param sharedContentDownload (sharing) Downloaded shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentDownload:(DBTEAMLOGSharedContentDownloadType *)sharedContentDownload;

///
/// Initializes union class with tag state of
/// "shared_content_relinquish_membership".
///
/// Description of the "shared_content_relinquish_membership" tag state:
/// (sharing) Left shared file/folder
///
/// @param sharedContentRelinquishMembership (sharing) Left shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentRelinquishMembership:
    (DBTEAMLOGSharedContentRelinquishMembershipType *)sharedContentRelinquishMembership;

///
/// Initializes union class with tag state of "shared_content_remove_invitees".
///
/// Description of the "shared_content_remove_invitees" tag state: (sharing)
/// Removed invitee from shared file/folder before invite was accepted
///
/// @param sharedContentRemoveInvitees (sharing) Removed invitee from shared
/// file/folder before invite was accepted
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentRemoveInvitees:
    (DBTEAMLOGSharedContentRemoveInviteesType *)sharedContentRemoveInvitees;

///
/// Initializes union class with tag state of
/// "shared_content_remove_link_expiry".
///
/// Description of the "shared_content_remove_link_expiry" tag state: (sharing)
/// Removed link expiration date of shared file/folder
///
/// @param sharedContentRemoveLinkExpiry (sharing) Removed link expiration date
/// of shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentRemoveLinkExpiry:
    (DBTEAMLOGSharedContentRemoveLinkExpiryType *)sharedContentRemoveLinkExpiry;

///
/// Initializes union class with tag state of
/// "shared_content_remove_link_password".
///
/// Description of the "shared_content_remove_link_password" tag state:
/// (sharing) Removed link password of shared file/folder
///
/// @param sharedContentRemoveLinkPassword (sharing) Removed link password of
/// shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentRemoveLinkPassword:
    (DBTEAMLOGSharedContentRemoveLinkPasswordType *)sharedContentRemoveLinkPassword;

///
/// Initializes union class with tag state of "shared_content_remove_member".
///
/// Description of the "shared_content_remove_member" tag state: (sharing)
/// Removed user/group from shared file/folder
///
/// @param sharedContentRemoveMember (sharing) Removed user/group from shared
/// file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentRemoveMember:(DBTEAMLOGSharedContentRemoveMemberType *)sharedContentRemoveMember;

///
/// Initializes union class with tag state of "shared_content_request_access".
///
/// Description of the "shared_content_request_access" tag state: (sharing)
/// Requested access to shared file/folder
///
/// @param sharedContentRequestAccess (sharing) Requested access to shared
/// file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentRequestAccess:
    (DBTEAMLOGSharedContentRequestAccessType *)sharedContentRequestAccess;

///
/// Initializes union class with tag state of "shared_content_unshare".
///
/// Description of the "shared_content_unshare" tag state: (sharing) Unshared
/// file/folder by clearing membership and turning off link
///
/// @param sharedContentUnshare (sharing) Unshared file/folder by clearing
/// membership and turning off link
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentUnshare:(DBTEAMLOGSharedContentUnshareType *)sharedContentUnshare;

///
/// Initializes union class with tag state of "shared_content_view".
///
/// Description of the "shared_content_view" tag state: (sharing) Previewed
/// shared file/folder
///
/// @param sharedContentView (sharing) Previewed shared file/folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedContentView:(DBTEAMLOGSharedContentViewType *)sharedContentView;

///
/// Initializes union class with tag state of
/// "shared_folder_change_link_policy".
///
/// Description of the "shared_folder_change_link_policy" tag state: (sharing)
/// Changed who can access shared folder via link
///
/// @param sharedFolderChangeLinkPolicy (sharing) Changed who can access shared
/// folder via link
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderChangeLinkPolicy:
    (DBTEAMLOGSharedFolderChangeLinkPolicyType *)sharedFolderChangeLinkPolicy;

///
/// Initializes union class with tag state of
/// "shared_folder_change_members_inheritance_policy".
///
/// Description of the "shared_folder_change_members_inheritance_policy" tag
/// state: (sharing) Changed whether shared folder inherits members from parent
/// folder
///
/// @param sharedFolderChangeMembersInheritancePolicy (sharing) Changed whether
/// shared folder inherits members from parent folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderChangeMembersInheritancePolicy:
    (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType *)sharedFolderChangeMembersInheritancePolicy;

///
/// Initializes union class with tag state of
/// "shared_folder_change_members_management_policy".
///
/// Description of the "shared_folder_change_members_management_policy" tag
/// state: (sharing) Changed who can add/remove members of shared folder
///
/// @param sharedFolderChangeMembersManagementPolicy (sharing) Changed who can
/// add/remove members of shared folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderChangeMembersManagementPolicy:
    (DBTEAMLOGSharedFolderChangeMembersManagementPolicyType *)sharedFolderChangeMembersManagementPolicy;

///
/// Initializes union class with tag state of
/// "shared_folder_change_members_policy".
///
/// Description of the "shared_folder_change_members_policy" tag state:
/// (sharing) Changed who can become member of shared folder
///
/// @param sharedFolderChangeMembersPolicy (sharing) Changed who can become
/// member of shared folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderChangeMembersPolicy:
    (DBTEAMLOGSharedFolderChangeMembersPolicyType *)sharedFolderChangeMembersPolicy;

///
/// Initializes union class with tag state of "shared_folder_create".
///
/// Description of the "shared_folder_create" tag state: (sharing) Created
/// shared folder
///
/// @param sharedFolderCreate (sharing) Created shared folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderCreate:(DBTEAMLOGSharedFolderCreateType *)sharedFolderCreate;

///
/// Initializes union class with tag state of
/// "shared_folder_decline_invitation".
///
/// Description of the "shared_folder_decline_invitation" tag state: (sharing)
/// Declined team member's invite to shared folder
///
/// @param sharedFolderDeclineInvitation (sharing) Declined team member's invite
/// to shared folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderDeclineInvitation:
    (DBTEAMLOGSharedFolderDeclineInvitationType *)sharedFolderDeclineInvitation;

///
/// Initializes union class with tag state of "shared_folder_mount".
///
/// Description of the "shared_folder_mount" tag state: (sharing) Added shared
/// folder to own Dropbox
///
/// @param sharedFolderMount (sharing) Added shared folder to own Dropbox
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderMount:(DBTEAMLOGSharedFolderMountType *)sharedFolderMount;

///
/// Initializes union class with tag state of "shared_folder_nest".
///
/// Description of the "shared_folder_nest" tag state: (sharing) Changed parent
/// of shared folder
///
/// @param sharedFolderNest (sharing) Changed parent of shared folder
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderNest:(DBTEAMLOGSharedFolderNestType *)sharedFolderNest;

///
/// Initializes union class with tag state of
/// "shared_folder_transfer_ownership".
///
/// Description of the "shared_folder_transfer_ownership" tag state: (sharing)
/// Transferred ownership of shared folder to another member
///
/// @param sharedFolderTransferOwnership (sharing) Transferred ownership of
/// shared folder to another member
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderTransferOwnership:
    (DBTEAMLOGSharedFolderTransferOwnershipType *)sharedFolderTransferOwnership;

///
/// Initializes union class with tag state of "shared_folder_unmount".
///
/// Description of the "shared_folder_unmount" tag state: (sharing) Deleted
/// shared folder from Dropbox
///
/// @param sharedFolderUnmount (sharing) Deleted shared folder from Dropbox
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderUnmount:(DBTEAMLOGSharedFolderUnmountType *)sharedFolderUnmount;

///
/// Initializes union class with tag state of "shared_link_add_expiry".
///
/// Description of the "shared_link_add_expiry" tag state: (sharing) Added
/// shared link expiration date
///
/// @param sharedLinkAddExpiry (sharing) Added shared link expiration date
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinkAddExpiry:(DBTEAMLOGSharedLinkAddExpiryType *)sharedLinkAddExpiry;

///
/// Initializes union class with tag state of "shared_link_change_expiry".
///
/// Description of the "shared_link_change_expiry" tag state: (sharing) Changed
/// shared link expiration date
///
/// @param sharedLinkChangeExpiry (sharing) Changed shared link expiration date
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinkChangeExpiry:(DBTEAMLOGSharedLinkChangeExpiryType *)sharedLinkChangeExpiry;

///
/// Initializes union class with tag state of "shared_link_change_visibility".
///
/// Description of the "shared_link_change_visibility" tag state: (sharing)
/// Changed visibility of shared link
///
/// @param sharedLinkChangeVisibility (sharing) Changed visibility of shared
/// link
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinkChangeVisibility:
    (DBTEAMLOGSharedLinkChangeVisibilityType *)sharedLinkChangeVisibility;

///
/// Initializes union class with tag state of "shared_link_copy".
///
/// Description of the "shared_link_copy" tag state: (sharing) Added file/folder
/// to Dropbox from shared link
///
/// @param sharedLinkCopy (sharing) Added file/folder to Dropbox from shared
/// link
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinkCopy:(DBTEAMLOGSharedLinkCopyType *)sharedLinkCopy;

///
/// Initializes union class with tag state of "shared_link_create".
///
/// Description of the "shared_link_create" tag state: (sharing) Created shared
/// link
///
/// @param sharedLinkCreate (sharing) Created shared link
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinkCreate:(DBTEAMLOGSharedLinkCreateType *)sharedLinkCreate;

///
/// Initializes union class with tag state of "shared_link_disable".
///
/// Description of the "shared_link_disable" tag state: (sharing) Removed shared
/// link
///
/// @param sharedLinkDisable (sharing) Removed shared link
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinkDisable:(DBTEAMLOGSharedLinkDisableType *)sharedLinkDisable;

///
/// Initializes union class with tag state of "shared_link_download".
///
/// Description of the "shared_link_download" tag state: (sharing) Downloaded
/// file/folder from shared link
///
/// @param sharedLinkDownload (sharing) Downloaded file/folder from shared link
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinkDownload:(DBTEAMLOGSharedLinkDownloadType *)sharedLinkDownload;

///
/// Initializes union class with tag state of "shared_link_remove_expiry".
///
/// Description of the "shared_link_remove_expiry" tag state: (sharing) Removed
/// shared link expiration date
///
/// @param sharedLinkRemoveExpiry (sharing) Removed shared link expiration date
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinkRemoveExpiry:(DBTEAMLOGSharedLinkRemoveExpiryType *)sharedLinkRemoveExpiry;

///
/// Initializes union class with tag state of "shared_link_share".
///
/// Description of the "shared_link_share" tag state: (sharing) Added members as
/// audience of shared link
///
/// @param sharedLinkShare (sharing) Added members as audience of shared link
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinkShare:(DBTEAMLOGSharedLinkShareType *)sharedLinkShare;

///
/// Initializes union class with tag state of "shared_link_view".
///
/// Description of the "shared_link_view" tag state: (sharing) Opened shared
/// link
///
/// @param sharedLinkView (sharing) Opened shared link
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinkView:(DBTEAMLOGSharedLinkViewType *)sharedLinkView;

///
/// Initializes union class with tag state of "shared_note_opened".
///
/// Description of the "shared_note_opened" tag state: (sharing) Opened shared
/// Paper doc (deprecated, no longer logged)
///
/// @param sharedNoteOpened (sharing) Opened shared Paper doc (deprecated, no
/// longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedNoteOpened:(DBTEAMLOGSharedNoteOpenedType *)sharedNoteOpened;

///
/// Initializes union class with tag state of "shmodel_group_share".
///
/// Description of the "shmodel_group_share" tag state: (sharing) Shared link
/// with group (deprecated, no longer logged)
///
/// @param shmodelGroupShare (sharing) Shared link with group (deprecated, no
/// longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithShmodelGroupShare:(DBTEAMLOGShmodelGroupShareType *)shmodelGroupShare;

///
/// Initializes union class with tag state of "showcase_access_granted".
///
/// Description of the "showcase_access_granted" tag state: (showcase) Granted
/// access to showcase
///
/// @param showcaseAccessGranted (showcase) Granted access to showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseAccessGranted:(DBTEAMLOGShowcaseAccessGrantedType *)showcaseAccessGranted;

///
/// Initializes union class with tag state of "showcase_add_member".
///
/// Description of the "showcase_add_member" tag state: (showcase) Added member
/// to showcase
///
/// @param showcaseAddMember (showcase) Added member to showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseAddMember:(DBTEAMLOGShowcaseAddMemberType *)showcaseAddMember;

///
/// Initializes union class with tag state of "showcase_archived".
///
/// Description of the "showcase_archived" tag state: (showcase) Archived
/// showcase
///
/// @param showcaseArchived (showcase) Archived showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseArchived:(DBTEAMLOGShowcaseArchivedType *)showcaseArchived;

///
/// Initializes union class with tag state of "showcase_created".
///
/// Description of the "showcase_created" tag state: (showcase) Created showcase
///
/// @param showcaseCreated (showcase) Created showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseCreated:(DBTEAMLOGShowcaseCreatedType *)showcaseCreated;

///
/// Initializes union class with tag state of "showcase_delete_comment".
///
/// Description of the "showcase_delete_comment" tag state: (showcase) Deleted
/// showcase comment
///
/// @param showcaseDeleteComment (showcase) Deleted showcase comment
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseDeleteComment:(DBTEAMLOGShowcaseDeleteCommentType *)showcaseDeleteComment;

///
/// Initializes union class with tag state of "showcase_edited".
///
/// Description of the "showcase_edited" tag state: (showcase) Edited showcase
///
/// @param showcaseEdited (showcase) Edited showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseEdited:(DBTEAMLOGShowcaseEditedType *)showcaseEdited;

///
/// Initializes union class with tag state of "showcase_edit_comment".
///
/// Description of the "showcase_edit_comment" tag state: (showcase) Edited
/// showcase comment
///
/// @param showcaseEditComment (showcase) Edited showcase comment
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseEditComment:(DBTEAMLOGShowcaseEditCommentType *)showcaseEditComment;

///
/// Initializes union class with tag state of "showcase_file_added".
///
/// Description of the "showcase_file_added" tag state: (showcase) Added file to
/// showcase
///
/// @param showcaseFileAdded (showcase) Added file to showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseFileAdded:(DBTEAMLOGShowcaseFileAddedType *)showcaseFileAdded;

///
/// Initializes union class with tag state of "showcase_file_download".
///
/// Description of the "showcase_file_download" tag state: (showcase) Downloaded
/// file from showcase
///
/// @param showcaseFileDownload (showcase) Downloaded file from showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseFileDownload:(DBTEAMLOGShowcaseFileDownloadType *)showcaseFileDownload;

///
/// Initializes union class with tag state of "showcase_file_removed".
///
/// Description of the "showcase_file_removed" tag state: (showcase) Removed
/// file from showcase
///
/// @param showcaseFileRemoved (showcase) Removed file from showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseFileRemoved:(DBTEAMLOGShowcaseFileRemovedType *)showcaseFileRemoved;

///
/// Initializes union class with tag state of "showcase_file_view".
///
/// Description of the "showcase_file_view" tag state: (showcase) Viewed file in
/// showcase
///
/// @param showcaseFileView (showcase) Viewed file in showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseFileView:(DBTEAMLOGShowcaseFileViewType *)showcaseFileView;

///
/// Initializes union class with tag state of "showcase_permanently_deleted".
///
/// Description of the "showcase_permanently_deleted" tag state: (showcase)
/// Permanently deleted showcase
///
/// @param showcasePermanentlyDeleted (showcase) Permanently deleted showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcasePermanentlyDeleted:
    (DBTEAMLOGShowcasePermanentlyDeletedType *)showcasePermanentlyDeleted;

///
/// Initializes union class with tag state of "showcase_post_comment".
///
/// Description of the "showcase_post_comment" tag state: (showcase) Added
/// showcase comment
///
/// @param showcasePostComment (showcase) Added showcase comment
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcasePostComment:(DBTEAMLOGShowcasePostCommentType *)showcasePostComment;

///
/// Initializes union class with tag state of "showcase_remove_member".
///
/// Description of the "showcase_remove_member" tag state: (showcase) Removed
/// member from showcase
///
/// @param showcaseRemoveMember (showcase) Removed member from showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseRemoveMember:(DBTEAMLOGShowcaseRemoveMemberType *)showcaseRemoveMember;

///
/// Initializes union class with tag state of "showcase_renamed".
///
/// Description of the "showcase_renamed" tag state: (showcase) Renamed showcase
///
/// @param showcaseRenamed (showcase) Renamed showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseRenamed:(DBTEAMLOGShowcaseRenamedType *)showcaseRenamed;

///
/// Initializes union class with tag state of "showcase_request_access".
///
/// Description of the "showcase_request_access" tag state: (showcase) Requested
/// access to showcase
///
/// @param showcaseRequestAccess (showcase) Requested access to showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseRequestAccess:(DBTEAMLOGShowcaseRequestAccessType *)showcaseRequestAccess;

///
/// Initializes union class with tag state of "showcase_resolve_comment".
///
/// Description of the "showcase_resolve_comment" tag state: (showcase) Resolved
/// showcase comment
///
/// @param showcaseResolveComment (showcase) Resolved showcase comment
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseResolveComment:(DBTEAMLOGShowcaseResolveCommentType *)showcaseResolveComment;

///
/// Initializes union class with tag state of "showcase_restored".
///
/// Description of the "showcase_restored" tag state: (showcase) Unarchived
/// showcase
///
/// @param showcaseRestored (showcase) Unarchived showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseRestored:(DBTEAMLOGShowcaseRestoredType *)showcaseRestored;

///
/// Initializes union class with tag state of "showcase_trashed".
///
/// Description of the "showcase_trashed" tag state: (showcase) Deleted showcase
///
/// @param showcaseTrashed (showcase) Deleted showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseTrashed:(DBTEAMLOGShowcaseTrashedType *)showcaseTrashed;

///
/// Initializes union class with tag state of "showcase_trashed_deprecated".
///
/// Description of the "showcase_trashed_deprecated" tag state: (showcase)
/// Deleted showcase (old version) (deprecated, replaced by 'Deleted showcase')
///
/// @param showcaseTrashedDeprecated (showcase) Deleted showcase (old version)
/// (deprecated, replaced by 'Deleted showcase')
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseTrashedDeprecated:(DBTEAMLOGShowcaseTrashedDeprecatedType *)showcaseTrashedDeprecated;

///
/// Initializes union class with tag state of "showcase_unresolve_comment".
///
/// Description of the "showcase_unresolve_comment" tag state: (showcase)
/// Unresolved showcase comment
///
/// @param showcaseUnresolveComment (showcase) Unresolved showcase comment
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseUnresolveComment:(DBTEAMLOGShowcaseUnresolveCommentType *)showcaseUnresolveComment;

///
/// Initializes union class with tag state of "showcase_untrashed".
///
/// Description of the "showcase_untrashed" tag state: (showcase) Restored
/// showcase
///
/// @param showcaseUntrashed (showcase) Restored showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseUntrashed:(DBTEAMLOGShowcaseUntrashedType *)showcaseUntrashed;

///
/// Initializes union class with tag state of "showcase_untrashed_deprecated".
///
/// Description of the "showcase_untrashed_deprecated" tag state: (showcase)
/// Restored showcase (old version) (deprecated, replaced by 'Restored
/// showcase')
///
/// @param showcaseUntrashedDeprecated (showcase) Restored showcase (old
/// version) (deprecated, replaced by 'Restored showcase')
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseUntrashedDeprecated:
    (DBTEAMLOGShowcaseUntrashedDeprecatedType *)showcaseUntrashedDeprecated;

///
/// Initializes union class with tag state of "showcase_view".
///
/// Description of the "showcase_view" tag state: (showcase) Viewed showcase
///
/// @param showcaseView (showcase) Viewed showcase
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseView:(DBTEAMLOGShowcaseViewType *)showcaseView;

///
/// Initializes union class with tag state of "sso_add_cert".
///
/// Description of the "sso_add_cert" tag state: (sso) Added X.509 certificate
/// for SSO
///
/// @param ssoAddCert (sso) Added X.509 certificate for SSO
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoAddCert:(DBTEAMLOGSsoAddCertType *)ssoAddCert;

///
/// Initializes union class with tag state of "sso_add_login_url".
///
/// Description of the "sso_add_login_url" tag state: (sso) Added sign-in URL
/// for SSO
///
/// @param ssoAddLoginUrl (sso) Added sign-in URL for SSO
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoAddLoginUrl:(DBTEAMLOGSsoAddLoginUrlType *)ssoAddLoginUrl;

///
/// Initializes union class with tag state of "sso_add_logout_url".
///
/// Description of the "sso_add_logout_url" tag state: (sso) Added sign-out URL
/// for SSO
///
/// @param ssoAddLogoutUrl (sso) Added sign-out URL for SSO
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoAddLogoutUrl:(DBTEAMLOGSsoAddLogoutUrlType *)ssoAddLogoutUrl;

///
/// Initializes union class with tag state of "sso_change_cert".
///
/// Description of the "sso_change_cert" tag state: (sso) Changed X.509
/// certificate for SSO
///
/// @param ssoChangeCert (sso) Changed X.509 certificate for SSO
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoChangeCert:(DBTEAMLOGSsoChangeCertType *)ssoChangeCert;

///
/// Initializes union class with tag state of "sso_change_login_url".
///
/// Description of the "sso_change_login_url" tag state: (sso) Changed sign-in
/// URL for SSO
///
/// @param ssoChangeLoginUrl (sso) Changed sign-in URL for SSO
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoChangeLoginUrl:(DBTEAMLOGSsoChangeLoginUrlType *)ssoChangeLoginUrl;

///
/// Initializes union class with tag state of "sso_change_logout_url".
///
/// Description of the "sso_change_logout_url" tag state: (sso) Changed sign-out
/// URL for SSO
///
/// @param ssoChangeLogoutUrl (sso) Changed sign-out URL for SSO
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoChangeLogoutUrl:(DBTEAMLOGSsoChangeLogoutUrlType *)ssoChangeLogoutUrl;

///
/// Initializes union class with tag state of "sso_change_saml_identity_mode".
///
/// Description of the "sso_change_saml_identity_mode" tag state: (sso) Changed
/// SAML identity mode for SSO
///
/// @param ssoChangeSamlIdentityMode (sso) Changed SAML identity mode for SSO
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoChangeSamlIdentityMode:(DBTEAMLOGSsoChangeSamlIdentityModeType *)ssoChangeSamlIdentityMode;

///
/// Initializes union class with tag state of "sso_remove_cert".
///
/// Description of the "sso_remove_cert" tag state: (sso) Removed X.509
/// certificate for SSO
///
/// @param ssoRemoveCert (sso) Removed X.509 certificate for SSO
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoRemoveCert:(DBTEAMLOGSsoRemoveCertType *)ssoRemoveCert;

///
/// Initializes union class with tag state of "sso_remove_login_url".
///
/// Description of the "sso_remove_login_url" tag state: (sso) Removed sign-in
/// URL for SSO
///
/// @param ssoRemoveLoginUrl (sso) Removed sign-in URL for SSO
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoRemoveLoginUrl:(DBTEAMLOGSsoRemoveLoginUrlType *)ssoRemoveLoginUrl;

///
/// Initializes union class with tag state of "sso_remove_logout_url".
///
/// Description of the "sso_remove_logout_url" tag state: (sso) Removed sign-out
/// URL for SSO
///
/// @param ssoRemoveLogoutUrl (sso) Removed sign-out URL for SSO
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoRemoveLogoutUrl:(DBTEAMLOGSsoRemoveLogoutUrlType *)ssoRemoveLogoutUrl;

///
/// Initializes union class with tag state of "team_folder_change_status".
///
/// Description of the "team_folder_change_status" tag state: (team_folders)
/// Changed archival status of team folder
///
/// @param teamFolderChangeStatus (team_folders) Changed archival status of team
/// folder
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamFolderChangeStatus:(DBTEAMLOGTeamFolderChangeStatusType *)teamFolderChangeStatus;

///
/// Initializes union class with tag state of "team_folder_create".
///
/// Description of the "team_folder_create" tag state: (team_folders) Created
/// team folder in active status
///
/// @param teamFolderCreate (team_folders) Created team folder in active status
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamFolderCreate:(DBTEAMLOGTeamFolderCreateType *)teamFolderCreate;

///
/// Initializes union class with tag state of "team_folder_downgrade".
///
/// Description of the "team_folder_downgrade" tag state: (team_folders)
/// Downgraded team folder to regular shared folder
///
/// @param teamFolderDowngrade (team_folders) Downgraded team folder to regular
/// shared folder
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamFolderDowngrade:(DBTEAMLOGTeamFolderDowngradeType *)teamFolderDowngrade;

///
/// Initializes union class with tag state of "team_folder_permanently_delete".
///
/// Description of the "team_folder_permanently_delete" tag state:
/// (team_folders) Permanently deleted archived team folder
///
/// @param teamFolderPermanentlyDelete (team_folders) Permanently deleted
/// archived team folder
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamFolderPermanentlyDelete:
    (DBTEAMLOGTeamFolderPermanentlyDeleteType *)teamFolderPermanentlyDelete;

///
/// Initializes union class with tag state of "team_folder_rename".
///
/// Description of the "team_folder_rename" tag state: (team_folders) Renamed
/// active/archived team folder
///
/// @param teamFolderRename (team_folders) Renamed active/archived team folder
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamFolderRename:(DBTEAMLOGTeamFolderRenameType *)teamFolderRename;

///
/// Initializes union class with tag state of
/// "team_selective_sync_settings_changed".
///
/// Description of the "team_selective_sync_settings_changed" tag state:
/// (team_folders) Changed sync default
///
/// @param teamSelectiveSyncSettingsChanged (team_folders) Changed sync default
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamSelectiveSyncSettingsChanged:
    (DBTEAMLOGTeamSelectiveSyncSettingsChangedType *)teamSelectiveSyncSettingsChanged;

///
/// Initializes union class with tag state of "account_capture_change_policy".
///
/// Description of the "account_capture_change_policy" tag state:
/// (team_policies) Changed account capture setting on team domain
///
/// @param accountCaptureChangePolicy (team_policies) Changed account capture
/// setting on team domain
///
/// @return An initialized instance.
///
- (instancetype)initWithAccountCaptureChangePolicy:
    (DBTEAMLOGAccountCaptureChangePolicyType *)accountCaptureChangePolicy;

///
/// Initializes union class with tag state of "allow_download_disabled".
///
/// Description of the "allow_download_disabled" tag state: (team_policies)
/// Disabled downloads (deprecated, no longer logged)
///
/// @param allowDownloadDisabled (team_policies) Disabled downloads (deprecated,
/// no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithAllowDownloadDisabled:(DBTEAMLOGAllowDownloadDisabledType *)allowDownloadDisabled;

///
/// Initializes union class with tag state of "allow_download_enabled".
///
/// Description of the "allow_download_enabled" tag state: (team_policies)
/// Enabled downloads (deprecated, no longer logged)
///
/// @param allowDownloadEnabled (team_policies) Enabled downloads (deprecated,
/// no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithAllowDownloadEnabled:(DBTEAMLOGAllowDownloadEnabledType *)allowDownloadEnabled;

///
/// Initializes union class with tag state of
/// "data_placement_restriction_change_policy".
///
/// Description of the "data_placement_restriction_change_policy" tag state:
/// (team_policies) Set restrictions on data center locations where team data
/// resides
///
/// @param dataPlacementRestrictionChangePolicy (team_policies) Set restrictions
/// on data center locations where team data resides
///
/// @return An initialized instance.
///
- (instancetype)initWithDataPlacementRestrictionChangePolicy:
    (DBTEAMLOGDataPlacementRestrictionChangePolicyType *)dataPlacementRestrictionChangePolicy;

///
/// Initializes union class with tag state of
/// "data_placement_restriction_satisfy_policy".
///
/// Description of the "data_placement_restriction_satisfy_policy" tag state:
/// (team_policies) Completed restrictions on data center locations where team
/// data resides
///
/// @param dataPlacementRestrictionSatisfyPolicy (team_policies) Completed
/// restrictions on data center locations where team data resides
///
/// @return An initialized instance.
///
- (instancetype)initWithDataPlacementRestrictionSatisfyPolicy:
    (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *)dataPlacementRestrictionSatisfyPolicy;

///
/// Initializes union class with tag state of
/// "device_approvals_change_desktop_policy".
///
/// Description of the "device_approvals_change_desktop_policy" tag state:
/// (team_policies) Set/removed limit on number of computers member can link to
/// team Dropbox account
///
/// @param deviceApprovalsChangeDesktopPolicy (team_policies) Set/removed limit
/// on number of computers member can link to team Dropbox account
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceApprovalsChangeDesktopPolicy:
    (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *)deviceApprovalsChangeDesktopPolicy;

///
/// Initializes union class with tag state of
/// "device_approvals_change_mobile_policy".
///
/// Description of the "device_approvals_change_mobile_policy" tag state:
/// (team_policies) Set/removed limit on number of mobile devices member can
/// link to team Dropbox account
///
/// @param deviceApprovalsChangeMobilePolicy (team_policies) Set/removed limit
/// on number of mobile devices member can link to team Dropbox account
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceApprovalsChangeMobilePolicy:
    (DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *)deviceApprovalsChangeMobilePolicy;

///
/// Initializes union class with tag state of
/// "device_approvals_change_overage_action".
///
/// Description of the "device_approvals_change_overage_action" tag state:
/// (team_policies) Changed device approvals setting when member is over limit
///
/// @param deviceApprovalsChangeOverageAction (team_policies) Changed device
/// approvals setting when member is over limit
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceApprovalsChangeOverageAction:
    (DBTEAMLOGDeviceApprovalsChangeOverageActionType *)deviceApprovalsChangeOverageAction;

///
/// Initializes union class with tag state of
/// "device_approvals_change_unlink_action".
///
/// Description of the "device_approvals_change_unlink_action" tag state:
/// (team_policies) Changed device approvals setting when member unlinks
/// approved device
///
/// @param deviceApprovalsChangeUnlinkAction (team_policies) Changed device
/// approvals setting when member unlinks approved device
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceApprovalsChangeUnlinkAction:
    (DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *)deviceApprovalsChangeUnlinkAction;

///
/// Initializes union class with tag state of
/// "directory_restrictions_add_members".
///
/// Description of the "directory_restrictions_add_members" tag state:
/// (team_policies) Added members to directory restrictions list
///
/// @param directoryRestrictionsAddMembers (team_policies) Added members to
/// directory restrictions list
///
/// @return An initialized instance.
///
- (instancetype)initWithDirectoryRestrictionsAddMembers:
    (DBTEAMLOGDirectoryRestrictionsAddMembersType *)directoryRestrictionsAddMembers;

///
/// Initializes union class with tag state of
/// "directory_restrictions_remove_members".
///
/// Description of the "directory_restrictions_remove_members" tag state:
/// (team_policies) Removed members from directory restrictions list
///
/// @param directoryRestrictionsRemoveMembers (team_policies) Removed members
/// from directory restrictions list
///
/// @return An initialized instance.
///
- (instancetype)initWithDirectoryRestrictionsRemoveMembers:
    (DBTEAMLOGDirectoryRestrictionsRemoveMembersType *)directoryRestrictionsRemoveMembers;

///
/// Initializes union class with tag state of "emm_add_exception".
///
/// Description of the "emm_add_exception" tag state: (team_policies) Added
/// members to EMM exception list
///
/// @param emmAddException (team_policies) Added members to EMM exception list
///
/// @return An initialized instance.
///
- (instancetype)initWithEmmAddException:(DBTEAMLOGEmmAddExceptionType *)emmAddException;

///
/// Initializes union class with tag state of "emm_change_policy".
///
/// Description of the "emm_change_policy" tag state: (team_policies)
/// Enabled/disabled enterprise mobility management for members
///
/// @param emmChangePolicy (team_policies) Enabled/disabled enterprise mobility
/// management for members
///
/// @return An initialized instance.
///
- (instancetype)initWithEmmChangePolicy:(DBTEAMLOGEmmChangePolicyType *)emmChangePolicy;

///
/// Initializes union class with tag state of "emm_remove_exception".
///
/// Description of the "emm_remove_exception" tag state: (team_policies) Removed
/// members from EMM exception list
///
/// @param emmRemoveException (team_policies) Removed members from EMM exception
/// list
///
/// @return An initialized instance.
///
- (instancetype)initWithEmmRemoveException:(DBTEAMLOGEmmRemoveExceptionType *)emmRemoveException;

///
/// Initializes union class with tag state of
/// "extended_version_history_change_policy".
///
/// Description of the "extended_version_history_change_policy" tag state:
/// (team_policies) Accepted/opted out of extended version history
///
/// @param extendedVersionHistoryChangePolicy (team_policies) Accepted/opted out
/// of extended version history
///
/// @return An initialized instance.
///
- (instancetype)initWithExtendedVersionHistoryChangePolicy:
    (DBTEAMLOGExtendedVersionHistoryChangePolicyType *)extendedVersionHistoryChangePolicy;

///
/// Initializes union class with tag state of "file_comments_change_policy".
///
/// Description of the "file_comments_change_policy" tag state: (team_policies)
/// Enabled/disabled commenting on team files
///
/// @param fileCommentsChangePolicy (team_policies) Enabled/disabled commenting
/// on team files
///
/// @return An initialized instance.
///
- (instancetype)initWithFileCommentsChangePolicy:(DBTEAMLOGFileCommentsChangePolicyType *)fileCommentsChangePolicy;

///
/// Initializes union class with tag state of "file_requests_change_policy".
///
/// Description of the "file_requests_change_policy" tag state: (team_policies)
/// Enabled/disabled file requests
///
/// @param fileRequestsChangePolicy (team_policies) Enabled/disabled file
/// requests
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRequestsChangePolicy:(DBTEAMLOGFileRequestsChangePolicyType *)fileRequestsChangePolicy;

///
/// Initializes union class with tag state of "file_requests_emails_enabled".
///
/// Description of the "file_requests_emails_enabled" tag state: (team_policies)
/// Enabled file request emails for everyone (deprecated, no longer logged)
///
/// @param fileRequestsEmailsEnabled (team_policies) Enabled file request emails
/// for everyone (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRequestsEmailsEnabled:(DBTEAMLOGFileRequestsEmailsEnabledType *)fileRequestsEmailsEnabled;

///
/// Initializes union class with tag state of
/// "file_requests_emails_restricted_to_team_only".
///
/// Description of the "file_requests_emails_restricted_to_team_only" tag state:
/// (team_policies) Enabled file request emails for team (deprecated, no longer
/// logged)
///
/// @param fileRequestsEmailsRestrictedToTeamOnly (team_policies) Enabled file
/// request emails for team (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRequestsEmailsRestrictedToTeamOnly:
    (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType *)fileRequestsEmailsRestrictedToTeamOnly;

///
/// Initializes union class with tag state of "google_sso_change_policy".
///
/// Description of the "google_sso_change_policy" tag state: (team_policies)
/// Enabled/disabled Google single sign-on for team
///
/// @param googleSsoChangePolicy (team_policies) Enabled/disabled Google single
/// sign-on for team
///
/// @return An initialized instance.
///
- (instancetype)initWithGoogleSsoChangePolicy:(DBTEAMLOGGoogleSsoChangePolicyType *)googleSsoChangePolicy;

///
/// Initializes union class with tag state of
/// "group_user_management_change_policy".
///
/// Description of the "group_user_management_change_policy" tag state:
/// (team_policies) Changed who can create groups
///
/// @param groupUserManagementChangePolicy (team_policies) Changed who can
/// create groups
///
/// @return An initialized instance.
///
- (instancetype)initWithGroupUserManagementChangePolicy:
    (DBTEAMLOGGroupUserManagementChangePolicyType *)groupUserManagementChangePolicy;

///
/// Initializes union class with tag state of "member_requests_change_policy".
///
/// Description of the "member_requests_change_policy" tag state:
/// (team_policies) Changed whether users can find team when not invited
///
/// @param memberRequestsChangePolicy (team_policies) Changed whether users can
/// find team when not invited
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberRequestsChangePolicy:
    (DBTEAMLOGMemberRequestsChangePolicyType *)memberRequestsChangePolicy;

///
/// Initializes union class with tag state of
/// "member_space_limits_add_exception".
///
/// Description of the "member_space_limits_add_exception" tag state:
/// (team_policies) Added members to member space limit exception list
///
/// @param memberSpaceLimitsAddException (team_policies) Added members to member
/// space limit exception list
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberSpaceLimitsAddException:
    (DBTEAMLOGMemberSpaceLimitsAddExceptionType *)memberSpaceLimitsAddException;

///
/// Initializes union class with tag state of
/// "member_space_limits_change_caps_type_policy".
///
/// Description of the "member_space_limits_change_caps_type_policy" tag state:
/// (team_policies) Changed member space limit type for team
///
/// @param memberSpaceLimitsChangeCapsTypePolicy (team_policies) Changed member
/// space limit type for team
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberSpaceLimitsChangeCapsTypePolicy:
    (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType *)memberSpaceLimitsChangeCapsTypePolicy;

///
/// Initializes union class with tag state of
/// "member_space_limits_change_policy".
///
/// Description of the "member_space_limits_change_policy" tag state:
/// (team_policies) Changed team default member space limit
///
/// @param memberSpaceLimitsChangePolicy (team_policies) Changed team default
/// member space limit
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberSpaceLimitsChangePolicy:
    (DBTEAMLOGMemberSpaceLimitsChangePolicyType *)memberSpaceLimitsChangePolicy;

///
/// Initializes union class with tag state of
/// "member_space_limits_remove_exception".
///
/// Description of the "member_space_limits_remove_exception" tag state:
/// (team_policies) Removed members from member space limit exception list
///
/// @param memberSpaceLimitsRemoveException (team_policies) Removed members from
/// member space limit exception list
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberSpaceLimitsRemoveException:
    (DBTEAMLOGMemberSpaceLimitsRemoveExceptionType *)memberSpaceLimitsRemoveException;

///
/// Initializes union class with tag state of
/// "member_suggestions_change_policy".
///
/// Description of the "member_suggestions_change_policy" tag state:
/// (team_policies) Enabled/disabled option for team members to suggest people
/// to add to team
///
/// @param memberSuggestionsChangePolicy (team_policies) Enabled/disabled option
/// for team members to suggest people to add to team
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberSuggestionsChangePolicy:
    (DBTEAMLOGMemberSuggestionsChangePolicyType *)memberSuggestionsChangePolicy;

///
/// Initializes union class with tag state of
/// "microsoft_office_addin_change_policy".
///
/// Description of the "microsoft_office_addin_change_policy" tag state:
/// (team_policies) Enabled/disabled Microsoft Office add-in
///
/// @param microsoftOfficeAddinChangePolicy (team_policies) Enabled/disabled
/// Microsoft Office add-in
///
/// @return An initialized instance.
///
- (instancetype)initWithMicrosoftOfficeAddinChangePolicy:
    (DBTEAMLOGMicrosoftOfficeAddinChangePolicyType *)microsoftOfficeAddinChangePolicy;

///
/// Initializes union class with tag state of "network_control_change_policy".
///
/// Description of the "network_control_change_policy" tag state:
/// (team_policies) Enabled/disabled network control
///
/// @param networkControlChangePolicy (team_policies) Enabled/disabled network
/// control
///
/// @return An initialized instance.
///
- (instancetype)initWithNetworkControlChangePolicy:
    (DBTEAMLOGNetworkControlChangePolicyType *)networkControlChangePolicy;

///
/// Initializes union class with tag state of "paper_change_deployment_policy".
///
/// Description of the "paper_change_deployment_policy" tag state:
/// (team_policies) Changed whether Dropbox Paper, when enabled, is deployed to
/// all members or to specific members
///
/// @param paperChangeDeploymentPolicy (team_policies) Changed whether Dropbox
/// Paper, when enabled, is deployed to all members or to specific members
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperChangeDeploymentPolicy:
    (DBTEAMLOGPaperChangeDeploymentPolicyType *)paperChangeDeploymentPolicy;

///
/// Initializes union class with tag state of "paper_change_member_link_policy".
///
/// Description of the "paper_change_member_link_policy" tag state:
/// (team_policies) Changed whether non-members can view Paper docs with link
/// (deprecated, no longer logged)
///
/// @param paperChangeMemberLinkPolicy (team_policies) Changed whether
/// non-members can view Paper docs with link (deprecated, no longer logged)
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperChangeMemberLinkPolicy:
    (DBTEAMLOGPaperChangeMemberLinkPolicyType *)paperChangeMemberLinkPolicy;

///
/// Initializes union class with tag state of "paper_change_member_policy".
///
/// Description of the "paper_change_member_policy" tag state: (team_policies)
/// Changed whether members can share Paper docs outside team, and if docs are
/// accessible only by team members or anyone by default
///
/// @param paperChangeMemberPolicy (team_policies) Changed whether members can
/// share Paper docs outside team, and if docs are accessible only by team
/// members or anyone by default
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperChangeMemberPolicy:(DBTEAMLOGPaperChangeMemberPolicyType *)paperChangeMemberPolicy;

///
/// Initializes union class with tag state of "paper_change_policy".
///
/// Description of the "paper_change_policy" tag state: (team_policies)
/// Enabled/disabled Dropbox Paper for team
///
/// @param paperChangePolicy (team_policies) Enabled/disabled Dropbox Paper for
/// team
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperChangePolicy:(DBTEAMLOGPaperChangePolicyType *)paperChangePolicy;

///
/// Initializes union class with tag state of
/// "paper_enabled_users_group_addition".
///
/// Description of the "paper_enabled_users_group_addition" tag state:
/// (team_policies) Added users to Paper-enabled users list
///
/// @param paperEnabledUsersGroupAddition (team_policies) Added users to
/// Paper-enabled users list
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperEnabledUsersGroupAddition:
    (DBTEAMLOGPaperEnabledUsersGroupAdditionType *)paperEnabledUsersGroupAddition;

///
/// Initializes union class with tag state of
/// "paper_enabled_users_group_removal".
///
/// Description of the "paper_enabled_users_group_removal" tag state:
/// (team_policies) Removed users from Paper-enabled users list
///
/// @param paperEnabledUsersGroupRemoval (team_policies) Removed users from
/// Paper-enabled users list
///
/// @return An initialized instance.
///
- (instancetype)initWithPaperEnabledUsersGroupRemoval:
    (DBTEAMLOGPaperEnabledUsersGroupRemovalType *)paperEnabledUsersGroupRemoval;

///
/// Initializes union class with tag state of "permanent_delete_change_policy".
///
/// Description of the "permanent_delete_change_policy" tag state:
/// (team_policies) Enabled/disabled ability of team members to permanently
/// delete content
///
/// @param permanentDeleteChangePolicy (team_policies) Enabled/disabled ability
/// of team members to permanently delete content
///
/// @return An initialized instance.
///
- (instancetype)initWithPermanentDeleteChangePolicy:
    (DBTEAMLOGPermanentDeleteChangePolicyType *)permanentDeleteChangePolicy;

///
/// Initializes union class with tag state of
/// "sharing_change_folder_join_policy".
///
/// Description of the "sharing_change_folder_join_policy" tag state:
/// (team_policies) Changed whether team members can join shared folders owned
/// outside team
///
/// @param sharingChangeFolderJoinPolicy (team_policies) Changed whether team
/// members can join shared folders owned outside team
///
/// @return An initialized instance.
///
- (instancetype)initWithSharingChangeFolderJoinPolicy:
    (DBTEAMLOGSharingChangeFolderJoinPolicyType *)sharingChangeFolderJoinPolicy;

///
/// Initializes union class with tag state of "sharing_change_link_policy".
///
/// Description of the "sharing_change_link_policy" tag state: (team_policies)
/// Changed whether members can share links outside team, and if links are
/// accessible only by team members or anyone by default
///
/// @param sharingChangeLinkPolicy (team_policies) Changed whether members can
/// share links outside team, and if links are accessible only by team members
/// or anyone by default
///
/// @return An initialized instance.
///
- (instancetype)initWithSharingChangeLinkPolicy:(DBTEAMLOGSharingChangeLinkPolicyType *)sharingChangeLinkPolicy;

///
/// Initializes union class with tag state of "sharing_change_member_policy".
///
/// Description of the "sharing_change_member_policy" tag state: (team_policies)
/// Changed whether members can share files/folders outside team
///
/// @param sharingChangeMemberPolicy (team_policies) Changed whether members can
/// share files/folders outside team
///
/// @return An initialized instance.
///
- (instancetype)initWithSharingChangeMemberPolicy:(DBTEAMLOGSharingChangeMemberPolicyType *)sharingChangeMemberPolicy;

///
/// Initializes union class with tag state of "showcase_change_download_policy".
///
/// Description of the "showcase_change_download_policy" tag state:
/// (team_policies) Enabled/disabled downloading files from Dropbox Showcase for
/// team
///
/// @param showcaseChangeDownloadPolicy (team_policies) Enabled/disabled
/// downloading files from Dropbox Showcase for team
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseChangeDownloadPolicy:
    (DBTEAMLOGShowcaseChangeDownloadPolicyType *)showcaseChangeDownloadPolicy;

///
/// Initializes union class with tag state of "showcase_change_enabled_policy".
///
/// Description of the "showcase_change_enabled_policy" tag state:
/// (team_policies) Enabled/disabled Dropbox Showcase for team
///
/// @param showcaseChangeEnabledPolicy (team_policies) Enabled/disabled Dropbox
/// Showcase for team
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseChangeEnabledPolicy:
    (DBTEAMLOGShowcaseChangeEnabledPolicyType *)showcaseChangeEnabledPolicy;

///
/// Initializes union class with tag state of
/// "showcase_change_external_sharing_policy".
///
/// Description of the "showcase_change_external_sharing_policy" tag state:
/// (team_policies) Enabled/disabled sharing Dropbox Showcase externally for
/// team
///
/// @param showcaseChangeExternalSharingPolicy (team_policies) Enabled/disabled
/// sharing Dropbox Showcase externally for team
///
/// @return An initialized instance.
///
- (instancetype)initWithShowcaseChangeExternalSharingPolicy:
    (DBTEAMLOGShowcaseChangeExternalSharingPolicyType *)showcaseChangeExternalSharingPolicy;

///
/// Initializes union class with tag state of "smart_sync_change_policy".
///
/// Description of the "smart_sync_change_policy" tag state: (team_policies)
/// Changed default Smart Sync setting for team members
///
/// @param smartSyncChangePolicy (team_policies) Changed default Smart Sync
/// setting for team members
///
/// @return An initialized instance.
///
- (instancetype)initWithSmartSyncChangePolicy:(DBTEAMLOGSmartSyncChangePolicyType *)smartSyncChangePolicy;

///
/// Initializes union class with tag state of "smart_sync_not_opt_out".
///
/// Description of the "smart_sync_not_opt_out" tag state: (team_policies) Opted
/// team into Smart Sync
///
/// @param smartSyncNotOptOut (team_policies) Opted team into Smart Sync
///
/// @return An initialized instance.
///
- (instancetype)initWithSmartSyncNotOptOut:(DBTEAMLOGSmartSyncNotOptOutType *)smartSyncNotOptOut;

///
/// Initializes union class with tag state of "smart_sync_opt_out".
///
/// Description of the "smart_sync_opt_out" tag state: (team_policies) Opted
/// team out of Smart Sync
///
/// @param smartSyncOptOut (team_policies) Opted team out of Smart Sync
///
/// @return An initialized instance.
///
- (instancetype)initWithSmartSyncOptOut:(DBTEAMLOGSmartSyncOptOutType *)smartSyncOptOut;

///
/// Initializes union class with tag state of "sso_change_policy".
///
/// Description of the "sso_change_policy" tag state: (team_policies) Changed
/// single sign-on setting for team
///
/// @param ssoChangePolicy (team_policies) Changed single sign-on setting for
/// team
///
/// @return An initialized instance.
///
- (instancetype)initWithSsoChangePolicy:(DBTEAMLOGSsoChangePolicyType *)ssoChangePolicy;

///
/// Initializes union class with tag state of "tfa_change_policy".
///
/// Description of the "tfa_change_policy" tag state: (team_policies) Changed
/// two-step verification setting for team
///
/// @param tfaChangePolicy (team_policies) Changed two-step verification setting
/// for team
///
/// @return An initialized instance.
///
- (instancetype)initWithTfaChangePolicy:(DBTEAMLOGTfaChangePolicyType *)tfaChangePolicy;

///
/// Initializes union class with tag state of "two_account_change_policy".
///
/// Description of the "two_account_change_policy" tag state: (team_policies)
/// Enabled/disabled option for members to link personal Dropbox account and
/// team account to same computer
///
/// @param twoAccountChangePolicy (team_policies) Enabled/disabled option for
/// members to link personal Dropbox account and team account to same computer
///
/// @return An initialized instance.
///
- (instancetype)initWithTwoAccountChangePolicy:(DBTEAMLOGTwoAccountChangePolicyType *)twoAccountChangePolicy;

///
/// Initializes union class with tag state of
/// "web_sessions_change_fixed_length_policy".
///
/// Description of the "web_sessions_change_fixed_length_policy" tag state:
/// (team_policies) Changed how long members can stay signed in to Dropbox.com
///
/// @param webSessionsChangeFixedLengthPolicy (team_policies) Changed how long
/// members can stay signed in to Dropbox.com
///
/// @return An initialized instance.
///
- (instancetype)initWithWebSessionsChangeFixedLengthPolicy:
    (DBTEAMLOGWebSessionsChangeFixedLengthPolicyType *)webSessionsChangeFixedLengthPolicy;

///
/// Initializes union class with tag state of
/// "web_sessions_change_idle_length_policy".
///
/// Description of the "web_sessions_change_idle_length_policy" tag state:
/// (team_policies) Changed how long team members can be idle while signed in to
/// Dropbox.com
///
/// @param webSessionsChangeIdleLengthPolicy (team_policies) Changed how long
/// team members can be idle while signed in to Dropbox.com
///
/// @return An initialized instance.
///
- (instancetype)initWithWebSessionsChangeIdleLengthPolicy:
    (DBTEAMLOGWebSessionsChangeIdleLengthPolicyType *)webSessionsChangeIdleLengthPolicy;

///
/// Initializes union class with tag state of "team_merge_from".
///
/// Description of the "team_merge_from" tag state: (team_profile) Merged
/// another team into this team
///
/// @param teamMergeFrom (team_profile) Merged another team into this team
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamMergeFrom:(DBTEAMLOGTeamMergeFromType *)teamMergeFrom;

///
/// Initializes union class with tag state of "team_merge_to".
///
/// Description of the "team_merge_to" tag state: (team_profile) Merged this
/// team into another team
///
/// @param teamMergeTo (team_profile) Merged this team into another team
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamMergeTo:(DBTEAMLOGTeamMergeToType *)teamMergeTo;

///
/// Initializes union class with tag state of "team_profile_add_logo".
///
/// Description of the "team_profile_add_logo" tag state: (team_profile) Added
/// team logo to display on shared link headers
///
/// @param teamProfileAddLogo (team_profile) Added team logo to display on
/// shared link headers
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamProfileAddLogo:(DBTEAMLOGTeamProfileAddLogoType *)teamProfileAddLogo;

///
/// Initializes union class with tag state of
/// "team_profile_change_default_language".
///
/// Description of the "team_profile_change_default_language" tag state:
/// (team_profile) Changed default language for team
///
/// @param teamProfileChangeDefaultLanguage (team_profile) Changed default
/// language for team
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamProfileChangeDefaultLanguage:
    (DBTEAMLOGTeamProfileChangeDefaultLanguageType *)teamProfileChangeDefaultLanguage;

///
/// Initializes union class with tag state of "team_profile_change_logo".
///
/// Description of the "team_profile_change_logo" tag state: (team_profile)
/// Changed team logo displayed on shared link headers
///
/// @param teamProfileChangeLogo (team_profile) Changed team logo displayed on
/// shared link headers
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamProfileChangeLogo:(DBTEAMLOGTeamProfileChangeLogoType *)teamProfileChangeLogo;

///
/// Initializes union class with tag state of "team_profile_change_name".
///
/// Description of the "team_profile_change_name" tag state: (team_profile)
/// Changed team name
///
/// @param teamProfileChangeName (team_profile) Changed team name
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamProfileChangeName:(DBTEAMLOGTeamProfileChangeNameType *)teamProfileChangeName;

///
/// Initializes union class with tag state of "team_profile_remove_logo".
///
/// Description of the "team_profile_remove_logo" tag state: (team_profile)
/// Removed team logo displayed on shared link headers
///
/// @param teamProfileRemoveLogo (team_profile) Removed team logo displayed on
/// shared link headers
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamProfileRemoveLogo:(DBTEAMLOGTeamProfileRemoveLogoType *)teamProfileRemoveLogo;

///
/// Initializes union class with tag state of "tfa_add_backup_phone".
///
/// Description of the "tfa_add_backup_phone" tag state: (tfa) Added backup
/// phone for two-step verification
///
/// @param tfaAddBackupPhone (tfa) Added backup phone for two-step verification
///
/// @return An initialized instance.
///
- (instancetype)initWithTfaAddBackupPhone:(DBTEAMLOGTfaAddBackupPhoneType *)tfaAddBackupPhone;

///
/// Initializes union class with tag state of "tfa_add_security_key".
///
/// Description of the "tfa_add_security_key" tag state: (tfa) Added security
/// key for two-step verification
///
/// @param tfaAddSecurityKey (tfa) Added security key for two-step verification
///
/// @return An initialized instance.
///
- (instancetype)initWithTfaAddSecurityKey:(DBTEAMLOGTfaAddSecurityKeyType *)tfaAddSecurityKey;

///
/// Initializes union class with tag state of "tfa_change_backup_phone".
///
/// Description of the "tfa_change_backup_phone" tag state: (tfa) Changed backup
/// phone for two-step verification
///
/// @param tfaChangeBackupPhone (tfa) Changed backup phone for two-step
/// verification
///
/// @return An initialized instance.
///
- (instancetype)initWithTfaChangeBackupPhone:(DBTEAMLOGTfaChangeBackupPhoneType *)tfaChangeBackupPhone;

///
/// Initializes union class with tag state of "tfa_change_status".
///
/// Description of the "tfa_change_status" tag state: (tfa)
/// Enabled/disabled/changed two-step verification setting
///
/// @param tfaChangeStatus (tfa) Enabled/disabled/changed two-step verification
/// setting
///
/// @return An initialized instance.
///
- (instancetype)initWithTfaChangeStatus:(DBTEAMLOGTfaChangeStatusType *)tfaChangeStatus;

///
/// Initializes union class with tag state of "tfa_remove_backup_phone".
///
/// Description of the "tfa_remove_backup_phone" tag state: (tfa) Removed backup
/// phone for two-step verification
///
/// @param tfaRemoveBackupPhone (tfa) Removed backup phone for two-step
/// verification
///
/// @return An initialized instance.
///
- (instancetype)initWithTfaRemoveBackupPhone:(DBTEAMLOGTfaRemoveBackupPhoneType *)tfaRemoveBackupPhone;

///
/// Initializes union class with tag state of "tfa_remove_security_key".
///
/// Description of the "tfa_remove_security_key" tag state: (tfa) Removed
/// security key for two-step verification
///
/// @param tfaRemoveSecurityKey (tfa) Removed security key for two-step
/// verification
///
/// @return An initialized instance.
///
- (instancetype)initWithTfaRemoveSecurityKey:(DBTEAMLOGTfaRemoveSecurityKeyType *)tfaRemoveSecurityKey;

///
/// Initializes union class with tag state of "tfa_reset".
///
/// Description of the "tfa_reset" tag state: (tfa) Reset two-step verification
/// for team member
///
/// @param tfaReset (tfa) Reset two-step verification for team member
///
/// @return An initialized instance.
///
- (instancetype)initWithTfaReset:(DBTEAMLOGTfaResetType *)tfaReset;

///
/// Initializes union class with tag state of "other".
///
/// @return An initialized instance.
///
- (instancetype)initWithOther;

- (instancetype)init NS_UNAVAILABLE;

#pragma mark - Tag state methods

///
/// Retrieves whether the union's current tag state has value "app_link_team".
///
/// @note Call this method and ensure it returns true before accessing the
/// `appLinkTeam` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "app_link_team".
///
- (BOOL)isAppLinkTeam;

///
/// Retrieves whether the union's current tag state has value "app_link_user".
///
/// @note Call this method and ensure it returns true before accessing the
/// `appLinkUser` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "app_link_user".
///
- (BOOL)isAppLinkUser;

///
/// Retrieves whether the union's current tag state has value "app_unlink_team".
///
/// @note Call this method and ensure it returns true before accessing the
/// `appUnlinkTeam` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "app_unlink_team".
///
- (BOOL)isAppUnlinkTeam;

///
/// Retrieves whether the union's current tag state has value "app_unlink_user".
///
/// @note Call this method and ensure it returns true before accessing the
/// `appUnlinkUser` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "app_unlink_user".
///
- (BOOL)isAppUnlinkUser;

///
/// Retrieves whether the union's current tag state has value
/// "file_add_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileAddComment` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_add_comment".
///
- (BOOL)isFileAddComment;

///
/// Retrieves whether the union's current tag state has value
/// "file_change_comment_subscription".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileChangeCommentSubscription` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "file_change_comment_subscription".
///
- (BOOL)isFileChangeCommentSubscription;

///
/// Retrieves whether the union's current tag state has value
/// "file_delete_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileDeleteComment` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "file_delete_comment".
///
- (BOOL)isFileDeleteComment;

///
/// Retrieves whether the union's current tag state has value
/// "file_like_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileLikeComment` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_like_comment".
///
- (BOOL)isFileLikeComment;

///
/// Retrieves whether the union's current tag state has value
/// "file_resolve_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileResolveComment` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "file_resolve_comment".
///
- (BOOL)isFileResolveComment;

///
/// Retrieves whether the union's current tag state has value
/// "file_unlike_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileUnlikeComment` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "file_unlike_comment".
///
- (BOOL)isFileUnlikeComment;

///
/// Retrieves whether the union's current tag state has value
/// "file_unresolve_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileUnresolveComment` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "file_unresolve_comment".
///
- (BOOL)isFileUnresolveComment;

///
/// Retrieves whether the union's current tag state has value
/// "device_change_ip_desktop".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceChangeIpDesktop` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "device_change_ip_desktop".
///
- (BOOL)isDeviceChangeIpDesktop;

///
/// Retrieves whether the union's current tag state has value
/// "device_change_ip_mobile".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceChangeIpMobile` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "device_change_ip_mobile".
///
- (BOOL)isDeviceChangeIpMobile;

///
/// Retrieves whether the union's current tag state has value
/// "device_change_ip_web".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceChangeIpWeb` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "device_change_ip_web".
///
- (BOOL)isDeviceChangeIpWeb;

///
/// Retrieves whether the union's current tag state has value
/// "device_delete_on_unlink_fail".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceDeleteOnUnlinkFail` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "device_delete_on_unlink_fail".
///
- (BOOL)isDeviceDeleteOnUnlinkFail;

///
/// Retrieves whether the union's current tag state has value
/// "device_delete_on_unlink_success".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceDeleteOnUnlinkSuccess` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "device_delete_on_unlink_success".
///
- (BOOL)isDeviceDeleteOnUnlinkSuccess;

///
/// Retrieves whether the union's current tag state has value
/// "device_link_fail".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceLinkFail` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "device_link_fail".
///
- (BOOL)isDeviceLinkFail;

///
/// Retrieves whether the union's current tag state has value
/// "device_link_success".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceLinkSuccess` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "device_link_success".
///
- (BOOL)isDeviceLinkSuccess;

///
/// Retrieves whether the union's current tag state has value
/// "device_management_disabled".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceManagementDisabled` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "device_management_disabled".
///
- (BOOL)isDeviceManagementDisabled;

///
/// Retrieves whether the union's current tag state has value
/// "device_management_enabled".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceManagementEnabled` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "device_management_enabled".
///
- (BOOL)isDeviceManagementEnabled;

///
/// Retrieves whether the union's current tag state has value "device_unlink".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceUnlink` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "device_unlink".
///
- (BOOL)isDeviceUnlink;

///
/// Retrieves whether the union's current tag state has value
/// "emm_refresh_auth_token".
///
/// @note Call this method and ensure it returns true before accessing the
/// `emmRefreshAuthToken` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "emm_refresh_auth_token".
///
- (BOOL)isEmmRefreshAuthToken;

///
/// Retrieves whether the union's current tag state has value
/// "account_capture_change_availability".
///
/// @note Call this method and ensure it returns true before accessing the
/// `accountCaptureChangeAvailability` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "account_capture_change_availability".
///
- (BOOL)isAccountCaptureChangeAvailability;

///
/// Retrieves whether the union's current tag state has value
/// "account_capture_migrate_account".
///
/// @note Call this method and ensure it returns true before accessing the
/// `accountCaptureMigrateAccount` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "account_capture_migrate_account".
///
- (BOOL)isAccountCaptureMigrateAccount;

///
/// Retrieves whether the union's current tag state has value
/// "account_capture_notification_emails_sent".
///
/// @note Call this method and ensure it returns true before accessing the
/// `accountCaptureNotificationEmailsSent` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "account_capture_notification_emails_sent".
///
- (BOOL)isAccountCaptureNotificationEmailsSent;

///
/// Retrieves whether the union's current tag state has value
/// "account_capture_relinquish_account".
///
/// @note Call this method and ensure it returns true before accessing the
/// `accountCaptureRelinquishAccount` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "account_capture_relinquish_account".
///
- (BOOL)isAccountCaptureRelinquishAccount;

///
/// Retrieves whether the union's current tag state has value
/// "disabled_domain_invites".
///
/// @note Call this method and ensure it returns true before accessing the
/// `disabledDomainInvites` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "disabled_domain_invites".
///
- (BOOL)isDisabledDomainInvites;

///
/// Retrieves whether the union's current tag state has value
/// "domain_invites_approve_request_to_join_team".
///
/// @note Call this method and ensure it returns true before accessing the
/// `domainInvitesApproveRequestToJoinTeam` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "domain_invites_approve_request_to_join_team".
///
- (BOOL)isDomainInvitesApproveRequestToJoinTeam;

///
/// Retrieves whether the union's current tag state has value
/// "domain_invites_decline_request_to_join_team".
///
/// @note Call this method and ensure it returns true before accessing the
/// `domainInvitesDeclineRequestToJoinTeam` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "domain_invites_decline_request_to_join_team".
///
- (BOOL)isDomainInvitesDeclineRequestToJoinTeam;

///
/// Retrieves whether the union's current tag state has value
/// "domain_invites_email_existing_users".
///
/// @note Call this method and ensure it returns true before accessing the
/// `domainInvitesEmailExistingUsers` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "domain_invites_email_existing_users".
///
- (BOOL)isDomainInvitesEmailExistingUsers;

///
/// Retrieves whether the union's current tag state has value
/// "domain_invites_request_to_join_team".
///
/// @note Call this method and ensure it returns true before accessing the
/// `domainInvitesRequestToJoinTeam` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "domain_invites_request_to_join_team".
///
- (BOOL)isDomainInvitesRequestToJoinTeam;

///
/// Retrieves whether the union's current tag state has value
/// "domain_invites_set_invite_new_user_pref_to_no".
///
/// @note Call this method and ensure it returns true before accessing the
/// `domainInvitesSetInviteNewUserPrefToNo` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "domain_invites_set_invite_new_user_pref_to_no".
///
- (BOOL)isDomainInvitesSetInviteNewUserPrefToNo;

///
/// Retrieves whether the union's current tag state has value
/// "domain_invites_set_invite_new_user_pref_to_yes".
///
/// @note Call this method and ensure it returns true before accessing the
/// `domainInvitesSetInviteNewUserPrefToYes` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "domain_invites_set_invite_new_user_pref_to_yes".
///
- (BOOL)isDomainInvitesSetInviteNewUserPrefToYes;

///
/// Retrieves whether the union's current tag state has value
/// "domain_verification_add_domain_fail".
///
/// @note Call this method and ensure it returns true before accessing the
/// `domainVerificationAddDomainFail` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "domain_verification_add_domain_fail".
///
- (BOOL)isDomainVerificationAddDomainFail;

///
/// Retrieves whether the union's current tag state has value
/// "domain_verification_add_domain_success".
///
/// @note Call this method and ensure it returns true before accessing the
/// `domainVerificationAddDomainSuccess` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "domain_verification_add_domain_success".
///
- (BOOL)isDomainVerificationAddDomainSuccess;

///
/// Retrieves whether the union's current tag state has value
/// "domain_verification_remove_domain".
///
/// @note Call this method and ensure it returns true before accessing the
/// `domainVerificationRemoveDomain` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "domain_verification_remove_domain".
///
- (BOOL)isDomainVerificationRemoveDomain;

///
/// Retrieves whether the union's current tag state has value
/// "enabled_domain_invites".
///
/// @note Call this method and ensure it returns true before accessing the
/// `enabledDomainInvites` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "enabled_domain_invites".
///
- (BOOL)isEnabledDomainInvites;

///
/// Retrieves whether the union's current tag state has value "create_folder".
///
/// @note Call this method and ensure it returns true before accessing the
/// `createFolder` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "create_folder".
///
- (BOOL)isCreateFolder;

///
/// Retrieves whether the union's current tag state has value "file_add".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileAdd` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_add".
///
- (BOOL)isFileAdd;

///
/// Retrieves whether the union's current tag state has value "file_copy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileCopy` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_copy".
///
- (BOOL)isFileCopy;

///
/// Retrieves whether the union's current tag state has value "file_delete".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileDelete` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_delete".
///
- (BOOL)isFileDelete;

///
/// Retrieves whether the union's current tag state has value "file_download".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileDownload` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_download".
///
- (BOOL)isFileDownload;

///
/// Retrieves whether the union's current tag state has value "file_edit".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileEdit` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_edit".
///
- (BOOL)isFileEdit;

///
/// Retrieves whether the union's current tag state has value
/// "file_get_copy_reference".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileGetCopyReference` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "file_get_copy_reference".
///
- (BOOL)isFileGetCopyReference;

///
/// Retrieves whether the union's current tag state has value "file_move".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileMove` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_move".
///
- (BOOL)isFileMove;

///
/// Retrieves whether the union's current tag state has value
/// "file_permanently_delete".
///
/// @note Call this method and ensure it returns true before accessing the
/// `filePermanentlyDelete` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "file_permanently_delete".
///
- (BOOL)isFilePermanentlyDelete;

///
/// Retrieves whether the union's current tag state has value "file_preview".
///
/// @note Call this method and ensure it returns true before accessing the
/// `filePreview` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_preview".
///
- (BOOL)isFilePreview;

///
/// Retrieves whether the union's current tag state has value "file_rename".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRename` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_rename".
///
- (BOOL)isFileRename;

///
/// Retrieves whether the union's current tag state has value "file_restore".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRestore` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_restore".
///
- (BOOL)isFileRestore;

///
/// Retrieves whether the union's current tag state has value "file_revert".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRevert` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "file_revert".
///
- (BOOL)isFileRevert;

///
/// Retrieves whether the union's current tag state has value
/// "file_rollback_changes".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRollbackChanges` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "file_rollback_changes".
///
- (BOOL)isFileRollbackChanges;

///
/// Retrieves whether the union's current tag state has value
/// "file_save_copy_reference".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileSaveCopyReference` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "file_save_copy_reference".
///
- (BOOL)isFileSaveCopyReference;

///
/// Retrieves whether the union's current tag state has value
/// "file_request_change".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRequestChange` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "file_request_change".
///
- (BOOL)isFileRequestChange;

///
/// Retrieves whether the union's current tag state has value
/// "file_request_close".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRequestClose` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "file_request_close".
///
- (BOOL)isFileRequestClose;

///
/// Retrieves whether the union's current tag state has value
/// "file_request_create".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRequestCreate` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "file_request_create".
///
- (BOOL)isFileRequestCreate;

///
/// Retrieves whether the union's current tag state has value
/// "file_request_receive_file".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRequestReceiveFile` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "file_request_receive_file".
///
- (BOOL)isFileRequestReceiveFile;

///
/// Retrieves whether the union's current tag state has value
/// "group_add_external_id".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupAddExternalId` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "group_add_external_id".
///
- (BOOL)isGroupAddExternalId;

///
/// Retrieves whether the union's current tag state has value
/// "group_add_member".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupAddMember` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "group_add_member".
///
- (BOOL)isGroupAddMember;

///
/// Retrieves whether the union's current tag state has value
/// "group_change_external_id".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupChangeExternalId` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "group_change_external_id".
///
- (BOOL)isGroupChangeExternalId;

///
/// Retrieves whether the union's current tag state has value
/// "group_change_management_type".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupChangeManagementType` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "group_change_management_type".
///
- (BOOL)isGroupChangeManagementType;

///
/// Retrieves whether the union's current tag state has value
/// "group_change_member_role".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupChangeMemberRole` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "group_change_member_role".
///
- (BOOL)isGroupChangeMemberRole;

///
/// Retrieves whether the union's current tag state has value "group_create".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupCreate` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "group_create".
///
- (BOOL)isGroupCreate;

///
/// Retrieves whether the union's current tag state has value "group_delete".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupDelete` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "group_delete".
///
- (BOOL)isGroupDelete;

///
/// Retrieves whether the union's current tag state has value
/// "group_description_updated".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupDescriptionUpdated` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "group_description_updated".
///
- (BOOL)isGroupDescriptionUpdated;

///
/// Retrieves whether the union's current tag state has value
/// "group_join_policy_updated".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupJoinPolicyUpdated` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "group_join_policy_updated".
///
- (BOOL)isGroupJoinPolicyUpdated;

///
/// Retrieves whether the union's current tag state has value "group_moved".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupMoved` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "group_moved".
///
- (BOOL)isGroupMoved;

///
/// Retrieves whether the union's current tag state has value
/// "group_remove_external_id".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupRemoveExternalId` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "group_remove_external_id".
///
- (BOOL)isGroupRemoveExternalId;

///
/// Retrieves whether the union's current tag state has value
/// "group_remove_member".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupRemoveMember` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "group_remove_member".
///
- (BOOL)isGroupRemoveMember;

///
/// Retrieves whether the union's current tag state has value "group_rename".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupRename` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "group_rename".
///
- (BOOL)isGroupRename;

///
/// Retrieves whether the union's current tag state has value "emm_error".
///
/// @note Call this method and ensure it returns true before accessing the
/// `emmError` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "emm_error".
///
- (BOOL)isEmmError;

///
/// Retrieves whether the union's current tag state has value "login_fail".
///
/// @note Call this method and ensure it returns true before accessing the
/// `loginFail` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "login_fail".
///
- (BOOL)isLoginFail;

///
/// Retrieves whether the union's current tag state has value "login_success".
///
/// @note Call this method and ensure it returns true before accessing the
/// `loginSuccess` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "login_success".
///
- (BOOL)isLoginSuccess;

///
/// Retrieves whether the union's current tag state has value "logout".
///
/// @note Call this method and ensure it returns true before accessing the
/// `logout` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "logout".
///
- (BOOL)isLogout;

///
/// Retrieves whether the union's current tag state has value
/// "reseller_support_session_end".
///
/// @note Call this method and ensure it returns true before accessing the
/// `resellerSupportSessionEnd` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "reseller_support_session_end".
///
- (BOOL)isResellerSupportSessionEnd;

///
/// Retrieves whether the union's current tag state has value
/// "reseller_support_session_start".
///
/// @note Call this method and ensure it returns true before accessing the
/// `resellerSupportSessionStart` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "reseller_support_session_start".
///
- (BOOL)isResellerSupportSessionStart;

///
/// Retrieves whether the union's current tag state has value
/// "sign_in_as_session_end".
///
/// @note Call this method and ensure it returns true before accessing the
/// `signInAsSessionEnd` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "sign_in_as_session_end".
///
- (BOOL)isSignInAsSessionEnd;

///
/// Retrieves whether the union's current tag state has value
/// "sign_in_as_session_start".
///
/// @note Call this method and ensure it returns true before accessing the
/// `signInAsSessionStart` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "sign_in_as_session_start".
///
- (BOOL)isSignInAsSessionStart;

///
/// Retrieves whether the union's current tag state has value "sso_error".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoError` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sso_error".
///
- (BOOL)isSsoError;

///
/// Retrieves whether the union's current tag state has value "member_add_name".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberAddName` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "member_add_name".
///
- (BOOL)isMemberAddName;

///
/// Retrieves whether the union's current tag state has value
/// "member_change_admin_role".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberChangeAdminRole` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "member_change_admin_role".
///
- (BOOL)isMemberChangeAdminRole;

///
/// Retrieves whether the union's current tag state has value
/// "member_change_email".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberChangeEmail` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_change_email".
///
- (BOOL)isMemberChangeEmail;

///
/// Retrieves whether the union's current tag state has value
/// "member_change_membership_type".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberChangeMembershipType` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "member_change_membership_type".
///
- (BOOL)isMemberChangeMembershipType;

///
/// Retrieves whether the union's current tag state has value
/// "member_change_name".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberChangeName` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_change_name".
///
- (BOOL)isMemberChangeName;

///
/// Retrieves whether the union's current tag state has value
/// "member_change_status".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberChangeStatus` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_change_status".
///
- (BOOL)isMemberChangeStatus;

///
/// Retrieves whether the union's current tag state has value
/// "member_permanently_delete_account_contents".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberPermanentlyDeleteAccountContents` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_permanently_delete_account_contents".
///
- (BOOL)isMemberPermanentlyDeleteAccountContents;

///
/// Retrieves whether the union's current tag state has value
/// "member_space_limits_add_custom_quota".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberSpaceLimitsAddCustomQuota` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_space_limits_add_custom_quota".
///
- (BOOL)isMemberSpaceLimitsAddCustomQuota;

///
/// Retrieves whether the union's current tag state has value
/// "member_space_limits_change_custom_quota".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberSpaceLimitsChangeCustomQuota` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_space_limits_change_custom_quota".
///
- (BOOL)isMemberSpaceLimitsChangeCustomQuota;

///
/// Retrieves whether the union's current tag state has value
/// "member_space_limits_change_status".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberSpaceLimitsChangeStatus` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_space_limits_change_status".
///
- (BOOL)isMemberSpaceLimitsChangeStatus;

///
/// Retrieves whether the union's current tag state has value
/// "member_space_limits_remove_custom_quota".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberSpaceLimitsRemoveCustomQuota` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_space_limits_remove_custom_quota".
///
- (BOOL)isMemberSpaceLimitsRemoveCustomQuota;

///
/// Retrieves whether the union's current tag state has value "member_suggest".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberSuggest` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "member_suggest".
///
- (BOOL)isMemberSuggest;

///
/// Retrieves whether the union's current tag state has value
/// "member_transfer_account_contents".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberTransferAccountContents` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_transfer_account_contents".
///
- (BOOL)isMemberTransferAccountContents;

///
/// Retrieves whether the union's current tag state has value
/// "secondary_mails_policy_changed".
///
/// @note Call this method and ensure it returns true before accessing the
/// `secondaryMailsPolicyChanged` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "secondary_mails_policy_changed".
///
- (BOOL)isSecondaryMailsPolicyChanged;

///
/// Retrieves whether the union's current tag state has value
/// "paper_content_add_member".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperContentAddMember` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_content_add_member".
///
- (BOOL)isPaperContentAddMember;

///
/// Retrieves whether the union's current tag state has value
/// "paper_content_add_to_folder".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperContentAddToFolder` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_content_add_to_folder".
///
- (BOOL)isPaperContentAddToFolder;

///
/// Retrieves whether the union's current tag state has value
/// "paper_content_archive".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperContentArchive` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_content_archive".
///
- (BOOL)isPaperContentArchive;

///
/// Retrieves whether the union's current tag state has value
/// "paper_content_create".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperContentCreate` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_content_create".
///
- (BOOL)isPaperContentCreate;

///
/// Retrieves whether the union's current tag state has value
/// "paper_content_permanently_delete".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperContentPermanentlyDelete` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_content_permanently_delete".
///
- (BOOL)isPaperContentPermanentlyDelete;

///
/// Retrieves whether the union's current tag state has value
/// "paper_content_remove_from_folder".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperContentRemoveFromFolder` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_content_remove_from_folder".
///
- (BOOL)isPaperContentRemoveFromFolder;

///
/// Retrieves whether the union's current tag state has value
/// "paper_content_remove_member".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperContentRemoveMember` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_content_remove_member".
///
- (BOOL)isPaperContentRemoveMember;

///
/// Retrieves whether the union's current tag state has value
/// "paper_content_rename".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperContentRename` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_content_rename".
///
- (BOOL)isPaperContentRename;

///
/// Retrieves whether the union's current tag state has value
/// "paper_content_restore".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperContentRestore` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_content_restore".
///
- (BOOL)isPaperContentRestore;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_add_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocAddComment` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_add_comment".
///
- (BOOL)isPaperDocAddComment;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_change_member_role".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocChangeMemberRole` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_change_member_role".
///
- (BOOL)isPaperDocChangeMemberRole;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_change_sharing_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocChangeSharingPolicy` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_change_sharing_policy".
///
- (BOOL)isPaperDocChangeSharingPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_change_subscription".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocChangeSubscription` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_change_subscription".
///
- (BOOL)isPaperDocChangeSubscription;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_deleted".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocDeleted` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "paper_doc_deleted".
///
- (BOOL)isPaperDocDeleted;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_delete_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocDeleteComment` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_delete_comment".
///
- (BOOL)isPaperDocDeleteComment;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_download".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocDownload` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_download".
///
- (BOOL)isPaperDocDownload;

///
/// Retrieves whether the union's current tag state has value "paper_doc_edit".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocEdit` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "paper_doc_edit".
///
- (BOOL)isPaperDocEdit;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_edit_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocEditComment` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_edit_comment".
///
- (BOOL)isPaperDocEditComment;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_followed".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocFollowed` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_followed".
///
- (BOOL)isPaperDocFollowed;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_mention".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocMention` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "paper_doc_mention".
///
- (BOOL)isPaperDocMention;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_request_access".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocRequestAccess` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_request_access".
///
- (BOOL)isPaperDocRequestAccess;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_resolve_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocResolveComment` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_resolve_comment".
///
- (BOOL)isPaperDocResolveComment;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_revert".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocRevert` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "paper_doc_revert".
///
- (BOOL)isPaperDocRevert;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_slack_share".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocSlackShare` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_slack_share".
///
- (BOOL)isPaperDocSlackShare;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_team_invite".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocTeamInvite` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_team_invite".
///
- (BOOL)isPaperDocTeamInvite;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_trashed".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocTrashed` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "paper_doc_trashed".
///
- (BOOL)isPaperDocTrashed;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_unresolve_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocUnresolveComment` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_unresolve_comment".
///
- (BOOL)isPaperDocUnresolveComment;

///
/// Retrieves whether the union's current tag state has value
/// "paper_doc_untrashed".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocUntrashed` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_doc_untrashed".
///
- (BOOL)isPaperDocUntrashed;

///
/// Retrieves whether the union's current tag state has value "paper_doc_view".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperDocView` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "paper_doc_view".
///
- (BOOL)isPaperDocView;

///
/// Retrieves whether the union's current tag state has value
/// "paper_external_view_allow".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperExternalViewAllow` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_external_view_allow".
///
- (BOOL)isPaperExternalViewAllow;

///
/// Retrieves whether the union's current tag state has value
/// "paper_external_view_default_team".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperExternalViewDefaultTeam` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_external_view_default_team".
///
- (BOOL)isPaperExternalViewDefaultTeam;

///
/// Retrieves whether the union's current tag state has value
/// "paper_external_view_forbid".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperExternalViewForbid` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_external_view_forbid".
///
- (BOOL)isPaperExternalViewForbid;

///
/// Retrieves whether the union's current tag state has value
/// "paper_folder_change_subscription".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperFolderChangeSubscription` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_folder_change_subscription".
///
- (BOOL)isPaperFolderChangeSubscription;

///
/// Retrieves whether the union's current tag state has value
/// "paper_folder_deleted".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperFolderDeleted` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_folder_deleted".
///
- (BOOL)isPaperFolderDeleted;

///
/// Retrieves whether the union's current tag state has value
/// "paper_folder_followed".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperFolderFollowed` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_folder_followed".
///
- (BOOL)isPaperFolderFollowed;

///
/// Retrieves whether the union's current tag state has value
/// "paper_folder_team_invite".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperFolderTeamInvite` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_folder_team_invite".
///
- (BOOL)isPaperFolderTeamInvite;

///
/// Retrieves whether the union's current tag state has value "password_change".
///
/// @note Call this method and ensure it returns true before accessing the
/// `passwordChange` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "password_change".
///
- (BOOL)isPasswordChange;

///
/// Retrieves whether the union's current tag state has value "password_reset".
///
/// @note Call this method and ensure it returns true before accessing the
/// `passwordReset` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "password_reset".
///
- (BOOL)isPasswordReset;

///
/// Retrieves whether the union's current tag state has value
/// "password_reset_all".
///
/// @note Call this method and ensure it returns true before accessing the
/// `passwordResetAll` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "password_reset_all".
///
- (BOOL)isPasswordResetAll;

///
/// Retrieves whether the union's current tag state has value
/// "emm_create_exceptions_report".
///
/// @note Call this method and ensure it returns true before accessing the
/// `emmCreateExceptionsReport` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "emm_create_exceptions_report".
///
- (BOOL)isEmmCreateExceptionsReport;

///
/// Retrieves whether the union's current tag state has value
/// "emm_create_usage_report".
///
/// @note Call this method and ensure it returns true before accessing the
/// `emmCreateUsageReport` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "emm_create_usage_report".
///
- (BOOL)isEmmCreateUsageReport;

///
/// Retrieves whether the union's current tag state has value
/// "export_members_report".
///
/// @note Call this method and ensure it returns true before accessing the
/// `exportMembersReport` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "export_members_report".
///
- (BOOL)isExportMembersReport;

///
/// Retrieves whether the union's current tag state has value
/// "paper_admin_export_start".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperAdminExportStart` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_admin_export_start".
///
- (BOOL)isPaperAdminExportStart;

///
/// Retrieves whether the union's current tag state has value
/// "smart_sync_create_admin_privilege_report".
///
/// @note Call this method and ensure it returns true before accessing the
/// `smartSyncCreateAdminPrivilegeReport` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "smart_sync_create_admin_privilege_report".
///
- (BOOL)isSmartSyncCreateAdminPrivilegeReport;

///
/// Retrieves whether the union's current tag state has value
/// "team_activity_create_report".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamActivityCreateReport` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "team_activity_create_report".
///
- (BOOL)isTeamActivityCreateReport;

///
/// Retrieves whether the union's current tag state has value
/// "collection_share".
///
/// @note Call this method and ensure it returns true before accessing the
/// `collectionShare` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "collection_share".
///
- (BOOL)isCollectionShare;

///
/// Retrieves whether the union's current tag state has value
/// "note_acl_invite_only".
///
/// @note Call this method and ensure it returns true before accessing the
/// `noteAclInviteOnly` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "note_acl_invite_only".
///
- (BOOL)isNoteAclInviteOnly;

///
/// Retrieves whether the union's current tag state has value "note_acl_link".
///
/// @note Call this method and ensure it returns true before accessing the
/// `noteAclLink` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "note_acl_link".
///
- (BOOL)isNoteAclLink;

///
/// Retrieves whether the union's current tag state has value
/// "note_acl_team_link".
///
/// @note Call this method and ensure it returns true before accessing the
/// `noteAclTeamLink` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "note_acl_team_link".
///
- (BOOL)isNoteAclTeamLink;

///
/// Retrieves whether the union's current tag state has value "note_shared".
///
/// @note Call this method and ensure it returns true before accessing the
/// `noteShared` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "note_shared".
///
- (BOOL)isNoteShared;

///
/// Retrieves whether the union's current tag state has value
/// "note_share_receive".
///
/// @note Call this method and ensure it returns true before accessing the
/// `noteShareReceive` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "note_share_receive".
///
- (BOOL)isNoteShareReceive;

///
/// Retrieves whether the union's current tag state has value
/// "open_note_shared".
///
/// @note Call this method and ensure it returns true before accessing the
/// `openNoteShared` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "open_note_shared".
///
- (BOOL)isOpenNoteShared;

///
/// Retrieves whether the union's current tag state has value "sf_add_group".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfAddGroup` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sf_add_group".
///
- (BOOL)isSfAddGroup;

///
/// Retrieves whether the union's current tag state has value
/// "sf_allow_non_members_to_view_shared_links".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfAllowNonMembersToViewSharedLinks` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "sf_allow_non_members_to_view_shared_links".
///
- (BOOL)isSfAllowNonMembersToViewSharedLinks;

///
/// Retrieves whether the union's current tag state has value
/// "sf_external_invite_warn".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfExternalInviteWarn` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "sf_external_invite_warn".
///
- (BOOL)isSfExternalInviteWarn;

///
/// Retrieves whether the union's current tag state has value "sf_fb_invite".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfFbInvite` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sf_fb_invite".
///
- (BOOL)isSfFbInvite;

///
/// Retrieves whether the union's current tag state has value
/// "sf_fb_invite_change_role".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfFbInviteChangeRole` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "sf_fb_invite_change_role".
///
- (BOOL)isSfFbInviteChangeRole;

///
/// Retrieves whether the union's current tag state has value "sf_fb_uninvite".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfFbUninvite` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sf_fb_uninvite".
///
- (BOOL)isSfFbUninvite;

///
/// Retrieves whether the union's current tag state has value "sf_invite_group".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfInviteGroup` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sf_invite_group".
///
- (BOOL)isSfInviteGroup;

///
/// Retrieves whether the union's current tag state has value
/// "sf_team_grant_access".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfTeamGrantAccess` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "sf_team_grant_access".
///
- (BOOL)isSfTeamGrantAccess;

///
/// Retrieves whether the union's current tag state has value "sf_team_invite".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfTeamInvite` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sf_team_invite".
///
- (BOOL)isSfTeamInvite;

///
/// Retrieves whether the union's current tag state has value
/// "sf_team_invite_change_role".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfTeamInviteChangeRole` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "sf_team_invite_change_role".
///
- (BOOL)isSfTeamInviteChangeRole;

///
/// Retrieves whether the union's current tag state has value "sf_team_join".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfTeamJoin` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sf_team_join".
///
- (BOOL)isSfTeamJoin;

///
/// Retrieves whether the union's current tag state has value
/// "sf_team_join_from_oob_link".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfTeamJoinFromOobLink` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "sf_team_join_from_oob_link".
///
- (BOOL)isSfTeamJoinFromOobLink;

///
/// Retrieves whether the union's current tag state has value
/// "sf_team_uninvite".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sfTeamUninvite` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sf_team_uninvite".
///
- (BOOL)isSfTeamUninvite;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_add_invitees".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentAddInvitees` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_add_invitees".
///
- (BOOL)isSharedContentAddInvitees;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_add_link_expiry".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentAddLinkExpiry` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_add_link_expiry".
///
- (BOOL)isSharedContentAddLinkExpiry;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_add_link_password".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentAddLinkPassword` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_add_link_password".
///
- (BOOL)isSharedContentAddLinkPassword;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_add_member".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentAddMember` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_add_member".
///
- (BOOL)isSharedContentAddMember;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_change_downloads_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentChangeDownloadsPolicy` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_change_downloads_policy".
///
- (BOOL)isSharedContentChangeDownloadsPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_change_invitee_role".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentChangeInviteeRole` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_change_invitee_role".
///
- (BOOL)isSharedContentChangeInviteeRole;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_change_link_audience".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentChangeLinkAudience` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_change_link_audience".
///
- (BOOL)isSharedContentChangeLinkAudience;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_change_link_expiry".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentChangeLinkExpiry` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_change_link_expiry".
///
- (BOOL)isSharedContentChangeLinkExpiry;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_change_link_password".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentChangeLinkPassword` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_change_link_password".
///
- (BOOL)isSharedContentChangeLinkPassword;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_change_member_role".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentChangeMemberRole` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_change_member_role".
///
- (BOOL)isSharedContentChangeMemberRole;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_change_viewer_info_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentChangeViewerInfoPolicy` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_change_viewer_info_policy".
///
- (BOOL)isSharedContentChangeViewerInfoPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_claim_invitation".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentClaimInvitation` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_claim_invitation".
///
- (BOOL)isSharedContentClaimInvitation;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_copy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentCopy` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_copy".
///
- (BOOL)isSharedContentCopy;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_download".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentDownload` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_download".
///
- (BOOL)isSharedContentDownload;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_relinquish_membership".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentRelinquishMembership` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_relinquish_membership".
///
- (BOOL)isSharedContentRelinquishMembership;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_remove_invitees".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentRemoveInvitees` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_remove_invitees".
///
- (BOOL)isSharedContentRemoveInvitees;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_remove_link_expiry".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentRemoveLinkExpiry` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_remove_link_expiry".
///
- (BOOL)isSharedContentRemoveLinkExpiry;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_remove_link_password".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentRemoveLinkPassword` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_remove_link_password".
///
- (BOOL)isSharedContentRemoveLinkPassword;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_remove_member".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentRemoveMember` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_remove_member".
///
- (BOOL)isSharedContentRemoveMember;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_request_access".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentRequestAccess` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_request_access".
///
- (BOOL)isSharedContentRequestAccess;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_unshare".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentUnshare` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_unshare".
///
- (BOOL)isSharedContentUnshare;

///
/// Retrieves whether the union's current tag state has value
/// "shared_content_view".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedContentView` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_content_view".
///
- (BOOL)isSharedContentView;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_change_link_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolderChangeLinkPolicy` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_folder_change_link_policy".
///
- (BOOL)isSharedFolderChangeLinkPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_change_members_inheritance_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolderChangeMembersInheritancePolicy` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_folder_change_members_inheritance_policy".
///
- (BOOL)isSharedFolderChangeMembersInheritancePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_change_members_management_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolderChangeMembersManagementPolicy` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_folder_change_members_management_policy".
///
- (BOOL)isSharedFolderChangeMembersManagementPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_change_members_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolderChangeMembersPolicy` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_folder_change_members_policy".
///
- (BOOL)isSharedFolderChangeMembersPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_create".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolderCreate` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_folder_create".
///
- (BOOL)isSharedFolderCreate;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_decline_invitation".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolderDeclineInvitation` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_folder_decline_invitation".
///
- (BOOL)isSharedFolderDeclineInvitation;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_mount".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolderMount` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_folder_mount".
///
- (BOOL)isSharedFolderMount;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_nest".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolderNest` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_folder_nest".
///
- (BOOL)isSharedFolderNest;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_transfer_ownership".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolderTransferOwnership` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_folder_transfer_ownership".
///
- (BOOL)isSharedFolderTransferOwnership;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_unmount".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolderUnmount` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_folder_unmount".
///
- (BOOL)isSharedFolderUnmount;

///
/// Retrieves whether the union's current tag state has value
/// "shared_link_add_expiry".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedLinkAddExpiry` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_link_add_expiry".
///
- (BOOL)isSharedLinkAddExpiry;

///
/// Retrieves whether the union's current tag state has value
/// "shared_link_change_expiry".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedLinkChangeExpiry` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_link_change_expiry".
///
- (BOOL)isSharedLinkChangeExpiry;

///
/// Retrieves whether the union's current tag state has value
/// "shared_link_change_visibility".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedLinkChangeVisibility` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_link_change_visibility".
///
- (BOOL)isSharedLinkChangeVisibility;

///
/// Retrieves whether the union's current tag state has value
/// "shared_link_copy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedLinkCopy` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "shared_link_copy".
///
- (BOOL)isSharedLinkCopy;

///
/// Retrieves whether the union's current tag state has value
/// "shared_link_create".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedLinkCreate` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_link_create".
///
- (BOOL)isSharedLinkCreate;

///
/// Retrieves whether the union's current tag state has value
/// "shared_link_disable".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedLinkDisable` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_link_disable".
///
- (BOOL)isSharedLinkDisable;

///
/// Retrieves whether the union's current tag state has value
/// "shared_link_download".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedLinkDownload` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_link_download".
///
- (BOOL)isSharedLinkDownload;

///
/// Retrieves whether the union's current tag state has value
/// "shared_link_remove_expiry".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedLinkRemoveExpiry` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_link_remove_expiry".
///
- (BOOL)isSharedLinkRemoveExpiry;

///
/// Retrieves whether the union's current tag state has value
/// "shared_link_share".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedLinkShare` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "shared_link_share".
///
- (BOOL)isSharedLinkShare;

///
/// Retrieves whether the union's current tag state has value
/// "shared_link_view".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedLinkView` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "shared_link_view".
///
- (BOOL)isSharedLinkView;

///
/// Retrieves whether the union's current tag state has value
/// "shared_note_opened".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedNoteOpened` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shared_note_opened".
///
- (BOOL)isSharedNoteOpened;

///
/// Retrieves whether the union's current tag state has value
/// "shmodel_group_share".
///
/// @note Call this method and ensure it returns true before accessing the
/// `shmodelGroupShare` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "shmodel_group_share".
///
- (BOOL)isShmodelGroupShare;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_access_granted".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseAccessGranted` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_access_granted".
///
- (BOOL)isShowcaseAccessGranted;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_add_member".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseAddMember` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_add_member".
///
- (BOOL)isShowcaseAddMember;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_archived".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseArchived` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "showcase_archived".
///
- (BOOL)isShowcaseArchived;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_created".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseCreated` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "showcase_created".
///
- (BOOL)isShowcaseCreated;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_delete_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseDeleteComment` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_delete_comment".
///
- (BOOL)isShowcaseDeleteComment;

///
/// Retrieves whether the union's current tag state has value "showcase_edited".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseEdited` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "showcase_edited".
///
- (BOOL)isShowcaseEdited;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_edit_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseEditComment` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_edit_comment".
///
- (BOOL)isShowcaseEditComment;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_file_added".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseFileAdded` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_file_added".
///
- (BOOL)isShowcaseFileAdded;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_file_download".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseFileDownload` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_file_download".
///
- (BOOL)isShowcaseFileDownload;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_file_removed".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseFileRemoved` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_file_removed".
///
- (BOOL)isShowcaseFileRemoved;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_file_view".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseFileView` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_file_view".
///
- (BOOL)isShowcaseFileView;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_permanently_deleted".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcasePermanentlyDeleted` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_permanently_deleted".
///
- (BOOL)isShowcasePermanentlyDeleted;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_post_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcasePostComment` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_post_comment".
///
- (BOOL)isShowcasePostComment;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_remove_member".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseRemoveMember` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_remove_member".
///
- (BOOL)isShowcaseRemoveMember;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_renamed".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseRenamed` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "showcase_renamed".
///
- (BOOL)isShowcaseRenamed;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_request_access".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseRequestAccess` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_request_access".
///
- (BOOL)isShowcaseRequestAccess;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_resolve_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseResolveComment` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_resolve_comment".
///
- (BOOL)isShowcaseResolveComment;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_restored".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseRestored` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "showcase_restored".
///
- (BOOL)isShowcaseRestored;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_trashed".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseTrashed` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "showcase_trashed".
///
- (BOOL)isShowcaseTrashed;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_trashed_deprecated".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseTrashedDeprecated` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_trashed_deprecated".
///
- (BOOL)isShowcaseTrashedDeprecated;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_unresolve_comment".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseUnresolveComment` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_unresolve_comment".
///
- (BOOL)isShowcaseUnresolveComment;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_untrashed".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseUntrashed` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_untrashed".
///
- (BOOL)isShowcaseUntrashed;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_untrashed_deprecated".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseUntrashedDeprecated` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_untrashed_deprecated".
///
- (BOOL)isShowcaseUntrashedDeprecated;

///
/// Retrieves whether the union's current tag state has value "showcase_view".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseView` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "showcase_view".
///
- (BOOL)isShowcaseView;

///
/// Retrieves whether the union's current tag state has value "sso_add_cert".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoAddCert` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sso_add_cert".
///
- (BOOL)isSsoAddCert;

///
/// Retrieves whether the union's current tag state has value
/// "sso_add_login_url".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoAddLoginUrl` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sso_add_login_url".
///
- (BOOL)isSsoAddLoginUrl;

///
/// Retrieves whether the union's current tag state has value
/// "sso_add_logout_url".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoAddLogoutUrl` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "sso_add_logout_url".
///
- (BOOL)isSsoAddLogoutUrl;

///
/// Retrieves whether the union's current tag state has value "sso_change_cert".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoChangeCert` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sso_change_cert".
///
- (BOOL)isSsoChangeCert;

///
/// Retrieves whether the union's current tag state has value
/// "sso_change_login_url".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoChangeLoginUrl` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "sso_change_login_url".
///
- (BOOL)isSsoChangeLoginUrl;

///
/// Retrieves whether the union's current tag state has value
/// "sso_change_logout_url".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoChangeLogoutUrl` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "sso_change_logout_url".
///
- (BOOL)isSsoChangeLogoutUrl;

///
/// Retrieves whether the union's current tag state has value
/// "sso_change_saml_identity_mode".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoChangeSamlIdentityMode` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "sso_change_saml_identity_mode".
///
- (BOOL)isSsoChangeSamlIdentityMode;

///
/// Retrieves whether the union's current tag state has value "sso_remove_cert".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoRemoveCert` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sso_remove_cert".
///
- (BOOL)isSsoRemoveCert;

///
/// Retrieves whether the union's current tag state has value
/// "sso_remove_login_url".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoRemoveLoginUrl` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "sso_remove_login_url".
///
- (BOOL)isSsoRemoveLoginUrl;

///
/// Retrieves whether the union's current tag state has value
/// "sso_remove_logout_url".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoRemoveLogoutUrl` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "sso_remove_logout_url".
///
- (BOOL)isSsoRemoveLogoutUrl;

///
/// Retrieves whether the union's current tag state has value
/// "team_folder_change_status".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamFolderChangeStatus` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "team_folder_change_status".
///
- (BOOL)isTeamFolderChangeStatus;

///
/// Retrieves whether the union's current tag state has value
/// "team_folder_create".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamFolderCreate` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "team_folder_create".
///
- (BOOL)isTeamFolderCreate;

///
/// Retrieves whether the union's current tag state has value
/// "team_folder_downgrade".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamFolderDowngrade` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "team_folder_downgrade".
///
- (BOOL)isTeamFolderDowngrade;

///
/// Retrieves whether the union's current tag state has value
/// "team_folder_permanently_delete".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamFolderPermanentlyDelete` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "team_folder_permanently_delete".
///
- (BOOL)isTeamFolderPermanentlyDelete;

///
/// Retrieves whether the union's current tag state has value
/// "team_folder_rename".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamFolderRename` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "team_folder_rename".
///
- (BOOL)isTeamFolderRename;

///
/// Retrieves whether the union's current tag state has value
/// "team_selective_sync_settings_changed".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamSelectiveSyncSettingsChanged` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "team_selective_sync_settings_changed".
///
- (BOOL)isTeamSelectiveSyncSettingsChanged;

///
/// Retrieves whether the union's current tag state has value
/// "account_capture_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `accountCaptureChangePolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "account_capture_change_policy".
///
- (BOOL)isAccountCaptureChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "allow_download_disabled".
///
/// @note Call this method and ensure it returns true before accessing the
/// `allowDownloadDisabled` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "allow_download_disabled".
///
- (BOOL)isAllowDownloadDisabled;

///
/// Retrieves whether the union's current tag state has value
/// "allow_download_enabled".
///
/// @note Call this method and ensure it returns true before accessing the
/// `allowDownloadEnabled` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "allow_download_enabled".
///
- (BOOL)isAllowDownloadEnabled;

///
/// Retrieves whether the union's current tag state has value
/// "data_placement_restriction_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `dataPlacementRestrictionChangePolicy` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "data_placement_restriction_change_policy".
///
- (BOOL)isDataPlacementRestrictionChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "data_placement_restriction_satisfy_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `dataPlacementRestrictionSatisfyPolicy` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "data_placement_restriction_satisfy_policy".
///
- (BOOL)isDataPlacementRestrictionSatisfyPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "device_approvals_change_desktop_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceApprovalsChangeDesktopPolicy` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "device_approvals_change_desktop_policy".
///
- (BOOL)isDeviceApprovalsChangeDesktopPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "device_approvals_change_mobile_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceApprovalsChangeMobilePolicy` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "device_approvals_change_mobile_policy".
///
- (BOOL)isDeviceApprovalsChangeMobilePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "device_approvals_change_overage_action".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceApprovalsChangeOverageAction` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "device_approvals_change_overage_action".
///
- (BOOL)isDeviceApprovalsChangeOverageAction;

///
/// Retrieves whether the union's current tag state has value
/// "device_approvals_change_unlink_action".
///
/// @note Call this method and ensure it returns true before accessing the
/// `deviceApprovalsChangeUnlinkAction` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "device_approvals_change_unlink_action".
///
- (BOOL)isDeviceApprovalsChangeUnlinkAction;

///
/// Retrieves whether the union's current tag state has value
/// "directory_restrictions_add_members".
///
/// @note Call this method and ensure it returns true before accessing the
/// `directoryRestrictionsAddMembers` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "directory_restrictions_add_members".
///
- (BOOL)isDirectoryRestrictionsAddMembers;

///
/// Retrieves whether the union's current tag state has value
/// "directory_restrictions_remove_members".
///
/// @note Call this method and ensure it returns true before accessing the
/// `directoryRestrictionsRemoveMembers` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "directory_restrictions_remove_members".
///
- (BOOL)isDirectoryRestrictionsRemoveMembers;

///
/// Retrieves whether the union's current tag state has value
/// "emm_add_exception".
///
/// @note Call this method and ensure it returns true before accessing the
/// `emmAddException` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "emm_add_exception".
///
- (BOOL)isEmmAddException;

///
/// Retrieves whether the union's current tag state has value
/// "emm_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `emmChangePolicy` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "emm_change_policy".
///
- (BOOL)isEmmChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "emm_remove_exception".
///
/// @note Call this method and ensure it returns true before accessing the
/// `emmRemoveException` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "emm_remove_exception".
///
- (BOOL)isEmmRemoveException;

///
/// Retrieves whether the union's current tag state has value
/// "extended_version_history_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `extendedVersionHistoryChangePolicy` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "extended_version_history_change_policy".
///
- (BOOL)isExtendedVersionHistoryChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "file_comments_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileCommentsChangePolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "file_comments_change_policy".
///
- (BOOL)isFileCommentsChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "file_requests_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRequestsChangePolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "file_requests_change_policy".
///
- (BOOL)isFileRequestsChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "file_requests_emails_enabled".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRequestsEmailsEnabled` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "file_requests_emails_enabled".
///
- (BOOL)isFileRequestsEmailsEnabled;

///
/// Retrieves whether the union's current tag state has value
/// "file_requests_emails_restricted_to_team_only".
///
/// @note Call this method and ensure it returns true before accessing the
/// `fileRequestsEmailsRestrictedToTeamOnly` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "file_requests_emails_restricted_to_team_only".
///
- (BOOL)isFileRequestsEmailsRestrictedToTeamOnly;

///
/// Retrieves whether the union's current tag state has value
/// "google_sso_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `googleSsoChangePolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "google_sso_change_policy".
///
- (BOOL)isGoogleSsoChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "group_user_management_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `groupUserManagementChangePolicy` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "group_user_management_change_policy".
///
- (BOOL)isGroupUserManagementChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "member_requests_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberRequestsChangePolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "member_requests_change_policy".
///
- (BOOL)isMemberRequestsChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "member_space_limits_add_exception".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberSpaceLimitsAddException` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_space_limits_add_exception".
///
- (BOOL)isMemberSpaceLimitsAddException;

///
/// Retrieves whether the union's current tag state has value
/// "member_space_limits_change_caps_type_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberSpaceLimitsChangeCapsTypePolicy` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_space_limits_change_caps_type_policy".
///
- (BOOL)isMemberSpaceLimitsChangeCapsTypePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "member_space_limits_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberSpaceLimitsChangePolicy` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_space_limits_change_policy".
///
- (BOOL)isMemberSpaceLimitsChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "member_space_limits_remove_exception".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberSpaceLimitsRemoveException` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_space_limits_remove_exception".
///
- (BOOL)isMemberSpaceLimitsRemoveException;

///
/// Retrieves whether the union's current tag state has value
/// "member_suggestions_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `memberSuggestionsChangePolicy` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "member_suggestions_change_policy".
///
- (BOOL)isMemberSuggestionsChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "microsoft_office_addin_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `microsoftOfficeAddinChangePolicy` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "microsoft_office_addin_change_policy".
///
- (BOOL)isMicrosoftOfficeAddinChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "network_control_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `networkControlChangePolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "network_control_change_policy".
///
- (BOOL)isNetworkControlChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "paper_change_deployment_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperChangeDeploymentPolicy` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_change_deployment_policy".
///
- (BOOL)isPaperChangeDeploymentPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "paper_change_member_link_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperChangeMemberLinkPolicy` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_change_member_link_policy".
///
- (BOOL)isPaperChangeMemberLinkPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "paper_change_member_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperChangeMemberPolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_change_member_policy".
///
- (BOOL)isPaperChangeMemberPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "paper_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperChangePolicy` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_change_policy".
///
- (BOOL)isPaperChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "paper_enabled_users_group_addition".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperEnabledUsersGroupAddition` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_enabled_users_group_addition".
///
- (BOOL)isPaperEnabledUsersGroupAddition;

///
/// Retrieves whether the union's current tag state has value
/// "paper_enabled_users_group_removal".
///
/// @note Call this method and ensure it returns true before accessing the
/// `paperEnabledUsersGroupRemoval` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "paper_enabled_users_group_removal".
///
- (BOOL)isPaperEnabledUsersGroupRemoval;

///
/// Retrieves whether the union's current tag state has value
/// "permanent_delete_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `permanentDeleteChangePolicy` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "permanent_delete_change_policy".
///
- (BOOL)isPermanentDeleteChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "sharing_change_folder_join_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharingChangeFolderJoinPolicy` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "sharing_change_folder_join_policy".
///
- (BOOL)isSharingChangeFolderJoinPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "sharing_change_link_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharingChangeLinkPolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "sharing_change_link_policy".
///
- (BOOL)isSharingChangeLinkPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "sharing_change_member_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharingChangeMemberPolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "sharing_change_member_policy".
///
- (BOOL)isSharingChangeMemberPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_change_download_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseChangeDownloadPolicy` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_change_download_policy".
///
- (BOOL)isShowcaseChangeDownloadPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_change_enabled_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseChangeEnabledPolicy` property, otherwise a runtime exception will
/// be thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_change_enabled_policy".
///
- (BOOL)isShowcaseChangeEnabledPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "showcase_change_external_sharing_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `showcaseChangeExternalSharingPolicy` property, otherwise a runtime
/// exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "showcase_change_external_sharing_policy".
///
- (BOOL)isShowcaseChangeExternalSharingPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "smart_sync_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `smartSyncChangePolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "smart_sync_change_policy".
///
- (BOOL)isSmartSyncChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "smart_sync_not_opt_out".
///
/// @note Call this method and ensure it returns true before accessing the
/// `smartSyncNotOptOut` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "smart_sync_not_opt_out".
///
- (BOOL)isSmartSyncNotOptOut;

///
/// Retrieves whether the union's current tag state has value
/// "smart_sync_opt_out".
///
/// @note Call this method and ensure it returns true before accessing the
/// `smartSyncOptOut` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "smart_sync_opt_out".
///
- (BOOL)isSmartSyncOptOut;

///
/// Retrieves whether the union's current tag state has value
/// "sso_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `ssoChangePolicy` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "sso_change_policy".
///
- (BOOL)isSsoChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "tfa_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `tfaChangePolicy` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "tfa_change_policy".
///
- (BOOL)isTfaChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "two_account_change_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `twoAccountChangePolicy` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "two_account_change_policy".
///
- (BOOL)isTwoAccountChangePolicy;

///
/// Retrieves whether the union's current tag state has value
/// "web_sessions_change_fixed_length_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `webSessionsChangeFixedLengthPolicy` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "web_sessions_change_fixed_length_policy".
///
- (BOOL)isWebSessionsChangeFixedLengthPolicy;

///
/// Retrieves whether the union's current tag state has value
/// "web_sessions_change_idle_length_policy".
///
/// @note Call this method and ensure it returns true before accessing the
/// `webSessionsChangeIdleLengthPolicy` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "web_sessions_change_idle_length_policy".
///
- (BOOL)isWebSessionsChangeIdleLengthPolicy;

///
/// Retrieves whether the union's current tag state has value "team_merge_from".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamMergeFrom` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "team_merge_from".
///
- (BOOL)isTeamMergeFrom;

///
/// Retrieves whether the union's current tag state has value "team_merge_to".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamMergeTo` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "team_merge_to".
///
- (BOOL)isTeamMergeTo;

///
/// Retrieves whether the union's current tag state has value
/// "team_profile_add_logo".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamProfileAddLogo` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "team_profile_add_logo".
///
- (BOOL)isTeamProfileAddLogo;

///
/// Retrieves whether the union's current tag state has value
/// "team_profile_change_default_language".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamProfileChangeDefaultLanguage` property, otherwise a runtime exception
/// will be thrown.
///
/// @return Whether the union's current tag state has value
/// "team_profile_change_default_language".
///
- (BOOL)isTeamProfileChangeDefaultLanguage;

///
/// Retrieves whether the union's current tag state has value
/// "team_profile_change_logo".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamProfileChangeLogo` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "team_profile_change_logo".
///
- (BOOL)isTeamProfileChangeLogo;

///
/// Retrieves whether the union's current tag state has value
/// "team_profile_change_name".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamProfileChangeName` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "team_profile_change_name".
///
- (BOOL)isTeamProfileChangeName;

///
/// Retrieves whether the union's current tag state has value
/// "team_profile_remove_logo".
///
/// @note Call this method and ensure it returns true before accessing the
/// `teamProfileRemoveLogo` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "team_profile_remove_logo".
///
- (BOOL)isTeamProfileRemoveLogo;

///
/// Retrieves whether the union's current tag state has value
/// "tfa_add_backup_phone".
///
/// @note Call this method and ensure it returns true before accessing the
/// `tfaAddBackupPhone` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "tfa_add_backup_phone".
///
- (BOOL)isTfaAddBackupPhone;

///
/// Retrieves whether the union's current tag state has value
/// "tfa_add_security_key".
///
/// @note Call this method and ensure it returns true before accessing the
/// `tfaAddSecurityKey` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value
/// "tfa_add_security_key".
///
- (BOOL)isTfaAddSecurityKey;

///
/// Retrieves whether the union's current tag state has value
/// "tfa_change_backup_phone".
///
/// @note Call this method and ensure it returns true before accessing the
/// `tfaChangeBackupPhone` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "tfa_change_backup_phone".
///
- (BOOL)isTfaChangeBackupPhone;

///
/// Retrieves whether the union's current tag state has value
/// "tfa_change_status".
///
/// @note Call this method and ensure it returns true before accessing the
/// `tfaChangeStatus` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "tfa_change_status".
///
- (BOOL)isTfaChangeStatus;

///
/// Retrieves whether the union's current tag state has value
/// "tfa_remove_backup_phone".
///
/// @note Call this method and ensure it returns true before accessing the
/// `tfaRemoveBackupPhone` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "tfa_remove_backup_phone".
///
- (BOOL)isTfaRemoveBackupPhone;

///
/// Retrieves whether the union's current tag state has value
/// "tfa_remove_security_key".
///
/// @note Call this method and ensure it returns true before accessing the
/// `tfaRemoveSecurityKey` property, otherwise a runtime exception will be
/// thrown.
///
/// @return Whether the union's current tag state has value
/// "tfa_remove_security_key".
///
- (BOOL)isTfaRemoveSecurityKey;

///
/// Retrieves whether the union's current tag state has value "tfa_reset".
///
/// @note Call this method and ensure it returns true before accessing the
/// `tfaReset` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "tfa_reset".
///
- (BOOL)isTfaReset;

///
/// Retrieves whether the union's current tag state has value "other".
///
/// @return Whether the union's current tag state has value "other".
///
- (BOOL)isOther;

///
/// Retrieves string value of union's current tag state.
///
/// @return A human-readable string representing the union's current tag state.
///
- (NSString *)tagName;

@end

#pragma mark - Serializer Object

///
/// The serialization class for the `DBTEAMLOGEventType` union.
///
@interface DBTEAMLOGEventTypeSerializer : NSObject

///
/// Serializes `DBTEAMLOGEventType` instances.
///
/// @param instance An instance of the `DBTEAMLOGEventType` API object.
///
/// @return A json-compatible dictionary representation of the
/// `DBTEAMLOGEventType` API object.
///
+ (nullable NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEventType *)instance;

///
/// Deserializes `DBTEAMLOGEventType` instances.
///
/// @param dict A json-compatible dictionary representation of the
/// `DBTEAMLOGEventType` API object.
///
/// @return An instantiation of the `DBTEAMLOGEventType` object.
///
+ (DBTEAMLOGEventType *)deserialize:(NSDictionary<NSString *, id> *)dict;

@end

NS_ASSUME_NONNULL_END
