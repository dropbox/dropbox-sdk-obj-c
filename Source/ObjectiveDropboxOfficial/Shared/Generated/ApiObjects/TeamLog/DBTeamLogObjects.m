///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `TeamLog` namespace.

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccessMethodLogInfo.h"
#import "DBTEAMLOGApiSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"
#import "DBTEAMLOGWebSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccessMethodLogInfo

@synthesize endUser = _endUser;
@synthesize signInAs = _signInAs;
@synthesize contentManager = _contentManager;
@synthesize adminConsole = _adminConsole;
@synthesize api = _api;

#pragma mark - Constructors

- (instancetype)initWithEndUser:(DBTEAMLOGSessionLogInfo *)endUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoEndUser;
    _endUser = endUser;
  }
  return self;
}

- (instancetype)initWithSignInAs:(DBTEAMLOGWebSessionLogInfo *)signInAs {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoSignInAs;
    _signInAs = signInAs;
  }
  return self;
}

- (instancetype)initWithContentManager:(DBTEAMLOGWebSessionLogInfo *)contentManager {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoContentManager;
    _contentManager = contentManager;
  }
  return self;
}

- (instancetype)initWithAdminConsole:(DBTEAMLOGWebSessionLogInfo *)adminConsole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoAdminConsole;
    _adminConsole = adminConsole;
  }
  return self;
}

- (instancetype)initWithApi:(DBTEAMLOGApiSessionLogInfo *)api {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoApi;
    _api = api;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGSessionLogInfo *)endUser {
  if (![self isEndUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoEndUser, but was %@.", [self tagName]];
  }
  return _endUser;
}

- (DBTEAMLOGWebSessionLogInfo *)signInAs {
  if (![self isSignInAs]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoSignInAs, but was %@.", [self tagName]];
  }
  return _signInAs;
}

- (DBTEAMLOGWebSessionLogInfo *)contentManager {
  if (![self isContentManager]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoContentManager, but was %@.", [self tagName]];
  }
  return _contentManager;
}

- (DBTEAMLOGWebSessionLogInfo *)adminConsole {
  if (![self isAdminConsole]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoAdminConsole, but was %@.", [self tagName]];
  }
  return _adminConsole;
}

- (DBTEAMLOGApiSessionLogInfo *)api {
  if (![self isApi]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoApi, but was %@.", [self tagName]];
  }
  return _api;
}

#pragma mark - Tag state methods

- (BOOL)isEndUser {
  return _tag == DBTEAMLOGAccessMethodLogInfoEndUser;
}

- (BOOL)isSignInAs {
  return _tag == DBTEAMLOGAccessMethodLogInfoSignInAs;
}

- (BOOL)isContentManager {
  return _tag == DBTEAMLOGAccessMethodLogInfoContentManager;
}

- (BOOL)isAdminConsole {
  return _tag == DBTEAMLOGAccessMethodLogInfoAdminConsole;
}

- (BOOL)isApi {
  return _tag == DBTEAMLOGAccessMethodLogInfoApi;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAccessMethodLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAccessMethodLogInfoEndUser:
    return @"DBTEAMLOGAccessMethodLogInfoEndUser";
  case DBTEAMLOGAccessMethodLogInfoSignInAs:
    return @"DBTEAMLOGAccessMethodLogInfoSignInAs";
  case DBTEAMLOGAccessMethodLogInfoContentManager:
    return @"DBTEAMLOGAccessMethodLogInfoContentManager";
  case DBTEAMLOGAccessMethodLogInfoAdminConsole:
    return @"DBTEAMLOGAccessMethodLogInfoAdminConsole";
  case DBTEAMLOGAccessMethodLogInfoApi:
    return @"DBTEAMLOGAccessMethodLogInfoApi";
  case DBTEAMLOGAccessMethodLogInfoOther:
    return @"DBTEAMLOGAccessMethodLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccessMethodLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccessMethodLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccessMethodLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAccessMethodLogInfoEndUser:
    result = prime * result + [self.endUser hash];
  case DBTEAMLOGAccessMethodLogInfoSignInAs:
    result = prime * result + [self.signInAs hash];
  case DBTEAMLOGAccessMethodLogInfoContentManager:
    result = prime * result + [self.contentManager hash];
  case DBTEAMLOGAccessMethodLogInfoAdminConsole:
    result = prime * result + [self.adminConsole hash];
  case DBTEAMLOGAccessMethodLogInfoApi:
    result = prime * result + [self.api hash];
  case DBTEAMLOGAccessMethodLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccessMethodLogInfo:other];
}

- (BOOL)isEqualToAccessMethodLogInfo:(DBTEAMLOGAccessMethodLogInfo *)anAccessMethodLogInfo {
  if (self == anAccessMethodLogInfo) {
    return YES;
  }
  if (self.tag != anAccessMethodLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAccessMethodLogInfoEndUser:
    return [self.endUser isEqual:anAccessMethodLogInfo.endUser];
  case DBTEAMLOGAccessMethodLogInfoSignInAs:
    return [self.signInAs isEqual:anAccessMethodLogInfo.signInAs];
  case DBTEAMLOGAccessMethodLogInfoContentManager:
    return [self.contentManager isEqual:anAccessMethodLogInfo.contentManager];
  case DBTEAMLOGAccessMethodLogInfoAdminConsole:
    return [self.adminConsole isEqual:anAccessMethodLogInfo.adminConsole];
  case DBTEAMLOGAccessMethodLogInfoApi:
    return [self.api isEqual:anAccessMethodLogInfo.api];
  case DBTEAMLOGAccessMethodLogInfoOther:
    return [[self tagName] isEqual:[anAccessMethodLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccessMethodLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccessMethodLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEndUser]) {
    jsonDict[@"end_user"] = [[DBTEAMLOGSessionLogInfoSerializer serialize:valueObj.endUser] mutableCopy];
    jsonDict[@".tag"] = @"end_user";
  } else if ([valueObj isSignInAs]) {
    jsonDict = [[DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.signInAs] mutableCopy];
    jsonDict[@".tag"] = @"sign_in_as";
  } else if ([valueObj isContentManager]) {
    jsonDict = [[DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.contentManager] mutableCopy];
    jsonDict[@".tag"] = @"content_manager";
  } else if ([valueObj isAdminConsole]) {
    jsonDict = [[DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.adminConsole] mutableCopy];
    jsonDict[@".tag"] = @"admin_console";
  } else if ([valueObj isApi]) {
    jsonDict = [[DBTEAMLOGApiSessionLogInfoSerializer serialize:valueObj.api] mutableCopy];
    jsonDict[@".tag"] = @"api";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccessMethodLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"end_user"]) {
    DBTEAMLOGSessionLogInfo *endUser = [DBTEAMLOGSessionLogInfoSerializer deserialize:valueDict[@"end_user"]];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithEndUser:endUser];
  } else if ([tag isEqualToString:@"sign_in_as"]) {
    DBTEAMLOGWebSessionLogInfo *signInAs = [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithSignInAs:signInAs];
  } else if ([tag isEqualToString:@"content_manager"]) {
    DBTEAMLOGWebSessionLogInfo *contentManager = [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithContentManager:contentManager];
  } else if ([tag isEqualToString:@"admin_console"]) {
    DBTEAMLOGWebSessionLogInfo *adminConsole = [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithAdminConsole:adminConsole];
  } else if ([tag isEqualToString:@"api"]) {
    DBTEAMLOGApiSessionLogInfo *api = [DBTEAMLOGApiSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithApi:api];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureAvailability.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureAvailability

#pragma mark - Constructors

- (instancetype)initWithUnavailable {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCaptureAvailabilityUnavailable;
  }
  return self;
}

- (instancetype)initWithAvailable {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCaptureAvailabilityAvailable;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCaptureAvailabilityOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUnavailable {
  return _tag == DBTEAMLOGAccountCaptureAvailabilityUnavailable;
}

- (BOOL)isAvailable {
  return _tag == DBTEAMLOGAccountCaptureAvailabilityAvailable;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAccountCaptureAvailabilityOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAccountCaptureAvailabilityUnavailable:
    return @"DBTEAMLOGAccountCaptureAvailabilityUnavailable";
  case DBTEAMLOGAccountCaptureAvailabilityAvailable:
    return @"DBTEAMLOGAccountCaptureAvailabilityAvailable";
  case DBTEAMLOGAccountCaptureAvailabilityOther:
    return @"DBTEAMLOGAccountCaptureAvailabilityOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureAvailabilitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureAvailabilitySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureAvailabilitySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAccountCaptureAvailabilityUnavailable:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAccountCaptureAvailabilityAvailable:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAccountCaptureAvailabilityOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureAvailability:other];
}

- (BOOL)isEqualToAccountCaptureAvailability:(DBTEAMLOGAccountCaptureAvailability *)anAccountCaptureAvailability {
  if (self == anAccountCaptureAvailability) {
    return YES;
  }
  if (self.tag != anAccountCaptureAvailability.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAccountCaptureAvailabilityUnavailable:
    return [[self tagName] isEqual:[anAccountCaptureAvailability tagName]];
  case DBTEAMLOGAccountCaptureAvailabilityAvailable:
    return [[self tagName] isEqual:[anAccountCaptureAvailability tagName]];
  case DBTEAMLOGAccountCaptureAvailabilityOther:
    return [[self tagName] isEqual:[anAccountCaptureAvailability tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureAvailabilitySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureAvailability *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUnavailable]) {
    jsonDict[@".tag"] = @"unavailable";
  } else if ([valueObj isAvailable]) {
    jsonDict[@".tag"] = @"available";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureAvailability *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"unavailable"]) {
    return [[DBTEAMLOGAccountCaptureAvailability alloc] initWithUnavailable];
  } else if ([tag isEqualToString:@"available"]) {
    return [[DBTEAMLOGAccountCaptureAvailability alloc] initWithAvailable];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAccountCaptureAvailability alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAccountCaptureAvailability alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureAvailability.h"
#import "DBTEAMLOGAccountCaptureChangeAvailabilityDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureChangeAvailabilityDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGAccountCaptureAvailability *)dNewValue
                    previousValue:(DBTEAMLOGAccountCaptureAvailability *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGAccountCaptureAvailability *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureChangeAvailabilityDetails:other];
}

- (BOOL)isEqualToAccountCaptureChangeAvailabilityDetails:
    (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)anAccountCaptureChangeAvailabilityDetails {
  if (self == anAccountCaptureChangeAvailabilityDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anAccountCaptureChangeAvailabilityDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:anAccountCaptureChangeAvailabilityDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGAccountCaptureAvailabilitySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGAccountCaptureAvailabilitySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAccountCaptureAvailability *dNewValue =
      [DBTEAMLOGAccountCaptureAvailabilitySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGAccountCaptureAvailability *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGAccountCaptureAvailabilitySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGAccountCaptureChangeAvailabilityDetails alloc] initWithDNewValue:dNewValue
                                                                       previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangeAvailabilityType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureChangeAvailabilityType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureChangeAvailabilityType:other];
}

- (BOOL)isEqualToAccountCaptureChangeAvailabilityType:
    (DBTEAMLOGAccountCaptureChangeAvailabilityType *)anAccountCaptureChangeAvailabilityType {
  if (self == anAccountCaptureChangeAvailabilityType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountCaptureChangeAvailabilityType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureChangeAvailabilityType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureChangeAvailabilityType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountCaptureChangeAvailabilityType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangePolicyDetails.h"
#import "DBTEAMLOGAccountCapturePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGAccountCapturePolicy *)dNewValue
                    previousValue:(DBTEAMLOGAccountCapturePolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGAccountCapturePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureChangePolicyDetails:other];
}

- (BOOL)isEqualToAccountCaptureChangePolicyDetails:
    (DBTEAMLOGAccountCaptureChangePolicyDetails *)anAccountCaptureChangePolicyDetails {
  if (self == anAccountCaptureChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anAccountCaptureChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:anAccountCaptureChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGAccountCapturePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGAccountCapturePolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAccountCapturePolicy *dNewValue =
      [DBTEAMLOGAccountCapturePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGAccountCapturePolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGAccountCapturePolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGAccountCaptureChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureChangePolicyType:other];
}

- (BOOL)isEqualToAccountCaptureChangePolicyType:
    (DBTEAMLOGAccountCaptureChangePolicyType *)anAccountCaptureChangePolicyType {
  if (self == anAccountCaptureChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountCaptureChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountCaptureChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureMigrateAccountDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureMigrateAccountDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSString *)domainName {
  [DBStoneValidators nonnullValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureMigrateAccountDetails:other];
}

- (BOOL)isEqualToAccountCaptureMigrateAccountDetails:
    (DBTEAMLOGAccountCaptureMigrateAccountDetails *)anAccountCaptureMigrateAccountDetails {
  if (self == anAccountCaptureMigrateAccountDetails) {
    return YES;
  }
  if (![self.domainName isEqual:anAccountCaptureMigrateAccountDetails.domainName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureMigrateAccountDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = valueObj.domainName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureMigrateAccountDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *domainName = valueDict[@"domain_name"];

  return [[DBTEAMLOGAccountCaptureMigrateAccountDetails alloc] initWithDomainName:domainName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureMigrateAccountType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureMigrateAccountType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureMigrateAccountType:other];
}

- (BOOL)isEqualToAccountCaptureMigrateAccountType:
    (DBTEAMLOGAccountCaptureMigrateAccountType *)anAccountCaptureMigrateAccountType {
  if (self == anAccountCaptureMigrateAccountType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountCaptureMigrateAccountType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureMigrateAccountType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureMigrateAccountType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountCaptureMigrateAccountType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureNotificationEmailsSentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureNotificationEmailsSentDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSString *)domainName {
  [DBStoneValidators nonnullValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureNotificationEmailsSentDetails:other];
}

- (BOOL)isEqualToAccountCaptureNotificationEmailsSentDetails:
    (DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *)anAccountCaptureNotificationEmailsSentDetails {
  if (self == anAccountCaptureNotificationEmailsSentDetails) {
    return YES;
  }
  if (![self.domainName isEqual:anAccountCaptureNotificationEmailsSentDetails.domainName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = valueObj.domainName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *domainName = valueDict[@"domain_name"];

  return [[DBTEAMLOGAccountCaptureNotificationEmailsSentDetails alloc] initWithDomainName:domainName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureNotificationEmailsSentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureNotificationEmailsSentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureNotificationEmailsSentType:other];
}

- (BOOL)isEqualToAccountCaptureNotificationEmailsSentType:
    (DBTEAMLOGAccountCaptureNotificationEmailsSentType *)anAccountCaptureNotificationEmailsSentType {
  if (self == anAccountCaptureNotificationEmailsSentType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountCaptureNotificationEmailsSentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureNotificationEmailsSentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureNotificationEmailsSentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountCaptureNotificationEmailsSentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCapturePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCapturePolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyDisabled;
  }
  return self;
}

- (instancetype)initWithInvitedUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyInvitedUsers;
  }
  return self;
}

- (instancetype)initWithAllUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyAllUsers;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGAccountCapturePolicyDisabled;
}

- (BOOL)isInvitedUsers {
  return _tag == DBTEAMLOGAccountCapturePolicyInvitedUsers;
}

- (BOOL)isAllUsers {
  return _tag == DBTEAMLOGAccountCapturePolicyAllUsers;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAccountCapturePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAccountCapturePolicyDisabled:
    return @"DBTEAMLOGAccountCapturePolicyDisabled";
  case DBTEAMLOGAccountCapturePolicyInvitedUsers:
    return @"DBTEAMLOGAccountCapturePolicyInvitedUsers";
  case DBTEAMLOGAccountCapturePolicyAllUsers:
    return @"DBTEAMLOGAccountCapturePolicyAllUsers";
  case DBTEAMLOGAccountCapturePolicyOther:
    return @"DBTEAMLOGAccountCapturePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCapturePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCapturePolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCapturePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAccountCapturePolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAccountCapturePolicyInvitedUsers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAccountCapturePolicyAllUsers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAccountCapturePolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCapturePolicy:other];
}

- (BOOL)isEqualToAccountCapturePolicy:(DBTEAMLOGAccountCapturePolicy *)anAccountCapturePolicy {
  if (self == anAccountCapturePolicy) {
    return YES;
  }
  if (self.tag != anAccountCapturePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAccountCapturePolicyDisabled:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  case DBTEAMLOGAccountCapturePolicyInvitedUsers:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  case DBTEAMLOGAccountCapturePolicyAllUsers:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  case DBTEAMLOGAccountCapturePolicyOther:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCapturePolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCapturePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isInvitedUsers]) {
    jsonDict[@".tag"] = @"invited_users";
  } else if ([valueObj isAllUsers]) {
    jsonDict[@".tag"] = @"all_users";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCapturePolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"invited_users"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithInvitedUsers];
  } else if ([tag isEqualToString:@"all_users"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithAllUsers];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureRelinquishAccountDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureRelinquishAccountDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSString *)domainName {
  [DBStoneValidators nonnullValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureRelinquishAccountDetails:other];
}

- (BOOL)isEqualToAccountCaptureRelinquishAccountDetails:
    (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)anAccountCaptureRelinquishAccountDetails {
  if (self == anAccountCaptureRelinquishAccountDetails) {
    return YES;
  }
  if (![self.domainName isEqual:anAccountCaptureRelinquishAccountDetails.domainName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureRelinquishAccountDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = valueObj.domainName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *domainName = valueDict[@"domain_name"];

  return [[DBTEAMLOGAccountCaptureRelinquishAccountDetails alloc] initWithDomainName:domainName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureRelinquishAccountType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureRelinquishAccountType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureRelinquishAccountType:other];
}

- (BOOL)isEqualToAccountCaptureRelinquishAccountType:
    (DBTEAMLOGAccountCaptureRelinquishAccountType *)anAccountCaptureRelinquishAccountType {
  if (self == anAccountCaptureRelinquishAccountType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountCaptureRelinquishAccountType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureRelinquishAccountType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureRelinquishAccountType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountCaptureRelinquishAccountType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGActionDetails.h"
#import "DBTEAMLOGJoinTeamDetails.h"
#import "DBTEAMLOGMemberRemoveActionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGActionDetails

@synthesize teamJoinDetails = _teamJoinDetails;
@synthesize removeAction = _removeAction;

#pragma mark - Constructors

- (instancetype)initWithTeamJoinDetails:(DBTEAMLOGJoinTeamDetails *)teamJoinDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActionDetailsTeamJoinDetails;
    _teamJoinDetails = teamJoinDetails;
  }
  return self;
}

- (instancetype)initWithRemoveAction:(DBTEAMLOGMemberRemoveActionType *)removeAction {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActionDetailsRemoveAction;
    _removeAction = removeAction;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActionDetailsOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGJoinTeamDetails *)teamJoinDetails {
  if (![self isTeamJoinDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActionDetailsTeamJoinDetails, but was %@.", [self tagName]];
  }
  return _teamJoinDetails;
}

- (DBTEAMLOGMemberRemoveActionType *)removeAction {
  if (![self isRemoveAction]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActionDetailsRemoveAction, but was %@.", [self tagName]];
  }
  return _removeAction;
}

#pragma mark - Tag state methods

- (BOOL)isTeamJoinDetails {
  return _tag == DBTEAMLOGActionDetailsTeamJoinDetails;
}

- (BOOL)isRemoveAction {
  return _tag == DBTEAMLOGActionDetailsRemoveAction;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGActionDetailsOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGActionDetailsTeamJoinDetails:
    return @"DBTEAMLOGActionDetailsTeamJoinDetails";
  case DBTEAMLOGActionDetailsRemoveAction:
    return @"DBTEAMLOGActionDetailsRemoveAction";
  case DBTEAMLOGActionDetailsOther:
    return @"DBTEAMLOGActionDetailsOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGActionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGActionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGActionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGActionDetailsTeamJoinDetails:
    result = prime * result + [self.teamJoinDetails hash];
  case DBTEAMLOGActionDetailsRemoveAction:
    result = prime * result + [self.removeAction hash];
  case DBTEAMLOGActionDetailsOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToActionDetails:other];
}

- (BOOL)isEqualToActionDetails:(DBTEAMLOGActionDetails *)anActionDetails {
  if (self == anActionDetails) {
    return YES;
  }
  if (self.tag != anActionDetails.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGActionDetailsTeamJoinDetails:
    return [self.teamJoinDetails isEqual:anActionDetails.teamJoinDetails];
  case DBTEAMLOGActionDetailsRemoveAction:
    return [self.removeAction isEqual:anActionDetails.removeAction];
  case DBTEAMLOGActionDetailsOther:
    return [[self tagName] isEqual:[anActionDetails tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGActionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGActionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamJoinDetails]) {
    jsonDict = [[DBTEAMLOGJoinTeamDetailsSerializer serialize:valueObj.teamJoinDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_join_details";
  } else if ([valueObj isRemoveAction]) {
    jsonDict[@"remove_action"] =
        [[DBTEAMLOGMemberRemoveActionTypeSerializer serialize:valueObj.removeAction] mutableCopy];
    jsonDict[@".tag"] = @"remove_action";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGActionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_join_details"]) {
    DBTEAMLOGJoinTeamDetails *teamJoinDetails = [DBTEAMLOGJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGActionDetails alloc] initWithTeamJoinDetails:teamJoinDetails];
  } else if ([tag isEqualToString:@"remove_action"]) {
    DBTEAMLOGMemberRemoveActionType *removeAction =
        [DBTEAMLOGMemberRemoveActionTypeSerializer deserialize:valueDict[@"remove_action"]];
    return [[DBTEAMLOGActionDetails alloc] initWithRemoveAction:removeAction];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGActionDetails alloc] initWithOther];
  } else {
    return [[DBTEAMLOGActionDetails alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGActorLogInfo.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGResellerLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGActorLogInfo

@synthesize user = _user;
@synthesize admin = _admin;
@synthesize app = _app;
@synthesize reseller = _reseller;

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMLOGUserLogInfo *)user {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoUser;
    _user = user;
  }
  return self;
}

- (instancetype)initWithAdmin:(DBTEAMLOGUserLogInfo *)admin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoAdmin;
    _admin = admin;
  }
  return self;
}

- (instancetype)initWithApp:(DBTEAMLOGAppLogInfo *)app {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoApp;
    _app = app;
  }
  return self;
}

- (instancetype)initWithReseller:(DBTEAMLOGResellerLogInfo *)reseller {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoReseller;
    _reseller = reseller;
  }
  return self;
}

- (instancetype)initWithDropbox {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoDropbox;
  }
  return self;
}

- (instancetype)initWithAnonymous {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoAnonymous;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGUserLogInfo *)user {
  if (![self isUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoUser, but was %@.", [self tagName]];
  }
  return _user;
}

- (DBTEAMLOGUserLogInfo *)admin {
  if (![self isAdmin]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoAdmin, but was %@.", [self tagName]];
  }
  return _admin;
}

- (DBTEAMLOGAppLogInfo *)app {
  if (![self isApp]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoApp, but was %@.", [self tagName]];
  }
  return _app;
}

- (DBTEAMLOGResellerLogInfo *)reseller {
  if (![self isReseller]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoReseller, but was %@.", [self tagName]];
  }
  return _reseller;
}

#pragma mark - Tag state methods

- (BOOL)isUser {
  return _tag == DBTEAMLOGActorLogInfoUser;
}

- (BOOL)isAdmin {
  return _tag == DBTEAMLOGActorLogInfoAdmin;
}

- (BOOL)isApp {
  return _tag == DBTEAMLOGActorLogInfoApp;
}

- (BOOL)isReseller {
  return _tag == DBTEAMLOGActorLogInfoReseller;
}

- (BOOL)isDropbox {
  return _tag == DBTEAMLOGActorLogInfoDropbox;
}

- (BOOL)isAnonymous {
  return _tag == DBTEAMLOGActorLogInfoAnonymous;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGActorLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGActorLogInfoUser:
    return @"DBTEAMLOGActorLogInfoUser";
  case DBTEAMLOGActorLogInfoAdmin:
    return @"DBTEAMLOGActorLogInfoAdmin";
  case DBTEAMLOGActorLogInfoApp:
    return @"DBTEAMLOGActorLogInfoApp";
  case DBTEAMLOGActorLogInfoReseller:
    return @"DBTEAMLOGActorLogInfoReseller";
  case DBTEAMLOGActorLogInfoDropbox:
    return @"DBTEAMLOGActorLogInfoDropbox";
  case DBTEAMLOGActorLogInfoAnonymous:
    return @"DBTEAMLOGActorLogInfoAnonymous";
  case DBTEAMLOGActorLogInfoOther:
    return @"DBTEAMLOGActorLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGActorLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGActorLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGActorLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGActorLogInfoUser:
    result = prime * result + [self.user hash];
  case DBTEAMLOGActorLogInfoAdmin:
    result = prime * result + [self.admin hash];
  case DBTEAMLOGActorLogInfoApp:
    result = prime * result + [self.app hash];
  case DBTEAMLOGActorLogInfoReseller:
    result = prime * result + [self.reseller hash];
  case DBTEAMLOGActorLogInfoDropbox:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGActorLogInfoAnonymous:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGActorLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToActorLogInfo:other];
}

- (BOOL)isEqualToActorLogInfo:(DBTEAMLOGActorLogInfo *)anActorLogInfo {
  if (self == anActorLogInfo) {
    return YES;
  }
  if (self.tag != anActorLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGActorLogInfoUser:
    return [self.user isEqual:anActorLogInfo.user];
  case DBTEAMLOGActorLogInfoAdmin:
    return [self.admin isEqual:anActorLogInfo.admin];
  case DBTEAMLOGActorLogInfoApp:
    return [self.app isEqual:anActorLogInfo.app];
  case DBTEAMLOGActorLogInfoReseller:
    return [self.reseller isEqual:anActorLogInfo.reseller];
  case DBTEAMLOGActorLogInfoDropbox:
    return [[self tagName] isEqual:[anActorLogInfo tagName]];
  case DBTEAMLOGActorLogInfoAnonymous:
    return [[self tagName] isEqual:[anActorLogInfo tagName]];
  case DBTEAMLOGActorLogInfoOther:
    return [[self tagName] isEqual:[anActorLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGActorLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGActorLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUser]) {
    jsonDict[@"user"] = [[DBTEAMLOGUserLogInfoSerializer serialize:valueObj.user] mutableCopy];
    jsonDict[@".tag"] = @"user";
  } else if ([valueObj isAdmin]) {
    jsonDict[@"admin"] = [[DBTEAMLOGUserLogInfoSerializer serialize:valueObj.admin] mutableCopy];
    jsonDict[@".tag"] = @"admin";
  } else if ([valueObj isApp]) {
    jsonDict[@"app"] = [[DBTEAMLOGAppLogInfoSerializer serialize:valueObj.app] mutableCopy];
    jsonDict[@".tag"] = @"app";
  } else if ([valueObj isReseller]) {
    jsonDict = [[DBTEAMLOGResellerLogInfoSerializer serialize:valueObj.reseller] mutableCopy];
    jsonDict[@".tag"] = @"reseller";
  } else if ([valueObj isDropbox]) {
    jsonDict[@".tag"] = @"dropbox";
  } else if ([valueObj isAnonymous]) {
    jsonDict[@".tag"] = @"anonymous";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGActorLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user"]) {
    DBTEAMLOGUserLogInfo *user = [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"user"]];
    return [[DBTEAMLOGActorLogInfo alloc] initWithUser:user];
  } else if ([tag isEqualToString:@"admin"]) {
    DBTEAMLOGUserLogInfo *admin = [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"admin"]];
    return [[DBTEAMLOGActorLogInfo alloc] initWithAdmin:admin];
  } else if ([tag isEqualToString:@"app"]) {
    DBTEAMLOGAppLogInfo *app = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app"]];
    return [[DBTEAMLOGActorLogInfo alloc] initWithApp:app];
  } else if ([tag isEqualToString:@"reseller"]) {
    DBTEAMLOGResellerLogInfo *reseller = [DBTEAMLOGResellerLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGActorLogInfo alloc] initWithReseller:reseller];
  } else if ([tag isEqualToString:@"dropbox"]) {
    return [[DBTEAMLOGActorLogInfo alloc] initWithDropbox];
  } else if ([tag isEqualToString:@"anonymous"]) {
    return [[DBTEAMLOGActorLogInfo alloc] initWithAnonymous];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGActorLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGActorLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminRole.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminRole

#pragma mark - Constructors

- (instancetype)initWithTeamAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleTeamAdmin;
  }
  return self;
}

- (instancetype)initWithUserManagementAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleUserManagementAdmin;
  }
  return self;
}

- (instancetype)initWithSupportAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleSupportAdmin;
  }
  return self;
}

- (instancetype)initWithLimitedAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleLimitedAdmin;
  }
  return self;
}

- (instancetype)initWithMemberOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleMemberOnly;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isTeamAdmin {
  return _tag == DBTEAMLOGAdminRoleTeamAdmin;
}

- (BOOL)isUserManagementAdmin {
  return _tag == DBTEAMLOGAdminRoleUserManagementAdmin;
}

- (BOOL)isSupportAdmin {
  return _tag == DBTEAMLOGAdminRoleSupportAdmin;
}

- (BOOL)isLimitedAdmin {
  return _tag == DBTEAMLOGAdminRoleLimitedAdmin;
}

- (BOOL)isMemberOnly {
  return _tag == DBTEAMLOGAdminRoleMemberOnly;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAdminRoleOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAdminRoleTeamAdmin:
    return @"DBTEAMLOGAdminRoleTeamAdmin";
  case DBTEAMLOGAdminRoleUserManagementAdmin:
    return @"DBTEAMLOGAdminRoleUserManagementAdmin";
  case DBTEAMLOGAdminRoleSupportAdmin:
    return @"DBTEAMLOGAdminRoleSupportAdmin";
  case DBTEAMLOGAdminRoleLimitedAdmin:
    return @"DBTEAMLOGAdminRoleLimitedAdmin";
  case DBTEAMLOGAdminRoleMemberOnly:
    return @"DBTEAMLOGAdminRoleMemberOnly";
  case DBTEAMLOGAdminRoleOther:
    return @"DBTEAMLOGAdminRoleOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminRoleSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminRoleSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAdminRoleSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAdminRoleTeamAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAdminRoleUserManagementAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAdminRoleSupportAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAdminRoleLimitedAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAdminRoleMemberOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAdminRoleOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminRole:other];
}

- (BOOL)isEqualToAdminRole:(DBTEAMLOGAdminRole *)anAdminRole {
  if (self == anAdminRole) {
    return YES;
  }
  if (self.tag != anAdminRole.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAdminRoleTeamAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleUserManagementAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleSupportAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleLimitedAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleMemberOnly:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleOther:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminRoleSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminRole *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamAdmin]) {
    jsonDict[@".tag"] = @"team_admin";
  } else if ([valueObj isUserManagementAdmin]) {
    jsonDict[@".tag"] = @"user_management_admin";
  } else if ([valueObj isSupportAdmin]) {
    jsonDict[@".tag"] = @"support_admin";
  } else if ([valueObj isLimitedAdmin]) {
    jsonDict[@".tag"] = @"limited_admin";
  } else if ([valueObj isMemberOnly]) {
    jsonDict[@".tag"] = @"member_only";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminRole *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithTeamAdmin];
  } else if ([tag isEqualToString:@"user_management_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithUserManagementAdmin];
  } else if ([tag isEqualToString:@"support_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithSupportAdmin];
  } else if ([tag isEqualToString:@"limited_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithLimitedAdmin];
  } else if ([tag isEqualToString:@"member_only"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithMemberOnly];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAdminRole alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAllowDownloadDisabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAllowDownloadDisabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAllowDownloadDisabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAllowDownloadDisabledDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAllowDownloadDisabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAllowDownloadDisabledDetails:other];
}

- (BOOL)isEqualToAllowDownloadDisabledDetails:(DBTEAMLOGAllowDownloadDisabledDetails *)anAllowDownloadDisabledDetails {
  if (self == anAllowDownloadDisabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAllowDownloadDisabledDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAllowDownloadDisabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAllowDownloadDisabledDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGAllowDownloadDisabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAllowDownloadDisabledType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAllowDownloadDisabledType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAllowDownloadDisabledTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAllowDownloadDisabledTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAllowDownloadDisabledTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAllowDownloadDisabledType:other];
}

- (BOOL)isEqualToAllowDownloadDisabledType:(DBTEAMLOGAllowDownloadDisabledType *)anAllowDownloadDisabledType {
  if (self == anAllowDownloadDisabledType) {
    return YES;
  }
  if (![self.description_ isEqual:anAllowDownloadDisabledType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAllowDownloadDisabledTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAllowDownloadDisabledType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAllowDownloadDisabledType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAllowDownloadDisabledType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAllowDownloadEnabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAllowDownloadEnabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAllowDownloadEnabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAllowDownloadEnabledDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAllowDownloadEnabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAllowDownloadEnabledDetails:other];
}

- (BOOL)isEqualToAllowDownloadEnabledDetails:(DBTEAMLOGAllowDownloadEnabledDetails *)anAllowDownloadEnabledDetails {
  if (self == anAllowDownloadEnabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAllowDownloadEnabledDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAllowDownloadEnabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAllowDownloadEnabledDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGAllowDownloadEnabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAllowDownloadEnabledType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAllowDownloadEnabledType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAllowDownloadEnabledTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAllowDownloadEnabledTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAllowDownloadEnabledTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAllowDownloadEnabledType:other];
}

- (BOOL)isEqualToAllowDownloadEnabledType:(DBTEAMLOGAllowDownloadEnabledType *)anAllowDownloadEnabledType {
  if (self == anAllowDownloadEnabledType) {
    return YES;
  }
  if (![self.description_ isEqual:anAllowDownloadEnabledType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAllowDownloadEnabledTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAllowDownloadEnabledType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAllowDownloadEnabledType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAllowDownloadEnabledType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGApiSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGApiSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithRequestId:(NSString *)requestId {
  [DBStoneValidators nonnullValidator:nil](requestId);

  self = [super init];
  if (self) {
    _requestId = requestId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGApiSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGApiSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGApiSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToApiSessionLogInfo:other];
}

- (BOOL)isEqualToApiSessionLogInfo:(DBTEAMLOGApiSessionLogInfo *)anApiSessionLogInfo {
  if (self == anApiSessionLogInfo) {
    return YES;
  }
  if (![self.requestId isEqual:anApiSessionLogInfo.requestId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGApiSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGApiSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_id"] = valueObj.requestId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGApiSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *requestId = valueDict[@"request_id"];

  return [[DBTEAMLOGApiSessionLogInfo alloc] initWithRequestId:requestId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLinkTeamDetails.h"
#import "DBTEAMLOGAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLinkTeamDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {
  [DBStoneValidators nonnullValidator:nil](appInfo);

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppLinkTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppLinkTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppLinkTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLinkTeamDetails:other];
}

- (BOOL)isEqualToAppLinkTeamDetails:(DBTEAMLOGAppLinkTeamDetails *)anAppLinkTeamDetails {
  if (self == anAppLinkTeamDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppLinkTeamDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLinkTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppLinkTeamDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppLinkTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppLinkTeamDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLinkTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLinkTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppLinkTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppLinkTeamTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppLinkTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLinkTeamType:other];
}

- (BOOL)isEqualToAppLinkTeamType:(DBTEAMLOGAppLinkTeamType *)anAppLinkTeamType {
  if (self == anAppLinkTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:anAppLinkTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLinkTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppLinkTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppLinkTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAppLinkTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLinkUserDetails.h"
#import "DBTEAMLOGAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLinkUserDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {
  [DBStoneValidators nonnullValidator:nil](appInfo);

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppLinkUserDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppLinkUserDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppLinkUserDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLinkUserDetails:other];
}

- (BOOL)isEqualToAppLinkUserDetails:(DBTEAMLOGAppLinkUserDetails *)anAppLinkUserDetails {
  if (self == anAppLinkUserDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppLinkUserDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLinkUserDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppLinkUserDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppLinkUserDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppLinkUserDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLinkUserType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLinkUserType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppLinkUserTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppLinkUserTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppLinkUserTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLinkUserType:other];
}

- (BOOL)isEqualToAppLinkUserType:(DBTEAMLOGAppLinkUserType *)anAppLinkUserType {
  if (self == anAppLinkUserType) {
    return YES;
  }
  if (![self.description_ isEqual:anAppLinkUserType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLinkUserTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppLinkUserType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppLinkUserType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAppLinkUserType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGTeamLinkedAppLogInfo.h"
#import "DBTEAMLOGUserLinkedAppLogInfo.h"
#import "DBTEAMLOGUserOrTeamLinkedAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLogInfo

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId displayName:(NSString *)displayName {

  self = [super init];
  if (self) {
    _appId = appId;
    _displayName = displayName;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAppId:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.appId != nil) {
    result = prime * result + [self.appId hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLogInfo:other];
}

- (BOOL)isEqualToAppLogInfo:(DBTEAMLOGAppLogInfo *)anAppLogInfo {
  if (self == anAppLogInfo) {
    return YES;
  }
  if (self.appId) {
    if (![self.appId isEqual:anAppLogInfo.appId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:anAppLogInfo.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.appId) {
    jsonDict[@"app_id"] = valueObj.appId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  if ([valueObj isKindOfClass:[DBTEAMLOGUserOrTeamLinkedAppLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer serialize:(DBTEAMLOGUserOrTeamLinkedAppLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"userOrTeamLinkedApp";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGUserLinkedAppLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGUserLinkedAppLogInfoSerializer serialize:(DBTEAMLOGUserLinkedAppLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"userLinkedApp";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGTeamLinkedAppLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGTeamLinkedAppLogInfoSerializer serialize:(DBTEAMLOGTeamLinkedAppLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"teamLinkedApp";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"user_or_team_linked_app"]) {
    return [DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"user_linked_app"]) {
    return [DBTEAMLOGUserLinkedAppLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"team_linked_app"]) {
    return [DBTEAMLOGTeamLinkedAppLogInfoSerializer deserialize:valueDict];
  }

  NSString *appId = valueDict[@"app_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGAppLogInfo alloc] initWithAppId:appId displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGAppUnlinkTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppUnlinkTeamDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {
  [DBStoneValidators nonnullValidator:nil](appInfo);

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppUnlinkTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppUnlinkTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppUnlinkTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppUnlinkTeamDetails:other];
}

- (BOOL)isEqualToAppUnlinkTeamDetails:(DBTEAMLOGAppUnlinkTeamDetails *)anAppUnlinkTeamDetails {
  if (self == anAppUnlinkTeamDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppUnlinkTeamDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppUnlinkTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppUnlinkTeamDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppUnlinkTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppUnlinkTeamDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppUnlinkTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppUnlinkTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppUnlinkTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppUnlinkTeamTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppUnlinkTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppUnlinkTeamType:other];
}

- (BOOL)isEqualToAppUnlinkTeamType:(DBTEAMLOGAppUnlinkTeamType *)anAppUnlinkTeamType {
  if (self == anAppUnlinkTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:anAppUnlinkTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppUnlinkTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppUnlinkTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppUnlinkTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAppUnlinkTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGAppUnlinkUserDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppUnlinkUserDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {
  [DBStoneValidators nonnullValidator:nil](appInfo);

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppUnlinkUserDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppUnlinkUserDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppUnlinkUserDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppUnlinkUserDetails:other];
}

- (BOOL)isEqualToAppUnlinkUserDetails:(DBTEAMLOGAppUnlinkUserDetails *)anAppUnlinkUserDetails {
  if (self == anAppUnlinkUserDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppUnlinkUserDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppUnlinkUserDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppUnlinkUserDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppUnlinkUserDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppUnlinkUserDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppUnlinkUserType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppUnlinkUserType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppUnlinkUserTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppUnlinkUserTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppUnlinkUserTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppUnlinkUserType:other];
}

- (BOOL)isEqualToAppUnlinkUserType:(DBTEAMLOGAppUnlinkUserType *)anAppUnlinkUserType {
  if (self == anAppUnlinkUserType) {
    return YES;
  }
  if (![self.description_ isEqual:anAppUnlinkUserType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppUnlinkUserTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppUnlinkUserType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppUnlinkUserType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAppUnlinkUserType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAssetLogInfo.h"
#import "DBTEAMLOGFileLogInfo.h"
#import "DBTEAMLOGFolderLogInfo.h"
#import "DBTEAMLOGPaperDocumentLogInfo.h"
#import "DBTEAMLOGPaperFolderLogInfo.h"
#import "DBTEAMLOGShowcaseDocumentLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAssetLogInfo

@synthesize file = _file;
@synthesize folder = _folder;
@synthesize paperDocument = _paperDocument;
@synthesize paperFolder = _paperFolder;
@synthesize showcaseDocument = _showcaseDocument;

#pragma mark - Constructors

- (instancetype)initWithFile:(DBTEAMLOGFileLogInfo *)file {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoFile;
    _file = file;
  }
  return self;
}

- (instancetype)initWithFolder:(DBTEAMLOGFolderLogInfo *)folder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoFolder;
    _folder = folder;
  }
  return self;
}

- (instancetype)initWithPaperDocument:(DBTEAMLOGPaperDocumentLogInfo *)paperDocument {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoPaperDocument;
    _paperDocument = paperDocument;
  }
  return self;
}

- (instancetype)initWithPaperFolder:(DBTEAMLOGPaperFolderLogInfo *)paperFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoPaperFolder;
    _paperFolder = paperFolder;
  }
  return self;
}

- (instancetype)initWithShowcaseDocument:(DBTEAMLOGShowcaseDocumentLogInfo *)showcaseDocument {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoShowcaseDocument;
    _showcaseDocument = showcaseDocument;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGFileLogInfo *)file {
  if (![self isFile]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoFile, but was %@.", [self tagName]];
  }
  return _file;
}

- (DBTEAMLOGFolderLogInfo *)folder {
  if (![self isFolder]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoFolder, but was %@.", [self tagName]];
  }
  return _folder;
}

- (DBTEAMLOGPaperDocumentLogInfo *)paperDocument {
  if (![self isPaperDocument]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoPaperDocument, but was %@.", [self tagName]];
  }
  return _paperDocument;
}

- (DBTEAMLOGPaperFolderLogInfo *)paperFolder {
  if (![self isPaperFolder]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoPaperFolder, but was %@.", [self tagName]];
  }
  return _paperFolder;
}

- (DBTEAMLOGShowcaseDocumentLogInfo *)showcaseDocument {
  if (![self isShowcaseDocument]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoShowcaseDocument, but was %@.", [self tagName]];
  }
  return _showcaseDocument;
}

#pragma mark - Tag state methods

- (BOOL)isFile {
  return _tag == DBTEAMLOGAssetLogInfoFile;
}

- (BOOL)isFolder {
  return _tag == DBTEAMLOGAssetLogInfoFolder;
}

- (BOOL)isPaperDocument {
  return _tag == DBTEAMLOGAssetLogInfoPaperDocument;
}

- (BOOL)isPaperFolder {
  return _tag == DBTEAMLOGAssetLogInfoPaperFolder;
}

- (BOOL)isShowcaseDocument {
  return _tag == DBTEAMLOGAssetLogInfoShowcaseDocument;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAssetLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAssetLogInfoFile:
    return @"DBTEAMLOGAssetLogInfoFile";
  case DBTEAMLOGAssetLogInfoFolder:
    return @"DBTEAMLOGAssetLogInfoFolder";
  case DBTEAMLOGAssetLogInfoPaperDocument:
    return @"DBTEAMLOGAssetLogInfoPaperDocument";
  case DBTEAMLOGAssetLogInfoPaperFolder:
    return @"DBTEAMLOGAssetLogInfoPaperFolder";
  case DBTEAMLOGAssetLogInfoShowcaseDocument:
    return @"DBTEAMLOGAssetLogInfoShowcaseDocument";
  case DBTEAMLOGAssetLogInfoOther:
    return @"DBTEAMLOGAssetLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAssetLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAssetLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAssetLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAssetLogInfoFile:
    result = prime * result + [self.file hash];
  case DBTEAMLOGAssetLogInfoFolder:
    result = prime * result + [self.folder hash];
  case DBTEAMLOGAssetLogInfoPaperDocument:
    result = prime * result + [self.paperDocument hash];
  case DBTEAMLOGAssetLogInfoPaperFolder:
    result = prime * result + [self.paperFolder hash];
  case DBTEAMLOGAssetLogInfoShowcaseDocument:
    result = prime * result + [self.showcaseDocument hash];
  case DBTEAMLOGAssetLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAssetLogInfo:other];
}

- (BOOL)isEqualToAssetLogInfo:(DBTEAMLOGAssetLogInfo *)anAssetLogInfo {
  if (self == anAssetLogInfo) {
    return YES;
  }
  if (self.tag != anAssetLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAssetLogInfoFile:
    return [self.file isEqual:anAssetLogInfo.file];
  case DBTEAMLOGAssetLogInfoFolder:
    return [self.folder isEqual:anAssetLogInfo.folder];
  case DBTEAMLOGAssetLogInfoPaperDocument:
    return [self.paperDocument isEqual:anAssetLogInfo.paperDocument];
  case DBTEAMLOGAssetLogInfoPaperFolder:
    return [self.paperFolder isEqual:anAssetLogInfo.paperFolder];
  case DBTEAMLOGAssetLogInfoShowcaseDocument:
    return [self.showcaseDocument isEqual:anAssetLogInfo.showcaseDocument];
  case DBTEAMLOGAssetLogInfoOther:
    return [[self tagName] isEqual:[anAssetLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAssetLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAssetLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isFile]) {
    jsonDict = [[DBTEAMLOGFileLogInfoSerializer serialize:valueObj.file] mutableCopy];
    jsonDict[@".tag"] = @"file";
  } else if ([valueObj isFolder]) {
    jsonDict = [[DBTEAMLOGFolderLogInfoSerializer serialize:valueObj.folder] mutableCopy];
    jsonDict[@".tag"] = @"folder";
  } else if ([valueObj isPaperDocument]) {
    jsonDict = [[DBTEAMLOGPaperDocumentLogInfoSerializer serialize:valueObj.paperDocument] mutableCopy];
    jsonDict[@".tag"] = @"paper_document";
  } else if ([valueObj isPaperFolder]) {
    jsonDict = [[DBTEAMLOGPaperFolderLogInfoSerializer serialize:valueObj.paperFolder] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder";
  } else if ([valueObj isShowcaseDocument]) {
    jsonDict = [[DBTEAMLOGShowcaseDocumentLogInfoSerializer serialize:valueObj.showcaseDocument] mutableCopy];
    jsonDict[@".tag"] = @"showcase_document";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAssetLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"file"]) {
    DBTEAMLOGFileLogInfo *file = [DBTEAMLOGFileLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithFile:file];
  } else if ([tag isEqualToString:@"folder"]) {
    DBTEAMLOGFolderLogInfo *folder = [DBTEAMLOGFolderLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithFolder:folder];
  } else if ([tag isEqualToString:@"paper_document"]) {
    DBTEAMLOGPaperDocumentLogInfo *paperDocument = [DBTEAMLOGPaperDocumentLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithPaperDocument:paperDocument];
  } else if ([tag isEqualToString:@"paper_folder"]) {
    DBTEAMLOGPaperFolderLogInfo *paperFolder = [DBTEAMLOGPaperFolderLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithPaperFolder:paperFolder];
  } else if ([tag isEqualToString:@"showcase_document"]) {
    DBTEAMLOGShowcaseDocumentLogInfo *showcaseDocument =
        [DBTEAMLOGShowcaseDocumentLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithShowcaseDocument:showcaseDocument];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAssetLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAssetLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCertificate.h"

#pragma mark - API Object

@implementation DBTEAMLOGCertificate

#pragma mark - Constructors

- (instancetype)initWithSubject:(NSString *)subject
                         issuer:(NSString *)issuer
                      issueDate:(NSString *)issueDate
                 expirationDate:(NSString *)expirationDate
                   serialNumber:(NSString *)serialNumber
                sha1Fingerprint:(NSString *)sha1Fingerprint
                     commonName:(NSString *)commonName {
  [DBStoneValidators nonnullValidator:nil](subject);
  [DBStoneValidators nonnullValidator:nil](issuer);
  [DBStoneValidators nonnullValidator:nil](issueDate);
  [DBStoneValidators nonnullValidator:nil](expirationDate);
  [DBStoneValidators nonnullValidator:nil](serialNumber);
  [DBStoneValidators nonnullValidator:nil](sha1Fingerprint);

  self = [super init];
  if (self) {
    _subject = subject;
    _issuer = issuer;
    _issueDate = issueDate;
    _expirationDate = expirationDate;
    _serialNumber = serialNumber;
    _sha1Fingerprint = sha1Fingerprint;
    _commonName = commonName;
  }
  return self;
}

- (instancetype)initWithSubject:(NSString *)subject
                         issuer:(NSString *)issuer
                      issueDate:(NSString *)issueDate
                 expirationDate:(NSString *)expirationDate
                   serialNumber:(NSString *)serialNumber
                sha1Fingerprint:(NSString *)sha1Fingerprint {
  return [self initWithSubject:subject
                        issuer:issuer
                     issueDate:issueDate
                expirationDate:expirationDate
                  serialNumber:serialNumber
               sha1Fingerprint:sha1Fingerprint
                    commonName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCertificateSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCertificateSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGCertificateSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.subject hash];
  result = prime * result + [self.issuer hash];
  result = prime * result + [self.issueDate hash];
  result = prime * result + [self.expirationDate hash];
  result = prime * result + [self.serialNumber hash];
  result = prime * result + [self.sha1Fingerprint hash];
  if (self.commonName != nil) {
    result = prime * result + [self.commonName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCertificate:other];
}

- (BOOL)isEqualToCertificate:(DBTEAMLOGCertificate *)aCertificate {
  if (self == aCertificate) {
    return YES;
  }
  if (![self.subject isEqual:aCertificate.subject]) {
    return NO;
  }
  if (![self.issuer isEqual:aCertificate.issuer]) {
    return NO;
  }
  if (![self.issueDate isEqual:aCertificate.issueDate]) {
    return NO;
  }
  if (![self.expirationDate isEqual:aCertificate.expirationDate]) {
    return NO;
  }
  if (![self.serialNumber isEqual:aCertificate.serialNumber]) {
    return NO;
  }
  if (![self.sha1Fingerprint isEqual:aCertificate.sha1Fingerprint]) {
    return NO;
  }
  if (self.commonName) {
    if (![self.commonName isEqual:aCertificate.commonName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCertificateSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCertificate *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"subject"] = valueObj.subject;
  jsonDict[@"issuer"] = valueObj.issuer;
  jsonDict[@"issue_date"] = valueObj.issueDate;
  jsonDict[@"expiration_date"] = valueObj.expirationDate;
  jsonDict[@"serial_number"] = valueObj.serialNumber;
  jsonDict[@"sha1_fingerprint"] = valueObj.sha1Fingerprint;
  if (valueObj.commonName) {
    jsonDict[@"common_name"] = valueObj.commonName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCertificate *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *subject = valueDict[@"subject"];
  NSString *issuer = valueDict[@"issuer"];
  NSString *issueDate = valueDict[@"issue_date"];
  NSString *expirationDate = valueDict[@"expiration_date"];
  NSString *serialNumber = valueDict[@"serial_number"];
  NSString *sha1Fingerprint = valueDict[@"sha1_fingerprint"];
  NSString *commonName = valueDict[@"common_name"] ?: nil;

  return [[DBTEAMLOGCertificate alloc] initWithSubject:subject
                                                issuer:issuer
                                             issueDate:issueDate
                                        expirationDate:expirationDate
                                          serialNumber:serialNumber
                                       sha1Fingerprint:sha1Fingerprint
                                            commonName:commonName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCollectionShareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGCollectionShareDetails

#pragma mark - Constructors

- (instancetype)initWithAlbumName:(NSString *)albumName {
  [DBStoneValidators nonnullValidator:nil](albumName);

  self = [super init];
  if (self) {
    _albumName = albumName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCollectionShareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCollectionShareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGCollectionShareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.albumName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCollectionShareDetails:other];
}

- (BOOL)isEqualToCollectionShareDetails:(DBTEAMLOGCollectionShareDetails *)aCollectionShareDetails {
  if (self == aCollectionShareDetails) {
    return YES;
  }
  if (![self.albumName isEqual:aCollectionShareDetails.albumName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCollectionShareDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCollectionShareDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"album_name"] = valueObj.albumName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCollectionShareDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *albumName = valueDict[@"album_name"];

  return [[DBTEAMLOGCollectionShareDetails alloc] initWithAlbumName:albumName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCollectionShareType.h"

#pragma mark - API Object

@implementation DBTEAMLOGCollectionShareType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCollectionShareTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCollectionShareTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGCollectionShareTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCollectionShareType:other];
}

- (BOOL)isEqualToCollectionShareType:(DBTEAMLOGCollectionShareType *)aCollectionShareType {
  if (self == aCollectionShareType) {
    return YES;
  }
  if (![self.description_ isEqual:aCollectionShareType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCollectionShareTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCollectionShareType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCollectionShareType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGCollectionShareType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGContentPermanentDeletePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGContentPermanentDeletePolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContentPermanentDeletePolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContentPermanentDeletePolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContentPermanentDeletePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGContentPermanentDeletePolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGContentPermanentDeletePolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGContentPermanentDeletePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGContentPermanentDeletePolicyDisabled:
    return @"DBTEAMLOGContentPermanentDeletePolicyDisabled";
  case DBTEAMLOGContentPermanentDeletePolicyEnabled:
    return @"DBTEAMLOGContentPermanentDeletePolicyEnabled";
  case DBTEAMLOGContentPermanentDeletePolicyOther:
    return @"DBTEAMLOGContentPermanentDeletePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGContentPermanentDeletePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGContentPermanentDeletePolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGContentPermanentDeletePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGContentPermanentDeletePolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGContentPermanentDeletePolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGContentPermanentDeletePolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToContentPermanentDeletePolicy:other];
}

- (BOOL)isEqualToContentPermanentDeletePolicy:(DBTEAMLOGContentPermanentDeletePolicy *)aContentPermanentDeletePolicy {
  if (self == aContentPermanentDeletePolicy) {
    return YES;
  }
  if (self.tag != aContentPermanentDeletePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGContentPermanentDeletePolicyDisabled:
    return [[self tagName] isEqual:[aContentPermanentDeletePolicy tagName]];
  case DBTEAMLOGContentPermanentDeletePolicyEnabled:
    return [[self tagName] isEqual:[aContentPermanentDeletePolicy tagName]];
  case DBTEAMLOGContentPermanentDeletePolicyOther:
    return [[self tagName] isEqual:[aContentPermanentDeletePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGContentPermanentDeletePolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGContentPermanentDeletePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGContentPermanentDeletePolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGContentPermanentDeletePolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGContentPermanentDeletePolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGContentPermanentDeletePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGContentPermanentDeletePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGContextLogInfo.h"
#import "DBTEAMLOGNonTeamMemberLogInfo.h"
#import "DBTEAMLOGTeamMemberLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGContextLogInfo

@synthesize teamMember = _teamMember;
@synthesize nonTeamMember = _nonTeamMember;

#pragma mark - Constructors

- (instancetype)initWithTeamMember:(DBTEAMLOGTeamMemberLogInfo *)teamMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoTeamMember;
    _teamMember = teamMember;
  }
  return self;
}

- (instancetype)initWithNonTeamMember:(DBTEAMLOGNonTeamMemberLogInfo *)nonTeamMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoNonTeamMember;
    _nonTeamMember = nonTeamMember;
  }
  return self;
}

- (instancetype)initWithAnonymous {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoAnonymous;
  }
  return self;
}

- (instancetype)initWithTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoTeam;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGTeamMemberLogInfo *)teamMember {
  if (![self isTeamMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGContextLogInfoTeamMember, but was %@.", [self tagName]];
  }
  return _teamMember;
}

- (DBTEAMLOGNonTeamMemberLogInfo *)nonTeamMember {
  if (![self isNonTeamMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGContextLogInfoNonTeamMember, but was %@.", [self tagName]];
  }
  return _nonTeamMember;
}

#pragma mark - Tag state methods

- (BOOL)isTeamMember {
  return _tag == DBTEAMLOGContextLogInfoTeamMember;
}

- (BOOL)isNonTeamMember {
  return _tag == DBTEAMLOGContextLogInfoNonTeamMember;
}

- (BOOL)isAnonymous {
  return _tag == DBTEAMLOGContextLogInfoAnonymous;
}

- (BOOL)isTeam {
  return _tag == DBTEAMLOGContextLogInfoTeam;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGContextLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGContextLogInfoTeamMember:
    return @"DBTEAMLOGContextLogInfoTeamMember";
  case DBTEAMLOGContextLogInfoNonTeamMember:
    return @"DBTEAMLOGContextLogInfoNonTeamMember";
  case DBTEAMLOGContextLogInfoAnonymous:
    return @"DBTEAMLOGContextLogInfoAnonymous";
  case DBTEAMLOGContextLogInfoTeam:
    return @"DBTEAMLOGContextLogInfoTeam";
  case DBTEAMLOGContextLogInfoOther:
    return @"DBTEAMLOGContextLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGContextLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGContextLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGContextLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGContextLogInfoTeamMember:
    result = prime * result + [self.teamMember hash];
  case DBTEAMLOGContextLogInfoNonTeamMember:
    result = prime * result + [self.nonTeamMember hash];
  case DBTEAMLOGContextLogInfoAnonymous:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGContextLogInfoTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGContextLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToContextLogInfo:other];
}

- (BOOL)isEqualToContextLogInfo:(DBTEAMLOGContextLogInfo *)aContextLogInfo {
  if (self == aContextLogInfo) {
    return YES;
  }
  if (self.tag != aContextLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGContextLogInfoTeamMember:
    return [self.teamMember isEqual:aContextLogInfo.teamMember];
  case DBTEAMLOGContextLogInfoNonTeamMember:
    return [self.nonTeamMember isEqual:aContextLogInfo.nonTeamMember];
  case DBTEAMLOGContextLogInfoAnonymous:
    return [[self tagName] isEqual:[aContextLogInfo tagName]];
  case DBTEAMLOGContextLogInfoTeam:
    return [[self tagName] isEqual:[aContextLogInfo tagName]];
  case DBTEAMLOGContextLogInfoOther:
    return [[self tagName] isEqual:[aContextLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGContextLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGContextLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamMember]) {
    jsonDict = [[DBTEAMLOGTeamMemberLogInfoSerializer serialize:valueObj.teamMember] mutableCopy];
    jsonDict[@".tag"] = @"team_member";
  } else if ([valueObj isNonTeamMember]) {
    jsonDict = [[DBTEAMLOGNonTeamMemberLogInfoSerializer serialize:valueObj.nonTeamMember] mutableCopy];
    jsonDict[@".tag"] = @"non_team_member";
  } else if ([valueObj isAnonymous]) {
    jsonDict[@".tag"] = @"anonymous";
  } else if ([valueObj isTeam]) {
    jsonDict[@".tag"] = @"team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGContextLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_member"]) {
    DBTEAMLOGTeamMemberLogInfo *teamMember = [DBTEAMLOGTeamMemberLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGContextLogInfo alloc] initWithTeamMember:teamMember];
  } else if ([tag isEqualToString:@"non_team_member"]) {
    DBTEAMLOGNonTeamMemberLogInfo *nonTeamMember = [DBTEAMLOGNonTeamMemberLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGContextLogInfo alloc] initWithNonTeamMember:nonTeamMember];
  } else if ([tag isEqualToString:@"anonymous"]) {
    return [[DBTEAMLOGContextLogInfo alloc] initWithAnonymous];
  } else if ([tag isEqualToString:@"team"]) {
    return [[DBTEAMLOGContextLogInfo alloc] initWithTeam];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGContextLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGContextLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCreateFolderDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGCreateFolderDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCreateFolderDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCreateFolderDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGCreateFolderDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCreateFolderDetails:other];
}

- (BOOL)isEqualToCreateFolderDetails:(DBTEAMLOGCreateFolderDetails *)aCreateFolderDetails {
  if (self == aCreateFolderDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCreateFolderDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCreateFolderDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCreateFolderDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGCreateFolderDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCreateFolderType.h"

#pragma mark - API Object

@implementation DBTEAMLOGCreateFolderType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCreateFolderTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCreateFolderTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGCreateFolderTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCreateFolderType:other];
}

- (BOOL)isEqualToCreateFolderType:(DBTEAMLOGCreateFolderType *)aCreateFolderType {
  if (self == aCreateFolderType) {
    return YES;
  }
  if (![self.description_ isEqual:aCreateFolderType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCreateFolderTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCreateFolderType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCreateFolderType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGCreateFolderType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataPlacementRestrictionChangePolicyDetails.h"
#import "DBTEAMLOGPlacementRestriction.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataPlacementRestrictionChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGPlacementRestriction *)previousValue
                            dNewValue:(DBTEAMLOGPlacementRestriction *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataPlacementRestrictionChangePolicyDetails:other];
}

- (BOOL)isEqualToDataPlacementRestrictionChangePolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)aDataPlacementRestrictionChangePolicyDetails {
  if (self == aDataPlacementRestrictionChangePolicyDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aDataPlacementRestrictionChangePolicyDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aDataPlacementRestrictionChangePolicyDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGPlacementRestrictionSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGPlacementRestrictionSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGPlacementRestriction *previousValue =
      [DBTEAMLOGPlacementRestrictionSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGPlacementRestriction *dNewValue =
      [DBTEAMLOGPlacementRestrictionSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGDataPlacementRestrictionChangePolicyDetails alloc] initWithPreviousValue:previousValue
                                                                                   dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataPlacementRestrictionChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataPlacementRestrictionChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataPlacementRestrictionChangePolicyType:other];
}

- (BOOL)isEqualToDataPlacementRestrictionChangePolicyType:
    (DBTEAMLOGDataPlacementRestrictionChangePolicyType *)aDataPlacementRestrictionChangePolicyType {
  if (self == aDataPlacementRestrictionChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aDataPlacementRestrictionChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataPlacementRestrictionChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataPlacementRestrictionChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDataPlacementRestrictionChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails.h"
#import "DBTEAMLOGPlacementRestriction.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithPlacementRestriction:(DBTEAMLOGPlacementRestriction *)placementRestriction {
  [DBStoneValidators nonnullValidator:nil](placementRestriction);

  self = [super init];
  if (self) {
    _placementRestriction = placementRestriction;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.placementRestriction hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataPlacementRestrictionSatisfyPolicyDetails:other];
}

- (BOOL)isEqualToDataPlacementRestrictionSatisfyPolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)aDataPlacementRestrictionSatisfyPolicyDetails {
  if (self == aDataPlacementRestrictionSatisfyPolicyDetails) {
    return YES;
  }
  if (![self.placementRestriction isEqual:aDataPlacementRestrictionSatisfyPolicyDetails.placementRestriction]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"placement_restriction"] =
      [DBTEAMLOGPlacementRestrictionSerializer serialize:valueObj.placementRestriction];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGPlacementRestriction *placementRestriction =
      [DBTEAMLOGPlacementRestrictionSerializer deserialize:valueDict[@"placement_restriction"]];

  return
      [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails alloc] initWithPlacementRestriction:placementRestriction];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataPlacementRestrictionSatisfyPolicyType:other];
}

- (BOOL)isEqualToDataPlacementRestrictionSatisfyPolicyType:
    (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *)aDataPlacementRestrictionSatisfyPolicyType {
  if (self == aDataPlacementRestrictionSatisfyPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aDataPlacementRestrictionSatisfyPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDesktopDeviceSessionLogInfo.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"
#import "DBTEAMLOGLegacyDeviceSessionLogInfo.h"
#import "DBTEAMLOGMobileDeviceSessionLogInfo.h"
#import "DBTEAMLOGWebDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithIpAddress:(NSString *)ipAddress created:(NSDate *)created updated:(NSDate *)updated {

  self = [super init];
  if (self) {
    _ipAddress = ipAddress;
    _created = created;
    _updated = updated;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithIpAddress:nil created:nil updated:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceSessionLogInfo:other];
}

- (BOOL)isEqualToDeviceSessionLogInfo:(DBTEAMLOGDeviceSessionLogInfo *)aDeviceSessionLogInfo {
  if (self == aDeviceSessionLogInfo) {
    return YES;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aDeviceSessionLogInfo.ipAddress]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:aDeviceSessionLogInfo.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:aDeviceSessionLogInfo.updated]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  if ([valueObj isKindOfClass:[DBTEAMLOGDesktopDeviceSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer serialize:(DBTEAMLOGDesktopDeviceSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"desktopDeviceSession";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGMobileDeviceSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGMobileDeviceSessionLogInfoSerializer serialize:(DBTEAMLOGMobileDeviceSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"mobileDeviceSession";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGWebDeviceSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGWebDeviceSessionLogInfoSerializer serialize:(DBTEAMLOGWebDeviceSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"webDeviceSession";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGLegacyDeviceSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGLegacyDeviceSessionLogInfoSerializer serialize:(DBTEAMLOGLegacyDeviceSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"legacyDeviceSession";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"desktop_device_session"]) {
    return [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"mobile_device_session"]) {
    return [DBTEAMLOGMobileDeviceSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"web_device_session"]) {
    return [DBTEAMLOGWebDeviceSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"legacy_device_session"]) {
    return [DBTEAMLOGLegacyDeviceSessionLogInfoSerializer deserialize:valueDict];
  }

  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;

  return [[DBTEAMLOGDeviceSessionLogInfo alloc] initWithIpAddress:ipAddress created:created updated:updated];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDesktopPlatform.h"
#import "DBTEAMLOGDesktopDeviceSessionLogInfo.h"
#import "DBTEAMLOGDesktopSessionLogInfo.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDesktopDeviceSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithHostName:(NSString *)hostName
                      clientType:(DBTEAMDesktopPlatform *)clientType
                        platform:(NSString *)platform
       isDeleteOnUnlinkSupported:(NSNumber *)isDeleteOnUnlinkSupported
                       ipAddress:(NSString *)ipAddress
                         created:(NSDate *)created
                         updated:(NSDate *)updated
                     sessionInfo:(DBTEAMLOGDesktopSessionLogInfo *)sessionInfo
                   clientVersion:(NSString *)clientVersion {
  [DBStoneValidators nonnullValidator:nil](hostName);
  [DBStoneValidators nonnullValidator:nil](clientType);
  [DBStoneValidators nonnullValidator:nil](platform);
  [DBStoneValidators nonnullValidator:nil](isDeleteOnUnlinkSupported);

  self = [super initWithIpAddress:ipAddress created:created updated:updated];
  if (self) {
    _sessionInfo = sessionInfo;
    _hostName = hostName;
    _clientType = clientType;
    _clientVersion = clientVersion;
    _platform = platform;
    _isDeleteOnUnlinkSupported = isDeleteOnUnlinkSupported;
  }
  return self;
}

- (instancetype)initWithHostName:(NSString *)hostName
                      clientType:(DBTEAMDesktopPlatform *)clientType
                        platform:(NSString *)platform
       isDeleteOnUnlinkSupported:(NSNumber *)isDeleteOnUnlinkSupported {
  return [self initWithHostName:hostName
                     clientType:clientType
                       platform:platform
      isDeleteOnUnlinkSupported:isDeleteOnUnlinkSupported
                      ipAddress:nil
                        created:nil
                        updated:nil
                    sessionInfo:nil
                  clientVersion:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDesktopDeviceSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.hostName hash];
  result = prime * result + [self.clientType hash];
  result = prime * result + [self.platform hash];
  result = prime * result + [self.isDeleteOnUnlinkSupported hash];
  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }
  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }
  if (self.clientVersion != nil) {
    result = prime * result + [self.clientVersion hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDesktopDeviceSessionLogInfo:other];
}

- (BOOL)isEqualToDesktopDeviceSessionLogInfo:(DBTEAMLOGDesktopDeviceSessionLogInfo *)aDesktopDeviceSessionLogInfo {
  if (self == aDesktopDeviceSessionLogInfo) {
    return YES;
  }
  if (![self.hostName isEqual:aDesktopDeviceSessionLogInfo.hostName]) {
    return NO;
  }
  if (![self.clientType isEqual:aDesktopDeviceSessionLogInfo.clientType]) {
    return NO;
  }
  if (![self.platform isEqual:aDesktopDeviceSessionLogInfo.platform]) {
    return NO;
  }
  if (![self.isDeleteOnUnlinkSupported isEqual:aDesktopDeviceSessionLogInfo.isDeleteOnUnlinkSupported]) {
    return NO;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aDesktopDeviceSessionLogInfo.ipAddress]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:aDesktopDeviceSessionLogInfo.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:aDesktopDeviceSessionLogInfo.updated]) {
      return NO;
    }
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aDesktopDeviceSessionLogInfo.sessionInfo]) {
      return NO;
    }
  }
  if (self.clientVersion) {
    if (![self.clientVersion isEqual:aDesktopDeviceSessionLogInfo.clientVersion]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDesktopDeviceSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDesktopDeviceSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"host_name"] = valueObj.hostName;
  jsonDict[@"client_type"] = [DBTEAMDesktopPlatformSerializer serialize:valueObj.clientType];
  jsonDict[@"platform"] = valueObj.platform;
  jsonDict[@"is_delete_on_unlink_supported"] = valueObj.isDeleteOnUnlinkSupported;
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGDesktopSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }
  if (valueObj.clientVersion) {
    jsonDict[@"client_version"] = valueObj.clientVersion;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDesktopDeviceSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *hostName = valueDict[@"host_name"];
  DBTEAMDesktopPlatform *clientType = [DBTEAMDesktopPlatformSerializer deserialize:valueDict[@"client_type"]];
  NSString *platform = valueDict[@"platform"];
  NSNumber *isDeleteOnUnlinkSupported = valueDict[@"is_delete_on_unlink_supported"];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  DBTEAMLOGDesktopSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGDesktopSessionLogInfoSerializer deserialize:valueDict[@"session_info"]]
                                 : nil;
  NSString *clientVersion = valueDict[@"client_version"] ?: nil;

  return [[DBTEAMLOGDesktopDeviceSessionLogInfo alloc] initWithHostName:hostName
                                                             clientType:clientType
                                                               platform:platform
                                              isDeleteOnUnlinkSupported:isDeleteOnUnlinkSupported
                                                              ipAddress:ipAddress
                                                                created:created
                                                                updated:updated
                                                            sessionInfo:sessionInfo
                                                          clientVersion:clientVersion];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDesktopSessionLogInfo.h"
#import "DBTEAMLOGMobileSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"
#import "DBTEAMLOGWebSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId {

  self = [super init];
  if (self) {
    _sessionId = sessionId;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionId != nil) {
    result = prime * result + [self.sessionId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSessionLogInfo:other];
}

- (BOOL)isEqualToSessionLogInfo:(DBTEAMLOGSessionLogInfo *)aSessionLogInfo {
  if (self == aSessionLogInfo) {
    return YES;
  }
  if (self.sessionId) {
    if (![self.sessionId isEqual:aSessionLogInfo.sessionId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionId) {
    jsonDict[@"session_id"] = valueObj.sessionId;
  }

  if ([valueObj isKindOfClass:[DBTEAMLOGWebSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGWebSessionLogInfoSerializer serialize:(DBTEAMLOGWebSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"web";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGDesktopSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGDesktopSessionLogInfoSerializer serialize:(DBTEAMLOGDesktopSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"desktop";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGMobileSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGMobileSessionLogInfoSerializer serialize:(DBTEAMLOGMobileSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"mobile";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"web"]) {
    return [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"desktop"]) {
    return [DBTEAMLOGDesktopSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"mobile"]) {
    return [DBTEAMLOGMobileSessionLogInfoSerializer deserialize:valueDict];
  }

  NSString *sessionId = valueDict[@"session_id"] ?: nil;

  return [[DBTEAMLOGSessionLogInfo alloc] initWithSessionId:sessionId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDesktopSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDesktopSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId {

  self = [super initWithSessionId:sessionId];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDesktopSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDesktopSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDesktopSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionId != nil) {
    result = prime * result + [self.sessionId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDesktopSessionLogInfo:other];
}

- (BOOL)isEqualToDesktopSessionLogInfo:(DBTEAMLOGDesktopSessionLogInfo *)aDesktopSessionLogInfo {
  if (self == aDesktopSessionLogInfo) {
    return YES;
  }
  if (self.sessionId) {
    if (![self.sessionId isEqual:aDesktopSessionLogInfo.sessionId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDesktopSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDesktopSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionId) {
    jsonDict[@"session_id"] = valueObj.sessionId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDesktopSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sessionId = valueDict[@"session_id"] ?: nil;

  return [[DBTEAMLOGDesktopSessionLogInfo alloc] initWithSessionId:sessionId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDeviceApprovalsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDeviceApprovalsPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeDesktopPolicyDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeDesktopPolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)aDeviceApprovalsChangeDesktopPolicyDetails {
  if (self == aDeviceApprovalsChangeDesktopPolicyDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeDesktopPolicyDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeDesktopPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceApprovalsPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMLOGDeviceApprovalsPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeDesktopPolicyType:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeDesktopPolicyType:
    (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *)aDeviceApprovalsChangeDesktopPolicyType {
  if (self == aDeviceApprovalsChangeDesktopPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceApprovalsChangeDesktopPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDeviceApprovalsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDeviceApprovalsPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeMobilePolicyDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeMobilePolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)aDeviceApprovalsChangeMobilePolicyDetails {
  if (self == aDeviceApprovalsChangeMobilePolicyDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeMobilePolicyDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeMobilePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceApprovalsPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMLOGDeviceApprovalsPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails alloc] initWithDNewValue:dNewValue
                                                                        previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeMobilePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeMobilePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeMobilePolicyType:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeMobilePolicyType:
    (DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *)aDeviceApprovalsChangeMobilePolicyType {
  if (self == aDeviceApprovalsChangeMobilePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceApprovalsChangeMobilePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeOverageActionDetails.h"
#import "DBTEAMPOLICIESRolloutMethod.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeOverageActionDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESRolloutMethod *)dNewValue
                    previousValue:(DBTEAMPOLICIESRolloutMethod *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeOverageActionDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeOverageActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)aDeviceApprovalsChangeOverageActionDetails {
  if (self == aDeviceApprovalsChangeOverageActionDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeOverageActionDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeOverageActionDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMPOLICIESRolloutMethodSerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMPOLICIESRolloutMethodSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMPOLICIESRolloutMethod *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMPOLICIESRolloutMethodSerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMPOLICIESRolloutMethod *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMPOLICIESRolloutMethodSerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeOverageActionDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeOverageActionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeOverageActionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeOverageActionType:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeOverageActionType:
    (DBTEAMLOGDeviceApprovalsChangeOverageActionType *)aDeviceApprovalsChangeOverageActionType {
  if (self == aDeviceApprovalsChangeOverageActionType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceApprovalsChangeOverageActionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeOverageActionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeOverageActionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceApprovalsChangeOverageActionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails.h"
#import "DBTEAMLOGDeviceUnlinkPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDeviceUnlinkPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDeviceUnlinkPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeUnlinkActionDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeUnlinkActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)aDeviceApprovalsChangeUnlinkActionDetails {
  if (self == aDeviceApprovalsChangeUnlinkActionDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeUnlinkActionDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeUnlinkActionDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGDeviceUnlinkPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDeviceUnlinkPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceUnlinkPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGDeviceUnlinkPolicySerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMLOGDeviceUnlinkPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGDeviceUnlinkPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails alloc] initWithDNewValue:dNewValue
                                                                        previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeUnlinkActionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeUnlinkActionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeUnlinkActionType:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeUnlinkActionType:
    (DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *)aDeviceApprovalsChangeUnlinkActionType {
  if (self == aDeviceApprovalsChangeUnlinkActionType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceApprovalsChangeUnlinkActionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsPolicy

#pragma mark - Constructors

- (instancetype)initWithUnlimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyUnlimited;
  }
  return self;
}

- (instancetype)initWithLimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyLimited;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUnlimited {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyUnlimited;
}

- (BOOL)isLimited {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyLimited;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsPolicyUnlimited:
    return @"DBTEAMLOGDeviceApprovalsPolicyUnlimited";
  case DBTEAMLOGDeviceApprovalsPolicyLimited:
    return @"DBTEAMLOGDeviceApprovalsPolicyLimited";
  case DBTEAMLOGDeviceApprovalsPolicyOther:
    return @"DBTEAMLOGDeviceApprovalsPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsPolicyUnlimited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsPolicyLimited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsPolicy:other];
}

- (BOOL)isEqualToDeviceApprovalsPolicy:(DBTEAMLOGDeviceApprovalsPolicy *)aDeviceApprovalsPolicy {
  if (self == aDeviceApprovalsPolicy) {
    return YES;
  }
  if (self.tag != aDeviceApprovalsPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsPolicyUnlimited:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyLimited:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyOther:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUnlimited]) {
    jsonDict[@".tag"] = @"unlimited";
  } else if ([valueObj isLimited]) {
    jsonDict[@".tag"] = @"limited";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"unlimited"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithUnlimited];
  } else if ([tag isEqualToString:@"limited"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithLimited];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpDesktopDetails.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpDesktopDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceSessionInfo:(DBTEAMLOGDeviceSessionLogInfo *)deviceSessionInfo {
  [DBStoneValidators nonnullValidator:nil](deviceSessionInfo);

  self = [super init];
  if (self) {
    _deviceSessionInfo = deviceSessionInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceSessionInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpDesktopDetails:other];
}

- (BOOL)isEqualToDeviceChangeIpDesktopDetails:(DBTEAMLOGDeviceChangeIpDesktopDetails *)aDeviceChangeIpDesktopDetails {
  if (self == aDeviceChangeIpDesktopDetails) {
    return YES;
  }
  if (![self.deviceSessionInfo isEqual:aDeviceChangeIpDesktopDetails.deviceSessionInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpDesktopDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_session_info"] = [DBTEAMLOGDeviceSessionLogInfoSerializer serialize:valueObj.deviceSessionInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpDesktopDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceSessionLogInfo *deviceSessionInfo =
      [DBTEAMLOGDeviceSessionLogInfoSerializer deserialize:valueDict[@"device_session_info"]];

  return [[DBTEAMLOGDeviceChangeIpDesktopDetails alloc] initWithDeviceSessionInfo:deviceSessionInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpDesktopType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpDesktopType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpDesktopTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpDesktopTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceChangeIpDesktopTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpDesktopType:other];
}

- (BOOL)isEqualToDeviceChangeIpDesktopType:(DBTEAMLOGDeviceChangeIpDesktopType *)aDeviceChangeIpDesktopType {
  if (self == aDeviceChangeIpDesktopType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceChangeIpDesktopType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpDesktopTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpDesktopType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpDesktopType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceChangeIpDesktopType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpMobileDetails.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpMobileDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceSessionInfo:(DBTEAMLOGDeviceSessionLogInfo *)deviceSessionInfo {

  self = [super init];
  if (self) {
    _deviceSessionInfo = deviceSessionInfo;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDeviceSessionInfo:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpMobileDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpMobileDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceChangeIpMobileDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.deviceSessionInfo != nil) {
    result = prime * result + [self.deviceSessionInfo hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpMobileDetails:other];
}

- (BOOL)isEqualToDeviceChangeIpMobileDetails:(DBTEAMLOGDeviceChangeIpMobileDetails *)aDeviceChangeIpMobileDetails {
  if (self == aDeviceChangeIpMobileDetails) {
    return YES;
  }
  if (self.deviceSessionInfo) {
    if (![self.deviceSessionInfo isEqual:aDeviceChangeIpMobileDetails.deviceSessionInfo]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpMobileDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpMobileDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.deviceSessionInfo) {
    jsonDict[@"device_session_info"] = [DBTEAMLOGDeviceSessionLogInfoSerializer serialize:valueObj.deviceSessionInfo];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpMobileDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceSessionLogInfo *deviceSessionInfo =
      valueDict[@"device_session_info"]
          ? [DBTEAMLOGDeviceSessionLogInfoSerializer deserialize:valueDict[@"device_session_info"]]
          : nil;

  return [[DBTEAMLOGDeviceChangeIpMobileDetails alloc] initWithDeviceSessionInfo:deviceSessionInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpMobileType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpMobileType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpMobileTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpMobileTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceChangeIpMobileTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpMobileType:other];
}

- (BOOL)isEqualToDeviceChangeIpMobileType:(DBTEAMLOGDeviceChangeIpMobileType *)aDeviceChangeIpMobileType {
  if (self == aDeviceChangeIpMobileType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceChangeIpMobileType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpMobileTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpMobileType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpMobileType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceChangeIpMobileType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpWebDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpWebDetails

#pragma mark - Constructors

- (instancetype)initWithUserAgent:(NSString *)userAgent {
  [DBStoneValidators nonnullValidator:nil](userAgent);

  self = [super init];
  if (self) {
    _userAgent = userAgent;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpWebDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpWebDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceChangeIpWebDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.userAgent hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpWebDetails:other];
}

- (BOOL)isEqualToDeviceChangeIpWebDetails:(DBTEAMLOGDeviceChangeIpWebDetails *)aDeviceChangeIpWebDetails {
  if (self == aDeviceChangeIpWebDetails) {
    return YES;
  }
  if (![self.userAgent isEqual:aDeviceChangeIpWebDetails.userAgent]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpWebDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpWebDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user_agent"] = valueObj.userAgent;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpWebDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *userAgent = valueDict[@"user_agent"];

  return [[DBTEAMLOGDeviceChangeIpWebDetails alloc] initWithUserAgent:userAgent];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpWebType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpWebType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpWebTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpWebTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceChangeIpWebTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpWebType:other];
}

- (BOOL)isEqualToDeviceChangeIpWebType:(DBTEAMLOGDeviceChangeIpWebType *)aDeviceChangeIpWebType {
  if (self == aDeviceChangeIpWebType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceChangeIpWebType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpWebTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpWebType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpWebType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceChangeIpWebType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkFailDetails.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkFailDetails

#pragma mark - Constructors

- (instancetype)initWithNumFailures:(NSNumber *)numFailures
                        sessionInfo:(DBTEAMLOGSessionLogInfo *)sessionInfo
                        displayName:(NSString *)displayName {
  [DBStoneValidators nonnullValidator:nil](numFailures);

  self = [super init];
  if (self) {
    _sessionInfo = sessionInfo;
    _displayName = displayName;
    _numFailures = numFailures;
  }
  return self;
}

- (instancetype)initWithNumFailures:(NSNumber *)numFailures {
  return [self initWithNumFailures:numFailures sessionInfo:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.numFailures hash];
  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceDeleteOnUnlinkFailDetails:other];
}

- (BOOL)isEqualToDeviceDeleteOnUnlinkFailDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)aDeviceDeleteOnUnlinkFailDetails {
  if (self == aDeviceDeleteOnUnlinkFailDetails) {
    return YES;
  }
  if (![self.numFailures isEqual:aDeviceDeleteOnUnlinkFailDetails.numFailures]) {
    return NO;
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aDeviceDeleteOnUnlinkFailDetails.sessionInfo]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aDeviceDeleteOnUnlinkFailDetails.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"num_failures"] = valueObj.numFailures;
  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *numFailures = valueDict[@"num_failures"];
  DBTEAMLOGSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGSessionLogInfoSerializer deserialize:valueDict[@"session_info"]] : nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGDeviceDeleteOnUnlinkFailDetails alloc] initWithNumFailures:numFailures
                                                                   sessionInfo:sessionInfo
                                                                   displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkFailType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkFailType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceDeleteOnUnlinkFailType:other];
}

- (BOOL)isEqualToDeviceDeleteOnUnlinkFailType:(DBTEAMLOGDeviceDeleteOnUnlinkFailType *)aDeviceDeleteOnUnlinkFailType {
  if (self == aDeviceDeleteOnUnlinkFailType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceDeleteOnUnlinkFailType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceDeleteOnUnlinkFailType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceDeleteOnUnlinkFailType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceDeleteOnUnlinkFailType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithSessionInfo:(DBTEAMLOGSessionLogInfo *)sessionInfo displayName:(NSString *)displayName {

  self = [super init];
  if (self) {
    _sessionInfo = sessionInfo;
    _displayName = displayName;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionInfo:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceDeleteOnUnlinkSuccessDetails:other];
}

- (BOOL)isEqualToDeviceDeleteOnUnlinkSuccessDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)aDeviceDeleteOnUnlinkSuccessDetails {
  if (self == aDeviceDeleteOnUnlinkSuccessDetails) {
    return YES;
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aDeviceDeleteOnUnlinkSuccessDetails.sessionInfo]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aDeviceDeleteOnUnlinkSuccessDetails.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGSessionLogInfoSerializer deserialize:valueDict[@"session_info"]] : nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails alloc] initWithSessionInfo:sessionInfo displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkSuccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkSuccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceDeleteOnUnlinkSuccessType:other];
}

- (BOOL)isEqualToDeviceDeleteOnUnlinkSuccessType:
    (DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *)aDeviceDeleteOnUnlinkSuccessType {
  if (self == aDeviceDeleteOnUnlinkSuccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceDeleteOnUnlinkSuccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLinkFailDetails.h"
#import "DBTEAMLOGDeviceType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLinkFailDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceType:(DBTEAMLOGDeviceType *)deviceType ipAddress:(NSString *)ipAddress {
  [DBStoneValidators nonnullValidator:nil](deviceType);

  self = [super init];
  if (self) {
    _ipAddress = ipAddress;
    _deviceType = deviceType;
  }
  return self;
}

- (instancetype)initWithDeviceType:(DBTEAMLOGDeviceType *)deviceType {
  return [self initWithDeviceType:deviceType ipAddress:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLinkFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceLinkFailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceLinkFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceType hash];
  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLinkFailDetails:other];
}

- (BOOL)isEqualToDeviceLinkFailDetails:(DBTEAMLOGDeviceLinkFailDetails *)aDeviceLinkFailDetails {
  if (self == aDeviceLinkFailDetails) {
    return YES;
  }
  if (![self.deviceType isEqual:aDeviceLinkFailDetails.deviceType]) {
    return NO;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aDeviceLinkFailDetails.ipAddress]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLinkFailDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceLinkFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_type"] = [DBTEAMLOGDeviceTypeSerializer serialize:valueObj.deviceType];
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceLinkFailDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceType *deviceType = [DBTEAMLOGDeviceTypeSerializer deserialize:valueDict[@"device_type"]];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;

  return [[DBTEAMLOGDeviceLinkFailDetails alloc] initWithDeviceType:deviceType ipAddress:ipAddress];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLinkFailType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLinkFailType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLinkFailTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceLinkFailTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceLinkFailTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLinkFailType:other];
}

- (BOOL)isEqualToDeviceLinkFailType:(DBTEAMLOGDeviceLinkFailType *)aDeviceLinkFailType {
  if (self == aDeviceLinkFailType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceLinkFailType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLinkFailTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceLinkFailType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceLinkFailType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceLinkFailType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLinkSuccessDetails.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLinkSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceSessionInfo:(DBTEAMLOGDeviceSessionLogInfo *)deviceSessionInfo {

  self = [super init];
  if (self) {
    _deviceSessionInfo = deviceSessionInfo;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDeviceSessionInfo:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLinkSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceLinkSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceLinkSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.deviceSessionInfo != nil) {
    result = prime * result + [self.deviceSessionInfo hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLinkSuccessDetails:other];
}

- (BOOL)isEqualToDeviceLinkSuccessDetails:(DBTEAMLOGDeviceLinkSuccessDetails *)aDeviceLinkSuccessDetails {
  if (self == aDeviceLinkSuccessDetails) {
    return YES;
  }
  if (self.deviceSessionInfo) {
    if (![self.deviceSessionInfo isEqual:aDeviceLinkSuccessDetails.deviceSessionInfo]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLinkSuccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceLinkSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.deviceSessionInfo) {
    jsonDict[@"device_session_info"] = [DBTEAMLOGDeviceSessionLogInfoSerializer serialize:valueObj.deviceSessionInfo];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceLinkSuccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceSessionLogInfo *deviceSessionInfo =
      valueDict[@"device_session_info"]
          ? [DBTEAMLOGDeviceSessionLogInfoSerializer deserialize:valueDict[@"device_session_info"]]
          : nil;

  return [[DBTEAMLOGDeviceLinkSuccessDetails alloc] initWithDeviceSessionInfo:deviceSessionInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLinkSuccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLinkSuccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLinkSuccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceLinkSuccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceLinkSuccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLinkSuccessType:other];
}

- (BOOL)isEqualToDeviceLinkSuccessType:(DBTEAMLOGDeviceLinkSuccessType *)aDeviceLinkSuccessType {
  if (self == aDeviceLinkSuccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceLinkSuccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLinkSuccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceLinkSuccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceLinkSuccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceLinkSuccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceManagementDisabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceManagementDisabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceManagementDisabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceManagementDisabledDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceManagementDisabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceManagementDisabledDetails:other];
}

- (BOOL)isEqualToDeviceManagementDisabledDetails:
    (DBTEAMLOGDeviceManagementDisabledDetails *)aDeviceManagementDisabledDetails {
  if (self == aDeviceManagementDisabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceManagementDisabledDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceManagementDisabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceManagementDisabledDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDeviceManagementDisabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceManagementDisabledType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceManagementDisabledType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceManagementDisabledTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceManagementDisabledTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceManagementDisabledTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceManagementDisabledType:other];
}

- (BOOL)isEqualToDeviceManagementDisabledType:(DBTEAMLOGDeviceManagementDisabledType *)aDeviceManagementDisabledType {
  if (self == aDeviceManagementDisabledType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceManagementDisabledType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceManagementDisabledTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceManagementDisabledType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceManagementDisabledType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceManagementDisabledType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceManagementEnabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceManagementEnabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceManagementEnabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceManagementEnabledDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceManagementEnabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceManagementEnabledDetails:other];
}

- (BOOL)isEqualToDeviceManagementEnabledDetails:
    (DBTEAMLOGDeviceManagementEnabledDetails *)aDeviceManagementEnabledDetails {
  if (self == aDeviceManagementEnabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceManagementEnabledDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceManagementEnabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceManagementEnabledDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDeviceManagementEnabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceManagementEnabledType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceManagementEnabledType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceManagementEnabledTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceManagementEnabledTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceManagementEnabledTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceManagementEnabledType:other];
}

- (BOOL)isEqualToDeviceManagementEnabledType:(DBTEAMLOGDeviceManagementEnabledType *)aDeviceManagementEnabledType {
  if (self == aDeviceManagementEnabledType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceManagementEnabledType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceManagementEnabledTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceManagementEnabledType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceManagementEnabledType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceManagementEnabledType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceType

#pragma mark - Constructors

- (instancetype)initWithDesktop {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceTypeDesktop;
  }
  return self;
}

- (instancetype)initWithMobile {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceTypeMobile;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDesktop {
  return _tag == DBTEAMLOGDeviceTypeDesktop;
}

- (BOOL)isMobile {
  return _tag == DBTEAMLOGDeviceTypeMobile;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDeviceTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDeviceTypeDesktop:
    return @"DBTEAMLOGDeviceTypeDesktop";
  case DBTEAMLOGDeviceTypeMobile:
    return @"DBTEAMLOGDeviceTypeMobile";
  case DBTEAMLOGDeviceTypeOther:
    return @"DBTEAMLOGDeviceTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDeviceTypeDesktop:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceTypeMobile:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceType:other];
}

- (BOOL)isEqualToDeviceType:(DBTEAMLOGDeviceType *)aDeviceType {
  if (self == aDeviceType) {
    return YES;
  }
  if (self.tag != aDeviceType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDeviceTypeDesktop:
    return [[self tagName] isEqual:[aDeviceType tagName]];
  case DBTEAMLOGDeviceTypeMobile:
    return [[self tagName] isEqual:[aDeviceType tagName]];
  case DBTEAMLOGDeviceTypeOther:
    return [[self tagName] isEqual:[aDeviceType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDesktop]) {
    jsonDict[@".tag"] = @"desktop";
  } else if ([valueObj isMobile]) {
    jsonDict[@".tag"] = @"mobile";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"desktop"]) {
    return [[DBTEAMLOGDeviceType alloc] initWithDesktop];
  } else if ([tag isEqualToString:@"mobile"]) {
    return [[DBTEAMLOGDeviceType alloc] initWithMobile];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDeviceType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDeviceType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceUnlinkDetails.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceUnlinkDetails

#pragma mark - Constructors

- (instancetype)initWithDeleteData:(NSNumber *)deleteData
                       sessionInfo:(DBTEAMLOGSessionLogInfo *)sessionInfo
                       displayName:(NSString *)displayName {
  [DBStoneValidators nonnullValidator:nil](deleteData);

  self = [super init];
  if (self) {
    _sessionInfo = sessionInfo;
    _displayName = displayName;
    _deleteData = deleteData;
  }
  return self;
}

- (instancetype)initWithDeleteData:(NSNumber *)deleteData {
  return [self initWithDeleteData:deleteData sessionInfo:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceUnlinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceUnlinkDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceUnlinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deleteData hash];
  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceUnlinkDetails:other];
}

- (BOOL)isEqualToDeviceUnlinkDetails:(DBTEAMLOGDeviceUnlinkDetails *)aDeviceUnlinkDetails {
  if (self == aDeviceUnlinkDetails) {
    return YES;
  }
  if (![self.deleteData isEqual:aDeviceUnlinkDetails.deleteData]) {
    return NO;
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aDeviceUnlinkDetails.sessionInfo]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aDeviceUnlinkDetails.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceUnlinkDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceUnlinkDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"delete_data"] = valueObj.deleteData;
  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceUnlinkDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *deleteData = valueDict[@"delete_data"];
  DBTEAMLOGSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGSessionLogInfoSerializer deserialize:valueDict[@"session_info"]] : nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGDeviceUnlinkDetails alloc] initWithDeleteData:deleteData
                                                      sessionInfo:sessionInfo
                                                      displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceUnlinkPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceUnlinkPolicy

#pragma mark - Constructors

- (instancetype)initWithRemove {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceUnlinkPolicyRemove;
  }
  return self;
}

- (instancetype)initWithKeep {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceUnlinkPolicyKeep;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceUnlinkPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isRemove {
  return _tag == DBTEAMLOGDeviceUnlinkPolicyRemove;
}

- (BOOL)isKeep {
  return _tag == DBTEAMLOGDeviceUnlinkPolicyKeep;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDeviceUnlinkPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDeviceUnlinkPolicyRemove:
    return @"DBTEAMLOGDeviceUnlinkPolicyRemove";
  case DBTEAMLOGDeviceUnlinkPolicyKeep:
    return @"DBTEAMLOGDeviceUnlinkPolicyKeep";
  case DBTEAMLOGDeviceUnlinkPolicyOther:
    return @"DBTEAMLOGDeviceUnlinkPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceUnlinkPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceUnlinkPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceUnlinkPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDeviceUnlinkPolicyRemove:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceUnlinkPolicyKeep:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceUnlinkPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceUnlinkPolicy:other];
}

- (BOOL)isEqualToDeviceUnlinkPolicy:(DBTEAMLOGDeviceUnlinkPolicy *)aDeviceUnlinkPolicy {
  if (self == aDeviceUnlinkPolicy) {
    return YES;
  }
  if (self.tag != aDeviceUnlinkPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDeviceUnlinkPolicyRemove:
    return [[self tagName] isEqual:[aDeviceUnlinkPolicy tagName]];
  case DBTEAMLOGDeviceUnlinkPolicyKeep:
    return [[self tagName] isEqual:[aDeviceUnlinkPolicy tagName]];
  case DBTEAMLOGDeviceUnlinkPolicyOther:
    return [[self tagName] isEqual:[aDeviceUnlinkPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceUnlinkPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceUnlinkPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isRemove]) {
    jsonDict[@".tag"] = @"remove";
  } else if ([valueObj isKeep]) {
    jsonDict[@".tag"] = @"keep";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceUnlinkPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"remove"]) {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithRemove];
  } else if ([tag isEqualToString:@"keep"]) {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithKeep];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceUnlinkType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceUnlinkType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceUnlinkTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceUnlinkTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceUnlinkTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceUnlinkType:other];
}

- (BOOL)isEqualToDeviceUnlinkType:(DBTEAMLOGDeviceUnlinkType *)aDeviceUnlinkType {
  if (self == aDeviceUnlinkType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceUnlinkType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceUnlinkTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceUnlinkType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceUnlinkType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceUnlinkType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDirectoryRestrictionsAddMembersDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDirectoryRestrictionsAddMembersDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDirectoryRestrictionsAddMembersDetails:other];
}

- (BOOL)isEqualToDirectoryRestrictionsAddMembersDetails:
    (DBTEAMLOGDirectoryRestrictionsAddMembersDetails *)aDirectoryRestrictionsAddMembersDetails {
  if (self == aDirectoryRestrictionsAddMembersDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDirectoryRestrictionsAddMembersDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDirectoryRestrictionsAddMembersDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDirectoryRestrictionsAddMembersDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDirectoryRestrictionsAddMembersType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDirectoryRestrictionsAddMembersType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDirectoryRestrictionsAddMembersType:other];
}

- (BOOL)isEqualToDirectoryRestrictionsAddMembersType:
    (DBTEAMLOGDirectoryRestrictionsAddMembersType *)aDirectoryRestrictionsAddMembersType {
  if (self == aDirectoryRestrictionsAddMembersType) {
    return YES;
  }
  if (![self.description_ isEqual:aDirectoryRestrictionsAddMembersType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDirectoryRestrictionsAddMembersType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDirectoryRestrictionsAddMembersType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDirectoryRestrictionsAddMembersType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDirectoryRestrictionsRemoveMembersDetails:other];
}

- (BOOL)isEqualToDirectoryRestrictionsRemoveMembersDetails:
    (DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *)aDirectoryRestrictionsRemoveMembersDetails {
  if (self == aDirectoryRestrictionsRemoveMembersDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDirectoryRestrictionsRemoveMembersType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDirectoryRestrictionsRemoveMembersType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDirectoryRestrictionsRemoveMembersType:other];
}

- (BOOL)isEqualToDirectoryRestrictionsRemoveMembersType:
    (DBTEAMLOGDirectoryRestrictionsRemoveMembersType *)aDirectoryRestrictionsRemoveMembersType {
  if (self == aDirectoryRestrictionsRemoveMembersType) {
    return YES;
  }
  if (![self.description_ isEqual:aDirectoryRestrictionsRemoveMembersType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDirectoryRestrictionsRemoveMembersType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDirectoryRestrictionsRemoveMembersType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDirectoryRestrictionsRemoveMembersType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDisabledDomainInvitesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDisabledDomainInvitesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDisabledDomainInvitesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDisabledDomainInvitesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDisabledDomainInvitesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDisabledDomainInvitesDetails:other];
}

- (BOOL)isEqualToDisabledDomainInvitesDetails:(DBTEAMLOGDisabledDomainInvitesDetails *)aDisabledDomainInvitesDetails {
  if (self == aDisabledDomainInvitesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDisabledDomainInvitesDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDisabledDomainInvitesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDisabledDomainInvitesDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDisabledDomainInvitesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDisabledDomainInvitesType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDisabledDomainInvitesType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDisabledDomainInvitesTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDisabledDomainInvitesTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDisabledDomainInvitesTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDisabledDomainInvitesType:other];
}

- (BOOL)isEqualToDisabledDomainInvitesType:(DBTEAMLOGDisabledDomainInvitesType *)aDisabledDomainInvitesType {
  if (self == aDisabledDomainInvitesType) {
    return YES;
  }
  if (![self.description_ isEqual:aDisabledDomainInvitesType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDisabledDomainInvitesTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDisabledDomainInvitesType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDisabledDomainInvitesType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDisabledDomainInvitesType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesApproveRequestToJoinTeamDetails:other];
}

- (BOOL)isEqualToDomainInvitesApproveRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)aDomainInvitesApproveRequestToJoinTeamDetails {
  if (self == aDomainInvitesApproveRequestToJoinTeamDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesApproveRequestToJoinTeamType:other];
}

- (BOOL)isEqualToDomainInvitesApproveRequestToJoinTeamType:
    (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *)aDomainInvitesApproveRequestToJoinTeamType {
  if (self == aDomainInvitesApproveRequestToJoinTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesApproveRequestToJoinTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesDeclineRequestToJoinTeamDetails:other];
}

- (BOOL)isEqualToDomainInvitesDeclineRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)aDomainInvitesDeclineRequestToJoinTeamDetails {
  if (self == aDomainInvitesDeclineRequestToJoinTeamDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesDeclineRequestToJoinTeamType:other];
}

- (BOOL)isEqualToDomainInvitesDeclineRequestToJoinTeamType:
    (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *)aDomainInvitesDeclineRequestToJoinTeamType {
  if (self == aDomainInvitesDeclineRequestToJoinTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesDeclineRequestToJoinTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesEmailExistingUsersDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesEmailExistingUsersDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSString *)domainName numRecipients:(NSNumber *)numRecipients {
  [DBStoneValidators nonnullValidator:nil](domainName);
  [DBStoneValidators nonnullValidator:nil](numRecipients);

  self = [super init];
  if (self) {
    _domainName = domainName;
    _numRecipients = numRecipients;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];
  result = prime * result + [self.numRecipients hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesEmailExistingUsersDetails:other];
}

- (BOOL)isEqualToDomainInvitesEmailExistingUsersDetails:
    (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)aDomainInvitesEmailExistingUsersDetails {
  if (self == aDomainInvitesEmailExistingUsersDetails) {
    return YES;
  }
  if (![self.domainName isEqual:aDomainInvitesEmailExistingUsersDetails.domainName]) {
    return NO;
  }
  if (![self.numRecipients isEqual:aDomainInvitesEmailExistingUsersDetails.numRecipients]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = valueObj.domainName;
  jsonDict[@"num_recipients"] = valueObj.numRecipients;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *domainName = valueDict[@"domain_name"];
  NSNumber *numRecipients = valueDict[@"num_recipients"];

  return [[DBTEAMLOGDomainInvitesEmailExistingUsersDetails alloc] initWithDomainName:domainName
                                                                       numRecipients:numRecipients];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesEmailExistingUsersType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesEmailExistingUsersType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesEmailExistingUsersType:other];
}

- (BOOL)isEqualToDomainInvitesEmailExistingUsersType:
    (DBTEAMLOGDomainInvitesEmailExistingUsersType *)aDomainInvitesEmailExistingUsersType {
  if (self == aDomainInvitesEmailExistingUsersType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesEmailExistingUsersType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesEmailExistingUsersType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesEmailExistingUsersType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesEmailExistingUsersType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesRequestToJoinTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesRequestToJoinTeamDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesRequestToJoinTeamDetails:other];
}

- (BOOL)isEqualToDomainInvitesRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)aDomainInvitesRequestToJoinTeamDetails {
  if (self == aDomainInvitesRequestToJoinTeamDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesRequestToJoinTeamDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesRequestToJoinTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesRequestToJoinTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesRequestToJoinTeamType:other];
}

- (BOOL)isEqualToDomainInvitesRequestToJoinTeamType:
    (DBTEAMLOGDomainInvitesRequestToJoinTeamType *)aDomainInvitesRequestToJoinTeamType {
  if (self == aDomainInvitesRequestToJoinTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesRequestToJoinTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesRequestToJoinTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesRequestToJoinTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesRequestToJoinTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesSetInviteNewUserPrefToNoDetails:other];
}

- (BOOL)isEqualToDomainInvitesSetInviteNewUserPrefToNoDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)aDomainInvitesSetInviteNewUserPrefToNoDetails {
  if (self == aDomainInvitesSetInviteNewUserPrefToNoDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesSetInviteNewUserPrefToNoType:other];
}

- (BOOL)isEqualToDomainInvitesSetInviteNewUserPrefToNoType:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *)aDomainInvitesSetInviteNewUserPrefToNoType {
  if (self == aDomainInvitesSetInviteNewUserPrefToNoType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesSetInviteNewUserPrefToNoType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesSetInviteNewUserPrefToYesDetails:other];
}

- (BOOL)isEqualToDomainInvitesSetInviteNewUserPrefToYesDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)aDomainInvitesSetInviteNewUserPrefToYesDetails {
  if (self == aDomainInvitesSetInviteNewUserPrefToYesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesSetInviteNewUserPrefToYesType:other];
}

- (BOOL)isEqualToDomainInvitesSetInviteNewUserPrefToYesType:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *)aDomainInvitesSetInviteNewUserPrefToYesType {
  if (self == aDomainInvitesSetInviteNewUserPrefToYesType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesSetInviteNewUserPrefToYesType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationAddDomainFailDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationAddDomainFailDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSString *)domainName verificationMethod:(NSString *)verificationMethod {
  [DBStoneValidators nonnullValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
    _verificationMethod = verificationMethod;
  }
  return self;
}

- (instancetype)initWithDomainName:(NSString *)domainName {
  return [self initWithDomainName:domainName verificationMethod:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];
  if (self.verificationMethod != nil) {
    result = prime * result + [self.verificationMethod hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationAddDomainFailDetails:other];
}

- (BOOL)isEqualToDomainVerificationAddDomainFailDetails:
    (DBTEAMLOGDomainVerificationAddDomainFailDetails *)aDomainVerificationAddDomainFailDetails {
  if (self == aDomainVerificationAddDomainFailDetails) {
    return YES;
  }
  if (![self.domainName isEqual:aDomainVerificationAddDomainFailDetails.domainName]) {
    return NO;
  }
  if (self.verificationMethod) {
    if (![self.verificationMethod isEqual:aDomainVerificationAddDomainFailDetails.verificationMethod]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationAddDomainFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = valueObj.domainName;
  if (valueObj.verificationMethod) {
    jsonDict[@"verification_method"] = valueObj.verificationMethod;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationAddDomainFailDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *domainName = valueDict[@"domain_name"];
  NSString *verificationMethod = valueDict[@"verification_method"] ?: nil;

  return [[DBTEAMLOGDomainVerificationAddDomainFailDetails alloc] initWithDomainName:domainName
                                                                  verificationMethod:verificationMethod];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationAddDomainFailType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationAddDomainFailType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationAddDomainFailType:other];
}

- (BOOL)isEqualToDomainVerificationAddDomainFailType:
    (DBTEAMLOGDomainVerificationAddDomainFailType *)aDomainVerificationAddDomainFailType {
  if (self == aDomainVerificationAddDomainFailType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainVerificationAddDomainFailType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationAddDomainFailType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationAddDomainFailType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainVerificationAddDomainFailType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationAddDomainSuccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationAddDomainSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames
                 verificationMethod:(NSString *)verificationMethod {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](domainNames);

  self = [super init];
  if (self) {
    _domainNames = domainNames;
    _verificationMethod = verificationMethod;
  }
  return self;
}

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames {
  return [self initWithDomainNames:domainNames verificationMethod:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainNames hash];
  if (self.verificationMethod != nil) {
    result = prime * result + [self.verificationMethod hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationAddDomainSuccessDetails:other];
}

- (BOOL)isEqualToDomainVerificationAddDomainSuccessDetails:
    (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)aDomainVerificationAddDomainSuccessDetails {
  if (self == aDomainVerificationAddDomainSuccessDetails) {
    return YES;
  }
  if (![self.domainNames isEqual:aDomainVerificationAddDomainSuccessDetails.domainNames]) {
    return NO;
  }
  if (self.verificationMethod) {
    if (![self.verificationMethod isEqual:aDomainVerificationAddDomainSuccessDetails.verificationMethod]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_names"] = [DBArraySerializer serialize:valueObj.domainNames
                                                 withBlock:^id(id elem0) {
                                                   return elem0;
                                                 }];
  if (valueObj.verificationMethod) {
    jsonDict[@"verification_method"] = valueObj.verificationMethod;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<NSString *> *domainNames = [DBArraySerializer deserialize:valueDict[@"domain_names"]
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];
  NSString *verificationMethod = valueDict[@"verification_method"] ?: nil;

  return [[DBTEAMLOGDomainVerificationAddDomainSuccessDetails alloc] initWithDomainNames:domainNames
                                                                      verificationMethod:verificationMethod];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationAddDomainSuccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationAddDomainSuccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationAddDomainSuccessType:other];
}

- (BOOL)isEqualToDomainVerificationAddDomainSuccessType:
    (DBTEAMLOGDomainVerificationAddDomainSuccessType *)aDomainVerificationAddDomainSuccessType {
  if (self == aDomainVerificationAddDomainSuccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainVerificationAddDomainSuccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationAddDomainSuccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationAddDomainSuccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainVerificationAddDomainSuccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationRemoveDomainDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationRemoveDomainDetails

#pragma mark - Constructors

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](domainNames);

  self = [super init];
  if (self) {
    _domainNames = domainNames;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainNames hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationRemoveDomainDetails:other];
}

- (BOOL)isEqualToDomainVerificationRemoveDomainDetails:
    (DBTEAMLOGDomainVerificationRemoveDomainDetails *)aDomainVerificationRemoveDomainDetails {
  if (self == aDomainVerificationRemoveDomainDetails) {
    return YES;
  }
  if (![self.domainNames isEqual:aDomainVerificationRemoveDomainDetails.domainNames]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationRemoveDomainDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_names"] = [DBArraySerializer serialize:valueObj.domainNames
                                                 withBlock:^id(id elem0) {
                                                   return elem0;
                                                 }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationRemoveDomainDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<NSString *> *domainNames = [DBArraySerializer deserialize:valueDict[@"domain_names"]
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];

  return [[DBTEAMLOGDomainVerificationRemoveDomainDetails alloc] initWithDomainNames:domainNames];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationRemoveDomainType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationRemoveDomainType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationRemoveDomainType:other];
}

- (BOOL)isEqualToDomainVerificationRemoveDomainType:
    (DBTEAMLOGDomainVerificationRemoveDomainType *)aDomainVerificationRemoveDomainType {
  if (self == aDomainVerificationRemoveDomainType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainVerificationRemoveDomainType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationRemoveDomainType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationRemoveDomainType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainVerificationRemoveDomainType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDownloadPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDownloadPolicyType

#pragma mark - Constructors

- (instancetype)initWithAllow {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDownloadPolicyTypeAllow;
  }
  return self;
}

- (instancetype)initWithDisallow {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDownloadPolicyTypeDisallow;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDownloadPolicyTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAllow {
  return _tag == DBTEAMLOGDownloadPolicyTypeAllow;
}

- (BOOL)isDisallow {
  return _tag == DBTEAMLOGDownloadPolicyTypeDisallow;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDownloadPolicyTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDownloadPolicyTypeAllow:
    return @"DBTEAMLOGDownloadPolicyTypeAllow";
  case DBTEAMLOGDownloadPolicyTypeDisallow:
    return @"DBTEAMLOGDownloadPolicyTypeDisallow";
  case DBTEAMLOGDownloadPolicyTypeOther:
    return @"DBTEAMLOGDownloadPolicyTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDownloadPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDownloadPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDownloadPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDownloadPolicyTypeAllow:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDownloadPolicyTypeDisallow:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDownloadPolicyTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDownloadPolicyType:other];
}

- (BOOL)isEqualToDownloadPolicyType:(DBTEAMLOGDownloadPolicyType *)aDownloadPolicyType {
  if (self == aDownloadPolicyType) {
    return YES;
  }
  if (self.tag != aDownloadPolicyType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDownloadPolicyTypeAllow:
    return [[self tagName] isEqual:[aDownloadPolicyType tagName]];
  case DBTEAMLOGDownloadPolicyTypeDisallow:
    return [[self tagName] isEqual:[aDownloadPolicyType tagName]];
  case DBTEAMLOGDownloadPolicyTypeOther:
    return [[self tagName] isEqual:[aDownloadPolicyType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDownloadPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDownloadPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAllow]) {
    jsonDict[@".tag"] = @"allow";
  } else if ([valueObj isDisallow]) {
    jsonDict[@".tag"] = @"disallow";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDownloadPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"allow"]) {
    return [[DBTEAMLOGDownloadPolicyType alloc] initWithAllow];
  } else if ([tag isEqualToString:@"disallow"]) {
    return [[DBTEAMLOGDownloadPolicyType alloc] initWithDisallow];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDownloadPolicyType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDownloadPolicyType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDurationLogInfo.h"
#import "DBTEAMLOGTimeUnit.h"

#pragma mark - API Object

@implementation DBTEAMLOGDurationLogInfo

#pragma mark - Constructors

- (instancetype)initWithUnit:(DBTEAMLOGTimeUnit *)unit amount:(NSNumber *)amount {
  [DBStoneValidators nonnullValidator:nil](unit);
  [DBStoneValidators nonnullValidator:nil](amount);

  self = [super init];
  if (self) {
    _unit = unit;
    _amount = amount;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDurationLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDurationLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDurationLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.unit hash];
  result = prime * result + [self.amount hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDurationLogInfo:other];
}

- (BOOL)isEqualToDurationLogInfo:(DBTEAMLOGDurationLogInfo *)aDurationLogInfo {
  if (self == aDurationLogInfo) {
    return YES;
  }
  if (![self.unit isEqual:aDurationLogInfo.unit]) {
    return NO;
  }
  if (![self.amount isEqual:aDurationLogInfo.amount]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDurationLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDurationLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"unit"] = [DBTEAMLOGTimeUnitSerializer serialize:valueObj.unit];
  jsonDict[@"amount"] = valueObj.amount;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDurationLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGTimeUnit *unit = [DBTEAMLOGTimeUnitSerializer deserialize:valueDict[@"unit"]];
  NSNumber *amount = valueDict[@"amount"];

  return [[DBTEAMLOGDurationLogInfo alloc] initWithUnit:unit amount:amount];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmAddExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmAddExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmAddExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmAddExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmAddExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmAddExceptionDetails:other];
}

- (BOOL)isEqualToEmmAddExceptionDetails:(DBTEAMLOGEmmAddExceptionDetails *)anEmmAddExceptionDetails {
  if (self == anEmmAddExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmAddExceptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmAddExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmAddExceptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmAddExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmAddExceptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmAddExceptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmAddExceptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmAddExceptionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmAddExceptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmAddExceptionType:other];
}

- (BOOL)isEqualToEmmAddExceptionType:(DBTEAMLOGEmmAddExceptionType *)anEmmAddExceptionType {
  if (self == anEmmAddExceptionType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmAddExceptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmAddExceptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmAddExceptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmAddExceptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmAddExceptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmChangePolicyDetails.h"
#import "DBTEAMPOLICIESEmmState.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESEmmState *)dNewValue
                    previousValue:(DBTEAMPOLICIESEmmState *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESEmmState *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmChangePolicyDetails:other];
}

- (BOOL)isEqualToEmmChangePolicyDetails:(DBTEAMLOGEmmChangePolicyDetails *)anEmmChangePolicyDetails {
  if (self == anEmmChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anEmmChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:anEmmChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMPOLICIESEmmStateSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMPOLICIESEmmStateSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMPOLICIESEmmState *dNewValue = [DBTEAMPOLICIESEmmStateSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMPOLICIESEmmState *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMPOLICIESEmmStateSerializer deserialize:valueDict[@"previous_value"]] : nil;

  return [[DBTEAMLOGEmmChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmChangePolicyType:other];
}

- (BOOL)isEqualToEmmChangePolicyType:(DBTEAMLOGEmmChangePolicyType *)anEmmChangePolicyType {
  if (self == anEmmChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmCreateExceptionsReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmCreateExceptionsReportDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmCreateExceptionsReportDetails:other];
}

- (BOOL)isEqualToEmmCreateExceptionsReportDetails:
    (DBTEAMLOGEmmCreateExceptionsReportDetails *)anEmmCreateExceptionsReportDetails {
  if (self == anEmmCreateExceptionsReportDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmCreateExceptionsReportDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmCreateExceptionsReportDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmCreateExceptionsReportDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmCreateExceptionsReportType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmCreateExceptionsReportType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmCreateExceptionsReportTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmCreateExceptionsReportTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmCreateExceptionsReportTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmCreateExceptionsReportType:other];
}

- (BOOL)isEqualToEmmCreateExceptionsReportType:
    (DBTEAMLOGEmmCreateExceptionsReportType *)anEmmCreateExceptionsReportType {
  if (self == anEmmCreateExceptionsReportType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmCreateExceptionsReportType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmCreateExceptionsReportTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmCreateExceptionsReportType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmCreateExceptionsReportType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmCreateExceptionsReportType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmCreateUsageReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmCreateUsageReportDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmCreateUsageReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmCreateUsageReportDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmCreateUsageReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmCreateUsageReportDetails:other];
}

- (BOOL)isEqualToEmmCreateUsageReportDetails:(DBTEAMLOGEmmCreateUsageReportDetails *)anEmmCreateUsageReportDetails {
  if (self == anEmmCreateUsageReportDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmCreateUsageReportDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmCreateUsageReportDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmCreateUsageReportDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmCreateUsageReportDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmCreateUsageReportType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmCreateUsageReportType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmCreateUsageReportTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmCreateUsageReportTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmCreateUsageReportTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmCreateUsageReportType:other];
}

- (BOOL)isEqualToEmmCreateUsageReportType:(DBTEAMLOGEmmCreateUsageReportType *)anEmmCreateUsageReportType {
  if (self == anEmmCreateUsageReportType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmCreateUsageReportType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmCreateUsageReportTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmCreateUsageReportType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmCreateUsageReportType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmCreateUsageReportType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmErrorDetails.h"
#import "DBTEAMLOGFailureDetailsLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmErrorDetails

#pragma mark - Constructors

- (instancetype)initWithErrorDetails:(DBTEAMLOGFailureDetailsLogInfo *)errorDetails {
  [DBStoneValidators nonnullValidator:nil](errorDetails);

  self = [super init];
  if (self) {
    _errorDetails = errorDetails;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmErrorDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmErrorDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmErrorDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.errorDetails hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmErrorDetails:other];
}

- (BOOL)isEqualToEmmErrorDetails:(DBTEAMLOGEmmErrorDetails *)anEmmErrorDetails {
  if (self == anEmmErrorDetails) {
    return YES;
  }
  if (![self.errorDetails isEqual:anEmmErrorDetails.errorDetails]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmErrorDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmErrorDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"error_details"] = [DBTEAMLOGFailureDetailsLogInfoSerializer serialize:valueObj.errorDetails];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmErrorDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGFailureDetailsLogInfo *errorDetails =
      [DBTEAMLOGFailureDetailsLogInfoSerializer deserialize:valueDict[@"error_details"]];

  return [[DBTEAMLOGEmmErrorDetails alloc] initWithErrorDetails:errorDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmErrorType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmErrorType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmErrorTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmErrorTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmErrorTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmErrorType:other];
}

- (BOOL)isEqualToEmmErrorType:(DBTEAMLOGEmmErrorType *)anEmmErrorType {
  if (self == anEmmErrorType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmErrorType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmErrorTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmErrorType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmErrorType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmErrorType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmRefreshAuthTokenDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmRefreshAuthTokenDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmRefreshAuthTokenDetails:other];
}

- (BOOL)isEqualToEmmRefreshAuthTokenDetails:(DBTEAMLOGEmmRefreshAuthTokenDetails *)anEmmRefreshAuthTokenDetails {
  if (self == anEmmRefreshAuthTokenDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmRefreshAuthTokenDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmRefreshAuthTokenDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmRefreshAuthTokenDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmRefreshAuthTokenType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmRefreshAuthTokenType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmRefreshAuthTokenTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmRefreshAuthTokenTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmRefreshAuthTokenTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmRefreshAuthTokenType:other];
}

- (BOOL)isEqualToEmmRefreshAuthTokenType:(DBTEAMLOGEmmRefreshAuthTokenType *)anEmmRefreshAuthTokenType {
  if (self == anEmmRefreshAuthTokenType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmRefreshAuthTokenType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmRefreshAuthTokenTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmRefreshAuthTokenType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmRefreshAuthTokenType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmRefreshAuthTokenType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmRemoveExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmRemoveExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmRemoveExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmRemoveExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmRemoveExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmRemoveExceptionDetails:other];
}

- (BOOL)isEqualToEmmRemoveExceptionDetails:(DBTEAMLOGEmmRemoveExceptionDetails *)anEmmRemoveExceptionDetails {
  if (self == anEmmRemoveExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmRemoveExceptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmRemoveExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmRemoveExceptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmRemoveExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmRemoveExceptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmRemoveExceptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmRemoveExceptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmRemoveExceptionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmRemoveExceptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmRemoveExceptionType:other];
}

- (BOOL)isEqualToEmmRemoveExceptionType:(DBTEAMLOGEmmRemoveExceptionType *)anEmmRemoveExceptionType {
  if (self == anEmmRemoveExceptionType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmRemoveExceptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmRemoveExceptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmRemoveExceptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmRemoveExceptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmRemoveExceptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnabledDomainInvitesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEnabledDomainInvitesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEnabledDomainInvitesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEnabledDomainInvitesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEnabledDomainInvitesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEnabledDomainInvitesDetails:other];
}

- (BOOL)isEqualToEnabledDomainInvitesDetails:(DBTEAMLOGEnabledDomainInvitesDetails *)anEnabledDomainInvitesDetails {
  if (self == anEnabledDomainInvitesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEnabledDomainInvitesDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEnabledDomainInvitesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEnabledDomainInvitesDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEnabledDomainInvitesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnabledDomainInvitesType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEnabledDomainInvitesType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEnabledDomainInvitesTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEnabledDomainInvitesTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEnabledDomainInvitesTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEnabledDomainInvitesType:other];
}

- (BOOL)isEqualToEnabledDomainInvitesType:(DBTEAMLOGEnabledDomainInvitesType *)anEnabledDomainInvitesType {
  if (self == anEnabledDomainInvitesType) {
    return YES;
  }
  if (![self.description_ isEqual:anEnabledDomainInvitesType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEnabledDomainInvitesTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEnabledDomainInvitesType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEnabledDomainInvitesType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEnabledDomainInvitesType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEventCategory.h"

#pragma mark - API Object

@implementation DBTEAMLOGEventCategory

#pragma mark - Constructors

- (instancetype)initWithApps {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryApps;
  }
  return self;
}

- (instancetype)initWithComments {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryComments;
  }
  return self;
}

- (instancetype)initWithDevices {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryDevices;
  }
  return self;
}

- (instancetype)initWithDomains {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryDomains;
  }
  return self;
}

- (instancetype)initWithFileOperations {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryFileOperations;
  }
  return self;
}

- (instancetype)initWithFileRequests {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryFileRequests;
  }
  return self;
}

- (instancetype)initWithGroups {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryGroups;
  }
  return self;
}

- (instancetype)initWithLogins {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryLogins;
  }
  return self;
}

- (instancetype)initWithMembers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryMembers;
  }
  return self;
}

- (instancetype)initWithPaper {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryPaper;
  }
  return self;
}

- (instancetype)initWithPasswords {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryPasswords;
  }
  return self;
}

- (instancetype)initWithReports {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryReports;
  }
  return self;
}

- (instancetype)initWithSharing {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySharing;
  }
  return self;
}

- (instancetype)initWithShowcase {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryShowcase;
  }
  return self;
}

- (instancetype)initWithSso {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySso;
  }
  return self;
}

- (instancetype)initWithTeamFolders {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTeamFolders;
  }
  return self;
}

- (instancetype)initWithTeamPolicies {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTeamPolicies;
  }
  return self;
}

- (instancetype)initWithTeamProfile {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTeamProfile;
  }
  return self;
}

- (instancetype)initWithTfa {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTfa;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isApps {
  return _tag == DBTEAMLOGEventCategoryApps;
}

- (BOOL)isComments {
  return _tag == DBTEAMLOGEventCategoryComments;
}

- (BOOL)isDevices {
  return _tag == DBTEAMLOGEventCategoryDevices;
}

- (BOOL)isDomains {
  return _tag == DBTEAMLOGEventCategoryDomains;
}

- (BOOL)isFileOperations {
  return _tag == DBTEAMLOGEventCategoryFileOperations;
}

- (BOOL)isFileRequests {
  return _tag == DBTEAMLOGEventCategoryFileRequests;
}

- (BOOL)isGroups {
  return _tag == DBTEAMLOGEventCategoryGroups;
}

- (BOOL)isLogins {
  return _tag == DBTEAMLOGEventCategoryLogins;
}

- (BOOL)isMembers {
  return _tag == DBTEAMLOGEventCategoryMembers;
}

- (BOOL)isPaper {
  return _tag == DBTEAMLOGEventCategoryPaper;
}

- (BOOL)isPasswords {
  return _tag == DBTEAMLOGEventCategoryPasswords;
}

- (BOOL)isReports {
  return _tag == DBTEAMLOGEventCategoryReports;
}

- (BOOL)isSharing {
  return _tag == DBTEAMLOGEventCategorySharing;
}

- (BOOL)isShowcase {
  return _tag == DBTEAMLOGEventCategoryShowcase;
}

- (BOOL)isSso {
  return _tag == DBTEAMLOGEventCategorySso;
}

- (BOOL)isTeamFolders {
  return _tag == DBTEAMLOGEventCategoryTeamFolders;
}

- (BOOL)isTeamPolicies {
  return _tag == DBTEAMLOGEventCategoryTeamPolicies;
}

- (BOOL)isTeamProfile {
  return _tag == DBTEAMLOGEventCategoryTeamProfile;
}

- (BOOL)isTfa {
  return _tag == DBTEAMLOGEventCategoryTfa;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEventCategoryOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEventCategoryApps:
    return @"DBTEAMLOGEventCategoryApps";
  case DBTEAMLOGEventCategoryComments:
    return @"DBTEAMLOGEventCategoryComments";
  case DBTEAMLOGEventCategoryDevices:
    return @"DBTEAMLOGEventCategoryDevices";
  case DBTEAMLOGEventCategoryDomains:
    return @"DBTEAMLOGEventCategoryDomains";
  case DBTEAMLOGEventCategoryFileOperations:
    return @"DBTEAMLOGEventCategoryFileOperations";
  case DBTEAMLOGEventCategoryFileRequests:
    return @"DBTEAMLOGEventCategoryFileRequests";
  case DBTEAMLOGEventCategoryGroups:
    return @"DBTEAMLOGEventCategoryGroups";
  case DBTEAMLOGEventCategoryLogins:
    return @"DBTEAMLOGEventCategoryLogins";
  case DBTEAMLOGEventCategoryMembers:
    return @"DBTEAMLOGEventCategoryMembers";
  case DBTEAMLOGEventCategoryPaper:
    return @"DBTEAMLOGEventCategoryPaper";
  case DBTEAMLOGEventCategoryPasswords:
    return @"DBTEAMLOGEventCategoryPasswords";
  case DBTEAMLOGEventCategoryReports:
    return @"DBTEAMLOGEventCategoryReports";
  case DBTEAMLOGEventCategorySharing:
    return @"DBTEAMLOGEventCategorySharing";
  case DBTEAMLOGEventCategoryShowcase:
    return @"DBTEAMLOGEventCategoryShowcase";
  case DBTEAMLOGEventCategorySso:
    return @"DBTEAMLOGEventCategorySso";
  case DBTEAMLOGEventCategoryTeamFolders:
    return @"DBTEAMLOGEventCategoryTeamFolders";
  case DBTEAMLOGEventCategoryTeamPolicies:
    return @"DBTEAMLOGEventCategoryTeamPolicies";
  case DBTEAMLOGEventCategoryTeamProfile:
    return @"DBTEAMLOGEventCategoryTeamProfile";
  case DBTEAMLOGEventCategoryTfa:
    return @"DBTEAMLOGEventCategoryTfa";
  case DBTEAMLOGEventCategoryOther:
    return @"DBTEAMLOGEventCategoryOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEventCategorySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEventCategorySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEventCategorySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEventCategoryApps:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryComments:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryDevices:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryDomains:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryFileOperations:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryFileRequests:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryGroups:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryLogins:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryMembers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryPaper:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryPasswords:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryReports:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategorySharing:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryShowcase:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategorySso:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryTeamFolders:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryTeamPolicies:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryTeamProfile:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryTfa:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEventCategory:other];
}

- (BOOL)isEqualToEventCategory:(DBTEAMLOGEventCategory *)anEventCategory {
  if (self == anEventCategory) {
    return YES;
  }
  if (self.tag != anEventCategory.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEventCategoryApps:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryComments:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryDevices:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryDomains:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryFileOperations:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryFileRequests:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryGroups:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryLogins:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryMembers:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryPaper:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryPasswords:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryReports:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySharing:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryShowcase:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySso:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTeamFolders:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTeamPolicies:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTeamProfile:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTfa:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryOther:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEventCategorySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEventCategory *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isApps]) {
    jsonDict[@".tag"] = @"apps";
  } else if ([valueObj isComments]) {
    jsonDict[@".tag"] = @"comments";
  } else if ([valueObj isDevices]) {
    jsonDict[@".tag"] = @"devices";
  } else if ([valueObj isDomains]) {
    jsonDict[@".tag"] = @"domains";
  } else if ([valueObj isFileOperations]) {
    jsonDict[@".tag"] = @"file_operations";
  } else if ([valueObj isFileRequests]) {
    jsonDict[@".tag"] = @"file_requests";
  } else if ([valueObj isGroups]) {
    jsonDict[@".tag"] = @"groups";
  } else if ([valueObj isLogins]) {
    jsonDict[@".tag"] = @"logins";
  } else if ([valueObj isMembers]) {
    jsonDict[@".tag"] = @"members";
  } else if ([valueObj isPaper]) {
    jsonDict[@".tag"] = @"paper";
  } else if ([valueObj isPasswords]) {
    jsonDict[@".tag"] = @"passwords";
  } else if ([valueObj isReports]) {
    jsonDict[@".tag"] = @"reports";
  } else if ([valueObj isSharing]) {
    jsonDict[@".tag"] = @"sharing";
  } else if ([valueObj isShowcase]) {
    jsonDict[@".tag"] = @"showcase";
  } else if ([valueObj isSso]) {
    jsonDict[@".tag"] = @"sso";
  } else if ([valueObj isTeamFolders]) {
    jsonDict[@".tag"] = @"team_folders";
  } else if ([valueObj isTeamPolicies]) {
    jsonDict[@".tag"] = @"team_policies";
  } else if ([valueObj isTeamProfile]) {
    jsonDict[@".tag"] = @"team_profile";
  } else if ([valueObj isTfa]) {
    jsonDict[@".tag"] = @"tfa";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEventCategory *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"apps"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithApps];
  } else if ([tag isEqualToString:@"comments"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithComments];
  } else if ([tag isEqualToString:@"devices"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithDevices];
  } else if ([tag isEqualToString:@"domains"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithDomains];
  } else if ([tag isEqualToString:@"file_operations"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithFileOperations];
  } else if ([tag isEqualToString:@"file_requests"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithFileRequests];
  } else if ([tag isEqualToString:@"groups"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithGroups];
  } else if ([tag isEqualToString:@"logins"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithLogins];
  } else if ([tag isEqualToString:@"members"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithMembers];
  } else if ([tag isEqualToString:@"paper"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithPaper];
  } else if ([tag isEqualToString:@"passwords"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithPasswords];
  } else if ([tag isEqualToString:@"reports"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithReports];
  } else if ([tag isEqualToString:@"sharing"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSharing];
  } else if ([tag isEqualToString:@"showcase"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithShowcase];
  } else if ([tag isEqualToString:@"sso"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSso];
  } else if ([tag isEqualToString:@"team_folders"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTeamFolders];
  } else if ([tag isEqualToString:@"team_policies"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTeamPolicies];
  } else if ([tag isEqualToString:@"team_profile"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTeamProfile];
  } else if ([tag isEqualToString:@"tfa"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTfa];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEventCategory alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangeAvailabilityDetails.h"
#import "DBTEAMLOGAccountCaptureChangePolicyDetails.h"
#import "DBTEAMLOGAccountCaptureMigrateAccountDetails.h"
#import "DBTEAMLOGAccountCaptureNotificationEmailsSentDetails.h"
#import "DBTEAMLOGAccountCaptureRelinquishAccountDetails.h"
#import "DBTEAMLOGAllowDownloadDisabledDetails.h"
#import "DBTEAMLOGAllowDownloadEnabledDetails.h"
#import "DBTEAMLOGAppLinkTeamDetails.h"
#import "DBTEAMLOGAppLinkUserDetails.h"
#import "DBTEAMLOGAppUnlinkTeamDetails.h"
#import "DBTEAMLOGAppUnlinkUserDetails.h"
#import "DBTEAMLOGCollectionShareDetails.h"
#import "DBTEAMLOGCreateFolderDetails.h"
#import "DBTEAMLOGDataPlacementRestrictionChangePolicyDetails.h"
#import "DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeOverageActionDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails.h"
#import "DBTEAMLOGDeviceChangeIpDesktopDetails.h"
#import "DBTEAMLOGDeviceChangeIpMobileDetails.h"
#import "DBTEAMLOGDeviceChangeIpWebDetails.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkFailDetails.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails.h"
#import "DBTEAMLOGDeviceLinkFailDetails.h"
#import "DBTEAMLOGDeviceLinkSuccessDetails.h"
#import "DBTEAMLOGDeviceManagementDisabledDetails.h"
#import "DBTEAMLOGDeviceManagementEnabledDetails.h"
#import "DBTEAMLOGDeviceUnlinkDetails.h"
#import "DBTEAMLOGDirectoryRestrictionsAddMembersDetails.h"
#import "DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails.h"
#import "DBTEAMLOGDisabledDomainInvitesDetails.h"
#import "DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails.h"
#import "DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails.h"
#import "DBTEAMLOGDomainInvitesEmailExistingUsersDetails.h"
#import "DBTEAMLOGDomainInvitesRequestToJoinTeamDetails.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails.h"
#import "DBTEAMLOGDomainVerificationAddDomainFailDetails.h"
#import "DBTEAMLOGDomainVerificationAddDomainSuccessDetails.h"
#import "DBTEAMLOGDomainVerificationRemoveDomainDetails.h"
#import "DBTEAMLOGEmmAddExceptionDetails.h"
#import "DBTEAMLOGEmmChangePolicyDetails.h"
#import "DBTEAMLOGEmmCreateExceptionsReportDetails.h"
#import "DBTEAMLOGEmmCreateUsageReportDetails.h"
#import "DBTEAMLOGEmmErrorDetails.h"
#import "DBTEAMLOGEmmRefreshAuthTokenDetails.h"
#import "DBTEAMLOGEmmRemoveExceptionDetails.h"
#import "DBTEAMLOGEnabledDomainInvitesDetails.h"
#import "DBTEAMLOGEventDetails.h"
#import "DBTEAMLOGExportMembersReportDetails.h"
#import "DBTEAMLOGExtendedVersionHistoryChangePolicyDetails.h"
#import "DBTEAMLOGFileAddCommentDetails.h"
#import "DBTEAMLOGFileAddDetails.h"
#import "DBTEAMLOGFileChangeCommentSubscriptionDetails.h"
#import "DBTEAMLOGFileCommentsChangePolicyDetails.h"
#import "DBTEAMLOGFileCopyDetails.h"
#import "DBTEAMLOGFileDeleteCommentDetails.h"
#import "DBTEAMLOGFileDeleteDetails.h"
#import "DBTEAMLOGFileDownloadDetails.h"
#import "DBTEAMLOGFileEditDetails.h"
#import "DBTEAMLOGFileGetCopyReferenceDetails.h"
#import "DBTEAMLOGFileLikeCommentDetails.h"
#import "DBTEAMLOGFileMoveDetails.h"
#import "DBTEAMLOGFilePermanentlyDeleteDetails.h"
#import "DBTEAMLOGFilePreviewDetails.h"
#import "DBTEAMLOGFileRenameDetails.h"
#import "DBTEAMLOGFileRequestChangeDetails.h"
#import "DBTEAMLOGFileRequestCloseDetails.h"
#import "DBTEAMLOGFileRequestCreateDetails.h"
#import "DBTEAMLOGFileRequestReceiveFileDetails.h"
#import "DBTEAMLOGFileRequestsChangePolicyDetails.h"
#import "DBTEAMLOGFileRequestsEmailsEnabledDetails.h"
#import "DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails.h"
#import "DBTEAMLOGFileResolveCommentDetails.h"
#import "DBTEAMLOGFileRestoreDetails.h"
#import "DBTEAMLOGFileRevertDetails.h"
#import "DBTEAMLOGFileRollbackChangesDetails.h"
#import "DBTEAMLOGFileSaveCopyReferenceDetails.h"
#import "DBTEAMLOGFileUnlikeCommentDetails.h"
#import "DBTEAMLOGFileUnresolveCommentDetails.h"
#import "DBTEAMLOGGoogleSsoChangePolicyDetails.h"
#import "DBTEAMLOGGroupAddExternalIdDetails.h"
#import "DBTEAMLOGGroupAddMemberDetails.h"
#import "DBTEAMLOGGroupChangeExternalIdDetails.h"
#import "DBTEAMLOGGroupChangeManagementTypeDetails.h"
#import "DBTEAMLOGGroupChangeMemberRoleDetails.h"
#import "DBTEAMLOGGroupCreateDetails.h"
#import "DBTEAMLOGGroupDeleteDetails.h"
#import "DBTEAMLOGGroupDescriptionUpdatedDetails.h"
#import "DBTEAMLOGGroupJoinPolicyUpdatedDetails.h"
#import "DBTEAMLOGGroupMovedDetails.h"
#import "DBTEAMLOGGroupRemoveExternalIdDetails.h"
#import "DBTEAMLOGGroupRemoveMemberDetails.h"
#import "DBTEAMLOGGroupRenameDetails.h"
#import "DBTEAMLOGGroupUserManagementChangePolicyDetails.h"
#import "DBTEAMLOGLoginFailDetails.h"
#import "DBTEAMLOGLoginSuccessDetails.h"
#import "DBTEAMLOGLogoutDetails.h"
#import "DBTEAMLOGMemberAddNameDetails.h"
#import "DBTEAMLOGMemberChangeAdminRoleDetails.h"
#import "DBTEAMLOGMemberChangeEmailDetails.h"
#import "DBTEAMLOGMemberChangeMembershipTypeDetails.h"
#import "DBTEAMLOGMemberChangeNameDetails.h"
#import "DBTEAMLOGMemberChangeStatusDetails.h"
#import "DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails.h"
#import "DBTEAMLOGMemberRequestsChangePolicyDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsAddExceptionDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsChangePolicyDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeStatusDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails.h"
#import "DBTEAMLOGMemberSuggestDetails.h"
#import "DBTEAMLOGMemberSuggestionsChangePolicyDetails.h"
#import "DBTEAMLOGMemberTransferAccountContentsDetails.h"
#import "DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails.h"
#import "DBTEAMLOGMissingDetails.h"
#import "DBTEAMLOGNetworkControlChangePolicyDetails.h"
#import "DBTEAMLOGNoteAclInviteOnlyDetails.h"
#import "DBTEAMLOGNoteAclLinkDetails.h"
#import "DBTEAMLOGNoteAclTeamLinkDetails.h"
#import "DBTEAMLOGNoteShareReceiveDetails.h"
#import "DBTEAMLOGNoteSharedDetails.h"
#import "DBTEAMLOGOpenNoteSharedDetails.h"
#import "DBTEAMLOGPaperAdminExportStartDetails.h"
#import "DBTEAMLOGPaperChangeDeploymentPolicyDetails.h"
#import "DBTEAMLOGPaperChangeMemberLinkPolicyDetails.h"
#import "DBTEAMLOGPaperChangeMemberPolicyDetails.h"
#import "DBTEAMLOGPaperChangePolicyDetails.h"
#import "DBTEAMLOGPaperContentAddMemberDetails.h"
#import "DBTEAMLOGPaperContentAddToFolderDetails.h"
#import "DBTEAMLOGPaperContentArchiveDetails.h"
#import "DBTEAMLOGPaperContentCreateDetails.h"
#import "DBTEAMLOGPaperContentPermanentlyDeleteDetails.h"
#import "DBTEAMLOGPaperContentRemoveFromFolderDetails.h"
#import "DBTEAMLOGPaperContentRemoveMemberDetails.h"
#import "DBTEAMLOGPaperContentRenameDetails.h"
#import "DBTEAMLOGPaperContentRestoreDetails.h"
#import "DBTEAMLOGPaperDocAddCommentDetails.h"
#import "DBTEAMLOGPaperDocChangeMemberRoleDetails.h"
#import "DBTEAMLOGPaperDocChangeSharingPolicyDetails.h"
#import "DBTEAMLOGPaperDocChangeSubscriptionDetails.h"
#import "DBTEAMLOGPaperDocDeleteCommentDetails.h"
#import "DBTEAMLOGPaperDocDeletedDetails.h"
#import "DBTEAMLOGPaperDocDownloadDetails.h"
#import "DBTEAMLOGPaperDocEditCommentDetails.h"
#import "DBTEAMLOGPaperDocEditDetails.h"
#import "DBTEAMLOGPaperDocFollowedDetails.h"
#import "DBTEAMLOGPaperDocMentionDetails.h"
#import "DBTEAMLOGPaperDocRequestAccessDetails.h"
#import "DBTEAMLOGPaperDocResolveCommentDetails.h"
#import "DBTEAMLOGPaperDocRevertDetails.h"
#import "DBTEAMLOGPaperDocSlackShareDetails.h"
#import "DBTEAMLOGPaperDocTeamInviteDetails.h"
#import "DBTEAMLOGPaperDocTrashedDetails.h"
#import "DBTEAMLOGPaperDocUnresolveCommentDetails.h"
#import "DBTEAMLOGPaperDocUntrashedDetails.h"
#import "DBTEAMLOGPaperDocViewDetails.h"
#import "DBTEAMLOGPaperEnabledUsersGroupAdditionDetails.h"
#import "DBTEAMLOGPaperEnabledUsersGroupRemovalDetails.h"
#import "DBTEAMLOGPaperExternalViewAllowDetails.h"
#import "DBTEAMLOGPaperExternalViewDefaultTeamDetails.h"
#import "DBTEAMLOGPaperExternalViewForbidDetails.h"
#import "DBTEAMLOGPaperFolderChangeSubscriptionDetails.h"
#import "DBTEAMLOGPaperFolderDeletedDetails.h"
#import "DBTEAMLOGPaperFolderFollowedDetails.h"
#import "DBTEAMLOGPaperFolderTeamInviteDetails.h"
#import "DBTEAMLOGPasswordChangeDetails.h"
#import "DBTEAMLOGPasswordResetAllDetails.h"
#import "DBTEAMLOGPasswordResetDetails.h"
#import "DBTEAMLOGPermanentDeleteChangePolicyDetails.h"
#import "DBTEAMLOGResellerSupportSessionEndDetails.h"
#import "DBTEAMLOGResellerSupportSessionStartDetails.h"
#import "DBTEAMLOGSecondaryMailsPolicyChangedDetails.h"
#import "DBTEAMLOGSfAddGroupDetails.h"
#import "DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails.h"
#import "DBTEAMLOGSfExternalInviteWarnDetails.h"
#import "DBTEAMLOGSfFbInviteChangeRoleDetails.h"
#import "DBTEAMLOGSfFbInviteDetails.h"
#import "DBTEAMLOGSfFbUninviteDetails.h"
#import "DBTEAMLOGSfInviteGroupDetails.h"
#import "DBTEAMLOGSfTeamGrantAccessDetails.h"
#import "DBTEAMLOGSfTeamInviteChangeRoleDetails.h"
#import "DBTEAMLOGSfTeamInviteDetails.h"
#import "DBTEAMLOGSfTeamJoinDetails.h"
#import "DBTEAMLOGSfTeamJoinFromOobLinkDetails.h"
#import "DBTEAMLOGSfTeamUninviteDetails.h"
#import "DBTEAMLOGSharedContentAddInviteesDetails.h"
#import "DBTEAMLOGSharedContentAddLinkExpiryDetails.h"
#import "DBTEAMLOGSharedContentAddLinkPasswordDetails.h"
#import "DBTEAMLOGSharedContentAddMemberDetails.h"
#import "DBTEAMLOGSharedContentChangeDownloadsPolicyDetails.h"
#import "DBTEAMLOGSharedContentChangeInviteeRoleDetails.h"
#import "DBTEAMLOGSharedContentChangeLinkAudienceDetails.h"
#import "DBTEAMLOGSharedContentChangeLinkExpiryDetails.h"
#import "DBTEAMLOGSharedContentChangeLinkPasswordDetails.h"
#import "DBTEAMLOGSharedContentChangeMemberRoleDetails.h"
#import "DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails.h"
#import "DBTEAMLOGSharedContentClaimInvitationDetails.h"
#import "DBTEAMLOGSharedContentCopyDetails.h"
#import "DBTEAMLOGSharedContentDownloadDetails.h"
#import "DBTEAMLOGSharedContentRelinquishMembershipDetails.h"
#import "DBTEAMLOGSharedContentRemoveInviteesDetails.h"
#import "DBTEAMLOGSharedContentRemoveLinkExpiryDetails.h"
#import "DBTEAMLOGSharedContentRemoveLinkPasswordDetails.h"
#import "DBTEAMLOGSharedContentRemoveMemberDetails.h"
#import "DBTEAMLOGSharedContentRequestAccessDetails.h"
#import "DBTEAMLOGSharedContentUnshareDetails.h"
#import "DBTEAMLOGSharedContentViewDetails.h"
#import "DBTEAMLOGSharedFolderChangeLinkPolicyDetails.h"
#import "DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails.h"
#import "DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails.h"
#import "DBTEAMLOGSharedFolderChangeMembersPolicyDetails.h"
#import "DBTEAMLOGSharedFolderCreateDetails.h"
#import "DBTEAMLOGSharedFolderDeclineInvitationDetails.h"
#import "DBTEAMLOGSharedFolderMountDetails.h"
#import "DBTEAMLOGSharedFolderNestDetails.h"
#import "DBTEAMLOGSharedFolderTransferOwnershipDetails.h"
#import "DBTEAMLOGSharedFolderUnmountDetails.h"
#import "DBTEAMLOGSharedLinkAddExpiryDetails.h"
#import "DBTEAMLOGSharedLinkChangeExpiryDetails.h"
#import "DBTEAMLOGSharedLinkChangeVisibilityDetails.h"
#import "DBTEAMLOGSharedLinkCopyDetails.h"
#import "DBTEAMLOGSharedLinkCreateDetails.h"
#import "DBTEAMLOGSharedLinkDisableDetails.h"
#import "DBTEAMLOGSharedLinkDownloadDetails.h"
#import "DBTEAMLOGSharedLinkRemoveExpiryDetails.h"
#import "DBTEAMLOGSharedLinkShareDetails.h"
#import "DBTEAMLOGSharedLinkViewDetails.h"
#import "DBTEAMLOGSharedNoteOpenedDetails.h"
#import "DBTEAMLOGSharingChangeFolderJoinPolicyDetails.h"
#import "DBTEAMLOGSharingChangeLinkPolicyDetails.h"
#import "DBTEAMLOGSharingChangeMemberPolicyDetails.h"
#import "DBTEAMLOGShmodelGroupShareDetails.h"
#import "DBTEAMLOGShowcaseAccessGrantedDetails.h"
#import "DBTEAMLOGShowcaseAddMemberDetails.h"
#import "DBTEAMLOGShowcaseArchivedDetails.h"
#import "DBTEAMLOGShowcaseChangeDownloadPolicyDetails.h"
#import "DBTEAMLOGShowcaseChangeEnabledPolicyDetails.h"
#import "DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails.h"
#import "DBTEAMLOGShowcaseCreatedDetails.h"
#import "DBTEAMLOGShowcaseDeleteCommentDetails.h"
#import "DBTEAMLOGShowcaseEditCommentDetails.h"
#import "DBTEAMLOGShowcaseEditedDetails.h"
#import "DBTEAMLOGShowcaseFileAddedDetails.h"
#import "DBTEAMLOGShowcaseFileDownloadDetails.h"
#import "DBTEAMLOGShowcaseFileRemovedDetails.h"
#import "DBTEAMLOGShowcaseFileViewDetails.h"
#import "DBTEAMLOGShowcasePermanentlyDeletedDetails.h"
#import "DBTEAMLOGShowcasePostCommentDetails.h"
#import "DBTEAMLOGShowcaseRemoveMemberDetails.h"
#import "DBTEAMLOGShowcaseRenamedDetails.h"
#import "DBTEAMLOGShowcaseRequestAccessDetails.h"
#import "DBTEAMLOGShowcaseResolveCommentDetails.h"
#import "DBTEAMLOGShowcaseRestoredDetails.h"
#import "DBTEAMLOGShowcaseTrashedDeprecatedDetails.h"
#import "DBTEAMLOGShowcaseTrashedDetails.h"
#import "DBTEAMLOGShowcaseUnresolveCommentDetails.h"
#import "DBTEAMLOGShowcaseUntrashedDeprecatedDetails.h"
#import "DBTEAMLOGShowcaseUntrashedDetails.h"
#import "DBTEAMLOGShowcaseViewDetails.h"
#import "DBTEAMLOGSignInAsSessionEndDetails.h"
#import "DBTEAMLOGSignInAsSessionStartDetails.h"
#import "DBTEAMLOGSmartSyncChangePolicyDetails.h"
#import "DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails.h"
#import "DBTEAMLOGSmartSyncNotOptOutDetails.h"
#import "DBTEAMLOGSmartSyncOptOutDetails.h"
#import "DBTEAMLOGSsoAddCertDetails.h"
#import "DBTEAMLOGSsoAddLoginUrlDetails.h"
#import "DBTEAMLOGSsoAddLogoutUrlDetails.h"
#import "DBTEAMLOGSsoChangeCertDetails.h"
#import "DBTEAMLOGSsoChangeLoginUrlDetails.h"
#import "DBTEAMLOGSsoChangeLogoutUrlDetails.h"
#import "DBTEAMLOGSsoChangePolicyDetails.h"
#import "DBTEAMLOGSsoChangeSamlIdentityModeDetails.h"
#import "DBTEAMLOGSsoErrorDetails.h"
#import "DBTEAMLOGSsoRemoveCertDetails.h"
#import "DBTEAMLOGSsoRemoveLoginUrlDetails.h"
#import "DBTEAMLOGSsoRemoveLogoutUrlDetails.h"
#import "DBTEAMLOGTeamActivityCreateReportDetails.h"
#import "DBTEAMLOGTeamFolderChangeStatusDetails.h"
#import "DBTEAMLOGTeamFolderCreateDetails.h"
#import "DBTEAMLOGTeamFolderDowngradeDetails.h"
#import "DBTEAMLOGTeamFolderPermanentlyDeleteDetails.h"
#import "DBTEAMLOGTeamFolderRenameDetails.h"
#import "DBTEAMLOGTeamMergeFromDetails.h"
#import "DBTEAMLOGTeamMergeToDetails.h"
#import "DBTEAMLOGTeamProfileAddLogoDetails.h"
#import "DBTEAMLOGTeamProfileChangeDefaultLanguageDetails.h"
#import "DBTEAMLOGTeamProfileChangeLogoDetails.h"
#import "DBTEAMLOGTeamProfileChangeNameDetails.h"
#import "DBTEAMLOGTeamProfileRemoveLogoDetails.h"
#import "DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails.h"
#import "DBTEAMLOGTfaAddBackupPhoneDetails.h"
#import "DBTEAMLOGTfaAddSecurityKeyDetails.h"
#import "DBTEAMLOGTfaChangeBackupPhoneDetails.h"
#import "DBTEAMLOGTfaChangePolicyDetails.h"
#import "DBTEAMLOGTfaChangeStatusDetails.h"
#import "DBTEAMLOGTfaRemoveBackupPhoneDetails.h"
#import "DBTEAMLOGTfaRemoveSecurityKeyDetails.h"
#import "DBTEAMLOGTfaResetDetails.h"
#import "DBTEAMLOGTwoAccountChangePolicyDetails.h"
#import "DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails.h"
#import "DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEventDetails

@synthesize appLinkTeamDetails = _appLinkTeamDetails;
@synthesize appLinkUserDetails = _appLinkUserDetails;
@synthesize appUnlinkTeamDetails = _appUnlinkTeamDetails;
@synthesize appUnlinkUserDetails = _appUnlinkUserDetails;
@synthesize fileAddCommentDetails = _fileAddCommentDetails;
@synthesize fileChangeCommentSubscriptionDetails = _fileChangeCommentSubscriptionDetails;
@synthesize fileDeleteCommentDetails = _fileDeleteCommentDetails;
@synthesize fileLikeCommentDetails = _fileLikeCommentDetails;
@synthesize fileResolveCommentDetails = _fileResolveCommentDetails;
@synthesize fileUnlikeCommentDetails = _fileUnlikeCommentDetails;
@synthesize fileUnresolveCommentDetails = _fileUnresolveCommentDetails;
@synthesize deviceChangeIpDesktopDetails = _deviceChangeIpDesktopDetails;
@synthesize deviceChangeIpMobileDetails = _deviceChangeIpMobileDetails;
@synthesize deviceChangeIpWebDetails = _deviceChangeIpWebDetails;
@synthesize deviceDeleteOnUnlinkFailDetails = _deviceDeleteOnUnlinkFailDetails;
@synthesize deviceDeleteOnUnlinkSuccessDetails = _deviceDeleteOnUnlinkSuccessDetails;
@synthesize deviceLinkFailDetails = _deviceLinkFailDetails;
@synthesize deviceLinkSuccessDetails = _deviceLinkSuccessDetails;
@synthesize deviceManagementDisabledDetails = _deviceManagementDisabledDetails;
@synthesize deviceManagementEnabledDetails = _deviceManagementEnabledDetails;
@synthesize deviceUnlinkDetails = _deviceUnlinkDetails;
@synthesize emmRefreshAuthTokenDetails = _emmRefreshAuthTokenDetails;
@synthesize accountCaptureChangeAvailabilityDetails = _accountCaptureChangeAvailabilityDetails;
@synthesize accountCaptureMigrateAccountDetails = _accountCaptureMigrateAccountDetails;
@synthesize accountCaptureNotificationEmailsSentDetails = _accountCaptureNotificationEmailsSentDetails;
@synthesize accountCaptureRelinquishAccountDetails = _accountCaptureRelinquishAccountDetails;
@synthesize disabledDomainInvitesDetails = _disabledDomainInvitesDetails;
@synthesize domainInvitesApproveRequestToJoinTeamDetails = _domainInvitesApproveRequestToJoinTeamDetails;
@synthesize domainInvitesDeclineRequestToJoinTeamDetails = _domainInvitesDeclineRequestToJoinTeamDetails;
@synthesize domainInvitesEmailExistingUsersDetails = _domainInvitesEmailExistingUsersDetails;
@synthesize domainInvitesRequestToJoinTeamDetails = _domainInvitesRequestToJoinTeamDetails;
@synthesize domainInvitesSetInviteNewUserPrefToNoDetails = _domainInvitesSetInviteNewUserPrefToNoDetails;
@synthesize domainInvitesSetInviteNewUserPrefToYesDetails = _domainInvitesSetInviteNewUserPrefToYesDetails;
@synthesize domainVerificationAddDomainFailDetails = _domainVerificationAddDomainFailDetails;
@synthesize domainVerificationAddDomainSuccessDetails = _domainVerificationAddDomainSuccessDetails;
@synthesize domainVerificationRemoveDomainDetails = _domainVerificationRemoveDomainDetails;
@synthesize enabledDomainInvitesDetails = _enabledDomainInvitesDetails;
@synthesize createFolderDetails = _createFolderDetails;
@synthesize fileAddDetails = _fileAddDetails;
@synthesize fileCopyDetails = _fileCopyDetails;
@synthesize fileDeleteDetails = _fileDeleteDetails;
@synthesize fileDownloadDetails = _fileDownloadDetails;
@synthesize fileEditDetails = _fileEditDetails;
@synthesize fileGetCopyReferenceDetails = _fileGetCopyReferenceDetails;
@synthesize fileMoveDetails = _fileMoveDetails;
@synthesize filePermanentlyDeleteDetails = _filePermanentlyDeleteDetails;
@synthesize filePreviewDetails = _filePreviewDetails;
@synthesize fileRenameDetails = _fileRenameDetails;
@synthesize fileRestoreDetails = _fileRestoreDetails;
@synthesize fileRevertDetails = _fileRevertDetails;
@synthesize fileRollbackChangesDetails = _fileRollbackChangesDetails;
@synthesize fileSaveCopyReferenceDetails = _fileSaveCopyReferenceDetails;
@synthesize fileRequestChangeDetails = _fileRequestChangeDetails;
@synthesize fileRequestCloseDetails = _fileRequestCloseDetails;
@synthesize fileRequestCreateDetails = _fileRequestCreateDetails;
@synthesize fileRequestReceiveFileDetails = _fileRequestReceiveFileDetails;
@synthesize groupAddExternalIdDetails = _groupAddExternalIdDetails;
@synthesize groupAddMemberDetails = _groupAddMemberDetails;
@synthesize groupChangeExternalIdDetails = _groupChangeExternalIdDetails;
@synthesize groupChangeManagementTypeDetails = _groupChangeManagementTypeDetails;
@synthesize groupChangeMemberRoleDetails = _groupChangeMemberRoleDetails;
@synthesize groupCreateDetails = _groupCreateDetails;
@synthesize groupDeleteDetails = _groupDeleteDetails;
@synthesize groupDescriptionUpdatedDetails = _groupDescriptionUpdatedDetails;
@synthesize groupJoinPolicyUpdatedDetails = _groupJoinPolicyUpdatedDetails;
@synthesize groupMovedDetails = _groupMovedDetails;
@synthesize groupRemoveExternalIdDetails = _groupRemoveExternalIdDetails;
@synthesize groupRemoveMemberDetails = _groupRemoveMemberDetails;
@synthesize groupRenameDetails = _groupRenameDetails;
@synthesize emmErrorDetails = _emmErrorDetails;
@synthesize loginFailDetails = _loginFailDetails;
@synthesize loginSuccessDetails = _loginSuccessDetails;
@synthesize logoutDetails = _logoutDetails;
@synthesize resellerSupportSessionEndDetails = _resellerSupportSessionEndDetails;
@synthesize resellerSupportSessionStartDetails = _resellerSupportSessionStartDetails;
@synthesize signInAsSessionEndDetails = _signInAsSessionEndDetails;
@synthesize signInAsSessionStartDetails = _signInAsSessionStartDetails;
@synthesize ssoErrorDetails = _ssoErrorDetails;
@synthesize memberAddNameDetails = _memberAddNameDetails;
@synthesize memberChangeAdminRoleDetails = _memberChangeAdminRoleDetails;
@synthesize memberChangeEmailDetails = _memberChangeEmailDetails;
@synthesize memberChangeMembershipTypeDetails = _memberChangeMembershipTypeDetails;
@synthesize memberChangeNameDetails = _memberChangeNameDetails;
@synthesize memberChangeStatusDetails = _memberChangeStatusDetails;
@synthesize memberPermanentlyDeleteAccountContentsDetails = _memberPermanentlyDeleteAccountContentsDetails;
@synthesize memberSpaceLimitsAddCustomQuotaDetails = _memberSpaceLimitsAddCustomQuotaDetails;
@synthesize memberSpaceLimitsChangeCustomQuotaDetails = _memberSpaceLimitsChangeCustomQuotaDetails;
@synthesize memberSpaceLimitsChangeStatusDetails = _memberSpaceLimitsChangeStatusDetails;
@synthesize memberSpaceLimitsRemoveCustomQuotaDetails = _memberSpaceLimitsRemoveCustomQuotaDetails;
@synthesize memberSuggestDetails = _memberSuggestDetails;
@synthesize memberTransferAccountContentsDetails = _memberTransferAccountContentsDetails;
@synthesize secondaryMailsPolicyChangedDetails = _secondaryMailsPolicyChangedDetails;
@synthesize paperContentAddMemberDetails = _paperContentAddMemberDetails;
@synthesize paperContentAddToFolderDetails = _paperContentAddToFolderDetails;
@synthesize paperContentArchiveDetails = _paperContentArchiveDetails;
@synthesize paperContentCreateDetails = _paperContentCreateDetails;
@synthesize paperContentPermanentlyDeleteDetails = _paperContentPermanentlyDeleteDetails;
@synthesize paperContentRemoveFromFolderDetails = _paperContentRemoveFromFolderDetails;
@synthesize paperContentRemoveMemberDetails = _paperContentRemoveMemberDetails;
@synthesize paperContentRenameDetails = _paperContentRenameDetails;
@synthesize paperContentRestoreDetails = _paperContentRestoreDetails;
@synthesize paperDocAddCommentDetails = _paperDocAddCommentDetails;
@synthesize paperDocChangeMemberRoleDetails = _paperDocChangeMemberRoleDetails;
@synthesize paperDocChangeSharingPolicyDetails = _paperDocChangeSharingPolicyDetails;
@synthesize paperDocChangeSubscriptionDetails = _paperDocChangeSubscriptionDetails;
@synthesize paperDocDeletedDetails = _paperDocDeletedDetails;
@synthesize paperDocDeleteCommentDetails = _paperDocDeleteCommentDetails;
@synthesize paperDocDownloadDetails = _paperDocDownloadDetails;
@synthesize paperDocEditDetails = _paperDocEditDetails;
@synthesize paperDocEditCommentDetails = _paperDocEditCommentDetails;
@synthesize paperDocFollowedDetails = _paperDocFollowedDetails;
@synthesize paperDocMentionDetails = _paperDocMentionDetails;
@synthesize paperDocRequestAccessDetails = _paperDocRequestAccessDetails;
@synthesize paperDocResolveCommentDetails = _paperDocResolveCommentDetails;
@synthesize paperDocRevertDetails = _paperDocRevertDetails;
@synthesize paperDocSlackShareDetails = _paperDocSlackShareDetails;
@synthesize paperDocTeamInviteDetails = _paperDocTeamInviteDetails;
@synthesize paperDocTrashedDetails = _paperDocTrashedDetails;
@synthesize paperDocUnresolveCommentDetails = _paperDocUnresolveCommentDetails;
@synthesize paperDocUntrashedDetails = _paperDocUntrashedDetails;
@synthesize paperDocViewDetails = _paperDocViewDetails;
@synthesize paperExternalViewAllowDetails = _paperExternalViewAllowDetails;
@synthesize paperExternalViewDefaultTeamDetails = _paperExternalViewDefaultTeamDetails;
@synthesize paperExternalViewForbidDetails = _paperExternalViewForbidDetails;
@synthesize paperFolderChangeSubscriptionDetails = _paperFolderChangeSubscriptionDetails;
@synthesize paperFolderDeletedDetails = _paperFolderDeletedDetails;
@synthesize paperFolderFollowedDetails = _paperFolderFollowedDetails;
@synthesize paperFolderTeamInviteDetails = _paperFolderTeamInviteDetails;
@synthesize passwordChangeDetails = _passwordChangeDetails;
@synthesize passwordResetDetails = _passwordResetDetails;
@synthesize passwordResetAllDetails = _passwordResetAllDetails;
@synthesize emmCreateExceptionsReportDetails = _emmCreateExceptionsReportDetails;
@synthesize emmCreateUsageReportDetails = _emmCreateUsageReportDetails;
@synthesize exportMembersReportDetails = _exportMembersReportDetails;
@synthesize paperAdminExportStartDetails = _paperAdminExportStartDetails;
@synthesize smartSyncCreateAdminPrivilegeReportDetails = _smartSyncCreateAdminPrivilegeReportDetails;
@synthesize teamActivityCreateReportDetails = _teamActivityCreateReportDetails;
@synthesize collectionShareDetails = _collectionShareDetails;
@synthesize noteAclInviteOnlyDetails = _noteAclInviteOnlyDetails;
@synthesize noteAclLinkDetails = _noteAclLinkDetails;
@synthesize noteAclTeamLinkDetails = _noteAclTeamLinkDetails;
@synthesize noteSharedDetails = _noteSharedDetails;
@synthesize noteShareReceiveDetails = _noteShareReceiveDetails;
@synthesize openNoteSharedDetails = _openNoteSharedDetails;
@synthesize sfAddGroupDetails = _sfAddGroupDetails;
@synthesize sfAllowNonMembersToViewSharedLinksDetails = _sfAllowNonMembersToViewSharedLinksDetails;
@synthesize sfExternalInviteWarnDetails = _sfExternalInviteWarnDetails;
@synthesize sfFbInviteDetails = _sfFbInviteDetails;
@synthesize sfFbInviteChangeRoleDetails = _sfFbInviteChangeRoleDetails;
@synthesize sfFbUninviteDetails = _sfFbUninviteDetails;
@synthesize sfInviteGroupDetails = _sfInviteGroupDetails;
@synthesize sfTeamGrantAccessDetails = _sfTeamGrantAccessDetails;
@synthesize sfTeamInviteDetails = _sfTeamInviteDetails;
@synthesize sfTeamInviteChangeRoleDetails = _sfTeamInviteChangeRoleDetails;
@synthesize sfTeamJoinDetails = _sfTeamJoinDetails;
@synthesize sfTeamJoinFromOobLinkDetails = _sfTeamJoinFromOobLinkDetails;
@synthesize sfTeamUninviteDetails = _sfTeamUninviteDetails;
@synthesize sharedContentAddInviteesDetails = _sharedContentAddInviteesDetails;
@synthesize sharedContentAddLinkExpiryDetails = _sharedContentAddLinkExpiryDetails;
@synthesize sharedContentAddLinkPasswordDetails = _sharedContentAddLinkPasswordDetails;
@synthesize sharedContentAddMemberDetails = _sharedContentAddMemberDetails;
@synthesize sharedContentChangeDownloadsPolicyDetails = _sharedContentChangeDownloadsPolicyDetails;
@synthesize sharedContentChangeInviteeRoleDetails = _sharedContentChangeInviteeRoleDetails;
@synthesize sharedContentChangeLinkAudienceDetails = _sharedContentChangeLinkAudienceDetails;
@synthesize sharedContentChangeLinkExpiryDetails = _sharedContentChangeLinkExpiryDetails;
@synthesize sharedContentChangeLinkPasswordDetails = _sharedContentChangeLinkPasswordDetails;
@synthesize sharedContentChangeMemberRoleDetails = _sharedContentChangeMemberRoleDetails;
@synthesize sharedContentChangeViewerInfoPolicyDetails = _sharedContentChangeViewerInfoPolicyDetails;
@synthesize sharedContentClaimInvitationDetails = _sharedContentClaimInvitationDetails;
@synthesize sharedContentCopyDetails = _sharedContentCopyDetails;
@synthesize sharedContentDownloadDetails = _sharedContentDownloadDetails;
@synthesize sharedContentRelinquishMembershipDetails = _sharedContentRelinquishMembershipDetails;
@synthesize sharedContentRemoveInviteesDetails = _sharedContentRemoveInviteesDetails;
@synthesize sharedContentRemoveLinkExpiryDetails = _sharedContentRemoveLinkExpiryDetails;
@synthesize sharedContentRemoveLinkPasswordDetails = _sharedContentRemoveLinkPasswordDetails;
@synthesize sharedContentRemoveMemberDetails = _sharedContentRemoveMemberDetails;
@synthesize sharedContentRequestAccessDetails = _sharedContentRequestAccessDetails;
@synthesize sharedContentUnshareDetails = _sharedContentUnshareDetails;
@synthesize sharedContentViewDetails = _sharedContentViewDetails;
@synthesize sharedFolderChangeLinkPolicyDetails = _sharedFolderChangeLinkPolicyDetails;
@synthesize sharedFolderChangeMembersInheritancePolicyDetails = _sharedFolderChangeMembersInheritancePolicyDetails;
@synthesize sharedFolderChangeMembersManagementPolicyDetails = _sharedFolderChangeMembersManagementPolicyDetails;
@synthesize sharedFolderChangeMembersPolicyDetails = _sharedFolderChangeMembersPolicyDetails;
@synthesize sharedFolderCreateDetails = _sharedFolderCreateDetails;
@synthesize sharedFolderDeclineInvitationDetails = _sharedFolderDeclineInvitationDetails;
@synthesize sharedFolderMountDetails = _sharedFolderMountDetails;
@synthesize sharedFolderNestDetails = _sharedFolderNestDetails;
@synthesize sharedFolderTransferOwnershipDetails = _sharedFolderTransferOwnershipDetails;
@synthesize sharedFolderUnmountDetails = _sharedFolderUnmountDetails;
@synthesize sharedLinkAddExpiryDetails = _sharedLinkAddExpiryDetails;
@synthesize sharedLinkChangeExpiryDetails = _sharedLinkChangeExpiryDetails;
@synthesize sharedLinkChangeVisibilityDetails = _sharedLinkChangeVisibilityDetails;
@synthesize sharedLinkCopyDetails = _sharedLinkCopyDetails;
@synthesize sharedLinkCreateDetails = _sharedLinkCreateDetails;
@synthesize sharedLinkDisableDetails = _sharedLinkDisableDetails;
@synthesize sharedLinkDownloadDetails = _sharedLinkDownloadDetails;
@synthesize sharedLinkRemoveExpiryDetails = _sharedLinkRemoveExpiryDetails;
@synthesize sharedLinkShareDetails = _sharedLinkShareDetails;
@synthesize sharedLinkViewDetails = _sharedLinkViewDetails;
@synthesize sharedNoteOpenedDetails = _sharedNoteOpenedDetails;
@synthesize shmodelGroupShareDetails = _shmodelGroupShareDetails;
@synthesize showcaseAccessGrantedDetails = _showcaseAccessGrantedDetails;
@synthesize showcaseAddMemberDetails = _showcaseAddMemberDetails;
@synthesize showcaseArchivedDetails = _showcaseArchivedDetails;
@synthesize showcaseCreatedDetails = _showcaseCreatedDetails;
@synthesize showcaseDeleteCommentDetails = _showcaseDeleteCommentDetails;
@synthesize showcaseEditedDetails = _showcaseEditedDetails;
@synthesize showcaseEditCommentDetails = _showcaseEditCommentDetails;
@synthesize showcaseFileAddedDetails = _showcaseFileAddedDetails;
@synthesize showcaseFileDownloadDetails = _showcaseFileDownloadDetails;
@synthesize showcaseFileRemovedDetails = _showcaseFileRemovedDetails;
@synthesize showcaseFileViewDetails = _showcaseFileViewDetails;
@synthesize showcasePermanentlyDeletedDetails = _showcasePermanentlyDeletedDetails;
@synthesize showcasePostCommentDetails = _showcasePostCommentDetails;
@synthesize showcaseRemoveMemberDetails = _showcaseRemoveMemberDetails;
@synthesize showcaseRenamedDetails = _showcaseRenamedDetails;
@synthesize showcaseRequestAccessDetails = _showcaseRequestAccessDetails;
@synthesize showcaseResolveCommentDetails = _showcaseResolveCommentDetails;
@synthesize showcaseRestoredDetails = _showcaseRestoredDetails;
@synthesize showcaseTrashedDetails = _showcaseTrashedDetails;
@synthesize showcaseTrashedDeprecatedDetails = _showcaseTrashedDeprecatedDetails;
@synthesize showcaseUnresolveCommentDetails = _showcaseUnresolveCommentDetails;
@synthesize showcaseUntrashedDetails = _showcaseUntrashedDetails;
@synthesize showcaseUntrashedDeprecatedDetails = _showcaseUntrashedDeprecatedDetails;
@synthesize showcaseViewDetails = _showcaseViewDetails;
@synthesize ssoAddCertDetails = _ssoAddCertDetails;
@synthesize ssoAddLoginUrlDetails = _ssoAddLoginUrlDetails;
@synthesize ssoAddLogoutUrlDetails = _ssoAddLogoutUrlDetails;
@synthesize ssoChangeCertDetails = _ssoChangeCertDetails;
@synthesize ssoChangeLoginUrlDetails = _ssoChangeLoginUrlDetails;
@synthesize ssoChangeLogoutUrlDetails = _ssoChangeLogoutUrlDetails;
@synthesize ssoChangeSamlIdentityModeDetails = _ssoChangeSamlIdentityModeDetails;
@synthesize ssoRemoveCertDetails = _ssoRemoveCertDetails;
@synthesize ssoRemoveLoginUrlDetails = _ssoRemoveLoginUrlDetails;
@synthesize ssoRemoveLogoutUrlDetails = _ssoRemoveLogoutUrlDetails;
@synthesize teamFolderChangeStatusDetails = _teamFolderChangeStatusDetails;
@synthesize teamFolderCreateDetails = _teamFolderCreateDetails;
@synthesize teamFolderDowngradeDetails = _teamFolderDowngradeDetails;
@synthesize teamFolderPermanentlyDeleteDetails = _teamFolderPermanentlyDeleteDetails;
@synthesize teamFolderRenameDetails = _teamFolderRenameDetails;
@synthesize teamSelectiveSyncSettingsChangedDetails = _teamSelectiveSyncSettingsChangedDetails;
@synthesize accountCaptureChangePolicyDetails = _accountCaptureChangePolicyDetails;
@synthesize allowDownloadDisabledDetails = _allowDownloadDisabledDetails;
@synthesize allowDownloadEnabledDetails = _allowDownloadEnabledDetails;
@synthesize dataPlacementRestrictionChangePolicyDetails = _dataPlacementRestrictionChangePolicyDetails;
@synthesize dataPlacementRestrictionSatisfyPolicyDetails = _dataPlacementRestrictionSatisfyPolicyDetails;
@synthesize deviceApprovalsChangeDesktopPolicyDetails = _deviceApprovalsChangeDesktopPolicyDetails;
@synthesize deviceApprovalsChangeMobilePolicyDetails = _deviceApprovalsChangeMobilePolicyDetails;
@synthesize deviceApprovalsChangeOverageActionDetails = _deviceApprovalsChangeOverageActionDetails;
@synthesize deviceApprovalsChangeUnlinkActionDetails = _deviceApprovalsChangeUnlinkActionDetails;
@synthesize directoryRestrictionsAddMembersDetails = _directoryRestrictionsAddMembersDetails;
@synthesize directoryRestrictionsRemoveMembersDetails = _directoryRestrictionsRemoveMembersDetails;
@synthesize emmAddExceptionDetails = _emmAddExceptionDetails;
@synthesize emmChangePolicyDetails = _emmChangePolicyDetails;
@synthesize emmRemoveExceptionDetails = _emmRemoveExceptionDetails;
@synthesize extendedVersionHistoryChangePolicyDetails = _extendedVersionHistoryChangePolicyDetails;
@synthesize fileCommentsChangePolicyDetails = _fileCommentsChangePolicyDetails;
@synthesize fileRequestsChangePolicyDetails = _fileRequestsChangePolicyDetails;
@synthesize fileRequestsEmailsEnabledDetails = _fileRequestsEmailsEnabledDetails;
@synthesize fileRequestsEmailsRestrictedToTeamOnlyDetails = _fileRequestsEmailsRestrictedToTeamOnlyDetails;
@synthesize googleSsoChangePolicyDetails = _googleSsoChangePolicyDetails;
@synthesize groupUserManagementChangePolicyDetails = _groupUserManagementChangePolicyDetails;
@synthesize memberRequestsChangePolicyDetails = _memberRequestsChangePolicyDetails;
@synthesize memberSpaceLimitsAddExceptionDetails = _memberSpaceLimitsAddExceptionDetails;
@synthesize memberSpaceLimitsChangeCapsTypePolicyDetails = _memberSpaceLimitsChangeCapsTypePolicyDetails;
@synthesize memberSpaceLimitsChangePolicyDetails = _memberSpaceLimitsChangePolicyDetails;
@synthesize memberSpaceLimitsRemoveExceptionDetails = _memberSpaceLimitsRemoveExceptionDetails;
@synthesize memberSuggestionsChangePolicyDetails = _memberSuggestionsChangePolicyDetails;
@synthesize microsoftOfficeAddinChangePolicyDetails = _microsoftOfficeAddinChangePolicyDetails;
@synthesize networkControlChangePolicyDetails = _networkControlChangePolicyDetails;
@synthesize paperChangeDeploymentPolicyDetails = _paperChangeDeploymentPolicyDetails;
@synthesize paperChangeMemberLinkPolicyDetails = _paperChangeMemberLinkPolicyDetails;
@synthesize paperChangeMemberPolicyDetails = _paperChangeMemberPolicyDetails;
@synthesize paperChangePolicyDetails = _paperChangePolicyDetails;
@synthesize paperEnabledUsersGroupAdditionDetails = _paperEnabledUsersGroupAdditionDetails;
@synthesize paperEnabledUsersGroupRemovalDetails = _paperEnabledUsersGroupRemovalDetails;
@synthesize permanentDeleteChangePolicyDetails = _permanentDeleteChangePolicyDetails;
@synthesize sharingChangeFolderJoinPolicyDetails = _sharingChangeFolderJoinPolicyDetails;
@synthesize sharingChangeLinkPolicyDetails = _sharingChangeLinkPolicyDetails;
@synthesize sharingChangeMemberPolicyDetails = _sharingChangeMemberPolicyDetails;
@synthesize showcaseChangeDownloadPolicyDetails = _showcaseChangeDownloadPolicyDetails;
@synthesize showcaseChangeEnabledPolicyDetails = _showcaseChangeEnabledPolicyDetails;
@synthesize showcaseChangeExternalSharingPolicyDetails = _showcaseChangeExternalSharingPolicyDetails;
@synthesize smartSyncChangePolicyDetails = _smartSyncChangePolicyDetails;
@synthesize smartSyncNotOptOutDetails = _smartSyncNotOptOutDetails;
@synthesize smartSyncOptOutDetails = _smartSyncOptOutDetails;
@synthesize ssoChangePolicyDetails = _ssoChangePolicyDetails;
@synthesize tfaChangePolicyDetails = _tfaChangePolicyDetails;
@synthesize twoAccountChangePolicyDetails = _twoAccountChangePolicyDetails;
@synthesize webSessionsChangeFixedLengthPolicyDetails = _webSessionsChangeFixedLengthPolicyDetails;
@synthesize webSessionsChangeIdleLengthPolicyDetails = _webSessionsChangeIdleLengthPolicyDetails;
@synthesize teamMergeFromDetails = _teamMergeFromDetails;
@synthesize teamMergeToDetails = _teamMergeToDetails;
@synthesize teamProfileAddLogoDetails = _teamProfileAddLogoDetails;
@synthesize teamProfileChangeDefaultLanguageDetails = _teamProfileChangeDefaultLanguageDetails;
@synthesize teamProfileChangeLogoDetails = _teamProfileChangeLogoDetails;
@synthesize teamProfileChangeNameDetails = _teamProfileChangeNameDetails;
@synthesize teamProfileRemoveLogoDetails = _teamProfileRemoveLogoDetails;
@synthesize tfaAddBackupPhoneDetails = _tfaAddBackupPhoneDetails;
@synthesize tfaAddSecurityKeyDetails = _tfaAddSecurityKeyDetails;
@synthesize tfaChangeBackupPhoneDetails = _tfaChangeBackupPhoneDetails;
@synthesize tfaChangeStatusDetails = _tfaChangeStatusDetails;
@synthesize tfaRemoveBackupPhoneDetails = _tfaRemoveBackupPhoneDetails;
@synthesize tfaRemoveSecurityKeyDetails = _tfaRemoveSecurityKeyDetails;
@synthesize tfaResetDetails = _tfaResetDetails;
@synthesize missingDetails = _missingDetails;

#pragma mark - Constructors

- (instancetype)initWithAppLinkTeamDetails:(DBTEAMLOGAppLinkTeamDetails *)appLinkTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppLinkTeamDetails;
    _appLinkTeamDetails = appLinkTeamDetails;
  }
  return self;
}

- (instancetype)initWithAppLinkUserDetails:(DBTEAMLOGAppLinkUserDetails *)appLinkUserDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppLinkUserDetails;
    _appLinkUserDetails = appLinkUserDetails;
  }
  return self;
}

- (instancetype)initWithAppUnlinkTeamDetails:(DBTEAMLOGAppUnlinkTeamDetails *)appUnlinkTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppUnlinkTeamDetails;
    _appUnlinkTeamDetails = appUnlinkTeamDetails;
  }
  return self;
}

- (instancetype)initWithAppUnlinkUserDetails:(DBTEAMLOGAppUnlinkUserDetails *)appUnlinkUserDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppUnlinkUserDetails;
    _appUnlinkUserDetails = appUnlinkUserDetails;
  }
  return self;
}

- (instancetype)initWithFileAddCommentDetails:(DBTEAMLOGFileAddCommentDetails *)fileAddCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileAddCommentDetails;
    _fileAddCommentDetails = fileAddCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileChangeCommentSubscriptionDetails:
    (DBTEAMLOGFileChangeCommentSubscriptionDetails *)fileChangeCommentSubscriptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails;
    _fileChangeCommentSubscriptionDetails = fileChangeCommentSubscriptionDetails;
  }
  return self;
}

- (instancetype)initWithFileDeleteCommentDetails:(DBTEAMLOGFileDeleteCommentDetails *)fileDeleteCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileDeleteCommentDetails;
    _fileDeleteCommentDetails = fileDeleteCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileLikeCommentDetails:(DBTEAMLOGFileLikeCommentDetails *)fileLikeCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileLikeCommentDetails;
    _fileLikeCommentDetails = fileLikeCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileResolveCommentDetails:(DBTEAMLOGFileResolveCommentDetails *)fileResolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileResolveCommentDetails;
    _fileResolveCommentDetails = fileResolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileUnlikeCommentDetails:(DBTEAMLOGFileUnlikeCommentDetails *)fileUnlikeCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileUnlikeCommentDetails;
    _fileUnlikeCommentDetails = fileUnlikeCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileUnresolveCommentDetails:
    (DBTEAMLOGFileUnresolveCommentDetails *)fileUnresolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileUnresolveCommentDetails;
    _fileUnresolveCommentDetails = fileUnresolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpDesktopDetails:
    (DBTEAMLOGDeviceChangeIpDesktopDetails *)deviceChangeIpDesktopDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails;
    _deviceChangeIpDesktopDetails = deviceChangeIpDesktopDetails;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpMobileDetails:
    (DBTEAMLOGDeviceChangeIpMobileDetails *)deviceChangeIpMobileDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails;
    _deviceChangeIpMobileDetails = deviceChangeIpMobileDetails;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpWebDetails:(DBTEAMLOGDeviceChangeIpWebDetails *)deviceChangeIpWebDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceChangeIpWebDetails;
    _deviceChangeIpWebDetails = deviceChangeIpWebDetails;
  }
  return self;
}

- (instancetype)initWithDeviceDeleteOnUnlinkFailDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)deviceDeleteOnUnlinkFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails;
    _deviceDeleteOnUnlinkFailDetails = deviceDeleteOnUnlinkFailDetails;
  }
  return self;
}

- (instancetype)initWithDeviceDeleteOnUnlinkSuccessDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)deviceDeleteOnUnlinkSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails;
    _deviceDeleteOnUnlinkSuccessDetails = deviceDeleteOnUnlinkSuccessDetails;
  }
  return self;
}

- (instancetype)initWithDeviceLinkFailDetails:(DBTEAMLOGDeviceLinkFailDetails *)deviceLinkFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceLinkFailDetails;
    _deviceLinkFailDetails = deviceLinkFailDetails;
  }
  return self;
}

- (instancetype)initWithDeviceLinkSuccessDetails:(DBTEAMLOGDeviceLinkSuccessDetails *)deviceLinkSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceLinkSuccessDetails;
    _deviceLinkSuccessDetails = deviceLinkSuccessDetails;
  }
  return self;
}

- (instancetype)initWithDeviceManagementDisabledDetails:
    (DBTEAMLOGDeviceManagementDisabledDetails *)deviceManagementDisabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceManagementDisabledDetails;
    _deviceManagementDisabledDetails = deviceManagementDisabledDetails;
  }
  return self;
}

- (instancetype)initWithDeviceManagementEnabledDetails:
    (DBTEAMLOGDeviceManagementEnabledDetails *)deviceManagementEnabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceManagementEnabledDetails;
    _deviceManagementEnabledDetails = deviceManagementEnabledDetails;
  }
  return self;
}

- (instancetype)initWithDeviceUnlinkDetails:(DBTEAMLOGDeviceUnlinkDetails *)deviceUnlinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceUnlinkDetails;
    _deviceUnlinkDetails = deviceUnlinkDetails;
  }
  return self;
}

- (instancetype)initWithEmmRefreshAuthTokenDetails:(DBTEAMLOGEmmRefreshAuthTokenDetails *)emmRefreshAuthTokenDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails;
    _emmRefreshAuthTokenDetails = emmRefreshAuthTokenDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureChangeAvailabilityDetails:
    (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)accountCaptureChangeAvailabilityDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails;
    _accountCaptureChangeAvailabilityDetails = accountCaptureChangeAvailabilityDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureMigrateAccountDetails:
    (DBTEAMLOGAccountCaptureMigrateAccountDetails *)accountCaptureMigrateAccountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails;
    _accountCaptureMigrateAccountDetails = accountCaptureMigrateAccountDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureNotificationEmailsSentDetails:
    (DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *)accountCaptureNotificationEmailsSentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails;
    _accountCaptureNotificationEmailsSentDetails = accountCaptureNotificationEmailsSentDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureRelinquishAccountDetails:
    (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)accountCaptureRelinquishAccountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails;
    _accountCaptureRelinquishAccountDetails = accountCaptureRelinquishAccountDetails;
  }
  return self;
}

- (instancetype)initWithDisabledDomainInvitesDetails:
    (DBTEAMLOGDisabledDomainInvitesDetails *)disabledDomainInvitesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDisabledDomainInvitesDetails;
    _disabledDomainInvitesDetails = disabledDomainInvitesDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesApproveRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)domainInvitesApproveRequestToJoinTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails;
    _domainInvitesApproveRequestToJoinTeamDetails = domainInvitesApproveRequestToJoinTeamDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesDeclineRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)domainInvitesDeclineRequestToJoinTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails;
    _domainInvitesDeclineRequestToJoinTeamDetails = domainInvitesDeclineRequestToJoinTeamDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesEmailExistingUsersDetails:
    (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)domainInvitesEmailExistingUsersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails;
    _domainInvitesEmailExistingUsersDetails = domainInvitesEmailExistingUsersDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)domainInvitesRequestToJoinTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails;
    _domainInvitesRequestToJoinTeamDetails = domainInvitesRequestToJoinTeamDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToNoDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)domainInvitesSetInviteNewUserPrefToNoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails;
    _domainInvitesSetInviteNewUserPrefToNoDetails = domainInvitesSetInviteNewUserPrefToNoDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToYesDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)domainInvitesSetInviteNewUserPrefToYesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails;
    _domainInvitesSetInviteNewUserPrefToYesDetails = domainInvitesSetInviteNewUserPrefToYesDetails;
  }
  return self;
}

- (instancetype)initWithDomainVerificationAddDomainFailDetails:
    (DBTEAMLOGDomainVerificationAddDomainFailDetails *)domainVerificationAddDomainFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails;
    _domainVerificationAddDomainFailDetails = domainVerificationAddDomainFailDetails;
  }
  return self;
}

- (instancetype)initWithDomainVerificationAddDomainSuccessDetails:
    (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)domainVerificationAddDomainSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails;
    _domainVerificationAddDomainSuccessDetails = domainVerificationAddDomainSuccessDetails;
  }
  return self;
}

- (instancetype)initWithDomainVerificationRemoveDomainDetails:
    (DBTEAMLOGDomainVerificationRemoveDomainDetails *)domainVerificationRemoveDomainDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails;
    _domainVerificationRemoveDomainDetails = domainVerificationRemoveDomainDetails;
  }
  return self;
}

- (instancetype)initWithEnabledDomainInvitesDetails:
    (DBTEAMLOGEnabledDomainInvitesDetails *)enabledDomainInvitesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEnabledDomainInvitesDetails;
    _enabledDomainInvitesDetails = enabledDomainInvitesDetails;
  }
  return self;
}

- (instancetype)initWithCreateFolderDetails:(DBTEAMLOGCreateFolderDetails *)createFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsCreateFolderDetails;
    _createFolderDetails = createFolderDetails;
  }
  return self;
}

- (instancetype)initWithFileAddDetails:(DBTEAMLOGFileAddDetails *)fileAddDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileAddDetails;
    _fileAddDetails = fileAddDetails;
  }
  return self;
}

- (instancetype)initWithFileCopyDetails:(DBTEAMLOGFileCopyDetails *)fileCopyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileCopyDetails;
    _fileCopyDetails = fileCopyDetails;
  }
  return self;
}

- (instancetype)initWithFileDeleteDetails:(DBTEAMLOGFileDeleteDetails *)fileDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileDeleteDetails;
    _fileDeleteDetails = fileDeleteDetails;
  }
  return self;
}

- (instancetype)initWithFileDownloadDetails:(DBTEAMLOGFileDownloadDetails *)fileDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileDownloadDetails;
    _fileDownloadDetails = fileDownloadDetails;
  }
  return self;
}

- (instancetype)initWithFileEditDetails:(DBTEAMLOGFileEditDetails *)fileEditDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileEditDetails;
    _fileEditDetails = fileEditDetails;
  }
  return self;
}

- (instancetype)initWithFileGetCopyReferenceDetails:
    (DBTEAMLOGFileGetCopyReferenceDetails *)fileGetCopyReferenceDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileGetCopyReferenceDetails;
    _fileGetCopyReferenceDetails = fileGetCopyReferenceDetails;
  }
  return self;
}

- (instancetype)initWithFileMoveDetails:(DBTEAMLOGFileMoveDetails *)fileMoveDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileMoveDetails;
    _fileMoveDetails = fileMoveDetails;
  }
  return self;
}

- (instancetype)initWithFilePermanentlyDeleteDetails:
    (DBTEAMLOGFilePermanentlyDeleteDetails *)filePermanentlyDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails;
    _filePermanentlyDeleteDetails = filePermanentlyDeleteDetails;
  }
  return self;
}

- (instancetype)initWithFilePreviewDetails:(DBTEAMLOGFilePreviewDetails *)filePreviewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFilePreviewDetails;
    _filePreviewDetails = filePreviewDetails;
  }
  return self;
}

- (instancetype)initWithFileRenameDetails:(DBTEAMLOGFileRenameDetails *)fileRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRenameDetails;
    _fileRenameDetails = fileRenameDetails;
  }
  return self;
}

- (instancetype)initWithFileRestoreDetails:(DBTEAMLOGFileRestoreDetails *)fileRestoreDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRestoreDetails;
    _fileRestoreDetails = fileRestoreDetails;
  }
  return self;
}

- (instancetype)initWithFileRevertDetails:(DBTEAMLOGFileRevertDetails *)fileRevertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRevertDetails;
    _fileRevertDetails = fileRevertDetails;
  }
  return self;
}

- (instancetype)initWithFileRollbackChangesDetails:(DBTEAMLOGFileRollbackChangesDetails *)fileRollbackChangesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRollbackChangesDetails;
    _fileRollbackChangesDetails = fileRollbackChangesDetails;
  }
  return self;
}

- (instancetype)initWithFileSaveCopyReferenceDetails:
    (DBTEAMLOGFileSaveCopyReferenceDetails *)fileSaveCopyReferenceDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails;
    _fileSaveCopyReferenceDetails = fileSaveCopyReferenceDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestChangeDetails:(DBTEAMLOGFileRequestChangeDetails *)fileRequestChangeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestChangeDetails;
    _fileRequestChangeDetails = fileRequestChangeDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestCloseDetails:(DBTEAMLOGFileRequestCloseDetails *)fileRequestCloseDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestCloseDetails;
    _fileRequestCloseDetails = fileRequestCloseDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestCreateDetails:(DBTEAMLOGFileRequestCreateDetails *)fileRequestCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestCreateDetails;
    _fileRequestCreateDetails = fileRequestCreateDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestReceiveFileDetails:
    (DBTEAMLOGFileRequestReceiveFileDetails *)fileRequestReceiveFileDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestReceiveFileDetails;
    _fileRequestReceiveFileDetails = fileRequestReceiveFileDetails;
  }
  return self;
}

- (instancetype)initWithGroupAddExternalIdDetails:(DBTEAMLOGGroupAddExternalIdDetails *)groupAddExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupAddExternalIdDetails;
    _groupAddExternalIdDetails = groupAddExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithGroupAddMemberDetails:(DBTEAMLOGGroupAddMemberDetails *)groupAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupAddMemberDetails;
    _groupAddMemberDetails = groupAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithGroupChangeExternalIdDetails:
    (DBTEAMLOGGroupChangeExternalIdDetails *)groupChangeExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupChangeExternalIdDetails;
    _groupChangeExternalIdDetails = groupChangeExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithGroupChangeManagementTypeDetails:
    (DBTEAMLOGGroupChangeManagementTypeDetails *)groupChangeManagementTypeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails;
    _groupChangeManagementTypeDetails = groupChangeManagementTypeDetails;
  }
  return self;
}

- (instancetype)initWithGroupChangeMemberRoleDetails:
    (DBTEAMLOGGroupChangeMemberRoleDetails *)groupChangeMemberRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails;
    _groupChangeMemberRoleDetails = groupChangeMemberRoleDetails;
  }
  return self;
}

- (instancetype)initWithGroupCreateDetails:(DBTEAMLOGGroupCreateDetails *)groupCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupCreateDetails;
    _groupCreateDetails = groupCreateDetails;
  }
  return self;
}

- (instancetype)initWithGroupDeleteDetails:(DBTEAMLOGGroupDeleteDetails *)groupDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupDeleteDetails;
    _groupDeleteDetails = groupDeleteDetails;
  }
  return self;
}

- (instancetype)initWithGroupDescriptionUpdatedDetails:
    (DBTEAMLOGGroupDescriptionUpdatedDetails *)groupDescriptionUpdatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails;
    _groupDescriptionUpdatedDetails = groupDescriptionUpdatedDetails;
  }
  return self;
}

- (instancetype)initWithGroupJoinPolicyUpdatedDetails:
    (DBTEAMLOGGroupJoinPolicyUpdatedDetails *)groupJoinPolicyUpdatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails;
    _groupJoinPolicyUpdatedDetails = groupJoinPolicyUpdatedDetails;
  }
  return self;
}

- (instancetype)initWithGroupMovedDetails:(DBTEAMLOGGroupMovedDetails *)groupMovedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupMovedDetails;
    _groupMovedDetails = groupMovedDetails;
  }
  return self;
}

- (instancetype)initWithGroupRemoveExternalIdDetails:
    (DBTEAMLOGGroupRemoveExternalIdDetails *)groupRemoveExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails;
    _groupRemoveExternalIdDetails = groupRemoveExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithGroupRemoveMemberDetails:(DBTEAMLOGGroupRemoveMemberDetails *)groupRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupRemoveMemberDetails;
    _groupRemoveMemberDetails = groupRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithGroupRenameDetails:(DBTEAMLOGGroupRenameDetails *)groupRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupRenameDetails;
    _groupRenameDetails = groupRenameDetails;
  }
  return self;
}

- (instancetype)initWithEmmErrorDetails:(DBTEAMLOGEmmErrorDetails *)emmErrorDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmErrorDetails;
    _emmErrorDetails = emmErrorDetails;
  }
  return self;
}

- (instancetype)initWithLoginFailDetails:(DBTEAMLOGLoginFailDetails *)loginFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLoginFailDetails;
    _loginFailDetails = loginFailDetails;
  }
  return self;
}

- (instancetype)initWithLoginSuccessDetails:(DBTEAMLOGLoginSuccessDetails *)loginSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLoginSuccessDetails;
    _loginSuccessDetails = loginSuccessDetails;
  }
  return self;
}

- (instancetype)initWithLogoutDetails:(DBTEAMLOGLogoutDetails *)logoutDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLogoutDetails;
    _logoutDetails = logoutDetails;
  }
  return self;
}

- (instancetype)initWithResellerSupportSessionEndDetails:
    (DBTEAMLOGResellerSupportSessionEndDetails *)resellerSupportSessionEndDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsResellerSupportSessionEndDetails;
    _resellerSupportSessionEndDetails = resellerSupportSessionEndDetails;
  }
  return self;
}

- (instancetype)initWithResellerSupportSessionStartDetails:
    (DBTEAMLOGResellerSupportSessionStartDetails *)resellerSupportSessionStartDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsResellerSupportSessionStartDetails;
    _resellerSupportSessionStartDetails = resellerSupportSessionStartDetails;
  }
  return self;
}

- (instancetype)initWithSignInAsSessionEndDetails:(DBTEAMLOGSignInAsSessionEndDetails *)signInAsSessionEndDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSignInAsSessionEndDetails;
    _signInAsSessionEndDetails = signInAsSessionEndDetails;
  }
  return self;
}

- (instancetype)initWithSignInAsSessionStartDetails:
    (DBTEAMLOGSignInAsSessionStartDetails *)signInAsSessionStartDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSignInAsSessionStartDetails;
    _signInAsSessionStartDetails = signInAsSessionStartDetails;
  }
  return self;
}

- (instancetype)initWithSsoErrorDetails:(DBTEAMLOGSsoErrorDetails *)ssoErrorDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoErrorDetails;
    _ssoErrorDetails = ssoErrorDetails;
  }
  return self;
}

- (instancetype)initWithMemberAddNameDetails:(DBTEAMLOGMemberAddNameDetails *)memberAddNameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberAddNameDetails;
    _memberAddNameDetails = memberAddNameDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeAdminRoleDetails:
    (DBTEAMLOGMemberChangeAdminRoleDetails *)memberChangeAdminRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails;
    _memberChangeAdminRoleDetails = memberChangeAdminRoleDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeEmailDetails:(DBTEAMLOGMemberChangeEmailDetails *)memberChangeEmailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeEmailDetails;
    _memberChangeEmailDetails = memberChangeEmailDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeMembershipTypeDetails:
    (DBTEAMLOGMemberChangeMembershipTypeDetails *)memberChangeMembershipTypeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails;
    _memberChangeMembershipTypeDetails = memberChangeMembershipTypeDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeNameDetails:(DBTEAMLOGMemberChangeNameDetails *)memberChangeNameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeNameDetails;
    _memberChangeNameDetails = memberChangeNameDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeStatusDetails:(DBTEAMLOGMemberChangeStatusDetails *)memberChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeStatusDetails;
    _memberChangeStatusDetails = memberChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithMemberPermanentlyDeleteAccountContentsDetails:
    (DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)memberPermanentlyDeleteAccountContentsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails;
    _memberPermanentlyDeleteAccountContentsDetails = memberPermanentlyDeleteAccountContentsDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsAddCustomQuotaDetails:
    (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails *)memberSpaceLimitsAddCustomQuotaDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails;
    _memberSpaceLimitsAddCustomQuotaDetails = memberSpaceLimitsAddCustomQuotaDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeCustomQuotaDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails *)memberSpaceLimitsChangeCustomQuotaDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails;
    _memberSpaceLimitsChangeCustomQuotaDetails = memberSpaceLimitsChangeCustomQuotaDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeStatusDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)memberSpaceLimitsChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails;
    _memberSpaceLimitsChangeStatusDetails = memberSpaceLimitsChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsRemoveCustomQuotaDetails:
    (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails *)memberSpaceLimitsRemoveCustomQuotaDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails;
    _memberSpaceLimitsRemoveCustomQuotaDetails = memberSpaceLimitsRemoveCustomQuotaDetails;
  }
  return self;
}

- (instancetype)initWithMemberSuggestDetails:(DBTEAMLOGMemberSuggestDetails *)memberSuggestDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSuggestDetails;
    _memberSuggestDetails = memberSuggestDetails;
  }
  return self;
}

- (instancetype)initWithMemberTransferAccountContentsDetails:
    (DBTEAMLOGMemberTransferAccountContentsDetails *)memberTransferAccountContentsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails;
    _memberTransferAccountContentsDetails = memberTransferAccountContentsDetails;
  }
  return self;
}

- (instancetype)initWithSecondaryMailsPolicyChangedDetails:
    (DBTEAMLOGSecondaryMailsPolicyChangedDetails *)secondaryMailsPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails;
    _secondaryMailsPolicyChangedDetails = secondaryMailsPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentAddMemberDetails:
    (DBTEAMLOGPaperContentAddMemberDetails *)paperContentAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentAddMemberDetails;
    _paperContentAddMemberDetails = paperContentAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentAddToFolderDetails:
    (DBTEAMLOGPaperContentAddToFolderDetails *)paperContentAddToFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentAddToFolderDetails;
    _paperContentAddToFolderDetails = paperContentAddToFolderDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentArchiveDetails:(DBTEAMLOGPaperContentArchiveDetails *)paperContentArchiveDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentArchiveDetails;
    _paperContentArchiveDetails = paperContentArchiveDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentCreateDetails:(DBTEAMLOGPaperContentCreateDetails *)paperContentCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentCreateDetails;
    _paperContentCreateDetails = paperContentCreateDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentPermanentlyDeleteDetails:
    (DBTEAMLOGPaperContentPermanentlyDeleteDetails *)paperContentPermanentlyDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails;
    _paperContentPermanentlyDeleteDetails = paperContentPermanentlyDeleteDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRemoveFromFolderDetails:
    (DBTEAMLOGPaperContentRemoveFromFolderDetails *)paperContentRemoveFromFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails;
    _paperContentRemoveFromFolderDetails = paperContentRemoveFromFolderDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRemoveMemberDetails:
    (DBTEAMLOGPaperContentRemoveMemberDetails *)paperContentRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails;
    _paperContentRemoveMemberDetails = paperContentRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRenameDetails:(DBTEAMLOGPaperContentRenameDetails *)paperContentRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRenameDetails;
    _paperContentRenameDetails = paperContentRenameDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRestoreDetails:(DBTEAMLOGPaperContentRestoreDetails *)paperContentRestoreDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRestoreDetails;
    _paperContentRestoreDetails = paperContentRestoreDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocAddCommentDetails:(DBTEAMLOGPaperDocAddCommentDetails *)paperDocAddCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocAddCommentDetails;
    _paperDocAddCommentDetails = paperDocAddCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeMemberRoleDetails:
    (DBTEAMLOGPaperDocChangeMemberRoleDetails *)paperDocChangeMemberRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails;
    _paperDocChangeMemberRoleDetails = paperDocChangeMemberRoleDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeSharingPolicyDetails:
    (DBTEAMLOGPaperDocChangeSharingPolicyDetails *)paperDocChangeSharingPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails;
    _paperDocChangeSharingPolicyDetails = paperDocChangeSharingPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeSubscriptionDetails:
    (DBTEAMLOGPaperDocChangeSubscriptionDetails *)paperDocChangeSubscriptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails;
    _paperDocChangeSubscriptionDetails = paperDocChangeSubscriptionDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocDeletedDetails:(DBTEAMLOGPaperDocDeletedDetails *)paperDocDeletedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocDeletedDetails;
    _paperDocDeletedDetails = paperDocDeletedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocDeleteCommentDetails:
    (DBTEAMLOGPaperDocDeleteCommentDetails *)paperDocDeleteCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails;
    _paperDocDeleteCommentDetails = paperDocDeleteCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocDownloadDetails:(DBTEAMLOGPaperDocDownloadDetails *)paperDocDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocDownloadDetails;
    _paperDocDownloadDetails = paperDocDownloadDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocEditDetails:(DBTEAMLOGPaperDocEditDetails *)paperDocEditDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocEditDetails;
    _paperDocEditDetails = paperDocEditDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocEditCommentDetails:(DBTEAMLOGPaperDocEditCommentDetails *)paperDocEditCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocEditCommentDetails;
    _paperDocEditCommentDetails = paperDocEditCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocFollowedDetails:(DBTEAMLOGPaperDocFollowedDetails *)paperDocFollowedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocFollowedDetails;
    _paperDocFollowedDetails = paperDocFollowedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocMentionDetails:(DBTEAMLOGPaperDocMentionDetails *)paperDocMentionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocMentionDetails;
    _paperDocMentionDetails = paperDocMentionDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocRequestAccessDetails:
    (DBTEAMLOGPaperDocRequestAccessDetails *)paperDocRequestAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocRequestAccessDetails;
    _paperDocRequestAccessDetails = paperDocRequestAccessDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocResolveCommentDetails:
    (DBTEAMLOGPaperDocResolveCommentDetails *)paperDocResolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocResolveCommentDetails;
    _paperDocResolveCommentDetails = paperDocResolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocRevertDetails:(DBTEAMLOGPaperDocRevertDetails *)paperDocRevertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocRevertDetails;
    _paperDocRevertDetails = paperDocRevertDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocSlackShareDetails:(DBTEAMLOGPaperDocSlackShareDetails *)paperDocSlackShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocSlackShareDetails;
    _paperDocSlackShareDetails = paperDocSlackShareDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocTeamInviteDetails:(DBTEAMLOGPaperDocTeamInviteDetails *)paperDocTeamInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocTeamInviteDetails;
    _paperDocTeamInviteDetails = paperDocTeamInviteDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocTrashedDetails:(DBTEAMLOGPaperDocTrashedDetails *)paperDocTrashedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocTrashedDetails;
    _paperDocTrashedDetails = paperDocTrashedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocUnresolveCommentDetails:
    (DBTEAMLOGPaperDocUnresolveCommentDetails *)paperDocUnresolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails;
    _paperDocUnresolveCommentDetails = paperDocUnresolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocUntrashedDetails:(DBTEAMLOGPaperDocUntrashedDetails *)paperDocUntrashedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocUntrashedDetails;
    _paperDocUntrashedDetails = paperDocUntrashedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocViewDetails:(DBTEAMLOGPaperDocViewDetails *)paperDocViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocViewDetails;
    _paperDocViewDetails = paperDocViewDetails;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewAllowDetails:
    (DBTEAMLOGPaperExternalViewAllowDetails *)paperExternalViewAllowDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperExternalViewAllowDetails;
    _paperExternalViewAllowDetails = paperExternalViewAllowDetails;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewDefaultTeamDetails:
    (DBTEAMLOGPaperExternalViewDefaultTeamDetails *)paperExternalViewDefaultTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails;
    _paperExternalViewDefaultTeamDetails = paperExternalViewDefaultTeamDetails;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewForbidDetails:
    (DBTEAMLOGPaperExternalViewForbidDetails *)paperExternalViewForbidDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperExternalViewForbidDetails;
    _paperExternalViewForbidDetails = paperExternalViewForbidDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderChangeSubscriptionDetails:
    (DBTEAMLOGPaperFolderChangeSubscriptionDetails *)paperFolderChangeSubscriptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails;
    _paperFolderChangeSubscriptionDetails = paperFolderChangeSubscriptionDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderDeletedDetails:(DBTEAMLOGPaperFolderDeletedDetails *)paperFolderDeletedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderDeletedDetails;
    _paperFolderDeletedDetails = paperFolderDeletedDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderFollowedDetails:(DBTEAMLOGPaperFolderFollowedDetails *)paperFolderFollowedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderFollowedDetails;
    _paperFolderFollowedDetails = paperFolderFollowedDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderTeamInviteDetails:
    (DBTEAMLOGPaperFolderTeamInviteDetails *)paperFolderTeamInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails;
    _paperFolderTeamInviteDetails = paperFolderTeamInviteDetails;
  }
  return self;
}

- (instancetype)initWithPasswordChangeDetails:(DBTEAMLOGPasswordChangeDetails *)passwordChangeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordChangeDetails;
    _passwordChangeDetails = passwordChangeDetails;
  }
  return self;
}

- (instancetype)initWithPasswordResetDetails:(DBTEAMLOGPasswordResetDetails *)passwordResetDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordResetDetails;
    _passwordResetDetails = passwordResetDetails;
  }
  return self;
}

- (instancetype)initWithPasswordResetAllDetails:(DBTEAMLOGPasswordResetAllDetails *)passwordResetAllDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordResetAllDetails;
    _passwordResetAllDetails = passwordResetAllDetails;
  }
  return self;
}

- (instancetype)initWithEmmCreateExceptionsReportDetails:
    (DBTEAMLOGEmmCreateExceptionsReportDetails *)emmCreateExceptionsReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails;
    _emmCreateExceptionsReportDetails = emmCreateExceptionsReportDetails;
  }
  return self;
}

- (instancetype)initWithEmmCreateUsageReportDetails:
    (DBTEAMLOGEmmCreateUsageReportDetails *)emmCreateUsageReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmCreateUsageReportDetails;
    _emmCreateUsageReportDetails = emmCreateUsageReportDetails;
  }
  return self;
}

- (instancetype)initWithExportMembersReportDetails:(DBTEAMLOGExportMembersReportDetails *)exportMembersReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExportMembersReportDetails;
    _exportMembersReportDetails = exportMembersReportDetails;
  }
  return self;
}

- (instancetype)initWithPaperAdminExportStartDetails:
    (DBTEAMLOGPaperAdminExportStartDetails *)paperAdminExportStartDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperAdminExportStartDetails;
    _paperAdminExportStartDetails = paperAdminExportStartDetails;
  }
  return self;
}

- (instancetype)initWithSmartSyncCreateAdminPrivilegeReportDetails:
    (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)smartSyncCreateAdminPrivilegeReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails;
    _smartSyncCreateAdminPrivilegeReportDetails = smartSyncCreateAdminPrivilegeReportDetails;
  }
  return self;
}

- (instancetype)initWithTeamActivityCreateReportDetails:
    (DBTEAMLOGTeamActivityCreateReportDetails *)teamActivityCreateReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamActivityCreateReportDetails;
    _teamActivityCreateReportDetails = teamActivityCreateReportDetails;
  }
  return self;
}

- (instancetype)initWithCollectionShareDetails:(DBTEAMLOGCollectionShareDetails *)collectionShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsCollectionShareDetails;
    _collectionShareDetails = collectionShareDetails;
  }
  return self;
}

- (instancetype)initWithNoteAclInviteOnlyDetails:(DBTEAMLOGNoteAclInviteOnlyDetails *)noteAclInviteOnlyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails;
    _noteAclInviteOnlyDetails = noteAclInviteOnlyDetails;
  }
  return self;
}

- (instancetype)initWithNoteAclLinkDetails:(DBTEAMLOGNoteAclLinkDetails *)noteAclLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteAclLinkDetails;
    _noteAclLinkDetails = noteAclLinkDetails;
  }
  return self;
}

- (instancetype)initWithNoteAclTeamLinkDetails:(DBTEAMLOGNoteAclTeamLinkDetails *)noteAclTeamLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteAclTeamLinkDetails;
    _noteAclTeamLinkDetails = noteAclTeamLinkDetails;
  }
  return self;
}

- (instancetype)initWithNoteSharedDetails:(DBTEAMLOGNoteSharedDetails *)noteSharedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteSharedDetails;
    _noteSharedDetails = noteSharedDetails;
  }
  return self;
}

- (instancetype)initWithNoteShareReceiveDetails:(DBTEAMLOGNoteShareReceiveDetails *)noteShareReceiveDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteShareReceiveDetails;
    _noteShareReceiveDetails = noteShareReceiveDetails;
  }
  return self;
}

- (instancetype)initWithOpenNoteSharedDetails:(DBTEAMLOGOpenNoteSharedDetails *)openNoteSharedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsOpenNoteSharedDetails;
    _openNoteSharedDetails = openNoteSharedDetails;
  }
  return self;
}

- (instancetype)initWithSfAddGroupDetails:(DBTEAMLOGSfAddGroupDetails *)sfAddGroupDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfAddGroupDetails;
    _sfAddGroupDetails = sfAddGroupDetails;
  }
  return self;
}

- (instancetype)initWithSfAllowNonMembersToViewSharedLinksDetails:
    (DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)sfAllowNonMembersToViewSharedLinksDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails;
    _sfAllowNonMembersToViewSharedLinksDetails = sfAllowNonMembersToViewSharedLinksDetails;
  }
  return self;
}

- (instancetype)initWithSfExternalInviteWarnDetails:
    (DBTEAMLOGSfExternalInviteWarnDetails *)sfExternalInviteWarnDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfExternalInviteWarnDetails;
    _sfExternalInviteWarnDetails = sfExternalInviteWarnDetails;
  }
  return self;
}

- (instancetype)initWithSfFbInviteDetails:(DBTEAMLOGSfFbInviteDetails *)sfFbInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfFbInviteDetails;
    _sfFbInviteDetails = sfFbInviteDetails;
  }
  return self;
}

- (instancetype)initWithSfFbInviteChangeRoleDetails:
    (DBTEAMLOGSfFbInviteChangeRoleDetails *)sfFbInviteChangeRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails;
    _sfFbInviteChangeRoleDetails = sfFbInviteChangeRoleDetails;
  }
  return self;
}

- (instancetype)initWithSfFbUninviteDetails:(DBTEAMLOGSfFbUninviteDetails *)sfFbUninviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfFbUninviteDetails;
    _sfFbUninviteDetails = sfFbUninviteDetails;
  }
  return self;
}

- (instancetype)initWithSfInviteGroupDetails:(DBTEAMLOGSfInviteGroupDetails *)sfInviteGroupDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfInviteGroupDetails;
    _sfInviteGroupDetails = sfInviteGroupDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamGrantAccessDetails:(DBTEAMLOGSfTeamGrantAccessDetails *)sfTeamGrantAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamGrantAccessDetails;
    _sfTeamGrantAccessDetails = sfTeamGrantAccessDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamInviteDetails:(DBTEAMLOGSfTeamInviteDetails *)sfTeamInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamInviteDetails;
    _sfTeamInviteDetails = sfTeamInviteDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamInviteChangeRoleDetails:
    (DBTEAMLOGSfTeamInviteChangeRoleDetails *)sfTeamInviteChangeRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails;
    _sfTeamInviteChangeRoleDetails = sfTeamInviteChangeRoleDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamJoinDetails:(DBTEAMLOGSfTeamJoinDetails *)sfTeamJoinDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamJoinDetails;
    _sfTeamJoinDetails = sfTeamJoinDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamJoinFromOobLinkDetails:
    (DBTEAMLOGSfTeamJoinFromOobLinkDetails *)sfTeamJoinFromOobLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails;
    _sfTeamJoinFromOobLinkDetails = sfTeamJoinFromOobLinkDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamUninviteDetails:(DBTEAMLOGSfTeamUninviteDetails *)sfTeamUninviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamUninviteDetails;
    _sfTeamUninviteDetails = sfTeamUninviteDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddInviteesDetails:
    (DBTEAMLOGSharedContentAddInviteesDetails *)sharedContentAddInviteesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddInviteesDetails;
    _sharedContentAddInviteesDetails = sharedContentAddInviteesDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddLinkExpiryDetails:
    (DBTEAMLOGSharedContentAddLinkExpiryDetails *)sharedContentAddLinkExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails;
    _sharedContentAddLinkExpiryDetails = sharedContentAddLinkExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddLinkPasswordDetails:
    (DBTEAMLOGSharedContentAddLinkPasswordDetails *)sharedContentAddLinkPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails;
    _sharedContentAddLinkPasswordDetails = sharedContentAddLinkPasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddMemberDetails:
    (DBTEAMLOGSharedContentAddMemberDetails *)sharedContentAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddMemberDetails;
    _sharedContentAddMemberDetails = sharedContentAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeDownloadsPolicyDetails:
    (DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)sharedContentChangeDownloadsPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails;
    _sharedContentChangeDownloadsPolicyDetails = sharedContentChangeDownloadsPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeInviteeRoleDetails:
    (DBTEAMLOGSharedContentChangeInviteeRoleDetails *)sharedContentChangeInviteeRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails;
    _sharedContentChangeInviteeRoleDetails = sharedContentChangeInviteeRoleDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkAudienceDetails:
    (DBTEAMLOGSharedContentChangeLinkAudienceDetails *)sharedContentChangeLinkAudienceDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails;
    _sharedContentChangeLinkAudienceDetails = sharedContentChangeLinkAudienceDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkExpiryDetails:
    (DBTEAMLOGSharedContentChangeLinkExpiryDetails *)sharedContentChangeLinkExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails;
    _sharedContentChangeLinkExpiryDetails = sharedContentChangeLinkExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkPasswordDetails:
    (DBTEAMLOGSharedContentChangeLinkPasswordDetails *)sharedContentChangeLinkPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails;
    _sharedContentChangeLinkPasswordDetails = sharedContentChangeLinkPasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeMemberRoleDetails:
    (DBTEAMLOGSharedContentChangeMemberRoleDetails *)sharedContentChangeMemberRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails;
    _sharedContentChangeMemberRoleDetails = sharedContentChangeMemberRoleDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeViewerInfoPolicyDetails:
    (DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)sharedContentChangeViewerInfoPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails;
    _sharedContentChangeViewerInfoPolicyDetails = sharedContentChangeViewerInfoPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentClaimInvitationDetails:
    (DBTEAMLOGSharedContentClaimInvitationDetails *)sharedContentClaimInvitationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails;
    _sharedContentClaimInvitationDetails = sharedContentClaimInvitationDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentCopyDetails:(DBTEAMLOGSharedContentCopyDetails *)sharedContentCopyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentCopyDetails;
    _sharedContentCopyDetails = sharedContentCopyDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentDownloadDetails:
    (DBTEAMLOGSharedContentDownloadDetails *)sharedContentDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentDownloadDetails;
    _sharedContentDownloadDetails = sharedContentDownloadDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRelinquishMembershipDetails:
    (DBTEAMLOGSharedContentRelinquishMembershipDetails *)sharedContentRelinquishMembershipDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails;
    _sharedContentRelinquishMembershipDetails = sharedContentRelinquishMembershipDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveInviteesDetails:
    (DBTEAMLOGSharedContentRemoveInviteesDetails *)sharedContentRemoveInviteesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails;
    _sharedContentRemoveInviteesDetails = sharedContentRemoveInviteesDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveLinkExpiryDetails:
    (DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)sharedContentRemoveLinkExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails;
    _sharedContentRemoveLinkExpiryDetails = sharedContentRemoveLinkExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveLinkPasswordDetails:
    (DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)sharedContentRemoveLinkPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails;
    _sharedContentRemoveLinkPasswordDetails = sharedContentRemoveLinkPasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveMemberDetails:
    (DBTEAMLOGSharedContentRemoveMemberDetails *)sharedContentRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails;
    _sharedContentRemoveMemberDetails = sharedContentRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRequestAccessDetails:
    (DBTEAMLOGSharedContentRequestAccessDetails *)sharedContentRequestAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRequestAccessDetails;
    _sharedContentRequestAccessDetails = sharedContentRequestAccessDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentUnshareDetails:
    (DBTEAMLOGSharedContentUnshareDetails *)sharedContentUnshareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentUnshareDetails;
    _sharedContentUnshareDetails = sharedContentUnshareDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentViewDetails:(DBTEAMLOGSharedContentViewDetails *)sharedContentViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentViewDetails;
    _sharedContentViewDetails = sharedContentViewDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeLinkPolicyDetails:
    (DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)sharedFolderChangeLinkPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails;
    _sharedFolderChangeLinkPolicyDetails = sharedFolderChangeLinkPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMembersInheritancePolicyDetails:
    (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails *)sharedFolderChangeMembersInheritancePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails;
    _sharedFolderChangeMembersInheritancePolicyDetails = sharedFolderChangeMembersInheritancePolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMembersManagementPolicyDetails:
    (DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails *)sharedFolderChangeMembersManagementPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails;
    _sharedFolderChangeMembersManagementPolicyDetails = sharedFolderChangeMembersManagementPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMembersPolicyDetails:
    (DBTEAMLOGSharedFolderChangeMembersPolicyDetails *)sharedFolderChangeMembersPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails;
    _sharedFolderChangeMembersPolicyDetails = sharedFolderChangeMembersPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderCreateDetails:(DBTEAMLOGSharedFolderCreateDetails *)sharedFolderCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderCreateDetails;
    _sharedFolderCreateDetails = sharedFolderCreateDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderDeclineInvitationDetails:
    (DBTEAMLOGSharedFolderDeclineInvitationDetails *)sharedFolderDeclineInvitationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails;
    _sharedFolderDeclineInvitationDetails = sharedFolderDeclineInvitationDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderMountDetails:(DBTEAMLOGSharedFolderMountDetails *)sharedFolderMountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderMountDetails;
    _sharedFolderMountDetails = sharedFolderMountDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderNestDetails:(DBTEAMLOGSharedFolderNestDetails *)sharedFolderNestDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderNestDetails;
    _sharedFolderNestDetails = sharedFolderNestDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderTransferOwnershipDetails:
    (DBTEAMLOGSharedFolderTransferOwnershipDetails *)sharedFolderTransferOwnershipDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails;
    _sharedFolderTransferOwnershipDetails = sharedFolderTransferOwnershipDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderUnmountDetails:(DBTEAMLOGSharedFolderUnmountDetails *)sharedFolderUnmountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderUnmountDetails;
    _sharedFolderUnmountDetails = sharedFolderUnmountDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkAddExpiryDetails:(DBTEAMLOGSharedLinkAddExpiryDetails *)sharedLinkAddExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails;
    _sharedLinkAddExpiryDetails = sharedLinkAddExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkChangeExpiryDetails:
    (DBTEAMLOGSharedLinkChangeExpiryDetails *)sharedLinkChangeExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails;
    _sharedLinkChangeExpiryDetails = sharedLinkChangeExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkChangeVisibilityDetails:
    (DBTEAMLOGSharedLinkChangeVisibilityDetails *)sharedLinkChangeVisibilityDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails;
    _sharedLinkChangeVisibilityDetails = sharedLinkChangeVisibilityDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkCopyDetails:(DBTEAMLOGSharedLinkCopyDetails *)sharedLinkCopyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkCopyDetails;
    _sharedLinkCopyDetails = sharedLinkCopyDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkCreateDetails:(DBTEAMLOGSharedLinkCreateDetails *)sharedLinkCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkCreateDetails;
    _sharedLinkCreateDetails = sharedLinkCreateDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkDisableDetails:(DBTEAMLOGSharedLinkDisableDetails *)sharedLinkDisableDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkDisableDetails;
    _sharedLinkDisableDetails = sharedLinkDisableDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkDownloadDetails:(DBTEAMLOGSharedLinkDownloadDetails *)sharedLinkDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkDownloadDetails;
    _sharedLinkDownloadDetails = sharedLinkDownloadDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkRemoveExpiryDetails:
    (DBTEAMLOGSharedLinkRemoveExpiryDetails *)sharedLinkRemoveExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails;
    _sharedLinkRemoveExpiryDetails = sharedLinkRemoveExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkShareDetails:(DBTEAMLOGSharedLinkShareDetails *)sharedLinkShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkShareDetails;
    _sharedLinkShareDetails = sharedLinkShareDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkViewDetails:(DBTEAMLOGSharedLinkViewDetails *)sharedLinkViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkViewDetails;
    _sharedLinkViewDetails = sharedLinkViewDetails;
  }
  return self;
}

- (instancetype)initWithSharedNoteOpenedDetails:(DBTEAMLOGSharedNoteOpenedDetails *)sharedNoteOpenedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedNoteOpenedDetails;
    _sharedNoteOpenedDetails = sharedNoteOpenedDetails;
  }
  return self;
}

- (instancetype)initWithShmodelGroupShareDetails:(DBTEAMLOGShmodelGroupShareDetails *)shmodelGroupShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelGroupShareDetails;
    _shmodelGroupShareDetails = shmodelGroupShareDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseAccessGrantedDetails:
    (DBTEAMLOGShowcaseAccessGrantedDetails *)showcaseAccessGrantedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails;
    _showcaseAccessGrantedDetails = showcaseAccessGrantedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseAddMemberDetails:(DBTEAMLOGShowcaseAddMemberDetails *)showcaseAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseAddMemberDetails;
    _showcaseAddMemberDetails = showcaseAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseArchivedDetails:(DBTEAMLOGShowcaseArchivedDetails *)showcaseArchivedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseArchivedDetails;
    _showcaseArchivedDetails = showcaseArchivedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseCreatedDetails:(DBTEAMLOGShowcaseCreatedDetails *)showcaseCreatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseCreatedDetails;
    _showcaseCreatedDetails = showcaseCreatedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseDeleteCommentDetails:
    (DBTEAMLOGShowcaseDeleteCommentDetails *)showcaseDeleteCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails;
    _showcaseDeleteCommentDetails = showcaseDeleteCommentDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseEditedDetails:(DBTEAMLOGShowcaseEditedDetails *)showcaseEditedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseEditedDetails;
    _showcaseEditedDetails = showcaseEditedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseEditCommentDetails:(DBTEAMLOGShowcaseEditCommentDetails *)showcaseEditCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseEditCommentDetails;
    _showcaseEditCommentDetails = showcaseEditCommentDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseFileAddedDetails:(DBTEAMLOGShowcaseFileAddedDetails *)showcaseFileAddedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseFileAddedDetails;
    _showcaseFileAddedDetails = showcaseFileAddedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseFileDownloadDetails:
    (DBTEAMLOGShowcaseFileDownloadDetails *)showcaseFileDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseFileDownloadDetails;
    _showcaseFileDownloadDetails = showcaseFileDownloadDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseFileRemovedDetails:(DBTEAMLOGShowcaseFileRemovedDetails *)showcaseFileRemovedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseFileRemovedDetails;
    _showcaseFileRemovedDetails = showcaseFileRemovedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseFileViewDetails:(DBTEAMLOGShowcaseFileViewDetails *)showcaseFileViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseFileViewDetails;
    _showcaseFileViewDetails = showcaseFileViewDetails;
  }
  return self;
}

- (instancetype)initWithShowcasePermanentlyDeletedDetails:
    (DBTEAMLOGShowcasePermanentlyDeletedDetails *)showcasePermanentlyDeletedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails;
    _showcasePermanentlyDeletedDetails = showcasePermanentlyDeletedDetails;
  }
  return self;
}

- (instancetype)initWithShowcasePostCommentDetails:(DBTEAMLOGShowcasePostCommentDetails *)showcasePostCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcasePostCommentDetails;
    _showcasePostCommentDetails = showcasePostCommentDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseRemoveMemberDetails:
    (DBTEAMLOGShowcaseRemoveMemberDetails *)showcaseRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails;
    _showcaseRemoveMemberDetails = showcaseRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseRenamedDetails:(DBTEAMLOGShowcaseRenamedDetails *)showcaseRenamedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseRenamedDetails;
    _showcaseRenamedDetails = showcaseRenamedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseRequestAccessDetails:
    (DBTEAMLOGShowcaseRequestAccessDetails *)showcaseRequestAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseRequestAccessDetails;
    _showcaseRequestAccessDetails = showcaseRequestAccessDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseResolveCommentDetails:
    (DBTEAMLOGShowcaseResolveCommentDetails *)showcaseResolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseResolveCommentDetails;
    _showcaseResolveCommentDetails = showcaseResolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseRestoredDetails:(DBTEAMLOGShowcaseRestoredDetails *)showcaseRestoredDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseRestoredDetails;
    _showcaseRestoredDetails = showcaseRestoredDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseTrashedDetails:(DBTEAMLOGShowcaseTrashedDetails *)showcaseTrashedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseTrashedDetails;
    _showcaseTrashedDetails = showcaseTrashedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseTrashedDeprecatedDetails:
    (DBTEAMLOGShowcaseTrashedDeprecatedDetails *)showcaseTrashedDeprecatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails;
    _showcaseTrashedDeprecatedDetails = showcaseTrashedDeprecatedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseUnresolveCommentDetails:
    (DBTEAMLOGShowcaseUnresolveCommentDetails *)showcaseUnresolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails;
    _showcaseUnresolveCommentDetails = showcaseUnresolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseUntrashedDetails:(DBTEAMLOGShowcaseUntrashedDetails *)showcaseUntrashedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseUntrashedDetails;
    _showcaseUntrashedDetails = showcaseUntrashedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseUntrashedDeprecatedDetails:
    (DBTEAMLOGShowcaseUntrashedDeprecatedDetails *)showcaseUntrashedDeprecatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails;
    _showcaseUntrashedDeprecatedDetails = showcaseUntrashedDeprecatedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseViewDetails:(DBTEAMLOGShowcaseViewDetails *)showcaseViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseViewDetails;
    _showcaseViewDetails = showcaseViewDetails;
  }
  return self;
}

- (instancetype)initWithSsoAddCertDetails:(DBTEAMLOGSsoAddCertDetails *)ssoAddCertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoAddCertDetails;
    _ssoAddCertDetails = ssoAddCertDetails;
  }
  return self;
}

- (instancetype)initWithSsoAddLoginUrlDetails:(DBTEAMLOGSsoAddLoginUrlDetails *)ssoAddLoginUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoAddLoginUrlDetails;
    _ssoAddLoginUrlDetails = ssoAddLoginUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoAddLogoutUrlDetails:(DBTEAMLOGSsoAddLogoutUrlDetails *)ssoAddLogoutUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails;
    _ssoAddLogoutUrlDetails = ssoAddLogoutUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeCertDetails:(DBTEAMLOGSsoChangeCertDetails *)ssoChangeCertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeCertDetails;
    _ssoChangeCertDetails = ssoChangeCertDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeLoginUrlDetails:(DBTEAMLOGSsoChangeLoginUrlDetails *)ssoChangeLoginUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails;
    _ssoChangeLoginUrlDetails = ssoChangeLoginUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeLogoutUrlDetails:(DBTEAMLOGSsoChangeLogoutUrlDetails *)ssoChangeLogoutUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails;
    _ssoChangeLogoutUrlDetails = ssoChangeLogoutUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeSamlIdentityModeDetails:
    (DBTEAMLOGSsoChangeSamlIdentityModeDetails *)ssoChangeSamlIdentityModeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails;
    _ssoChangeSamlIdentityModeDetails = ssoChangeSamlIdentityModeDetails;
  }
  return self;
}

- (instancetype)initWithSsoRemoveCertDetails:(DBTEAMLOGSsoRemoveCertDetails *)ssoRemoveCertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoRemoveCertDetails;
    _ssoRemoveCertDetails = ssoRemoveCertDetails;
  }
  return self;
}

- (instancetype)initWithSsoRemoveLoginUrlDetails:(DBTEAMLOGSsoRemoveLoginUrlDetails *)ssoRemoveLoginUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails;
    _ssoRemoveLoginUrlDetails = ssoRemoveLoginUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoRemoveLogoutUrlDetails:(DBTEAMLOGSsoRemoveLogoutUrlDetails *)ssoRemoveLogoutUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails;
    _ssoRemoveLogoutUrlDetails = ssoRemoveLogoutUrlDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderChangeStatusDetails:
    (DBTEAMLOGTeamFolderChangeStatusDetails *)teamFolderChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails;
    _teamFolderChangeStatusDetails = teamFolderChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderCreateDetails:(DBTEAMLOGTeamFolderCreateDetails *)teamFolderCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderCreateDetails;
    _teamFolderCreateDetails = teamFolderCreateDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderDowngradeDetails:(DBTEAMLOGTeamFolderDowngradeDetails *)teamFolderDowngradeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderDowngradeDetails;
    _teamFolderDowngradeDetails = teamFolderDowngradeDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderPermanentlyDeleteDetails:
    (DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)teamFolderPermanentlyDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails;
    _teamFolderPermanentlyDeleteDetails = teamFolderPermanentlyDeleteDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderRenameDetails:(DBTEAMLOGTeamFolderRenameDetails *)teamFolderRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderRenameDetails;
    _teamFolderRenameDetails = teamFolderRenameDetails;
  }
  return self;
}

- (instancetype)initWithTeamSelectiveSyncSettingsChangedDetails:
    (DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails *)teamSelectiveSyncSettingsChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails;
    _teamSelectiveSyncSettingsChangedDetails = teamSelectiveSyncSettingsChangedDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureChangePolicyDetails:
    (DBTEAMLOGAccountCaptureChangePolicyDetails *)accountCaptureChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails;
    _accountCaptureChangePolicyDetails = accountCaptureChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithAllowDownloadDisabledDetails:
    (DBTEAMLOGAllowDownloadDisabledDetails *)allowDownloadDisabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAllowDownloadDisabledDetails;
    _allowDownloadDisabledDetails = allowDownloadDisabledDetails;
  }
  return self;
}

- (instancetype)initWithAllowDownloadEnabledDetails:
    (DBTEAMLOGAllowDownloadEnabledDetails *)allowDownloadEnabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAllowDownloadEnabledDetails;
    _allowDownloadEnabledDetails = allowDownloadEnabledDetails;
  }
  return self;
}

- (instancetype)initWithDataPlacementRestrictionChangePolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)dataPlacementRestrictionChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails;
    _dataPlacementRestrictionChangePolicyDetails = dataPlacementRestrictionChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithDataPlacementRestrictionSatisfyPolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)dataPlacementRestrictionSatisfyPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails;
    _dataPlacementRestrictionSatisfyPolicyDetails = dataPlacementRestrictionSatisfyPolicyDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeDesktopPolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)deviceApprovalsChangeDesktopPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails;
    _deviceApprovalsChangeDesktopPolicyDetails = deviceApprovalsChangeDesktopPolicyDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeMobilePolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)deviceApprovalsChangeMobilePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails;
    _deviceApprovalsChangeMobilePolicyDetails = deviceApprovalsChangeMobilePolicyDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeOverageActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)deviceApprovalsChangeOverageActionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails;
    _deviceApprovalsChangeOverageActionDetails = deviceApprovalsChangeOverageActionDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeUnlinkActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)deviceApprovalsChangeUnlinkActionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails;
    _deviceApprovalsChangeUnlinkActionDetails = deviceApprovalsChangeUnlinkActionDetails;
  }
  return self;
}

- (instancetype)initWithDirectoryRestrictionsAddMembersDetails:
    (DBTEAMLOGDirectoryRestrictionsAddMembersDetails *)directoryRestrictionsAddMembersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails;
    _directoryRestrictionsAddMembersDetails = directoryRestrictionsAddMembersDetails;
  }
  return self;
}

- (instancetype)initWithDirectoryRestrictionsRemoveMembersDetails:
    (DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *)directoryRestrictionsRemoveMembersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails;
    _directoryRestrictionsRemoveMembersDetails = directoryRestrictionsRemoveMembersDetails;
  }
  return self;
}

- (instancetype)initWithEmmAddExceptionDetails:(DBTEAMLOGEmmAddExceptionDetails *)emmAddExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmAddExceptionDetails;
    _emmAddExceptionDetails = emmAddExceptionDetails;
  }
  return self;
}

- (instancetype)initWithEmmChangePolicyDetails:(DBTEAMLOGEmmChangePolicyDetails *)emmChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmChangePolicyDetails;
    _emmChangePolicyDetails = emmChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithEmmRemoveExceptionDetails:(DBTEAMLOGEmmRemoveExceptionDetails *)emmRemoveExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmRemoveExceptionDetails;
    _emmRemoveExceptionDetails = emmRemoveExceptionDetails;
  }
  return self;
}

- (instancetype)initWithExtendedVersionHistoryChangePolicyDetails:
    (DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)extendedVersionHistoryChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails;
    _extendedVersionHistoryChangePolicyDetails = extendedVersionHistoryChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithFileCommentsChangePolicyDetails:
    (DBTEAMLOGFileCommentsChangePolicyDetails *)fileCommentsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails;
    _fileCommentsChangePolicyDetails = fileCommentsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestsChangePolicyDetails:
    (DBTEAMLOGFileRequestsChangePolicyDetails *)fileRequestsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails;
    _fileRequestsChangePolicyDetails = fileRequestsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestsEmailsEnabledDetails:
    (DBTEAMLOGFileRequestsEmailsEnabledDetails *)fileRequestsEmailsEnabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails;
    _fileRequestsEmailsEnabledDetails = fileRequestsEmailsEnabledDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestsEmailsRestrictedToTeamOnlyDetails:
    (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)fileRequestsEmailsRestrictedToTeamOnlyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails;
    _fileRequestsEmailsRestrictedToTeamOnlyDetails = fileRequestsEmailsRestrictedToTeamOnlyDetails;
  }
  return self;
}

- (instancetype)initWithGoogleSsoChangePolicyDetails:
    (DBTEAMLOGGoogleSsoChangePolicyDetails *)googleSsoChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails;
    _googleSsoChangePolicyDetails = googleSsoChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithGroupUserManagementChangePolicyDetails:
    (DBTEAMLOGGroupUserManagementChangePolicyDetails *)groupUserManagementChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails;
    _groupUserManagementChangePolicyDetails = groupUserManagementChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMemberRequestsChangePolicyDetails:
    (DBTEAMLOGMemberRequestsChangePolicyDetails *)memberRequestsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails;
    _memberRequestsChangePolicyDetails = memberRequestsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsAddExceptionDetails:
    (DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)memberSpaceLimitsAddExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails;
    _memberSpaceLimitsAddExceptionDetails = memberSpaceLimitsAddExceptionDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeCapsTypePolicyDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails *)memberSpaceLimitsChangeCapsTypePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails;
    _memberSpaceLimitsChangeCapsTypePolicyDetails = memberSpaceLimitsChangeCapsTypePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangePolicyDetails:
    (DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)memberSpaceLimitsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails;
    _memberSpaceLimitsChangePolicyDetails = memberSpaceLimitsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsRemoveExceptionDetails:
    (DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)memberSpaceLimitsRemoveExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails;
    _memberSpaceLimitsRemoveExceptionDetails = memberSpaceLimitsRemoveExceptionDetails;
  }
  return self;
}

- (instancetype)initWithMemberSuggestionsChangePolicyDetails:
    (DBTEAMLOGMemberSuggestionsChangePolicyDetails *)memberSuggestionsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails;
    _memberSuggestionsChangePolicyDetails = memberSuggestionsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMicrosoftOfficeAddinChangePolicyDetails:
    (DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)microsoftOfficeAddinChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails;
    _microsoftOfficeAddinChangePolicyDetails = microsoftOfficeAddinChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithNetworkControlChangePolicyDetails:
    (DBTEAMLOGNetworkControlChangePolicyDetails *)networkControlChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails;
    _networkControlChangePolicyDetails = networkControlChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangeDeploymentPolicyDetails:
    (DBTEAMLOGPaperChangeDeploymentPolicyDetails *)paperChangeDeploymentPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails;
    _paperChangeDeploymentPolicyDetails = paperChangeDeploymentPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangeMemberLinkPolicyDetails:
    (DBTEAMLOGPaperChangeMemberLinkPolicyDetails *)paperChangeMemberLinkPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails;
    _paperChangeMemberLinkPolicyDetails = paperChangeMemberLinkPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangeMemberPolicyDetails:
    (DBTEAMLOGPaperChangeMemberPolicyDetails *)paperChangeMemberPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails;
    _paperChangeMemberPolicyDetails = paperChangeMemberPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangePolicyDetails:(DBTEAMLOGPaperChangePolicyDetails *)paperChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangePolicyDetails;
    _paperChangePolicyDetails = paperChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperEnabledUsersGroupAdditionDetails:
    (DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)paperEnabledUsersGroupAdditionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails;
    _paperEnabledUsersGroupAdditionDetails = paperEnabledUsersGroupAdditionDetails;
  }
  return self;
}

- (instancetype)initWithPaperEnabledUsersGroupRemovalDetails:
    (DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)paperEnabledUsersGroupRemovalDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails;
    _paperEnabledUsersGroupRemovalDetails = paperEnabledUsersGroupRemovalDetails;
  }
  return self;
}

- (instancetype)initWithPermanentDeleteChangePolicyDetails:
    (DBTEAMLOGPermanentDeleteChangePolicyDetails *)permanentDeleteChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails;
    _permanentDeleteChangePolicyDetails = permanentDeleteChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeFolderJoinPolicyDetails:
    (DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)sharingChangeFolderJoinPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails;
    _sharingChangeFolderJoinPolicyDetails = sharingChangeFolderJoinPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeLinkPolicyDetails:
    (DBTEAMLOGSharingChangeLinkPolicyDetails *)sharingChangeLinkPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails;
    _sharingChangeLinkPolicyDetails = sharingChangeLinkPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeMemberPolicyDetails:
    (DBTEAMLOGSharingChangeMemberPolicyDetails *)sharingChangeMemberPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails;
    _sharingChangeMemberPolicyDetails = sharingChangeMemberPolicyDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseChangeDownloadPolicyDetails:
    (DBTEAMLOGShowcaseChangeDownloadPolicyDetails *)showcaseChangeDownloadPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails;
    _showcaseChangeDownloadPolicyDetails = showcaseChangeDownloadPolicyDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseChangeEnabledPolicyDetails:
    (DBTEAMLOGShowcaseChangeEnabledPolicyDetails *)showcaseChangeEnabledPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails;
    _showcaseChangeEnabledPolicyDetails = showcaseChangeEnabledPolicyDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseChangeExternalSharingPolicyDetails:
    (DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails *)showcaseChangeExternalSharingPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails;
    _showcaseChangeExternalSharingPolicyDetails = showcaseChangeExternalSharingPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSmartSyncChangePolicyDetails:
    (DBTEAMLOGSmartSyncChangePolicyDetails *)smartSyncChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails;
    _smartSyncChangePolicyDetails = smartSyncChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithSmartSyncNotOptOutDetails:(DBTEAMLOGSmartSyncNotOptOutDetails *)smartSyncNotOptOutDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails;
    _smartSyncNotOptOutDetails = smartSyncNotOptOutDetails;
  }
  return self;
}

- (instancetype)initWithSmartSyncOptOutDetails:(DBTEAMLOGSmartSyncOptOutDetails *)smartSyncOptOutDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmartSyncOptOutDetails;
    _smartSyncOptOutDetails = smartSyncOptOutDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangePolicyDetails:(DBTEAMLOGSsoChangePolicyDetails *)ssoChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangePolicyDetails;
    _ssoChangePolicyDetails = ssoChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithTfaChangePolicyDetails:(DBTEAMLOGTfaChangePolicyDetails *)tfaChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaChangePolicyDetails;
    _tfaChangePolicyDetails = tfaChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithTwoAccountChangePolicyDetails:
    (DBTEAMLOGTwoAccountChangePolicyDetails *)twoAccountChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails;
    _twoAccountChangePolicyDetails = twoAccountChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeFixedLengthPolicyDetails:
    (DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)webSessionsChangeFixedLengthPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails;
    _webSessionsChangeFixedLengthPolicyDetails = webSessionsChangeFixedLengthPolicyDetails;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeIdleLengthPolicyDetails:
    (DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)webSessionsChangeIdleLengthPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails;
    _webSessionsChangeIdleLengthPolicyDetails = webSessionsChangeIdleLengthPolicyDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeFromDetails:(DBTEAMLOGTeamMergeFromDetails *)teamMergeFromDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeFromDetails;
    _teamMergeFromDetails = teamMergeFromDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeToDetails:(DBTEAMLOGTeamMergeToDetails *)teamMergeToDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeToDetails;
    _teamMergeToDetails = teamMergeToDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileAddLogoDetails:(DBTEAMLOGTeamProfileAddLogoDetails *)teamProfileAddLogoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileAddLogoDetails;
    _teamProfileAddLogoDetails = teamProfileAddLogoDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeDefaultLanguageDetails:
    (DBTEAMLOGTeamProfileChangeDefaultLanguageDetails *)teamProfileChangeDefaultLanguageDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails;
    _teamProfileChangeDefaultLanguageDetails = teamProfileChangeDefaultLanguageDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeLogoDetails:
    (DBTEAMLOGTeamProfileChangeLogoDetails *)teamProfileChangeLogoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails;
    _teamProfileChangeLogoDetails = teamProfileChangeLogoDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeNameDetails:
    (DBTEAMLOGTeamProfileChangeNameDetails *)teamProfileChangeNameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileChangeNameDetails;
    _teamProfileChangeNameDetails = teamProfileChangeNameDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileRemoveLogoDetails:
    (DBTEAMLOGTeamProfileRemoveLogoDetails *)teamProfileRemoveLogoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails;
    _teamProfileRemoveLogoDetails = teamProfileRemoveLogoDetails;
  }
  return self;
}

- (instancetype)initWithTfaAddBackupPhoneDetails:(DBTEAMLOGTfaAddBackupPhoneDetails *)tfaAddBackupPhoneDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails;
    _tfaAddBackupPhoneDetails = tfaAddBackupPhoneDetails;
  }
  return self;
}

- (instancetype)initWithTfaAddSecurityKeyDetails:(DBTEAMLOGTfaAddSecurityKeyDetails *)tfaAddSecurityKeyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails;
    _tfaAddSecurityKeyDetails = tfaAddSecurityKeyDetails;
  }
  return self;
}

- (instancetype)initWithTfaChangeBackupPhoneDetails:
    (DBTEAMLOGTfaChangeBackupPhoneDetails *)tfaChangeBackupPhoneDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails;
    _tfaChangeBackupPhoneDetails = tfaChangeBackupPhoneDetails;
  }
  return self;
}

- (instancetype)initWithTfaChangeStatusDetails:(DBTEAMLOGTfaChangeStatusDetails *)tfaChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaChangeStatusDetails;
    _tfaChangeStatusDetails = tfaChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithTfaRemoveBackupPhoneDetails:
    (DBTEAMLOGTfaRemoveBackupPhoneDetails *)tfaRemoveBackupPhoneDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails;
    _tfaRemoveBackupPhoneDetails = tfaRemoveBackupPhoneDetails;
  }
  return self;
}

- (instancetype)initWithTfaRemoveSecurityKeyDetails:
    (DBTEAMLOGTfaRemoveSecurityKeyDetails *)tfaRemoveSecurityKeyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails;
    _tfaRemoveSecurityKeyDetails = tfaRemoveSecurityKeyDetails;
  }
  return self;
}

- (instancetype)initWithTfaResetDetails:(DBTEAMLOGTfaResetDetails *)tfaResetDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaResetDetails;
    _tfaResetDetails = tfaResetDetails;
  }
  return self;
}

- (instancetype)initWithMissingDetails:(DBTEAMLOGMissingDetails *)missingDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMissingDetails;
    _missingDetails = missingDetails;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGAppLinkTeamDetails *)appLinkTeamDetails {
  if (![self isAppLinkTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppLinkTeamDetails, but was %@.", [self tagName]];
  }
  return _appLinkTeamDetails;
}

- (DBTEAMLOGAppLinkUserDetails *)appLinkUserDetails {
  if (![self isAppLinkUserDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppLinkUserDetails, but was %@.", [self tagName]];
  }
  return _appLinkUserDetails;
}

- (DBTEAMLOGAppUnlinkTeamDetails *)appUnlinkTeamDetails {
  if (![self isAppUnlinkTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppUnlinkTeamDetails, but was %@.", [self tagName]];
  }
  return _appUnlinkTeamDetails;
}

- (DBTEAMLOGAppUnlinkUserDetails *)appUnlinkUserDetails {
  if (![self isAppUnlinkUserDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppUnlinkUserDetails, but was %@.", [self tagName]];
  }
  return _appUnlinkUserDetails;
}

- (DBTEAMLOGFileAddCommentDetails *)fileAddCommentDetails {
  if (![self isFileAddCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileAddCommentDetails, but was %@.", [self tagName]];
  }
  return _fileAddCommentDetails;
}

- (DBTEAMLOGFileChangeCommentSubscriptionDetails *)fileChangeCommentSubscriptionDetails {
  if (![self isFileChangeCommentSubscriptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails, but was %@.",
                       [self tagName]];
  }
  return _fileChangeCommentSubscriptionDetails;
}

- (DBTEAMLOGFileDeleteCommentDetails *)fileDeleteCommentDetails {
  if (![self isFileDeleteCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileDeleteCommentDetails, but was %@.", [self tagName]];
  }
  return _fileDeleteCommentDetails;
}

- (DBTEAMLOGFileLikeCommentDetails *)fileLikeCommentDetails {
  if (![self isFileLikeCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileLikeCommentDetails, but was %@.", [self tagName]];
  }
  return _fileLikeCommentDetails;
}

- (DBTEAMLOGFileResolveCommentDetails *)fileResolveCommentDetails {
  if (![self isFileResolveCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileResolveCommentDetails, but was %@.", [self tagName]];
  }
  return _fileResolveCommentDetails;
}

- (DBTEAMLOGFileUnlikeCommentDetails *)fileUnlikeCommentDetails {
  if (![self isFileUnlikeCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileUnlikeCommentDetails, but was %@.", [self tagName]];
  }
  return _fileUnlikeCommentDetails;
}

- (DBTEAMLOGFileUnresolveCommentDetails *)fileUnresolveCommentDetails {
  if (![self isFileUnresolveCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileUnresolveCommentDetails, but was %@.", [self tagName]];
  }
  return _fileUnresolveCommentDetails;
}

- (DBTEAMLOGDeviceChangeIpDesktopDetails *)deviceChangeIpDesktopDetails {
  if (![self isDeviceChangeIpDesktopDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails, but was %@.", [self tagName]];
  }
  return _deviceChangeIpDesktopDetails;
}

- (DBTEAMLOGDeviceChangeIpMobileDetails *)deviceChangeIpMobileDetails {
  if (![self isDeviceChangeIpMobileDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails, but was %@.", [self tagName]];
  }
  return _deviceChangeIpMobileDetails;
}

- (DBTEAMLOGDeviceChangeIpWebDetails *)deviceChangeIpWebDetails {
  if (![self isDeviceChangeIpWebDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceChangeIpWebDetails, but was %@.", [self tagName]];
  }
  return _deviceChangeIpWebDetails;
}

- (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)deviceDeleteOnUnlinkFailDetails {
  if (![self isDeviceDeleteOnUnlinkFailDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceDeleteOnUnlinkFailDetails;
}

- (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)deviceDeleteOnUnlinkSuccessDetails {
  if (![self isDeviceDeleteOnUnlinkSuccessDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceDeleteOnUnlinkSuccessDetails;
}

- (DBTEAMLOGDeviceLinkFailDetails *)deviceLinkFailDetails {
  if (![self isDeviceLinkFailDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceLinkFailDetails, but was %@.", [self tagName]];
  }
  return _deviceLinkFailDetails;
}

- (DBTEAMLOGDeviceLinkSuccessDetails *)deviceLinkSuccessDetails {
  if (![self isDeviceLinkSuccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceLinkSuccessDetails, but was %@.", [self tagName]];
  }
  return _deviceLinkSuccessDetails;
}

- (DBTEAMLOGDeviceManagementDisabledDetails *)deviceManagementDisabledDetails {
  if (![self isDeviceManagementDisabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceManagementDisabledDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceManagementDisabledDetails;
}

- (DBTEAMLOGDeviceManagementEnabledDetails *)deviceManagementEnabledDetails {
  if (![self isDeviceManagementEnabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceManagementEnabledDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceManagementEnabledDetails;
}

- (DBTEAMLOGDeviceUnlinkDetails *)deviceUnlinkDetails {
  if (![self isDeviceUnlinkDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceUnlinkDetails, but was %@.", [self tagName]];
  }
  return _deviceUnlinkDetails;
}

- (DBTEAMLOGEmmRefreshAuthTokenDetails *)emmRefreshAuthTokenDetails {
  if (![self isEmmRefreshAuthTokenDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails, but was %@.", [self tagName]];
  }
  return _emmRefreshAuthTokenDetails;
}

- (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)accountCaptureChangeAvailabilityDetails {
  if (![self isAccountCaptureChangeAvailabilityDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails, but was %@.",
               [self tagName]];
  }
  return _accountCaptureChangeAvailabilityDetails;
}

- (DBTEAMLOGAccountCaptureMigrateAccountDetails *)accountCaptureMigrateAccountDetails {
  if (![self isAccountCaptureMigrateAccountDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails, but was %@.",
                       [self tagName]];
  }
  return _accountCaptureMigrateAccountDetails;
}

- (DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *)accountCaptureNotificationEmailsSentDetails {
  if (![self isAccountCaptureNotificationEmailsSentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails, but was %@.",
               [self tagName]];
  }
  return _accountCaptureNotificationEmailsSentDetails;
}

- (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)accountCaptureRelinquishAccountDetails {
  if (![self isAccountCaptureRelinquishAccountDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails, but was %@.",
               [self tagName]];
  }
  return _accountCaptureRelinquishAccountDetails;
}

- (DBTEAMLOGDisabledDomainInvitesDetails *)disabledDomainInvitesDetails {
  if (![self isDisabledDomainInvitesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDisabledDomainInvitesDetails, but was %@.", [self tagName]];
  }
  return _disabledDomainInvitesDetails;
}

- (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)domainInvitesApproveRequestToJoinTeamDetails {
  if (![self isDomainInvitesApproveRequestToJoinTeamDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesApproveRequestToJoinTeamDetails;
}

- (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)domainInvitesDeclineRequestToJoinTeamDetails {
  if (![self isDomainInvitesDeclineRequestToJoinTeamDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesDeclineRequestToJoinTeamDetails;
}

- (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)domainInvitesEmailExistingUsersDetails {
  if (![self isDomainInvitesEmailExistingUsersDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesEmailExistingUsersDetails;
}

- (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)domainInvitesRequestToJoinTeamDetails {
  if (![self isDomainInvitesRequestToJoinTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _domainInvitesRequestToJoinTeamDetails;
}

- (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)domainInvitesSetInviteNewUserPrefToNoDetails {
  if (![self isDomainInvitesSetInviteNewUserPrefToNoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesSetInviteNewUserPrefToNoDetails;
}

- (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)domainInvitesSetInviteNewUserPrefToYesDetails {
  if (![self isDomainInvitesSetInviteNewUserPrefToYesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesSetInviteNewUserPrefToYesDetails;
}

- (DBTEAMLOGDomainVerificationAddDomainFailDetails *)domainVerificationAddDomainFailDetails {
  if (![self isDomainVerificationAddDomainFailDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails, but was %@.",
               [self tagName]];
  }
  return _domainVerificationAddDomainFailDetails;
}

- (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)domainVerificationAddDomainSuccessDetails {
  if (![self isDomainVerificationAddDomainSuccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails, but was %@.",
               [self tagName]];
  }
  return _domainVerificationAddDomainSuccessDetails;
}

- (DBTEAMLOGDomainVerificationRemoveDomainDetails *)domainVerificationRemoveDomainDetails {
  if (![self isDomainVerificationRemoveDomainDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails, but was %@.",
                       [self tagName]];
  }
  return _domainVerificationRemoveDomainDetails;
}

- (DBTEAMLOGEnabledDomainInvitesDetails *)enabledDomainInvitesDetails {
  if (![self isEnabledDomainInvitesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEnabledDomainInvitesDetails, but was %@.", [self tagName]];
  }
  return _enabledDomainInvitesDetails;
}

- (DBTEAMLOGCreateFolderDetails *)createFolderDetails {
  if (![self isCreateFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsCreateFolderDetails, but was %@.", [self tagName]];
  }
  return _createFolderDetails;
}

- (DBTEAMLOGFileAddDetails *)fileAddDetails {
  if (![self isFileAddDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileAddDetails, but was %@.", [self tagName]];
  }
  return _fileAddDetails;
}

- (DBTEAMLOGFileCopyDetails *)fileCopyDetails {
  if (![self isFileCopyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileCopyDetails, but was %@.", [self tagName]];
  }
  return _fileCopyDetails;
}

- (DBTEAMLOGFileDeleteDetails *)fileDeleteDetails {
  if (![self isFileDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileDeleteDetails, but was %@.", [self tagName]];
  }
  return _fileDeleteDetails;
}

- (DBTEAMLOGFileDownloadDetails *)fileDownloadDetails {
  if (![self isFileDownloadDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileDownloadDetails, but was %@.", [self tagName]];
  }
  return _fileDownloadDetails;
}

- (DBTEAMLOGFileEditDetails *)fileEditDetails {
  if (![self isFileEditDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileEditDetails, but was %@.", [self tagName]];
  }
  return _fileEditDetails;
}

- (DBTEAMLOGFileGetCopyReferenceDetails *)fileGetCopyReferenceDetails {
  if (![self isFileGetCopyReferenceDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileGetCopyReferenceDetails, but was %@.", [self tagName]];
  }
  return _fileGetCopyReferenceDetails;
}

- (DBTEAMLOGFileMoveDetails *)fileMoveDetails {
  if (![self isFileMoveDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileMoveDetails, but was %@.", [self tagName]];
  }
  return _fileMoveDetails;
}

- (DBTEAMLOGFilePermanentlyDeleteDetails *)filePermanentlyDeleteDetails {
  if (![self isFilePermanentlyDeleteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails, but was %@.", [self tagName]];
  }
  return _filePermanentlyDeleteDetails;
}

- (DBTEAMLOGFilePreviewDetails *)filePreviewDetails {
  if (![self isFilePreviewDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFilePreviewDetails, but was %@.", [self tagName]];
  }
  return _filePreviewDetails;
}

- (DBTEAMLOGFileRenameDetails *)fileRenameDetails {
  if (![self isFileRenameDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRenameDetails, but was %@.", [self tagName]];
  }
  return _fileRenameDetails;
}

- (DBTEAMLOGFileRestoreDetails *)fileRestoreDetails {
  if (![self isFileRestoreDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRestoreDetails, but was %@.", [self tagName]];
  }
  return _fileRestoreDetails;
}

- (DBTEAMLOGFileRevertDetails *)fileRevertDetails {
  if (![self isFileRevertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRevertDetails, but was %@.", [self tagName]];
  }
  return _fileRevertDetails;
}

- (DBTEAMLOGFileRollbackChangesDetails *)fileRollbackChangesDetails {
  if (![self isFileRollbackChangesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRollbackChangesDetails, but was %@.", [self tagName]];
  }
  return _fileRollbackChangesDetails;
}

- (DBTEAMLOGFileSaveCopyReferenceDetails *)fileSaveCopyReferenceDetails {
  if (![self isFileSaveCopyReferenceDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails, but was %@.", [self tagName]];
  }
  return _fileSaveCopyReferenceDetails;
}

- (DBTEAMLOGFileRequestChangeDetails *)fileRequestChangeDetails {
  if (![self isFileRequestChangeDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestChangeDetails, but was %@.", [self tagName]];
  }
  return _fileRequestChangeDetails;
}

- (DBTEAMLOGFileRequestCloseDetails *)fileRequestCloseDetails {
  if (![self isFileRequestCloseDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestCloseDetails, but was %@.", [self tagName]];
  }
  return _fileRequestCloseDetails;
}

- (DBTEAMLOGFileRequestCreateDetails *)fileRequestCreateDetails {
  if (![self isFileRequestCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestCreateDetails, but was %@.", [self tagName]];
  }
  return _fileRequestCreateDetails;
}

- (DBTEAMLOGFileRequestReceiveFileDetails *)fileRequestReceiveFileDetails {
  if (![self isFileRequestReceiveFileDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestReceiveFileDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestReceiveFileDetails;
}

- (DBTEAMLOGGroupAddExternalIdDetails *)groupAddExternalIdDetails {
  if (![self isGroupAddExternalIdDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupAddExternalIdDetails, but was %@.", [self tagName]];
  }
  return _groupAddExternalIdDetails;
}

- (DBTEAMLOGGroupAddMemberDetails *)groupAddMemberDetails {
  if (![self isGroupAddMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupAddMemberDetails, but was %@.", [self tagName]];
  }
  return _groupAddMemberDetails;
}

- (DBTEAMLOGGroupChangeExternalIdDetails *)groupChangeExternalIdDetails {
  if (![self isGroupChangeExternalIdDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupChangeExternalIdDetails, but was %@.", [self tagName]];
  }
  return _groupChangeExternalIdDetails;
}

- (DBTEAMLOGGroupChangeManagementTypeDetails *)groupChangeManagementTypeDetails {
  if (![self isGroupChangeManagementTypeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails, but was %@.",
                       [self tagName]];
  }
  return _groupChangeManagementTypeDetails;
}

- (DBTEAMLOGGroupChangeMemberRoleDetails *)groupChangeMemberRoleDetails {
  if (![self isGroupChangeMemberRoleDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails, but was %@.", [self tagName]];
  }
  return _groupChangeMemberRoleDetails;
}

- (DBTEAMLOGGroupCreateDetails *)groupCreateDetails {
  if (![self isGroupCreateDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupCreateDetails, but was %@.", [self tagName]];
  }
  return _groupCreateDetails;
}

- (DBTEAMLOGGroupDeleteDetails *)groupDeleteDetails {
  if (![self isGroupDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupDeleteDetails, but was %@.", [self tagName]];
  }
  return _groupDeleteDetails;
}

- (DBTEAMLOGGroupDescriptionUpdatedDetails *)groupDescriptionUpdatedDetails {
  if (![self isGroupDescriptionUpdatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails, but was %@.",
                       [self tagName]];
  }
  return _groupDescriptionUpdatedDetails;
}

- (DBTEAMLOGGroupJoinPolicyUpdatedDetails *)groupJoinPolicyUpdatedDetails {
  if (![self isGroupJoinPolicyUpdatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails, but was %@.",
                       [self tagName]];
  }
  return _groupJoinPolicyUpdatedDetails;
}

- (DBTEAMLOGGroupMovedDetails *)groupMovedDetails {
  if (![self isGroupMovedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupMovedDetails, but was %@.", [self tagName]];
  }
  return _groupMovedDetails;
}

- (DBTEAMLOGGroupRemoveExternalIdDetails *)groupRemoveExternalIdDetails {
  if (![self isGroupRemoveExternalIdDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails, but was %@.", [self tagName]];
  }
  return _groupRemoveExternalIdDetails;
}

- (DBTEAMLOGGroupRemoveMemberDetails *)groupRemoveMemberDetails {
  if (![self isGroupRemoveMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupRemoveMemberDetails, but was %@.", [self tagName]];
  }
  return _groupRemoveMemberDetails;
}

- (DBTEAMLOGGroupRenameDetails *)groupRenameDetails {
  if (![self isGroupRenameDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupRenameDetails, but was %@.", [self tagName]];
  }
  return _groupRenameDetails;
}

- (DBTEAMLOGEmmErrorDetails *)emmErrorDetails {
  if (![self isEmmErrorDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmErrorDetails, but was %@.", [self tagName]];
  }
  return _emmErrorDetails;
}

- (DBTEAMLOGLoginFailDetails *)loginFailDetails {
  if (![self isLoginFailDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLoginFailDetails, but was %@.", [self tagName]];
  }
  return _loginFailDetails;
}

- (DBTEAMLOGLoginSuccessDetails *)loginSuccessDetails {
  if (![self isLoginSuccessDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLoginSuccessDetails, but was %@.", [self tagName]];
  }
  return _loginSuccessDetails;
}

- (DBTEAMLOGLogoutDetails *)logoutDetails {
  if (![self isLogoutDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLogoutDetails, but was %@.", [self tagName]];
  }
  return _logoutDetails;
}

- (DBTEAMLOGResellerSupportSessionEndDetails *)resellerSupportSessionEndDetails {
  if (![self isResellerSupportSessionEndDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsResellerSupportSessionEndDetails, but was %@.",
                       [self tagName]];
  }
  return _resellerSupportSessionEndDetails;
}

- (DBTEAMLOGResellerSupportSessionStartDetails *)resellerSupportSessionStartDetails {
  if (![self isResellerSupportSessionStartDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsResellerSupportSessionStartDetails, but was %@.",
                       [self tagName]];
  }
  return _resellerSupportSessionStartDetails;
}

- (DBTEAMLOGSignInAsSessionEndDetails *)signInAsSessionEndDetails {
  if (![self isSignInAsSessionEndDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSignInAsSessionEndDetails, but was %@.", [self tagName]];
  }
  return _signInAsSessionEndDetails;
}

- (DBTEAMLOGSignInAsSessionStartDetails *)signInAsSessionStartDetails {
  if (![self isSignInAsSessionStartDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSignInAsSessionStartDetails, but was %@.", [self tagName]];
  }
  return _signInAsSessionStartDetails;
}

- (DBTEAMLOGSsoErrorDetails *)ssoErrorDetails {
  if (![self isSsoErrorDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoErrorDetails, but was %@.", [self tagName]];
  }
  return _ssoErrorDetails;
}

- (DBTEAMLOGMemberAddNameDetails *)memberAddNameDetails {
  if (![self isMemberAddNameDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberAddNameDetails, but was %@.", [self tagName]];
  }
  return _memberAddNameDetails;
}

- (DBTEAMLOGMemberChangeAdminRoleDetails *)memberChangeAdminRoleDetails {
  if (![self isMemberChangeAdminRoleDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails, but was %@.", [self tagName]];
  }
  return _memberChangeAdminRoleDetails;
}

- (DBTEAMLOGMemberChangeEmailDetails *)memberChangeEmailDetails {
  if (![self isMemberChangeEmailDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeEmailDetails, but was %@.", [self tagName]];
  }
  return _memberChangeEmailDetails;
}

- (DBTEAMLOGMemberChangeMembershipTypeDetails *)memberChangeMembershipTypeDetails {
  if (![self isMemberChangeMembershipTypeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails, but was %@.",
                       [self tagName]];
  }
  return _memberChangeMembershipTypeDetails;
}

- (DBTEAMLOGMemberChangeNameDetails *)memberChangeNameDetails {
  if (![self isMemberChangeNameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeNameDetails, but was %@.", [self tagName]];
  }
  return _memberChangeNameDetails;
}

- (DBTEAMLOGMemberChangeStatusDetails *)memberChangeStatusDetails {
  if (![self isMemberChangeStatusDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeStatusDetails, but was %@.", [self tagName]];
  }
  return _memberChangeStatusDetails;
}

- (DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)memberPermanentlyDeleteAccountContentsDetails {
  if (![self isMemberPermanentlyDeleteAccountContentsDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails, but was %@.",
               [self tagName]];
  }
  return _memberPermanentlyDeleteAccountContentsDetails;
}

- (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails *)memberSpaceLimitsAddCustomQuotaDetails {
  if (![self isMemberSpaceLimitsAddCustomQuotaDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsAddCustomQuotaDetails;
}

- (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails *)memberSpaceLimitsChangeCustomQuotaDetails {
  if (![self isMemberSpaceLimitsChangeCustomQuotaDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsChangeCustomQuotaDetails;
}

- (DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)memberSpaceLimitsChangeStatusDetails {
  if (![self isMemberSpaceLimitsChangeStatusDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsChangeStatusDetails;
}

- (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails *)memberSpaceLimitsRemoveCustomQuotaDetails {
  if (![self isMemberSpaceLimitsRemoveCustomQuotaDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsRemoveCustomQuotaDetails;
}

- (DBTEAMLOGMemberSuggestDetails *)memberSuggestDetails {
  if (![self isMemberSuggestDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSuggestDetails, but was %@.", [self tagName]];
  }
  return _memberSuggestDetails;
}

- (DBTEAMLOGMemberTransferAccountContentsDetails *)memberTransferAccountContentsDetails {
  if (![self isMemberTransferAccountContentsDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails, but was %@.",
                       [self tagName]];
  }
  return _memberTransferAccountContentsDetails;
}

- (DBTEAMLOGSecondaryMailsPolicyChangedDetails *)secondaryMailsPolicyChangedDetails {
  if (![self isSecondaryMailsPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _secondaryMailsPolicyChangedDetails;
}

- (DBTEAMLOGPaperContentAddMemberDetails *)paperContentAddMemberDetails {
  if (![self isPaperContentAddMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentAddMemberDetails, but was %@.", [self tagName]];
  }
  return _paperContentAddMemberDetails;
}

- (DBTEAMLOGPaperContentAddToFolderDetails *)paperContentAddToFolderDetails {
  if (![self isPaperContentAddToFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentAddToFolderDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentAddToFolderDetails;
}

- (DBTEAMLOGPaperContentArchiveDetails *)paperContentArchiveDetails {
  if (![self isPaperContentArchiveDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentArchiveDetails, but was %@.", [self tagName]];
  }
  return _paperContentArchiveDetails;
}

- (DBTEAMLOGPaperContentCreateDetails *)paperContentCreateDetails {
  if (![self isPaperContentCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentCreateDetails, but was %@.", [self tagName]];
  }
  return _paperContentCreateDetails;
}

- (DBTEAMLOGPaperContentPermanentlyDeleteDetails *)paperContentPermanentlyDeleteDetails {
  if (![self isPaperContentPermanentlyDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentPermanentlyDeleteDetails;
}

- (DBTEAMLOGPaperContentRemoveFromFolderDetails *)paperContentRemoveFromFolderDetails {
  if (![self isPaperContentRemoveFromFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentRemoveFromFolderDetails;
}

- (DBTEAMLOGPaperContentRemoveMemberDetails *)paperContentRemoveMemberDetails {
  if (![self isPaperContentRemoveMemberDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentRemoveMemberDetails;
}

- (DBTEAMLOGPaperContentRenameDetails *)paperContentRenameDetails {
  if (![self isPaperContentRenameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRenameDetails, but was %@.", [self tagName]];
  }
  return _paperContentRenameDetails;
}

- (DBTEAMLOGPaperContentRestoreDetails *)paperContentRestoreDetails {
  if (![self isPaperContentRestoreDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRestoreDetails, but was %@.", [self tagName]];
  }
  return _paperContentRestoreDetails;
}

- (DBTEAMLOGPaperDocAddCommentDetails *)paperDocAddCommentDetails {
  if (![self isPaperDocAddCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocAddCommentDetails, but was %@.", [self tagName]];
  }
  return _paperDocAddCommentDetails;
}

- (DBTEAMLOGPaperDocChangeMemberRoleDetails *)paperDocChangeMemberRoleDetails {
  if (![self isPaperDocChangeMemberRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocChangeMemberRoleDetails;
}

- (DBTEAMLOGPaperDocChangeSharingPolicyDetails *)paperDocChangeSharingPolicyDetails {
  if (![self isPaperDocChangeSharingPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocChangeSharingPolicyDetails;
}

- (DBTEAMLOGPaperDocChangeSubscriptionDetails *)paperDocChangeSubscriptionDetails {
  if (![self isPaperDocChangeSubscriptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocChangeSubscriptionDetails;
}

- (DBTEAMLOGPaperDocDeletedDetails *)paperDocDeletedDetails {
  if (![self isPaperDocDeletedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocDeletedDetails, but was %@.", [self tagName]];
  }
  return _paperDocDeletedDetails;
}

- (DBTEAMLOGPaperDocDeleteCommentDetails *)paperDocDeleteCommentDetails {
  if (![self isPaperDocDeleteCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails, but was %@.", [self tagName]];
  }
  return _paperDocDeleteCommentDetails;
}

- (DBTEAMLOGPaperDocDownloadDetails *)paperDocDownloadDetails {
  if (![self isPaperDocDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocDownloadDetails, but was %@.", [self tagName]];
  }
  return _paperDocDownloadDetails;
}

- (DBTEAMLOGPaperDocEditDetails *)paperDocEditDetails {
  if (![self isPaperDocEditDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocEditDetails, but was %@.", [self tagName]];
  }
  return _paperDocEditDetails;
}

- (DBTEAMLOGPaperDocEditCommentDetails *)paperDocEditCommentDetails {
  if (![self isPaperDocEditCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocEditCommentDetails, but was %@.", [self tagName]];
  }
  return _paperDocEditCommentDetails;
}

- (DBTEAMLOGPaperDocFollowedDetails *)paperDocFollowedDetails {
  if (![self isPaperDocFollowedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocFollowedDetails, but was %@.", [self tagName]];
  }
  return _paperDocFollowedDetails;
}

- (DBTEAMLOGPaperDocMentionDetails *)paperDocMentionDetails {
  if (![self isPaperDocMentionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocMentionDetails, but was %@.", [self tagName]];
  }
  return _paperDocMentionDetails;
}

- (DBTEAMLOGPaperDocRequestAccessDetails *)paperDocRequestAccessDetails {
  if (![self isPaperDocRequestAccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocRequestAccessDetails, but was %@.", [self tagName]];
  }
  return _paperDocRequestAccessDetails;
}

- (DBTEAMLOGPaperDocResolveCommentDetails *)paperDocResolveCommentDetails {
  if (![self isPaperDocResolveCommentDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocResolveCommentDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocResolveCommentDetails;
}

- (DBTEAMLOGPaperDocRevertDetails *)paperDocRevertDetails {
  if (![self isPaperDocRevertDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocRevertDetails, but was %@.", [self tagName]];
  }
  return _paperDocRevertDetails;
}

- (DBTEAMLOGPaperDocSlackShareDetails *)paperDocSlackShareDetails {
  if (![self isPaperDocSlackShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocSlackShareDetails, but was %@.", [self tagName]];
  }
  return _paperDocSlackShareDetails;
}

- (DBTEAMLOGPaperDocTeamInviteDetails *)paperDocTeamInviteDetails {
  if (![self isPaperDocTeamInviteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocTeamInviteDetails, but was %@.", [self tagName]];
  }
  return _paperDocTeamInviteDetails;
}

- (DBTEAMLOGPaperDocTrashedDetails *)paperDocTrashedDetails {
  if (![self isPaperDocTrashedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocTrashedDetails, but was %@.", [self tagName]];
  }
  return _paperDocTrashedDetails;
}

- (DBTEAMLOGPaperDocUnresolveCommentDetails *)paperDocUnresolveCommentDetails {
  if (![self isPaperDocUnresolveCommentDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocUnresolveCommentDetails;
}

- (DBTEAMLOGPaperDocUntrashedDetails *)paperDocUntrashedDetails {
  if (![self isPaperDocUntrashedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocUntrashedDetails, but was %@.", [self tagName]];
  }
  return _paperDocUntrashedDetails;
}

- (DBTEAMLOGPaperDocViewDetails *)paperDocViewDetails {
  if (![self isPaperDocViewDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocViewDetails, but was %@.", [self tagName]];
  }
  return _paperDocViewDetails;
}

- (DBTEAMLOGPaperExternalViewAllowDetails *)paperExternalViewAllowDetails {
  if (![self isPaperExternalViewAllowDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperExternalViewAllowDetails, but was %@.",
                       [self tagName]];
  }
  return _paperExternalViewAllowDetails;
}

- (DBTEAMLOGPaperExternalViewDefaultTeamDetails *)paperExternalViewDefaultTeamDetails {
  if (![self isPaperExternalViewDefaultTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _paperExternalViewDefaultTeamDetails;
}

- (DBTEAMLOGPaperExternalViewForbidDetails *)paperExternalViewForbidDetails {
  if (![self isPaperExternalViewForbidDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperExternalViewForbidDetails, but was %@.",
                       [self tagName]];
  }
  return _paperExternalViewForbidDetails;
}

- (DBTEAMLOGPaperFolderChangeSubscriptionDetails *)paperFolderChangeSubscriptionDetails {
  if (![self isPaperFolderChangeSubscriptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails, but was %@.",
                       [self tagName]];
  }
  return _paperFolderChangeSubscriptionDetails;
}

- (DBTEAMLOGPaperFolderDeletedDetails *)paperFolderDeletedDetails {
  if (![self isPaperFolderDeletedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderDeletedDetails, but was %@.", [self tagName]];
  }
  return _paperFolderDeletedDetails;
}

- (DBTEAMLOGPaperFolderFollowedDetails *)paperFolderFollowedDetails {
  if (![self isPaperFolderFollowedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderFollowedDetails, but was %@.", [self tagName]];
  }
  return _paperFolderFollowedDetails;
}

- (DBTEAMLOGPaperFolderTeamInviteDetails *)paperFolderTeamInviteDetails {
  if (![self isPaperFolderTeamInviteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails, but was %@.", [self tagName]];
  }
  return _paperFolderTeamInviteDetails;
}

- (DBTEAMLOGPasswordChangeDetails *)passwordChangeDetails {
  if (![self isPasswordChangeDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordChangeDetails, but was %@.", [self tagName]];
  }
  return _passwordChangeDetails;
}

- (DBTEAMLOGPasswordResetDetails *)passwordResetDetails {
  if (![self isPasswordResetDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordResetDetails, but was %@.", [self tagName]];
  }
  return _passwordResetDetails;
}

- (DBTEAMLOGPasswordResetAllDetails *)passwordResetAllDetails {
  if (![self isPasswordResetAllDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordResetAllDetails, but was %@.", [self tagName]];
  }
  return _passwordResetAllDetails;
}

- (DBTEAMLOGEmmCreateExceptionsReportDetails *)emmCreateExceptionsReportDetails {
  if (![self isEmmCreateExceptionsReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails, but was %@.",
                       [self tagName]];
  }
  return _emmCreateExceptionsReportDetails;
}

- (DBTEAMLOGEmmCreateUsageReportDetails *)emmCreateUsageReportDetails {
  if (![self isEmmCreateUsageReportDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmCreateUsageReportDetails, but was %@.", [self tagName]];
  }
  return _emmCreateUsageReportDetails;
}

- (DBTEAMLOGExportMembersReportDetails *)exportMembersReportDetails {
  if (![self isExportMembersReportDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsExportMembersReportDetails, but was %@.", [self tagName]];
  }
  return _exportMembersReportDetails;
}

- (DBTEAMLOGPaperAdminExportStartDetails *)paperAdminExportStartDetails {
  if (![self isPaperAdminExportStartDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperAdminExportStartDetails, but was %@.", [self tagName]];
  }
  return _paperAdminExportStartDetails;
}

- (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)smartSyncCreateAdminPrivilegeReportDetails {
  if (![self isSmartSyncCreateAdminPrivilegeReportDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails, but was %@.",
               [self tagName]];
  }
  return _smartSyncCreateAdminPrivilegeReportDetails;
}

- (DBTEAMLOGTeamActivityCreateReportDetails *)teamActivityCreateReportDetails {
  if (![self isTeamActivityCreateReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamActivityCreateReportDetails, but was %@.",
                       [self tagName]];
  }
  return _teamActivityCreateReportDetails;
}

- (DBTEAMLOGCollectionShareDetails *)collectionShareDetails {
  if (![self isCollectionShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsCollectionShareDetails, but was %@.", [self tagName]];
  }
  return _collectionShareDetails;
}

- (DBTEAMLOGNoteAclInviteOnlyDetails *)noteAclInviteOnlyDetails {
  if (![self isNoteAclInviteOnlyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails, but was %@.", [self tagName]];
  }
  return _noteAclInviteOnlyDetails;
}

- (DBTEAMLOGNoteAclLinkDetails *)noteAclLinkDetails {
  if (![self isNoteAclLinkDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteAclLinkDetails, but was %@.", [self tagName]];
  }
  return _noteAclLinkDetails;
}

- (DBTEAMLOGNoteAclTeamLinkDetails *)noteAclTeamLinkDetails {
  if (![self isNoteAclTeamLinkDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteAclTeamLinkDetails, but was %@.", [self tagName]];
  }
  return _noteAclTeamLinkDetails;
}

- (DBTEAMLOGNoteSharedDetails *)noteSharedDetails {
  if (![self isNoteSharedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteSharedDetails, but was %@.", [self tagName]];
  }
  return _noteSharedDetails;
}

- (DBTEAMLOGNoteShareReceiveDetails *)noteShareReceiveDetails {
  if (![self isNoteShareReceiveDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteShareReceiveDetails, but was %@.", [self tagName]];
  }
  return _noteShareReceiveDetails;
}

- (DBTEAMLOGOpenNoteSharedDetails *)openNoteSharedDetails {
  if (![self isOpenNoteSharedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsOpenNoteSharedDetails, but was %@.", [self tagName]];
  }
  return _openNoteSharedDetails;
}

- (DBTEAMLOGSfAddGroupDetails *)sfAddGroupDetails {
  if (![self isSfAddGroupDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfAddGroupDetails, but was %@.", [self tagName]];
  }
  return _sfAddGroupDetails;
}

- (DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)sfAllowNonMembersToViewSharedLinksDetails {
  if (![self isSfAllowNonMembersToViewSharedLinksDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails, but was %@.",
               [self tagName]];
  }
  return _sfAllowNonMembersToViewSharedLinksDetails;
}

- (DBTEAMLOGSfExternalInviteWarnDetails *)sfExternalInviteWarnDetails {
  if (![self isSfExternalInviteWarnDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfExternalInviteWarnDetails, but was %@.", [self tagName]];
  }
  return _sfExternalInviteWarnDetails;
}

- (DBTEAMLOGSfFbInviteDetails *)sfFbInviteDetails {
  if (![self isSfFbInviteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfFbInviteDetails, but was %@.", [self tagName]];
  }
  return _sfFbInviteDetails;
}

- (DBTEAMLOGSfFbInviteChangeRoleDetails *)sfFbInviteChangeRoleDetails {
  if (![self isSfFbInviteChangeRoleDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails, but was %@.", [self tagName]];
  }
  return _sfFbInviteChangeRoleDetails;
}

- (DBTEAMLOGSfFbUninviteDetails *)sfFbUninviteDetails {
  if (![self isSfFbUninviteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfFbUninviteDetails, but was %@.", [self tagName]];
  }
  return _sfFbUninviteDetails;
}

- (DBTEAMLOGSfInviteGroupDetails *)sfInviteGroupDetails {
  if (![self isSfInviteGroupDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfInviteGroupDetails, but was %@.", [self tagName]];
  }
  return _sfInviteGroupDetails;
}

- (DBTEAMLOGSfTeamGrantAccessDetails *)sfTeamGrantAccessDetails {
  if (![self isSfTeamGrantAccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamGrantAccessDetails, but was %@.", [self tagName]];
  }
  return _sfTeamGrantAccessDetails;
}

- (DBTEAMLOGSfTeamInviteDetails *)sfTeamInviteDetails {
  if (![self isSfTeamInviteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamInviteDetails, but was %@.", [self tagName]];
  }
  return _sfTeamInviteDetails;
}

- (DBTEAMLOGSfTeamInviteChangeRoleDetails *)sfTeamInviteChangeRoleDetails {
  if (![self isSfTeamInviteChangeRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _sfTeamInviteChangeRoleDetails;
}

- (DBTEAMLOGSfTeamJoinDetails *)sfTeamJoinDetails {
  if (![self isSfTeamJoinDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamJoinDetails, but was %@.", [self tagName]];
  }
  return _sfTeamJoinDetails;
}

- (DBTEAMLOGSfTeamJoinFromOobLinkDetails *)sfTeamJoinFromOobLinkDetails {
  if (![self isSfTeamJoinFromOobLinkDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails, but was %@.", [self tagName]];
  }
  return _sfTeamJoinFromOobLinkDetails;
}

- (DBTEAMLOGSfTeamUninviteDetails *)sfTeamUninviteDetails {
  if (![self isSfTeamUninviteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamUninviteDetails, but was %@.", [self tagName]];
  }
  return _sfTeamUninviteDetails;
}

- (DBTEAMLOGSharedContentAddInviteesDetails *)sharedContentAddInviteesDetails {
  if (![self isSharedContentAddInviteesDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddInviteesDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddInviteesDetails;
}

- (DBTEAMLOGSharedContentAddLinkExpiryDetails *)sharedContentAddLinkExpiryDetails {
  if (![self isSharedContentAddLinkExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddLinkExpiryDetails;
}

- (DBTEAMLOGSharedContentAddLinkPasswordDetails *)sharedContentAddLinkPasswordDetails {
  if (![self isSharedContentAddLinkPasswordDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddLinkPasswordDetails;
}

- (DBTEAMLOGSharedContentAddMemberDetails *)sharedContentAddMemberDetails {
  if (![self isSharedContentAddMemberDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddMemberDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddMemberDetails;
}

- (DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)sharedContentChangeDownloadsPolicyDetails {
  if (![self isSharedContentChangeDownloadsPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeDownloadsPolicyDetails;
}

- (DBTEAMLOGSharedContentChangeInviteeRoleDetails *)sharedContentChangeInviteeRoleDetails {
  if (![self isSharedContentChangeInviteeRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeInviteeRoleDetails;
}

- (DBTEAMLOGSharedContentChangeLinkAudienceDetails *)sharedContentChangeLinkAudienceDetails {
  if (![self isSharedContentChangeLinkAudienceDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeLinkAudienceDetails;
}

- (DBTEAMLOGSharedContentChangeLinkExpiryDetails *)sharedContentChangeLinkExpiryDetails {
  if (![self isSharedContentChangeLinkExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeLinkExpiryDetails;
}

- (DBTEAMLOGSharedContentChangeLinkPasswordDetails *)sharedContentChangeLinkPasswordDetails {
  if (![self isSharedContentChangeLinkPasswordDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeLinkPasswordDetails;
}

- (DBTEAMLOGSharedContentChangeMemberRoleDetails *)sharedContentChangeMemberRoleDetails {
  if (![self isSharedContentChangeMemberRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeMemberRoleDetails;
}

- (DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)sharedContentChangeViewerInfoPolicyDetails {
  if (![self isSharedContentChangeViewerInfoPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeViewerInfoPolicyDetails;
}

- (DBTEAMLOGSharedContentClaimInvitationDetails *)sharedContentClaimInvitationDetails {
  if (![self isSharedContentClaimInvitationDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentClaimInvitationDetails;
}

- (DBTEAMLOGSharedContentCopyDetails *)sharedContentCopyDetails {
  if (![self isSharedContentCopyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentCopyDetails, but was %@.", [self tagName]];
  }
  return _sharedContentCopyDetails;
}

- (DBTEAMLOGSharedContentDownloadDetails *)sharedContentDownloadDetails {
  if (![self isSharedContentDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentDownloadDetails, but was %@.", [self tagName]];
  }
  return _sharedContentDownloadDetails;
}

- (DBTEAMLOGSharedContentRelinquishMembershipDetails *)sharedContentRelinquishMembershipDetails {
  if (![self isSharedContentRelinquishMembershipDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentRelinquishMembershipDetails;
}

- (DBTEAMLOGSharedContentRemoveInviteesDetails *)sharedContentRemoveInviteesDetails {
  if (![self isSharedContentRemoveInviteesDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRemoveInviteesDetails;
}

- (DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)sharedContentRemoveLinkExpiryDetails {
  if (![self isSharedContentRemoveLinkExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRemoveLinkExpiryDetails;
}

- (DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)sharedContentRemoveLinkPasswordDetails {
  if (![self isSharedContentRemoveLinkPasswordDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentRemoveLinkPasswordDetails;
}

- (DBTEAMLOGSharedContentRemoveMemberDetails *)sharedContentRemoveMemberDetails {
  if (![self isSharedContentRemoveMemberDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRemoveMemberDetails;
}

- (DBTEAMLOGSharedContentRequestAccessDetails *)sharedContentRequestAccessDetails {
  if (![self isSharedContentRequestAccessDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRequestAccessDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRequestAccessDetails;
}

- (DBTEAMLOGSharedContentUnshareDetails *)sharedContentUnshareDetails {
  if (![self isSharedContentUnshareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentUnshareDetails, but was %@.", [self tagName]];
  }
  return _sharedContentUnshareDetails;
}

- (DBTEAMLOGSharedContentViewDetails *)sharedContentViewDetails {
  if (![self isSharedContentViewDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentViewDetails, but was %@.", [self tagName]];
  }
  return _sharedContentViewDetails;
}

- (DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)sharedFolderChangeLinkPolicyDetails {
  if (![self isSharedFolderChangeLinkPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedFolderChangeLinkPolicyDetails;
}

- (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails *)sharedFolderChangeMembersInheritancePolicyDetails {
  if (![self isSharedFolderChangeMembersInheritancePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _sharedFolderChangeMembersInheritancePolicyDetails;
}

- (DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails *)sharedFolderChangeMembersManagementPolicyDetails {
  if (![self isSharedFolderChangeMembersManagementPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _sharedFolderChangeMembersManagementPolicyDetails;
}

- (DBTEAMLOGSharedFolderChangeMembersPolicyDetails *)sharedFolderChangeMembersPolicyDetails {
  if (![self isSharedFolderChangeMembersPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _sharedFolderChangeMembersPolicyDetails;
}

- (DBTEAMLOGSharedFolderCreateDetails *)sharedFolderCreateDetails {
  if (![self isSharedFolderCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderCreateDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderCreateDetails;
}

- (DBTEAMLOGSharedFolderDeclineInvitationDetails *)sharedFolderDeclineInvitationDetails {
  if (![self isSharedFolderDeclineInvitationDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedFolderDeclineInvitationDetails;
}

- (DBTEAMLOGSharedFolderMountDetails *)sharedFolderMountDetails {
  if (![self isSharedFolderMountDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderMountDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderMountDetails;
}

- (DBTEAMLOGSharedFolderNestDetails *)sharedFolderNestDetails {
  if (![self isSharedFolderNestDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderNestDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderNestDetails;
}

- (DBTEAMLOGSharedFolderTransferOwnershipDetails *)sharedFolderTransferOwnershipDetails {
  if (![self isSharedFolderTransferOwnershipDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedFolderTransferOwnershipDetails;
}

- (DBTEAMLOGSharedFolderUnmountDetails *)sharedFolderUnmountDetails {
  if (![self isSharedFolderUnmountDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderUnmountDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderUnmountDetails;
}

- (DBTEAMLOGSharedLinkAddExpiryDetails *)sharedLinkAddExpiryDetails {
  if (![self isSharedLinkAddExpiryDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkAddExpiryDetails;
}

- (DBTEAMLOGSharedLinkChangeExpiryDetails *)sharedLinkChangeExpiryDetails {
  if (![self isSharedLinkChangeExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedLinkChangeExpiryDetails;
}

- (DBTEAMLOGSharedLinkChangeVisibilityDetails *)sharedLinkChangeVisibilityDetails {
  if (![self isSharedLinkChangeVisibilityDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedLinkChangeVisibilityDetails;
}

- (DBTEAMLOGSharedLinkCopyDetails *)sharedLinkCopyDetails {
  if (![self isSharedLinkCopyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkCopyDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkCopyDetails;
}

- (DBTEAMLOGSharedLinkCreateDetails *)sharedLinkCreateDetails {
  if (![self isSharedLinkCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkCreateDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkCreateDetails;
}

- (DBTEAMLOGSharedLinkDisableDetails *)sharedLinkDisableDetails {
  if (![self isSharedLinkDisableDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkDisableDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkDisableDetails;
}

- (DBTEAMLOGSharedLinkDownloadDetails *)sharedLinkDownloadDetails {
  if (![self isSharedLinkDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkDownloadDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkDownloadDetails;
}

- (DBTEAMLOGSharedLinkRemoveExpiryDetails *)sharedLinkRemoveExpiryDetails {
  if (![self isSharedLinkRemoveExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedLinkRemoveExpiryDetails;
}

- (DBTEAMLOGSharedLinkShareDetails *)sharedLinkShareDetails {
  if (![self isSharedLinkShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkShareDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkShareDetails;
}

- (DBTEAMLOGSharedLinkViewDetails *)sharedLinkViewDetails {
  if (![self isSharedLinkViewDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkViewDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkViewDetails;
}

- (DBTEAMLOGSharedNoteOpenedDetails *)sharedNoteOpenedDetails {
  if (![self isSharedNoteOpenedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedNoteOpenedDetails, but was %@.", [self tagName]];
  }
  return _sharedNoteOpenedDetails;
}

- (DBTEAMLOGShmodelGroupShareDetails *)shmodelGroupShareDetails {
  if (![self isShmodelGroupShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelGroupShareDetails, but was %@.", [self tagName]];
  }
  return _shmodelGroupShareDetails;
}

- (DBTEAMLOGShowcaseAccessGrantedDetails *)showcaseAccessGrantedDetails {
  if (![self isShowcaseAccessGrantedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails, but was %@.", [self tagName]];
  }
  return _showcaseAccessGrantedDetails;
}

- (DBTEAMLOGShowcaseAddMemberDetails *)showcaseAddMemberDetails {
  if (![self isShowcaseAddMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseAddMemberDetails, but was %@.", [self tagName]];
  }
  return _showcaseAddMemberDetails;
}

- (DBTEAMLOGShowcaseArchivedDetails *)showcaseArchivedDetails {
  if (![self isShowcaseArchivedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseArchivedDetails, but was %@.", [self tagName]];
  }
  return _showcaseArchivedDetails;
}

- (DBTEAMLOGShowcaseCreatedDetails *)showcaseCreatedDetails {
  if (![self isShowcaseCreatedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseCreatedDetails, but was %@.", [self tagName]];
  }
  return _showcaseCreatedDetails;
}

- (DBTEAMLOGShowcaseDeleteCommentDetails *)showcaseDeleteCommentDetails {
  if (![self isShowcaseDeleteCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails, but was %@.", [self tagName]];
  }
  return _showcaseDeleteCommentDetails;
}

- (DBTEAMLOGShowcaseEditedDetails *)showcaseEditedDetails {
  if (![self isShowcaseEditedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseEditedDetails, but was %@.", [self tagName]];
  }
  return _showcaseEditedDetails;
}

- (DBTEAMLOGShowcaseEditCommentDetails *)showcaseEditCommentDetails {
  if (![self isShowcaseEditCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseEditCommentDetails, but was %@.", [self tagName]];
  }
  return _showcaseEditCommentDetails;
}

- (DBTEAMLOGShowcaseFileAddedDetails *)showcaseFileAddedDetails {
  if (![self isShowcaseFileAddedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseFileAddedDetails, but was %@.", [self tagName]];
  }
  return _showcaseFileAddedDetails;
}

- (DBTEAMLOGShowcaseFileDownloadDetails *)showcaseFileDownloadDetails {
  if (![self isShowcaseFileDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseFileDownloadDetails, but was %@.", [self tagName]];
  }
  return _showcaseFileDownloadDetails;
}

- (DBTEAMLOGShowcaseFileRemovedDetails *)showcaseFileRemovedDetails {
  if (![self isShowcaseFileRemovedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseFileRemovedDetails, but was %@.", [self tagName]];
  }
  return _showcaseFileRemovedDetails;
}

- (DBTEAMLOGShowcaseFileViewDetails *)showcaseFileViewDetails {
  if (![self isShowcaseFileViewDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseFileViewDetails, but was %@.", [self tagName]];
  }
  return _showcaseFileViewDetails;
}

- (DBTEAMLOGShowcasePermanentlyDeletedDetails *)showcasePermanentlyDeletedDetails {
  if (![self isShowcasePermanentlyDeletedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails, but was %@.",
                       [self tagName]];
  }
  return _showcasePermanentlyDeletedDetails;
}

- (DBTEAMLOGShowcasePostCommentDetails *)showcasePostCommentDetails {
  if (![self isShowcasePostCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcasePostCommentDetails, but was %@.", [self tagName]];
  }
  return _showcasePostCommentDetails;
}

- (DBTEAMLOGShowcaseRemoveMemberDetails *)showcaseRemoveMemberDetails {
  if (![self isShowcaseRemoveMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails, but was %@.", [self tagName]];
  }
  return _showcaseRemoveMemberDetails;
}

- (DBTEAMLOGShowcaseRenamedDetails *)showcaseRenamedDetails {
  if (![self isShowcaseRenamedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseRenamedDetails, but was %@.", [self tagName]];
  }
  return _showcaseRenamedDetails;
}

- (DBTEAMLOGShowcaseRequestAccessDetails *)showcaseRequestAccessDetails {
  if (![self isShowcaseRequestAccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseRequestAccessDetails, but was %@.", [self tagName]];
  }
  return _showcaseRequestAccessDetails;
}

- (DBTEAMLOGShowcaseResolveCommentDetails *)showcaseResolveCommentDetails {
  if (![self isShowcaseResolveCommentDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseResolveCommentDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseResolveCommentDetails;
}

- (DBTEAMLOGShowcaseRestoredDetails *)showcaseRestoredDetails {
  if (![self isShowcaseRestoredDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseRestoredDetails, but was %@.", [self tagName]];
  }
  return _showcaseRestoredDetails;
}

- (DBTEAMLOGShowcaseTrashedDetails *)showcaseTrashedDetails {
  if (![self isShowcaseTrashedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseTrashedDetails, but was %@.", [self tagName]];
  }
  return _showcaseTrashedDetails;
}

- (DBTEAMLOGShowcaseTrashedDeprecatedDetails *)showcaseTrashedDeprecatedDetails {
  if (![self isShowcaseTrashedDeprecatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseTrashedDeprecatedDetails;
}

- (DBTEAMLOGShowcaseUnresolveCommentDetails *)showcaseUnresolveCommentDetails {
  if (![self isShowcaseUnresolveCommentDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseUnresolveCommentDetails;
}

- (DBTEAMLOGShowcaseUntrashedDetails *)showcaseUntrashedDetails {
  if (![self isShowcaseUntrashedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseUntrashedDetails, but was %@.", [self tagName]];
  }
  return _showcaseUntrashedDetails;
}

- (DBTEAMLOGShowcaseUntrashedDeprecatedDetails *)showcaseUntrashedDeprecatedDetails {
  if (![self isShowcaseUntrashedDeprecatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseUntrashedDeprecatedDetails;
}

- (DBTEAMLOGShowcaseViewDetails *)showcaseViewDetails {
  if (![self isShowcaseViewDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseViewDetails, but was %@.", [self tagName]];
  }
  return _showcaseViewDetails;
}

- (DBTEAMLOGSsoAddCertDetails *)ssoAddCertDetails {
  if (![self isSsoAddCertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoAddCertDetails, but was %@.", [self tagName]];
  }
  return _ssoAddCertDetails;
}

- (DBTEAMLOGSsoAddLoginUrlDetails *)ssoAddLoginUrlDetails {
  if (![self isSsoAddLoginUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoAddLoginUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoAddLoginUrlDetails;
}

- (DBTEAMLOGSsoAddLogoutUrlDetails *)ssoAddLogoutUrlDetails {
  if (![self isSsoAddLogoutUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoAddLogoutUrlDetails;
}

- (DBTEAMLOGSsoChangeCertDetails *)ssoChangeCertDetails {
  if (![self isSsoChangeCertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeCertDetails, but was %@.", [self tagName]];
  }
  return _ssoChangeCertDetails;
}

- (DBTEAMLOGSsoChangeLoginUrlDetails *)ssoChangeLoginUrlDetails {
  if (![self isSsoChangeLoginUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoChangeLoginUrlDetails;
}

- (DBTEAMLOGSsoChangeLogoutUrlDetails *)ssoChangeLogoutUrlDetails {
  if (![self isSsoChangeLogoutUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoChangeLogoutUrlDetails;
}

- (DBTEAMLOGSsoChangeSamlIdentityModeDetails *)ssoChangeSamlIdentityModeDetails {
  if (![self isSsoChangeSamlIdentityModeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails, but was %@.",
                       [self tagName]];
  }
  return _ssoChangeSamlIdentityModeDetails;
}

- (DBTEAMLOGSsoRemoveCertDetails *)ssoRemoveCertDetails {
  if (![self isSsoRemoveCertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoRemoveCertDetails, but was %@.", [self tagName]];
  }
  return _ssoRemoveCertDetails;
}

- (DBTEAMLOGSsoRemoveLoginUrlDetails *)ssoRemoveLoginUrlDetails {
  if (![self isSsoRemoveLoginUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoRemoveLoginUrlDetails;
}

- (DBTEAMLOGSsoRemoveLogoutUrlDetails *)ssoRemoveLogoutUrlDetails {
  if (![self isSsoRemoveLogoutUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoRemoveLogoutUrlDetails;
}

- (DBTEAMLOGTeamFolderChangeStatusDetails *)teamFolderChangeStatusDetails {
  if (![self isTeamFolderChangeStatusDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails, but was %@.",
                       [self tagName]];
  }
  return _teamFolderChangeStatusDetails;
}

- (DBTEAMLOGTeamFolderCreateDetails *)teamFolderCreateDetails {
  if (![self isTeamFolderCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderCreateDetails, but was %@.", [self tagName]];
  }
  return _teamFolderCreateDetails;
}

- (DBTEAMLOGTeamFolderDowngradeDetails *)teamFolderDowngradeDetails {
  if (![self isTeamFolderDowngradeDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderDowngradeDetails, but was %@.", [self tagName]];
  }
  return _teamFolderDowngradeDetails;
}

- (DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)teamFolderPermanentlyDeleteDetails {
  if (![self isTeamFolderPermanentlyDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails, but was %@.",
                       [self tagName]];
  }
  return _teamFolderPermanentlyDeleteDetails;
}

- (DBTEAMLOGTeamFolderRenameDetails *)teamFolderRenameDetails {
  if (![self isTeamFolderRenameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderRenameDetails, but was %@.", [self tagName]];
  }
  return _teamFolderRenameDetails;
}

- (DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails *)teamSelectiveSyncSettingsChangedDetails {
  if (![self isTeamSelectiveSyncSettingsChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails, but was %@.",
               [self tagName]];
  }
  return _teamSelectiveSyncSettingsChangedDetails;
}

- (DBTEAMLOGAccountCaptureChangePolicyDetails *)accountCaptureChangePolicyDetails {
  if (![self isAccountCaptureChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _accountCaptureChangePolicyDetails;
}

- (DBTEAMLOGAllowDownloadDisabledDetails *)allowDownloadDisabledDetails {
  if (![self isAllowDownloadDisabledDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAllowDownloadDisabledDetails, but was %@.", [self tagName]];
  }
  return _allowDownloadDisabledDetails;
}

- (DBTEAMLOGAllowDownloadEnabledDetails *)allowDownloadEnabledDetails {
  if (![self isAllowDownloadEnabledDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAllowDownloadEnabledDetails, but was %@.", [self tagName]];
  }
  return _allowDownloadEnabledDetails;
}

- (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)dataPlacementRestrictionChangePolicyDetails {
  if (![self isDataPlacementRestrictionChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _dataPlacementRestrictionChangePolicyDetails;
}

- (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)dataPlacementRestrictionSatisfyPolicyDetails {
  if (![self isDataPlacementRestrictionSatisfyPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _dataPlacementRestrictionSatisfyPolicyDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)deviceApprovalsChangeDesktopPolicyDetails {
  if (![self isDeviceApprovalsChangeDesktopPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeDesktopPolicyDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)deviceApprovalsChangeMobilePolicyDetails {
  if (![self isDeviceApprovalsChangeMobilePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeMobilePolicyDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)deviceApprovalsChangeOverageActionDetails {
  if (![self isDeviceApprovalsChangeOverageActionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeOverageActionDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)deviceApprovalsChangeUnlinkActionDetails {
  if (![self isDeviceApprovalsChangeUnlinkActionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeUnlinkActionDetails;
}

- (DBTEAMLOGDirectoryRestrictionsAddMembersDetails *)directoryRestrictionsAddMembersDetails {
  if (![self isDirectoryRestrictionsAddMembersDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails, but was %@.",
               [self tagName]];
  }
  return _directoryRestrictionsAddMembersDetails;
}

- (DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *)directoryRestrictionsRemoveMembersDetails {
  if (![self isDirectoryRestrictionsRemoveMembersDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails, but was %@.",
               [self tagName]];
  }
  return _directoryRestrictionsRemoveMembersDetails;
}

- (DBTEAMLOGEmmAddExceptionDetails *)emmAddExceptionDetails {
  if (![self isEmmAddExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmAddExceptionDetails, but was %@.", [self tagName]];
  }
  return _emmAddExceptionDetails;
}

- (DBTEAMLOGEmmChangePolicyDetails *)emmChangePolicyDetails {
  if (![self isEmmChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _emmChangePolicyDetails;
}

- (DBTEAMLOGEmmRemoveExceptionDetails *)emmRemoveExceptionDetails {
  if (![self isEmmRemoveExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmRemoveExceptionDetails, but was %@.", [self tagName]];
  }
  return _emmRemoveExceptionDetails;
}

- (DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)extendedVersionHistoryChangePolicyDetails {
  if (![self isExtendedVersionHistoryChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _extendedVersionHistoryChangePolicyDetails;
}

- (DBTEAMLOGFileCommentsChangePolicyDetails *)fileCommentsChangePolicyDetails {
  if (![self isFileCommentsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _fileCommentsChangePolicyDetails;
}

- (DBTEAMLOGFileRequestsChangePolicyDetails *)fileRequestsChangePolicyDetails {
  if (![self isFileRequestsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestsChangePolicyDetails;
}

- (DBTEAMLOGFileRequestsEmailsEnabledDetails *)fileRequestsEmailsEnabledDetails {
  if (![self isFileRequestsEmailsEnabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestsEmailsEnabledDetails;
}

- (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)fileRequestsEmailsRestrictedToTeamOnlyDetails {
  if (![self isFileRequestsEmailsRestrictedToTeamOnlyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails, but was %@.",
               [self tagName]];
  }
  return _fileRequestsEmailsRestrictedToTeamOnlyDetails;
}

- (DBTEAMLOGGoogleSsoChangePolicyDetails *)googleSsoChangePolicyDetails {
  if (![self isGoogleSsoChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _googleSsoChangePolicyDetails;
}

- (DBTEAMLOGGroupUserManagementChangePolicyDetails *)groupUserManagementChangePolicyDetails {
  if (![self isGroupUserManagementChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _groupUserManagementChangePolicyDetails;
}

- (DBTEAMLOGMemberRequestsChangePolicyDetails *)memberRequestsChangePolicyDetails {
  if (![self isMemberRequestsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _memberRequestsChangePolicyDetails;
}

- (DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)memberSpaceLimitsAddExceptionDetails {
  if (![self isMemberSpaceLimitsAddExceptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsAddExceptionDetails;
}

- (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails *)memberSpaceLimitsChangeCapsTypePolicyDetails {
  if (![self isMemberSpaceLimitsChangeCapsTypePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsChangeCapsTypePolicyDetails;
}

- (DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)memberSpaceLimitsChangePolicyDetails {
  if (![self isMemberSpaceLimitsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsChangePolicyDetails;
}

- (DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)memberSpaceLimitsRemoveExceptionDetails {
  if (![self isMemberSpaceLimitsRemoveExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsRemoveExceptionDetails;
}

- (DBTEAMLOGMemberSuggestionsChangePolicyDetails *)memberSuggestionsChangePolicyDetails {
  if (![self isMemberSuggestionsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSuggestionsChangePolicyDetails;
}

- (DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)microsoftOfficeAddinChangePolicyDetails {
  if (![self isMicrosoftOfficeAddinChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _microsoftOfficeAddinChangePolicyDetails;
}

- (DBTEAMLOGNetworkControlChangePolicyDetails *)networkControlChangePolicyDetails {
  if (![self isNetworkControlChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _networkControlChangePolicyDetails;
}

- (DBTEAMLOGPaperChangeDeploymentPolicyDetails *)paperChangeDeploymentPolicyDetails {
  if (![self isPaperChangeDeploymentPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperChangeDeploymentPolicyDetails;
}

- (DBTEAMLOGPaperChangeMemberLinkPolicyDetails *)paperChangeMemberLinkPolicyDetails {
  if (![self isPaperChangeMemberLinkPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperChangeMemberLinkPolicyDetails;
}

- (DBTEAMLOGPaperChangeMemberPolicyDetails *)paperChangeMemberPolicyDetails {
  if (![self isPaperChangeMemberPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperChangeMemberPolicyDetails;
}

- (DBTEAMLOGPaperChangePolicyDetails *)paperChangePolicyDetails {
  if (![self isPaperChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _paperChangePolicyDetails;
}

- (DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)paperEnabledUsersGroupAdditionDetails {
  if (![self isPaperEnabledUsersGroupAdditionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails, but was %@.",
                       [self tagName]];
  }
  return _paperEnabledUsersGroupAdditionDetails;
}

- (DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)paperEnabledUsersGroupRemovalDetails {
  if (![self isPaperEnabledUsersGroupRemovalDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails, but was %@.",
                       [self tagName]];
  }
  return _paperEnabledUsersGroupRemovalDetails;
}

- (DBTEAMLOGPermanentDeleteChangePolicyDetails *)permanentDeleteChangePolicyDetails {
  if (![self isPermanentDeleteChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _permanentDeleteChangePolicyDetails;
}

- (DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)sharingChangeFolderJoinPolicyDetails {
  if (![self isSharingChangeFolderJoinPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharingChangeFolderJoinPolicyDetails;
}

- (DBTEAMLOGSharingChangeLinkPolicyDetails *)sharingChangeLinkPolicyDetails {
  if (![self isSharingChangeLinkPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharingChangeLinkPolicyDetails;
}

- (DBTEAMLOGSharingChangeMemberPolicyDetails *)sharingChangeMemberPolicyDetails {
  if (![self isSharingChangeMemberPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharingChangeMemberPolicyDetails;
}

- (DBTEAMLOGShowcaseChangeDownloadPolicyDetails *)showcaseChangeDownloadPolicyDetails {
  if (![self isShowcaseChangeDownloadPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseChangeDownloadPolicyDetails;
}

- (DBTEAMLOGShowcaseChangeEnabledPolicyDetails *)showcaseChangeEnabledPolicyDetails {
  if (![self isShowcaseChangeEnabledPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseChangeEnabledPolicyDetails;
}

- (DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails *)showcaseChangeExternalSharingPolicyDetails {
  if (![self isShowcaseChangeExternalSharingPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _showcaseChangeExternalSharingPolicyDetails;
}

- (DBTEAMLOGSmartSyncChangePolicyDetails *)smartSyncChangePolicyDetails {
  if (![self isSmartSyncChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _smartSyncChangePolicyDetails;
}

- (DBTEAMLOGSmartSyncNotOptOutDetails *)smartSyncNotOptOutDetails {
  if (![self isSmartSyncNotOptOutDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails, but was %@.", [self tagName]];
  }
  return _smartSyncNotOptOutDetails;
}

- (DBTEAMLOGSmartSyncOptOutDetails *)smartSyncOptOutDetails {
  if (![self isSmartSyncOptOutDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSmartSyncOptOutDetails, but was %@.", [self tagName]];
  }
  return _smartSyncOptOutDetails;
}

- (DBTEAMLOGSsoChangePolicyDetails *)ssoChangePolicyDetails {
  if (![self isSsoChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _ssoChangePolicyDetails;
}

- (DBTEAMLOGTfaChangePolicyDetails *)tfaChangePolicyDetails {
  if (![self isTfaChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _tfaChangePolicyDetails;
}

- (DBTEAMLOGTwoAccountChangePolicyDetails *)twoAccountChangePolicyDetails {
  if (![self isTwoAccountChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _twoAccountChangePolicyDetails;
}

- (DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)webSessionsChangeFixedLengthPolicyDetails {
  if (![self isWebSessionsChangeFixedLengthPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _webSessionsChangeFixedLengthPolicyDetails;
}

- (DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)webSessionsChangeIdleLengthPolicyDetails {
  if (![self isWebSessionsChangeIdleLengthPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _webSessionsChangeIdleLengthPolicyDetails;
}

- (DBTEAMLOGTeamMergeFromDetails *)teamMergeFromDetails {
  if (![self isTeamMergeFromDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeFromDetails, but was %@.", [self tagName]];
  }
  return _teamMergeFromDetails;
}

- (DBTEAMLOGTeamMergeToDetails *)teamMergeToDetails {
  if (![self isTeamMergeToDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeToDetails, but was %@.", [self tagName]];
  }
  return _teamMergeToDetails;
}

- (DBTEAMLOGTeamProfileAddLogoDetails *)teamProfileAddLogoDetails {
  if (![self isTeamProfileAddLogoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileAddLogoDetails, but was %@.", [self tagName]];
  }
  return _teamProfileAddLogoDetails;
}

- (DBTEAMLOGTeamProfileChangeDefaultLanguageDetails *)teamProfileChangeDefaultLanguageDetails {
  if (![self isTeamProfileChangeDefaultLanguageDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails, but was %@.",
               [self tagName]];
  }
  return _teamProfileChangeDefaultLanguageDetails;
}

- (DBTEAMLOGTeamProfileChangeLogoDetails *)teamProfileChangeLogoDetails {
  if (![self isTeamProfileChangeLogoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails, but was %@.", [self tagName]];
  }
  return _teamProfileChangeLogoDetails;
}

- (DBTEAMLOGTeamProfileChangeNameDetails *)teamProfileChangeNameDetails {
  if (![self isTeamProfileChangeNameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileChangeNameDetails, but was %@.", [self tagName]];
  }
  return _teamProfileChangeNameDetails;
}

- (DBTEAMLOGTeamProfileRemoveLogoDetails *)teamProfileRemoveLogoDetails {
  if (![self isTeamProfileRemoveLogoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails, but was %@.", [self tagName]];
  }
  return _teamProfileRemoveLogoDetails;
}

- (DBTEAMLOGTfaAddBackupPhoneDetails *)tfaAddBackupPhoneDetails {
  if (![self isTfaAddBackupPhoneDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails, but was %@.", [self tagName]];
  }
  return _tfaAddBackupPhoneDetails;
}

- (DBTEAMLOGTfaAddSecurityKeyDetails *)tfaAddSecurityKeyDetails {
  if (![self isTfaAddSecurityKeyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails, but was %@.", [self tagName]];
  }
  return _tfaAddSecurityKeyDetails;
}

- (DBTEAMLOGTfaChangeBackupPhoneDetails *)tfaChangeBackupPhoneDetails {
  if (![self isTfaChangeBackupPhoneDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails, but was %@.", [self tagName]];
  }
  return _tfaChangeBackupPhoneDetails;
}

- (DBTEAMLOGTfaChangeStatusDetails *)tfaChangeStatusDetails {
  if (![self isTfaChangeStatusDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaChangeStatusDetails, but was %@.", [self tagName]];
  }
  return _tfaChangeStatusDetails;
}

- (DBTEAMLOGTfaRemoveBackupPhoneDetails *)tfaRemoveBackupPhoneDetails {
  if (![self isTfaRemoveBackupPhoneDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails, but was %@.", [self tagName]];
  }
  return _tfaRemoveBackupPhoneDetails;
}

- (DBTEAMLOGTfaRemoveSecurityKeyDetails *)tfaRemoveSecurityKeyDetails {
  if (![self isTfaRemoveSecurityKeyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails, but was %@.", [self tagName]];
  }
  return _tfaRemoveSecurityKeyDetails;
}

- (DBTEAMLOGTfaResetDetails *)tfaResetDetails {
  if (![self isTfaResetDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaResetDetails, but was %@.", [self tagName]];
  }
  return _tfaResetDetails;
}

- (DBTEAMLOGMissingDetails *)missingDetails {
  if (![self isMissingDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMissingDetails, but was %@.", [self tagName]];
  }
  return _missingDetails;
}

#pragma mark - Tag state methods

- (BOOL)isAppLinkTeamDetails {
  return _tag == DBTEAMLOGEventDetailsAppLinkTeamDetails;
}

- (BOOL)isAppLinkUserDetails {
  return _tag == DBTEAMLOGEventDetailsAppLinkUserDetails;
}

- (BOOL)isAppUnlinkTeamDetails {
  return _tag == DBTEAMLOGEventDetailsAppUnlinkTeamDetails;
}

- (BOOL)isAppUnlinkUserDetails {
  return _tag == DBTEAMLOGEventDetailsAppUnlinkUserDetails;
}

- (BOOL)isFileAddCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileAddCommentDetails;
}

- (BOOL)isFileChangeCommentSubscriptionDetails {
  return _tag == DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails;
}

- (BOOL)isFileDeleteCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileDeleteCommentDetails;
}

- (BOOL)isFileLikeCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileLikeCommentDetails;
}

- (BOOL)isFileResolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileResolveCommentDetails;
}

- (BOOL)isFileUnlikeCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileUnlikeCommentDetails;
}

- (BOOL)isFileUnresolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileUnresolveCommentDetails;
}

- (BOOL)isDeviceChangeIpDesktopDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails;
}

- (BOOL)isDeviceChangeIpMobileDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails;
}

- (BOOL)isDeviceChangeIpWebDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceChangeIpWebDetails;
}

- (BOOL)isDeviceDeleteOnUnlinkFailDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails;
}

- (BOOL)isDeviceDeleteOnUnlinkSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails;
}

- (BOOL)isDeviceLinkFailDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceLinkFailDetails;
}

- (BOOL)isDeviceLinkSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceLinkSuccessDetails;
}

- (BOOL)isDeviceManagementDisabledDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceManagementDisabledDetails;
}

- (BOOL)isDeviceManagementEnabledDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceManagementEnabledDetails;
}

- (BOOL)isDeviceUnlinkDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceUnlinkDetails;
}

- (BOOL)isEmmRefreshAuthTokenDetails {
  return _tag == DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails;
}

- (BOOL)isAccountCaptureChangeAvailabilityDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails;
}

- (BOOL)isAccountCaptureMigrateAccountDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails;
}

- (BOOL)isAccountCaptureNotificationEmailsSentDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails;
}

- (BOOL)isAccountCaptureRelinquishAccountDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails;
}

- (BOOL)isDisabledDomainInvitesDetails {
  return _tag == DBTEAMLOGEventDetailsDisabledDomainInvitesDetails;
}

- (BOOL)isDomainInvitesApproveRequestToJoinTeamDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails;
}

- (BOOL)isDomainInvitesDeclineRequestToJoinTeamDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails;
}

- (BOOL)isDomainInvitesEmailExistingUsersDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails;
}

- (BOOL)isDomainInvitesRequestToJoinTeamDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails;
}

- (BOOL)isDomainInvitesSetInviteNewUserPrefToNoDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails;
}

- (BOOL)isDomainInvitesSetInviteNewUserPrefToYesDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails;
}

- (BOOL)isDomainVerificationAddDomainFailDetails {
  return _tag == DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails;
}

- (BOOL)isDomainVerificationAddDomainSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails;
}

- (BOOL)isDomainVerificationRemoveDomainDetails {
  return _tag == DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails;
}

- (BOOL)isEnabledDomainInvitesDetails {
  return _tag == DBTEAMLOGEventDetailsEnabledDomainInvitesDetails;
}

- (BOOL)isCreateFolderDetails {
  return _tag == DBTEAMLOGEventDetailsCreateFolderDetails;
}

- (BOOL)isFileAddDetails {
  return _tag == DBTEAMLOGEventDetailsFileAddDetails;
}

- (BOOL)isFileCopyDetails {
  return _tag == DBTEAMLOGEventDetailsFileCopyDetails;
}

- (BOOL)isFileDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsFileDeleteDetails;
}

- (BOOL)isFileDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsFileDownloadDetails;
}

- (BOOL)isFileEditDetails {
  return _tag == DBTEAMLOGEventDetailsFileEditDetails;
}

- (BOOL)isFileGetCopyReferenceDetails {
  return _tag == DBTEAMLOGEventDetailsFileGetCopyReferenceDetails;
}

- (BOOL)isFileMoveDetails {
  return _tag == DBTEAMLOGEventDetailsFileMoveDetails;
}

- (BOOL)isFilePermanentlyDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails;
}

- (BOOL)isFilePreviewDetails {
  return _tag == DBTEAMLOGEventDetailsFilePreviewDetails;
}

- (BOOL)isFileRenameDetails {
  return _tag == DBTEAMLOGEventDetailsFileRenameDetails;
}

- (BOOL)isFileRestoreDetails {
  return _tag == DBTEAMLOGEventDetailsFileRestoreDetails;
}

- (BOOL)isFileRevertDetails {
  return _tag == DBTEAMLOGEventDetailsFileRevertDetails;
}

- (BOOL)isFileRollbackChangesDetails {
  return _tag == DBTEAMLOGEventDetailsFileRollbackChangesDetails;
}

- (BOOL)isFileSaveCopyReferenceDetails {
  return _tag == DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails;
}

- (BOOL)isFileRequestChangeDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestChangeDetails;
}

- (BOOL)isFileRequestCloseDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestCloseDetails;
}

- (BOOL)isFileRequestCreateDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestCreateDetails;
}

- (BOOL)isFileRequestReceiveFileDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestReceiveFileDetails;
}

- (BOOL)isGroupAddExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsGroupAddExternalIdDetails;
}

- (BOOL)isGroupAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsGroupAddMemberDetails;
}

- (BOOL)isGroupChangeExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsGroupChangeExternalIdDetails;
}

- (BOOL)isGroupChangeManagementTypeDetails {
  return _tag == DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails;
}

- (BOOL)isGroupChangeMemberRoleDetails {
  return _tag == DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails;
}

- (BOOL)isGroupCreateDetails {
  return _tag == DBTEAMLOGEventDetailsGroupCreateDetails;
}

- (BOOL)isGroupDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsGroupDeleteDetails;
}

- (BOOL)isGroupDescriptionUpdatedDetails {
  return _tag == DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails;
}

- (BOOL)isGroupJoinPolicyUpdatedDetails {
  return _tag == DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails;
}

- (BOOL)isGroupMovedDetails {
  return _tag == DBTEAMLOGEventDetailsGroupMovedDetails;
}

- (BOOL)isGroupRemoveExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails;
}

- (BOOL)isGroupRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsGroupRemoveMemberDetails;
}

- (BOOL)isGroupRenameDetails {
  return _tag == DBTEAMLOGEventDetailsGroupRenameDetails;
}

- (BOOL)isEmmErrorDetails {
  return _tag == DBTEAMLOGEventDetailsEmmErrorDetails;
}

- (BOOL)isLoginFailDetails {
  return _tag == DBTEAMLOGEventDetailsLoginFailDetails;
}

- (BOOL)isLoginSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsLoginSuccessDetails;
}

- (BOOL)isLogoutDetails {
  return _tag == DBTEAMLOGEventDetailsLogoutDetails;
}

- (BOOL)isResellerSupportSessionEndDetails {
  return _tag == DBTEAMLOGEventDetailsResellerSupportSessionEndDetails;
}

- (BOOL)isResellerSupportSessionStartDetails {
  return _tag == DBTEAMLOGEventDetailsResellerSupportSessionStartDetails;
}

- (BOOL)isSignInAsSessionEndDetails {
  return _tag == DBTEAMLOGEventDetailsSignInAsSessionEndDetails;
}

- (BOOL)isSignInAsSessionStartDetails {
  return _tag == DBTEAMLOGEventDetailsSignInAsSessionStartDetails;
}

- (BOOL)isSsoErrorDetails {
  return _tag == DBTEAMLOGEventDetailsSsoErrorDetails;
}

- (BOOL)isMemberAddNameDetails {
  return _tag == DBTEAMLOGEventDetailsMemberAddNameDetails;
}

- (BOOL)isMemberChangeAdminRoleDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails;
}

- (BOOL)isMemberChangeEmailDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeEmailDetails;
}

- (BOOL)isMemberChangeMembershipTypeDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails;
}

- (BOOL)isMemberChangeNameDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeNameDetails;
}

- (BOOL)isMemberChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeStatusDetails;
}

- (BOOL)isMemberPermanentlyDeleteAccountContentsDetails {
  return _tag == DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails;
}

- (BOOL)isMemberSpaceLimitsAddCustomQuotaDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails;
}

- (BOOL)isMemberSpaceLimitsChangeCustomQuotaDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails;
}

- (BOOL)isMemberSpaceLimitsChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails;
}

- (BOOL)isMemberSpaceLimitsRemoveCustomQuotaDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails;
}

- (BOOL)isMemberSuggestDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSuggestDetails;
}

- (BOOL)isMemberTransferAccountContentsDetails {
  return _tag == DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails;
}

- (BOOL)isSecondaryMailsPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails;
}

- (BOOL)isPaperContentAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentAddMemberDetails;
}

- (BOOL)isPaperContentAddToFolderDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentAddToFolderDetails;
}

- (BOOL)isPaperContentArchiveDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentArchiveDetails;
}

- (BOOL)isPaperContentCreateDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentCreateDetails;
}

- (BOOL)isPaperContentPermanentlyDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails;
}

- (BOOL)isPaperContentRemoveFromFolderDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails;
}

- (BOOL)isPaperContentRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails;
}

- (BOOL)isPaperContentRenameDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRenameDetails;
}

- (BOOL)isPaperContentRestoreDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRestoreDetails;
}

- (BOOL)isPaperDocAddCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocAddCommentDetails;
}

- (BOOL)isPaperDocChangeMemberRoleDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails;
}

- (BOOL)isPaperDocChangeSharingPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails;
}

- (BOOL)isPaperDocChangeSubscriptionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails;
}

- (BOOL)isPaperDocDeletedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocDeletedDetails;
}

- (BOOL)isPaperDocDeleteCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails;
}

- (BOOL)isPaperDocDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocDownloadDetails;
}

- (BOOL)isPaperDocEditDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocEditDetails;
}

- (BOOL)isPaperDocEditCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocEditCommentDetails;
}

- (BOOL)isPaperDocFollowedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocFollowedDetails;
}

- (BOOL)isPaperDocMentionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocMentionDetails;
}

- (BOOL)isPaperDocRequestAccessDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocRequestAccessDetails;
}

- (BOOL)isPaperDocResolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocResolveCommentDetails;
}

- (BOOL)isPaperDocRevertDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocRevertDetails;
}

- (BOOL)isPaperDocSlackShareDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocSlackShareDetails;
}

- (BOOL)isPaperDocTeamInviteDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocTeamInviteDetails;
}

- (BOOL)isPaperDocTrashedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocTrashedDetails;
}

- (BOOL)isPaperDocUnresolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails;
}

- (BOOL)isPaperDocUntrashedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocUntrashedDetails;
}

- (BOOL)isPaperDocViewDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocViewDetails;
}

- (BOOL)isPaperExternalViewAllowDetails {
  return _tag == DBTEAMLOGEventDetailsPaperExternalViewAllowDetails;
}

- (BOOL)isPaperExternalViewDefaultTeamDetails {
  return _tag == DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails;
}

- (BOOL)isPaperExternalViewForbidDetails {
  return _tag == DBTEAMLOGEventDetailsPaperExternalViewForbidDetails;
}

- (BOOL)isPaperFolderChangeSubscriptionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails;
}

- (BOOL)isPaperFolderDeletedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderDeletedDetails;
}

- (BOOL)isPaperFolderFollowedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderFollowedDetails;
}

- (BOOL)isPaperFolderTeamInviteDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails;
}

- (BOOL)isPasswordChangeDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordChangeDetails;
}

- (BOOL)isPasswordResetDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordResetDetails;
}

- (BOOL)isPasswordResetAllDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordResetAllDetails;
}

- (BOOL)isEmmCreateExceptionsReportDetails {
  return _tag == DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails;
}

- (BOOL)isEmmCreateUsageReportDetails {
  return _tag == DBTEAMLOGEventDetailsEmmCreateUsageReportDetails;
}

- (BOOL)isExportMembersReportDetails {
  return _tag == DBTEAMLOGEventDetailsExportMembersReportDetails;
}

- (BOOL)isPaperAdminExportStartDetails {
  return _tag == DBTEAMLOGEventDetailsPaperAdminExportStartDetails;
}

- (BOOL)isSmartSyncCreateAdminPrivilegeReportDetails {
  return _tag == DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails;
}

- (BOOL)isTeamActivityCreateReportDetails {
  return _tag == DBTEAMLOGEventDetailsTeamActivityCreateReportDetails;
}

- (BOOL)isCollectionShareDetails {
  return _tag == DBTEAMLOGEventDetailsCollectionShareDetails;
}

- (BOOL)isNoteAclInviteOnlyDetails {
  return _tag == DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails;
}

- (BOOL)isNoteAclLinkDetails {
  return _tag == DBTEAMLOGEventDetailsNoteAclLinkDetails;
}

- (BOOL)isNoteAclTeamLinkDetails {
  return _tag == DBTEAMLOGEventDetailsNoteAclTeamLinkDetails;
}

- (BOOL)isNoteSharedDetails {
  return _tag == DBTEAMLOGEventDetailsNoteSharedDetails;
}

- (BOOL)isNoteShareReceiveDetails {
  return _tag == DBTEAMLOGEventDetailsNoteShareReceiveDetails;
}

- (BOOL)isOpenNoteSharedDetails {
  return _tag == DBTEAMLOGEventDetailsOpenNoteSharedDetails;
}

- (BOOL)isSfAddGroupDetails {
  return _tag == DBTEAMLOGEventDetailsSfAddGroupDetails;
}

- (BOOL)isSfAllowNonMembersToViewSharedLinksDetails {
  return _tag == DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails;
}

- (BOOL)isSfExternalInviteWarnDetails {
  return _tag == DBTEAMLOGEventDetailsSfExternalInviteWarnDetails;
}

- (BOOL)isSfFbInviteDetails {
  return _tag == DBTEAMLOGEventDetailsSfFbInviteDetails;
}

- (BOOL)isSfFbInviteChangeRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails;
}

- (BOOL)isSfFbUninviteDetails {
  return _tag == DBTEAMLOGEventDetailsSfFbUninviteDetails;
}

- (BOOL)isSfInviteGroupDetails {
  return _tag == DBTEAMLOGEventDetailsSfInviteGroupDetails;
}

- (BOOL)isSfTeamGrantAccessDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamGrantAccessDetails;
}

- (BOOL)isSfTeamInviteDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamInviteDetails;
}

- (BOOL)isSfTeamInviteChangeRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails;
}

- (BOOL)isSfTeamJoinDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamJoinDetails;
}

- (BOOL)isSfTeamJoinFromOobLinkDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails;
}

- (BOOL)isSfTeamUninviteDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamUninviteDetails;
}

- (BOOL)isSharedContentAddInviteesDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddInviteesDetails;
}

- (BOOL)isSharedContentAddLinkExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails;
}

- (BOOL)isSharedContentAddLinkPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails;
}

- (BOOL)isSharedContentAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddMemberDetails;
}

- (BOOL)isSharedContentChangeDownloadsPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails;
}

- (BOOL)isSharedContentChangeInviteeRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails;
}

- (BOOL)isSharedContentChangeLinkAudienceDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails;
}

- (BOOL)isSharedContentChangeLinkExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails;
}

- (BOOL)isSharedContentChangeLinkPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails;
}

- (BOOL)isSharedContentChangeMemberRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails;
}

- (BOOL)isSharedContentChangeViewerInfoPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails;
}

- (BOOL)isSharedContentClaimInvitationDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails;
}

- (BOOL)isSharedContentCopyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentCopyDetails;
}

- (BOOL)isSharedContentDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentDownloadDetails;
}

- (BOOL)isSharedContentRelinquishMembershipDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails;
}

- (BOOL)isSharedContentRemoveInviteesDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails;
}

- (BOOL)isSharedContentRemoveLinkExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails;
}

- (BOOL)isSharedContentRemoveLinkPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails;
}

- (BOOL)isSharedContentRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails;
}

- (BOOL)isSharedContentRequestAccessDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRequestAccessDetails;
}

- (BOOL)isSharedContentUnshareDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentUnshareDetails;
}

- (BOOL)isSharedContentViewDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentViewDetails;
}

- (BOOL)isSharedFolderChangeLinkPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails;
}

- (BOOL)isSharedFolderChangeMembersInheritancePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails;
}

- (BOOL)isSharedFolderChangeMembersManagementPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails;
}

- (BOOL)isSharedFolderChangeMembersPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails;
}

- (BOOL)isSharedFolderCreateDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderCreateDetails;
}

- (BOOL)isSharedFolderDeclineInvitationDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails;
}

- (BOOL)isSharedFolderMountDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderMountDetails;
}

- (BOOL)isSharedFolderNestDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderNestDetails;
}

- (BOOL)isSharedFolderTransferOwnershipDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails;
}

- (BOOL)isSharedFolderUnmountDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderUnmountDetails;
}

- (BOOL)isSharedLinkAddExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails;
}

- (BOOL)isSharedLinkChangeExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails;
}

- (BOOL)isSharedLinkChangeVisibilityDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails;
}

- (BOOL)isSharedLinkCopyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkCopyDetails;
}

- (BOOL)isSharedLinkCreateDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkCreateDetails;
}

- (BOOL)isSharedLinkDisableDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkDisableDetails;
}

- (BOOL)isSharedLinkDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkDownloadDetails;
}

- (BOOL)isSharedLinkRemoveExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails;
}

- (BOOL)isSharedLinkShareDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkShareDetails;
}

- (BOOL)isSharedLinkViewDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkViewDetails;
}

- (BOOL)isSharedNoteOpenedDetails {
  return _tag == DBTEAMLOGEventDetailsSharedNoteOpenedDetails;
}

- (BOOL)isShmodelGroupShareDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelGroupShareDetails;
}

- (BOOL)isShowcaseAccessGrantedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails;
}

- (BOOL)isShowcaseAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseAddMemberDetails;
}

- (BOOL)isShowcaseArchivedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseArchivedDetails;
}

- (BOOL)isShowcaseCreatedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseCreatedDetails;
}

- (BOOL)isShowcaseDeleteCommentDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails;
}

- (BOOL)isShowcaseEditedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseEditedDetails;
}

- (BOOL)isShowcaseEditCommentDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseEditCommentDetails;
}

- (BOOL)isShowcaseFileAddedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseFileAddedDetails;
}

- (BOOL)isShowcaseFileDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseFileDownloadDetails;
}

- (BOOL)isShowcaseFileRemovedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseFileRemovedDetails;
}

- (BOOL)isShowcaseFileViewDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseFileViewDetails;
}

- (BOOL)isShowcasePermanentlyDeletedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails;
}

- (BOOL)isShowcasePostCommentDetails {
  return _tag == DBTEAMLOGEventDetailsShowcasePostCommentDetails;
}

- (BOOL)isShowcaseRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails;
}

- (BOOL)isShowcaseRenamedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseRenamedDetails;
}

- (BOOL)isShowcaseRequestAccessDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseRequestAccessDetails;
}

- (BOOL)isShowcaseResolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseResolveCommentDetails;
}

- (BOOL)isShowcaseRestoredDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseRestoredDetails;
}

- (BOOL)isShowcaseTrashedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseTrashedDetails;
}

- (BOOL)isShowcaseTrashedDeprecatedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails;
}

- (BOOL)isShowcaseUnresolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails;
}

- (BOOL)isShowcaseUntrashedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseUntrashedDetails;
}

- (BOOL)isShowcaseUntrashedDeprecatedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails;
}

- (BOOL)isShowcaseViewDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseViewDetails;
}

- (BOOL)isSsoAddCertDetails {
  return _tag == DBTEAMLOGEventDetailsSsoAddCertDetails;
}

- (BOOL)isSsoAddLoginUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoAddLoginUrlDetails;
}

- (BOOL)isSsoAddLogoutUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails;
}

- (BOOL)isSsoChangeCertDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeCertDetails;
}

- (BOOL)isSsoChangeLoginUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails;
}

- (BOOL)isSsoChangeLogoutUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails;
}

- (BOOL)isSsoChangeSamlIdentityModeDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails;
}

- (BOOL)isSsoRemoveCertDetails {
  return _tag == DBTEAMLOGEventDetailsSsoRemoveCertDetails;
}

- (BOOL)isSsoRemoveLoginUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails;
}

- (BOOL)isSsoRemoveLogoutUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails;
}

- (BOOL)isTeamFolderChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails;
}

- (BOOL)isTeamFolderCreateDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderCreateDetails;
}

- (BOOL)isTeamFolderDowngradeDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderDowngradeDetails;
}

- (BOOL)isTeamFolderPermanentlyDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails;
}

- (BOOL)isTeamFolderRenameDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderRenameDetails;
}

- (BOOL)isTeamSelectiveSyncSettingsChangedDetails {
  return _tag == DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails;
}

- (BOOL)isAccountCaptureChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails;
}

- (BOOL)isAllowDownloadDisabledDetails {
  return _tag == DBTEAMLOGEventDetailsAllowDownloadDisabledDetails;
}

- (BOOL)isAllowDownloadEnabledDetails {
  return _tag == DBTEAMLOGEventDetailsAllowDownloadEnabledDetails;
}

- (BOOL)isDataPlacementRestrictionChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails;
}

- (BOOL)isDataPlacementRestrictionSatisfyPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails;
}

- (BOOL)isDeviceApprovalsChangeDesktopPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails;
}

- (BOOL)isDeviceApprovalsChangeMobilePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails;
}

- (BOOL)isDeviceApprovalsChangeOverageActionDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails;
}

- (BOOL)isDeviceApprovalsChangeUnlinkActionDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails;
}

- (BOOL)isDirectoryRestrictionsAddMembersDetails {
  return _tag == DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails;
}

- (BOOL)isDirectoryRestrictionsRemoveMembersDetails {
  return _tag == DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails;
}

- (BOOL)isEmmAddExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsEmmAddExceptionDetails;
}

- (BOOL)isEmmChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsEmmChangePolicyDetails;
}

- (BOOL)isEmmRemoveExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsEmmRemoveExceptionDetails;
}

- (BOOL)isExtendedVersionHistoryChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails;
}

- (BOOL)isFileCommentsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails;
}

- (BOOL)isFileRequestsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails;
}

- (BOOL)isFileRequestsEmailsEnabledDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails;
}

- (BOOL)isFileRequestsEmailsRestrictedToTeamOnlyDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails;
}

- (BOOL)isGoogleSsoChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails;
}

- (BOOL)isGroupUserManagementChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails;
}

- (BOOL)isMemberRequestsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails;
}

- (BOOL)isMemberSpaceLimitsAddExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails;
}

- (BOOL)isMemberSpaceLimitsChangeCapsTypePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails;
}

- (BOOL)isMemberSpaceLimitsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails;
}

- (BOOL)isMemberSpaceLimitsRemoveExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails;
}

- (BOOL)isMemberSuggestionsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails;
}

- (BOOL)isMicrosoftOfficeAddinChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails;
}

- (BOOL)isNetworkControlChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails;
}

- (BOOL)isPaperChangeDeploymentPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails;
}

- (BOOL)isPaperChangeMemberLinkPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails;
}

- (BOOL)isPaperChangeMemberPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails;
}

- (BOOL)isPaperChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangePolicyDetails;
}

- (BOOL)isPaperEnabledUsersGroupAdditionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails;
}

- (BOOL)isPaperEnabledUsersGroupRemovalDetails {
  return _tag == DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails;
}

- (BOOL)isPermanentDeleteChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails;
}

- (BOOL)isSharingChangeFolderJoinPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails;
}

- (BOOL)isSharingChangeLinkPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails;
}

- (BOOL)isSharingChangeMemberPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails;
}

- (BOOL)isShowcaseChangeDownloadPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails;
}

- (BOOL)isShowcaseChangeEnabledPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails;
}

- (BOOL)isShowcaseChangeExternalSharingPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails;
}

- (BOOL)isSmartSyncChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails;
}

- (BOOL)isSmartSyncNotOptOutDetails {
  return _tag == DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails;
}

- (BOOL)isSmartSyncOptOutDetails {
  return _tag == DBTEAMLOGEventDetailsSmartSyncOptOutDetails;
}

- (BOOL)isSsoChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangePolicyDetails;
}

- (BOOL)isTfaChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsTfaChangePolicyDetails;
}

- (BOOL)isTwoAccountChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails;
}

- (BOOL)isWebSessionsChangeFixedLengthPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails;
}

- (BOOL)isWebSessionsChangeIdleLengthPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails;
}

- (BOOL)isTeamMergeFromDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeFromDetails;
}

- (BOOL)isTeamMergeToDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeToDetails;
}

- (BOOL)isTeamProfileAddLogoDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileAddLogoDetails;
}

- (BOOL)isTeamProfileChangeDefaultLanguageDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails;
}

- (BOOL)isTeamProfileChangeLogoDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails;
}

- (BOOL)isTeamProfileChangeNameDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileChangeNameDetails;
}

- (BOOL)isTeamProfileRemoveLogoDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails;
}

- (BOOL)isTfaAddBackupPhoneDetails {
  return _tag == DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails;
}

- (BOOL)isTfaAddSecurityKeyDetails {
  return _tag == DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails;
}

- (BOOL)isTfaChangeBackupPhoneDetails {
  return _tag == DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails;
}

- (BOOL)isTfaChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsTfaChangeStatusDetails;
}

- (BOOL)isTfaRemoveBackupPhoneDetails {
  return _tag == DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails;
}

- (BOOL)isTfaRemoveSecurityKeyDetails {
  return _tag == DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails;
}

- (BOOL)isTfaResetDetails {
  return _tag == DBTEAMLOGEventDetailsTfaResetDetails;
}

- (BOOL)isMissingDetails {
  return _tag == DBTEAMLOGEventDetailsMissingDetails;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEventDetailsOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEventDetailsAppLinkTeamDetails:
    return @"DBTEAMLOGEventDetailsAppLinkTeamDetails";
  case DBTEAMLOGEventDetailsAppLinkUserDetails:
    return @"DBTEAMLOGEventDetailsAppLinkUserDetails";
  case DBTEAMLOGEventDetailsAppUnlinkTeamDetails:
    return @"DBTEAMLOGEventDetailsAppUnlinkTeamDetails";
  case DBTEAMLOGEventDetailsAppUnlinkUserDetails:
    return @"DBTEAMLOGEventDetailsAppUnlinkUserDetails";
  case DBTEAMLOGEventDetailsFileAddCommentDetails:
    return @"DBTEAMLOGEventDetailsFileAddCommentDetails";
  case DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails:
    return @"DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails";
  case DBTEAMLOGEventDetailsFileDeleteCommentDetails:
    return @"DBTEAMLOGEventDetailsFileDeleteCommentDetails";
  case DBTEAMLOGEventDetailsFileLikeCommentDetails:
    return @"DBTEAMLOGEventDetailsFileLikeCommentDetails";
  case DBTEAMLOGEventDetailsFileResolveCommentDetails:
    return @"DBTEAMLOGEventDetailsFileResolveCommentDetails";
  case DBTEAMLOGEventDetailsFileUnlikeCommentDetails:
    return @"DBTEAMLOGEventDetailsFileUnlikeCommentDetails";
  case DBTEAMLOGEventDetailsFileUnresolveCommentDetails:
    return @"DBTEAMLOGEventDetailsFileUnresolveCommentDetails";
  case DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails:
    return @"DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails";
  case DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails:
    return @"DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails";
  case DBTEAMLOGEventDetailsDeviceChangeIpWebDetails:
    return @"DBTEAMLOGEventDetailsDeviceChangeIpWebDetails";
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails:
    return @"DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails";
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails:
    return @"DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails";
  case DBTEAMLOGEventDetailsDeviceLinkFailDetails:
    return @"DBTEAMLOGEventDetailsDeviceLinkFailDetails";
  case DBTEAMLOGEventDetailsDeviceLinkSuccessDetails:
    return @"DBTEAMLOGEventDetailsDeviceLinkSuccessDetails";
  case DBTEAMLOGEventDetailsDeviceManagementDisabledDetails:
    return @"DBTEAMLOGEventDetailsDeviceManagementDisabledDetails";
  case DBTEAMLOGEventDetailsDeviceManagementEnabledDetails:
    return @"DBTEAMLOGEventDetailsDeviceManagementEnabledDetails";
  case DBTEAMLOGEventDetailsDeviceUnlinkDetails:
    return @"DBTEAMLOGEventDetailsDeviceUnlinkDetails";
  case DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails:
    return @"DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails";
  case DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails";
  case DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails";
  case DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails";
  case DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails";
  case DBTEAMLOGEventDetailsDisabledDomainInvitesDetails:
    return @"DBTEAMLOGEventDetailsDisabledDomainInvitesDetails";
  case DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails";
  case DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails";
  case DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails";
  case DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails";
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails";
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails";
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails:
    return @"DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails";
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails:
    return @"DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails";
  case DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails:
    return @"DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails";
  case DBTEAMLOGEventDetailsEnabledDomainInvitesDetails:
    return @"DBTEAMLOGEventDetailsEnabledDomainInvitesDetails";
  case DBTEAMLOGEventDetailsCreateFolderDetails:
    return @"DBTEAMLOGEventDetailsCreateFolderDetails";
  case DBTEAMLOGEventDetailsFileAddDetails:
    return @"DBTEAMLOGEventDetailsFileAddDetails";
  case DBTEAMLOGEventDetailsFileCopyDetails:
    return @"DBTEAMLOGEventDetailsFileCopyDetails";
  case DBTEAMLOGEventDetailsFileDeleteDetails:
    return @"DBTEAMLOGEventDetailsFileDeleteDetails";
  case DBTEAMLOGEventDetailsFileDownloadDetails:
    return @"DBTEAMLOGEventDetailsFileDownloadDetails";
  case DBTEAMLOGEventDetailsFileEditDetails:
    return @"DBTEAMLOGEventDetailsFileEditDetails";
  case DBTEAMLOGEventDetailsFileGetCopyReferenceDetails:
    return @"DBTEAMLOGEventDetailsFileGetCopyReferenceDetails";
  case DBTEAMLOGEventDetailsFileMoveDetails:
    return @"DBTEAMLOGEventDetailsFileMoveDetails";
  case DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails:
    return @"DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails";
  case DBTEAMLOGEventDetailsFilePreviewDetails:
    return @"DBTEAMLOGEventDetailsFilePreviewDetails";
  case DBTEAMLOGEventDetailsFileRenameDetails:
    return @"DBTEAMLOGEventDetailsFileRenameDetails";
  case DBTEAMLOGEventDetailsFileRestoreDetails:
    return @"DBTEAMLOGEventDetailsFileRestoreDetails";
  case DBTEAMLOGEventDetailsFileRevertDetails:
    return @"DBTEAMLOGEventDetailsFileRevertDetails";
  case DBTEAMLOGEventDetailsFileRollbackChangesDetails:
    return @"DBTEAMLOGEventDetailsFileRollbackChangesDetails";
  case DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails:
    return @"DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails";
  case DBTEAMLOGEventDetailsFileRequestChangeDetails:
    return @"DBTEAMLOGEventDetailsFileRequestChangeDetails";
  case DBTEAMLOGEventDetailsFileRequestCloseDetails:
    return @"DBTEAMLOGEventDetailsFileRequestCloseDetails";
  case DBTEAMLOGEventDetailsFileRequestCreateDetails:
    return @"DBTEAMLOGEventDetailsFileRequestCreateDetails";
  case DBTEAMLOGEventDetailsFileRequestReceiveFileDetails:
    return @"DBTEAMLOGEventDetailsFileRequestReceiveFileDetails";
  case DBTEAMLOGEventDetailsGroupAddExternalIdDetails:
    return @"DBTEAMLOGEventDetailsGroupAddExternalIdDetails";
  case DBTEAMLOGEventDetailsGroupAddMemberDetails:
    return @"DBTEAMLOGEventDetailsGroupAddMemberDetails";
  case DBTEAMLOGEventDetailsGroupChangeExternalIdDetails:
    return @"DBTEAMLOGEventDetailsGroupChangeExternalIdDetails";
  case DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails:
    return @"DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails";
  case DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails:
    return @"DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails";
  case DBTEAMLOGEventDetailsGroupCreateDetails:
    return @"DBTEAMLOGEventDetailsGroupCreateDetails";
  case DBTEAMLOGEventDetailsGroupDeleteDetails:
    return @"DBTEAMLOGEventDetailsGroupDeleteDetails";
  case DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails:
    return @"DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails";
  case DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails:
    return @"DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails";
  case DBTEAMLOGEventDetailsGroupMovedDetails:
    return @"DBTEAMLOGEventDetailsGroupMovedDetails";
  case DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails:
    return @"DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails";
  case DBTEAMLOGEventDetailsGroupRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsGroupRemoveMemberDetails";
  case DBTEAMLOGEventDetailsGroupRenameDetails:
    return @"DBTEAMLOGEventDetailsGroupRenameDetails";
  case DBTEAMLOGEventDetailsEmmErrorDetails:
    return @"DBTEAMLOGEventDetailsEmmErrorDetails";
  case DBTEAMLOGEventDetailsLoginFailDetails:
    return @"DBTEAMLOGEventDetailsLoginFailDetails";
  case DBTEAMLOGEventDetailsLoginSuccessDetails:
    return @"DBTEAMLOGEventDetailsLoginSuccessDetails";
  case DBTEAMLOGEventDetailsLogoutDetails:
    return @"DBTEAMLOGEventDetailsLogoutDetails";
  case DBTEAMLOGEventDetailsResellerSupportSessionEndDetails:
    return @"DBTEAMLOGEventDetailsResellerSupportSessionEndDetails";
  case DBTEAMLOGEventDetailsResellerSupportSessionStartDetails:
    return @"DBTEAMLOGEventDetailsResellerSupportSessionStartDetails";
  case DBTEAMLOGEventDetailsSignInAsSessionEndDetails:
    return @"DBTEAMLOGEventDetailsSignInAsSessionEndDetails";
  case DBTEAMLOGEventDetailsSignInAsSessionStartDetails:
    return @"DBTEAMLOGEventDetailsSignInAsSessionStartDetails";
  case DBTEAMLOGEventDetailsSsoErrorDetails:
    return @"DBTEAMLOGEventDetailsSsoErrorDetails";
  case DBTEAMLOGEventDetailsMemberAddNameDetails:
    return @"DBTEAMLOGEventDetailsMemberAddNameDetails";
  case DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails";
  case DBTEAMLOGEventDetailsMemberChangeEmailDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeEmailDetails";
  case DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails";
  case DBTEAMLOGEventDetailsMemberChangeNameDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeNameDetails";
  case DBTEAMLOGEventDetailsMemberChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeStatusDetails";
  case DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails:
    return @"DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails";
  case DBTEAMLOGEventDetailsMemberSuggestDetails:
    return @"DBTEAMLOGEventDetailsMemberSuggestDetails";
  case DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails:
    return @"DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails";
  case DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails";
  case DBTEAMLOGEventDetailsPaperContentAddMemberDetails:
    return @"DBTEAMLOGEventDetailsPaperContentAddMemberDetails";
  case DBTEAMLOGEventDetailsPaperContentAddToFolderDetails:
    return @"DBTEAMLOGEventDetailsPaperContentAddToFolderDetails";
  case DBTEAMLOGEventDetailsPaperContentArchiveDetails:
    return @"DBTEAMLOGEventDetailsPaperContentArchiveDetails";
  case DBTEAMLOGEventDetailsPaperContentCreateDetails:
    return @"DBTEAMLOGEventDetailsPaperContentCreateDetails";
  case DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails:
    return @"DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails";
  case DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails";
  case DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails";
  case DBTEAMLOGEventDetailsPaperContentRenameDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRenameDetails";
  case DBTEAMLOGEventDetailsPaperContentRestoreDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRestoreDetails";
  case DBTEAMLOGEventDetailsPaperDocAddCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocAddCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails:
    return @"DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails";
  case DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails";
  case DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails:
    return @"DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails";
  case DBTEAMLOGEventDetailsPaperDocDeletedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocDeletedDetails";
  case DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocDownloadDetails:
    return @"DBTEAMLOGEventDetailsPaperDocDownloadDetails";
  case DBTEAMLOGEventDetailsPaperDocEditDetails:
    return @"DBTEAMLOGEventDetailsPaperDocEditDetails";
  case DBTEAMLOGEventDetailsPaperDocEditCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocEditCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocFollowedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocFollowedDetails";
  case DBTEAMLOGEventDetailsPaperDocMentionDetails:
    return @"DBTEAMLOGEventDetailsPaperDocMentionDetails";
  case DBTEAMLOGEventDetailsPaperDocRequestAccessDetails:
    return @"DBTEAMLOGEventDetailsPaperDocRequestAccessDetails";
  case DBTEAMLOGEventDetailsPaperDocResolveCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocResolveCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocRevertDetails:
    return @"DBTEAMLOGEventDetailsPaperDocRevertDetails";
  case DBTEAMLOGEventDetailsPaperDocSlackShareDetails:
    return @"DBTEAMLOGEventDetailsPaperDocSlackShareDetails";
  case DBTEAMLOGEventDetailsPaperDocTeamInviteDetails:
    return @"DBTEAMLOGEventDetailsPaperDocTeamInviteDetails";
  case DBTEAMLOGEventDetailsPaperDocTrashedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocTrashedDetails";
  case DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocUntrashedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocUntrashedDetails";
  case DBTEAMLOGEventDetailsPaperDocViewDetails:
    return @"DBTEAMLOGEventDetailsPaperDocViewDetails";
  case DBTEAMLOGEventDetailsPaperExternalViewAllowDetails:
    return @"DBTEAMLOGEventDetailsPaperExternalViewAllowDetails";
  case DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails:
    return @"DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails";
  case DBTEAMLOGEventDetailsPaperExternalViewForbidDetails:
    return @"DBTEAMLOGEventDetailsPaperExternalViewForbidDetails";
  case DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails";
  case DBTEAMLOGEventDetailsPaperFolderDeletedDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderDeletedDetails";
  case DBTEAMLOGEventDetailsPaperFolderFollowedDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderFollowedDetails";
  case DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails";
  case DBTEAMLOGEventDetailsPasswordChangeDetails:
    return @"DBTEAMLOGEventDetailsPasswordChangeDetails";
  case DBTEAMLOGEventDetailsPasswordResetDetails:
    return @"DBTEAMLOGEventDetailsPasswordResetDetails";
  case DBTEAMLOGEventDetailsPasswordResetAllDetails:
    return @"DBTEAMLOGEventDetailsPasswordResetAllDetails";
  case DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails:
    return @"DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails";
  case DBTEAMLOGEventDetailsEmmCreateUsageReportDetails:
    return @"DBTEAMLOGEventDetailsEmmCreateUsageReportDetails";
  case DBTEAMLOGEventDetailsExportMembersReportDetails:
    return @"DBTEAMLOGEventDetailsExportMembersReportDetails";
  case DBTEAMLOGEventDetailsPaperAdminExportStartDetails:
    return @"DBTEAMLOGEventDetailsPaperAdminExportStartDetails";
  case DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails:
    return @"DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails";
  case DBTEAMLOGEventDetailsTeamActivityCreateReportDetails:
    return @"DBTEAMLOGEventDetailsTeamActivityCreateReportDetails";
  case DBTEAMLOGEventDetailsCollectionShareDetails:
    return @"DBTEAMLOGEventDetailsCollectionShareDetails";
  case DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails:
    return @"DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails";
  case DBTEAMLOGEventDetailsNoteAclLinkDetails:
    return @"DBTEAMLOGEventDetailsNoteAclLinkDetails";
  case DBTEAMLOGEventDetailsNoteAclTeamLinkDetails:
    return @"DBTEAMLOGEventDetailsNoteAclTeamLinkDetails";
  case DBTEAMLOGEventDetailsNoteSharedDetails:
    return @"DBTEAMLOGEventDetailsNoteSharedDetails";
  case DBTEAMLOGEventDetailsNoteShareReceiveDetails:
    return @"DBTEAMLOGEventDetailsNoteShareReceiveDetails";
  case DBTEAMLOGEventDetailsOpenNoteSharedDetails:
    return @"DBTEAMLOGEventDetailsOpenNoteSharedDetails";
  case DBTEAMLOGEventDetailsSfAddGroupDetails:
    return @"DBTEAMLOGEventDetailsSfAddGroupDetails";
  case DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails:
    return @"DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails";
  case DBTEAMLOGEventDetailsSfExternalInviteWarnDetails:
    return @"DBTEAMLOGEventDetailsSfExternalInviteWarnDetails";
  case DBTEAMLOGEventDetailsSfFbInviteDetails:
    return @"DBTEAMLOGEventDetailsSfFbInviteDetails";
  case DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails:
    return @"DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails";
  case DBTEAMLOGEventDetailsSfFbUninviteDetails:
    return @"DBTEAMLOGEventDetailsSfFbUninviteDetails";
  case DBTEAMLOGEventDetailsSfInviteGroupDetails:
    return @"DBTEAMLOGEventDetailsSfInviteGroupDetails";
  case DBTEAMLOGEventDetailsSfTeamGrantAccessDetails:
    return @"DBTEAMLOGEventDetailsSfTeamGrantAccessDetails";
  case DBTEAMLOGEventDetailsSfTeamInviteDetails:
    return @"DBTEAMLOGEventDetailsSfTeamInviteDetails";
  case DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails:
    return @"DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails";
  case DBTEAMLOGEventDetailsSfTeamJoinDetails:
    return @"DBTEAMLOGEventDetailsSfTeamJoinDetails";
  case DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails:
    return @"DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails";
  case DBTEAMLOGEventDetailsSfTeamUninviteDetails:
    return @"DBTEAMLOGEventDetailsSfTeamUninviteDetails";
  case DBTEAMLOGEventDetailsSharedContentAddInviteesDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddInviteesDetails";
  case DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails";
  case DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails";
  case DBTEAMLOGEventDetailsSharedContentAddMemberDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddMemberDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails";
  case DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails:
    return @"DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails";
  case DBTEAMLOGEventDetailsSharedContentCopyDetails:
    return @"DBTEAMLOGEventDetailsSharedContentCopyDetails";
  case DBTEAMLOGEventDetailsSharedContentDownloadDetails:
    return @"DBTEAMLOGEventDetailsSharedContentDownloadDetails";
  case DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails";
  case DBTEAMLOGEventDetailsSharedContentRequestAccessDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRequestAccessDetails";
  case DBTEAMLOGEventDetailsSharedContentUnshareDetails:
    return @"DBTEAMLOGEventDetailsSharedContentUnshareDetails";
  case DBTEAMLOGEventDetailsSharedContentViewDetails:
    return @"DBTEAMLOGEventDetailsSharedContentViewDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderCreateDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderCreateDetails";
  case DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails";
  case DBTEAMLOGEventDetailsSharedFolderMountDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderMountDetails";
  case DBTEAMLOGEventDetailsSharedFolderNestDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderNestDetails";
  case DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails";
  case DBTEAMLOGEventDetailsSharedFolderUnmountDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderUnmountDetails";
  case DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails";
  case DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails";
  case DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails";
  case DBTEAMLOGEventDetailsSharedLinkCopyDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkCopyDetails";
  case DBTEAMLOGEventDetailsSharedLinkCreateDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkCreateDetails";
  case DBTEAMLOGEventDetailsSharedLinkDisableDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkDisableDetails";
  case DBTEAMLOGEventDetailsSharedLinkDownloadDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkDownloadDetails";
  case DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails";
  case DBTEAMLOGEventDetailsSharedLinkShareDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkShareDetails";
  case DBTEAMLOGEventDetailsSharedLinkViewDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkViewDetails";
  case DBTEAMLOGEventDetailsSharedNoteOpenedDetails:
    return @"DBTEAMLOGEventDetailsSharedNoteOpenedDetails";
  case DBTEAMLOGEventDetailsShmodelGroupShareDetails:
    return @"DBTEAMLOGEventDetailsShmodelGroupShareDetails";
  case DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails";
  case DBTEAMLOGEventDetailsShowcaseAddMemberDetails:
    return @"DBTEAMLOGEventDetailsShowcaseAddMemberDetails";
  case DBTEAMLOGEventDetailsShowcaseArchivedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseArchivedDetails";
  case DBTEAMLOGEventDetailsShowcaseCreatedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseCreatedDetails";
  case DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails:
    return @"DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails";
  case DBTEAMLOGEventDetailsShowcaseEditedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseEditedDetails";
  case DBTEAMLOGEventDetailsShowcaseEditCommentDetails:
    return @"DBTEAMLOGEventDetailsShowcaseEditCommentDetails";
  case DBTEAMLOGEventDetailsShowcaseFileAddedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseFileAddedDetails";
  case DBTEAMLOGEventDetailsShowcaseFileDownloadDetails:
    return @"DBTEAMLOGEventDetailsShowcaseFileDownloadDetails";
  case DBTEAMLOGEventDetailsShowcaseFileRemovedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseFileRemovedDetails";
  case DBTEAMLOGEventDetailsShowcaseFileViewDetails:
    return @"DBTEAMLOGEventDetailsShowcaseFileViewDetails";
  case DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails:
    return @"DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails";
  case DBTEAMLOGEventDetailsShowcasePostCommentDetails:
    return @"DBTEAMLOGEventDetailsShowcasePostCommentDetails";
  case DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails";
  case DBTEAMLOGEventDetailsShowcaseRenamedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseRenamedDetails";
  case DBTEAMLOGEventDetailsShowcaseRequestAccessDetails:
    return @"DBTEAMLOGEventDetailsShowcaseRequestAccessDetails";
  case DBTEAMLOGEventDetailsShowcaseResolveCommentDetails:
    return @"DBTEAMLOGEventDetailsShowcaseResolveCommentDetails";
  case DBTEAMLOGEventDetailsShowcaseRestoredDetails:
    return @"DBTEAMLOGEventDetailsShowcaseRestoredDetails";
  case DBTEAMLOGEventDetailsShowcaseTrashedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseTrashedDetails";
  case DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails";
  case DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails:
    return @"DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails";
  case DBTEAMLOGEventDetailsShowcaseUntrashedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseUntrashedDetails";
  case DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails";
  case DBTEAMLOGEventDetailsShowcaseViewDetails:
    return @"DBTEAMLOGEventDetailsShowcaseViewDetails";
  case DBTEAMLOGEventDetailsSsoAddCertDetails:
    return @"DBTEAMLOGEventDetailsSsoAddCertDetails";
  case DBTEAMLOGEventDetailsSsoAddLoginUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoAddLoginUrlDetails";
  case DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails";
  case DBTEAMLOGEventDetailsSsoChangeCertDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeCertDetails";
  case DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails";
  case DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails";
  case DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails";
  case DBTEAMLOGEventDetailsSsoRemoveCertDetails:
    return @"DBTEAMLOGEventDetailsSsoRemoveCertDetails";
  case DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails";
  case DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails";
  case DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails";
  case DBTEAMLOGEventDetailsTeamFolderCreateDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderCreateDetails";
  case DBTEAMLOGEventDetailsTeamFolderDowngradeDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderDowngradeDetails";
  case DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails";
  case DBTEAMLOGEventDetailsTeamFolderRenameDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderRenameDetails";
  case DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails:
    return @"DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails";
  case DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails";
  case DBTEAMLOGEventDetailsAllowDownloadDisabledDetails:
    return @"DBTEAMLOGEventDetailsAllowDownloadDisabledDetails";
  case DBTEAMLOGEventDetailsAllowDownloadEnabledDetails:
    return @"DBTEAMLOGEventDetailsAllowDownloadEnabledDetails";
  case DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails";
  case DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails:
    return @"DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails";
  case DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails:
    return @"DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails";
  case DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails:
    return @"DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails";
  case DBTEAMLOGEventDetailsEmmAddExceptionDetails:
    return @"DBTEAMLOGEventDetailsEmmAddExceptionDetails";
  case DBTEAMLOGEventDetailsEmmChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsEmmChangePolicyDetails";
  case DBTEAMLOGEventDetailsEmmRemoveExceptionDetails:
    return @"DBTEAMLOGEventDetailsEmmRemoveExceptionDetails";
  case DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails";
  case DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails";
  case DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails";
  case DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails:
    return @"DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails";
  case DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails:
    return @"DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails";
  case DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails";
  case DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails";
  case DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails";
  case DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails";
  case DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails";
  case DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangePolicyDetails";
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails:
    return @"DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails";
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails:
    return @"DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails";
  case DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails";
  case DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails:
    return @"DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails";
  case DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails:
    return @"DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails";
  case DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails:
    return @"DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails";
  case DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails";
  case DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails:
    return @"DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails";
  case DBTEAMLOGEventDetailsSmartSyncOptOutDetails:
    return @"DBTEAMLOGEventDetailsSmartSyncOptOutDetails";
  case DBTEAMLOGEventDetailsSsoChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsSsoChangePolicyDetails";
  case DBTEAMLOGEventDetailsTfaChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsTfaChangePolicyDetails";
  case DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails";
  case DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails:
    return @"DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails";
  case DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails:
    return @"DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails";
  case DBTEAMLOGEventDetailsTeamMergeFromDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeFromDetails";
  case DBTEAMLOGEventDetailsTeamMergeToDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeToDetails";
  case DBTEAMLOGEventDetailsTeamProfileAddLogoDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileAddLogoDetails";
  case DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails";
  case DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails";
  case DBTEAMLOGEventDetailsTeamProfileChangeNameDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileChangeNameDetails";
  case DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails";
  case DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails:
    return @"DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails";
  case DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails:
    return @"DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails";
  case DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails:
    return @"DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails";
  case DBTEAMLOGEventDetailsTfaChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsTfaChangeStatusDetails";
  case DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails:
    return @"DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails";
  case DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails:
    return @"DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails";
  case DBTEAMLOGEventDetailsTfaResetDetails:
    return @"DBTEAMLOGEventDetailsTfaResetDetails";
  case DBTEAMLOGEventDetailsMissingDetails:
    return @"DBTEAMLOGEventDetailsMissingDetails";
  case DBTEAMLOGEventDetailsOther:
    return @"DBTEAMLOGEventDetailsOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEventDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEventDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEventDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEventDetailsAppLinkTeamDetails:
    result = prime * result + [self.appLinkTeamDetails hash];
  case DBTEAMLOGEventDetailsAppLinkUserDetails:
    result = prime * result + [self.appLinkUserDetails hash];
  case DBTEAMLOGEventDetailsAppUnlinkTeamDetails:
    result = prime * result + [self.appUnlinkTeamDetails hash];
  case DBTEAMLOGEventDetailsAppUnlinkUserDetails:
    result = prime * result + [self.appUnlinkUserDetails hash];
  case DBTEAMLOGEventDetailsFileAddCommentDetails:
    result = prime * result + [self.fileAddCommentDetails hash];
  case DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails:
    result = prime * result + [self.fileChangeCommentSubscriptionDetails hash];
  case DBTEAMLOGEventDetailsFileDeleteCommentDetails:
    result = prime * result + [self.fileDeleteCommentDetails hash];
  case DBTEAMLOGEventDetailsFileLikeCommentDetails:
    result = prime * result + [self.fileLikeCommentDetails hash];
  case DBTEAMLOGEventDetailsFileResolveCommentDetails:
    result = prime * result + [self.fileResolveCommentDetails hash];
  case DBTEAMLOGEventDetailsFileUnlikeCommentDetails:
    result = prime * result + [self.fileUnlikeCommentDetails hash];
  case DBTEAMLOGEventDetailsFileUnresolveCommentDetails:
    result = prime * result + [self.fileUnresolveCommentDetails hash];
  case DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails:
    result = prime * result + [self.deviceChangeIpDesktopDetails hash];
  case DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails:
    result = prime * result + [self.deviceChangeIpMobileDetails hash];
  case DBTEAMLOGEventDetailsDeviceChangeIpWebDetails:
    result = prime * result + [self.deviceChangeIpWebDetails hash];
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails:
    result = prime * result + [self.deviceDeleteOnUnlinkFailDetails hash];
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails:
    result = prime * result + [self.deviceDeleteOnUnlinkSuccessDetails hash];
  case DBTEAMLOGEventDetailsDeviceLinkFailDetails:
    result = prime * result + [self.deviceLinkFailDetails hash];
  case DBTEAMLOGEventDetailsDeviceLinkSuccessDetails:
    result = prime * result + [self.deviceLinkSuccessDetails hash];
  case DBTEAMLOGEventDetailsDeviceManagementDisabledDetails:
    result = prime * result + [self.deviceManagementDisabledDetails hash];
  case DBTEAMLOGEventDetailsDeviceManagementEnabledDetails:
    result = prime * result + [self.deviceManagementEnabledDetails hash];
  case DBTEAMLOGEventDetailsDeviceUnlinkDetails:
    result = prime * result + [self.deviceUnlinkDetails hash];
  case DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails:
    result = prime * result + [self.emmRefreshAuthTokenDetails hash];
  case DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails:
    result = prime * result + [self.accountCaptureChangeAvailabilityDetails hash];
  case DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails:
    result = prime * result + [self.accountCaptureMigrateAccountDetails hash];
  case DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails:
    result = prime * result + [self.accountCaptureNotificationEmailsSentDetails hash];
  case DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails:
    result = prime * result + [self.accountCaptureRelinquishAccountDetails hash];
  case DBTEAMLOGEventDetailsDisabledDomainInvitesDetails:
    result = prime * result + [self.disabledDomainInvitesDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails:
    result = prime * result + [self.domainInvitesApproveRequestToJoinTeamDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails:
    result = prime * result + [self.domainInvitesDeclineRequestToJoinTeamDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails:
    result = prime * result + [self.domainInvitesEmailExistingUsersDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails:
    result = prime * result + [self.domainInvitesRequestToJoinTeamDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails:
    result = prime * result + [self.domainInvitesSetInviteNewUserPrefToNoDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails:
    result = prime * result + [self.domainInvitesSetInviteNewUserPrefToYesDetails hash];
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails:
    result = prime * result + [self.domainVerificationAddDomainFailDetails hash];
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails:
    result = prime * result + [self.domainVerificationAddDomainSuccessDetails hash];
  case DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails:
    result = prime * result + [self.domainVerificationRemoveDomainDetails hash];
  case DBTEAMLOGEventDetailsEnabledDomainInvitesDetails:
    result = prime * result + [self.enabledDomainInvitesDetails hash];
  case DBTEAMLOGEventDetailsCreateFolderDetails:
    result = prime * result + [self.createFolderDetails hash];
  case DBTEAMLOGEventDetailsFileAddDetails:
    result = prime * result + [self.fileAddDetails hash];
  case DBTEAMLOGEventDetailsFileCopyDetails:
    result = prime * result + [self.fileCopyDetails hash];
  case DBTEAMLOGEventDetailsFileDeleteDetails:
    result = prime * result + [self.fileDeleteDetails hash];
  case DBTEAMLOGEventDetailsFileDownloadDetails:
    result = prime * result + [self.fileDownloadDetails hash];
  case DBTEAMLOGEventDetailsFileEditDetails:
    result = prime * result + [self.fileEditDetails hash];
  case DBTEAMLOGEventDetailsFileGetCopyReferenceDetails:
    result = prime * result + [self.fileGetCopyReferenceDetails hash];
  case DBTEAMLOGEventDetailsFileMoveDetails:
    result = prime * result + [self.fileMoveDetails hash];
  case DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails:
    result = prime * result + [self.filePermanentlyDeleteDetails hash];
  case DBTEAMLOGEventDetailsFilePreviewDetails:
    result = prime * result + [self.filePreviewDetails hash];
  case DBTEAMLOGEventDetailsFileRenameDetails:
    result = prime * result + [self.fileRenameDetails hash];
  case DBTEAMLOGEventDetailsFileRestoreDetails:
    result = prime * result + [self.fileRestoreDetails hash];
  case DBTEAMLOGEventDetailsFileRevertDetails:
    result = prime * result + [self.fileRevertDetails hash];
  case DBTEAMLOGEventDetailsFileRollbackChangesDetails:
    result = prime * result + [self.fileRollbackChangesDetails hash];
  case DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails:
    result = prime * result + [self.fileSaveCopyReferenceDetails hash];
  case DBTEAMLOGEventDetailsFileRequestChangeDetails:
    result = prime * result + [self.fileRequestChangeDetails hash];
  case DBTEAMLOGEventDetailsFileRequestCloseDetails:
    result = prime * result + [self.fileRequestCloseDetails hash];
  case DBTEAMLOGEventDetailsFileRequestCreateDetails:
    result = prime * result + [self.fileRequestCreateDetails hash];
  case DBTEAMLOGEventDetailsFileRequestReceiveFileDetails:
    result = prime * result + [self.fileRequestReceiveFileDetails hash];
  case DBTEAMLOGEventDetailsGroupAddExternalIdDetails:
    result = prime * result + [self.groupAddExternalIdDetails hash];
  case DBTEAMLOGEventDetailsGroupAddMemberDetails:
    result = prime * result + [self.groupAddMemberDetails hash];
  case DBTEAMLOGEventDetailsGroupChangeExternalIdDetails:
    result = prime * result + [self.groupChangeExternalIdDetails hash];
  case DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails:
    result = prime * result + [self.groupChangeManagementTypeDetails hash];
  case DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails:
    result = prime * result + [self.groupChangeMemberRoleDetails hash];
  case DBTEAMLOGEventDetailsGroupCreateDetails:
    result = prime * result + [self.groupCreateDetails hash];
  case DBTEAMLOGEventDetailsGroupDeleteDetails:
    result = prime * result + [self.groupDeleteDetails hash];
  case DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails:
    result = prime * result + [self.groupDescriptionUpdatedDetails hash];
  case DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails:
    result = prime * result + [self.groupJoinPolicyUpdatedDetails hash];
  case DBTEAMLOGEventDetailsGroupMovedDetails:
    result = prime * result + [self.groupMovedDetails hash];
  case DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails:
    result = prime * result + [self.groupRemoveExternalIdDetails hash];
  case DBTEAMLOGEventDetailsGroupRemoveMemberDetails:
    result = prime * result + [self.groupRemoveMemberDetails hash];
  case DBTEAMLOGEventDetailsGroupRenameDetails:
    result = prime * result + [self.groupRenameDetails hash];
  case DBTEAMLOGEventDetailsEmmErrorDetails:
    result = prime * result + [self.emmErrorDetails hash];
  case DBTEAMLOGEventDetailsLoginFailDetails:
    result = prime * result + [self.loginFailDetails hash];
  case DBTEAMLOGEventDetailsLoginSuccessDetails:
    result = prime * result + [self.loginSuccessDetails hash];
  case DBTEAMLOGEventDetailsLogoutDetails:
    result = prime * result + [self.logoutDetails hash];
  case DBTEAMLOGEventDetailsResellerSupportSessionEndDetails:
    result = prime * result + [self.resellerSupportSessionEndDetails hash];
  case DBTEAMLOGEventDetailsResellerSupportSessionStartDetails:
    result = prime * result + [self.resellerSupportSessionStartDetails hash];
  case DBTEAMLOGEventDetailsSignInAsSessionEndDetails:
    result = prime * result + [self.signInAsSessionEndDetails hash];
  case DBTEAMLOGEventDetailsSignInAsSessionStartDetails:
    result = prime * result + [self.signInAsSessionStartDetails hash];
  case DBTEAMLOGEventDetailsSsoErrorDetails:
    result = prime * result + [self.ssoErrorDetails hash];
  case DBTEAMLOGEventDetailsMemberAddNameDetails:
    result = prime * result + [self.memberAddNameDetails hash];
  case DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails:
    result = prime * result + [self.memberChangeAdminRoleDetails hash];
  case DBTEAMLOGEventDetailsMemberChangeEmailDetails:
    result = prime * result + [self.memberChangeEmailDetails hash];
  case DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails:
    result = prime * result + [self.memberChangeMembershipTypeDetails hash];
  case DBTEAMLOGEventDetailsMemberChangeNameDetails:
    result = prime * result + [self.memberChangeNameDetails hash];
  case DBTEAMLOGEventDetailsMemberChangeStatusDetails:
    result = prime * result + [self.memberChangeStatusDetails hash];
  case DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails:
    result = prime * result + [self.memberPermanentlyDeleteAccountContentsDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails:
    result = prime * result + [self.memberSpaceLimitsAddCustomQuotaDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails:
    result = prime * result + [self.memberSpaceLimitsChangeCustomQuotaDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails:
    result = prime * result + [self.memberSpaceLimitsChangeStatusDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails:
    result = prime * result + [self.memberSpaceLimitsRemoveCustomQuotaDetails hash];
  case DBTEAMLOGEventDetailsMemberSuggestDetails:
    result = prime * result + [self.memberSuggestDetails hash];
  case DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails:
    result = prime * result + [self.memberTransferAccountContentsDetails hash];
  case DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails:
    result = prime * result + [self.secondaryMailsPolicyChangedDetails hash];
  case DBTEAMLOGEventDetailsPaperContentAddMemberDetails:
    result = prime * result + [self.paperContentAddMemberDetails hash];
  case DBTEAMLOGEventDetailsPaperContentAddToFolderDetails:
    result = prime * result + [self.paperContentAddToFolderDetails hash];
  case DBTEAMLOGEventDetailsPaperContentArchiveDetails:
    result = prime * result + [self.paperContentArchiveDetails hash];
  case DBTEAMLOGEventDetailsPaperContentCreateDetails:
    result = prime * result + [self.paperContentCreateDetails hash];
  case DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails:
    result = prime * result + [self.paperContentPermanentlyDeleteDetails hash];
  case DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails:
    result = prime * result + [self.paperContentRemoveFromFolderDetails hash];
  case DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails:
    result = prime * result + [self.paperContentRemoveMemberDetails hash];
  case DBTEAMLOGEventDetailsPaperContentRenameDetails:
    result = prime * result + [self.paperContentRenameDetails hash];
  case DBTEAMLOGEventDetailsPaperContentRestoreDetails:
    result = prime * result + [self.paperContentRestoreDetails hash];
  case DBTEAMLOGEventDetailsPaperDocAddCommentDetails:
    result = prime * result + [self.paperDocAddCommentDetails hash];
  case DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails:
    result = prime * result + [self.paperDocChangeMemberRoleDetails hash];
  case DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails:
    result = prime * result + [self.paperDocChangeSharingPolicyDetails hash];
  case DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails:
    result = prime * result + [self.paperDocChangeSubscriptionDetails hash];
  case DBTEAMLOGEventDetailsPaperDocDeletedDetails:
    result = prime * result + [self.paperDocDeletedDetails hash];
  case DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails:
    result = prime * result + [self.paperDocDeleteCommentDetails hash];
  case DBTEAMLOGEventDetailsPaperDocDownloadDetails:
    result = prime * result + [self.paperDocDownloadDetails hash];
  case DBTEAMLOGEventDetailsPaperDocEditDetails:
    result = prime * result + [self.paperDocEditDetails hash];
  case DBTEAMLOGEventDetailsPaperDocEditCommentDetails:
    result = prime * result + [self.paperDocEditCommentDetails hash];
  case DBTEAMLOGEventDetailsPaperDocFollowedDetails:
    result = prime * result + [self.paperDocFollowedDetails hash];
  case DBTEAMLOGEventDetailsPaperDocMentionDetails:
    result = prime * result + [self.paperDocMentionDetails hash];
  case DBTEAMLOGEventDetailsPaperDocRequestAccessDetails:
    result = prime * result + [self.paperDocRequestAccessDetails hash];
  case DBTEAMLOGEventDetailsPaperDocResolveCommentDetails:
    result = prime * result + [self.paperDocResolveCommentDetails hash];
  case DBTEAMLOGEventDetailsPaperDocRevertDetails:
    result = prime * result + [self.paperDocRevertDetails hash];
  case DBTEAMLOGEventDetailsPaperDocSlackShareDetails:
    result = prime * result + [self.paperDocSlackShareDetails hash];
  case DBTEAMLOGEventDetailsPaperDocTeamInviteDetails:
    result = prime * result + [self.paperDocTeamInviteDetails hash];
  case DBTEAMLOGEventDetailsPaperDocTrashedDetails:
    result = prime * result + [self.paperDocTrashedDetails hash];
  case DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails:
    result = prime * result + [self.paperDocUnresolveCommentDetails hash];
  case DBTEAMLOGEventDetailsPaperDocUntrashedDetails:
    result = prime * result + [self.paperDocUntrashedDetails hash];
  case DBTEAMLOGEventDetailsPaperDocViewDetails:
    result = prime * result + [self.paperDocViewDetails hash];
  case DBTEAMLOGEventDetailsPaperExternalViewAllowDetails:
    result = prime * result + [self.paperExternalViewAllowDetails hash];
  case DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails:
    result = prime * result + [self.paperExternalViewDefaultTeamDetails hash];
  case DBTEAMLOGEventDetailsPaperExternalViewForbidDetails:
    result = prime * result + [self.paperExternalViewForbidDetails hash];
  case DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails:
    result = prime * result + [self.paperFolderChangeSubscriptionDetails hash];
  case DBTEAMLOGEventDetailsPaperFolderDeletedDetails:
    result = prime * result + [self.paperFolderDeletedDetails hash];
  case DBTEAMLOGEventDetailsPaperFolderFollowedDetails:
    result = prime * result + [self.paperFolderFollowedDetails hash];
  case DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails:
    result = prime * result + [self.paperFolderTeamInviteDetails hash];
  case DBTEAMLOGEventDetailsPasswordChangeDetails:
    result = prime * result + [self.passwordChangeDetails hash];
  case DBTEAMLOGEventDetailsPasswordResetDetails:
    result = prime * result + [self.passwordResetDetails hash];
  case DBTEAMLOGEventDetailsPasswordResetAllDetails:
    result = prime * result + [self.passwordResetAllDetails hash];
  case DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails:
    result = prime * result + [self.emmCreateExceptionsReportDetails hash];
  case DBTEAMLOGEventDetailsEmmCreateUsageReportDetails:
    result = prime * result + [self.emmCreateUsageReportDetails hash];
  case DBTEAMLOGEventDetailsExportMembersReportDetails:
    result = prime * result + [self.exportMembersReportDetails hash];
  case DBTEAMLOGEventDetailsPaperAdminExportStartDetails:
    result = prime * result + [self.paperAdminExportStartDetails hash];
  case DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails:
    result = prime * result + [self.smartSyncCreateAdminPrivilegeReportDetails hash];
  case DBTEAMLOGEventDetailsTeamActivityCreateReportDetails:
    result = prime * result + [self.teamActivityCreateReportDetails hash];
  case DBTEAMLOGEventDetailsCollectionShareDetails:
    result = prime * result + [self.collectionShareDetails hash];
  case DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails:
    result = prime * result + [self.noteAclInviteOnlyDetails hash];
  case DBTEAMLOGEventDetailsNoteAclLinkDetails:
    result = prime * result + [self.noteAclLinkDetails hash];
  case DBTEAMLOGEventDetailsNoteAclTeamLinkDetails:
    result = prime * result + [self.noteAclTeamLinkDetails hash];
  case DBTEAMLOGEventDetailsNoteSharedDetails:
    result = prime * result + [self.noteSharedDetails hash];
  case DBTEAMLOGEventDetailsNoteShareReceiveDetails:
    result = prime * result + [self.noteShareReceiveDetails hash];
  case DBTEAMLOGEventDetailsOpenNoteSharedDetails:
    result = prime * result + [self.openNoteSharedDetails hash];
  case DBTEAMLOGEventDetailsSfAddGroupDetails:
    result = prime * result + [self.sfAddGroupDetails hash];
  case DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails:
    result = prime * result + [self.sfAllowNonMembersToViewSharedLinksDetails hash];
  case DBTEAMLOGEventDetailsSfExternalInviteWarnDetails:
    result = prime * result + [self.sfExternalInviteWarnDetails hash];
  case DBTEAMLOGEventDetailsSfFbInviteDetails:
    result = prime * result + [self.sfFbInviteDetails hash];
  case DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails:
    result = prime * result + [self.sfFbInviteChangeRoleDetails hash];
  case DBTEAMLOGEventDetailsSfFbUninviteDetails:
    result = prime * result + [self.sfFbUninviteDetails hash];
  case DBTEAMLOGEventDetailsSfInviteGroupDetails:
    result = prime * result + [self.sfInviteGroupDetails hash];
  case DBTEAMLOGEventDetailsSfTeamGrantAccessDetails:
    result = prime * result + [self.sfTeamGrantAccessDetails hash];
  case DBTEAMLOGEventDetailsSfTeamInviteDetails:
    result = prime * result + [self.sfTeamInviteDetails hash];
  case DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails:
    result = prime * result + [self.sfTeamInviteChangeRoleDetails hash];
  case DBTEAMLOGEventDetailsSfTeamJoinDetails:
    result = prime * result + [self.sfTeamJoinDetails hash];
  case DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails:
    result = prime * result + [self.sfTeamJoinFromOobLinkDetails hash];
  case DBTEAMLOGEventDetailsSfTeamUninviteDetails:
    result = prime * result + [self.sfTeamUninviteDetails hash];
  case DBTEAMLOGEventDetailsSharedContentAddInviteesDetails:
    result = prime * result + [self.sharedContentAddInviteesDetails hash];
  case DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails:
    result = prime * result + [self.sharedContentAddLinkExpiryDetails hash];
  case DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails:
    result = prime * result + [self.sharedContentAddLinkPasswordDetails hash];
  case DBTEAMLOGEventDetailsSharedContentAddMemberDetails:
    result = prime * result + [self.sharedContentAddMemberDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails:
    result = prime * result + [self.sharedContentChangeDownloadsPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails:
    result = prime * result + [self.sharedContentChangeInviteeRoleDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails:
    result = prime * result + [self.sharedContentChangeLinkAudienceDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails:
    result = prime * result + [self.sharedContentChangeLinkExpiryDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails:
    result = prime * result + [self.sharedContentChangeLinkPasswordDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails:
    result = prime * result + [self.sharedContentChangeMemberRoleDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails:
    result = prime * result + [self.sharedContentChangeViewerInfoPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails:
    result = prime * result + [self.sharedContentClaimInvitationDetails hash];
  case DBTEAMLOGEventDetailsSharedContentCopyDetails:
    result = prime * result + [self.sharedContentCopyDetails hash];
  case DBTEAMLOGEventDetailsSharedContentDownloadDetails:
    result = prime * result + [self.sharedContentDownloadDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails:
    result = prime * result + [self.sharedContentRelinquishMembershipDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails:
    result = prime * result + [self.sharedContentRemoveInviteesDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails:
    result = prime * result + [self.sharedContentRemoveLinkExpiryDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails:
    result = prime * result + [self.sharedContentRemoveLinkPasswordDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails:
    result = prime * result + [self.sharedContentRemoveMemberDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRequestAccessDetails:
    result = prime * result + [self.sharedContentRequestAccessDetails hash];
  case DBTEAMLOGEventDetailsSharedContentUnshareDetails:
    result = prime * result + [self.sharedContentUnshareDetails hash];
  case DBTEAMLOGEventDetailsSharedContentViewDetails:
    result = prime * result + [self.sharedContentViewDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails:
    result = prime * result + [self.sharedFolderChangeLinkPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails:
    result = prime * result + [self.sharedFolderChangeMembersInheritancePolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails:
    result = prime * result + [self.sharedFolderChangeMembersManagementPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails:
    result = prime * result + [self.sharedFolderChangeMembersPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderCreateDetails:
    result = prime * result + [self.sharedFolderCreateDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails:
    result = prime * result + [self.sharedFolderDeclineInvitationDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderMountDetails:
    result = prime * result + [self.sharedFolderMountDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderNestDetails:
    result = prime * result + [self.sharedFolderNestDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails:
    result = prime * result + [self.sharedFolderTransferOwnershipDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderUnmountDetails:
    result = prime * result + [self.sharedFolderUnmountDetails hash];
  case DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails:
    result = prime * result + [self.sharedLinkAddExpiryDetails hash];
  case DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails:
    result = prime * result + [self.sharedLinkChangeExpiryDetails hash];
  case DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails:
    result = prime * result + [self.sharedLinkChangeVisibilityDetails hash];
  case DBTEAMLOGEventDetailsSharedLinkCopyDetails:
    result = prime * result + [self.sharedLinkCopyDetails hash];
  case DBTEAMLOGEventDetailsSharedLinkCreateDetails:
    result = prime * result + [self.sharedLinkCreateDetails hash];
  case DBTEAMLOGEventDetailsSharedLinkDisableDetails:
    result = prime * result + [self.sharedLinkDisableDetails hash];
  case DBTEAMLOGEventDetailsSharedLinkDownloadDetails:
    result = prime * result + [self.sharedLinkDownloadDetails hash];
  case DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails:
    result = prime * result + [self.sharedLinkRemoveExpiryDetails hash];
  case DBTEAMLOGEventDetailsSharedLinkShareDetails:
    result = prime * result + [self.sharedLinkShareDetails hash];
  case DBTEAMLOGEventDetailsSharedLinkViewDetails:
    result = prime * result + [self.sharedLinkViewDetails hash];
  case DBTEAMLOGEventDetailsSharedNoteOpenedDetails:
    result = prime * result + [self.sharedNoteOpenedDetails hash];
  case DBTEAMLOGEventDetailsShmodelGroupShareDetails:
    result = prime * result + [self.shmodelGroupShareDetails hash];
  case DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails:
    result = prime * result + [self.showcaseAccessGrantedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseAddMemberDetails:
    result = prime * result + [self.showcaseAddMemberDetails hash];
  case DBTEAMLOGEventDetailsShowcaseArchivedDetails:
    result = prime * result + [self.showcaseArchivedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseCreatedDetails:
    result = prime * result + [self.showcaseCreatedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails:
    result = prime * result + [self.showcaseDeleteCommentDetails hash];
  case DBTEAMLOGEventDetailsShowcaseEditedDetails:
    result = prime * result + [self.showcaseEditedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseEditCommentDetails:
    result = prime * result + [self.showcaseEditCommentDetails hash];
  case DBTEAMLOGEventDetailsShowcaseFileAddedDetails:
    result = prime * result + [self.showcaseFileAddedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseFileDownloadDetails:
    result = prime * result + [self.showcaseFileDownloadDetails hash];
  case DBTEAMLOGEventDetailsShowcaseFileRemovedDetails:
    result = prime * result + [self.showcaseFileRemovedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseFileViewDetails:
    result = prime * result + [self.showcaseFileViewDetails hash];
  case DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails:
    result = prime * result + [self.showcasePermanentlyDeletedDetails hash];
  case DBTEAMLOGEventDetailsShowcasePostCommentDetails:
    result = prime * result + [self.showcasePostCommentDetails hash];
  case DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails:
    result = prime * result + [self.showcaseRemoveMemberDetails hash];
  case DBTEAMLOGEventDetailsShowcaseRenamedDetails:
    result = prime * result + [self.showcaseRenamedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseRequestAccessDetails:
    result = prime * result + [self.showcaseRequestAccessDetails hash];
  case DBTEAMLOGEventDetailsShowcaseResolveCommentDetails:
    result = prime * result + [self.showcaseResolveCommentDetails hash];
  case DBTEAMLOGEventDetailsShowcaseRestoredDetails:
    result = prime * result + [self.showcaseRestoredDetails hash];
  case DBTEAMLOGEventDetailsShowcaseTrashedDetails:
    result = prime * result + [self.showcaseTrashedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails:
    result = prime * result + [self.showcaseTrashedDeprecatedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails:
    result = prime * result + [self.showcaseUnresolveCommentDetails hash];
  case DBTEAMLOGEventDetailsShowcaseUntrashedDetails:
    result = prime * result + [self.showcaseUntrashedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails:
    result = prime * result + [self.showcaseUntrashedDeprecatedDetails hash];
  case DBTEAMLOGEventDetailsShowcaseViewDetails:
    result = prime * result + [self.showcaseViewDetails hash];
  case DBTEAMLOGEventDetailsSsoAddCertDetails:
    result = prime * result + [self.ssoAddCertDetails hash];
  case DBTEAMLOGEventDetailsSsoAddLoginUrlDetails:
    result = prime * result + [self.ssoAddLoginUrlDetails hash];
  case DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails:
    result = prime * result + [self.ssoAddLogoutUrlDetails hash];
  case DBTEAMLOGEventDetailsSsoChangeCertDetails:
    result = prime * result + [self.ssoChangeCertDetails hash];
  case DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails:
    result = prime * result + [self.ssoChangeLoginUrlDetails hash];
  case DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails:
    result = prime * result + [self.ssoChangeLogoutUrlDetails hash];
  case DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails:
    result = prime * result + [self.ssoChangeSamlIdentityModeDetails hash];
  case DBTEAMLOGEventDetailsSsoRemoveCertDetails:
    result = prime * result + [self.ssoRemoveCertDetails hash];
  case DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails:
    result = prime * result + [self.ssoRemoveLoginUrlDetails hash];
  case DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails:
    result = prime * result + [self.ssoRemoveLogoutUrlDetails hash];
  case DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails:
    result = prime * result + [self.teamFolderChangeStatusDetails hash];
  case DBTEAMLOGEventDetailsTeamFolderCreateDetails:
    result = prime * result + [self.teamFolderCreateDetails hash];
  case DBTEAMLOGEventDetailsTeamFolderDowngradeDetails:
    result = prime * result + [self.teamFolderDowngradeDetails hash];
  case DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails:
    result = prime * result + [self.teamFolderPermanentlyDeleteDetails hash];
  case DBTEAMLOGEventDetailsTeamFolderRenameDetails:
    result = prime * result + [self.teamFolderRenameDetails hash];
  case DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails:
    result = prime * result + [self.teamSelectiveSyncSettingsChangedDetails hash];
  case DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails:
    result = prime * result + [self.accountCaptureChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsAllowDownloadDisabledDetails:
    result = prime * result + [self.allowDownloadDisabledDetails hash];
  case DBTEAMLOGEventDetailsAllowDownloadEnabledDetails:
    result = prime * result + [self.allowDownloadEnabledDetails hash];
  case DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails:
    result = prime * result + [self.dataPlacementRestrictionChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails:
    result = prime * result + [self.dataPlacementRestrictionSatisfyPolicyDetails hash];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails:
    result = prime * result + [self.deviceApprovalsChangeDesktopPolicyDetails hash];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails:
    result = prime * result + [self.deviceApprovalsChangeMobilePolicyDetails hash];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails:
    result = prime * result + [self.deviceApprovalsChangeOverageActionDetails hash];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails:
    result = prime * result + [self.deviceApprovalsChangeUnlinkActionDetails hash];
  case DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails:
    result = prime * result + [self.directoryRestrictionsAddMembersDetails hash];
  case DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails:
    result = prime * result + [self.directoryRestrictionsRemoveMembersDetails hash];
  case DBTEAMLOGEventDetailsEmmAddExceptionDetails:
    result = prime * result + [self.emmAddExceptionDetails hash];
  case DBTEAMLOGEventDetailsEmmChangePolicyDetails:
    result = prime * result + [self.emmChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsEmmRemoveExceptionDetails:
    result = prime * result + [self.emmRemoveExceptionDetails hash];
  case DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails:
    result = prime * result + [self.extendedVersionHistoryChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails:
    result = prime * result + [self.fileCommentsChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails:
    result = prime * result + [self.fileRequestsChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails:
    result = prime * result + [self.fileRequestsEmailsEnabledDetails hash];
  case DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails:
    result = prime * result + [self.fileRequestsEmailsRestrictedToTeamOnlyDetails hash];
  case DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails:
    result = prime * result + [self.googleSsoChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails:
    result = prime * result + [self.groupUserManagementChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails:
    result = prime * result + [self.memberRequestsChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails:
    result = prime * result + [self.memberSpaceLimitsAddExceptionDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails:
    result = prime * result + [self.memberSpaceLimitsChangeCapsTypePolicyDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails:
    result = prime * result + [self.memberSpaceLimitsChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails:
    result = prime * result + [self.memberSpaceLimitsRemoveExceptionDetails hash];
  case DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails:
    result = prime * result + [self.memberSuggestionsChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails:
    result = prime * result + [self.microsoftOfficeAddinChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails:
    result = prime * result + [self.networkControlChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails:
    result = prime * result + [self.paperChangeDeploymentPolicyDetails hash];
  case DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails:
    result = prime * result + [self.paperChangeMemberLinkPolicyDetails hash];
  case DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails:
    result = prime * result + [self.paperChangeMemberPolicyDetails hash];
  case DBTEAMLOGEventDetailsPaperChangePolicyDetails:
    result = prime * result + [self.paperChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails:
    result = prime * result + [self.paperEnabledUsersGroupAdditionDetails hash];
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails:
    result = prime * result + [self.paperEnabledUsersGroupRemovalDetails hash];
  case DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails:
    result = prime * result + [self.permanentDeleteChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails:
    result = prime * result + [self.sharingChangeFolderJoinPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails:
    result = prime * result + [self.sharingChangeLinkPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails:
    result = prime * result + [self.sharingChangeMemberPolicyDetails hash];
  case DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails:
    result = prime * result + [self.showcaseChangeDownloadPolicyDetails hash];
  case DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails:
    result = prime * result + [self.showcaseChangeEnabledPolicyDetails hash];
  case DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails:
    result = prime * result + [self.showcaseChangeExternalSharingPolicyDetails hash];
  case DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails:
    result = prime * result + [self.smartSyncChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails:
    result = prime * result + [self.smartSyncNotOptOutDetails hash];
  case DBTEAMLOGEventDetailsSmartSyncOptOutDetails:
    result = prime * result + [self.smartSyncOptOutDetails hash];
  case DBTEAMLOGEventDetailsSsoChangePolicyDetails:
    result = prime * result + [self.ssoChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsTfaChangePolicyDetails:
    result = prime * result + [self.tfaChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails:
    result = prime * result + [self.twoAccountChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails:
    result = prime * result + [self.webSessionsChangeFixedLengthPolicyDetails hash];
  case DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails:
    result = prime * result + [self.webSessionsChangeIdleLengthPolicyDetails hash];
  case DBTEAMLOGEventDetailsTeamMergeFromDetails:
    result = prime * result + [self.teamMergeFromDetails hash];
  case DBTEAMLOGEventDetailsTeamMergeToDetails:
    result = prime * result + [self.teamMergeToDetails hash];
  case DBTEAMLOGEventDetailsTeamProfileAddLogoDetails:
    result = prime * result + [self.teamProfileAddLogoDetails hash];
  case DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails:
    result = prime * result + [self.teamProfileChangeDefaultLanguageDetails hash];
  case DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails:
    result = prime * result + [self.teamProfileChangeLogoDetails hash];
  case DBTEAMLOGEventDetailsTeamProfileChangeNameDetails:
    result = prime * result + [self.teamProfileChangeNameDetails hash];
  case DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails:
    result = prime * result + [self.teamProfileRemoveLogoDetails hash];
  case DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails:
    result = prime * result + [self.tfaAddBackupPhoneDetails hash];
  case DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails:
    result = prime * result + [self.tfaAddSecurityKeyDetails hash];
  case DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails:
    result = prime * result + [self.tfaChangeBackupPhoneDetails hash];
  case DBTEAMLOGEventDetailsTfaChangeStatusDetails:
    result = prime * result + [self.tfaChangeStatusDetails hash];
  case DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails:
    result = prime * result + [self.tfaRemoveBackupPhoneDetails hash];
  case DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails:
    result = prime * result + [self.tfaRemoveSecurityKeyDetails hash];
  case DBTEAMLOGEventDetailsTfaResetDetails:
    result = prime * result + [self.tfaResetDetails hash];
  case DBTEAMLOGEventDetailsMissingDetails:
    result = prime * result + [self.missingDetails hash];
  case DBTEAMLOGEventDetailsOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEventDetails:other];
}

- (BOOL)isEqualToEventDetails:(DBTEAMLOGEventDetails *)anEventDetails {
  if (self == anEventDetails) {
    return YES;
  }
  if (self.tag != anEventDetails.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEventDetailsAppLinkTeamDetails:
    return [self.appLinkTeamDetails isEqual:anEventDetails.appLinkTeamDetails];
  case DBTEAMLOGEventDetailsAppLinkUserDetails:
    return [self.appLinkUserDetails isEqual:anEventDetails.appLinkUserDetails];
  case DBTEAMLOGEventDetailsAppUnlinkTeamDetails:
    return [self.appUnlinkTeamDetails isEqual:anEventDetails.appUnlinkTeamDetails];
  case DBTEAMLOGEventDetailsAppUnlinkUserDetails:
    return [self.appUnlinkUserDetails isEqual:anEventDetails.appUnlinkUserDetails];
  case DBTEAMLOGEventDetailsFileAddCommentDetails:
    return [self.fileAddCommentDetails isEqual:anEventDetails.fileAddCommentDetails];
  case DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails:
    return [self.fileChangeCommentSubscriptionDetails isEqual:anEventDetails.fileChangeCommentSubscriptionDetails];
  case DBTEAMLOGEventDetailsFileDeleteCommentDetails:
    return [self.fileDeleteCommentDetails isEqual:anEventDetails.fileDeleteCommentDetails];
  case DBTEAMLOGEventDetailsFileLikeCommentDetails:
    return [self.fileLikeCommentDetails isEqual:anEventDetails.fileLikeCommentDetails];
  case DBTEAMLOGEventDetailsFileResolveCommentDetails:
    return [self.fileResolveCommentDetails isEqual:anEventDetails.fileResolveCommentDetails];
  case DBTEAMLOGEventDetailsFileUnlikeCommentDetails:
    return [self.fileUnlikeCommentDetails isEqual:anEventDetails.fileUnlikeCommentDetails];
  case DBTEAMLOGEventDetailsFileUnresolveCommentDetails:
    return [self.fileUnresolveCommentDetails isEqual:anEventDetails.fileUnresolveCommentDetails];
  case DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails:
    return [self.deviceChangeIpDesktopDetails isEqual:anEventDetails.deviceChangeIpDesktopDetails];
  case DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails:
    return [self.deviceChangeIpMobileDetails isEqual:anEventDetails.deviceChangeIpMobileDetails];
  case DBTEAMLOGEventDetailsDeviceChangeIpWebDetails:
    return [self.deviceChangeIpWebDetails isEqual:anEventDetails.deviceChangeIpWebDetails];
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails:
    return [self.deviceDeleteOnUnlinkFailDetails isEqual:anEventDetails.deviceDeleteOnUnlinkFailDetails];
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails:
    return [self.deviceDeleteOnUnlinkSuccessDetails isEqual:anEventDetails.deviceDeleteOnUnlinkSuccessDetails];
  case DBTEAMLOGEventDetailsDeviceLinkFailDetails:
    return [self.deviceLinkFailDetails isEqual:anEventDetails.deviceLinkFailDetails];
  case DBTEAMLOGEventDetailsDeviceLinkSuccessDetails:
    return [self.deviceLinkSuccessDetails isEqual:anEventDetails.deviceLinkSuccessDetails];
  case DBTEAMLOGEventDetailsDeviceManagementDisabledDetails:
    return [self.deviceManagementDisabledDetails isEqual:anEventDetails.deviceManagementDisabledDetails];
  case DBTEAMLOGEventDetailsDeviceManagementEnabledDetails:
    return [self.deviceManagementEnabledDetails isEqual:anEventDetails.deviceManagementEnabledDetails];
  case DBTEAMLOGEventDetailsDeviceUnlinkDetails:
    return [self.deviceUnlinkDetails isEqual:anEventDetails.deviceUnlinkDetails];
  case DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails:
    return [self.emmRefreshAuthTokenDetails isEqual:anEventDetails.emmRefreshAuthTokenDetails];
  case DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails:
    return
        [self.accountCaptureChangeAvailabilityDetails isEqual:anEventDetails.accountCaptureChangeAvailabilityDetails];
  case DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails:
    return [self.accountCaptureMigrateAccountDetails isEqual:anEventDetails.accountCaptureMigrateAccountDetails];
  case DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails:
    return [self.accountCaptureNotificationEmailsSentDetails
        isEqual:anEventDetails.accountCaptureNotificationEmailsSentDetails];
  case DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails:
    return [self.accountCaptureRelinquishAccountDetails isEqual:anEventDetails.accountCaptureRelinquishAccountDetails];
  case DBTEAMLOGEventDetailsDisabledDomainInvitesDetails:
    return [self.disabledDomainInvitesDetails isEqual:anEventDetails.disabledDomainInvitesDetails];
  case DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails:
    return [self.domainInvitesApproveRequestToJoinTeamDetails
        isEqual:anEventDetails.domainInvitesApproveRequestToJoinTeamDetails];
  case DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails:
    return [self.domainInvitesDeclineRequestToJoinTeamDetails
        isEqual:anEventDetails.domainInvitesDeclineRequestToJoinTeamDetails];
  case DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails:
    return [self.domainInvitesEmailExistingUsersDetails isEqual:anEventDetails.domainInvitesEmailExistingUsersDetails];
  case DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails:
    return [self.domainInvitesRequestToJoinTeamDetails isEqual:anEventDetails.domainInvitesRequestToJoinTeamDetails];
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails:
    return [self.domainInvitesSetInviteNewUserPrefToNoDetails
        isEqual:anEventDetails.domainInvitesSetInviteNewUserPrefToNoDetails];
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails:
    return [self.domainInvitesSetInviteNewUserPrefToYesDetails
        isEqual:anEventDetails.domainInvitesSetInviteNewUserPrefToYesDetails];
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails:
    return [self.domainVerificationAddDomainFailDetails isEqual:anEventDetails.domainVerificationAddDomainFailDetails];
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails:
    return [self.domainVerificationAddDomainSuccessDetails
        isEqual:anEventDetails.domainVerificationAddDomainSuccessDetails];
  case DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails:
    return [self.domainVerificationRemoveDomainDetails isEqual:anEventDetails.domainVerificationRemoveDomainDetails];
  case DBTEAMLOGEventDetailsEnabledDomainInvitesDetails:
    return [self.enabledDomainInvitesDetails isEqual:anEventDetails.enabledDomainInvitesDetails];
  case DBTEAMLOGEventDetailsCreateFolderDetails:
    return [self.createFolderDetails isEqual:anEventDetails.createFolderDetails];
  case DBTEAMLOGEventDetailsFileAddDetails:
    return [self.fileAddDetails isEqual:anEventDetails.fileAddDetails];
  case DBTEAMLOGEventDetailsFileCopyDetails:
    return [self.fileCopyDetails isEqual:anEventDetails.fileCopyDetails];
  case DBTEAMLOGEventDetailsFileDeleteDetails:
    return [self.fileDeleteDetails isEqual:anEventDetails.fileDeleteDetails];
  case DBTEAMLOGEventDetailsFileDownloadDetails:
    return [self.fileDownloadDetails isEqual:anEventDetails.fileDownloadDetails];
  case DBTEAMLOGEventDetailsFileEditDetails:
    return [self.fileEditDetails isEqual:anEventDetails.fileEditDetails];
  case DBTEAMLOGEventDetailsFileGetCopyReferenceDetails:
    return [self.fileGetCopyReferenceDetails isEqual:anEventDetails.fileGetCopyReferenceDetails];
  case DBTEAMLOGEventDetailsFileMoveDetails:
    return [self.fileMoveDetails isEqual:anEventDetails.fileMoveDetails];
  case DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails:
    return [self.filePermanentlyDeleteDetails isEqual:anEventDetails.filePermanentlyDeleteDetails];
  case DBTEAMLOGEventDetailsFilePreviewDetails:
    return [self.filePreviewDetails isEqual:anEventDetails.filePreviewDetails];
  case DBTEAMLOGEventDetailsFileRenameDetails:
    return [self.fileRenameDetails isEqual:anEventDetails.fileRenameDetails];
  case DBTEAMLOGEventDetailsFileRestoreDetails:
    return [self.fileRestoreDetails isEqual:anEventDetails.fileRestoreDetails];
  case DBTEAMLOGEventDetailsFileRevertDetails:
    return [self.fileRevertDetails isEqual:anEventDetails.fileRevertDetails];
  case DBTEAMLOGEventDetailsFileRollbackChangesDetails:
    return [self.fileRollbackChangesDetails isEqual:anEventDetails.fileRollbackChangesDetails];
  case DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails:
    return [self.fileSaveCopyReferenceDetails isEqual:anEventDetails.fileSaveCopyReferenceDetails];
  case DBTEAMLOGEventDetailsFileRequestChangeDetails:
    return [self.fileRequestChangeDetails isEqual:anEventDetails.fileRequestChangeDetails];
  case DBTEAMLOGEventDetailsFileRequestCloseDetails:
    return [self.fileRequestCloseDetails isEqual:anEventDetails.fileRequestCloseDetails];
  case DBTEAMLOGEventDetailsFileRequestCreateDetails:
    return [self.fileRequestCreateDetails isEqual:anEventDetails.fileRequestCreateDetails];
  case DBTEAMLOGEventDetailsFileRequestReceiveFileDetails:
    return [self.fileRequestReceiveFileDetails isEqual:anEventDetails.fileRequestReceiveFileDetails];
  case DBTEAMLOGEventDetailsGroupAddExternalIdDetails:
    return [self.groupAddExternalIdDetails isEqual:anEventDetails.groupAddExternalIdDetails];
  case DBTEAMLOGEventDetailsGroupAddMemberDetails:
    return [self.groupAddMemberDetails isEqual:anEventDetails.groupAddMemberDetails];
  case DBTEAMLOGEventDetailsGroupChangeExternalIdDetails:
    return [self.groupChangeExternalIdDetails isEqual:anEventDetails.groupChangeExternalIdDetails];
  case DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails:
    return [self.groupChangeManagementTypeDetails isEqual:anEventDetails.groupChangeManagementTypeDetails];
  case DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails:
    return [self.groupChangeMemberRoleDetails isEqual:anEventDetails.groupChangeMemberRoleDetails];
  case DBTEAMLOGEventDetailsGroupCreateDetails:
    return [self.groupCreateDetails isEqual:anEventDetails.groupCreateDetails];
  case DBTEAMLOGEventDetailsGroupDeleteDetails:
    return [self.groupDeleteDetails isEqual:anEventDetails.groupDeleteDetails];
  case DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails:
    return [self.groupDescriptionUpdatedDetails isEqual:anEventDetails.groupDescriptionUpdatedDetails];
  case DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails:
    return [self.groupJoinPolicyUpdatedDetails isEqual:anEventDetails.groupJoinPolicyUpdatedDetails];
  case DBTEAMLOGEventDetailsGroupMovedDetails:
    return [self.groupMovedDetails isEqual:anEventDetails.groupMovedDetails];
  case DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails:
    return [self.groupRemoveExternalIdDetails isEqual:anEventDetails.groupRemoveExternalIdDetails];
  case DBTEAMLOGEventDetailsGroupRemoveMemberDetails:
    return [self.groupRemoveMemberDetails isEqual:anEventDetails.groupRemoveMemberDetails];
  case DBTEAMLOGEventDetailsGroupRenameDetails:
    return [self.groupRenameDetails isEqual:anEventDetails.groupRenameDetails];
  case DBTEAMLOGEventDetailsEmmErrorDetails:
    return [self.emmErrorDetails isEqual:anEventDetails.emmErrorDetails];
  case DBTEAMLOGEventDetailsLoginFailDetails:
    return [self.loginFailDetails isEqual:anEventDetails.loginFailDetails];
  case DBTEAMLOGEventDetailsLoginSuccessDetails:
    return [self.loginSuccessDetails isEqual:anEventDetails.loginSuccessDetails];
  case DBTEAMLOGEventDetailsLogoutDetails:
    return [self.logoutDetails isEqual:anEventDetails.logoutDetails];
  case DBTEAMLOGEventDetailsResellerSupportSessionEndDetails:
    return [self.resellerSupportSessionEndDetails isEqual:anEventDetails.resellerSupportSessionEndDetails];
  case DBTEAMLOGEventDetailsResellerSupportSessionStartDetails:
    return [self.resellerSupportSessionStartDetails isEqual:anEventDetails.resellerSupportSessionStartDetails];
  case DBTEAMLOGEventDetailsSignInAsSessionEndDetails:
    return [self.signInAsSessionEndDetails isEqual:anEventDetails.signInAsSessionEndDetails];
  case DBTEAMLOGEventDetailsSignInAsSessionStartDetails:
    return [self.signInAsSessionStartDetails isEqual:anEventDetails.signInAsSessionStartDetails];
  case DBTEAMLOGEventDetailsSsoErrorDetails:
    return [self.ssoErrorDetails isEqual:anEventDetails.ssoErrorDetails];
  case DBTEAMLOGEventDetailsMemberAddNameDetails:
    return [self.memberAddNameDetails isEqual:anEventDetails.memberAddNameDetails];
  case DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails:
    return [self.memberChangeAdminRoleDetails isEqual:anEventDetails.memberChangeAdminRoleDetails];
  case DBTEAMLOGEventDetailsMemberChangeEmailDetails:
    return [self.memberChangeEmailDetails isEqual:anEventDetails.memberChangeEmailDetails];
  case DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails:
    return [self.memberChangeMembershipTypeDetails isEqual:anEventDetails.memberChangeMembershipTypeDetails];
  case DBTEAMLOGEventDetailsMemberChangeNameDetails:
    return [self.memberChangeNameDetails isEqual:anEventDetails.memberChangeNameDetails];
  case DBTEAMLOGEventDetailsMemberChangeStatusDetails:
    return [self.memberChangeStatusDetails isEqual:anEventDetails.memberChangeStatusDetails];
  case DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails:
    return [self.memberPermanentlyDeleteAccountContentsDetails
        isEqual:anEventDetails.memberPermanentlyDeleteAccountContentsDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails:
    return [self.memberSpaceLimitsAddCustomQuotaDetails isEqual:anEventDetails.memberSpaceLimitsAddCustomQuotaDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails:
    return [self.memberSpaceLimitsChangeCustomQuotaDetails
        isEqual:anEventDetails.memberSpaceLimitsChangeCustomQuotaDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails:
    return [self.memberSpaceLimitsChangeStatusDetails isEqual:anEventDetails.memberSpaceLimitsChangeStatusDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails:
    return [self.memberSpaceLimitsRemoveCustomQuotaDetails
        isEqual:anEventDetails.memberSpaceLimitsRemoveCustomQuotaDetails];
  case DBTEAMLOGEventDetailsMemberSuggestDetails:
    return [self.memberSuggestDetails isEqual:anEventDetails.memberSuggestDetails];
  case DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails:
    return [self.memberTransferAccountContentsDetails isEqual:anEventDetails.memberTransferAccountContentsDetails];
  case DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails:
    return [self.secondaryMailsPolicyChangedDetails isEqual:anEventDetails.secondaryMailsPolicyChangedDetails];
  case DBTEAMLOGEventDetailsPaperContentAddMemberDetails:
    return [self.paperContentAddMemberDetails isEqual:anEventDetails.paperContentAddMemberDetails];
  case DBTEAMLOGEventDetailsPaperContentAddToFolderDetails:
    return [self.paperContentAddToFolderDetails isEqual:anEventDetails.paperContentAddToFolderDetails];
  case DBTEAMLOGEventDetailsPaperContentArchiveDetails:
    return [self.paperContentArchiveDetails isEqual:anEventDetails.paperContentArchiveDetails];
  case DBTEAMLOGEventDetailsPaperContentCreateDetails:
    return [self.paperContentCreateDetails isEqual:anEventDetails.paperContentCreateDetails];
  case DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails:
    return [self.paperContentPermanentlyDeleteDetails isEqual:anEventDetails.paperContentPermanentlyDeleteDetails];
  case DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails:
    return [self.paperContentRemoveFromFolderDetails isEqual:anEventDetails.paperContentRemoveFromFolderDetails];
  case DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails:
    return [self.paperContentRemoveMemberDetails isEqual:anEventDetails.paperContentRemoveMemberDetails];
  case DBTEAMLOGEventDetailsPaperContentRenameDetails:
    return [self.paperContentRenameDetails isEqual:anEventDetails.paperContentRenameDetails];
  case DBTEAMLOGEventDetailsPaperContentRestoreDetails:
    return [self.paperContentRestoreDetails isEqual:anEventDetails.paperContentRestoreDetails];
  case DBTEAMLOGEventDetailsPaperDocAddCommentDetails:
    return [self.paperDocAddCommentDetails isEqual:anEventDetails.paperDocAddCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails:
    return [self.paperDocChangeMemberRoleDetails isEqual:anEventDetails.paperDocChangeMemberRoleDetails];
  case DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails:
    return [self.paperDocChangeSharingPolicyDetails isEqual:anEventDetails.paperDocChangeSharingPolicyDetails];
  case DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails:
    return [self.paperDocChangeSubscriptionDetails isEqual:anEventDetails.paperDocChangeSubscriptionDetails];
  case DBTEAMLOGEventDetailsPaperDocDeletedDetails:
    return [self.paperDocDeletedDetails isEqual:anEventDetails.paperDocDeletedDetails];
  case DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails:
    return [self.paperDocDeleteCommentDetails isEqual:anEventDetails.paperDocDeleteCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocDownloadDetails:
    return [self.paperDocDownloadDetails isEqual:anEventDetails.paperDocDownloadDetails];
  case DBTEAMLOGEventDetailsPaperDocEditDetails:
    return [self.paperDocEditDetails isEqual:anEventDetails.paperDocEditDetails];
  case DBTEAMLOGEventDetailsPaperDocEditCommentDetails:
    return [self.paperDocEditCommentDetails isEqual:anEventDetails.paperDocEditCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocFollowedDetails:
    return [self.paperDocFollowedDetails isEqual:anEventDetails.paperDocFollowedDetails];
  case DBTEAMLOGEventDetailsPaperDocMentionDetails:
    return [self.paperDocMentionDetails isEqual:anEventDetails.paperDocMentionDetails];
  case DBTEAMLOGEventDetailsPaperDocRequestAccessDetails:
    return [self.paperDocRequestAccessDetails isEqual:anEventDetails.paperDocRequestAccessDetails];
  case DBTEAMLOGEventDetailsPaperDocResolveCommentDetails:
    return [self.paperDocResolveCommentDetails isEqual:anEventDetails.paperDocResolveCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocRevertDetails:
    return [self.paperDocRevertDetails isEqual:anEventDetails.paperDocRevertDetails];
  case DBTEAMLOGEventDetailsPaperDocSlackShareDetails:
    return [self.paperDocSlackShareDetails isEqual:anEventDetails.paperDocSlackShareDetails];
  case DBTEAMLOGEventDetailsPaperDocTeamInviteDetails:
    return [self.paperDocTeamInviteDetails isEqual:anEventDetails.paperDocTeamInviteDetails];
  case DBTEAMLOGEventDetailsPaperDocTrashedDetails:
    return [self.paperDocTrashedDetails isEqual:anEventDetails.paperDocTrashedDetails];
  case DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails:
    return [self.paperDocUnresolveCommentDetails isEqual:anEventDetails.paperDocUnresolveCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocUntrashedDetails:
    return [self.paperDocUntrashedDetails isEqual:anEventDetails.paperDocUntrashedDetails];
  case DBTEAMLOGEventDetailsPaperDocViewDetails:
    return [self.paperDocViewDetails isEqual:anEventDetails.paperDocViewDetails];
  case DBTEAMLOGEventDetailsPaperExternalViewAllowDetails:
    return [self.paperExternalViewAllowDetails isEqual:anEventDetails.paperExternalViewAllowDetails];
  case DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails:
    return [self.paperExternalViewDefaultTeamDetails isEqual:anEventDetails.paperExternalViewDefaultTeamDetails];
  case DBTEAMLOGEventDetailsPaperExternalViewForbidDetails:
    return [self.paperExternalViewForbidDetails isEqual:anEventDetails.paperExternalViewForbidDetails];
  case DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails:
    return [self.paperFolderChangeSubscriptionDetails isEqual:anEventDetails.paperFolderChangeSubscriptionDetails];
  case DBTEAMLOGEventDetailsPaperFolderDeletedDetails:
    return [self.paperFolderDeletedDetails isEqual:anEventDetails.paperFolderDeletedDetails];
  case DBTEAMLOGEventDetailsPaperFolderFollowedDetails:
    return [self.paperFolderFollowedDetails isEqual:anEventDetails.paperFolderFollowedDetails];
  case DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails:
    return [self.paperFolderTeamInviteDetails isEqual:anEventDetails.paperFolderTeamInviteDetails];
  case DBTEAMLOGEventDetailsPasswordChangeDetails:
    return [self.passwordChangeDetails isEqual:anEventDetails.passwordChangeDetails];
  case DBTEAMLOGEventDetailsPasswordResetDetails:
    return [self.passwordResetDetails isEqual:anEventDetails.passwordResetDetails];
  case DBTEAMLOGEventDetailsPasswordResetAllDetails:
    return [self.passwordResetAllDetails isEqual:anEventDetails.passwordResetAllDetails];
  case DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails:
    return [self.emmCreateExceptionsReportDetails isEqual:anEventDetails.emmCreateExceptionsReportDetails];
  case DBTEAMLOGEventDetailsEmmCreateUsageReportDetails:
    return [self.emmCreateUsageReportDetails isEqual:anEventDetails.emmCreateUsageReportDetails];
  case DBTEAMLOGEventDetailsExportMembersReportDetails:
    return [self.exportMembersReportDetails isEqual:anEventDetails.exportMembersReportDetails];
  case DBTEAMLOGEventDetailsPaperAdminExportStartDetails:
    return [self.paperAdminExportStartDetails isEqual:anEventDetails.paperAdminExportStartDetails];
  case DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails:
    return [self.smartSyncCreateAdminPrivilegeReportDetails
        isEqual:anEventDetails.smartSyncCreateAdminPrivilegeReportDetails];
  case DBTEAMLOGEventDetailsTeamActivityCreateReportDetails:
    return [self.teamActivityCreateReportDetails isEqual:anEventDetails.teamActivityCreateReportDetails];
  case DBTEAMLOGEventDetailsCollectionShareDetails:
    return [self.collectionShareDetails isEqual:anEventDetails.collectionShareDetails];
  case DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails:
    return [self.noteAclInviteOnlyDetails isEqual:anEventDetails.noteAclInviteOnlyDetails];
  case DBTEAMLOGEventDetailsNoteAclLinkDetails:
    return [self.noteAclLinkDetails isEqual:anEventDetails.noteAclLinkDetails];
  case DBTEAMLOGEventDetailsNoteAclTeamLinkDetails:
    return [self.noteAclTeamLinkDetails isEqual:anEventDetails.noteAclTeamLinkDetails];
  case DBTEAMLOGEventDetailsNoteSharedDetails:
    return [self.noteSharedDetails isEqual:anEventDetails.noteSharedDetails];
  case DBTEAMLOGEventDetailsNoteShareReceiveDetails:
    return [self.noteShareReceiveDetails isEqual:anEventDetails.noteShareReceiveDetails];
  case DBTEAMLOGEventDetailsOpenNoteSharedDetails:
    return [self.openNoteSharedDetails isEqual:anEventDetails.openNoteSharedDetails];
  case DBTEAMLOGEventDetailsSfAddGroupDetails:
    return [self.sfAddGroupDetails isEqual:anEventDetails.sfAddGroupDetails];
  case DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails:
    return [self.sfAllowNonMembersToViewSharedLinksDetails
        isEqual:anEventDetails.sfAllowNonMembersToViewSharedLinksDetails];
  case DBTEAMLOGEventDetailsSfExternalInviteWarnDetails:
    return [self.sfExternalInviteWarnDetails isEqual:anEventDetails.sfExternalInviteWarnDetails];
  case DBTEAMLOGEventDetailsSfFbInviteDetails:
    return [self.sfFbInviteDetails isEqual:anEventDetails.sfFbInviteDetails];
  case DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails:
    return [self.sfFbInviteChangeRoleDetails isEqual:anEventDetails.sfFbInviteChangeRoleDetails];
  case DBTEAMLOGEventDetailsSfFbUninviteDetails:
    return [self.sfFbUninviteDetails isEqual:anEventDetails.sfFbUninviteDetails];
  case DBTEAMLOGEventDetailsSfInviteGroupDetails:
    return [self.sfInviteGroupDetails isEqual:anEventDetails.sfInviteGroupDetails];
  case DBTEAMLOGEventDetailsSfTeamGrantAccessDetails:
    return [self.sfTeamGrantAccessDetails isEqual:anEventDetails.sfTeamGrantAccessDetails];
  case DBTEAMLOGEventDetailsSfTeamInviteDetails:
    return [self.sfTeamInviteDetails isEqual:anEventDetails.sfTeamInviteDetails];
  case DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails:
    return [self.sfTeamInviteChangeRoleDetails isEqual:anEventDetails.sfTeamInviteChangeRoleDetails];
  case DBTEAMLOGEventDetailsSfTeamJoinDetails:
    return [self.sfTeamJoinDetails isEqual:anEventDetails.sfTeamJoinDetails];
  case DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails:
    return [self.sfTeamJoinFromOobLinkDetails isEqual:anEventDetails.sfTeamJoinFromOobLinkDetails];
  case DBTEAMLOGEventDetailsSfTeamUninviteDetails:
    return [self.sfTeamUninviteDetails isEqual:anEventDetails.sfTeamUninviteDetails];
  case DBTEAMLOGEventDetailsSharedContentAddInviteesDetails:
    return [self.sharedContentAddInviteesDetails isEqual:anEventDetails.sharedContentAddInviteesDetails];
  case DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails:
    return [self.sharedContentAddLinkExpiryDetails isEqual:anEventDetails.sharedContentAddLinkExpiryDetails];
  case DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails:
    return [self.sharedContentAddLinkPasswordDetails isEqual:anEventDetails.sharedContentAddLinkPasswordDetails];
  case DBTEAMLOGEventDetailsSharedContentAddMemberDetails:
    return [self.sharedContentAddMemberDetails isEqual:anEventDetails.sharedContentAddMemberDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails:
    return [self.sharedContentChangeDownloadsPolicyDetails
        isEqual:anEventDetails.sharedContentChangeDownloadsPolicyDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails:
    return [self.sharedContentChangeInviteeRoleDetails isEqual:anEventDetails.sharedContentChangeInviteeRoleDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails:
    return [self.sharedContentChangeLinkAudienceDetails isEqual:anEventDetails.sharedContentChangeLinkAudienceDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails:
    return [self.sharedContentChangeLinkExpiryDetails isEqual:anEventDetails.sharedContentChangeLinkExpiryDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails:
    return [self.sharedContentChangeLinkPasswordDetails isEqual:anEventDetails.sharedContentChangeLinkPasswordDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails:
    return [self.sharedContentChangeMemberRoleDetails isEqual:anEventDetails.sharedContentChangeMemberRoleDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails:
    return [self.sharedContentChangeViewerInfoPolicyDetails
        isEqual:anEventDetails.sharedContentChangeViewerInfoPolicyDetails];
  case DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails:
    return [self.sharedContentClaimInvitationDetails isEqual:anEventDetails.sharedContentClaimInvitationDetails];
  case DBTEAMLOGEventDetailsSharedContentCopyDetails:
    return [self.sharedContentCopyDetails isEqual:anEventDetails.sharedContentCopyDetails];
  case DBTEAMLOGEventDetailsSharedContentDownloadDetails:
    return [self.sharedContentDownloadDetails isEqual:anEventDetails.sharedContentDownloadDetails];
  case DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails:
    return
        [self.sharedContentRelinquishMembershipDetails isEqual:anEventDetails.sharedContentRelinquishMembershipDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails:
    return [self.sharedContentRemoveInviteesDetails isEqual:anEventDetails.sharedContentRemoveInviteesDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails:
    return [self.sharedContentRemoveLinkExpiryDetails isEqual:anEventDetails.sharedContentRemoveLinkExpiryDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails:
    return [self.sharedContentRemoveLinkPasswordDetails isEqual:anEventDetails.sharedContentRemoveLinkPasswordDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails:
    return [self.sharedContentRemoveMemberDetails isEqual:anEventDetails.sharedContentRemoveMemberDetails];
  case DBTEAMLOGEventDetailsSharedContentRequestAccessDetails:
    return [self.sharedContentRequestAccessDetails isEqual:anEventDetails.sharedContentRequestAccessDetails];
  case DBTEAMLOGEventDetailsSharedContentUnshareDetails:
    return [self.sharedContentUnshareDetails isEqual:anEventDetails.sharedContentUnshareDetails];
  case DBTEAMLOGEventDetailsSharedContentViewDetails:
    return [self.sharedContentViewDetails isEqual:anEventDetails.sharedContentViewDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails:
    return [self.sharedFolderChangeLinkPolicyDetails isEqual:anEventDetails.sharedFolderChangeLinkPolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails:
    return [self.sharedFolderChangeMembersInheritancePolicyDetails
        isEqual:anEventDetails.sharedFolderChangeMembersInheritancePolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails:
    return [self.sharedFolderChangeMembersManagementPolicyDetails
        isEqual:anEventDetails.sharedFolderChangeMembersManagementPolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails:
    return [self.sharedFolderChangeMembersPolicyDetails isEqual:anEventDetails.sharedFolderChangeMembersPolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderCreateDetails:
    return [self.sharedFolderCreateDetails isEqual:anEventDetails.sharedFolderCreateDetails];
  case DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails:
    return [self.sharedFolderDeclineInvitationDetails isEqual:anEventDetails.sharedFolderDeclineInvitationDetails];
  case DBTEAMLOGEventDetailsSharedFolderMountDetails:
    return [self.sharedFolderMountDetails isEqual:anEventDetails.sharedFolderMountDetails];
  case DBTEAMLOGEventDetailsSharedFolderNestDetails:
    return [self.sharedFolderNestDetails isEqual:anEventDetails.sharedFolderNestDetails];
  case DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails:
    return [self.sharedFolderTransferOwnershipDetails isEqual:anEventDetails.sharedFolderTransferOwnershipDetails];
  case DBTEAMLOGEventDetailsSharedFolderUnmountDetails:
    return [self.sharedFolderUnmountDetails isEqual:anEventDetails.sharedFolderUnmountDetails];
  case DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails:
    return [self.sharedLinkAddExpiryDetails isEqual:anEventDetails.sharedLinkAddExpiryDetails];
  case DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails:
    return [self.sharedLinkChangeExpiryDetails isEqual:anEventDetails.sharedLinkChangeExpiryDetails];
  case DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails:
    return [self.sharedLinkChangeVisibilityDetails isEqual:anEventDetails.sharedLinkChangeVisibilityDetails];
  case DBTEAMLOGEventDetailsSharedLinkCopyDetails:
    return [self.sharedLinkCopyDetails isEqual:anEventDetails.sharedLinkCopyDetails];
  case DBTEAMLOGEventDetailsSharedLinkCreateDetails:
    return [self.sharedLinkCreateDetails isEqual:anEventDetails.sharedLinkCreateDetails];
  case DBTEAMLOGEventDetailsSharedLinkDisableDetails:
    return [self.sharedLinkDisableDetails isEqual:anEventDetails.sharedLinkDisableDetails];
  case DBTEAMLOGEventDetailsSharedLinkDownloadDetails:
    return [self.sharedLinkDownloadDetails isEqual:anEventDetails.sharedLinkDownloadDetails];
  case DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails:
    return [self.sharedLinkRemoveExpiryDetails isEqual:anEventDetails.sharedLinkRemoveExpiryDetails];
  case DBTEAMLOGEventDetailsSharedLinkShareDetails:
    return [self.sharedLinkShareDetails isEqual:anEventDetails.sharedLinkShareDetails];
  case DBTEAMLOGEventDetailsSharedLinkViewDetails:
    return [self.sharedLinkViewDetails isEqual:anEventDetails.sharedLinkViewDetails];
  case DBTEAMLOGEventDetailsSharedNoteOpenedDetails:
    return [self.sharedNoteOpenedDetails isEqual:anEventDetails.sharedNoteOpenedDetails];
  case DBTEAMLOGEventDetailsShmodelGroupShareDetails:
    return [self.shmodelGroupShareDetails isEqual:anEventDetails.shmodelGroupShareDetails];
  case DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails:
    return [self.showcaseAccessGrantedDetails isEqual:anEventDetails.showcaseAccessGrantedDetails];
  case DBTEAMLOGEventDetailsShowcaseAddMemberDetails:
    return [self.showcaseAddMemberDetails isEqual:anEventDetails.showcaseAddMemberDetails];
  case DBTEAMLOGEventDetailsShowcaseArchivedDetails:
    return [self.showcaseArchivedDetails isEqual:anEventDetails.showcaseArchivedDetails];
  case DBTEAMLOGEventDetailsShowcaseCreatedDetails:
    return [self.showcaseCreatedDetails isEqual:anEventDetails.showcaseCreatedDetails];
  case DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails:
    return [self.showcaseDeleteCommentDetails isEqual:anEventDetails.showcaseDeleteCommentDetails];
  case DBTEAMLOGEventDetailsShowcaseEditedDetails:
    return [self.showcaseEditedDetails isEqual:anEventDetails.showcaseEditedDetails];
  case DBTEAMLOGEventDetailsShowcaseEditCommentDetails:
    return [self.showcaseEditCommentDetails isEqual:anEventDetails.showcaseEditCommentDetails];
  case DBTEAMLOGEventDetailsShowcaseFileAddedDetails:
    return [self.showcaseFileAddedDetails isEqual:anEventDetails.showcaseFileAddedDetails];
  case DBTEAMLOGEventDetailsShowcaseFileDownloadDetails:
    return [self.showcaseFileDownloadDetails isEqual:anEventDetails.showcaseFileDownloadDetails];
  case DBTEAMLOGEventDetailsShowcaseFileRemovedDetails:
    return [self.showcaseFileRemovedDetails isEqual:anEventDetails.showcaseFileRemovedDetails];
  case DBTEAMLOGEventDetailsShowcaseFileViewDetails:
    return [self.showcaseFileViewDetails isEqual:anEventDetails.showcaseFileViewDetails];
  case DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails:
    return [self.showcasePermanentlyDeletedDetails isEqual:anEventDetails.showcasePermanentlyDeletedDetails];
  case DBTEAMLOGEventDetailsShowcasePostCommentDetails:
    return [self.showcasePostCommentDetails isEqual:anEventDetails.showcasePostCommentDetails];
  case DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails:
    return [self.showcaseRemoveMemberDetails isEqual:anEventDetails.showcaseRemoveMemberDetails];
  case DBTEAMLOGEventDetailsShowcaseRenamedDetails:
    return [self.showcaseRenamedDetails isEqual:anEventDetails.showcaseRenamedDetails];
  case DBTEAMLOGEventDetailsShowcaseRequestAccessDetails:
    return [self.showcaseRequestAccessDetails isEqual:anEventDetails.showcaseRequestAccessDetails];
  case DBTEAMLOGEventDetailsShowcaseResolveCommentDetails:
    return [self.showcaseResolveCommentDetails isEqual:anEventDetails.showcaseResolveCommentDetails];
  case DBTEAMLOGEventDetailsShowcaseRestoredDetails:
    return [self.showcaseRestoredDetails isEqual:anEventDetails.showcaseRestoredDetails];
  case DBTEAMLOGEventDetailsShowcaseTrashedDetails:
    return [self.showcaseTrashedDetails isEqual:anEventDetails.showcaseTrashedDetails];
  case DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails:
    return [self.showcaseTrashedDeprecatedDetails isEqual:anEventDetails.showcaseTrashedDeprecatedDetails];
  case DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails:
    return [self.showcaseUnresolveCommentDetails isEqual:anEventDetails.showcaseUnresolveCommentDetails];
  case DBTEAMLOGEventDetailsShowcaseUntrashedDetails:
    return [self.showcaseUntrashedDetails isEqual:anEventDetails.showcaseUntrashedDetails];
  case DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails:
    return [self.showcaseUntrashedDeprecatedDetails isEqual:anEventDetails.showcaseUntrashedDeprecatedDetails];
  case DBTEAMLOGEventDetailsShowcaseViewDetails:
    return [self.showcaseViewDetails isEqual:anEventDetails.showcaseViewDetails];
  case DBTEAMLOGEventDetailsSsoAddCertDetails:
    return [self.ssoAddCertDetails isEqual:anEventDetails.ssoAddCertDetails];
  case DBTEAMLOGEventDetailsSsoAddLoginUrlDetails:
    return [self.ssoAddLoginUrlDetails isEqual:anEventDetails.ssoAddLoginUrlDetails];
  case DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails:
    return [self.ssoAddLogoutUrlDetails isEqual:anEventDetails.ssoAddLogoutUrlDetails];
  case DBTEAMLOGEventDetailsSsoChangeCertDetails:
    return [self.ssoChangeCertDetails isEqual:anEventDetails.ssoChangeCertDetails];
  case DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails:
    return [self.ssoChangeLoginUrlDetails isEqual:anEventDetails.ssoChangeLoginUrlDetails];
  case DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails:
    return [self.ssoChangeLogoutUrlDetails isEqual:anEventDetails.ssoChangeLogoutUrlDetails];
  case DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails:
    return [self.ssoChangeSamlIdentityModeDetails isEqual:anEventDetails.ssoChangeSamlIdentityModeDetails];
  case DBTEAMLOGEventDetailsSsoRemoveCertDetails:
    return [self.ssoRemoveCertDetails isEqual:anEventDetails.ssoRemoveCertDetails];
  case DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails:
    return [self.ssoRemoveLoginUrlDetails isEqual:anEventDetails.ssoRemoveLoginUrlDetails];
  case DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails:
    return [self.ssoRemoveLogoutUrlDetails isEqual:anEventDetails.ssoRemoveLogoutUrlDetails];
  case DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails:
    return [self.teamFolderChangeStatusDetails isEqual:anEventDetails.teamFolderChangeStatusDetails];
  case DBTEAMLOGEventDetailsTeamFolderCreateDetails:
    return [self.teamFolderCreateDetails isEqual:anEventDetails.teamFolderCreateDetails];
  case DBTEAMLOGEventDetailsTeamFolderDowngradeDetails:
    return [self.teamFolderDowngradeDetails isEqual:anEventDetails.teamFolderDowngradeDetails];
  case DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails:
    return [self.teamFolderPermanentlyDeleteDetails isEqual:anEventDetails.teamFolderPermanentlyDeleteDetails];
  case DBTEAMLOGEventDetailsTeamFolderRenameDetails:
    return [self.teamFolderRenameDetails isEqual:anEventDetails.teamFolderRenameDetails];
  case DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails:
    return
        [self.teamSelectiveSyncSettingsChangedDetails isEqual:anEventDetails.teamSelectiveSyncSettingsChangedDetails];
  case DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails:
    return [self.accountCaptureChangePolicyDetails isEqual:anEventDetails.accountCaptureChangePolicyDetails];
  case DBTEAMLOGEventDetailsAllowDownloadDisabledDetails:
    return [self.allowDownloadDisabledDetails isEqual:anEventDetails.allowDownloadDisabledDetails];
  case DBTEAMLOGEventDetailsAllowDownloadEnabledDetails:
    return [self.allowDownloadEnabledDetails isEqual:anEventDetails.allowDownloadEnabledDetails];
  case DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails:
    return [self.dataPlacementRestrictionChangePolicyDetails
        isEqual:anEventDetails.dataPlacementRestrictionChangePolicyDetails];
  case DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails:
    return [self.dataPlacementRestrictionSatisfyPolicyDetails
        isEqual:anEventDetails.dataPlacementRestrictionSatisfyPolicyDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails:
    return [self.deviceApprovalsChangeDesktopPolicyDetails
        isEqual:anEventDetails.deviceApprovalsChangeDesktopPolicyDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails:
    return
        [self.deviceApprovalsChangeMobilePolicyDetails isEqual:anEventDetails.deviceApprovalsChangeMobilePolicyDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails:
    return [self.deviceApprovalsChangeOverageActionDetails
        isEqual:anEventDetails.deviceApprovalsChangeOverageActionDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails:
    return
        [self.deviceApprovalsChangeUnlinkActionDetails isEqual:anEventDetails.deviceApprovalsChangeUnlinkActionDetails];
  case DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails:
    return [self.directoryRestrictionsAddMembersDetails isEqual:anEventDetails.directoryRestrictionsAddMembersDetails];
  case DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails:
    return [self.directoryRestrictionsRemoveMembersDetails
        isEqual:anEventDetails.directoryRestrictionsRemoveMembersDetails];
  case DBTEAMLOGEventDetailsEmmAddExceptionDetails:
    return [self.emmAddExceptionDetails isEqual:anEventDetails.emmAddExceptionDetails];
  case DBTEAMLOGEventDetailsEmmChangePolicyDetails:
    return [self.emmChangePolicyDetails isEqual:anEventDetails.emmChangePolicyDetails];
  case DBTEAMLOGEventDetailsEmmRemoveExceptionDetails:
    return [self.emmRemoveExceptionDetails isEqual:anEventDetails.emmRemoveExceptionDetails];
  case DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails:
    return [self.extendedVersionHistoryChangePolicyDetails
        isEqual:anEventDetails.extendedVersionHistoryChangePolicyDetails];
  case DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails:
    return [self.fileCommentsChangePolicyDetails isEqual:anEventDetails.fileCommentsChangePolicyDetails];
  case DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails:
    return [self.fileRequestsChangePolicyDetails isEqual:anEventDetails.fileRequestsChangePolicyDetails];
  case DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails:
    return [self.fileRequestsEmailsEnabledDetails isEqual:anEventDetails.fileRequestsEmailsEnabledDetails];
  case DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails:
    return [self.fileRequestsEmailsRestrictedToTeamOnlyDetails
        isEqual:anEventDetails.fileRequestsEmailsRestrictedToTeamOnlyDetails];
  case DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails:
    return [self.googleSsoChangePolicyDetails isEqual:anEventDetails.googleSsoChangePolicyDetails];
  case DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails:
    return [self.groupUserManagementChangePolicyDetails isEqual:anEventDetails.groupUserManagementChangePolicyDetails];
  case DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails:
    return [self.memberRequestsChangePolicyDetails isEqual:anEventDetails.memberRequestsChangePolicyDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails:
    return [self.memberSpaceLimitsAddExceptionDetails isEqual:anEventDetails.memberSpaceLimitsAddExceptionDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails:
    return [self.memberSpaceLimitsChangeCapsTypePolicyDetails
        isEqual:anEventDetails.memberSpaceLimitsChangeCapsTypePolicyDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails:
    return [self.memberSpaceLimitsChangePolicyDetails isEqual:anEventDetails.memberSpaceLimitsChangePolicyDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails:
    return
        [self.memberSpaceLimitsRemoveExceptionDetails isEqual:anEventDetails.memberSpaceLimitsRemoveExceptionDetails];
  case DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails:
    return [self.memberSuggestionsChangePolicyDetails isEqual:anEventDetails.memberSuggestionsChangePolicyDetails];
  case DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails:
    return
        [self.microsoftOfficeAddinChangePolicyDetails isEqual:anEventDetails.microsoftOfficeAddinChangePolicyDetails];
  case DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails:
    return [self.networkControlChangePolicyDetails isEqual:anEventDetails.networkControlChangePolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails:
    return [self.paperChangeDeploymentPolicyDetails isEqual:anEventDetails.paperChangeDeploymentPolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails:
    return [self.paperChangeMemberLinkPolicyDetails isEqual:anEventDetails.paperChangeMemberLinkPolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails:
    return [self.paperChangeMemberPolicyDetails isEqual:anEventDetails.paperChangeMemberPolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangePolicyDetails:
    return [self.paperChangePolicyDetails isEqual:anEventDetails.paperChangePolicyDetails];
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails:
    return [self.paperEnabledUsersGroupAdditionDetails isEqual:anEventDetails.paperEnabledUsersGroupAdditionDetails];
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails:
    return [self.paperEnabledUsersGroupRemovalDetails isEqual:anEventDetails.paperEnabledUsersGroupRemovalDetails];
  case DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails:
    return [self.permanentDeleteChangePolicyDetails isEqual:anEventDetails.permanentDeleteChangePolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails:
    return [self.sharingChangeFolderJoinPolicyDetails isEqual:anEventDetails.sharingChangeFolderJoinPolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails:
    return [self.sharingChangeLinkPolicyDetails isEqual:anEventDetails.sharingChangeLinkPolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails:
    return [self.sharingChangeMemberPolicyDetails isEqual:anEventDetails.sharingChangeMemberPolicyDetails];
  case DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails:
    return [self.showcaseChangeDownloadPolicyDetails isEqual:anEventDetails.showcaseChangeDownloadPolicyDetails];
  case DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails:
    return [self.showcaseChangeEnabledPolicyDetails isEqual:anEventDetails.showcaseChangeEnabledPolicyDetails];
  case DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails:
    return [self.showcaseChangeExternalSharingPolicyDetails
        isEqual:anEventDetails.showcaseChangeExternalSharingPolicyDetails];
  case DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails:
    return [self.smartSyncChangePolicyDetails isEqual:anEventDetails.smartSyncChangePolicyDetails];
  case DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails:
    return [self.smartSyncNotOptOutDetails isEqual:anEventDetails.smartSyncNotOptOutDetails];
  case DBTEAMLOGEventDetailsSmartSyncOptOutDetails:
    return [self.smartSyncOptOutDetails isEqual:anEventDetails.smartSyncOptOutDetails];
  case DBTEAMLOGEventDetailsSsoChangePolicyDetails:
    return [self.ssoChangePolicyDetails isEqual:anEventDetails.ssoChangePolicyDetails];
  case DBTEAMLOGEventDetailsTfaChangePolicyDetails:
    return [self.tfaChangePolicyDetails isEqual:anEventDetails.tfaChangePolicyDetails];
  case DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails:
    return [self.twoAccountChangePolicyDetails isEqual:anEventDetails.twoAccountChangePolicyDetails];
  case DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails:
    return [self.webSessionsChangeFixedLengthPolicyDetails
        isEqual:anEventDetails.webSessionsChangeFixedLengthPolicyDetails];
  case DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails:
    return
        [self.webSessionsChangeIdleLengthPolicyDetails isEqual:anEventDetails.webSessionsChangeIdleLengthPolicyDetails];
  case DBTEAMLOGEventDetailsTeamMergeFromDetails:
    return [self.teamMergeFromDetails isEqual:anEventDetails.teamMergeFromDetails];
  case DBTEAMLOGEventDetailsTeamMergeToDetails:
    return [self.teamMergeToDetails isEqual:anEventDetails.teamMergeToDetails];
  case DBTEAMLOGEventDetailsTeamProfileAddLogoDetails:
    return [self.teamProfileAddLogoDetails isEqual:anEventDetails.teamProfileAddLogoDetails];
  case DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails:
    return
        [self.teamProfileChangeDefaultLanguageDetails isEqual:anEventDetails.teamProfileChangeDefaultLanguageDetails];
  case DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails:
    return [self.teamProfileChangeLogoDetails isEqual:anEventDetails.teamProfileChangeLogoDetails];
  case DBTEAMLOGEventDetailsTeamProfileChangeNameDetails:
    return [self.teamProfileChangeNameDetails isEqual:anEventDetails.teamProfileChangeNameDetails];
  case DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails:
    return [self.teamProfileRemoveLogoDetails isEqual:anEventDetails.teamProfileRemoveLogoDetails];
  case DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails:
    return [self.tfaAddBackupPhoneDetails isEqual:anEventDetails.tfaAddBackupPhoneDetails];
  case DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails:
    return [self.tfaAddSecurityKeyDetails isEqual:anEventDetails.tfaAddSecurityKeyDetails];
  case DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails:
    return [self.tfaChangeBackupPhoneDetails isEqual:anEventDetails.tfaChangeBackupPhoneDetails];
  case DBTEAMLOGEventDetailsTfaChangeStatusDetails:
    return [self.tfaChangeStatusDetails isEqual:anEventDetails.tfaChangeStatusDetails];
  case DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails:
    return [self.tfaRemoveBackupPhoneDetails isEqual:anEventDetails.tfaRemoveBackupPhoneDetails];
  case DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails:
    return [self.tfaRemoveSecurityKeyDetails isEqual:anEventDetails.tfaRemoveSecurityKeyDetails];
  case DBTEAMLOGEventDetailsTfaResetDetails:
    return [self.tfaResetDetails isEqual:anEventDetails.tfaResetDetails];
  case DBTEAMLOGEventDetailsMissingDetails:
    return [self.missingDetails isEqual:anEventDetails.missingDetails];
  case DBTEAMLOGEventDetailsOther:
    return [[self tagName] isEqual:[anEventDetails tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEventDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEventDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAppLinkTeamDetails]) {
    jsonDict = [[DBTEAMLOGAppLinkTeamDetailsSerializer serialize:valueObj.appLinkTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"app_link_team_details";
  } else if ([valueObj isAppLinkUserDetails]) {
    jsonDict = [[DBTEAMLOGAppLinkUserDetailsSerializer serialize:valueObj.appLinkUserDetails] mutableCopy];
    jsonDict[@".tag"] = @"app_link_user_details";
  } else if ([valueObj isAppUnlinkTeamDetails]) {
    jsonDict = [[DBTEAMLOGAppUnlinkTeamDetailsSerializer serialize:valueObj.appUnlinkTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"app_unlink_team_details";
  } else if ([valueObj isAppUnlinkUserDetails]) {
    jsonDict = [[DBTEAMLOGAppUnlinkUserDetailsSerializer serialize:valueObj.appUnlinkUserDetails] mutableCopy];
    jsonDict[@".tag"] = @"app_unlink_user_details";
  } else if ([valueObj isFileAddCommentDetails]) {
    jsonDict = [[DBTEAMLOGFileAddCommentDetailsSerializer serialize:valueObj.fileAddCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_add_comment_details";
  } else if ([valueObj isFileChangeCommentSubscriptionDetails]) {
    jsonDict = [[DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer
        serialize:valueObj.fileChangeCommentSubscriptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_change_comment_subscription_details";
  } else if ([valueObj isFileDeleteCommentDetails]) {
    jsonDict = [[DBTEAMLOGFileDeleteCommentDetailsSerializer serialize:valueObj.fileDeleteCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_delete_comment_details";
  } else if ([valueObj isFileLikeCommentDetails]) {
    jsonDict = [[DBTEAMLOGFileLikeCommentDetailsSerializer serialize:valueObj.fileLikeCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_like_comment_details";
  } else if ([valueObj isFileResolveCommentDetails]) {
    jsonDict =
        [[DBTEAMLOGFileResolveCommentDetailsSerializer serialize:valueObj.fileResolveCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_resolve_comment_details";
  } else if ([valueObj isFileUnlikeCommentDetails]) {
    jsonDict = [[DBTEAMLOGFileUnlikeCommentDetailsSerializer serialize:valueObj.fileUnlikeCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_unlike_comment_details";
  } else if ([valueObj isFileUnresolveCommentDetails]) {
    jsonDict =
        [[DBTEAMLOGFileUnresolveCommentDetailsSerializer serialize:valueObj.fileUnresolveCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_unresolve_comment_details";
  } else if ([valueObj isDeviceChangeIpDesktopDetails]) {
    jsonDict =
        [[DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer serialize:valueObj.deviceChangeIpDesktopDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_change_ip_desktop_details";
  } else if ([valueObj isDeviceChangeIpMobileDetails]) {
    jsonDict =
        [[DBTEAMLOGDeviceChangeIpMobileDetailsSerializer serialize:valueObj.deviceChangeIpMobileDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_change_ip_mobile_details";
  } else if ([valueObj isDeviceChangeIpWebDetails]) {
    jsonDict = [[DBTEAMLOGDeviceChangeIpWebDetailsSerializer serialize:valueObj.deviceChangeIpWebDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_change_ip_web_details";
  } else if ([valueObj isDeviceDeleteOnUnlinkFailDetails]) {
    jsonDict = [[DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer serialize:valueObj.deviceDeleteOnUnlinkFailDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"device_delete_on_unlink_fail_details";
  } else if ([valueObj isDeviceDeleteOnUnlinkSuccessDetails]) {
    jsonDict = [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer
        serialize:valueObj.deviceDeleteOnUnlinkSuccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_delete_on_unlink_success_details";
  } else if ([valueObj isDeviceLinkFailDetails]) {
    jsonDict = [[DBTEAMLOGDeviceLinkFailDetailsSerializer serialize:valueObj.deviceLinkFailDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_link_fail_details";
  } else if ([valueObj isDeviceLinkSuccessDetails]) {
    jsonDict = [[DBTEAMLOGDeviceLinkSuccessDetailsSerializer serialize:valueObj.deviceLinkSuccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_link_success_details";
  } else if ([valueObj isDeviceManagementDisabledDetails]) {
    jsonDict = [[DBTEAMLOGDeviceManagementDisabledDetailsSerializer serialize:valueObj.deviceManagementDisabledDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"device_management_disabled_details";
  } else if ([valueObj isDeviceManagementEnabledDetails]) {
    jsonDict = [[DBTEAMLOGDeviceManagementEnabledDetailsSerializer serialize:valueObj.deviceManagementEnabledDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"device_management_enabled_details";
  } else if ([valueObj isDeviceUnlinkDetails]) {
    jsonDict = [[DBTEAMLOGDeviceUnlinkDetailsSerializer serialize:valueObj.deviceUnlinkDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_unlink_details";
  } else if ([valueObj isEmmRefreshAuthTokenDetails]) {
    jsonDict =
        [[DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer serialize:valueObj.emmRefreshAuthTokenDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_refresh_auth_token_details";
  } else if ([valueObj isAccountCaptureChangeAvailabilityDetails]) {
    jsonDict = [[DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer
        serialize:valueObj.accountCaptureChangeAvailabilityDetails] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_change_availability_details";
  } else if ([valueObj isAccountCaptureMigrateAccountDetails]) {
    jsonDict = [[DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer
        serialize:valueObj.accountCaptureMigrateAccountDetails] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_migrate_account_details";
  } else if ([valueObj isAccountCaptureNotificationEmailsSentDetails]) {
    jsonDict = [[DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer
        serialize:valueObj.accountCaptureNotificationEmailsSentDetails] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_notification_emails_sent_details";
  } else if ([valueObj isAccountCaptureRelinquishAccountDetails]) {
    jsonDict = [[DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer
        serialize:valueObj.accountCaptureRelinquishAccountDetails] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_relinquish_account_details";
  } else if ([valueObj isDisabledDomainInvitesDetails]) {
    jsonDict =
        [[DBTEAMLOGDisabledDomainInvitesDetailsSerializer serialize:valueObj.disabledDomainInvitesDetails] mutableCopy];
    jsonDict[@".tag"] = @"disabled_domain_invites_details";
  } else if ([valueObj isDomainInvitesApproveRequestToJoinTeamDetails]) {
    jsonDict = [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer
        serialize:valueObj.domainInvitesApproveRequestToJoinTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_approve_request_to_join_team_details";
  } else if ([valueObj isDomainInvitesDeclineRequestToJoinTeamDetails]) {
    jsonDict = [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer
        serialize:valueObj.domainInvitesDeclineRequestToJoinTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_decline_request_to_join_team_details";
  } else if ([valueObj isDomainInvitesEmailExistingUsersDetails]) {
    jsonDict = [[DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer
        serialize:valueObj.domainInvitesEmailExistingUsersDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_email_existing_users_details";
  } else if ([valueObj isDomainInvitesRequestToJoinTeamDetails]) {
    jsonDict = [[DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer
        serialize:valueObj.domainInvitesRequestToJoinTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_request_to_join_team_details";
  } else if ([valueObj isDomainInvitesSetInviteNewUserPrefToNoDetails]) {
    jsonDict = [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer
        serialize:valueObj.domainInvitesSetInviteNewUserPrefToNoDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_set_invite_new_user_pref_to_no_details";
  } else if ([valueObj isDomainInvitesSetInviteNewUserPrefToYesDetails]) {
    jsonDict = [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer
        serialize:valueObj.domainInvitesSetInviteNewUserPrefToYesDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_set_invite_new_user_pref_to_yes_details";
  } else if ([valueObj isDomainVerificationAddDomainFailDetails]) {
    jsonDict = [[DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer
        serialize:valueObj.domainVerificationAddDomainFailDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_verification_add_domain_fail_details";
  } else if ([valueObj isDomainVerificationAddDomainSuccessDetails]) {
    jsonDict = [[DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer
        serialize:valueObj.domainVerificationAddDomainSuccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_verification_add_domain_success_details";
  } else if ([valueObj isDomainVerificationRemoveDomainDetails]) {
    jsonDict = [[DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer
        serialize:valueObj.domainVerificationRemoveDomainDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_verification_remove_domain_details";
  } else if ([valueObj isEnabledDomainInvitesDetails]) {
    jsonDict =
        [[DBTEAMLOGEnabledDomainInvitesDetailsSerializer serialize:valueObj.enabledDomainInvitesDetails] mutableCopy];
    jsonDict[@".tag"] = @"enabled_domain_invites_details";
  } else if ([valueObj isCreateFolderDetails]) {
    jsonDict = [[DBTEAMLOGCreateFolderDetailsSerializer serialize:valueObj.createFolderDetails] mutableCopy];
    jsonDict[@".tag"] = @"create_folder_details";
  } else if ([valueObj isFileAddDetails]) {
    jsonDict = [[DBTEAMLOGFileAddDetailsSerializer serialize:valueObj.fileAddDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_add_details";
  } else if ([valueObj isFileCopyDetails]) {
    jsonDict = [[DBTEAMLOGFileCopyDetailsSerializer serialize:valueObj.fileCopyDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_copy_details";
  } else if ([valueObj isFileDeleteDetails]) {
    jsonDict = [[DBTEAMLOGFileDeleteDetailsSerializer serialize:valueObj.fileDeleteDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_delete_details";
  } else if ([valueObj isFileDownloadDetails]) {
    jsonDict = [[DBTEAMLOGFileDownloadDetailsSerializer serialize:valueObj.fileDownloadDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_download_details";
  } else if ([valueObj isFileEditDetails]) {
    jsonDict = [[DBTEAMLOGFileEditDetailsSerializer serialize:valueObj.fileEditDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_edit_details";
  } else if ([valueObj isFileGetCopyReferenceDetails]) {
    jsonDict =
        [[DBTEAMLOGFileGetCopyReferenceDetailsSerializer serialize:valueObj.fileGetCopyReferenceDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_get_copy_reference_details";
  } else if ([valueObj isFileMoveDetails]) {
    jsonDict = [[DBTEAMLOGFileMoveDetailsSerializer serialize:valueObj.fileMoveDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_move_details";
  } else if ([valueObj isFilePermanentlyDeleteDetails]) {
    jsonDict =
        [[DBTEAMLOGFilePermanentlyDeleteDetailsSerializer serialize:valueObj.filePermanentlyDeleteDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_permanently_delete_details";
  } else if ([valueObj isFilePreviewDetails]) {
    jsonDict = [[DBTEAMLOGFilePreviewDetailsSerializer serialize:valueObj.filePreviewDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_preview_details";
  } else if ([valueObj isFileRenameDetails]) {
    jsonDict = [[DBTEAMLOGFileRenameDetailsSerializer serialize:valueObj.fileRenameDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_rename_details";
  } else if ([valueObj isFileRestoreDetails]) {
    jsonDict = [[DBTEAMLOGFileRestoreDetailsSerializer serialize:valueObj.fileRestoreDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_restore_details";
  } else if ([valueObj isFileRevertDetails]) {
    jsonDict = [[DBTEAMLOGFileRevertDetailsSerializer serialize:valueObj.fileRevertDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_revert_details";
  } else if ([valueObj isFileRollbackChangesDetails]) {
    jsonDict =
        [[DBTEAMLOGFileRollbackChangesDetailsSerializer serialize:valueObj.fileRollbackChangesDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_rollback_changes_details";
  } else if ([valueObj isFileSaveCopyReferenceDetails]) {
    jsonDict =
        [[DBTEAMLOGFileSaveCopyReferenceDetailsSerializer serialize:valueObj.fileSaveCopyReferenceDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_save_copy_reference_details";
  } else if ([valueObj isFileRequestChangeDetails]) {
    jsonDict = [[DBTEAMLOGFileRequestChangeDetailsSerializer serialize:valueObj.fileRequestChangeDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_change_details";
  } else if ([valueObj isFileRequestCloseDetails]) {
    jsonDict = [[DBTEAMLOGFileRequestCloseDetailsSerializer serialize:valueObj.fileRequestCloseDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_close_details";
  } else if ([valueObj isFileRequestCreateDetails]) {
    jsonDict = [[DBTEAMLOGFileRequestCreateDetailsSerializer serialize:valueObj.fileRequestCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_create_details";
  } else if ([valueObj isFileRequestReceiveFileDetails]) {
    jsonDict = [[DBTEAMLOGFileRequestReceiveFileDetailsSerializer serialize:valueObj.fileRequestReceiveFileDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"file_request_receive_file_details";
  } else if ([valueObj isGroupAddExternalIdDetails]) {
    jsonDict =
        [[DBTEAMLOGGroupAddExternalIdDetailsSerializer serialize:valueObj.groupAddExternalIdDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_add_external_id_details";
  } else if ([valueObj isGroupAddMemberDetails]) {
    jsonDict = [[DBTEAMLOGGroupAddMemberDetailsSerializer serialize:valueObj.groupAddMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_add_member_details";
  } else if ([valueObj isGroupChangeExternalIdDetails]) {
    jsonDict =
        [[DBTEAMLOGGroupChangeExternalIdDetailsSerializer serialize:valueObj.groupChangeExternalIdDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_change_external_id_details";
  } else if ([valueObj isGroupChangeManagementTypeDetails]) {
    jsonDict = [[DBTEAMLOGGroupChangeManagementTypeDetailsSerializer
        serialize:valueObj.groupChangeManagementTypeDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_change_management_type_details";
  } else if ([valueObj isGroupChangeMemberRoleDetails]) {
    jsonDict =
        [[DBTEAMLOGGroupChangeMemberRoleDetailsSerializer serialize:valueObj.groupChangeMemberRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_change_member_role_details";
  } else if ([valueObj isGroupCreateDetails]) {
    jsonDict = [[DBTEAMLOGGroupCreateDetailsSerializer serialize:valueObj.groupCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_create_details";
  } else if ([valueObj isGroupDeleteDetails]) {
    jsonDict = [[DBTEAMLOGGroupDeleteDetailsSerializer serialize:valueObj.groupDeleteDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_delete_details";
  } else if ([valueObj isGroupDescriptionUpdatedDetails]) {
    jsonDict = [[DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer serialize:valueObj.groupDescriptionUpdatedDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"group_description_updated_details";
  } else if ([valueObj isGroupJoinPolicyUpdatedDetails]) {
    jsonDict = [[DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer serialize:valueObj.groupJoinPolicyUpdatedDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"group_join_policy_updated_details";
  } else if ([valueObj isGroupMovedDetails]) {
    jsonDict = [[DBTEAMLOGGroupMovedDetailsSerializer serialize:valueObj.groupMovedDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_moved_details";
  } else if ([valueObj isGroupRemoveExternalIdDetails]) {
    jsonDict =
        [[DBTEAMLOGGroupRemoveExternalIdDetailsSerializer serialize:valueObj.groupRemoveExternalIdDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_remove_external_id_details";
  } else if ([valueObj isGroupRemoveMemberDetails]) {
    jsonDict = [[DBTEAMLOGGroupRemoveMemberDetailsSerializer serialize:valueObj.groupRemoveMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_remove_member_details";
  } else if ([valueObj isGroupRenameDetails]) {
    jsonDict = [[DBTEAMLOGGroupRenameDetailsSerializer serialize:valueObj.groupRenameDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_rename_details";
  } else if ([valueObj isEmmErrorDetails]) {
    jsonDict = [[DBTEAMLOGEmmErrorDetailsSerializer serialize:valueObj.emmErrorDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_error_details";
  } else if ([valueObj isLoginFailDetails]) {
    jsonDict = [[DBTEAMLOGLoginFailDetailsSerializer serialize:valueObj.loginFailDetails] mutableCopy];
    jsonDict[@".tag"] = @"login_fail_details";
  } else if ([valueObj isLoginSuccessDetails]) {
    jsonDict = [[DBTEAMLOGLoginSuccessDetailsSerializer serialize:valueObj.loginSuccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"login_success_details";
  } else if ([valueObj isLogoutDetails]) {
    jsonDict = [[DBTEAMLOGLogoutDetailsSerializer serialize:valueObj.logoutDetails] mutableCopy];
    jsonDict[@".tag"] = @"logout_details";
  } else if ([valueObj isResellerSupportSessionEndDetails]) {
    jsonDict = [[DBTEAMLOGResellerSupportSessionEndDetailsSerializer
        serialize:valueObj.resellerSupportSessionEndDetails] mutableCopy];
    jsonDict[@".tag"] = @"reseller_support_session_end_details";
  } else if ([valueObj isResellerSupportSessionStartDetails]) {
    jsonDict = [[DBTEAMLOGResellerSupportSessionStartDetailsSerializer
        serialize:valueObj.resellerSupportSessionStartDetails] mutableCopy];
    jsonDict[@".tag"] = @"reseller_support_session_start_details";
  } else if ([valueObj isSignInAsSessionEndDetails]) {
    jsonDict =
        [[DBTEAMLOGSignInAsSessionEndDetailsSerializer serialize:valueObj.signInAsSessionEndDetails] mutableCopy];
    jsonDict[@".tag"] = @"sign_in_as_session_end_details";
  } else if ([valueObj isSignInAsSessionStartDetails]) {
    jsonDict =
        [[DBTEAMLOGSignInAsSessionStartDetailsSerializer serialize:valueObj.signInAsSessionStartDetails] mutableCopy];
    jsonDict[@".tag"] = @"sign_in_as_session_start_details";
  } else if ([valueObj isSsoErrorDetails]) {
    jsonDict = [[DBTEAMLOGSsoErrorDetailsSerializer serialize:valueObj.ssoErrorDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_error_details";
  } else if ([valueObj isMemberAddNameDetails]) {
    jsonDict = [[DBTEAMLOGMemberAddNameDetailsSerializer serialize:valueObj.memberAddNameDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_add_name_details";
  } else if ([valueObj isMemberChangeAdminRoleDetails]) {
    jsonDict =
        [[DBTEAMLOGMemberChangeAdminRoleDetailsSerializer serialize:valueObj.memberChangeAdminRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_change_admin_role_details";
  } else if ([valueObj isMemberChangeEmailDetails]) {
    jsonDict = [[DBTEAMLOGMemberChangeEmailDetailsSerializer serialize:valueObj.memberChangeEmailDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_change_email_details";
  } else if ([valueObj isMemberChangeMembershipTypeDetails]) {
    jsonDict = [[DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer
        serialize:valueObj.memberChangeMembershipTypeDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_change_membership_type_details";
  } else if ([valueObj isMemberChangeNameDetails]) {
    jsonDict = [[DBTEAMLOGMemberChangeNameDetailsSerializer serialize:valueObj.memberChangeNameDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_change_name_details";
  } else if ([valueObj isMemberChangeStatusDetails]) {
    jsonDict =
        [[DBTEAMLOGMemberChangeStatusDetailsSerializer serialize:valueObj.memberChangeStatusDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_change_status_details";
  } else if ([valueObj isMemberPermanentlyDeleteAccountContentsDetails]) {
    jsonDict = [[DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer
        serialize:valueObj.memberPermanentlyDeleteAccountContentsDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_permanently_delete_account_contents_details";
  } else if ([valueObj isMemberSpaceLimitsAddCustomQuotaDetails]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer
        serialize:valueObj.memberSpaceLimitsAddCustomQuotaDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_add_custom_quota_details";
  } else if ([valueObj isMemberSpaceLimitsChangeCustomQuotaDetails]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer
        serialize:valueObj.memberSpaceLimitsChangeCustomQuotaDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_change_custom_quota_details";
  } else if ([valueObj isMemberSpaceLimitsChangeStatusDetails]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer
        serialize:valueObj.memberSpaceLimitsChangeStatusDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_change_status_details";
  } else if ([valueObj isMemberSpaceLimitsRemoveCustomQuotaDetails]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer
        serialize:valueObj.memberSpaceLimitsRemoveCustomQuotaDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_remove_custom_quota_details";
  } else if ([valueObj isMemberSuggestDetails]) {
    jsonDict = [[DBTEAMLOGMemberSuggestDetailsSerializer serialize:valueObj.memberSuggestDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_suggest_details";
  } else if ([valueObj isMemberTransferAccountContentsDetails]) {
    jsonDict = [[DBTEAMLOGMemberTransferAccountContentsDetailsSerializer
        serialize:valueObj.memberTransferAccountContentsDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_transfer_account_contents_details";
  } else if ([valueObj isSecondaryMailsPolicyChangedDetails]) {
    jsonDict = [[DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer
        serialize:valueObj.secondaryMailsPolicyChangedDetails] mutableCopy];
    jsonDict[@".tag"] = @"secondary_mails_policy_changed_details";
  } else if ([valueObj isPaperContentAddMemberDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperContentAddMemberDetailsSerializer serialize:valueObj.paperContentAddMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_add_member_details";
  } else if ([valueObj isPaperContentAddToFolderDetails]) {
    jsonDict = [[DBTEAMLOGPaperContentAddToFolderDetailsSerializer serialize:valueObj.paperContentAddToFolderDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_content_add_to_folder_details";
  } else if ([valueObj isPaperContentArchiveDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperContentArchiveDetailsSerializer serialize:valueObj.paperContentArchiveDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_archive_details";
  } else if ([valueObj isPaperContentCreateDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperContentCreateDetailsSerializer serialize:valueObj.paperContentCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_create_details";
  } else if ([valueObj isPaperContentPermanentlyDeleteDetails]) {
    jsonDict = [[DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer
        serialize:valueObj.paperContentPermanentlyDeleteDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_permanently_delete_details";
  } else if ([valueObj isPaperContentRemoveFromFolderDetails]) {
    jsonDict = [[DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer
        serialize:valueObj.paperContentRemoveFromFolderDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_remove_from_folder_details";
  } else if ([valueObj isPaperContentRemoveMemberDetails]) {
    jsonDict = [[DBTEAMLOGPaperContentRemoveMemberDetailsSerializer serialize:valueObj.paperContentRemoveMemberDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_content_remove_member_details";
  } else if ([valueObj isPaperContentRenameDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperContentRenameDetailsSerializer serialize:valueObj.paperContentRenameDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_rename_details";
  } else if ([valueObj isPaperContentRestoreDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperContentRestoreDetailsSerializer serialize:valueObj.paperContentRestoreDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_restore_details";
  } else if ([valueObj isPaperDocAddCommentDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperDocAddCommentDetailsSerializer serialize:valueObj.paperDocAddCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_add_comment_details";
  } else if ([valueObj isPaperDocChangeMemberRoleDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer serialize:valueObj.paperDocChangeMemberRoleDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_change_member_role_details";
  } else if ([valueObj isPaperDocChangeSharingPolicyDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer
        serialize:valueObj.paperDocChangeSharingPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_change_sharing_policy_details";
  } else if ([valueObj isPaperDocChangeSubscriptionDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer
        serialize:valueObj.paperDocChangeSubscriptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_change_subscription_details";
  } else if ([valueObj isPaperDocDeletedDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocDeletedDetailsSerializer serialize:valueObj.paperDocDeletedDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_deleted_details";
  } else if ([valueObj isPaperDocDeleteCommentDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperDocDeleteCommentDetailsSerializer serialize:valueObj.paperDocDeleteCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_delete_comment_details";
  } else if ([valueObj isPaperDocDownloadDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocDownloadDetailsSerializer serialize:valueObj.paperDocDownloadDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_download_details";
  } else if ([valueObj isPaperDocEditDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocEditDetailsSerializer serialize:valueObj.paperDocEditDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_edit_details";
  } else if ([valueObj isPaperDocEditCommentDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperDocEditCommentDetailsSerializer serialize:valueObj.paperDocEditCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_edit_comment_details";
  } else if ([valueObj isPaperDocFollowedDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocFollowedDetailsSerializer serialize:valueObj.paperDocFollowedDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_followed_details";
  } else if ([valueObj isPaperDocMentionDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocMentionDetailsSerializer serialize:valueObj.paperDocMentionDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_mention_details";
  } else if ([valueObj isPaperDocRequestAccessDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperDocRequestAccessDetailsSerializer serialize:valueObj.paperDocRequestAccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_request_access_details";
  } else if ([valueObj isPaperDocResolveCommentDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocResolveCommentDetailsSerializer serialize:valueObj.paperDocResolveCommentDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_resolve_comment_details";
  } else if ([valueObj isPaperDocRevertDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocRevertDetailsSerializer serialize:valueObj.paperDocRevertDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_revert_details";
  } else if ([valueObj isPaperDocSlackShareDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperDocSlackShareDetailsSerializer serialize:valueObj.paperDocSlackShareDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_slack_share_details";
  } else if ([valueObj isPaperDocTeamInviteDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperDocTeamInviteDetailsSerializer serialize:valueObj.paperDocTeamInviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_team_invite_details";
  } else if ([valueObj isPaperDocTrashedDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocTrashedDetailsSerializer serialize:valueObj.paperDocTrashedDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_trashed_details";
  } else if ([valueObj isPaperDocUnresolveCommentDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer serialize:valueObj.paperDocUnresolveCommentDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_unresolve_comment_details";
  } else if ([valueObj isPaperDocUntrashedDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocUntrashedDetailsSerializer serialize:valueObj.paperDocUntrashedDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_untrashed_details";
  } else if ([valueObj isPaperDocViewDetails]) {
    jsonDict = [[DBTEAMLOGPaperDocViewDetailsSerializer serialize:valueObj.paperDocViewDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_view_details";
  } else if ([valueObj isPaperExternalViewAllowDetails]) {
    jsonDict = [[DBTEAMLOGPaperExternalViewAllowDetailsSerializer serialize:valueObj.paperExternalViewAllowDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_external_view_allow_details";
  } else if ([valueObj isPaperExternalViewDefaultTeamDetails]) {
    jsonDict = [[DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer
        serialize:valueObj.paperExternalViewDefaultTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_external_view_default_team_details";
  } else if ([valueObj isPaperExternalViewForbidDetails]) {
    jsonDict = [[DBTEAMLOGPaperExternalViewForbidDetailsSerializer serialize:valueObj.paperExternalViewForbidDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_external_view_forbid_details";
  } else if ([valueObj isPaperFolderChangeSubscriptionDetails]) {
    jsonDict = [[DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer
        serialize:valueObj.paperFolderChangeSubscriptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_change_subscription_details";
  } else if ([valueObj isPaperFolderDeletedDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperFolderDeletedDetailsSerializer serialize:valueObj.paperFolderDeletedDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_deleted_details";
  } else if ([valueObj isPaperFolderFollowedDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperFolderFollowedDetailsSerializer serialize:valueObj.paperFolderFollowedDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_followed_details";
  } else if ([valueObj isPaperFolderTeamInviteDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperFolderTeamInviteDetailsSerializer serialize:valueObj.paperFolderTeamInviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_team_invite_details";
  } else if ([valueObj isPasswordChangeDetails]) {
    jsonDict = [[DBTEAMLOGPasswordChangeDetailsSerializer serialize:valueObj.passwordChangeDetails] mutableCopy];
    jsonDict[@".tag"] = @"password_change_details";
  } else if ([valueObj isPasswordResetDetails]) {
    jsonDict = [[DBTEAMLOGPasswordResetDetailsSerializer serialize:valueObj.passwordResetDetails] mutableCopy];
    jsonDict[@".tag"] = @"password_reset_details";
  } else if ([valueObj isPasswordResetAllDetails]) {
    jsonDict = [[DBTEAMLOGPasswordResetAllDetailsSerializer serialize:valueObj.passwordResetAllDetails] mutableCopy];
    jsonDict[@".tag"] = @"password_reset_all_details";
  } else if ([valueObj isEmmCreateExceptionsReportDetails]) {
    jsonDict = [[DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer
        serialize:valueObj.emmCreateExceptionsReportDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_create_exceptions_report_details";
  } else if ([valueObj isEmmCreateUsageReportDetails]) {
    jsonDict =
        [[DBTEAMLOGEmmCreateUsageReportDetailsSerializer serialize:valueObj.emmCreateUsageReportDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_create_usage_report_details";
  } else if ([valueObj isExportMembersReportDetails]) {
    jsonDict =
        [[DBTEAMLOGExportMembersReportDetailsSerializer serialize:valueObj.exportMembersReportDetails] mutableCopy];
    jsonDict[@".tag"] = @"export_members_report_details";
  } else if ([valueObj isPaperAdminExportStartDetails]) {
    jsonDict =
        [[DBTEAMLOGPaperAdminExportStartDetailsSerializer serialize:valueObj.paperAdminExportStartDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_admin_export_start_details";
  } else if ([valueObj isSmartSyncCreateAdminPrivilegeReportDetails]) {
    jsonDict = [[DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer
        serialize:valueObj.smartSyncCreateAdminPrivilegeReportDetails] mutableCopy];
    jsonDict[@".tag"] = @"smart_sync_create_admin_privilege_report_details";
  } else if ([valueObj isTeamActivityCreateReportDetails]) {
    jsonDict = [[DBTEAMLOGTeamActivityCreateReportDetailsSerializer serialize:valueObj.teamActivityCreateReportDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"team_activity_create_report_details";
  } else if ([valueObj isCollectionShareDetails]) {
    jsonDict = [[DBTEAMLOGCollectionShareDetailsSerializer serialize:valueObj.collectionShareDetails] mutableCopy];
    jsonDict[@".tag"] = @"collection_share_details";
  } else if ([valueObj isNoteAclInviteOnlyDetails]) {
    jsonDict = [[DBTEAMLOGNoteAclInviteOnlyDetailsSerializer serialize:valueObj.noteAclInviteOnlyDetails] mutableCopy];
    jsonDict[@".tag"] = @"note_acl_invite_only_details";
  } else if ([valueObj isNoteAclLinkDetails]) {
    jsonDict = [[DBTEAMLOGNoteAclLinkDetailsSerializer serialize:valueObj.noteAclLinkDetails] mutableCopy];
    jsonDict[@".tag"] = @"note_acl_link_details";
  } else if ([valueObj isNoteAclTeamLinkDetails]) {
    jsonDict = [[DBTEAMLOGNoteAclTeamLinkDetailsSerializer serialize:valueObj.noteAclTeamLinkDetails] mutableCopy];
    jsonDict[@".tag"] = @"note_acl_team_link_details";
  } else if ([valueObj isNoteSharedDetails]) {
    jsonDict = [[DBTEAMLOGNoteSharedDetailsSerializer serialize:valueObj.noteSharedDetails] mutableCopy];
    jsonDict[@".tag"] = @"note_shared_details";
  } else if ([valueObj isNoteShareReceiveDetails]) {
    jsonDict = [[DBTEAMLOGNoteShareReceiveDetailsSerializer serialize:valueObj.noteShareReceiveDetails] mutableCopy];
    jsonDict[@".tag"] = @"note_share_receive_details";
  } else if ([valueObj isOpenNoteSharedDetails]) {
    jsonDict = [[DBTEAMLOGOpenNoteSharedDetailsSerializer serialize:valueObj.openNoteSharedDetails] mutableCopy];
    jsonDict[@".tag"] = @"open_note_shared_details";
  } else if ([valueObj isSfAddGroupDetails]) {
    jsonDict = [[DBTEAMLOGSfAddGroupDetailsSerializer serialize:valueObj.sfAddGroupDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_add_group_details";
  } else if ([valueObj isSfAllowNonMembersToViewSharedLinksDetails]) {
    jsonDict = [[DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer
        serialize:valueObj.sfAllowNonMembersToViewSharedLinksDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_allow_non_members_to_view_shared_links_details";
  } else if ([valueObj isSfExternalInviteWarnDetails]) {
    jsonDict =
        [[DBTEAMLOGSfExternalInviteWarnDetailsSerializer serialize:valueObj.sfExternalInviteWarnDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_external_invite_warn_details";
  } else if ([valueObj isSfFbInviteDetails]) {
    jsonDict = [[DBTEAMLOGSfFbInviteDetailsSerializer serialize:valueObj.sfFbInviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_fb_invite_details";
  } else if ([valueObj isSfFbInviteChangeRoleDetails]) {
    jsonDict =
        [[DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer serialize:valueObj.sfFbInviteChangeRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_fb_invite_change_role_details";
  } else if ([valueObj isSfFbUninviteDetails]) {
    jsonDict = [[DBTEAMLOGSfFbUninviteDetailsSerializer serialize:valueObj.sfFbUninviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_fb_uninvite_details";
  } else if ([valueObj isSfInviteGroupDetails]) {
    jsonDict = [[DBTEAMLOGSfInviteGroupDetailsSerializer serialize:valueObj.sfInviteGroupDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_invite_group_details";
  } else if ([valueObj isSfTeamGrantAccessDetails]) {
    jsonDict = [[DBTEAMLOGSfTeamGrantAccessDetailsSerializer serialize:valueObj.sfTeamGrantAccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_grant_access_details";
  } else if ([valueObj isSfTeamInviteDetails]) {
    jsonDict = [[DBTEAMLOGSfTeamInviteDetailsSerializer serialize:valueObj.sfTeamInviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_invite_details";
  } else if ([valueObj isSfTeamInviteChangeRoleDetails]) {
    jsonDict = [[DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer serialize:valueObj.sfTeamInviteChangeRoleDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"sf_team_invite_change_role_details";
  } else if ([valueObj isSfTeamJoinDetails]) {
    jsonDict = [[DBTEAMLOGSfTeamJoinDetailsSerializer serialize:valueObj.sfTeamJoinDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_join_details";
  } else if ([valueObj isSfTeamJoinFromOobLinkDetails]) {
    jsonDict =
        [[DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer serialize:valueObj.sfTeamJoinFromOobLinkDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_join_from_oob_link_details";
  } else if ([valueObj isSfTeamUninviteDetails]) {
    jsonDict = [[DBTEAMLOGSfTeamUninviteDetailsSerializer serialize:valueObj.sfTeamUninviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_uninvite_details";
  } else if ([valueObj isSharedContentAddInviteesDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentAddInviteesDetailsSerializer serialize:valueObj.sharedContentAddInviteesDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_invitees_details";
  } else if ([valueObj isSharedContentAddLinkExpiryDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer
        serialize:valueObj.sharedContentAddLinkExpiryDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_link_expiry_details";
  } else if ([valueObj isSharedContentAddLinkPasswordDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer
        serialize:valueObj.sharedContentAddLinkPasswordDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_link_password_details";
  } else if ([valueObj isSharedContentAddMemberDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentAddMemberDetailsSerializer serialize:valueObj.sharedContentAddMemberDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_member_details";
  } else if ([valueObj isSharedContentChangeDownloadsPolicyDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer
        serialize:valueObj.sharedContentChangeDownloadsPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_downloads_policy_details";
  } else if ([valueObj isSharedContentChangeInviteeRoleDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer
        serialize:valueObj.sharedContentChangeInviteeRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_invitee_role_details";
  } else if ([valueObj isSharedContentChangeLinkAudienceDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer
        serialize:valueObj.sharedContentChangeLinkAudienceDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_link_audience_details";
  } else if ([valueObj isSharedContentChangeLinkExpiryDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer
        serialize:valueObj.sharedContentChangeLinkExpiryDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_link_expiry_details";
  } else if ([valueObj isSharedContentChangeLinkPasswordDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer
        serialize:valueObj.sharedContentChangeLinkPasswordDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_link_password_details";
  } else if ([valueObj isSharedContentChangeMemberRoleDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer
        serialize:valueObj.sharedContentChangeMemberRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_member_role_details";
  } else if ([valueObj isSharedContentChangeViewerInfoPolicyDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer
        serialize:valueObj.sharedContentChangeViewerInfoPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_viewer_info_policy_details";
  } else if ([valueObj isSharedContentClaimInvitationDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentClaimInvitationDetailsSerializer
        serialize:valueObj.sharedContentClaimInvitationDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_claim_invitation_details";
  } else if ([valueObj isSharedContentCopyDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentCopyDetailsSerializer serialize:valueObj.sharedContentCopyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_copy_details";
  } else if ([valueObj isSharedContentDownloadDetails]) {
    jsonDict =
        [[DBTEAMLOGSharedContentDownloadDetailsSerializer serialize:valueObj.sharedContentDownloadDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_download_details";
  } else if ([valueObj isSharedContentRelinquishMembershipDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer
        serialize:valueObj.sharedContentRelinquishMembershipDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_relinquish_membership_details";
  } else if ([valueObj isSharedContentRemoveInviteesDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer
        serialize:valueObj.sharedContentRemoveInviteesDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_invitees_details";
  } else if ([valueObj isSharedContentRemoveLinkExpiryDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer
        serialize:valueObj.sharedContentRemoveLinkExpiryDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_link_expiry_details";
  } else if ([valueObj isSharedContentRemoveLinkPasswordDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer
        serialize:valueObj.sharedContentRemoveLinkPasswordDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_link_password_details";
  } else if ([valueObj isSharedContentRemoveMemberDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentRemoveMemberDetailsSerializer
        serialize:valueObj.sharedContentRemoveMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_member_details";
  } else if ([valueObj isSharedContentRequestAccessDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentRequestAccessDetailsSerializer
        serialize:valueObj.sharedContentRequestAccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_request_access_details";
  } else if ([valueObj isSharedContentUnshareDetails]) {
    jsonDict =
        [[DBTEAMLOGSharedContentUnshareDetailsSerializer serialize:valueObj.sharedContentUnshareDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_unshare_details";
  } else if ([valueObj isSharedContentViewDetails]) {
    jsonDict = [[DBTEAMLOGSharedContentViewDetailsSerializer serialize:valueObj.sharedContentViewDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_view_details";
  } else if ([valueObj isSharedFolderChangeLinkPolicyDetails]) {
    jsonDict = [[DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer
        serialize:valueObj.sharedFolderChangeLinkPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_link_policy_details";
  } else if ([valueObj isSharedFolderChangeMembersInheritancePolicyDetails]) {
    jsonDict = [[DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer
        serialize:valueObj.sharedFolderChangeMembersInheritancePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_members_inheritance_policy_details";
  } else if ([valueObj isSharedFolderChangeMembersManagementPolicyDetails]) {
    jsonDict = [[DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer
        serialize:valueObj.sharedFolderChangeMembersManagementPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_members_management_policy_details";
  } else if ([valueObj isSharedFolderChangeMembersPolicyDetails]) {
    jsonDict = [[DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer
        serialize:valueObj.sharedFolderChangeMembersPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_members_policy_details";
  } else if ([valueObj isSharedFolderCreateDetails]) {
    jsonDict =
        [[DBTEAMLOGSharedFolderCreateDetailsSerializer serialize:valueObj.sharedFolderCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_create_details";
  } else if ([valueObj isSharedFolderDeclineInvitationDetails]) {
    jsonDict = [[DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer
        serialize:valueObj.sharedFolderDeclineInvitationDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_decline_invitation_details";
  } else if ([valueObj isSharedFolderMountDetails]) {
    jsonDict = [[DBTEAMLOGSharedFolderMountDetailsSerializer serialize:valueObj.sharedFolderMountDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_mount_details";
  } else if ([valueObj isSharedFolderNestDetails]) {
    jsonDict = [[DBTEAMLOGSharedFolderNestDetailsSerializer serialize:valueObj.sharedFolderNestDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_nest_details";
  } else if ([valueObj isSharedFolderTransferOwnershipDetails]) {
    jsonDict = [[DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer
        serialize:valueObj.sharedFolderTransferOwnershipDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_transfer_ownership_details";
  } else if ([valueObj isSharedFolderUnmountDetails]) {
    jsonDict =
        [[DBTEAMLOGSharedFolderUnmountDetailsSerializer serialize:valueObj.sharedFolderUnmountDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_unmount_details";
  } else if ([valueObj isSharedLinkAddExpiryDetails]) {
    jsonDict =
        [[DBTEAMLOGSharedLinkAddExpiryDetailsSerializer serialize:valueObj.sharedLinkAddExpiryDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_add_expiry_details";
  } else if ([valueObj isSharedLinkChangeExpiryDetails]) {
    jsonDict = [[DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer serialize:valueObj.sharedLinkChangeExpiryDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_link_change_expiry_details";
  } else if ([valueObj isSharedLinkChangeVisibilityDetails]) {
    jsonDict = [[DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer
        serialize:valueObj.sharedLinkChangeVisibilityDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_change_visibility_details";
  } else if ([valueObj isSharedLinkCopyDetails]) {
    jsonDict = [[DBTEAMLOGSharedLinkCopyDetailsSerializer serialize:valueObj.sharedLinkCopyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_copy_details";
  } else if ([valueObj isSharedLinkCreateDetails]) {
    jsonDict = [[DBTEAMLOGSharedLinkCreateDetailsSerializer serialize:valueObj.sharedLinkCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_create_details";
  } else if ([valueObj isSharedLinkDisableDetails]) {
    jsonDict = [[DBTEAMLOGSharedLinkDisableDetailsSerializer serialize:valueObj.sharedLinkDisableDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_disable_details";
  } else if ([valueObj isSharedLinkDownloadDetails]) {
    jsonDict =
        [[DBTEAMLOGSharedLinkDownloadDetailsSerializer serialize:valueObj.sharedLinkDownloadDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_download_details";
  } else if ([valueObj isSharedLinkRemoveExpiryDetails]) {
    jsonDict = [[DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer serialize:valueObj.sharedLinkRemoveExpiryDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_link_remove_expiry_details";
  } else if ([valueObj isSharedLinkShareDetails]) {
    jsonDict = [[DBTEAMLOGSharedLinkShareDetailsSerializer serialize:valueObj.sharedLinkShareDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_share_details";
  } else if ([valueObj isSharedLinkViewDetails]) {
    jsonDict = [[DBTEAMLOGSharedLinkViewDetailsSerializer serialize:valueObj.sharedLinkViewDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_view_details";
  } else if ([valueObj isSharedNoteOpenedDetails]) {
    jsonDict = [[DBTEAMLOGSharedNoteOpenedDetailsSerializer serialize:valueObj.sharedNoteOpenedDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_note_opened_details";
  } else if ([valueObj isShmodelGroupShareDetails]) {
    jsonDict = [[DBTEAMLOGShmodelGroupShareDetailsSerializer serialize:valueObj.shmodelGroupShareDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_group_share_details";
  } else if ([valueObj isShowcaseAccessGrantedDetails]) {
    jsonDict =
        [[DBTEAMLOGShowcaseAccessGrantedDetailsSerializer serialize:valueObj.showcaseAccessGrantedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_access_granted_details";
  } else if ([valueObj isShowcaseAddMemberDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseAddMemberDetailsSerializer serialize:valueObj.showcaseAddMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_add_member_details";
  } else if ([valueObj isShowcaseArchivedDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseArchivedDetailsSerializer serialize:valueObj.showcaseArchivedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_archived_details";
  } else if ([valueObj isShowcaseCreatedDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseCreatedDetailsSerializer serialize:valueObj.showcaseCreatedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_created_details";
  } else if ([valueObj isShowcaseDeleteCommentDetails]) {
    jsonDict =
        [[DBTEAMLOGShowcaseDeleteCommentDetailsSerializer serialize:valueObj.showcaseDeleteCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_delete_comment_details";
  } else if ([valueObj isShowcaseEditedDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseEditedDetailsSerializer serialize:valueObj.showcaseEditedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_edited_details";
  } else if ([valueObj isShowcaseEditCommentDetails]) {
    jsonDict =
        [[DBTEAMLOGShowcaseEditCommentDetailsSerializer serialize:valueObj.showcaseEditCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_edit_comment_details";
  } else if ([valueObj isShowcaseFileAddedDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseFileAddedDetailsSerializer serialize:valueObj.showcaseFileAddedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_file_added_details";
  } else if ([valueObj isShowcaseFileDownloadDetails]) {
    jsonDict =
        [[DBTEAMLOGShowcaseFileDownloadDetailsSerializer serialize:valueObj.showcaseFileDownloadDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_file_download_details";
  } else if ([valueObj isShowcaseFileRemovedDetails]) {
    jsonDict =
        [[DBTEAMLOGShowcaseFileRemovedDetailsSerializer serialize:valueObj.showcaseFileRemovedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_file_removed_details";
  } else if ([valueObj isShowcaseFileViewDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseFileViewDetailsSerializer serialize:valueObj.showcaseFileViewDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_file_view_details";
  } else if ([valueObj isShowcasePermanentlyDeletedDetails]) {
    jsonDict = [[DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer
        serialize:valueObj.showcasePermanentlyDeletedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_permanently_deleted_details";
  } else if ([valueObj isShowcasePostCommentDetails]) {
    jsonDict =
        [[DBTEAMLOGShowcasePostCommentDetailsSerializer serialize:valueObj.showcasePostCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_post_comment_details";
  } else if ([valueObj isShowcaseRemoveMemberDetails]) {
    jsonDict =
        [[DBTEAMLOGShowcaseRemoveMemberDetailsSerializer serialize:valueObj.showcaseRemoveMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_remove_member_details";
  } else if ([valueObj isShowcaseRenamedDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseRenamedDetailsSerializer serialize:valueObj.showcaseRenamedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_renamed_details";
  } else if ([valueObj isShowcaseRequestAccessDetails]) {
    jsonDict =
        [[DBTEAMLOGShowcaseRequestAccessDetailsSerializer serialize:valueObj.showcaseRequestAccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_request_access_details";
  } else if ([valueObj isShowcaseResolveCommentDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseResolveCommentDetailsSerializer serialize:valueObj.showcaseResolveCommentDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"showcase_resolve_comment_details";
  } else if ([valueObj isShowcaseRestoredDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseRestoredDetailsSerializer serialize:valueObj.showcaseRestoredDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_restored_details";
  } else if ([valueObj isShowcaseTrashedDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseTrashedDetailsSerializer serialize:valueObj.showcaseTrashedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_trashed_details";
  } else if ([valueObj isShowcaseTrashedDeprecatedDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer
        serialize:valueObj.showcaseTrashedDeprecatedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_trashed_deprecated_details";
  } else if ([valueObj isShowcaseUnresolveCommentDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer serialize:valueObj.showcaseUnresolveCommentDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"showcase_unresolve_comment_details";
  } else if ([valueObj isShowcaseUntrashedDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseUntrashedDetailsSerializer serialize:valueObj.showcaseUntrashedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_untrashed_details";
  } else if ([valueObj isShowcaseUntrashedDeprecatedDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer
        serialize:valueObj.showcaseUntrashedDeprecatedDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_untrashed_deprecated_details";
  } else if ([valueObj isShowcaseViewDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseViewDetailsSerializer serialize:valueObj.showcaseViewDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_view_details";
  } else if ([valueObj isSsoAddCertDetails]) {
    jsonDict = [[DBTEAMLOGSsoAddCertDetailsSerializer serialize:valueObj.ssoAddCertDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_add_cert_details";
  } else if ([valueObj isSsoAddLoginUrlDetails]) {
    jsonDict = [[DBTEAMLOGSsoAddLoginUrlDetailsSerializer serialize:valueObj.ssoAddLoginUrlDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_add_login_url_details";
  } else if ([valueObj isSsoAddLogoutUrlDetails]) {
    jsonDict = [[DBTEAMLOGSsoAddLogoutUrlDetailsSerializer serialize:valueObj.ssoAddLogoutUrlDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_add_logout_url_details";
  } else if ([valueObj isSsoChangeCertDetails]) {
    jsonDict = [[DBTEAMLOGSsoChangeCertDetailsSerializer serialize:valueObj.ssoChangeCertDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_cert_details";
  } else if ([valueObj isSsoChangeLoginUrlDetails]) {
    jsonDict = [[DBTEAMLOGSsoChangeLoginUrlDetailsSerializer serialize:valueObj.ssoChangeLoginUrlDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_login_url_details";
  } else if ([valueObj isSsoChangeLogoutUrlDetails]) {
    jsonDict =
        [[DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer serialize:valueObj.ssoChangeLogoutUrlDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_logout_url_details";
  } else if ([valueObj isSsoChangeSamlIdentityModeDetails]) {
    jsonDict = [[DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer
        serialize:valueObj.ssoChangeSamlIdentityModeDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_saml_identity_mode_details";
  } else if ([valueObj isSsoRemoveCertDetails]) {
    jsonDict = [[DBTEAMLOGSsoRemoveCertDetailsSerializer serialize:valueObj.ssoRemoveCertDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_remove_cert_details";
  } else if ([valueObj isSsoRemoveLoginUrlDetails]) {
    jsonDict = [[DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer serialize:valueObj.ssoRemoveLoginUrlDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_remove_login_url_details";
  } else if ([valueObj isSsoRemoveLogoutUrlDetails]) {
    jsonDict =
        [[DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer serialize:valueObj.ssoRemoveLogoutUrlDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_remove_logout_url_details";
  } else if ([valueObj isTeamFolderChangeStatusDetails]) {
    jsonDict = [[DBTEAMLOGTeamFolderChangeStatusDetailsSerializer serialize:valueObj.teamFolderChangeStatusDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"team_folder_change_status_details";
  } else if ([valueObj isTeamFolderCreateDetails]) {
    jsonDict = [[DBTEAMLOGTeamFolderCreateDetailsSerializer serialize:valueObj.teamFolderCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_create_details";
  } else if ([valueObj isTeamFolderDowngradeDetails]) {
    jsonDict =
        [[DBTEAMLOGTeamFolderDowngradeDetailsSerializer serialize:valueObj.teamFolderDowngradeDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_downgrade_details";
  } else if ([valueObj isTeamFolderPermanentlyDeleteDetails]) {
    jsonDict = [[DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer
        serialize:valueObj.teamFolderPermanentlyDeleteDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_permanently_delete_details";
  } else if ([valueObj isTeamFolderRenameDetails]) {
    jsonDict = [[DBTEAMLOGTeamFolderRenameDetailsSerializer serialize:valueObj.teamFolderRenameDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_rename_details";
  } else if ([valueObj isTeamSelectiveSyncSettingsChangedDetails]) {
    jsonDict = [[DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer
        serialize:valueObj.teamSelectiveSyncSettingsChangedDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_selective_sync_settings_changed_details";
  } else if ([valueObj isAccountCaptureChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer
        serialize:valueObj.accountCaptureChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_change_policy_details";
  } else if ([valueObj isAllowDownloadDisabledDetails]) {
    jsonDict =
        [[DBTEAMLOGAllowDownloadDisabledDetailsSerializer serialize:valueObj.allowDownloadDisabledDetails] mutableCopy];
    jsonDict[@".tag"] = @"allow_download_disabled_details";
  } else if ([valueObj isAllowDownloadEnabledDetails]) {
    jsonDict =
        [[DBTEAMLOGAllowDownloadEnabledDetailsSerializer serialize:valueObj.allowDownloadEnabledDetails] mutableCopy];
    jsonDict[@".tag"] = @"allow_download_enabled_details";
  } else if ([valueObj isDataPlacementRestrictionChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer
        serialize:valueObj.dataPlacementRestrictionChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"data_placement_restriction_change_policy_details";
  } else if ([valueObj isDataPlacementRestrictionSatisfyPolicyDetails]) {
    jsonDict = [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer
        serialize:valueObj.dataPlacementRestrictionSatisfyPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"data_placement_restriction_satisfy_policy_details";
  } else if ([valueObj isDeviceApprovalsChangeDesktopPolicyDetails]) {
    jsonDict = [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer
        serialize:valueObj.deviceApprovalsChangeDesktopPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_desktop_policy_details";
  } else if ([valueObj isDeviceApprovalsChangeMobilePolicyDetails]) {
    jsonDict = [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer
        serialize:valueObj.deviceApprovalsChangeMobilePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_mobile_policy_details";
  } else if ([valueObj isDeviceApprovalsChangeOverageActionDetails]) {
    jsonDict = [[DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer
        serialize:valueObj.deviceApprovalsChangeOverageActionDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_overage_action_details";
  } else if ([valueObj isDeviceApprovalsChangeUnlinkActionDetails]) {
    jsonDict = [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer
        serialize:valueObj.deviceApprovalsChangeUnlinkActionDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_unlink_action_details";
  } else if ([valueObj isDirectoryRestrictionsAddMembersDetails]) {
    jsonDict = [[DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer
        serialize:valueObj.directoryRestrictionsAddMembersDetails] mutableCopy];
    jsonDict[@".tag"] = @"directory_restrictions_add_members_details";
  } else if ([valueObj isDirectoryRestrictionsRemoveMembersDetails]) {
    jsonDict = [[DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer
        serialize:valueObj.directoryRestrictionsRemoveMembersDetails] mutableCopy];
    jsonDict[@".tag"] = @"directory_restrictions_remove_members_details";
  } else if ([valueObj isEmmAddExceptionDetails]) {
    jsonDict = [[DBTEAMLOGEmmAddExceptionDetailsSerializer serialize:valueObj.emmAddExceptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_add_exception_details";
  } else if ([valueObj isEmmChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGEmmChangePolicyDetailsSerializer serialize:valueObj.emmChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_change_policy_details";
  } else if ([valueObj isEmmRemoveExceptionDetails]) {
    jsonDict =
        [[DBTEAMLOGEmmRemoveExceptionDetailsSerializer serialize:valueObj.emmRemoveExceptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_remove_exception_details";
  } else if ([valueObj isExtendedVersionHistoryChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer
        serialize:valueObj.extendedVersionHistoryChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"extended_version_history_change_policy_details";
  } else if ([valueObj isFileCommentsChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGFileCommentsChangePolicyDetailsSerializer serialize:valueObj.fileCommentsChangePolicyDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"file_comments_change_policy_details";
  } else if ([valueObj isFileRequestsChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGFileRequestsChangePolicyDetailsSerializer serialize:valueObj.fileRequestsChangePolicyDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"file_requests_change_policy_details";
  } else if ([valueObj isFileRequestsEmailsEnabledDetails]) {
    jsonDict = [[DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer
        serialize:valueObj.fileRequestsEmailsEnabledDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_requests_emails_enabled_details";
  } else if ([valueObj isFileRequestsEmailsRestrictedToTeamOnlyDetails]) {
    jsonDict = [[DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer
        serialize:valueObj.fileRequestsEmailsRestrictedToTeamOnlyDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_requests_emails_restricted_to_team_only_details";
  } else if ([valueObj isGoogleSsoChangePolicyDetails]) {
    jsonDict =
        [[DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer serialize:valueObj.googleSsoChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"google_sso_change_policy_details";
  } else if ([valueObj isGroupUserManagementChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer
        serialize:valueObj.groupUserManagementChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_user_management_change_policy_details";
  } else if ([valueObj isMemberRequestsChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer
        serialize:valueObj.memberRequestsChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_requests_change_policy_details";
  } else if ([valueObj isMemberSpaceLimitsAddExceptionDetails]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer
        serialize:valueObj.memberSpaceLimitsAddExceptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_add_exception_details";
  } else if ([valueObj isMemberSpaceLimitsChangeCapsTypePolicyDetails]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer
        serialize:valueObj.memberSpaceLimitsChangeCapsTypePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_change_caps_type_policy_details";
  } else if ([valueObj isMemberSpaceLimitsChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer
        serialize:valueObj.memberSpaceLimitsChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_change_policy_details";
  } else if ([valueObj isMemberSpaceLimitsRemoveExceptionDetails]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer
        serialize:valueObj.memberSpaceLimitsRemoveExceptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_remove_exception_details";
  } else if ([valueObj isMemberSuggestionsChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer
        serialize:valueObj.memberSuggestionsChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_suggestions_change_policy_details";
  } else if ([valueObj isMicrosoftOfficeAddinChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer
        serialize:valueObj.microsoftOfficeAddinChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"microsoft_office_addin_change_policy_details";
  } else if ([valueObj isNetworkControlChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGNetworkControlChangePolicyDetailsSerializer
        serialize:valueObj.networkControlChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"network_control_change_policy_details";
  } else if ([valueObj isPaperChangeDeploymentPolicyDetails]) {
    jsonDict = [[DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer
        serialize:valueObj.paperChangeDeploymentPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_change_deployment_policy_details";
  } else if ([valueObj isPaperChangeMemberLinkPolicyDetails]) {
    jsonDict = [[DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer
        serialize:valueObj.paperChangeMemberLinkPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_change_member_link_policy_details";
  } else if ([valueObj isPaperChangeMemberPolicyDetails]) {
    jsonDict = [[DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer serialize:valueObj.paperChangeMemberPolicyDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_change_member_policy_details";
  } else if ([valueObj isPaperChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGPaperChangePolicyDetailsSerializer serialize:valueObj.paperChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_change_policy_details";
  } else if ([valueObj isPaperEnabledUsersGroupAdditionDetails]) {
    jsonDict = [[DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer
        serialize:valueObj.paperEnabledUsersGroupAdditionDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_enabled_users_group_addition_details";
  } else if ([valueObj isPaperEnabledUsersGroupRemovalDetails]) {
    jsonDict = [[DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer
        serialize:valueObj.paperEnabledUsersGroupRemovalDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_enabled_users_group_removal_details";
  } else if ([valueObj isPermanentDeleteChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer
        serialize:valueObj.permanentDeleteChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"permanent_delete_change_policy_details";
  } else if ([valueObj isSharingChangeFolderJoinPolicyDetails]) {
    jsonDict = [[DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer
        serialize:valueObj.sharingChangeFolderJoinPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"sharing_change_folder_join_policy_details";
  } else if ([valueObj isSharingChangeLinkPolicyDetails]) {
    jsonDict = [[DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer serialize:valueObj.sharingChangeLinkPolicyDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"sharing_change_link_policy_details";
  } else if ([valueObj isSharingChangeMemberPolicyDetails]) {
    jsonDict = [[DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer
        serialize:valueObj.sharingChangeMemberPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"sharing_change_member_policy_details";
  } else if ([valueObj isShowcaseChangeDownloadPolicyDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer
        serialize:valueObj.showcaseChangeDownloadPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_change_download_policy_details";
  } else if ([valueObj isShowcaseChangeEnabledPolicyDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer
        serialize:valueObj.showcaseChangeEnabledPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_change_enabled_policy_details";
  } else if ([valueObj isShowcaseChangeExternalSharingPolicyDetails]) {
    jsonDict = [[DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer
        serialize:valueObj.showcaseChangeExternalSharingPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"showcase_change_external_sharing_policy_details";
  } else if ([valueObj isSmartSyncChangePolicyDetails]) {
    jsonDict =
        [[DBTEAMLOGSmartSyncChangePolicyDetailsSerializer serialize:valueObj.smartSyncChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"smart_sync_change_policy_details";
  } else if ([valueObj isSmartSyncNotOptOutDetails]) {
    jsonDict =
        [[DBTEAMLOGSmartSyncNotOptOutDetailsSerializer serialize:valueObj.smartSyncNotOptOutDetails] mutableCopy];
    jsonDict[@".tag"] = @"smart_sync_not_opt_out_details";
  } else if ([valueObj isSmartSyncOptOutDetails]) {
    jsonDict = [[DBTEAMLOGSmartSyncOptOutDetailsSerializer serialize:valueObj.smartSyncOptOutDetails] mutableCopy];
    jsonDict[@".tag"] = @"smart_sync_opt_out_details";
  } else if ([valueObj isSsoChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGSsoChangePolicyDetailsSerializer serialize:valueObj.ssoChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_policy_details";
  } else if ([valueObj isTfaChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGTfaChangePolicyDetailsSerializer serialize:valueObj.tfaChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_change_policy_details";
  } else if ([valueObj isTwoAccountChangePolicyDetails]) {
    jsonDict = [[DBTEAMLOGTwoAccountChangePolicyDetailsSerializer serialize:valueObj.twoAccountChangePolicyDetails]
        mutableCopy];
    jsonDict[@".tag"] = @"two_account_change_policy_details";
  } else if ([valueObj isWebSessionsChangeFixedLengthPolicyDetails]) {
    jsonDict = [[DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer
        serialize:valueObj.webSessionsChangeFixedLengthPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"web_sessions_change_fixed_length_policy_details";
  } else if ([valueObj isWebSessionsChangeIdleLengthPolicyDetails]) {
    jsonDict = [[DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer
        serialize:valueObj.webSessionsChangeIdleLengthPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"web_sessions_change_idle_length_policy_details";
  } else if ([valueObj isTeamMergeFromDetails]) {
    jsonDict = [[DBTEAMLOGTeamMergeFromDetailsSerializer serialize:valueObj.teamMergeFromDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_merge_from_details";
  } else if ([valueObj isTeamMergeToDetails]) {
    jsonDict = [[DBTEAMLOGTeamMergeToDetailsSerializer serialize:valueObj.teamMergeToDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_merge_to_details";
  } else if ([valueObj isTeamProfileAddLogoDetails]) {
    jsonDict =
        [[DBTEAMLOGTeamProfileAddLogoDetailsSerializer serialize:valueObj.teamProfileAddLogoDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_add_logo_details";
  } else if ([valueObj isTeamProfileChangeDefaultLanguageDetails]) {
    jsonDict = [[DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer
        serialize:valueObj.teamProfileChangeDefaultLanguageDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_change_default_language_details";
  } else if ([valueObj isTeamProfileChangeLogoDetails]) {
    jsonDict =
        [[DBTEAMLOGTeamProfileChangeLogoDetailsSerializer serialize:valueObj.teamProfileChangeLogoDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_change_logo_details";
  } else if ([valueObj isTeamProfileChangeNameDetails]) {
    jsonDict =
        [[DBTEAMLOGTeamProfileChangeNameDetailsSerializer serialize:valueObj.teamProfileChangeNameDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_change_name_details";
  } else if ([valueObj isTeamProfileRemoveLogoDetails]) {
    jsonDict =
        [[DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer serialize:valueObj.teamProfileRemoveLogoDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_remove_logo_details";
  } else if ([valueObj isTfaAddBackupPhoneDetails]) {
    jsonDict = [[DBTEAMLOGTfaAddBackupPhoneDetailsSerializer serialize:valueObj.tfaAddBackupPhoneDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_add_backup_phone_details";
  } else if ([valueObj isTfaAddSecurityKeyDetails]) {
    jsonDict = [[DBTEAMLOGTfaAddSecurityKeyDetailsSerializer serialize:valueObj.tfaAddSecurityKeyDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_add_security_key_details";
  } else if ([valueObj isTfaChangeBackupPhoneDetails]) {
    jsonDict =
        [[DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer serialize:valueObj.tfaChangeBackupPhoneDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_change_backup_phone_details";
  } else if ([valueObj isTfaChangeStatusDetails]) {
    jsonDict = [[DBTEAMLOGTfaChangeStatusDetailsSerializer serialize:valueObj.tfaChangeStatusDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_change_status_details";
  } else if ([valueObj isTfaRemoveBackupPhoneDetails]) {
    jsonDict =
        [[DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer serialize:valueObj.tfaRemoveBackupPhoneDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_remove_backup_phone_details";
  } else if ([valueObj isTfaRemoveSecurityKeyDetails]) {
    jsonDict =
        [[DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer serialize:valueObj.tfaRemoveSecurityKeyDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_remove_security_key_details";
  } else if ([valueObj isTfaResetDetails]) {
    jsonDict = [[DBTEAMLOGTfaResetDetailsSerializer serialize:valueObj.tfaResetDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_reset_details";
  } else if ([valueObj isMissingDetails]) {
    jsonDict = [[DBTEAMLOGMissingDetailsSerializer serialize:valueObj.missingDetails] mutableCopy];
    jsonDict[@".tag"] = @"missing_details";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEventDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"app_link_team_details"]) {
    DBTEAMLOGAppLinkTeamDetails *appLinkTeamDetails = [DBTEAMLOGAppLinkTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppLinkTeamDetails:appLinkTeamDetails];
  } else if ([tag isEqualToString:@"app_link_user_details"]) {
    DBTEAMLOGAppLinkUserDetails *appLinkUserDetails = [DBTEAMLOGAppLinkUserDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppLinkUserDetails:appLinkUserDetails];
  } else if ([tag isEqualToString:@"app_unlink_team_details"]) {
    DBTEAMLOGAppUnlinkTeamDetails *appUnlinkTeamDetails =
        [DBTEAMLOGAppUnlinkTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppUnlinkTeamDetails:appUnlinkTeamDetails];
  } else if ([tag isEqualToString:@"app_unlink_user_details"]) {
    DBTEAMLOGAppUnlinkUserDetails *appUnlinkUserDetails =
        [DBTEAMLOGAppUnlinkUserDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppUnlinkUserDetails:appUnlinkUserDetails];
  } else if ([tag isEqualToString:@"file_add_comment_details"]) {
    DBTEAMLOGFileAddCommentDetails *fileAddCommentDetails =
        [DBTEAMLOGFileAddCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileAddCommentDetails:fileAddCommentDetails];
  } else if ([tag isEqualToString:@"file_change_comment_subscription_details"]) {
    DBTEAMLOGFileChangeCommentSubscriptionDetails *fileChangeCommentSubscriptionDetails =
        [DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithFileChangeCommentSubscriptionDetails:fileChangeCommentSubscriptionDetails];
  } else if ([tag isEqualToString:@"file_delete_comment_details"]) {
    DBTEAMLOGFileDeleteCommentDetails *fileDeleteCommentDetails =
        [DBTEAMLOGFileDeleteCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileDeleteCommentDetails:fileDeleteCommentDetails];
  } else if ([tag isEqualToString:@"file_like_comment_details"]) {
    DBTEAMLOGFileLikeCommentDetails *fileLikeCommentDetails =
        [DBTEAMLOGFileLikeCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileLikeCommentDetails:fileLikeCommentDetails];
  } else if ([tag isEqualToString:@"file_resolve_comment_details"]) {
    DBTEAMLOGFileResolveCommentDetails *fileResolveCommentDetails =
        [DBTEAMLOGFileResolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileResolveCommentDetails:fileResolveCommentDetails];
  } else if ([tag isEqualToString:@"file_unlike_comment_details"]) {
    DBTEAMLOGFileUnlikeCommentDetails *fileUnlikeCommentDetails =
        [DBTEAMLOGFileUnlikeCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileUnlikeCommentDetails:fileUnlikeCommentDetails];
  } else if ([tag isEqualToString:@"file_unresolve_comment_details"]) {
    DBTEAMLOGFileUnresolveCommentDetails *fileUnresolveCommentDetails =
        [DBTEAMLOGFileUnresolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileUnresolveCommentDetails:fileUnresolveCommentDetails];
  } else if ([tag isEqualToString:@"device_change_ip_desktop_details"]) {
    DBTEAMLOGDeviceChangeIpDesktopDetails *deviceChangeIpDesktopDetails =
        [DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceChangeIpDesktopDetails:deviceChangeIpDesktopDetails];
  } else if ([tag isEqualToString:@"device_change_ip_mobile_details"]) {
    DBTEAMLOGDeviceChangeIpMobileDetails *deviceChangeIpMobileDetails =
        [DBTEAMLOGDeviceChangeIpMobileDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceChangeIpMobileDetails:deviceChangeIpMobileDetails];
  } else if ([tag isEqualToString:@"device_change_ip_web_details"]) {
    DBTEAMLOGDeviceChangeIpWebDetails *deviceChangeIpWebDetails =
        [DBTEAMLOGDeviceChangeIpWebDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceChangeIpWebDetails:deviceChangeIpWebDetails];
  } else if ([tag isEqualToString:@"device_delete_on_unlink_fail_details"]) {
    DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *deviceDeleteOnUnlinkFailDetails =
        [DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceDeleteOnUnlinkFailDetails:deviceDeleteOnUnlinkFailDetails];
  } else if ([tag isEqualToString:@"device_delete_on_unlink_success_details"]) {
    DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *deviceDeleteOnUnlinkSuccessDetails =
        [DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithDeviceDeleteOnUnlinkSuccessDetails:deviceDeleteOnUnlinkSuccessDetails];
  } else if ([tag isEqualToString:@"device_link_fail_details"]) {
    DBTEAMLOGDeviceLinkFailDetails *deviceLinkFailDetails =
        [DBTEAMLOGDeviceLinkFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceLinkFailDetails:deviceLinkFailDetails];
  } else if ([tag isEqualToString:@"device_link_success_details"]) {
    DBTEAMLOGDeviceLinkSuccessDetails *deviceLinkSuccessDetails =
        [DBTEAMLOGDeviceLinkSuccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceLinkSuccessDetails:deviceLinkSuccessDetails];
  } else if ([tag isEqualToString:@"device_management_disabled_details"]) {
    DBTEAMLOGDeviceManagementDisabledDetails *deviceManagementDisabledDetails =
        [DBTEAMLOGDeviceManagementDisabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceManagementDisabledDetails:deviceManagementDisabledDetails];
  } else if ([tag isEqualToString:@"device_management_enabled_details"]) {
    DBTEAMLOGDeviceManagementEnabledDetails *deviceManagementEnabledDetails =
        [DBTEAMLOGDeviceManagementEnabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceManagementEnabledDetails:deviceManagementEnabledDetails];
  } else if ([tag isEqualToString:@"device_unlink_details"]) {
    DBTEAMLOGDeviceUnlinkDetails *deviceUnlinkDetails = [DBTEAMLOGDeviceUnlinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceUnlinkDetails:deviceUnlinkDetails];
  } else if ([tag isEqualToString:@"emm_refresh_auth_token_details"]) {
    DBTEAMLOGEmmRefreshAuthTokenDetails *emmRefreshAuthTokenDetails =
        [DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmRefreshAuthTokenDetails:emmRefreshAuthTokenDetails];
  } else if ([tag isEqualToString:@"account_capture_change_availability_details"]) {
    DBTEAMLOGAccountCaptureChangeAvailabilityDetails *accountCaptureChangeAvailabilityDetails =
        [DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithAccountCaptureChangeAvailabilityDetails:accountCaptureChangeAvailabilityDetails];
  } else if ([tag isEqualToString:@"account_capture_migrate_account_details"]) {
    DBTEAMLOGAccountCaptureMigrateAccountDetails *accountCaptureMigrateAccountDetails =
        [DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithAccountCaptureMigrateAccountDetails:accountCaptureMigrateAccountDetails];
  } else if ([tag isEqualToString:@"account_capture_notification_emails_sent_details"]) {
    DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *accountCaptureNotificationEmailsSentDetails =
        [DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithAccountCaptureNotificationEmailsSentDetails:accountCaptureNotificationEmailsSentDetails];
  } else if ([tag isEqualToString:@"account_capture_relinquish_account_details"]) {
    DBTEAMLOGAccountCaptureRelinquishAccountDetails *accountCaptureRelinquishAccountDetails =
        [DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithAccountCaptureRelinquishAccountDetails:accountCaptureRelinquishAccountDetails];
  } else if ([tag isEqualToString:@"disabled_domain_invites_details"]) {
    DBTEAMLOGDisabledDomainInvitesDetails *disabledDomainInvitesDetails =
        [DBTEAMLOGDisabledDomainInvitesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDisabledDomainInvitesDetails:disabledDomainInvitesDetails];
  } else if ([tag isEqualToString:@"domain_invites_approve_request_to_join_team_details"]) {
    DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *domainInvitesApproveRequestToJoinTeamDetails =
        [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesApproveRequestToJoinTeamDetails:domainInvitesApproveRequestToJoinTeamDetails];
  } else if ([tag isEqualToString:@"domain_invites_decline_request_to_join_team_details"]) {
    DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *domainInvitesDeclineRequestToJoinTeamDetails =
        [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesDeclineRequestToJoinTeamDetails:domainInvitesDeclineRequestToJoinTeamDetails];
  } else if ([tag isEqualToString:@"domain_invites_email_existing_users_details"]) {
    DBTEAMLOGDomainInvitesEmailExistingUsersDetails *domainInvitesEmailExistingUsersDetails =
        [DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesEmailExistingUsersDetails:domainInvitesEmailExistingUsersDetails];
  } else if ([tag isEqualToString:@"domain_invites_request_to_join_team_details"]) {
    DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *domainInvitesRequestToJoinTeamDetails =
        [DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesRequestToJoinTeamDetails:domainInvitesRequestToJoinTeamDetails];
  } else if ([tag isEqualToString:@"domain_invites_set_invite_new_user_pref_to_no_details"]) {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *domainInvitesSetInviteNewUserPrefToNoDetails =
        [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesSetInviteNewUserPrefToNoDetails:domainInvitesSetInviteNewUserPrefToNoDetails];
  } else if ([tag isEqualToString:@"domain_invites_set_invite_new_user_pref_to_yes_details"]) {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *domainInvitesSetInviteNewUserPrefToYesDetails =
        [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesSetInviteNewUserPrefToYesDetails:domainInvitesSetInviteNewUserPrefToYesDetails];
  } else if ([tag isEqualToString:@"domain_verification_add_domain_fail_details"]) {
    DBTEAMLOGDomainVerificationAddDomainFailDetails *domainVerificationAddDomainFailDetails =
        [DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainVerificationAddDomainFailDetails:domainVerificationAddDomainFailDetails];
  } else if ([tag isEqualToString:@"domain_verification_add_domain_success_details"]) {
    DBTEAMLOGDomainVerificationAddDomainSuccessDetails *domainVerificationAddDomainSuccessDetails =
        [DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainVerificationAddDomainSuccessDetails:domainVerificationAddDomainSuccessDetails];
  } else if ([tag isEqualToString:@"domain_verification_remove_domain_details"]) {
    DBTEAMLOGDomainVerificationRemoveDomainDetails *domainVerificationRemoveDomainDetails =
        [DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainVerificationRemoveDomainDetails:domainVerificationRemoveDomainDetails];
  } else if ([tag isEqualToString:@"enabled_domain_invites_details"]) {
    DBTEAMLOGEnabledDomainInvitesDetails *enabledDomainInvitesDetails =
        [DBTEAMLOGEnabledDomainInvitesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEnabledDomainInvitesDetails:enabledDomainInvitesDetails];
  } else if ([tag isEqualToString:@"create_folder_details"]) {
    DBTEAMLOGCreateFolderDetails *createFolderDetails = [DBTEAMLOGCreateFolderDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithCreateFolderDetails:createFolderDetails];
  } else if ([tag isEqualToString:@"file_add_details"]) {
    DBTEAMLOGFileAddDetails *fileAddDetails = [DBTEAMLOGFileAddDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileAddDetails:fileAddDetails];
  } else if ([tag isEqualToString:@"file_copy_details"]) {
    DBTEAMLOGFileCopyDetails *fileCopyDetails = [DBTEAMLOGFileCopyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileCopyDetails:fileCopyDetails];
  } else if ([tag isEqualToString:@"file_delete_details"]) {
    DBTEAMLOGFileDeleteDetails *fileDeleteDetails = [DBTEAMLOGFileDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileDeleteDetails:fileDeleteDetails];
  } else if ([tag isEqualToString:@"file_download_details"]) {
    DBTEAMLOGFileDownloadDetails *fileDownloadDetails = [DBTEAMLOGFileDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileDownloadDetails:fileDownloadDetails];
  } else if ([tag isEqualToString:@"file_edit_details"]) {
    DBTEAMLOGFileEditDetails *fileEditDetails = [DBTEAMLOGFileEditDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileEditDetails:fileEditDetails];
  } else if ([tag isEqualToString:@"file_get_copy_reference_details"]) {
    DBTEAMLOGFileGetCopyReferenceDetails *fileGetCopyReferenceDetails =
        [DBTEAMLOGFileGetCopyReferenceDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileGetCopyReferenceDetails:fileGetCopyReferenceDetails];
  } else if ([tag isEqualToString:@"file_move_details"]) {
    DBTEAMLOGFileMoveDetails *fileMoveDetails = [DBTEAMLOGFileMoveDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileMoveDetails:fileMoveDetails];
  } else if ([tag isEqualToString:@"file_permanently_delete_details"]) {
    DBTEAMLOGFilePermanentlyDeleteDetails *filePermanentlyDeleteDetails =
        [DBTEAMLOGFilePermanentlyDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFilePermanentlyDeleteDetails:filePermanentlyDeleteDetails];
  } else if ([tag isEqualToString:@"file_preview_details"]) {
    DBTEAMLOGFilePreviewDetails *filePreviewDetails = [DBTEAMLOGFilePreviewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFilePreviewDetails:filePreviewDetails];
  } else if ([tag isEqualToString:@"file_rename_details"]) {
    DBTEAMLOGFileRenameDetails *fileRenameDetails = [DBTEAMLOGFileRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRenameDetails:fileRenameDetails];
  } else if ([tag isEqualToString:@"file_restore_details"]) {
    DBTEAMLOGFileRestoreDetails *fileRestoreDetails = [DBTEAMLOGFileRestoreDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRestoreDetails:fileRestoreDetails];
  } else if ([tag isEqualToString:@"file_revert_details"]) {
    DBTEAMLOGFileRevertDetails *fileRevertDetails = [DBTEAMLOGFileRevertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRevertDetails:fileRevertDetails];
  } else if ([tag isEqualToString:@"file_rollback_changes_details"]) {
    DBTEAMLOGFileRollbackChangesDetails *fileRollbackChangesDetails =
        [DBTEAMLOGFileRollbackChangesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRollbackChangesDetails:fileRollbackChangesDetails];
  } else if ([tag isEqualToString:@"file_save_copy_reference_details"]) {
    DBTEAMLOGFileSaveCopyReferenceDetails *fileSaveCopyReferenceDetails =
        [DBTEAMLOGFileSaveCopyReferenceDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileSaveCopyReferenceDetails:fileSaveCopyReferenceDetails];
  } else if ([tag isEqualToString:@"file_request_change_details"]) {
    DBTEAMLOGFileRequestChangeDetails *fileRequestChangeDetails =
        [DBTEAMLOGFileRequestChangeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestChangeDetails:fileRequestChangeDetails];
  } else if ([tag isEqualToString:@"file_request_close_details"]) {
    DBTEAMLOGFileRequestCloseDetails *fileRequestCloseDetails =
        [DBTEAMLOGFileRequestCloseDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestCloseDetails:fileRequestCloseDetails];
  } else if ([tag isEqualToString:@"file_request_create_details"]) {
    DBTEAMLOGFileRequestCreateDetails *fileRequestCreateDetails =
        [DBTEAMLOGFileRequestCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestCreateDetails:fileRequestCreateDetails];
  } else if ([tag isEqualToString:@"file_request_receive_file_details"]) {
    DBTEAMLOGFileRequestReceiveFileDetails *fileRequestReceiveFileDetails =
        [DBTEAMLOGFileRequestReceiveFileDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestReceiveFileDetails:fileRequestReceiveFileDetails];
  } else if ([tag isEqualToString:@"group_add_external_id_details"]) {
    DBTEAMLOGGroupAddExternalIdDetails *groupAddExternalIdDetails =
        [DBTEAMLOGGroupAddExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupAddExternalIdDetails:groupAddExternalIdDetails];
  } else if ([tag isEqualToString:@"group_add_member_details"]) {
    DBTEAMLOGGroupAddMemberDetails *groupAddMemberDetails =
        [DBTEAMLOGGroupAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupAddMemberDetails:groupAddMemberDetails];
  } else if ([tag isEqualToString:@"group_change_external_id_details"]) {
    DBTEAMLOGGroupChangeExternalIdDetails *groupChangeExternalIdDetails =
        [DBTEAMLOGGroupChangeExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupChangeExternalIdDetails:groupChangeExternalIdDetails];
  } else if ([tag isEqualToString:@"group_change_management_type_details"]) {
    DBTEAMLOGGroupChangeManagementTypeDetails *groupChangeManagementTypeDetails =
        [DBTEAMLOGGroupChangeManagementTypeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupChangeManagementTypeDetails:groupChangeManagementTypeDetails];
  } else if ([tag isEqualToString:@"group_change_member_role_details"]) {
    DBTEAMLOGGroupChangeMemberRoleDetails *groupChangeMemberRoleDetails =
        [DBTEAMLOGGroupChangeMemberRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupChangeMemberRoleDetails:groupChangeMemberRoleDetails];
  } else if ([tag isEqualToString:@"group_create_details"]) {
    DBTEAMLOGGroupCreateDetails *groupCreateDetails = [DBTEAMLOGGroupCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupCreateDetails:groupCreateDetails];
  } else if ([tag isEqualToString:@"group_delete_details"]) {
    DBTEAMLOGGroupDeleteDetails *groupDeleteDetails = [DBTEAMLOGGroupDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupDeleteDetails:groupDeleteDetails];
  } else if ([tag isEqualToString:@"group_description_updated_details"]) {
    DBTEAMLOGGroupDescriptionUpdatedDetails *groupDescriptionUpdatedDetails =
        [DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupDescriptionUpdatedDetails:groupDescriptionUpdatedDetails];
  } else if ([tag isEqualToString:@"group_join_policy_updated_details"]) {
    DBTEAMLOGGroupJoinPolicyUpdatedDetails *groupJoinPolicyUpdatedDetails =
        [DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupJoinPolicyUpdatedDetails:groupJoinPolicyUpdatedDetails];
  } else if ([tag isEqualToString:@"group_moved_details"]) {
    DBTEAMLOGGroupMovedDetails *groupMovedDetails = [DBTEAMLOGGroupMovedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupMovedDetails:groupMovedDetails];
  } else if ([tag isEqualToString:@"group_remove_external_id_details"]) {
    DBTEAMLOGGroupRemoveExternalIdDetails *groupRemoveExternalIdDetails =
        [DBTEAMLOGGroupRemoveExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupRemoveExternalIdDetails:groupRemoveExternalIdDetails];
  } else if ([tag isEqualToString:@"group_remove_member_details"]) {
    DBTEAMLOGGroupRemoveMemberDetails *groupRemoveMemberDetails =
        [DBTEAMLOGGroupRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupRemoveMemberDetails:groupRemoveMemberDetails];
  } else if ([tag isEqualToString:@"group_rename_details"]) {
    DBTEAMLOGGroupRenameDetails *groupRenameDetails = [DBTEAMLOGGroupRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupRenameDetails:groupRenameDetails];
  } else if ([tag isEqualToString:@"emm_error_details"]) {
    DBTEAMLOGEmmErrorDetails *emmErrorDetails = [DBTEAMLOGEmmErrorDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmErrorDetails:emmErrorDetails];
  } else if ([tag isEqualToString:@"login_fail_details"]) {
    DBTEAMLOGLoginFailDetails *loginFailDetails = [DBTEAMLOGLoginFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLoginFailDetails:loginFailDetails];
  } else if ([tag isEqualToString:@"login_success_details"]) {
    DBTEAMLOGLoginSuccessDetails *loginSuccessDetails = [DBTEAMLOGLoginSuccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLoginSuccessDetails:loginSuccessDetails];
  } else if ([tag isEqualToString:@"logout_details"]) {
    DBTEAMLOGLogoutDetails *logoutDetails = [DBTEAMLOGLogoutDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLogoutDetails:logoutDetails];
  } else if ([tag isEqualToString:@"reseller_support_session_end_details"]) {
    DBTEAMLOGResellerSupportSessionEndDetails *resellerSupportSessionEndDetails =
        [DBTEAMLOGResellerSupportSessionEndDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithResellerSupportSessionEndDetails:resellerSupportSessionEndDetails];
  } else if ([tag isEqualToString:@"reseller_support_session_start_details"]) {
    DBTEAMLOGResellerSupportSessionStartDetails *resellerSupportSessionStartDetails =
        [DBTEAMLOGResellerSupportSessionStartDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithResellerSupportSessionStartDetails:resellerSupportSessionStartDetails];
  } else if ([tag isEqualToString:@"sign_in_as_session_end_details"]) {
    DBTEAMLOGSignInAsSessionEndDetails *signInAsSessionEndDetails =
        [DBTEAMLOGSignInAsSessionEndDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSignInAsSessionEndDetails:signInAsSessionEndDetails];
  } else if ([tag isEqualToString:@"sign_in_as_session_start_details"]) {
    DBTEAMLOGSignInAsSessionStartDetails *signInAsSessionStartDetails =
        [DBTEAMLOGSignInAsSessionStartDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSignInAsSessionStartDetails:signInAsSessionStartDetails];
  } else if ([tag isEqualToString:@"sso_error_details"]) {
    DBTEAMLOGSsoErrorDetails *ssoErrorDetails = [DBTEAMLOGSsoErrorDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoErrorDetails:ssoErrorDetails];
  } else if ([tag isEqualToString:@"member_add_name_details"]) {
    DBTEAMLOGMemberAddNameDetails *memberAddNameDetails =
        [DBTEAMLOGMemberAddNameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberAddNameDetails:memberAddNameDetails];
  } else if ([tag isEqualToString:@"member_change_admin_role_details"]) {
    DBTEAMLOGMemberChangeAdminRoleDetails *memberChangeAdminRoleDetails =
        [DBTEAMLOGMemberChangeAdminRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeAdminRoleDetails:memberChangeAdminRoleDetails];
  } else if ([tag isEqualToString:@"member_change_email_details"]) {
    DBTEAMLOGMemberChangeEmailDetails *memberChangeEmailDetails =
        [DBTEAMLOGMemberChangeEmailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeEmailDetails:memberChangeEmailDetails];
  } else if ([tag isEqualToString:@"member_change_membership_type_details"]) {
    DBTEAMLOGMemberChangeMembershipTypeDetails *memberChangeMembershipTypeDetails =
        [DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeMembershipTypeDetails:memberChangeMembershipTypeDetails];
  } else if ([tag isEqualToString:@"member_change_name_details"]) {
    DBTEAMLOGMemberChangeNameDetails *memberChangeNameDetails =
        [DBTEAMLOGMemberChangeNameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeNameDetails:memberChangeNameDetails];
  } else if ([tag isEqualToString:@"member_change_status_details"]) {
    DBTEAMLOGMemberChangeStatusDetails *memberChangeStatusDetails =
        [DBTEAMLOGMemberChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeStatusDetails:memberChangeStatusDetails];
  } else if ([tag isEqualToString:@"member_permanently_delete_account_contents_details"]) {
    DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *memberPermanentlyDeleteAccountContentsDetails =
        [DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberPermanentlyDeleteAccountContentsDetails:memberPermanentlyDeleteAccountContentsDetails];
  } else if ([tag isEqualToString:@"member_space_limits_add_custom_quota_details"]) {
    DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails *memberSpaceLimitsAddCustomQuotaDetails =
        [DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsAddCustomQuotaDetails:memberSpaceLimitsAddCustomQuotaDetails];
  } else if ([tag isEqualToString:@"member_space_limits_change_custom_quota_details"]) {
    DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails *memberSpaceLimitsChangeCustomQuotaDetails =
        [DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsChangeCustomQuotaDetails:memberSpaceLimitsChangeCustomQuotaDetails];
  } else if ([tag isEqualToString:@"member_space_limits_change_status_details"]) {
    DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *memberSpaceLimitsChangeStatusDetails =
        [DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsChangeStatusDetails:memberSpaceLimitsChangeStatusDetails];
  } else if ([tag isEqualToString:@"member_space_limits_remove_custom_quota_details"]) {
    DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails *memberSpaceLimitsRemoveCustomQuotaDetails =
        [DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsRemoveCustomQuotaDetails:memberSpaceLimitsRemoveCustomQuotaDetails];
  } else if ([tag isEqualToString:@"member_suggest_details"]) {
    DBTEAMLOGMemberSuggestDetails *memberSuggestDetails =
        [DBTEAMLOGMemberSuggestDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberSuggestDetails:memberSuggestDetails];
  } else if ([tag isEqualToString:@"member_transfer_account_contents_details"]) {
    DBTEAMLOGMemberTransferAccountContentsDetails *memberTransferAccountContentsDetails =
        [DBTEAMLOGMemberTransferAccountContentsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberTransferAccountContentsDetails:memberTransferAccountContentsDetails];
  } else if ([tag isEqualToString:@"secondary_mails_policy_changed_details"]) {
    DBTEAMLOGSecondaryMailsPolicyChangedDetails *secondaryMailsPolicyChangedDetails =
        [DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSecondaryMailsPolicyChangedDetails:secondaryMailsPolicyChangedDetails];
  } else if ([tag isEqualToString:@"paper_content_add_member_details"]) {
    DBTEAMLOGPaperContentAddMemberDetails *paperContentAddMemberDetails =
        [DBTEAMLOGPaperContentAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentAddMemberDetails:paperContentAddMemberDetails];
  } else if ([tag isEqualToString:@"paper_content_add_to_folder_details"]) {
    DBTEAMLOGPaperContentAddToFolderDetails *paperContentAddToFolderDetails =
        [DBTEAMLOGPaperContentAddToFolderDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentAddToFolderDetails:paperContentAddToFolderDetails];
  } else if ([tag isEqualToString:@"paper_content_archive_details"]) {
    DBTEAMLOGPaperContentArchiveDetails *paperContentArchiveDetails =
        [DBTEAMLOGPaperContentArchiveDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentArchiveDetails:paperContentArchiveDetails];
  } else if ([tag isEqualToString:@"paper_content_create_details"]) {
    DBTEAMLOGPaperContentCreateDetails *paperContentCreateDetails =
        [DBTEAMLOGPaperContentCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentCreateDetails:paperContentCreateDetails];
  } else if ([tag isEqualToString:@"paper_content_permanently_delete_details"]) {
    DBTEAMLOGPaperContentPermanentlyDeleteDetails *paperContentPermanentlyDeleteDetails =
        [DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperContentPermanentlyDeleteDetails:paperContentPermanentlyDeleteDetails];
  } else if ([tag isEqualToString:@"paper_content_remove_from_folder_details"]) {
    DBTEAMLOGPaperContentRemoveFromFolderDetails *paperContentRemoveFromFolderDetails =
        [DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperContentRemoveFromFolderDetails:paperContentRemoveFromFolderDetails];
  } else if ([tag isEqualToString:@"paper_content_remove_member_details"]) {
    DBTEAMLOGPaperContentRemoveMemberDetails *paperContentRemoveMemberDetails =
        [DBTEAMLOGPaperContentRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentRemoveMemberDetails:paperContentRemoveMemberDetails];
  } else if ([tag isEqualToString:@"paper_content_rename_details"]) {
    DBTEAMLOGPaperContentRenameDetails *paperContentRenameDetails =
        [DBTEAMLOGPaperContentRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentRenameDetails:paperContentRenameDetails];
  } else if ([tag isEqualToString:@"paper_content_restore_details"]) {
    DBTEAMLOGPaperContentRestoreDetails *paperContentRestoreDetails =
        [DBTEAMLOGPaperContentRestoreDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentRestoreDetails:paperContentRestoreDetails];
  } else if ([tag isEqualToString:@"paper_doc_add_comment_details"]) {
    DBTEAMLOGPaperDocAddCommentDetails *paperDocAddCommentDetails =
        [DBTEAMLOGPaperDocAddCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocAddCommentDetails:paperDocAddCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_change_member_role_details"]) {
    DBTEAMLOGPaperDocChangeMemberRoleDetails *paperDocChangeMemberRoleDetails =
        [DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocChangeMemberRoleDetails:paperDocChangeMemberRoleDetails];
  } else if ([tag isEqualToString:@"paper_doc_change_sharing_policy_details"]) {
    DBTEAMLOGPaperDocChangeSharingPolicyDetails *paperDocChangeSharingPolicyDetails =
        [DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperDocChangeSharingPolicyDetails:paperDocChangeSharingPolicyDetails];
  } else if ([tag isEqualToString:@"paper_doc_change_subscription_details"]) {
    DBTEAMLOGPaperDocChangeSubscriptionDetails *paperDocChangeSubscriptionDetails =
        [DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocChangeSubscriptionDetails:paperDocChangeSubscriptionDetails];
  } else if ([tag isEqualToString:@"paper_doc_deleted_details"]) {
    DBTEAMLOGPaperDocDeletedDetails *paperDocDeletedDetails =
        [DBTEAMLOGPaperDocDeletedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocDeletedDetails:paperDocDeletedDetails];
  } else if ([tag isEqualToString:@"paper_doc_delete_comment_details"]) {
    DBTEAMLOGPaperDocDeleteCommentDetails *paperDocDeleteCommentDetails =
        [DBTEAMLOGPaperDocDeleteCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocDeleteCommentDetails:paperDocDeleteCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_download_details"]) {
    DBTEAMLOGPaperDocDownloadDetails *paperDocDownloadDetails =
        [DBTEAMLOGPaperDocDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocDownloadDetails:paperDocDownloadDetails];
  } else if ([tag isEqualToString:@"paper_doc_edit_details"]) {
    DBTEAMLOGPaperDocEditDetails *paperDocEditDetails = [DBTEAMLOGPaperDocEditDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocEditDetails:paperDocEditDetails];
  } else if ([tag isEqualToString:@"paper_doc_edit_comment_details"]) {
    DBTEAMLOGPaperDocEditCommentDetails *paperDocEditCommentDetails =
        [DBTEAMLOGPaperDocEditCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocEditCommentDetails:paperDocEditCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_followed_details"]) {
    DBTEAMLOGPaperDocFollowedDetails *paperDocFollowedDetails =
        [DBTEAMLOGPaperDocFollowedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocFollowedDetails:paperDocFollowedDetails];
  } else if ([tag isEqualToString:@"paper_doc_mention_details"]) {
    DBTEAMLOGPaperDocMentionDetails *paperDocMentionDetails =
        [DBTEAMLOGPaperDocMentionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocMentionDetails:paperDocMentionDetails];
  } else if ([tag isEqualToString:@"paper_doc_request_access_details"]) {
    DBTEAMLOGPaperDocRequestAccessDetails *paperDocRequestAccessDetails =
        [DBTEAMLOGPaperDocRequestAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocRequestAccessDetails:paperDocRequestAccessDetails];
  } else if ([tag isEqualToString:@"paper_doc_resolve_comment_details"]) {
    DBTEAMLOGPaperDocResolveCommentDetails *paperDocResolveCommentDetails =
        [DBTEAMLOGPaperDocResolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocResolveCommentDetails:paperDocResolveCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_revert_details"]) {
    DBTEAMLOGPaperDocRevertDetails *paperDocRevertDetails =
        [DBTEAMLOGPaperDocRevertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocRevertDetails:paperDocRevertDetails];
  } else if ([tag isEqualToString:@"paper_doc_slack_share_details"]) {
    DBTEAMLOGPaperDocSlackShareDetails *paperDocSlackShareDetails =
        [DBTEAMLOGPaperDocSlackShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocSlackShareDetails:paperDocSlackShareDetails];
  } else if ([tag isEqualToString:@"paper_doc_team_invite_details"]) {
    DBTEAMLOGPaperDocTeamInviteDetails *paperDocTeamInviteDetails =
        [DBTEAMLOGPaperDocTeamInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocTeamInviteDetails:paperDocTeamInviteDetails];
  } else if ([tag isEqualToString:@"paper_doc_trashed_details"]) {
    DBTEAMLOGPaperDocTrashedDetails *paperDocTrashedDetails =
        [DBTEAMLOGPaperDocTrashedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocTrashedDetails:paperDocTrashedDetails];
  } else if ([tag isEqualToString:@"paper_doc_unresolve_comment_details"]) {
    DBTEAMLOGPaperDocUnresolveCommentDetails *paperDocUnresolveCommentDetails =
        [DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocUnresolveCommentDetails:paperDocUnresolveCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_untrashed_details"]) {
    DBTEAMLOGPaperDocUntrashedDetails *paperDocUntrashedDetails =
        [DBTEAMLOGPaperDocUntrashedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocUntrashedDetails:paperDocUntrashedDetails];
  } else if ([tag isEqualToString:@"paper_doc_view_details"]) {
    DBTEAMLOGPaperDocViewDetails *paperDocViewDetails = [DBTEAMLOGPaperDocViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocViewDetails:paperDocViewDetails];
  } else if ([tag isEqualToString:@"paper_external_view_allow_details"]) {
    DBTEAMLOGPaperExternalViewAllowDetails *paperExternalViewAllowDetails =
        [DBTEAMLOGPaperExternalViewAllowDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperExternalViewAllowDetails:paperExternalViewAllowDetails];
  } else if ([tag isEqualToString:@"paper_external_view_default_team_details"]) {
    DBTEAMLOGPaperExternalViewDefaultTeamDetails *paperExternalViewDefaultTeamDetails =
        [DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperExternalViewDefaultTeamDetails:paperExternalViewDefaultTeamDetails];
  } else if ([tag isEqualToString:@"paper_external_view_forbid_details"]) {
    DBTEAMLOGPaperExternalViewForbidDetails *paperExternalViewForbidDetails =
        [DBTEAMLOGPaperExternalViewForbidDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperExternalViewForbidDetails:paperExternalViewForbidDetails];
  } else if ([tag isEqualToString:@"paper_folder_change_subscription_details"]) {
    DBTEAMLOGPaperFolderChangeSubscriptionDetails *paperFolderChangeSubscriptionDetails =
        [DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperFolderChangeSubscriptionDetails:paperFolderChangeSubscriptionDetails];
  } else if ([tag isEqualToString:@"paper_folder_deleted_details"]) {
    DBTEAMLOGPaperFolderDeletedDetails *paperFolderDeletedDetails =
        [DBTEAMLOGPaperFolderDeletedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperFolderDeletedDetails:paperFolderDeletedDetails];
  } else if ([tag isEqualToString:@"paper_folder_followed_details"]) {
    DBTEAMLOGPaperFolderFollowedDetails *paperFolderFollowedDetails =
        [DBTEAMLOGPaperFolderFollowedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperFolderFollowedDetails:paperFolderFollowedDetails];
  } else if ([tag isEqualToString:@"paper_folder_team_invite_details"]) {
    DBTEAMLOGPaperFolderTeamInviteDetails *paperFolderTeamInviteDetails =
        [DBTEAMLOGPaperFolderTeamInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperFolderTeamInviteDetails:paperFolderTeamInviteDetails];
  } else if ([tag isEqualToString:@"password_change_details"]) {
    DBTEAMLOGPasswordChangeDetails *passwordChangeDetails =
        [DBTEAMLOGPasswordChangeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordChangeDetails:passwordChangeDetails];
  } else if ([tag isEqualToString:@"password_reset_details"]) {
    DBTEAMLOGPasswordResetDetails *passwordResetDetails =
        [DBTEAMLOGPasswordResetDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordResetDetails:passwordResetDetails];
  } else if ([tag isEqualToString:@"password_reset_all_details"]) {
    DBTEAMLOGPasswordResetAllDetails *passwordResetAllDetails =
        [DBTEAMLOGPasswordResetAllDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordResetAllDetails:passwordResetAllDetails];
  } else if ([tag isEqualToString:@"emm_create_exceptions_report_details"]) {
    DBTEAMLOGEmmCreateExceptionsReportDetails *emmCreateExceptionsReportDetails =
        [DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmCreateExceptionsReportDetails:emmCreateExceptionsReportDetails];
  } else if ([tag isEqualToString:@"emm_create_usage_report_details"]) {
    DBTEAMLOGEmmCreateUsageReportDetails *emmCreateUsageReportDetails =
        [DBTEAMLOGEmmCreateUsageReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmCreateUsageReportDetails:emmCreateUsageReportDetails];
  } else if ([tag isEqualToString:@"export_members_report_details"]) {
    DBTEAMLOGExportMembersReportDetails *exportMembersReportDetails =
        [DBTEAMLOGExportMembersReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithExportMembersReportDetails:exportMembersReportDetails];
  } else if ([tag isEqualToString:@"paper_admin_export_start_details"]) {
    DBTEAMLOGPaperAdminExportStartDetails *paperAdminExportStartDetails =
        [DBTEAMLOGPaperAdminExportStartDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperAdminExportStartDetails:paperAdminExportStartDetails];
  } else if ([tag isEqualToString:@"smart_sync_create_admin_privilege_report_details"]) {
    DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *smartSyncCreateAdminPrivilegeReportDetails =
        [DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSmartSyncCreateAdminPrivilegeReportDetails:smartSyncCreateAdminPrivilegeReportDetails];
  } else if ([tag isEqualToString:@"team_activity_create_report_details"]) {
    DBTEAMLOGTeamActivityCreateReportDetails *teamActivityCreateReportDetails =
        [DBTEAMLOGTeamActivityCreateReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamActivityCreateReportDetails:teamActivityCreateReportDetails];
  } else if ([tag isEqualToString:@"collection_share_details"]) {
    DBTEAMLOGCollectionShareDetails *collectionShareDetails =
        [DBTEAMLOGCollectionShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithCollectionShareDetails:collectionShareDetails];
  } else if ([tag isEqualToString:@"note_acl_invite_only_details"]) {
    DBTEAMLOGNoteAclInviteOnlyDetails *noteAclInviteOnlyDetails =
        [DBTEAMLOGNoteAclInviteOnlyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteAclInviteOnlyDetails:noteAclInviteOnlyDetails];
  } else if ([tag isEqualToString:@"note_acl_link_details"]) {
    DBTEAMLOGNoteAclLinkDetails *noteAclLinkDetails = [DBTEAMLOGNoteAclLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteAclLinkDetails:noteAclLinkDetails];
  } else if ([tag isEqualToString:@"note_acl_team_link_details"]) {
    DBTEAMLOGNoteAclTeamLinkDetails *noteAclTeamLinkDetails =
        [DBTEAMLOGNoteAclTeamLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteAclTeamLinkDetails:noteAclTeamLinkDetails];
  } else if ([tag isEqualToString:@"note_shared_details"]) {
    DBTEAMLOGNoteSharedDetails *noteSharedDetails = [DBTEAMLOGNoteSharedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteSharedDetails:noteSharedDetails];
  } else if ([tag isEqualToString:@"note_share_receive_details"]) {
    DBTEAMLOGNoteShareReceiveDetails *noteShareReceiveDetails =
        [DBTEAMLOGNoteShareReceiveDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteShareReceiveDetails:noteShareReceiveDetails];
  } else if ([tag isEqualToString:@"open_note_shared_details"]) {
    DBTEAMLOGOpenNoteSharedDetails *openNoteSharedDetails =
        [DBTEAMLOGOpenNoteSharedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithOpenNoteSharedDetails:openNoteSharedDetails];
  } else if ([tag isEqualToString:@"sf_add_group_details"]) {
    DBTEAMLOGSfAddGroupDetails *sfAddGroupDetails = [DBTEAMLOGSfAddGroupDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfAddGroupDetails:sfAddGroupDetails];
  } else if ([tag isEqualToString:@"sf_allow_non_members_to_view_shared_links_details"]) {
    DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *sfAllowNonMembersToViewSharedLinksDetails =
        [DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSfAllowNonMembersToViewSharedLinksDetails:sfAllowNonMembersToViewSharedLinksDetails];
  } else if ([tag isEqualToString:@"sf_external_invite_warn_details"]) {
    DBTEAMLOGSfExternalInviteWarnDetails *sfExternalInviteWarnDetails =
        [DBTEAMLOGSfExternalInviteWarnDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfExternalInviteWarnDetails:sfExternalInviteWarnDetails];
  } else if ([tag isEqualToString:@"sf_fb_invite_details"]) {
    DBTEAMLOGSfFbInviteDetails *sfFbInviteDetails = [DBTEAMLOGSfFbInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfFbInviteDetails:sfFbInviteDetails];
  } else if ([tag isEqualToString:@"sf_fb_invite_change_role_details"]) {
    DBTEAMLOGSfFbInviteChangeRoleDetails *sfFbInviteChangeRoleDetails =
        [DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfFbInviteChangeRoleDetails:sfFbInviteChangeRoleDetails];
  } else if ([tag isEqualToString:@"sf_fb_uninvite_details"]) {
    DBTEAMLOGSfFbUninviteDetails *sfFbUninviteDetails = [DBTEAMLOGSfFbUninviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfFbUninviteDetails:sfFbUninviteDetails];
  } else if ([tag isEqualToString:@"sf_invite_group_details"]) {
    DBTEAMLOGSfInviteGroupDetails *sfInviteGroupDetails =
        [DBTEAMLOGSfInviteGroupDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfInviteGroupDetails:sfInviteGroupDetails];
  } else if ([tag isEqualToString:@"sf_team_grant_access_details"]) {
    DBTEAMLOGSfTeamGrantAccessDetails *sfTeamGrantAccessDetails =
        [DBTEAMLOGSfTeamGrantAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamGrantAccessDetails:sfTeamGrantAccessDetails];
  } else if ([tag isEqualToString:@"sf_team_invite_details"]) {
    DBTEAMLOGSfTeamInviteDetails *sfTeamInviteDetails = [DBTEAMLOGSfTeamInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamInviteDetails:sfTeamInviteDetails];
  } else if ([tag isEqualToString:@"sf_team_invite_change_role_details"]) {
    DBTEAMLOGSfTeamInviteChangeRoleDetails *sfTeamInviteChangeRoleDetails =
        [DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamInviteChangeRoleDetails:sfTeamInviteChangeRoleDetails];
  } else if ([tag isEqualToString:@"sf_team_join_details"]) {
    DBTEAMLOGSfTeamJoinDetails *sfTeamJoinDetails = [DBTEAMLOGSfTeamJoinDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamJoinDetails:sfTeamJoinDetails];
  } else if ([tag isEqualToString:@"sf_team_join_from_oob_link_details"]) {
    DBTEAMLOGSfTeamJoinFromOobLinkDetails *sfTeamJoinFromOobLinkDetails =
        [DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamJoinFromOobLinkDetails:sfTeamJoinFromOobLinkDetails];
  } else if ([tag isEqualToString:@"sf_team_uninvite_details"]) {
    DBTEAMLOGSfTeamUninviteDetails *sfTeamUninviteDetails =
        [DBTEAMLOGSfTeamUninviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamUninviteDetails:sfTeamUninviteDetails];
  } else if ([tag isEqualToString:@"shared_content_add_invitees_details"]) {
    DBTEAMLOGSharedContentAddInviteesDetails *sharedContentAddInviteesDetails =
        [DBTEAMLOGSharedContentAddInviteesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddInviteesDetails:sharedContentAddInviteesDetails];
  } else if ([tag isEqualToString:@"shared_content_add_link_expiry_details"]) {
    DBTEAMLOGSharedContentAddLinkExpiryDetails *sharedContentAddLinkExpiryDetails =
        [DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddLinkExpiryDetails:sharedContentAddLinkExpiryDetails];
  } else if ([tag isEqualToString:@"shared_content_add_link_password_details"]) {
    DBTEAMLOGSharedContentAddLinkPasswordDetails *sharedContentAddLinkPasswordDetails =
        [DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddLinkPasswordDetails:sharedContentAddLinkPasswordDetails];
  } else if ([tag isEqualToString:@"shared_content_add_member_details"]) {
    DBTEAMLOGSharedContentAddMemberDetails *sharedContentAddMemberDetails =
        [DBTEAMLOGSharedContentAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddMemberDetails:sharedContentAddMemberDetails];
  } else if ([tag isEqualToString:@"shared_content_change_downloads_policy_details"]) {
    DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *sharedContentChangeDownloadsPolicyDetails =
        [DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeDownloadsPolicyDetails:sharedContentChangeDownloadsPolicyDetails];
  } else if ([tag isEqualToString:@"shared_content_change_invitee_role_details"]) {
    DBTEAMLOGSharedContentChangeInviteeRoleDetails *sharedContentChangeInviteeRoleDetails =
        [DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeInviteeRoleDetails:sharedContentChangeInviteeRoleDetails];
  } else if ([tag isEqualToString:@"shared_content_change_link_audience_details"]) {
    DBTEAMLOGSharedContentChangeLinkAudienceDetails *sharedContentChangeLinkAudienceDetails =
        [DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeLinkAudienceDetails:sharedContentChangeLinkAudienceDetails];
  } else if ([tag isEqualToString:@"shared_content_change_link_expiry_details"]) {
    DBTEAMLOGSharedContentChangeLinkExpiryDetails *sharedContentChangeLinkExpiryDetails =
        [DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeLinkExpiryDetails:sharedContentChangeLinkExpiryDetails];
  } else if ([tag isEqualToString:@"shared_content_change_link_password_details"]) {
    DBTEAMLOGSharedContentChangeLinkPasswordDetails *sharedContentChangeLinkPasswordDetails =
        [DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeLinkPasswordDetails:sharedContentChangeLinkPasswordDetails];
  } else if ([tag isEqualToString:@"shared_content_change_member_role_details"]) {
    DBTEAMLOGSharedContentChangeMemberRoleDetails *sharedContentChangeMemberRoleDetails =
        [DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeMemberRoleDetails:sharedContentChangeMemberRoleDetails];
  } else if ([tag isEqualToString:@"shared_content_change_viewer_info_policy_details"]) {
    DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *sharedContentChangeViewerInfoPolicyDetails =
        [DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeViewerInfoPolicyDetails:sharedContentChangeViewerInfoPolicyDetails];
  } else if ([tag isEqualToString:@"shared_content_claim_invitation_details"]) {
    DBTEAMLOGSharedContentClaimInvitationDetails *sharedContentClaimInvitationDetails =
        [DBTEAMLOGSharedContentClaimInvitationDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedContentClaimInvitationDetails:sharedContentClaimInvitationDetails];
  } else if ([tag isEqualToString:@"shared_content_copy_details"]) {
    DBTEAMLOGSharedContentCopyDetails *sharedContentCopyDetails =
        [DBTEAMLOGSharedContentCopyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentCopyDetails:sharedContentCopyDetails];
  } else if ([tag isEqualToString:@"shared_content_download_details"]) {
    DBTEAMLOGSharedContentDownloadDetails *sharedContentDownloadDetails =
        [DBTEAMLOGSharedContentDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentDownloadDetails:sharedContentDownloadDetails];
  } else if ([tag isEqualToString:@"shared_content_relinquish_membership_details"]) {
    DBTEAMLOGSharedContentRelinquishMembershipDetails *sharedContentRelinquishMembershipDetails =
        [DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentRelinquishMembershipDetails:sharedContentRelinquishMembershipDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_invitees_details"]) {
    DBTEAMLOGSharedContentRemoveInviteesDetails *sharedContentRemoveInviteesDetails =
        [DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedContentRemoveInviteesDetails:sharedContentRemoveInviteesDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_link_expiry_details"]) {
    DBTEAMLOGSharedContentRemoveLinkExpiryDetails *sharedContentRemoveLinkExpiryDetails =
        [DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentRemoveLinkExpiryDetails:sharedContentRemoveLinkExpiryDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_link_password_details"]) {
    DBTEAMLOGSharedContentRemoveLinkPasswordDetails *sharedContentRemoveLinkPasswordDetails =
        [DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentRemoveLinkPasswordDetails:sharedContentRemoveLinkPasswordDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_member_details"]) {
    DBTEAMLOGSharedContentRemoveMemberDetails *sharedContentRemoveMemberDetails =
        [DBTEAMLOGSharedContentRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentRemoveMemberDetails:sharedContentRemoveMemberDetails];
  } else if ([tag isEqualToString:@"shared_content_request_access_details"]) {
    DBTEAMLOGSharedContentRequestAccessDetails *sharedContentRequestAccessDetails =
        [DBTEAMLOGSharedContentRequestAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentRequestAccessDetails:sharedContentRequestAccessDetails];
  } else if ([tag isEqualToString:@"shared_content_unshare_details"]) {
    DBTEAMLOGSharedContentUnshareDetails *sharedContentUnshareDetails =
        [DBTEAMLOGSharedContentUnshareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentUnshareDetails:sharedContentUnshareDetails];
  } else if ([tag isEqualToString:@"shared_content_view_details"]) {
    DBTEAMLOGSharedContentViewDetails *sharedContentViewDetails =
        [DBTEAMLOGSharedContentViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentViewDetails:sharedContentViewDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_link_policy_details"]) {
    DBTEAMLOGSharedFolderChangeLinkPolicyDetails *sharedFolderChangeLinkPolicyDetails =
        [DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedFolderChangeLinkPolicyDetails:sharedFolderChangeLinkPolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_members_inheritance_policy_details"]) {
    DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails *sharedFolderChangeMembersInheritancePolicyDetails =
        [DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderChangeMembersInheritancePolicyDetails:sharedFolderChangeMembersInheritancePolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_members_management_policy_details"]) {
    DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails *sharedFolderChangeMembersManagementPolicyDetails =
        [DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderChangeMembersManagementPolicyDetails:sharedFolderChangeMembersManagementPolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_members_policy_details"]) {
    DBTEAMLOGSharedFolderChangeMembersPolicyDetails *sharedFolderChangeMembersPolicyDetails =
        [DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderChangeMembersPolicyDetails:sharedFolderChangeMembersPolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_create_details"]) {
    DBTEAMLOGSharedFolderCreateDetails *sharedFolderCreateDetails =
        [DBTEAMLOGSharedFolderCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderCreateDetails:sharedFolderCreateDetails];
  } else if ([tag isEqualToString:@"shared_folder_decline_invitation_details"]) {
    DBTEAMLOGSharedFolderDeclineInvitationDetails *sharedFolderDeclineInvitationDetails =
        [DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderDeclineInvitationDetails:sharedFolderDeclineInvitationDetails];
  } else if ([tag isEqualToString:@"shared_folder_mount_details"]) {
    DBTEAMLOGSharedFolderMountDetails *sharedFolderMountDetails =
        [DBTEAMLOGSharedFolderMountDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderMountDetails:sharedFolderMountDetails];
  } else if ([tag isEqualToString:@"shared_folder_nest_details"]) {
    DBTEAMLOGSharedFolderNestDetails *sharedFolderNestDetails =
        [DBTEAMLOGSharedFolderNestDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderNestDetails:sharedFolderNestDetails];
  } else if ([tag isEqualToString:@"shared_folder_transfer_ownership_details"]) {
    DBTEAMLOGSharedFolderTransferOwnershipDetails *sharedFolderTransferOwnershipDetails =
        [DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderTransferOwnershipDetails:sharedFolderTransferOwnershipDetails];
  } else if ([tag isEqualToString:@"shared_folder_unmount_details"]) {
    DBTEAMLOGSharedFolderUnmountDetails *sharedFolderUnmountDetails =
        [DBTEAMLOGSharedFolderUnmountDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderUnmountDetails:sharedFolderUnmountDetails];
  } else if ([tag isEqualToString:@"shared_link_add_expiry_details"]) {
    DBTEAMLOGSharedLinkAddExpiryDetails *sharedLinkAddExpiryDetails =
        [DBTEAMLOGSharedLinkAddExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkAddExpiryDetails:sharedLinkAddExpiryDetails];
  } else if ([tag isEqualToString:@"shared_link_change_expiry_details"]) {
    DBTEAMLOGSharedLinkChangeExpiryDetails *sharedLinkChangeExpiryDetails =
        [DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkChangeExpiryDetails:sharedLinkChangeExpiryDetails];
  } else if ([tag isEqualToString:@"shared_link_change_visibility_details"]) {
    DBTEAMLOGSharedLinkChangeVisibilityDetails *sharedLinkChangeVisibilityDetails =
        [DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkChangeVisibilityDetails:sharedLinkChangeVisibilityDetails];
  } else if ([tag isEqualToString:@"shared_link_copy_details"]) {
    DBTEAMLOGSharedLinkCopyDetails *sharedLinkCopyDetails =
        [DBTEAMLOGSharedLinkCopyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkCopyDetails:sharedLinkCopyDetails];
  } else if ([tag isEqualToString:@"shared_link_create_details"]) {
    DBTEAMLOGSharedLinkCreateDetails *sharedLinkCreateDetails =
        [DBTEAMLOGSharedLinkCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkCreateDetails:sharedLinkCreateDetails];
  } else if ([tag isEqualToString:@"shared_link_disable_details"]) {
    DBTEAMLOGSharedLinkDisableDetails *sharedLinkDisableDetails =
        [DBTEAMLOGSharedLinkDisableDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkDisableDetails:sharedLinkDisableDetails];
  } else if ([tag isEqualToString:@"shared_link_download_details"]) {
    DBTEAMLOGSharedLinkDownloadDetails *sharedLinkDownloadDetails =
        [DBTEAMLOGSharedLinkDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkDownloadDetails:sharedLinkDownloadDetails];
  } else if ([tag isEqualToString:@"shared_link_remove_expiry_details"]) {
    DBTEAMLOGSharedLinkRemoveExpiryDetails *sharedLinkRemoveExpiryDetails =
        [DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkRemoveExpiryDetails:sharedLinkRemoveExpiryDetails];
  } else if ([tag isEqualToString:@"shared_link_share_details"]) {
    DBTEAMLOGSharedLinkShareDetails *sharedLinkShareDetails =
        [DBTEAMLOGSharedLinkShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkShareDetails:sharedLinkShareDetails];
  } else if ([tag isEqualToString:@"shared_link_view_details"]) {
    DBTEAMLOGSharedLinkViewDetails *sharedLinkViewDetails =
        [DBTEAMLOGSharedLinkViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkViewDetails:sharedLinkViewDetails];
  } else if ([tag isEqualToString:@"shared_note_opened_details"]) {
    DBTEAMLOGSharedNoteOpenedDetails *sharedNoteOpenedDetails =
        [DBTEAMLOGSharedNoteOpenedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedNoteOpenedDetails:sharedNoteOpenedDetails];
  } else if ([tag isEqualToString:@"shmodel_group_share_details"]) {
    DBTEAMLOGShmodelGroupShareDetails *shmodelGroupShareDetails =
        [DBTEAMLOGShmodelGroupShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelGroupShareDetails:shmodelGroupShareDetails];
  } else if ([tag isEqualToString:@"showcase_access_granted_details"]) {
    DBTEAMLOGShowcaseAccessGrantedDetails *showcaseAccessGrantedDetails =
        [DBTEAMLOGShowcaseAccessGrantedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseAccessGrantedDetails:showcaseAccessGrantedDetails];
  } else if ([tag isEqualToString:@"showcase_add_member_details"]) {
    DBTEAMLOGShowcaseAddMemberDetails *showcaseAddMemberDetails =
        [DBTEAMLOGShowcaseAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseAddMemberDetails:showcaseAddMemberDetails];
  } else if ([tag isEqualToString:@"showcase_archived_details"]) {
    DBTEAMLOGShowcaseArchivedDetails *showcaseArchivedDetails =
        [DBTEAMLOGShowcaseArchivedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseArchivedDetails:showcaseArchivedDetails];
  } else if ([tag isEqualToString:@"showcase_created_details"]) {
    DBTEAMLOGShowcaseCreatedDetails *showcaseCreatedDetails =
        [DBTEAMLOGShowcaseCreatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseCreatedDetails:showcaseCreatedDetails];
  } else if ([tag isEqualToString:@"showcase_delete_comment_details"]) {
    DBTEAMLOGShowcaseDeleteCommentDetails *showcaseDeleteCommentDetails =
        [DBTEAMLOGShowcaseDeleteCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseDeleteCommentDetails:showcaseDeleteCommentDetails];
  } else if ([tag isEqualToString:@"showcase_edited_details"]) {
    DBTEAMLOGShowcaseEditedDetails *showcaseEditedDetails =
        [DBTEAMLOGShowcaseEditedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseEditedDetails:showcaseEditedDetails];
  } else if ([tag isEqualToString:@"showcase_edit_comment_details"]) {
    DBTEAMLOGShowcaseEditCommentDetails *showcaseEditCommentDetails =
        [DBTEAMLOGShowcaseEditCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseEditCommentDetails:showcaseEditCommentDetails];
  } else if ([tag isEqualToString:@"showcase_file_added_details"]) {
    DBTEAMLOGShowcaseFileAddedDetails *showcaseFileAddedDetails =
        [DBTEAMLOGShowcaseFileAddedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseFileAddedDetails:showcaseFileAddedDetails];
  } else if ([tag isEqualToString:@"showcase_file_download_details"]) {
    DBTEAMLOGShowcaseFileDownloadDetails *showcaseFileDownloadDetails =
        [DBTEAMLOGShowcaseFileDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseFileDownloadDetails:showcaseFileDownloadDetails];
  } else if ([tag isEqualToString:@"showcase_file_removed_details"]) {
    DBTEAMLOGShowcaseFileRemovedDetails *showcaseFileRemovedDetails =
        [DBTEAMLOGShowcaseFileRemovedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseFileRemovedDetails:showcaseFileRemovedDetails];
  } else if ([tag isEqualToString:@"showcase_file_view_details"]) {
    DBTEAMLOGShowcaseFileViewDetails *showcaseFileViewDetails =
        [DBTEAMLOGShowcaseFileViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseFileViewDetails:showcaseFileViewDetails];
  } else if ([tag isEqualToString:@"showcase_permanently_deleted_details"]) {
    DBTEAMLOGShowcasePermanentlyDeletedDetails *showcasePermanentlyDeletedDetails =
        [DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcasePermanentlyDeletedDetails:showcasePermanentlyDeletedDetails];
  } else if ([tag isEqualToString:@"showcase_post_comment_details"]) {
    DBTEAMLOGShowcasePostCommentDetails *showcasePostCommentDetails =
        [DBTEAMLOGShowcasePostCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcasePostCommentDetails:showcasePostCommentDetails];
  } else if ([tag isEqualToString:@"showcase_remove_member_details"]) {
    DBTEAMLOGShowcaseRemoveMemberDetails *showcaseRemoveMemberDetails =
        [DBTEAMLOGShowcaseRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseRemoveMemberDetails:showcaseRemoveMemberDetails];
  } else if ([tag isEqualToString:@"showcase_renamed_details"]) {
    DBTEAMLOGShowcaseRenamedDetails *showcaseRenamedDetails =
        [DBTEAMLOGShowcaseRenamedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseRenamedDetails:showcaseRenamedDetails];
  } else if ([tag isEqualToString:@"showcase_request_access_details"]) {
    DBTEAMLOGShowcaseRequestAccessDetails *showcaseRequestAccessDetails =
        [DBTEAMLOGShowcaseRequestAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseRequestAccessDetails:showcaseRequestAccessDetails];
  } else if ([tag isEqualToString:@"showcase_resolve_comment_details"]) {
    DBTEAMLOGShowcaseResolveCommentDetails *showcaseResolveCommentDetails =
        [DBTEAMLOGShowcaseResolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseResolveCommentDetails:showcaseResolveCommentDetails];
  } else if ([tag isEqualToString:@"showcase_restored_details"]) {
    DBTEAMLOGShowcaseRestoredDetails *showcaseRestoredDetails =
        [DBTEAMLOGShowcaseRestoredDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseRestoredDetails:showcaseRestoredDetails];
  } else if ([tag isEqualToString:@"showcase_trashed_details"]) {
    DBTEAMLOGShowcaseTrashedDetails *showcaseTrashedDetails =
        [DBTEAMLOGShowcaseTrashedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseTrashedDetails:showcaseTrashedDetails];
  } else if ([tag isEqualToString:@"showcase_trashed_deprecated_details"]) {
    DBTEAMLOGShowcaseTrashedDeprecatedDetails *showcaseTrashedDeprecatedDetails =
        [DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseTrashedDeprecatedDetails:showcaseTrashedDeprecatedDetails];
  } else if ([tag isEqualToString:@"showcase_unresolve_comment_details"]) {
    DBTEAMLOGShowcaseUnresolveCommentDetails *showcaseUnresolveCommentDetails =
        [DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseUnresolveCommentDetails:showcaseUnresolveCommentDetails];
  } else if ([tag isEqualToString:@"showcase_untrashed_details"]) {
    DBTEAMLOGShowcaseUntrashedDetails *showcaseUntrashedDetails =
        [DBTEAMLOGShowcaseUntrashedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseUntrashedDetails:showcaseUntrashedDetails];
  } else if ([tag isEqualToString:@"showcase_untrashed_deprecated_details"]) {
    DBTEAMLOGShowcaseUntrashedDeprecatedDetails *showcaseUntrashedDeprecatedDetails =
        [DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithShowcaseUntrashedDeprecatedDetails:showcaseUntrashedDeprecatedDetails];
  } else if ([tag isEqualToString:@"showcase_view_details"]) {
    DBTEAMLOGShowcaseViewDetails *showcaseViewDetails = [DBTEAMLOGShowcaseViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseViewDetails:showcaseViewDetails];
  } else if ([tag isEqualToString:@"sso_add_cert_details"]) {
    DBTEAMLOGSsoAddCertDetails *ssoAddCertDetails = [DBTEAMLOGSsoAddCertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoAddCertDetails:ssoAddCertDetails];
  } else if ([tag isEqualToString:@"sso_add_login_url_details"]) {
    DBTEAMLOGSsoAddLoginUrlDetails *ssoAddLoginUrlDetails =
        [DBTEAMLOGSsoAddLoginUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoAddLoginUrlDetails:ssoAddLoginUrlDetails];
  } else if ([tag isEqualToString:@"sso_add_logout_url_details"]) {
    DBTEAMLOGSsoAddLogoutUrlDetails *ssoAddLogoutUrlDetails =
        [DBTEAMLOGSsoAddLogoutUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoAddLogoutUrlDetails:ssoAddLogoutUrlDetails];
  } else if ([tag isEqualToString:@"sso_change_cert_details"]) {
    DBTEAMLOGSsoChangeCertDetails *ssoChangeCertDetails =
        [DBTEAMLOGSsoChangeCertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeCertDetails:ssoChangeCertDetails];
  } else if ([tag isEqualToString:@"sso_change_login_url_details"]) {
    DBTEAMLOGSsoChangeLoginUrlDetails *ssoChangeLoginUrlDetails =
        [DBTEAMLOGSsoChangeLoginUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeLoginUrlDetails:ssoChangeLoginUrlDetails];
  } else if ([tag isEqualToString:@"sso_change_logout_url_details"]) {
    DBTEAMLOGSsoChangeLogoutUrlDetails *ssoChangeLogoutUrlDetails =
        [DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeLogoutUrlDetails:ssoChangeLogoutUrlDetails];
  } else if ([tag isEqualToString:@"sso_change_saml_identity_mode_details"]) {
    DBTEAMLOGSsoChangeSamlIdentityModeDetails *ssoChangeSamlIdentityModeDetails =
        [DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeSamlIdentityModeDetails:ssoChangeSamlIdentityModeDetails];
  } else if ([tag isEqualToString:@"sso_remove_cert_details"]) {
    DBTEAMLOGSsoRemoveCertDetails *ssoRemoveCertDetails =
        [DBTEAMLOGSsoRemoveCertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoRemoveCertDetails:ssoRemoveCertDetails];
  } else if ([tag isEqualToString:@"sso_remove_login_url_details"]) {
    DBTEAMLOGSsoRemoveLoginUrlDetails *ssoRemoveLoginUrlDetails =
        [DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoRemoveLoginUrlDetails:ssoRemoveLoginUrlDetails];
  } else if ([tag isEqualToString:@"sso_remove_logout_url_details"]) {
    DBTEAMLOGSsoRemoveLogoutUrlDetails *ssoRemoveLogoutUrlDetails =
        [DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoRemoveLogoutUrlDetails:ssoRemoveLogoutUrlDetails];
  } else if ([tag isEqualToString:@"team_folder_change_status_details"]) {
    DBTEAMLOGTeamFolderChangeStatusDetails *teamFolderChangeStatusDetails =
        [DBTEAMLOGTeamFolderChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderChangeStatusDetails:teamFolderChangeStatusDetails];
  } else if ([tag isEqualToString:@"team_folder_create_details"]) {
    DBTEAMLOGTeamFolderCreateDetails *teamFolderCreateDetails =
        [DBTEAMLOGTeamFolderCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderCreateDetails:teamFolderCreateDetails];
  } else if ([tag isEqualToString:@"team_folder_downgrade_details"]) {
    DBTEAMLOGTeamFolderDowngradeDetails *teamFolderDowngradeDetails =
        [DBTEAMLOGTeamFolderDowngradeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderDowngradeDetails:teamFolderDowngradeDetails];
  } else if ([tag isEqualToString:@"team_folder_permanently_delete_details"]) {
    DBTEAMLOGTeamFolderPermanentlyDeleteDetails *teamFolderPermanentlyDeleteDetails =
        [DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithTeamFolderPermanentlyDeleteDetails:teamFolderPermanentlyDeleteDetails];
  } else if ([tag isEqualToString:@"team_folder_rename_details"]) {
    DBTEAMLOGTeamFolderRenameDetails *teamFolderRenameDetails =
        [DBTEAMLOGTeamFolderRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderRenameDetails:teamFolderRenameDetails];
  } else if ([tag isEqualToString:@"team_selective_sync_settings_changed_details"]) {
    DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails *teamSelectiveSyncSettingsChangedDetails =
        [DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamSelectiveSyncSettingsChangedDetails:teamSelectiveSyncSettingsChangedDetails];
  } else if ([tag isEqualToString:@"account_capture_change_policy_details"]) {
    DBTEAMLOGAccountCaptureChangePolicyDetails *accountCaptureChangePolicyDetails =
        [DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAccountCaptureChangePolicyDetails:accountCaptureChangePolicyDetails];
  } else if ([tag isEqualToString:@"allow_download_disabled_details"]) {
    DBTEAMLOGAllowDownloadDisabledDetails *allowDownloadDisabledDetails =
        [DBTEAMLOGAllowDownloadDisabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAllowDownloadDisabledDetails:allowDownloadDisabledDetails];
  } else if ([tag isEqualToString:@"allow_download_enabled_details"]) {
    DBTEAMLOGAllowDownloadEnabledDetails *allowDownloadEnabledDetails =
        [DBTEAMLOGAllowDownloadEnabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAllowDownloadEnabledDetails:allowDownloadEnabledDetails];
  } else if ([tag isEqualToString:@"data_placement_restriction_change_policy_details"]) {
    DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *dataPlacementRestrictionChangePolicyDetails =
        [DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDataPlacementRestrictionChangePolicyDetails:dataPlacementRestrictionChangePolicyDetails];
  } else if ([tag isEqualToString:@"data_placement_restriction_satisfy_policy_details"]) {
    DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *dataPlacementRestrictionSatisfyPolicyDetails =
        [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDataPlacementRestrictionSatisfyPolicyDetails:dataPlacementRestrictionSatisfyPolicyDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_desktop_policy_details"]) {
    DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *deviceApprovalsChangeDesktopPolicyDetails =
        [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeDesktopPolicyDetails:deviceApprovalsChangeDesktopPolicyDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_mobile_policy_details"]) {
    DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *deviceApprovalsChangeMobilePolicyDetails =
        [DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeMobilePolicyDetails:deviceApprovalsChangeMobilePolicyDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_overage_action_details"]) {
    DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *deviceApprovalsChangeOverageActionDetails =
        [DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeOverageActionDetails:deviceApprovalsChangeOverageActionDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_unlink_action_details"]) {
    DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *deviceApprovalsChangeUnlinkActionDetails =
        [DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeUnlinkActionDetails:deviceApprovalsChangeUnlinkActionDetails];
  } else if ([tag isEqualToString:@"directory_restrictions_add_members_details"]) {
    DBTEAMLOGDirectoryRestrictionsAddMembersDetails *directoryRestrictionsAddMembersDetails =
        [DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDirectoryRestrictionsAddMembersDetails:directoryRestrictionsAddMembersDetails];
  } else if ([tag isEqualToString:@"directory_restrictions_remove_members_details"]) {
    DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *directoryRestrictionsRemoveMembersDetails =
        [DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDirectoryRestrictionsRemoveMembersDetails:directoryRestrictionsRemoveMembersDetails];
  } else if ([tag isEqualToString:@"emm_add_exception_details"]) {
    DBTEAMLOGEmmAddExceptionDetails *emmAddExceptionDetails =
        [DBTEAMLOGEmmAddExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmAddExceptionDetails:emmAddExceptionDetails];
  } else if ([tag isEqualToString:@"emm_change_policy_details"]) {
    DBTEAMLOGEmmChangePolicyDetails *emmChangePolicyDetails =
        [DBTEAMLOGEmmChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmChangePolicyDetails:emmChangePolicyDetails];
  } else if ([tag isEqualToString:@"emm_remove_exception_details"]) {
    DBTEAMLOGEmmRemoveExceptionDetails *emmRemoveExceptionDetails =
        [DBTEAMLOGEmmRemoveExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmRemoveExceptionDetails:emmRemoveExceptionDetails];
  } else if ([tag isEqualToString:@"extended_version_history_change_policy_details"]) {
    DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *extendedVersionHistoryChangePolicyDetails =
        [DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithExtendedVersionHistoryChangePolicyDetails:extendedVersionHistoryChangePolicyDetails];
  } else if ([tag isEqualToString:@"file_comments_change_policy_details"]) {
    DBTEAMLOGFileCommentsChangePolicyDetails *fileCommentsChangePolicyDetails =
        [DBTEAMLOGFileCommentsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileCommentsChangePolicyDetails:fileCommentsChangePolicyDetails];
  } else if ([tag isEqualToString:@"file_requests_change_policy_details"]) {
    DBTEAMLOGFileRequestsChangePolicyDetails *fileRequestsChangePolicyDetails =
        [DBTEAMLOGFileRequestsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestsChangePolicyDetails:fileRequestsChangePolicyDetails];
  } else if ([tag isEqualToString:@"file_requests_emails_enabled_details"]) {
    DBTEAMLOGFileRequestsEmailsEnabledDetails *fileRequestsEmailsEnabledDetails =
        [DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestsEmailsEnabledDetails:fileRequestsEmailsEnabledDetails];
  } else if ([tag isEqualToString:@"file_requests_emails_restricted_to_team_only_details"]) {
    DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *fileRequestsEmailsRestrictedToTeamOnlyDetails =
        [DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithFileRequestsEmailsRestrictedToTeamOnlyDetails:fileRequestsEmailsRestrictedToTeamOnlyDetails];
  } else if ([tag isEqualToString:@"google_sso_change_policy_details"]) {
    DBTEAMLOGGoogleSsoChangePolicyDetails *googleSsoChangePolicyDetails =
        [DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGoogleSsoChangePolicyDetails:googleSsoChangePolicyDetails];
  } else if ([tag isEqualToString:@"group_user_management_change_policy_details"]) {
    DBTEAMLOGGroupUserManagementChangePolicyDetails *groupUserManagementChangePolicyDetails =
        [DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGroupUserManagementChangePolicyDetails:groupUserManagementChangePolicyDetails];
  } else if ([tag isEqualToString:@"member_requests_change_policy_details"]) {
    DBTEAMLOGMemberRequestsChangePolicyDetails *memberRequestsChangePolicyDetails =
        [DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberRequestsChangePolicyDetails:memberRequestsChangePolicyDetails];
  } else if ([tag isEqualToString:@"member_space_limits_add_exception_details"]) {
    DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *memberSpaceLimitsAddExceptionDetails =
        [DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsAddExceptionDetails:memberSpaceLimitsAddExceptionDetails];
  } else if ([tag isEqualToString:@"member_space_limits_change_caps_type_policy_details"]) {
    DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails *memberSpaceLimitsChangeCapsTypePolicyDetails =
        [DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsChangeCapsTypePolicyDetails:memberSpaceLimitsChangeCapsTypePolicyDetails];
  } else if ([tag isEqualToString:@"member_space_limits_change_policy_details"]) {
    DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *memberSpaceLimitsChangePolicyDetails =
        [DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsChangePolicyDetails:memberSpaceLimitsChangePolicyDetails];
  } else if ([tag isEqualToString:@"member_space_limits_remove_exception_details"]) {
    DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *memberSpaceLimitsRemoveExceptionDetails =
        [DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsRemoveExceptionDetails:memberSpaceLimitsRemoveExceptionDetails];
  } else if ([tag isEqualToString:@"member_suggestions_change_policy_details"]) {
    DBTEAMLOGMemberSuggestionsChangePolicyDetails *memberSuggestionsChangePolicyDetails =
        [DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSuggestionsChangePolicyDetails:memberSuggestionsChangePolicyDetails];
  } else if ([tag isEqualToString:@"microsoft_office_addin_change_policy_details"]) {
    DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *microsoftOfficeAddinChangePolicyDetails =
        [DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMicrosoftOfficeAddinChangePolicyDetails:microsoftOfficeAddinChangePolicyDetails];
  } else if ([tag isEqualToString:@"network_control_change_policy_details"]) {
    DBTEAMLOGNetworkControlChangePolicyDetails *networkControlChangePolicyDetails =
        [DBTEAMLOGNetworkControlChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNetworkControlChangePolicyDetails:networkControlChangePolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_deployment_policy_details"]) {
    DBTEAMLOGPaperChangeDeploymentPolicyDetails *paperChangeDeploymentPolicyDetails =
        [DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperChangeDeploymentPolicyDetails:paperChangeDeploymentPolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_member_link_policy_details"]) {
    DBTEAMLOGPaperChangeMemberLinkPolicyDetails *paperChangeMemberLinkPolicyDetails =
        [DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperChangeMemberLinkPolicyDetails:paperChangeMemberLinkPolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_member_policy_details"]) {
    DBTEAMLOGPaperChangeMemberPolicyDetails *paperChangeMemberPolicyDetails =
        [DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperChangeMemberPolicyDetails:paperChangeMemberPolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_policy_details"]) {
    DBTEAMLOGPaperChangePolicyDetails *paperChangePolicyDetails =
        [DBTEAMLOGPaperChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperChangePolicyDetails:paperChangePolicyDetails];
  } else if ([tag isEqualToString:@"paper_enabled_users_group_addition_details"]) {
    DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *paperEnabledUsersGroupAdditionDetails =
        [DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperEnabledUsersGroupAdditionDetails:paperEnabledUsersGroupAdditionDetails];
  } else if ([tag isEqualToString:@"paper_enabled_users_group_removal_details"]) {
    DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *paperEnabledUsersGroupRemovalDetails =
        [DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperEnabledUsersGroupRemovalDetails:paperEnabledUsersGroupRemovalDetails];
  } else if ([tag isEqualToString:@"permanent_delete_change_policy_details"]) {
    DBTEAMLOGPermanentDeleteChangePolicyDetails *permanentDeleteChangePolicyDetails =
        [DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPermanentDeleteChangePolicyDetails:permanentDeleteChangePolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_folder_join_policy_details"]) {
    DBTEAMLOGSharingChangeFolderJoinPolicyDetails *sharingChangeFolderJoinPolicyDetails =
        [DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharingChangeFolderJoinPolicyDetails:sharingChangeFolderJoinPolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_link_policy_details"]) {
    DBTEAMLOGSharingChangeLinkPolicyDetails *sharingChangeLinkPolicyDetails =
        [DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharingChangeLinkPolicyDetails:sharingChangeLinkPolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_member_policy_details"]) {
    DBTEAMLOGSharingChangeMemberPolicyDetails *sharingChangeMemberPolicyDetails =
        [DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharingChangeMemberPolicyDetails:sharingChangeMemberPolicyDetails];
  } else if ([tag isEqualToString:@"showcase_change_download_policy_details"]) {
    DBTEAMLOGShowcaseChangeDownloadPolicyDetails *showcaseChangeDownloadPolicyDetails =
        [DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithShowcaseChangeDownloadPolicyDetails:showcaseChangeDownloadPolicyDetails];
  } else if ([tag isEqualToString:@"showcase_change_enabled_policy_details"]) {
    DBTEAMLOGShowcaseChangeEnabledPolicyDetails *showcaseChangeEnabledPolicyDetails =
        [DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithShowcaseChangeEnabledPolicyDetails:showcaseChangeEnabledPolicyDetails];
  } else if ([tag isEqualToString:@"showcase_change_external_sharing_policy_details"]) {
    DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails *showcaseChangeExternalSharingPolicyDetails =
        [DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithShowcaseChangeExternalSharingPolicyDetails:showcaseChangeExternalSharingPolicyDetails];
  } else if ([tag isEqualToString:@"smart_sync_change_policy_details"]) {
    DBTEAMLOGSmartSyncChangePolicyDetails *smartSyncChangePolicyDetails =
        [DBTEAMLOGSmartSyncChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSmartSyncChangePolicyDetails:smartSyncChangePolicyDetails];
  } else if ([tag isEqualToString:@"smart_sync_not_opt_out_details"]) {
    DBTEAMLOGSmartSyncNotOptOutDetails *smartSyncNotOptOutDetails =
        [DBTEAMLOGSmartSyncNotOptOutDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSmartSyncNotOptOutDetails:smartSyncNotOptOutDetails];
  } else if ([tag isEqualToString:@"smart_sync_opt_out_details"]) {
    DBTEAMLOGSmartSyncOptOutDetails *smartSyncOptOutDetails =
        [DBTEAMLOGSmartSyncOptOutDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSmartSyncOptOutDetails:smartSyncOptOutDetails];
  } else if ([tag isEqualToString:@"sso_change_policy_details"]) {
    DBTEAMLOGSsoChangePolicyDetails *ssoChangePolicyDetails =
        [DBTEAMLOGSsoChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangePolicyDetails:ssoChangePolicyDetails];
  } else if ([tag isEqualToString:@"tfa_change_policy_details"]) {
    DBTEAMLOGTfaChangePolicyDetails *tfaChangePolicyDetails =
        [DBTEAMLOGTfaChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaChangePolicyDetails:tfaChangePolicyDetails];
  } else if ([tag isEqualToString:@"two_account_change_policy_details"]) {
    DBTEAMLOGTwoAccountChangePolicyDetails *twoAccountChangePolicyDetails =
        [DBTEAMLOGTwoAccountChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTwoAccountChangePolicyDetails:twoAccountChangePolicyDetails];
  } else if ([tag isEqualToString:@"web_sessions_change_fixed_length_policy_details"]) {
    DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *webSessionsChangeFixedLengthPolicyDetails =
        [DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithWebSessionsChangeFixedLengthPolicyDetails:webSessionsChangeFixedLengthPolicyDetails];
  } else if ([tag isEqualToString:@"web_sessions_change_idle_length_policy_details"]) {
    DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *webSessionsChangeIdleLengthPolicyDetails =
        [DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithWebSessionsChangeIdleLengthPolicyDetails:webSessionsChangeIdleLengthPolicyDetails];
  } else if ([tag isEqualToString:@"team_merge_from_details"]) {
    DBTEAMLOGTeamMergeFromDetails *teamMergeFromDetails =
        [DBTEAMLOGTeamMergeFromDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeFromDetails:teamMergeFromDetails];
  } else if ([tag isEqualToString:@"team_merge_to_details"]) {
    DBTEAMLOGTeamMergeToDetails *teamMergeToDetails = [DBTEAMLOGTeamMergeToDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeToDetails:teamMergeToDetails];
  } else if ([tag isEqualToString:@"team_profile_add_logo_details"]) {
    DBTEAMLOGTeamProfileAddLogoDetails *teamProfileAddLogoDetails =
        [DBTEAMLOGTeamProfileAddLogoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileAddLogoDetails:teamProfileAddLogoDetails];
  } else if ([tag isEqualToString:@"team_profile_change_default_language_details"]) {
    DBTEAMLOGTeamProfileChangeDefaultLanguageDetails *teamProfileChangeDefaultLanguageDetails =
        [DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamProfileChangeDefaultLanguageDetails:teamProfileChangeDefaultLanguageDetails];
  } else if ([tag isEqualToString:@"team_profile_change_logo_details"]) {
    DBTEAMLOGTeamProfileChangeLogoDetails *teamProfileChangeLogoDetails =
        [DBTEAMLOGTeamProfileChangeLogoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileChangeLogoDetails:teamProfileChangeLogoDetails];
  } else if ([tag isEqualToString:@"team_profile_change_name_details"]) {
    DBTEAMLOGTeamProfileChangeNameDetails *teamProfileChangeNameDetails =
        [DBTEAMLOGTeamProfileChangeNameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileChangeNameDetails:teamProfileChangeNameDetails];
  } else if ([tag isEqualToString:@"team_profile_remove_logo_details"]) {
    DBTEAMLOGTeamProfileRemoveLogoDetails *teamProfileRemoveLogoDetails =
        [DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileRemoveLogoDetails:teamProfileRemoveLogoDetails];
  } else if ([tag isEqualToString:@"tfa_add_backup_phone_details"]) {
    DBTEAMLOGTfaAddBackupPhoneDetails *tfaAddBackupPhoneDetails =
        [DBTEAMLOGTfaAddBackupPhoneDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaAddBackupPhoneDetails:tfaAddBackupPhoneDetails];
  } else if ([tag isEqualToString:@"tfa_add_security_key_details"]) {
    DBTEAMLOGTfaAddSecurityKeyDetails *tfaAddSecurityKeyDetails =
        [DBTEAMLOGTfaAddSecurityKeyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaAddSecurityKeyDetails:tfaAddSecurityKeyDetails];
  } else if ([tag isEqualToString:@"tfa_change_backup_phone_details"]) {
    DBTEAMLOGTfaChangeBackupPhoneDetails *tfaChangeBackupPhoneDetails =
        [DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaChangeBackupPhoneDetails:tfaChangeBackupPhoneDetails];
  } else if ([tag isEqualToString:@"tfa_change_status_details"]) {
    DBTEAMLOGTfaChangeStatusDetails *tfaChangeStatusDetails =
        [DBTEAMLOGTfaChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaChangeStatusDetails:tfaChangeStatusDetails];
  } else if ([tag isEqualToString:@"tfa_remove_backup_phone_details"]) {
    DBTEAMLOGTfaRemoveBackupPhoneDetails *tfaRemoveBackupPhoneDetails =
        [DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaRemoveBackupPhoneDetails:tfaRemoveBackupPhoneDetails];
  } else if ([tag isEqualToString:@"tfa_remove_security_key_details"]) {
    DBTEAMLOGTfaRemoveSecurityKeyDetails *tfaRemoveSecurityKeyDetails =
        [DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaRemoveSecurityKeyDetails:tfaRemoveSecurityKeyDetails];
  } else if ([tag isEqualToString:@"tfa_reset_details"]) {
    DBTEAMLOGTfaResetDetails *tfaResetDetails = [DBTEAMLOGTfaResetDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaResetDetails:tfaResetDetails];
  } else if ([tag isEqualToString:@"missing_details"]) {
    DBTEAMLOGMissingDetails *missingDetails = [DBTEAMLOGMissingDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMissingDetails:missingDetails];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEventDetails alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEventDetails alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangeAvailabilityType.h"
#import "DBTEAMLOGAccountCaptureChangePolicyType.h"
#import "DBTEAMLOGAccountCaptureMigrateAccountType.h"
#import "DBTEAMLOGAccountCaptureNotificationEmailsSentType.h"
#import "DBTEAMLOGAccountCaptureRelinquishAccountType.h"
#import "DBTEAMLOGAllowDownloadDisabledType.h"
#import "DBTEAMLOGAllowDownloadEnabledType.h"
#import "DBTEAMLOGAppLinkTeamType.h"
#import "DBTEAMLOGAppLinkUserType.h"
#import "DBTEAMLOGAppUnlinkTeamType.h"
#import "DBTEAMLOGAppUnlinkUserType.h"
#import "DBTEAMLOGCollectionShareType.h"
#import "DBTEAMLOGCreateFolderType.h"
#import "DBTEAMLOGDataPlacementRestrictionChangePolicyType.h"
#import "DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType.h"
#import "DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType.h"
#import "DBTEAMLOGDeviceApprovalsChangeMobilePolicyType.h"
#import "DBTEAMLOGDeviceApprovalsChangeOverageActionType.h"
#import "DBTEAMLOGDeviceApprovalsChangeUnlinkActionType.h"
#import "DBTEAMLOGDeviceChangeIpDesktopType.h"
#import "DBTEAMLOGDeviceChangeIpMobileType.h"
#import "DBTEAMLOGDeviceChangeIpWebType.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkFailType.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkSuccessType.h"
#import "DBTEAMLOGDeviceLinkFailType.h"
#import "DBTEAMLOGDeviceLinkSuccessType.h"
#import "DBTEAMLOGDeviceManagementDisabledType.h"
#import "DBTEAMLOGDeviceManagementEnabledType.h"
#import "DBTEAMLOGDeviceUnlinkType.h"
#import "DBTEAMLOGDirectoryRestrictionsAddMembersType.h"
#import "DBTEAMLOGDirectoryRestrictionsRemoveMembersType.h"
#import "DBTEAMLOGDisabledDomainInvitesType.h"
#import "DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType.h"
#import "DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType.h"
#import "DBTEAMLOGDomainInvitesEmailExistingUsersType.h"
#import "DBTEAMLOGDomainInvitesRequestToJoinTeamType.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType.h"
#import "DBTEAMLOGDomainVerificationAddDomainFailType.h"
#import "DBTEAMLOGDomainVerificationAddDomainSuccessType.h"
#import "DBTEAMLOGDomainVerificationRemoveDomainType.h"
#import "DBTEAMLOGEmmAddExceptionType.h"
#import "DBTEAMLOGEmmChangePolicyType.h"
#import "DBTEAMLOGEmmCreateExceptionsReportType.h"
#import "DBTEAMLOGEmmCreateUsageReportType.h"
#import "DBTEAMLOGEmmErrorType.h"
#import "DBTEAMLOGEmmRefreshAuthTokenType.h"
#import "DBTEAMLOGEmmRemoveExceptionType.h"
#import "DBTEAMLOGEnabledDomainInvitesType.h"
#import "DBTEAMLOGEventType.h"
#import "DBTEAMLOGExportMembersReportType.h"
#import "DBTEAMLOGExtendedVersionHistoryChangePolicyType.h"
#import "DBTEAMLOGFileAddCommentType.h"
#import "DBTEAMLOGFileAddType.h"
#import "DBTEAMLOGFileChangeCommentSubscriptionType.h"
#import "DBTEAMLOGFileCommentsChangePolicyType.h"
#import "DBTEAMLOGFileCopyType.h"
#import "DBTEAMLOGFileDeleteCommentType.h"
#import "DBTEAMLOGFileDeleteType.h"
#import "DBTEAMLOGFileDownloadType.h"
#import "DBTEAMLOGFileEditType.h"
#import "DBTEAMLOGFileGetCopyReferenceType.h"
#import "DBTEAMLOGFileLikeCommentType.h"
#import "DBTEAMLOGFileMoveType.h"
#import "DBTEAMLOGFilePermanentlyDeleteType.h"
#import "DBTEAMLOGFilePreviewType.h"
#import "DBTEAMLOGFileRenameType.h"
#import "DBTEAMLOGFileRequestChangeType.h"
#import "DBTEAMLOGFileRequestCloseType.h"
#import "DBTEAMLOGFileRequestCreateType.h"
#import "DBTEAMLOGFileRequestReceiveFileType.h"
#import "DBTEAMLOGFileRequestsChangePolicyType.h"
#import "DBTEAMLOGFileRequestsEmailsEnabledType.h"
#import "DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType.h"
#import "DBTEAMLOGFileResolveCommentType.h"
#import "DBTEAMLOGFileRestoreType.h"
#import "DBTEAMLOGFileRevertType.h"
#import "DBTEAMLOGFileRollbackChangesType.h"
#import "DBTEAMLOGFileSaveCopyReferenceType.h"
#import "DBTEAMLOGFileUnlikeCommentType.h"
#import "DBTEAMLOGFileUnresolveCommentType.h"
#import "DBTEAMLOGGoogleSsoChangePolicyType.h"
#import "DBTEAMLOGGroupAddExternalIdType.h"
#import "DBTEAMLOGGroupAddMemberType.h"
#import "DBTEAMLOGGroupChangeExternalIdType.h"
#import "DBTEAMLOGGroupChangeManagementTypeType.h"
#import "DBTEAMLOGGroupChangeMemberRoleType.h"
#import "DBTEAMLOGGroupCreateType.h"
#import "DBTEAMLOGGroupDeleteType.h"
#import "DBTEAMLOGGroupDescriptionUpdatedType.h"
#import "DBTEAMLOGGroupJoinPolicyUpdatedType.h"
#import "DBTEAMLOGGroupMovedType.h"
#import "DBTEAMLOGGroupRemoveExternalIdType.h"
#import "DBTEAMLOGGroupRemoveMemberType.h"
#import "DBTEAMLOGGroupRenameType.h"
#import "DBTEAMLOGGroupUserManagementChangePolicyType.h"
#import "DBTEAMLOGLoginFailType.h"
#import "DBTEAMLOGLoginSuccessType.h"
#import "DBTEAMLOGLogoutType.h"
#import "DBTEAMLOGMemberAddNameType.h"
#import "DBTEAMLOGMemberChangeAdminRoleType.h"
#import "DBTEAMLOGMemberChangeEmailType.h"
#import "DBTEAMLOGMemberChangeMembershipTypeType.h"
#import "DBTEAMLOGMemberChangeNameType.h"
#import "DBTEAMLOGMemberChangeStatusType.h"
#import "DBTEAMLOGMemberPermanentlyDeleteAccountContentsType.h"
#import "DBTEAMLOGMemberRequestsChangePolicyType.h"
#import "DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType.h"
#import "DBTEAMLOGMemberSpaceLimitsAddExceptionType.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType.h"
#import "DBTEAMLOGMemberSpaceLimitsChangePolicyType.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeStatusType.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveExceptionType.h"
#import "DBTEAMLOGMemberSuggestType.h"
#import "DBTEAMLOGMemberSuggestionsChangePolicyType.h"
#import "DBTEAMLOGMemberTransferAccountContentsType.h"
#import "DBTEAMLOGMicrosoftOfficeAddinChangePolicyType.h"
#import "DBTEAMLOGNetworkControlChangePolicyType.h"
#import "DBTEAMLOGNoteAclInviteOnlyType.h"
#import "DBTEAMLOGNoteAclLinkType.h"
#import "DBTEAMLOGNoteAclTeamLinkType.h"
#import "DBTEAMLOGNoteShareReceiveType.h"
#import "DBTEAMLOGNoteSharedType.h"
#import "DBTEAMLOGOpenNoteSharedType.h"
#import "DBTEAMLOGPaperAdminExportStartType.h"
#import "DBTEAMLOGPaperChangeDeploymentPolicyType.h"
#import "DBTEAMLOGPaperChangeMemberLinkPolicyType.h"
#import "DBTEAMLOGPaperChangeMemberPolicyType.h"
#import "DBTEAMLOGPaperChangePolicyType.h"
#import "DBTEAMLOGPaperContentAddMemberType.h"
#import "DBTEAMLOGPaperContentAddToFolderType.h"
#import "DBTEAMLOGPaperContentArchiveType.h"
#import "DBTEAMLOGPaperContentCreateType.h"
#import "DBTEAMLOGPaperContentPermanentlyDeleteType.h"
#import "DBTEAMLOGPaperContentRemoveFromFolderType.h"
#import "DBTEAMLOGPaperContentRemoveMemberType.h"
#import "DBTEAMLOGPaperContentRenameType.h"
#import "DBTEAMLOGPaperContentRestoreType.h"
#import "DBTEAMLOGPaperDocAddCommentType.h"
#import "DBTEAMLOGPaperDocChangeMemberRoleType.h"
#import "DBTEAMLOGPaperDocChangeSharingPolicyType.h"
#import "DBTEAMLOGPaperDocChangeSubscriptionType.h"
#import "DBTEAMLOGPaperDocDeleteCommentType.h"
#import "DBTEAMLOGPaperDocDeletedType.h"
#import "DBTEAMLOGPaperDocDownloadType.h"
#import "DBTEAMLOGPaperDocEditCommentType.h"
#import "DBTEAMLOGPaperDocEditType.h"
#import "DBTEAMLOGPaperDocFollowedType.h"
#import "DBTEAMLOGPaperDocMentionType.h"
#import "DBTEAMLOGPaperDocRequestAccessType.h"
#import "DBTEAMLOGPaperDocResolveCommentType.h"
#import "DBTEAMLOGPaperDocRevertType.h"
#import "DBTEAMLOGPaperDocSlackShareType.h"
#import "DBTEAMLOGPaperDocTeamInviteType.h"
#import "DBTEAMLOGPaperDocTrashedType.h"
#import "DBTEAMLOGPaperDocUnresolveCommentType.h"
#import "DBTEAMLOGPaperDocUntrashedType.h"
#import "DBTEAMLOGPaperDocViewType.h"
#import "DBTEAMLOGPaperEnabledUsersGroupAdditionType.h"
#import "DBTEAMLOGPaperEnabledUsersGroupRemovalType.h"
#import "DBTEAMLOGPaperExternalViewAllowType.h"
#import "DBTEAMLOGPaperExternalViewDefaultTeamType.h"
#import "DBTEAMLOGPaperExternalViewForbidType.h"
#import "DBTEAMLOGPaperFolderChangeSubscriptionType.h"
#import "DBTEAMLOGPaperFolderDeletedType.h"
#import "DBTEAMLOGPaperFolderFollowedType.h"
#import "DBTEAMLOGPaperFolderTeamInviteType.h"
#import "DBTEAMLOGPasswordChangeType.h"
#import "DBTEAMLOGPasswordResetAllType.h"
#import "DBTEAMLOGPasswordResetType.h"
#import "DBTEAMLOGPermanentDeleteChangePolicyType.h"
#import "DBTEAMLOGResellerSupportSessionEndType.h"
#import "DBTEAMLOGResellerSupportSessionStartType.h"
#import "DBTEAMLOGSecondaryMailsPolicyChangedType.h"
#import "DBTEAMLOGSfAddGroupType.h"
#import "DBTEAMLOGSfAllowNonMembersToViewSharedLinksType.h"
#import "DBTEAMLOGSfExternalInviteWarnType.h"
#import "DBTEAMLOGSfFbInviteChangeRoleType.h"
#import "DBTEAMLOGSfFbInviteType.h"
#import "DBTEAMLOGSfFbUninviteType.h"
#import "DBTEAMLOGSfInviteGroupType.h"
#import "DBTEAMLOGSfTeamGrantAccessType.h"
#import "DBTEAMLOGSfTeamInviteChangeRoleType.h"
#import "DBTEAMLOGSfTeamInviteType.h"
#import "DBTEAMLOGSfTeamJoinFromOobLinkType.h"
#import "DBTEAMLOGSfTeamJoinType.h"
#import "DBTEAMLOGSfTeamUninviteType.h"
#import "DBTEAMLOGSharedContentAddInviteesType.h"
#import "DBTEAMLOGSharedContentAddLinkExpiryType.h"
#import "DBTEAMLOGSharedContentAddLinkPasswordType.h"
#import "DBTEAMLOGSharedContentAddMemberType.h"
#import "DBTEAMLOGSharedContentChangeDownloadsPolicyType.h"
#import "DBTEAMLOGSharedContentChangeInviteeRoleType.h"
#import "DBTEAMLOGSharedContentChangeLinkAudienceType.h"
#import "DBTEAMLOGSharedContentChangeLinkExpiryType.h"
#import "DBTEAMLOGSharedContentChangeLinkPasswordType.h"
#import "DBTEAMLOGSharedContentChangeMemberRoleType.h"
#import "DBTEAMLOGSharedContentChangeViewerInfoPolicyType.h"
#import "DBTEAMLOGSharedContentClaimInvitationType.h"
#import "DBTEAMLOGSharedContentCopyType.h"
#import "DBTEAMLOGSharedContentDownloadType.h"
#import "DBTEAMLOGSharedContentRelinquishMembershipType.h"
#import "DBTEAMLOGSharedContentRemoveInviteesType.h"
#import "DBTEAMLOGSharedContentRemoveLinkExpiryType.h"
#import "DBTEAMLOGSharedContentRemoveLinkPasswordType.h"
#import "DBTEAMLOGSharedContentRemoveMemberType.h"
#import "DBTEAMLOGSharedContentRequestAccessType.h"
#import "DBTEAMLOGSharedContentUnshareType.h"
#import "DBTEAMLOGSharedContentViewType.h"
#import "DBTEAMLOGSharedFolderChangeLinkPolicyType.h"
#import "DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType.h"
#import "DBTEAMLOGSharedFolderChangeMembersManagementPolicyType.h"
#import "DBTEAMLOGSharedFolderChangeMembersPolicyType.h"
#import "DBTEAMLOGSharedFolderCreateType.h"
#import "DBTEAMLOGSharedFolderDeclineInvitationType.h"
#import "DBTEAMLOGSharedFolderMountType.h"
#import "DBTEAMLOGSharedFolderNestType.h"
#import "DBTEAMLOGSharedFolderTransferOwnershipType.h"
#import "DBTEAMLOGSharedFolderUnmountType.h"
#import "DBTEAMLOGSharedLinkAddExpiryType.h"
#import "DBTEAMLOGSharedLinkChangeExpiryType.h"
#import "DBTEAMLOGSharedLinkChangeVisibilityType.h"
#import "DBTEAMLOGSharedLinkCopyType.h"
#import "DBTEAMLOGSharedLinkCreateType.h"
#import "DBTEAMLOGSharedLinkDisableType.h"
#import "DBTEAMLOGSharedLinkDownloadType.h"
#import "DBTEAMLOGSharedLinkRemoveExpiryType.h"
#import "DBTEAMLOGSharedLinkShareType.h"
#import "DBTEAMLOGSharedLinkViewType.h"
#import "DBTEAMLOGSharedNoteOpenedType.h"
#import "DBTEAMLOGSharingChangeFolderJoinPolicyType.h"
#import "DBTEAMLOGSharingChangeLinkPolicyType.h"
#import "DBTEAMLOGSharingChangeMemberPolicyType.h"
#import "DBTEAMLOGShmodelGroupShareType.h"
#import "DBTEAMLOGShowcaseAccessGrantedType.h"
#import "DBTEAMLOGShowcaseAddMemberType.h"
#import "DBTEAMLOGShowcaseArchivedType.h"
#import "DBTEAMLOGShowcaseChangeDownloadPolicyType.h"
#import "DBTEAMLOGShowcaseChangeEnabledPolicyType.h"
#import "DBTEAMLOGShowcaseChangeExternalSharingPolicyType.h"
#import "DBTEAMLOGShowcaseCreatedType.h"
#import "DBTEAMLOGShowcaseDeleteCommentType.h"
#import "DBTEAMLOGShowcaseEditCommentType.h"
#import "DBTEAMLOGShowcaseEditedType.h"
#import "DBTEAMLOGShowcaseFileAddedType.h"
#import "DBTEAMLOGShowcaseFileDownloadType.h"
#import "DBTEAMLOGShowcaseFileRemovedType.h"
#import "DBTEAMLOGShowcaseFileViewType.h"
#import "DBTEAMLOGShowcasePermanentlyDeletedType.h"
#import "DBTEAMLOGShowcasePostCommentType.h"
#import "DBTEAMLOGShowcaseRemoveMemberType.h"
#import "DBTEAMLOGShowcaseRenamedType.h"
#import "DBTEAMLOGShowcaseRequestAccessType.h"
#import "DBTEAMLOGShowcaseResolveCommentType.h"
#import "DBTEAMLOGShowcaseRestoredType.h"
#import "DBTEAMLOGShowcaseTrashedDeprecatedType.h"
#import "DBTEAMLOGShowcaseTrashedType.h"
#import "DBTEAMLOGShowcaseUnresolveCommentType.h"
#import "DBTEAMLOGShowcaseUntrashedDeprecatedType.h"
#import "DBTEAMLOGShowcaseUntrashedType.h"
#import "DBTEAMLOGShowcaseViewType.h"
#import "DBTEAMLOGSignInAsSessionEndType.h"
#import "DBTEAMLOGSignInAsSessionStartType.h"
#import "DBTEAMLOGSmartSyncChangePolicyType.h"
#import "DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType.h"
#import "DBTEAMLOGSmartSyncNotOptOutType.h"
#import "DBTEAMLOGSmartSyncOptOutType.h"
#import "DBTEAMLOGSsoAddCertType.h"
#import "DBTEAMLOGSsoAddLoginUrlType.h"
#import "DBTEAMLOGSsoAddLogoutUrlType.h"
#import "DBTEAMLOGSsoChangeCertType.h"
#import "DBTEAMLOGSsoChangeLoginUrlType.h"
#import "DBTEAMLOGSsoChangeLogoutUrlType.h"
#import "DBTEAMLOGSsoChangePolicyType.h"
#import "DBTEAMLOGSsoChangeSamlIdentityModeType.h"
#import "DBTEAMLOGSsoErrorType.h"
#import "DBTEAMLOGSsoRemoveCertType.h"
#import "DBTEAMLOGSsoRemoveLoginUrlType.h"
#import "DBTEAMLOGSsoRemoveLogoutUrlType.h"
#import "DBTEAMLOGTeamActivityCreateReportType.h"
#import "DBTEAMLOGTeamFolderChangeStatusType.h"
#import "DBTEAMLOGTeamFolderCreateType.h"
#import "DBTEAMLOGTeamFolderDowngradeType.h"
#import "DBTEAMLOGTeamFolderPermanentlyDeleteType.h"
#import "DBTEAMLOGTeamFolderRenameType.h"
#import "DBTEAMLOGTeamMergeFromType.h"
#import "DBTEAMLOGTeamMergeToType.h"
#import "DBTEAMLOGTeamProfileAddLogoType.h"
#import "DBTEAMLOGTeamProfileChangeDefaultLanguageType.h"
#import "DBTEAMLOGTeamProfileChangeLogoType.h"
#import "DBTEAMLOGTeamProfileChangeNameType.h"
#import "DBTEAMLOGTeamProfileRemoveLogoType.h"
#import "DBTEAMLOGTeamSelectiveSyncSettingsChangedType.h"
#import "DBTEAMLOGTfaAddBackupPhoneType.h"
#import "DBTEAMLOGTfaAddSecurityKeyType.h"
#import "DBTEAMLOGTfaChangeBackupPhoneType.h"
#import "DBTEAMLOGTfaChangePolicyType.h"
#import "DBTEAMLOGTfaChangeStatusType.h"
#import "DBTEAMLOGTfaRemoveBackupPhoneType.h"
#import "DBTEAMLOGTfaRemoveSecurityKeyType.h"
#import "DBTEAMLOGTfaResetType.h"
#import "DBTEAMLOGTwoAccountChangePolicyType.h"
#import "DBTEAMLOGWebSessionsChangeFixedLengthPolicyType.h"
#import "DBTEAMLOGWebSessionsChangeIdleLengthPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEventType

@synthesize appLinkTeam = _appLinkTeam;
@synthesize appLinkUser = _appLinkUser;
@synthesize appUnlinkTeam = _appUnlinkTeam;
@synthesize appUnlinkUser = _appUnlinkUser;
@synthesize fileAddComment = _fileAddComment;
@synthesize fileChangeCommentSubscription = _fileChangeCommentSubscription;
@synthesize fileDeleteComment = _fileDeleteComment;
@synthesize fileLikeComment = _fileLikeComment;
@synthesize fileResolveComment = _fileResolveComment;
@synthesize fileUnlikeComment = _fileUnlikeComment;
@synthesize fileUnresolveComment = _fileUnresolveComment;
@synthesize deviceChangeIpDesktop = _deviceChangeIpDesktop;
@synthesize deviceChangeIpMobile = _deviceChangeIpMobile;
@synthesize deviceChangeIpWeb = _deviceChangeIpWeb;
@synthesize deviceDeleteOnUnlinkFail = _deviceDeleteOnUnlinkFail;
@synthesize deviceDeleteOnUnlinkSuccess = _deviceDeleteOnUnlinkSuccess;
@synthesize deviceLinkFail = _deviceLinkFail;
@synthesize deviceLinkSuccess = _deviceLinkSuccess;
@synthesize deviceManagementDisabled = _deviceManagementDisabled;
@synthesize deviceManagementEnabled = _deviceManagementEnabled;
@synthesize deviceUnlink = _deviceUnlink;
@synthesize emmRefreshAuthToken = _emmRefreshAuthToken;
@synthesize accountCaptureChangeAvailability = _accountCaptureChangeAvailability;
@synthesize accountCaptureMigrateAccount = _accountCaptureMigrateAccount;
@synthesize accountCaptureNotificationEmailsSent = _accountCaptureNotificationEmailsSent;
@synthesize accountCaptureRelinquishAccount = _accountCaptureRelinquishAccount;
@synthesize disabledDomainInvites = _disabledDomainInvites;
@synthesize domainInvitesApproveRequestToJoinTeam = _domainInvitesApproveRequestToJoinTeam;
@synthesize domainInvitesDeclineRequestToJoinTeam = _domainInvitesDeclineRequestToJoinTeam;
@synthesize domainInvitesEmailExistingUsers = _domainInvitesEmailExistingUsers;
@synthesize domainInvitesRequestToJoinTeam = _domainInvitesRequestToJoinTeam;
@synthesize domainInvitesSetInviteNewUserPrefToNo = _domainInvitesSetInviteNewUserPrefToNo;
@synthesize domainInvitesSetInviteNewUserPrefToYes = _domainInvitesSetInviteNewUserPrefToYes;
@synthesize domainVerificationAddDomainFail = _domainVerificationAddDomainFail;
@synthesize domainVerificationAddDomainSuccess = _domainVerificationAddDomainSuccess;
@synthesize domainVerificationRemoveDomain = _domainVerificationRemoveDomain;
@synthesize enabledDomainInvites = _enabledDomainInvites;
@synthesize createFolder = _createFolder;
@synthesize fileAdd = _fileAdd;
@synthesize fileCopy = _fileCopy;
@synthesize fileDelete = _fileDelete;
@synthesize fileDownload = _fileDownload;
@synthesize fileEdit = _fileEdit;
@synthesize fileGetCopyReference = _fileGetCopyReference;
@synthesize fileMove = _fileMove;
@synthesize filePermanentlyDelete = _filePermanentlyDelete;
@synthesize filePreview = _filePreview;
@synthesize fileRename = _fileRename;
@synthesize fileRestore = _fileRestore;
@synthesize fileRevert = _fileRevert;
@synthesize fileRollbackChanges = _fileRollbackChanges;
@synthesize fileSaveCopyReference = _fileSaveCopyReference;
@synthesize fileRequestChange = _fileRequestChange;
@synthesize fileRequestClose = _fileRequestClose;
@synthesize fileRequestCreate = _fileRequestCreate;
@synthesize fileRequestReceiveFile = _fileRequestReceiveFile;
@synthesize groupAddExternalId = _groupAddExternalId;
@synthesize groupAddMember = _groupAddMember;
@synthesize groupChangeExternalId = _groupChangeExternalId;
@synthesize groupChangeManagementType = _groupChangeManagementType;
@synthesize groupChangeMemberRole = _groupChangeMemberRole;
@synthesize groupCreate = _groupCreate;
@synthesize groupDelete = _groupDelete;
@synthesize groupDescriptionUpdated = _groupDescriptionUpdated;
@synthesize groupJoinPolicyUpdated = _groupJoinPolicyUpdated;
@synthesize groupMoved = _groupMoved;
@synthesize groupRemoveExternalId = _groupRemoveExternalId;
@synthesize groupRemoveMember = _groupRemoveMember;
@synthesize groupRename = _groupRename;
@synthesize emmError = _emmError;
@synthesize loginFail = _loginFail;
@synthesize loginSuccess = _loginSuccess;
@synthesize logout = _logout;
@synthesize resellerSupportSessionEnd = _resellerSupportSessionEnd;
@synthesize resellerSupportSessionStart = _resellerSupportSessionStart;
@synthesize signInAsSessionEnd = _signInAsSessionEnd;
@synthesize signInAsSessionStart = _signInAsSessionStart;
@synthesize ssoError = _ssoError;
@synthesize memberAddName = _memberAddName;
@synthesize memberChangeAdminRole = _memberChangeAdminRole;
@synthesize memberChangeEmail = _memberChangeEmail;
@synthesize memberChangeMembershipType = _memberChangeMembershipType;
@synthesize memberChangeName = _memberChangeName;
@synthesize memberChangeStatus = _memberChangeStatus;
@synthesize memberPermanentlyDeleteAccountContents = _memberPermanentlyDeleteAccountContents;
@synthesize memberSpaceLimitsAddCustomQuota = _memberSpaceLimitsAddCustomQuota;
@synthesize memberSpaceLimitsChangeCustomQuota = _memberSpaceLimitsChangeCustomQuota;
@synthesize memberSpaceLimitsChangeStatus = _memberSpaceLimitsChangeStatus;
@synthesize memberSpaceLimitsRemoveCustomQuota = _memberSpaceLimitsRemoveCustomQuota;
@synthesize memberSuggest = _memberSuggest;
@synthesize memberTransferAccountContents = _memberTransferAccountContents;
@synthesize secondaryMailsPolicyChanged = _secondaryMailsPolicyChanged;
@synthesize paperContentAddMember = _paperContentAddMember;
@synthesize paperContentAddToFolder = _paperContentAddToFolder;
@synthesize paperContentArchive = _paperContentArchive;
@synthesize paperContentCreate = _paperContentCreate;
@synthesize paperContentPermanentlyDelete = _paperContentPermanentlyDelete;
@synthesize paperContentRemoveFromFolder = _paperContentRemoveFromFolder;
@synthesize paperContentRemoveMember = _paperContentRemoveMember;
@synthesize paperContentRename = _paperContentRename;
@synthesize paperContentRestore = _paperContentRestore;
@synthesize paperDocAddComment = _paperDocAddComment;
@synthesize paperDocChangeMemberRole = _paperDocChangeMemberRole;
@synthesize paperDocChangeSharingPolicy = _paperDocChangeSharingPolicy;
@synthesize paperDocChangeSubscription = _paperDocChangeSubscription;
@synthesize paperDocDeleted = _paperDocDeleted;
@synthesize paperDocDeleteComment = _paperDocDeleteComment;
@synthesize paperDocDownload = _paperDocDownload;
@synthesize paperDocEdit = _paperDocEdit;
@synthesize paperDocEditComment = _paperDocEditComment;
@synthesize paperDocFollowed = _paperDocFollowed;
@synthesize paperDocMention = _paperDocMention;
@synthesize paperDocRequestAccess = _paperDocRequestAccess;
@synthesize paperDocResolveComment = _paperDocResolveComment;
@synthesize paperDocRevert = _paperDocRevert;
@synthesize paperDocSlackShare = _paperDocSlackShare;
@synthesize paperDocTeamInvite = _paperDocTeamInvite;
@synthesize paperDocTrashed = _paperDocTrashed;
@synthesize paperDocUnresolveComment = _paperDocUnresolveComment;
@synthesize paperDocUntrashed = _paperDocUntrashed;
@synthesize paperDocView = _paperDocView;
@synthesize paperExternalViewAllow = _paperExternalViewAllow;
@synthesize paperExternalViewDefaultTeam = _paperExternalViewDefaultTeam;
@synthesize paperExternalViewForbid = _paperExternalViewForbid;
@synthesize paperFolderChangeSubscription = _paperFolderChangeSubscription;
@synthesize paperFolderDeleted = _paperFolderDeleted;
@synthesize paperFolderFollowed = _paperFolderFollowed;
@synthesize paperFolderTeamInvite = _paperFolderTeamInvite;
@synthesize passwordChange = _passwordChange;
@synthesize passwordReset = _passwordReset;
@synthesize passwordResetAll = _passwordResetAll;
@synthesize emmCreateExceptionsReport = _emmCreateExceptionsReport;
@synthesize emmCreateUsageReport = _emmCreateUsageReport;
@synthesize exportMembersReport = _exportMembersReport;
@synthesize paperAdminExportStart = _paperAdminExportStart;
@synthesize smartSyncCreateAdminPrivilegeReport = _smartSyncCreateAdminPrivilegeReport;
@synthesize teamActivityCreateReport = _teamActivityCreateReport;
@synthesize collectionShare = _collectionShare;
@synthesize noteAclInviteOnly = _noteAclInviteOnly;
@synthesize noteAclLink = _noteAclLink;
@synthesize noteAclTeamLink = _noteAclTeamLink;
@synthesize noteShared = _noteShared;
@synthesize noteShareReceive = _noteShareReceive;
@synthesize openNoteShared = _openNoteShared;
@synthesize sfAddGroup = _sfAddGroup;
@synthesize sfAllowNonMembersToViewSharedLinks = _sfAllowNonMembersToViewSharedLinks;
@synthesize sfExternalInviteWarn = _sfExternalInviteWarn;
@synthesize sfFbInvite = _sfFbInvite;
@synthesize sfFbInviteChangeRole = _sfFbInviteChangeRole;
@synthesize sfFbUninvite = _sfFbUninvite;
@synthesize sfInviteGroup = _sfInviteGroup;
@synthesize sfTeamGrantAccess = _sfTeamGrantAccess;
@synthesize sfTeamInvite = _sfTeamInvite;
@synthesize sfTeamInviteChangeRole = _sfTeamInviteChangeRole;
@synthesize sfTeamJoin = _sfTeamJoin;
@synthesize sfTeamJoinFromOobLink = _sfTeamJoinFromOobLink;
@synthesize sfTeamUninvite = _sfTeamUninvite;
@synthesize sharedContentAddInvitees = _sharedContentAddInvitees;
@synthesize sharedContentAddLinkExpiry = _sharedContentAddLinkExpiry;
@synthesize sharedContentAddLinkPassword = _sharedContentAddLinkPassword;
@synthesize sharedContentAddMember = _sharedContentAddMember;
@synthesize sharedContentChangeDownloadsPolicy = _sharedContentChangeDownloadsPolicy;
@synthesize sharedContentChangeInviteeRole = _sharedContentChangeInviteeRole;
@synthesize sharedContentChangeLinkAudience = _sharedContentChangeLinkAudience;
@synthesize sharedContentChangeLinkExpiry = _sharedContentChangeLinkExpiry;
@synthesize sharedContentChangeLinkPassword = _sharedContentChangeLinkPassword;
@synthesize sharedContentChangeMemberRole = _sharedContentChangeMemberRole;
@synthesize sharedContentChangeViewerInfoPolicy = _sharedContentChangeViewerInfoPolicy;
@synthesize sharedContentClaimInvitation = _sharedContentClaimInvitation;
@synthesize sharedContentCopy = _sharedContentCopy;
@synthesize sharedContentDownload = _sharedContentDownload;
@synthesize sharedContentRelinquishMembership = _sharedContentRelinquishMembership;
@synthesize sharedContentRemoveInvitees = _sharedContentRemoveInvitees;
@synthesize sharedContentRemoveLinkExpiry = _sharedContentRemoveLinkExpiry;
@synthesize sharedContentRemoveLinkPassword = _sharedContentRemoveLinkPassword;
@synthesize sharedContentRemoveMember = _sharedContentRemoveMember;
@synthesize sharedContentRequestAccess = _sharedContentRequestAccess;
@synthesize sharedContentUnshare = _sharedContentUnshare;
@synthesize sharedContentView = _sharedContentView;
@synthesize sharedFolderChangeLinkPolicy = _sharedFolderChangeLinkPolicy;
@synthesize sharedFolderChangeMembersInheritancePolicy = _sharedFolderChangeMembersInheritancePolicy;
@synthesize sharedFolderChangeMembersManagementPolicy = _sharedFolderChangeMembersManagementPolicy;
@synthesize sharedFolderChangeMembersPolicy = _sharedFolderChangeMembersPolicy;
@synthesize sharedFolderCreate = _sharedFolderCreate;
@synthesize sharedFolderDeclineInvitation = _sharedFolderDeclineInvitation;
@synthesize sharedFolderMount = _sharedFolderMount;
@synthesize sharedFolderNest = _sharedFolderNest;
@synthesize sharedFolderTransferOwnership = _sharedFolderTransferOwnership;
@synthesize sharedFolderUnmount = _sharedFolderUnmount;
@synthesize sharedLinkAddExpiry = _sharedLinkAddExpiry;
@synthesize sharedLinkChangeExpiry = _sharedLinkChangeExpiry;
@synthesize sharedLinkChangeVisibility = _sharedLinkChangeVisibility;
@synthesize sharedLinkCopy = _sharedLinkCopy;
@synthesize sharedLinkCreate = _sharedLinkCreate;
@synthesize sharedLinkDisable = _sharedLinkDisable;
@synthesize sharedLinkDownload = _sharedLinkDownload;
@synthesize sharedLinkRemoveExpiry = _sharedLinkRemoveExpiry;
@synthesize sharedLinkShare = _sharedLinkShare;
@synthesize sharedLinkView = _sharedLinkView;
@synthesize sharedNoteOpened = _sharedNoteOpened;
@synthesize shmodelGroupShare = _shmodelGroupShare;
@synthesize showcaseAccessGranted = _showcaseAccessGranted;
@synthesize showcaseAddMember = _showcaseAddMember;
@synthesize showcaseArchived = _showcaseArchived;
@synthesize showcaseCreated = _showcaseCreated;
@synthesize showcaseDeleteComment = _showcaseDeleteComment;
@synthesize showcaseEdited = _showcaseEdited;
@synthesize showcaseEditComment = _showcaseEditComment;
@synthesize showcaseFileAdded = _showcaseFileAdded;
@synthesize showcaseFileDownload = _showcaseFileDownload;
@synthesize showcaseFileRemoved = _showcaseFileRemoved;
@synthesize showcaseFileView = _showcaseFileView;
@synthesize showcasePermanentlyDeleted = _showcasePermanentlyDeleted;
@synthesize showcasePostComment = _showcasePostComment;
@synthesize showcaseRemoveMember = _showcaseRemoveMember;
@synthesize showcaseRenamed = _showcaseRenamed;
@synthesize showcaseRequestAccess = _showcaseRequestAccess;
@synthesize showcaseResolveComment = _showcaseResolveComment;
@synthesize showcaseRestored = _showcaseRestored;
@synthesize showcaseTrashed = _showcaseTrashed;
@synthesize showcaseTrashedDeprecated = _showcaseTrashedDeprecated;
@synthesize showcaseUnresolveComment = _showcaseUnresolveComment;
@synthesize showcaseUntrashed = _showcaseUntrashed;
@synthesize showcaseUntrashedDeprecated = _showcaseUntrashedDeprecated;
@synthesize showcaseView = _showcaseView;
@synthesize ssoAddCert = _ssoAddCert;
@synthesize ssoAddLoginUrl = _ssoAddLoginUrl;
@synthesize ssoAddLogoutUrl = _ssoAddLogoutUrl;
@synthesize ssoChangeCert = _ssoChangeCert;
@synthesize ssoChangeLoginUrl = _ssoChangeLoginUrl;
@synthesize ssoChangeLogoutUrl = _ssoChangeLogoutUrl;
@synthesize ssoChangeSamlIdentityMode = _ssoChangeSamlIdentityMode;
@synthesize ssoRemoveCert = _ssoRemoveCert;
@synthesize ssoRemoveLoginUrl = _ssoRemoveLoginUrl;
@synthesize ssoRemoveLogoutUrl = _ssoRemoveLogoutUrl;
@synthesize teamFolderChangeStatus = _teamFolderChangeStatus;
@synthesize teamFolderCreate = _teamFolderCreate;
@synthesize teamFolderDowngrade = _teamFolderDowngrade;
@synthesize teamFolderPermanentlyDelete = _teamFolderPermanentlyDelete;
@synthesize teamFolderRename = _teamFolderRename;
@synthesize teamSelectiveSyncSettingsChanged = _teamSelectiveSyncSettingsChanged;
@synthesize accountCaptureChangePolicy = _accountCaptureChangePolicy;
@synthesize allowDownloadDisabled = _allowDownloadDisabled;
@synthesize allowDownloadEnabled = _allowDownloadEnabled;
@synthesize dataPlacementRestrictionChangePolicy = _dataPlacementRestrictionChangePolicy;
@synthesize dataPlacementRestrictionSatisfyPolicy = _dataPlacementRestrictionSatisfyPolicy;
@synthesize deviceApprovalsChangeDesktopPolicy = _deviceApprovalsChangeDesktopPolicy;
@synthesize deviceApprovalsChangeMobilePolicy = _deviceApprovalsChangeMobilePolicy;
@synthesize deviceApprovalsChangeOverageAction = _deviceApprovalsChangeOverageAction;
@synthesize deviceApprovalsChangeUnlinkAction = _deviceApprovalsChangeUnlinkAction;
@synthesize directoryRestrictionsAddMembers = _directoryRestrictionsAddMembers;
@synthesize directoryRestrictionsRemoveMembers = _directoryRestrictionsRemoveMembers;
@synthesize emmAddException = _emmAddException;
@synthesize emmChangePolicy = _emmChangePolicy;
@synthesize emmRemoveException = _emmRemoveException;
@synthesize extendedVersionHistoryChangePolicy = _extendedVersionHistoryChangePolicy;
@synthesize fileCommentsChangePolicy = _fileCommentsChangePolicy;
@synthesize fileRequestsChangePolicy = _fileRequestsChangePolicy;
@synthesize fileRequestsEmailsEnabled = _fileRequestsEmailsEnabled;
@synthesize fileRequestsEmailsRestrictedToTeamOnly = _fileRequestsEmailsRestrictedToTeamOnly;
@synthesize googleSsoChangePolicy = _googleSsoChangePolicy;
@synthesize groupUserManagementChangePolicy = _groupUserManagementChangePolicy;
@synthesize memberRequestsChangePolicy = _memberRequestsChangePolicy;
@synthesize memberSpaceLimitsAddException = _memberSpaceLimitsAddException;
@synthesize memberSpaceLimitsChangeCapsTypePolicy = _memberSpaceLimitsChangeCapsTypePolicy;
@synthesize memberSpaceLimitsChangePolicy = _memberSpaceLimitsChangePolicy;
@synthesize memberSpaceLimitsRemoveException = _memberSpaceLimitsRemoveException;
@synthesize memberSuggestionsChangePolicy = _memberSuggestionsChangePolicy;
@synthesize microsoftOfficeAddinChangePolicy = _microsoftOfficeAddinChangePolicy;
@synthesize networkControlChangePolicy = _networkControlChangePolicy;
@synthesize paperChangeDeploymentPolicy = _paperChangeDeploymentPolicy;
@synthesize paperChangeMemberLinkPolicy = _paperChangeMemberLinkPolicy;
@synthesize paperChangeMemberPolicy = _paperChangeMemberPolicy;
@synthesize paperChangePolicy = _paperChangePolicy;
@synthesize paperEnabledUsersGroupAddition = _paperEnabledUsersGroupAddition;
@synthesize paperEnabledUsersGroupRemoval = _paperEnabledUsersGroupRemoval;
@synthesize permanentDeleteChangePolicy = _permanentDeleteChangePolicy;
@synthesize sharingChangeFolderJoinPolicy = _sharingChangeFolderJoinPolicy;
@synthesize sharingChangeLinkPolicy = _sharingChangeLinkPolicy;
@synthesize sharingChangeMemberPolicy = _sharingChangeMemberPolicy;
@synthesize showcaseChangeDownloadPolicy = _showcaseChangeDownloadPolicy;
@synthesize showcaseChangeEnabledPolicy = _showcaseChangeEnabledPolicy;
@synthesize showcaseChangeExternalSharingPolicy = _showcaseChangeExternalSharingPolicy;
@synthesize smartSyncChangePolicy = _smartSyncChangePolicy;
@synthesize smartSyncNotOptOut = _smartSyncNotOptOut;
@synthesize smartSyncOptOut = _smartSyncOptOut;
@synthesize ssoChangePolicy = _ssoChangePolicy;
@synthesize tfaChangePolicy = _tfaChangePolicy;
@synthesize twoAccountChangePolicy = _twoAccountChangePolicy;
@synthesize webSessionsChangeFixedLengthPolicy = _webSessionsChangeFixedLengthPolicy;
@synthesize webSessionsChangeIdleLengthPolicy = _webSessionsChangeIdleLengthPolicy;
@synthesize teamMergeFrom = _teamMergeFrom;
@synthesize teamMergeTo = _teamMergeTo;
@synthesize teamProfileAddLogo = _teamProfileAddLogo;
@synthesize teamProfileChangeDefaultLanguage = _teamProfileChangeDefaultLanguage;
@synthesize teamProfileChangeLogo = _teamProfileChangeLogo;
@synthesize teamProfileChangeName = _teamProfileChangeName;
@synthesize teamProfileRemoveLogo = _teamProfileRemoveLogo;
@synthesize tfaAddBackupPhone = _tfaAddBackupPhone;
@synthesize tfaAddSecurityKey = _tfaAddSecurityKey;
@synthesize tfaChangeBackupPhone = _tfaChangeBackupPhone;
@synthesize tfaChangeStatus = _tfaChangeStatus;
@synthesize tfaRemoveBackupPhone = _tfaRemoveBackupPhone;
@synthesize tfaRemoveSecurityKey = _tfaRemoveSecurityKey;
@synthesize tfaReset = _tfaReset;

#pragma mark - Constructors

- (instancetype)initWithAppLinkTeam:(DBTEAMLOGAppLinkTeamType *)appLinkTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAppLinkTeam;
    _appLinkTeam = appLinkTeam;
  }
  return self;
}

- (instancetype)initWithAppLinkUser:(DBTEAMLOGAppLinkUserType *)appLinkUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAppLinkUser;
    _appLinkUser = appLinkUser;
  }
  return self;
}

- (instancetype)initWithAppUnlinkTeam:(DBTEAMLOGAppUnlinkTeamType *)appUnlinkTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAppUnlinkTeam;
    _appUnlinkTeam = appUnlinkTeam;
  }
  return self;
}

- (instancetype)initWithAppUnlinkUser:(DBTEAMLOGAppUnlinkUserType *)appUnlinkUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAppUnlinkUser;
    _appUnlinkUser = appUnlinkUser;
  }
  return self;
}

- (instancetype)initWithFileAddComment:(DBTEAMLOGFileAddCommentType *)fileAddComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileAddComment;
    _fileAddComment = fileAddComment;
  }
  return self;
}

- (instancetype)initWithFileChangeCommentSubscription:
    (DBTEAMLOGFileChangeCommentSubscriptionType *)fileChangeCommentSubscription {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileChangeCommentSubscription;
    _fileChangeCommentSubscription = fileChangeCommentSubscription;
  }
  return self;
}

- (instancetype)initWithFileDeleteComment:(DBTEAMLOGFileDeleteCommentType *)fileDeleteComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileDeleteComment;
    _fileDeleteComment = fileDeleteComment;
  }
  return self;
}

- (instancetype)initWithFileLikeComment:(DBTEAMLOGFileLikeCommentType *)fileLikeComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileLikeComment;
    _fileLikeComment = fileLikeComment;
  }
  return self;
}

- (instancetype)initWithFileResolveComment:(DBTEAMLOGFileResolveCommentType *)fileResolveComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileResolveComment;
    _fileResolveComment = fileResolveComment;
  }
  return self;
}

- (instancetype)initWithFileUnlikeComment:(DBTEAMLOGFileUnlikeCommentType *)fileUnlikeComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileUnlikeComment;
    _fileUnlikeComment = fileUnlikeComment;
  }
  return self;
}

- (instancetype)initWithFileUnresolveComment:(DBTEAMLOGFileUnresolveCommentType *)fileUnresolveComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileUnresolveComment;
    _fileUnresolveComment = fileUnresolveComment;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpDesktop:(DBTEAMLOGDeviceChangeIpDesktopType *)deviceChangeIpDesktop {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceChangeIpDesktop;
    _deviceChangeIpDesktop = deviceChangeIpDesktop;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpMobile:(DBTEAMLOGDeviceChangeIpMobileType *)deviceChangeIpMobile {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceChangeIpMobile;
    _deviceChangeIpMobile = deviceChangeIpMobile;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpWeb:(DBTEAMLOGDeviceChangeIpWebType *)deviceChangeIpWeb {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceChangeIpWeb;
    _deviceChangeIpWeb = deviceChangeIpWeb;
  }
  return self;
}

- (instancetype)initWithDeviceDeleteOnUnlinkFail:(DBTEAMLOGDeviceDeleteOnUnlinkFailType *)deviceDeleteOnUnlinkFail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail;
    _deviceDeleteOnUnlinkFail = deviceDeleteOnUnlinkFail;
  }
  return self;
}

- (instancetype)initWithDeviceDeleteOnUnlinkSuccess:
    (DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *)deviceDeleteOnUnlinkSuccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess;
    _deviceDeleteOnUnlinkSuccess = deviceDeleteOnUnlinkSuccess;
  }
  return self;
}

- (instancetype)initWithDeviceLinkFail:(DBTEAMLOGDeviceLinkFailType *)deviceLinkFail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceLinkFail;
    _deviceLinkFail = deviceLinkFail;
  }
  return self;
}

- (instancetype)initWithDeviceLinkSuccess:(DBTEAMLOGDeviceLinkSuccessType *)deviceLinkSuccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceLinkSuccess;
    _deviceLinkSuccess = deviceLinkSuccess;
  }
  return self;
}

- (instancetype)initWithDeviceManagementDisabled:(DBTEAMLOGDeviceManagementDisabledType *)deviceManagementDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceManagementDisabled;
    _deviceManagementDisabled = deviceManagementDisabled;
  }
  return self;
}

- (instancetype)initWithDeviceManagementEnabled:(DBTEAMLOGDeviceManagementEnabledType *)deviceManagementEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceManagementEnabled;
    _deviceManagementEnabled = deviceManagementEnabled;
  }
  return self;
}

- (instancetype)initWithDeviceUnlink:(DBTEAMLOGDeviceUnlinkType *)deviceUnlink {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceUnlink;
    _deviceUnlink = deviceUnlink;
  }
  return self;
}

- (instancetype)initWithEmmRefreshAuthToken:(DBTEAMLOGEmmRefreshAuthTokenType *)emmRefreshAuthToken {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmRefreshAuthToken;
    _emmRefreshAuthToken = emmRefreshAuthToken;
  }
  return self;
}

- (instancetype)initWithAccountCaptureChangeAvailability:
    (DBTEAMLOGAccountCaptureChangeAvailabilityType *)accountCaptureChangeAvailability {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAccountCaptureChangeAvailability;
    _accountCaptureChangeAvailability = accountCaptureChangeAvailability;
  }
  return self;
}

- (instancetype)initWithAccountCaptureMigrateAccount:
    (DBTEAMLOGAccountCaptureMigrateAccountType *)accountCaptureMigrateAccount {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAccountCaptureMigrateAccount;
    _accountCaptureMigrateAccount = accountCaptureMigrateAccount;
  }
  return self;
}

- (instancetype)initWithAccountCaptureNotificationEmailsSent:
    (DBTEAMLOGAccountCaptureNotificationEmailsSentType *)accountCaptureNotificationEmailsSent {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAccountCaptureNotificationEmailsSent;
    _accountCaptureNotificationEmailsSent = accountCaptureNotificationEmailsSent;
  }
  return self;
}

- (instancetype)initWithAccountCaptureRelinquishAccount:
    (DBTEAMLOGAccountCaptureRelinquishAccountType *)accountCaptureRelinquishAccount {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAccountCaptureRelinquishAccount;
    _accountCaptureRelinquishAccount = accountCaptureRelinquishAccount;
  }
  return self;
}

- (instancetype)initWithDisabledDomainInvites:(DBTEAMLOGDisabledDomainInvitesType *)disabledDomainInvites {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDisabledDomainInvites;
    _disabledDomainInvites = disabledDomainInvites;
  }
  return self;
}

- (instancetype)initWithDomainInvitesApproveRequestToJoinTeam:
    (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *)domainInvitesApproveRequestToJoinTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam;
    _domainInvitesApproveRequestToJoinTeam = domainInvitesApproveRequestToJoinTeam;
  }
  return self;
}

- (instancetype)initWithDomainInvitesDeclineRequestToJoinTeam:
    (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *)domainInvitesDeclineRequestToJoinTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam;
    _domainInvitesDeclineRequestToJoinTeam = domainInvitesDeclineRequestToJoinTeam;
  }
  return self;
}

- (instancetype)initWithDomainInvitesEmailExistingUsers:
    (DBTEAMLOGDomainInvitesEmailExistingUsersType *)domainInvitesEmailExistingUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers;
    _domainInvitesEmailExistingUsers = domainInvitesEmailExistingUsers;
  }
  return self;
}

- (instancetype)initWithDomainInvitesRequestToJoinTeam:
    (DBTEAMLOGDomainInvitesRequestToJoinTeamType *)domainInvitesRequestToJoinTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam;
    _domainInvitesRequestToJoinTeam = domainInvitesRequestToJoinTeam;
  }
  return self;
}

- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToNo:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *)domainInvitesSetInviteNewUserPrefToNo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo;
    _domainInvitesSetInviteNewUserPrefToNo = domainInvitesSetInviteNewUserPrefToNo;
  }
  return self;
}

- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToYes:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *)domainInvitesSetInviteNewUserPrefToYes {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes;
    _domainInvitesSetInviteNewUserPrefToYes = domainInvitesSetInviteNewUserPrefToYes;
  }
  return self;
}

- (instancetype)initWithDomainVerificationAddDomainFail:
    (DBTEAMLOGDomainVerificationAddDomainFailType *)domainVerificationAddDomainFail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainVerificationAddDomainFail;
    _domainVerificationAddDomainFail = domainVerificationAddDomainFail;
  }
  return self;
}

- (instancetype)initWithDomainVerificationAddDomainSuccess:
    (DBTEAMLOGDomainVerificationAddDomainSuccessType *)domainVerificationAddDomainSuccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess;
    _domainVerificationAddDomainSuccess = domainVerificationAddDomainSuccess;
  }
  return self;
}

- (instancetype)initWithDomainVerificationRemoveDomain:
    (DBTEAMLOGDomainVerificationRemoveDomainType *)domainVerificationRemoveDomain {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainVerificationRemoveDomain;
    _domainVerificationRemoveDomain = domainVerificationRemoveDomain;
  }
  return self;
}

- (instancetype)initWithEnabledDomainInvites:(DBTEAMLOGEnabledDomainInvitesType *)enabledDomainInvites {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEnabledDomainInvites;
    _enabledDomainInvites = enabledDomainInvites;
  }
  return self;
}

- (instancetype)initWithCreateFolder:(DBTEAMLOGCreateFolderType *)createFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeCreateFolder;
    _createFolder = createFolder;
  }
  return self;
}

- (instancetype)initWithFileAdd:(DBTEAMLOGFileAddType *)fileAdd {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileAdd;
    _fileAdd = fileAdd;
  }
  return self;
}

- (instancetype)initWithFileCopy:(DBTEAMLOGFileCopyType *)fileCopy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileCopy;
    _fileCopy = fileCopy;
  }
  return self;
}

- (instancetype)initWithFileDelete:(DBTEAMLOGFileDeleteType *)fileDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileDelete;
    _fileDelete = fileDelete;
  }
  return self;
}

- (instancetype)initWithFileDownload:(DBTEAMLOGFileDownloadType *)fileDownload {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileDownload;
    _fileDownload = fileDownload;
  }
  return self;
}

- (instancetype)initWithFileEdit:(DBTEAMLOGFileEditType *)fileEdit {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileEdit;
    _fileEdit = fileEdit;
  }
  return self;
}

- (instancetype)initWithFileGetCopyReference:(DBTEAMLOGFileGetCopyReferenceType *)fileGetCopyReference {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileGetCopyReference;
    _fileGetCopyReference = fileGetCopyReference;
  }
  return self;
}

- (instancetype)initWithFileMove:(DBTEAMLOGFileMoveType *)fileMove {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileMove;
    _fileMove = fileMove;
  }
  return self;
}

- (instancetype)initWithFilePermanentlyDelete:(DBTEAMLOGFilePermanentlyDeleteType *)filePermanentlyDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFilePermanentlyDelete;
    _filePermanentlyDelete = filePermanentlyDelete;
  }
  return self;
}

- (instancetype)initWithFilePreview:(DBTEAMLOGFilePreviewType *)filePreview {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFilePreview;
    _filePreview = filePreview;
  }
  return self;
}

- (instancetype)initWithFileRename:(DBTEAMLOGFileRenameType *)fileRename {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRename;
    _fileRename = fileRename;
  }
  return self;
}

- (instancetype)initWithFileRestore:(DBTEAMLOGFileRestoreType *)fileRestore {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRestore;
    _fileRestore = fileRestore;
  }
  return self;
}

- (instancetype)initWithFileRevert:(DBTEAMLOGFileRevertType *)fileRevert {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRevert;
    _fileRevert = fileRevert;
  }
  return self;
}

- (instancetype)initWithFileRollbackChanges:(DBTEAMLOGFileRollbackChangesType *)fileRollbackChanges {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRollbackChanges;
    _fileRollbackChanges = fileRollbackChanges;
  }
  return self;
}

- (instancetype)initWithFileSaveCopyReference:(DBTEAMLOGFileSaveCopyReferenceType *)fileSaveCopyReference {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileSaveCopyReference;
    _fileSaveCopyReference = fileSaveCopyReference;
  }
  return self;
}

- (instancetype)initWithFileRequestChange:(DBTEAMLOGFileRequestChangeType *)fileRequestChange {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestChange;
    _fileRequestChange = fileRequestChange;
  }
  return self;
}

- (instancetype)initWithFileRequestClose:(DBTEAMLOGFileRequestCloseType *)fileRequestClose {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestClose;
    _fileRequestClose = fileRequestClose;
  }
  return self;
}

- (instancetype)initWithFileRequestCreate:(DBTEAMLOGFileRequestCreateType *)fileRequestCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestCreate;
    _fileRequestCreate = fileRequestCreate;
  }
  return self;
}

- (instancetype)initWithFileRequestReceiveFile:(DBTEAMLOGFileRequestReceiveFileType *)fileRequestReceiveFile {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestReceiveFile;
    _fileRequestReceiveFile = fileRequestReceiveFile;
  }
  return self;
}

- (instancetype)initWithGroupAddExternalId:(DBTEAMLOGGroupAddExternalIdType *)groupAddExternalId {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupAddExternalId;
    _groupAddExternalId = groupAddExternalId;
  }
  return self;
}

- (instancetype)initWithGroupAddMember:(DBTEAMLOGGroupAddMemberType *)groupAddMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupAddMember;
    _groupAddMember = groupAddMember;
  }
  return self;
}

- (instancetype)initWithGroupChangeExternalId:(DBTEAMLOGGroupChangeExternalIdType *)groupChangeExternalId {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupChangeExternalId;
    _groupChangeExternalId = groupChangeExternalId;
  }
  return self;
}

- (instancetype)initWithGroupChangeManagementType:(DBTEAMLOGGroupChangeManagementTypeType *)groupChangeManagementType {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupChangeManagementType;
    _groupChangeManagementType = groupChangeManagementType;
  }
  return self;
}

- (instancetype)initWithGroupChangeMemberRole:(DBTEAMLOGGroupChangeMemberRoleType *)groupChangeMemberRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupChangeMemberRole;
    _groupChangeMemberRole = groupChangeMemberRole;
  }
  return self;
}

- (instancetype)initWithGroupCreate:(DBTEAMLOGGroupCreateType *)groupCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupCreate;
    _groupCreate = groupCreate;
  }
  return self;
}

- (instancetype)initWithGroupDelete:(DBTEAMLOGGroupDeleteType *)groupDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupDelete;
    _groupDelete = groupDelete;
  }
  return self;
}

- (instancetype)initWithGroupDescriptionUpdated:(DBTEAMLOGGroupDescriptionUpdatedType *)groupDescriptionUpdated {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupDescriptionUpdated;
    _groupDescriptionUpdated = groupDescriptionUpdated;
  }
  return self;
}

- (instancetype)initWithGroupJoinPolicyUpdated:(DBTEAMLOGGroupJoinPolicyUpdatedType *)groupJoinPolicyUpdated {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupJoinPolicyUpdated;
    _groupJoinPolicyUpdated = groupJoinPolicyUpdated;
  }
  return self;
}

- (instancetype)initWithGroupMoved:(DBTEAMLOGGroupMovedType *)groupMoved {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupMoved;
    _groupMoved = groupMoved;
  }
  return self;
}

- (instancetype)initWithGroupRemoveExternalId:(DBTEAMLOGGroupRemoveExternalIdType *)groupRemoveExternalId {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupRemoveExternalId;
    _groupRemoveExternalId = groupRemoveExternalId;
  }
  return self;
}

- (instancetype)initWithGroupRemoveMember:(DBTEAMLOGGroupRemoveMemberType *)groupRemoveMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupRemoveMember;
    _groupRemoveMember = groupRemoveMember;
  }
  return self;
}

- (instancetype)initWithGroupRename:(DBTEAMLOGGroupRenameType *)groupRename {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupRename;
    _groupRename = groupRename;
  }
  return self;
}

- (instancetype)initWithEmmError:(DBTEAMLOGEmmErrorType *)emmError {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmError;
    _emmError = emmError;
  }
  return self;
}

- (instancetype)initWithLoginFail:(DBTEAMLOGLoginFailType *)loginFail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeLoginFail;
    _loginFail = loginFail;
  }
  return self;
}

- (instancetype)initWithLoginSuccess:(DBTEAMLOGLoginSuccessType *)loginSuccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeLoginSuccess;
    _loginSuccess = loginSuccess;
  }
  return self;
}

- (instancetype)initWithLogout:(DBTEAMLOGLogoutType *)logout {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeLogout;
    _logout = logout;
  }
  return self;
}

- (instancetype)initWithResellerSupportSessionEnd:(DBTEAMLOGResellerSupportSessionEndType *)resellerSupportSessionEnd {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeResellerSupportSessionEnd;
    _resellerSupportSessionEnd = resellerSupportSessionEnd;
  }
  return self;
}

- (instancetype)initWithResellerSupportSessionStart:
    (DBTEAMLOGResellerSupportSessionStartType *)resellerSupportSessionStart {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeResellerSupportSessionStart;
    _resellerSupportSessionStart = resellerSupportSessionStart;
  }
  return self;
}

- (instancetype)initWithSignInAsSessionEnd:(DBTEAMLOGSignInAsSessionEndType *)signInAsSessionEnd {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSignInAsSessionEnd;
    _signInAsSessionEnd = signInAsSessionEnd;
  }
  return self;
}

- (instancetype)initWithSignInAsSessionStart:(DBTEAMLOGSignInAsSessionStartType *)signInAsSessionStart {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSignInAsSessionStart;
    _signInAsSessionStart = signInAsSessionStart;
  }
  return self;
}

- (instancetype)initWithSsoError:(DBTEAMLOGSsoErrorType *)ssoError {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoError;
    _ssoError = ssoError;
  }
  return self;
}

- (instancetype)initWithMemberAddName:(DBTEAMLOGMemberAddNameType *)memberAddName {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberAddName;
    _memberAddName = memberAddName;
  }
  return self;
}

- (instancetype)initWithMemberChangeAdminRole:(DBTEAMLOGMemberChangeAdminRoleType *)memberChangeAdminRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberChangeAdminRole;
    _memberChangeAdminRole = memberChangeAdminRole;
  }
  return self;
}

- (instancetype)initWithMemberChangeEmail:(DBTEAMLOGMemberChangeEmailType *)memberChangeEmail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberChangeEmail;
    _memberChangeEmail = memberChangeEmail;
  }
  return self;
}

- (instancetype)initWithMemberChangeMembershipType:
    (DBTEAMLOGMemberChangeMembershipTypeType *)memberChangeMembershipType {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberChangeMembershipType;
    _memberChangeMembershipType = memberChangeMembershipType;
  }
  return self;
}

- (instancetype)initWithMemberChangeName:(DBTEAMLOGMemberChangeNameType *)memberChangeName {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberChangeName;
    _memberChangeName = memberChangeName;
  }
  return self;
}

- (instancetype)initWithMemberChangeStatus:(DBTEAMLOGMemberChangeStatusType *)memberChangeStatus {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberChangeStatus;
    _memberChangeStatus = memberChangeStatus;
  }
  return self;
}

- (instancetype)initWithMemberPermanentlyDeleteAccountContents:
    (DBTEAMLOGMemberPermanentlyDeleteAccountContentsType *)memberPermanentlyDeleteAccountContents {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents;
    _memberPermanentlyDeleteAccountContents = memberPermanentlyDeleteAccountContents;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsAddCustomQuota:
    (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType *)memberSpaceLimitsAddCustomQuota {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsAddCustomQuota;
    _memberSpaceLimitsAddCustomQuota = memberSpaceLimitsAddCustomQuota;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeCustomQuota:
    (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType *)memberSpaceLimitsChangeCustomQuota {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsChangeCustomQuota;
    _memberSpaceLimitsChangeCustomQuota = memberSpaceLimitsChangeCustomQuota;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeStatus:
    (DBTEAMLOGMemberSpaceLimitsChangeStatusType *)memberSpaceLimitsChangeStatus {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus;
    _memberSpaceLimitsChangeStatus = memberSpaceLimitsChangeStatus;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsRemoveCustomQuota:
    (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType *)memberSpaceLimitsRemoveCustomQuota {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsRemoveCustomQuota;
    _memberSpaceLimitsRemoveCustomQuota = memberSpaceLimitsRemoveCustomQuota;
  }
  return self;
}

- (instancetype)initWithMemberSuggest:(DBTEAMLOGMemberSuggestType *)memberSuggest {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSuggest;
    _memberSuggest = memberSuggest;
  }
  return self;
}

- (instancetype)initWithMemberTransferAccountContents:
    (DBTEAMLOGMemberTransferAccountContentsType *)memberTransferAccountContents {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberTransferAccountContents;
    _memberTransferAccountContents = memberTransferAccountContents;
  }
  return self;
}

- (instancetype)initWithSecondaryMailsPolicyChanged:
    (DBTEAMLOGSecondaryMailsPolicyChangedType *)secondaryMailsPolicyChanged {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSecondaryMailsPolicyChanged;
    _secondaryMailsPolicyChanged = secondaryMailsPolicyChanged;
  }
  return self;
}

- (instancetype)initWithPaperContentAddMember:(DBTEAMLOGPaperContentAddMemberType *)paperContentAddMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentAddMember;
    _paperContentAddMember = paperContentAddMember;
  }
  return self;
}

- (instancetype)initWithPaperContentAddToFolder:(DBTEAMLOGPaperContentAddToFolderType *)paperContentAddToFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentAddToFolder;
    _paperContentAddToFolder = paperContentAddToFolder;
  }
  return self;
}

- (instancetype)initWithPaperContentArchive:(DBTEAMLOGPaperContentArchiveType *)paperContentArchive {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentArchive;
    _paperContentArchive = paperContentArchive;
  }
  return self;
}

- (instancetype)initWithPaperContentCreate:(DBTEAMLOGPaperContentCreateType *)paperContentCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentCreate;
    _paperContentCreate = paperContentCreate;
  }
  return self;
}

- (instancetype)initWithPaperContentPermanentlyDelete:
    (DBTEAMLOGPaperContentPermanentlyDeleteType *)paperContentPermanentlyDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentPermanentlyDelete;
    _paperContentPermanentlyDelete = paperContentPermanentlyDelete;
  }
  return self;
}

- (instancetype)initWithPaperContentRemoveFromFolder:
    (DBTEAMLOGPaperContentRemoveFromFolderType *)paperContentRemoveFromFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentRemoveFromFolder;
    _paperContentRemoveFromFolder = paperContentRemoveFromFolder;
  }
  return self;
}

- (instancetype)initWithPaperContentRemoveMember:(DBTEAMLOGPaperContentRemoveMemberType *)paperContentRemoveMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentRemoveMember;
    _paperContentRemoveMember = paperContentRemoveMember;
  }
  return self;
}

- (instancetype)initWithPaperContentRename:(DBTEAMLOGPaperContentRenameType *)paperContentRename {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentRename;
    _paperContentRename = paperContentRename;
  }
  return self;
}

- (instancetype)initWithPaperContentRestore:(DBTEAMLOGPaperContentRestoreType *)paperContentRestore {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentRestore;
    _paperContentRestore = paperContentRestore;
  }
  return self;
}

- (instancetype)initWithPaperDocAddComment:(DBTEAMLOGPaperDocAddCommentType *)paperDocAddComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocAddComment;
    _paperDocAddComment = paperDocAddComment;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeMemberRole:(DBTEAMLOGPaperDocChangeMemberRoleType *)paperDocChangeMemberRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocChangeMemberRole;
    _paperDocChangeMemberRole = paperDocChangeMemberRole;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeSharingPolicy:
    (DBTEAMLOGPaperDocChangeSharingPolicyType *)paperDocChangeSharingPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocChangeSharingPolicy;
    _paperDocChangeSharingPolicy = paperDocChangeSharingPolicy;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeSubscription:
    (DBTEAMLOGPaperDocChangeSubscriptionType *)paperDocChangeSubscription {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocChangeSubscription;
    _paperDocChangeSubscription = paperDocChangeSubscription;
  }
  return self;
}

- (instancetype)initWithPaperDocDeleted:(DBTEAMLOGPaperDocDeletedType *)paperDocDeleted {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocDeleted;
    _paperDocDeleted = paperDocDeleted;
  }
  return self;
}

- (instancetype)initWithPaperDocDeleteComment:(DBTEAMLOGPaperDocDeleteCommentType *)paperDocDeleteComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocDeleteComment;
    _paperDocDeleteComment = paperDocDeleteComment;
  }
  return self;
}

- (instancetype)initWithPaperDocDownload:(DBTEAMLOGPaperDocDownloadType *)paperDocDownload {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocDownload;
    _paperDocDownload = paperDocDownload;
  }
  return self;
}

- (instancetype)initWithPaperDocEdit:(DBTEAMLOGPaperDocEditType *)paperDocEdit {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocEdit;
    _paperDocEdit = paperDocEdit;
  }
  return self;
}

- (instancetype)initWithPaperDocEditComment:(DBTEAMLOGPaperDocEditCommentType *)paperDocEditComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocEditComment;
    _paperDocEditComment = paperDocEditComment;
  }
  return self;
}

- (instancetype)initWithPaperDocFollowed:(DBTEAMLOGPaperDocFollowedType *)paperDocFollowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocFollowed;
    _paperDocFollowed = paperDocFollowed;
  }
  return self;
}

- (instancetype)initWithPaperDocMention:(DBTEAMLOGPaperDocMentionType *)paperDocMention {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocMention;
    _paperDocMention = paperDocMention;
  }
  return self;
}

- (instancetype)initWithPaperDocRequestAccess:(DBTEAMLOGPaperDocRequestAccessType *)paperDocRequestAccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocRequestAccess;
    _paperDocRequestAccess = paperDocRequestAccess;
  }
  return self;
}

- (instancetype)initWithPaperDocResolveComment:(DBTEAMLOGPaperDocResolveCommentType *)paperDocResolveComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocResolveComment;
    _paperDocResolveComment = paperDocResolveComment;
  }
  return self;
}

- (instancetype)initWithPaperDocRevert:(DBTEAMLOGPaperDocRevertType *)paperDocRevert {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocRevert;
    _paperDocRevert = paperDocRevert;
  }
  return self;
}

- (instancetype)initWithPaperDocSlackShare:(DBTEAMLOGPaperDocSlackShareType *)paperDocSlackShare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocSlackShare;
    _paperDocSlackShare = paperDocSlackShare;
  }
  return self;
}

- (instancetype)initWithPaperDocTeamInvite:(DBTEAMLOGPaperDocTeamInviteType *)paperDocTeamInvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocTeamInvite;
    _paperDocTeamInvite = paperDocTeamInvite;
  }
  return self;
}

- (instancetype)initWithPaperDocTrashed:(DBTEAMLOGPaperDocTrashedType *)paperDocTrashed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocTrashed;
    _paperDocTrashed = paperDocTrashed;
  }
  return self;
}

- (instancetype)initWithPaperDocUnresolveComment:(DBTEAMLOGPaperDocUnresolveCommentType *)paperDocUnresolveComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocUnresolveComment;
    _paperDocUnresolveComment = paperDocUnresolveComment;
  }
  return self;
}

- (instancetype)initWithPaperDocUntrashed:(DBTEAMLOGPaperDocUntrashedType *)paperDocUntrashed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocUntrashed;
    _paperDocUntrashed = paperDocUntrashed;
  }
  return self;
}

- (instancetype)initWithPaperDocView:(DBTEAMLOGPaperDocViewType *)paperDocView {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocView;
    _paperDocView = paperDocView;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewAllow:(DBTEAMLOGPaperExternalViewAllowType *)paperExternalViewAllow {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperExternalViewAllow;
    _paperExternalViewAllow = paperExternalViewAllow;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewDefaultTeam:
    (DBTEAMLOGPaperExternalViewDefaultTeamType *)paperExternalViewDefaultTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperExternalViewDefaultTeam;
    _paperExternalViewDefaultTeam = paperExternalViewDefaultTeam;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewForbid:(DBTEAMLOGPaperExternalViewForbidType *)paperExternalViewForbid {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperExternalViewForbid;
    _paperExternalViewForbid = paperExternalViewForbid;
  }
  return self;
}

- (instancetype)initWithPaperFolderChangeSubscription:
    (DBTEAMLOGPaperFolderChangeSubscriptionType *)paperFolderChangeSubscription {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperFolderChangeSubscription;
    _paperFolderChangeSubscription = paperFolderChangeSubscription;
  }
  return self;
}

- (instancetype)initWithPaperFolderDeleted:(DBTEAMLOGPaperFolderDeletedType *)paperFolderDeleted {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperFolderDeleted;
    _paperFolderDeleted = paperFolderDeleted;
  }
  return self;
}

- (instancetype)initWithPaperFolderFollowed:(DBTEAMLOGPaperFolderFollowedType *)paperFolderFollowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperFolderFollowed;
    _paperFolderFollowed = paperFolderFollowed;
  }
  return self;
}

- (instancetype)initWithPaperFolderTeamInvite:(DBTEAMLOGPaperFolderTeamInviteType *)paperFolderTeamInvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperFolderTeamInvite;
    _paperFolderTeamInvite = paperFolderTeamInvite;
  }
  return self;
}

- (instancetype)initWithPasswordChange:(DBTEAMLOGPasswordChangeType *)passwordChange {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePasswordChange;
    _passwordChange = passwordChange;
  }
  return self;
}

- (instancetype)initWithPasswordReset:(DBTEAMLOGPasswordResetType *)passwordReset {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePasswordReset;
    _passwordReset = passwordReset;
  }
  return self;
}

- (instancetype)initWithPasswordResetAll:(DBTEAMLOGPasswordResetAllType *)passwordResetAll {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePasswordResetAll;
    _passwordResetAll = passwordResetAll;
  }
  return self;
}

- (instancetype)initWithEmmCreateExceptionsReport:(DBTEAMLOGEmmCreateExceptionsReportType *)emmCreateExceptionsReport {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmCreateExceptionsReport;
    _emmCreateExceptionsReport = emmCreateExceptionsReport;
  }
  return self;
}

- (instancetype)initWithEmmCreateUsageReport:(DBTEAMLOGEmmCreateUsageReportType *)emmCreateUsageReport {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmCreateUsageReport;
    _emmCreateUsageReport = emmCreateUsageReport;
  }
  return self;
}

- (instancetype)initWithExportMembersReport:(DBTEAMLOGExportMembersReportType *)exportMembersReport {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeExportMembersReport;
    _exportMembersReport = exportMembersReport;
  }
  return self;
}

- (instancetype)initWithPaperAdminExportStart:(DBTEAMLOGPaperAdminExportStartType *)paperAdminExportStart {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperAdminExportStart;
    _paperAdminExportStart = paperAdminExportStart;
  }
  return self;
}

- (instancetype)initWithSmartSyncCreateAdminPrivilegeReport:
    (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType *)smartSyncCreateAdminPrivilegeReport {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport;
    _smartSyncCreateAdminPrivilegeReport = smartSyncCreateAdminPrivilegeReport;
  }
  return self;
}

- (instancetype)initWithTeamActivityCreateReport:(DBTEAMLOGTeamActivityCreateReportType *)teamActivityCreateReport {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamActivityCreateReport;
    _teamActivityCreateReport = teamActivityCreateReport;
  }
  return self;
}

- (instancetype)initWithCollectionShare:(DBTEAMLOGCollectionShareType *)collectionShare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeCollectionShare;
    _collectionShare = collectionShare;
  }
  return self;
}

- (instancetype)initWithNoteAclInviteOnly:(DBTEAMLOGNoteAclInviteOnlyType *)noteAclInviteOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNoteAclInviteOnly;
    _noteAclInviteOnly = noteAclInviteOnly;
  }
  return self;
}

- (instancetype)initWithNoteAclLink:(DBTEAMLOGNoteAclLinkType *)noteAclLink {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNoteAclLink;
    _noteAclLink = noteAclLink;
  }
  return self;
}

- (instancetype)initWithNoteAclTeamLink:(DBTEAMLOGNoteAclTeamLinkType *)noteAclTeamLink {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNoteAclTeamLink;
    _noteAclTeamLink = noteAclTeamLink;
  }
  return self;
}

- (instancetype)initWithNoteShared:(DBTEAMLOGNoteSharedType *)noteShared {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNoteShared;
    _noteShared = noteShared;
  }
  return self;
}

- (instancetype)initWithNoteShareReceive:(DBTEAMLOGNoteShareReceiveType *)noteShareReceive {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNoteShareReceive;
    _noteShareReceive = noteShareReceive;
  }
  return self;
}

- (instancetype)initWithOpenNoteShared:(DBTEAMLOGOpenNoteSharedType *)openNoteShared {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeOpenNoteShared;
    _openNoteShared = openNoteShared;
  }
  return self;
}

- (instancetype)initWithSfAddGroup:(DBTEAMLOGSfAddGroupType *)sfAddGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfAddGroup;
    _sfAddGroup = sfAddGroup;
  }
  return self;
}

- (instancetype)initWithSfAllowNonMembersToViewSharedLinks:
    (DBTEAMLOGSfAllowNonMembersToViewSharedLinksType *)sfAllowNonMembersToViewSharedLinks {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks;
    _sfAllowNonMembersToViewSharedLinks = sfAllowNonMembersToViewSharedLinks;
  }
  return self;
}

- (instancetype)initWithSfExternalInviteWarn:(DBTEAMLOGSfExternalInviteWarnType *)sfExternalInviteWarn {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfExternalInviteWarn;
    _sfExternalInviteWarn = sfExternalInviteWarn;
  }
  return self;
}

- (instancetype)initWithSfFbInvite:(DBTEAMLOGSfFbInviteType *)sfFbInvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfFbInvite;
    _sfFbInvite = sfFbInvite;
  }
  return self;
}

- (instancetype)initWithSfFbInviteChangeRole:(DBTEAMLOGSfFbInviteChangeRoleType *)sfFbInviteChangeRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfFbInviteChangeRole;
    _sfFbInviteChangeRole = sfFbInviteChangeRole;
  }
  return self;
}

- (instancetype)initWithSfFbUninvite:(DBTEAMLOGSfFbUninviteType *)sfFbUninvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfFbUninvite;
    _sfFbUninvite = sfFbUninvite;
  }
  return self;
}

- (instancetype)initWithSfInviteGroup:(DBTEAMLOGSfInviteGroupType *)sfInviteGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfInviteGroup;
    _sfInviteGroup = sfInviteGroup;
  }
  return self;
}

- (instancetype)initWithSfTeamGrantAccess:(DBTEAMLOGSfTeamGrantAccessType *)sfTeamGrantAccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamGrantAccess;
    _sfTeamGrantAccess = sfTeamGrantAccess;
  }
  return self;
}

- (instancetype)initWithSfTeamInvite:(DBTEAMLOGSfTeamInviteType *)sfTeamInvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamInvite;
    _sfTeamInvite = sfTeamInvite;
  }
  return self;
}

- (instancetype)initWithSfTeamInviteChangeRole:(DBTEAMLOGSfTeamInviteChangeRoleType *)sfTeamInviteChangeRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamInviteChangeRole;
    _sfTeamInviteChangeRole = sfTeamInviteChangeRole;
  }
  return self;
}

- (instancetype)initWithSfTeamJoin:(DBTEAMLOGSfTeamJoinType *)sfTeamJoin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamJoin;
    _sfTeamJoin = sfTeamJoin;
  }
  return self;
}

- (instancetype)initWithSfTeamJoinFromOobLink:(DBTEAMLOGSfTeamJoinFromOobLinkType *)sfTeamJoinFromOobLink {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamJoinFromOobLink;
    _sfTeamJoinFromOobLink = sfTeamJoinFromOobLink;
  }
  return self;
}

- (instancetype)initWithSfTeamUninvite:(DBTEAMLOGSfTeamUninviteType *)sfTeamUninvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamUninvite;
    _sfTeamUninvite = sfTeamUninvite;
  }
  return self;
}

- (instancetype)initWithSharedContentAddInvitees:(DBTEAMLOGSharedContentAddInviteesType *)sharedContentAddInvitees {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentAddInvitees;
    _sharedContentAddInvitees = sharedContentAddInvitees;
  }
  return self;
}

- (instancetype)initWithSharedContentAddLinkExpiry:
    (DBTEAMLOGSharedContentAddLinkExpiryType *)sharedContentAddLinkExpiry {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentAddLinkExpiry;
    _sharedContentAddLinkExpiry = sharedContentAddLinkExpiry;
  }
  return self;
}

- (instancetype)initWithSharedContentAddLinkPassword:
    (DBTEAMLOGSharedContentAddLinkPasswordType *)sharedContentAddLinkPassword {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentAddLinkPassword;
    _sharedContentAddLinkPassword = sharedContentAddLinkPassword;
  }
  return self;
}

- (instancetype)initWithSharedContentAddMember:(DBTEAMLOGSharedContentAddMemberType *)sharedContentAddMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentAddMember;
    _sharedContentAddMember = sharedContentAddMember;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeDownloadsPolicy:
    (DBTEAMLOGSharedContentChangeDownloadsPolicyType *)sharedContentChangeDownloadsPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy;
    _sharedContentChangeDownloadsPolicy = sharedContentChangeDownloadsPolicy;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeInviteeRole:
    (DBTEAMLOGSharedContentChangeInviteeRoleType *)sharedContentChangeInviteeRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeInviteeRole;
    _sharedContentChangeInviteeRole = sharedContentChangeInviteeRole;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkAudience:
    (DBTEAMLOGSharedContentChangeLinkAudienceType *)sharedContentChangeLinkAudience {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeLinkAudience;
    _sharedContentChangeLinkAudience = sharedContentChangeLinkAudience;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkExpiry:
    (DBTEAMLOGSharedContentChangeLinkExpiryType *)sharedContentChangeLinkExpiry {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeLinkExpiry;
    _sharedContentChangeLinkExpiry = sharedContentChangeLinkExpiry;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkPassword:
    (DBTEAMLOGSharedContentChangeLinkPasswordType *)sharedContentChangeLinkPassword {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeLinkPassword;
    _sharedContentChangeLinkPassword = sharedContentChangeLinkPassword;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeMemberRole:
    (DBTEAMLOGSharedContentChangeMemberRoleType *)sharedContentChangeMemberRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeMemberRole;
    _sharedContentChangeMemberRole = sharedContentChangeMemberRole;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeViewerInfoPolicy:
    (DBTEAMLOGSharedContentChangeViewerInfoPolicyType *)sharedContentChangeViewerInfoPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy;
    _sharedContentChangeViewerInfoPolicy = sharedContentChangeViewerInfoPolicy;
  }
  return self;
}

- (instancetype)initWithSharedContentClaimInvitation:
    (DBTEAMLOGSharedContentClaimInvitationType *)sharedContentClaimInvitation {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentClaimInvitation;
    _sharedContentClaimInvitation = sharedContentClaimInvitation;
  }
  return self;
}

- (instancetype)initWithSharedContentCopy:(DBTEAMLOGSharedContentCopyType *)sharedContentCopy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentCopy;
    _sharedContentCopy = sharedContentCopy;
  }
  return self;
}

- (instancetype)initWithSharedContentDownload:(DBTEAMLOGSharedContentDownloadType *)sharedContentDownload {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentDownload;
    _sharedContentDownload = sharedContentDownload;
  }
  return self;
}

- (instancetype)initWithSharedContentRelinquishMembership:
    (DBTEAMLOGSharedContentRelinquishMembershipType *)sharedContentRelinquishMembership {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRelinquishMembership;
    _sharedContentRelinquishMembership = sharedContentRelinquishMembership;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveInvitees:
    (DBTEAMLOGSharedContentRemoveInviteesType *)sharedContentRemoveInvitees {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRemoveInvitees;
    _sharedContentRemoveInvitees = sharedContentRemoveInvitees;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveLinkExpiry:
    (DBTEAMLOGSharedContentRemoveLinkExpiryType *)sharedContentRemoveLinkExpiry {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry;
    _sharedContentRemoveLinkExpiry = sharedContentRemoveLinkExpiry;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveLinkPassword:
    (DBTEAMLOGSharedContentRemoveLinkPasswordType *)sharedContentRemoveLinkPassword {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRemoveLinkPassword;
    _sharedContentRemoveLinkPassword = sharedContentRemoveLinkPassword;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveMember:(DBTEAMLOGSharedContentRemoveMemberType *)sharedContentRemoveMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRemoveMember;
    _sharedContentRemoveMember = sharedContentRemoveMember;
  }
  return self;
}

- (instancetype)initWithSharedContentRequestAccess:
    (DBTEAMLOGSharedContentRequestAccessType *)sharedContentRequestAccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRequestAccess;
    _sharedContentRequestAccess = sharedContentRequestAccess;
  }
  return self;
}

- (instancetype)initWithSharedContentUnshare:(DBTEAMLOGSharedContentUnshareType *)sharedContentUnshare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentUnshare;
    _sharedContentUnshare = sharedContentUnshare;
  }
  return self;
}

- (instancetype)initWithSharedContentView:(DBTEAMLOGSharedContentViewType *)sharedContentView {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentView;
    _sharedContentView = sharedContentView;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeLinkPolicy:
    (DBTEAMLOGSharedFolderChangeLinkPolicyType *)sharedFolderChangeLinkPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy;
    _sharedFolderChangeLinkPolicy = sharedFolderChangeLinkPolicy;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMembersInheritancePolicy:
    (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType *)sharedFolderChangeMembersInheritancePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderChangeMembersInheritancePolicy;
    _sharedFolderChangeMembersInheritancePolicy = sharedFolderChangeMembersInheritancePolicy;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMembersManagementPolicy:
    (DBTEAMLOGSharedFolderChangeMembersManagementPolicyType *)sharedFolderChangeMembersManagementPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderChangeMembersManagementPolicy;
    _sharedFolderChangeMembersManagementPolicy = sharedFolderChangeMembersManagementPolicy;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMembersPolicy:
    (DBTEAMLOGSharedFolderChangeMembersPolicyType *)sharedFolderChangeMembersPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderChangeMembersPolicy;
    _sharedFolderChangeMembersPolicy = sharedFolderChangeMembersPolicy;
  }
  return self;
}

- (instancetype)initWithSharedFolderCreate:(DBTEAMLOGSharedFolderCreateType *)sharedFolderCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderCreate;
    _sharedFolderCreate = sharedFolderCreate;
  }
  return self;
}

- (instancetype)initWithSharedFolderDeclineInvitation:
    (DBTEAMLOGSharedFolderDeclineInvitationType *)sharedFolderDeclineInvitation {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderDeclineInvitation;
    _sharedFolderDeclineInvitation = sharedFolderDeclineInvitation;
  }
  return self;
}

- (instancetype)initWithSharedFolderMount:(DBTEAMLOGSharedFolderMountType *)sharedFolderMount {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderMount;
    _sharedFolderMount = sharedFolderMount;
  }
  return self;
}

- (instancetype)initWithSharedFolderNest:(DBTEAMLOGSharedFolderNestType *)sharedFolderNest {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderNest;
    _sharedFolderNest = sharedFolderNest;
  }
  return self;
}

- (instancetype)initWithSharedFolderTransferOwnership:
    (DBTEAMLOGSharedFolderTransferOwnershipType *)sharedFolderTransferOwnership {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderTransferOwnership;
    _sharedFolderTransferOwnership = sharedFolderTransferOwnership;
  }
  return self;
}

- (instancetype)initWithSharedFolderUnmount:(DBTEAMLOGSharedFolderUnmountType *)sharedFolderUnmount {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderUnmount;
    _sharedFolderUnmount = sharedFolderUnmount;
  }
  return self;
}

- (instancetype)initWithSharedLinkAddExpiry:(DBTEAMLOGSharedLinkAddExpiryType *)sharedLinkAddExpiry {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedLinkAddExpiry;
    _sharedLinkAddExpiry = sharedLinkAddExpiry;
  }
  return self;
}

- (instancetype)initWithSharedLinkChangeExpiry:(DBTEAMLOGSharedLinkChangeExpiryType *)sharedLinkChangeExpiry {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedLinkChangeExpiry;
    _sharedLinkChangeExpiry = sharedLinkChangeExpiry;
  }
  return self;
}

- (instancetype)initWithSharedLinkChangeVisibility:
    (DBTEAMLOGSharedLinkChangeVisibilityType *)sharedLinkChangeVisibility {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedLinkChangeVisibility;
    _sharedLinkChangeVisibility = sharedLinkChangeVisibility;
  }
  return self;
}

- (instancetype)initWithSharedLinkCopy:(DBTEAMLOGSharedLinkCopyType *)sharedLinkCopy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedLinkCopy;
    _sharedLinkCopy = sharedLinkCopy;
  }
  return self;
}

- (instancetype)initWithSharedLinkCreate:(DBTEAMLOGSharedLinkCreateType *)sharedLinkCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedLinkCreate;
    _sharedLinkCreate = sharedLinkCreate;
  }
  return self;
}

- (instancetype)initWithSharedLinkDisable:(DBTEAMLOGSharedLinkDisableType *)sharedLinkDisable {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedLinkDisable;
    _sharedLinkDisable = sharedLinkDisable;
  }
  return self;
}

- (instancetype)initWithSharedLinkDownload:(DBTEAMLOGSharedLinkDownloadType *)sharedLinkDownload {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedLinkDownload;
    _sharedLinkDownload = sharedLinkDownload;
  }
  return self;
}

- (instancetype)initWithSharedLinkRemoveExpiry:(DBTEAMLOGSharedLinkRemoveExpiryType *)sharedLinkRemoveExpiry {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedLinkRemoveExpiry;
    _sharedLinkRemoveExpiry = sharedLinkRemoveExpiry;
  }
  return self;
}

- (instancetype)initWithSharedLinkShare:(DBTEAMLOGSharedLinkShareType *)sharedLinkShare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedLinkShare;
    _sharedLinkShare = sharedLinkShare;
  }
  return self;
}

- (instancetype)initWithSharedLinkView:(DBTEAMLOGSharedLinkViewType *)sharedLinkView {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedLinkView;
    _sharedLinkView = sharedLinkView;
  }
  return self;
}

- (instancetype)initWithSharedNoteOpened:(DBTEAMLOGSharedNoteOpenedType *)sharedNoteOpened {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedNoteOpened;
    _sharedNoteOpened = sharedNoteOpened;
  }
  return self;
}

- (instancetype)initWithShmodelGroupShare:(DBTEAMLOGShmodelGroupShareType *)shmodelGroupShare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelGroupShare;
    _shmodelGroupShare = shmodelGroupShare;
  }
  return self;
}

- (instancetype)initWithShowcaseAccessGranted:(DBTEAMLOGShowcaseAccessGrantedType *)showcaseAccessGranted {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseAccessGranted;
    _showcaseAccessGranted = showcaseAccessGranted;
  }
  return self;
}

- (instancetype)initWithShowcaseAddMember:(DBTEAMLOGShowcaseAddMemberType *)showcaseAddMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseAddMember;
    _showcaseAddMember = showcaseAddMember;
  }
  return self;
}

- (instancetype)initWithShowcaseArchived:(DBTEAMLOGShowcaseArchivedType *)showcaseArchived {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseArchived;
    _showcaseArchived = showcaseArchived;
  }
  return self;
}

- (instancetype)initWithShowcaseCreated:(DBTEAMLOGShowcaseCreatedType *)showcaseCreated {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseCreated;
    _showcaseCreated = showcaseCreated;
  }
  return self;
}

- (instancetype)initWithShowcaseDeleteComment:(DBTEAMLOGShowcaseDeleteCommentType *)showcaseDeleteComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseDeleteComment;
    _showcaseDeleteComment = showcaseDeleteComment;
  }
  return self;
}

- (instancetype)initWithShowcaseEdited:(DBTEAMLOGShowcaseEditedType *)showcaseEdited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseEdited;
    _showcaseEdited = showcaseEdited;
  }
  return self;
}

- (instancetype)initWithShowcaseEditComment:(DBTEAMLOGShowcaseEditCommentType *)showcaseEditComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseEditComment;
    _showcaseEditComment = showcaseEditComment;
  }
  return self;
}

- (instancetype)initWithShowcaseFileAdded:(DBTEAMLOGShowcaseFileAddedType *)showcaseFileAdded {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseFileAdded;
    _showcaseFileAdded = showcaseFileAdded;
  }
  return self;
}

- (instancetype)initWithShowcaseFileDownload:(DBTEAMLOGShowcaseFileDownloadType *)showcaseFileDownload {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseFileDownload;
    _showcaseFileDownload = showcaseFileDownload;
  }
  return self;
}

- (instancetype)initWithShowcaseFileRemoved:(DBTEAMLOGShowcaseFileRemovedType *)showcaseFileRemoved {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseFileRemoved;
    _showcaseFileRemoved = showcaseFileRemoved;
  }
  return self;
}

- (instancetype)initWithShowcaseFileView:(DBTEAMLOGShowcaseFileViewType *)showcaseFileView {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseFileView;
    _showcaseFileView = showcaseFileView;
  }
  return self;
}

- (instancetype)initWithShowcasePermanentlyDeleted:
    (DBTEAMLOGShowcasePermanentlyDeletedType *)showcasePermanentlyDeleted {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcasePermanentlyDeleted;
    _showcasePermanentlyDeleted = showcasePermanentlyDeleted;
  }
  return self;
}

- (instancetype)initWithShowcasePostComment:(DBTEAMLOGShowcasePostCommentType *)showcasePostComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcasePostComment;
    _showcasePostComment = showcasePostComment;
  }
  return self;
}

- (instancetype)initWithShowcaseRemoveMember:(DBTEAMLOGShowcaseRemoveMemberType *)showcaseRemoveMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseRemoveMember;
    _showcaseRemoveMember = showcaseRemoveMember;
  }
  return self;
}

- (instancetype)initWithShowcaseRenamed:(DBTEAMLOGShowcaseRenamedType *)showcaseRenamed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseRenamed;
    _showcaseRenamed = showcaseRenamed;
  }
  return self;
}

- (instancetype)initWithShowcaseRequestAccess:(DBTEAMLOGShowcaseRequestAccessType *)showcaseRequestAccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseRequestAccess;
    _showcaseRequestAccess = showcaseRequestAccess;
  }
  return self;
}

- (instancetype)initWithShowcaseResolveComment:(DBTEAMLOGShowcaseResolveCommentType *)showcaseResolveComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseResolveComment;
    _showcaseResolveComment = showcaseResolveComment;
  }
  return self;
}

- (instancetype)initWithShowcaseRestored:(DBTEAMLOGShowcaseRestoredType *)showcaseRestored {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseRestored;
    _showcaseRestored = showcaseRestored;
  }
  return self;
}

- (instancetype)initWithShowcaseTrashed:(DBTEAMLOGShowcaseTrashedType *)showcaseTrashed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseTrashed;
    _showcaseTrashed = showcaseTrashed;
  }
  return self;
}

- (instancetype)initWithShowcaseTrashedDeprecated:(DBTEAMLOGShowcaseTrashedDeprecatedType *)showcaseTrashedDeprecated {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseTrashedDeprecated;
    _showcaseTrashedDeprecated = showcaseTrashedDeprecated;
  }
  return self;
}

- (instancetype)initWithShowcaseUnresolveComment:(DBTEAMLOGShowcaseUnresolveCommentType *)showcaseUnresolveComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseUnresolveComment;
    _showcaseUnresolveComment = showcaseUnresolveComment;
  }
  return self;
}

- (instancetype)initWithShowcaseUntrashed:(DBTEAMLOGShowcaseUntrashedType *)showcaseUntrashed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseUntrashed;
    _showcaseUntrashed = showcaseUntrashed;
  }
  return self;
}

- (instancetype)initWithShowcaseUntrashedDeprecated:
    (DBTEAMLOGShowcaseUntrashedDeprecatedType *)showcaseUntrashedDeprecated {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseUntrashedDeprecated;
    _showcaseUntrashedDeprecated = showcaseUntrashedDeprecated;
  }
  return self;
}

- (instancetype)initWithShowcaseView:(DBTEAMLOGShowcaseViewType *)showcaseView {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseView;
    _showcaseView = showcaseView;
  }
  return self;
}

- (instancetype)initWithSsoAddCert:(DBTEAMLOGSsoAddCertType *)ssoAddCert {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoAddCert;
    _ssoAddCert = ssoAddCert;
  }
  return self;
}

- (instancetype)initWithSsoAddLoginUrl:(DBTEAMLOGSsoAddLoginUrlType *)ssoAddLoginUrl {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoAddLoginUrl;
    _ssoAddLoginUrl = ssoAddLoginUrl;
  }
  return self;
}

- (instancetype)initWithSsoAddLogoutUrl:(DBTEAMLOGSsoAddLogoutUrlType *)ssoAddLogoutUrl {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoAddLogoutUrl;
    _ssoAddLogoutUrl = ssoAddLogoutUrl;
  }
  return self;
}

- (instancetype)initWithSsoChangeCert:(DBTEAMLOGSsoChangeCertType *)ssoChangeCert {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoChangeCert;
    _ssoChangeCert = ssoChangeCert;
  }
  return self;
}

- (instancetype)initWithSsoChangeLoginUrl:(DBTEAMLOGSsoChangeLoginUrlType *)ssoChangeLoginUrl {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoChangeLoginUrl;
    _ssoChangeLoginUrl = ssoChangeLoginUrl;
  }
  return self;
}

- (instancetype)initWithSsoChangeLogoutUrl:(DBTEAMLOGSsoChangeLogoutUrlType *)ssoChangeLogoutUrl {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoChangeLogoutUrl;
    _ssoChangeLogoutUrl = ssoChangeLogoutUrl;
  }
  return self;
}

- (instancetype)initWithSsoChangeSamlIdentityMode:(DBTEAMLOGSsoChangeSamlIdentityModeType *)ssoChangeSamlIdentityMode {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoChangeSamlIdentityMode;
    _ssoChangeSamlIdentityMode = ssoChangeSamlIdentityMode;
  }
  return self;
}

- (instancetype)initWithSsoRemoveCert:(DBTEAMLOGSsoRemoveCertType *)ssoRemoveCert {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoRemoveCert;
    _ssoRemoveCert = ssoRemoveCert;
  }
  return self;
}

- (instancetype)initWithSsoRemoveLoginUrl:(DBTEAMLOGSsoRemoveLoginUrlType *)ssoRemoveLoginUrl {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoRemoveLoginUrl;
    _ssoRemoveLoginUrl = ssoRemoveLoginUrl;
  }
  return self;
}

- (instancetype)initWithSsoRemoveLogoutUrl:(DBTEAMLOGSsoRemoveLogoutUrlType *)ssoRemoveLogoutUrl {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoRemoveLogoutUrl;
    _ssoRemoveLogoutUrl = ssoRemoveLogoutUrl;
  }
  return self;
}

- (instancetype)initWithTeamFolderChangeStatus:(DBTEAMLOGTeamFolderChangeStatusType *)teamFolderChangeStatus {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamFolderChangeStatus;
    _teamFolderChangeStatus = teamFolderChangeStatus;
  }
  return self;
}

- (instancetype)initWithTeamFolderCreate:(DBTEAMLOGTeamFolderCreateType *)teamFolderCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamFolderCreate;
    _teamFolderCreate = teamFolderCreate;
  }
  return self;
}

- (instancetype)initWithTeamFolderDowngrade:(DBTEAMLOGTeamFolderDowngradeType *)teamFolderDowngrade {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamFolderDowngrade;
    _teamFolderDowngrade = teamFolderDowngrade;
  }
  return self;
}

- (instancetype)initWithTeamFolderPermanentlyDelete:
    (DBTEAMLOGTeamFolderPermanentlyDeleteType *)teamFolderPermanentlyDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamFolderPermanentlyDelete;
    _teamFolderPermanentlyDelete = teamFolderPermanentlyDelete;
  }
  return self;
}

- (instancetype)initWithTeamFolderRename:(DBTEAMLOGTeamFolderRenameType *)teamFolderRename {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamFolderRename;
    _teamFolderRename = teamFolderRename;
  }
  return self;
}

- (instancetype)initWithTeamSelectiveSyncSettingsChanged:
    (DBTEAMLOGTeamSelectiveSyncSettingsChangedType *)teamSelectiveSyncSettingsChanged {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamSelectiveSyncSettingsChanged;
    _teamSelectiveSyncSettingsChanged = teamSelectiveSyncSettingsChanged;
  }
  return self;
}

- (instancetype)initWithAccountCaptureChangePolicy:
    (DBTEAMLOGAccountCaptureChangePolicyType *)accountCaptureChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAccountCaptureChangePolicy;
    _accountCaptureChangePolicy = accountCaptureChangePolicy;
  }
  return self;
}

- (instancetype)initWithAllowDownloadDisabled:(DBTEAMLOGAllowDownloadDisabledType *)allowDownloadDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAllowDownloadDisabled;
    _allowDownloadDisabled = allowDownloadDisabled;
  }
  return self;
}

- (instancetype)initWithAllowDownloadEnabled:(DBTEAMLOGAllowDownloadEnabledType *)allowDownloadEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAllowDownloadEnabled;
    _allowDownloadEnabled = allowDownloadEnabled;
  }
  return self;
}

- (instancetype)initWithDataPlacementRestrictionChangePolicy:
    (DBTEAMLOGDataPlacementRestrictionChangePolicyType *)dataPlacementRestrictionChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy;
    _dataPlacementRestrictionChangePolicy = dataPlacementRestrictionChangePolicy;
  }
  return self;
}

- (instancetype)initWithDataPlacementRestrictionSatisfyPolicy:
    (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *)dataPlacementRestrictionSatisfyPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy;
    _dataPlacementRestrictionSatisfyPolicy = dataPlacementRestrictionSatisfyPolicy;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeDesktopPolicy:
    (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *)deviceApprovalsChangeDesktopPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy;
    _deviceApprovalsChangeDesktopPolicy = deviceApprovalsChangeDesktopPolicy;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeMobilePolicy:
    (DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *)deviceApprovalsChangeMobilePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy;
    _deviceApprovalsChangeMobilePolicy = deviceApprovalsChangeMobilePolicy;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeOverageAction:
    (DBTEAMLOGDeviceApprovalsChangeOverageActionType *)deviceApprovalsChangeOverageAction {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction;
    _deviceApprovalsChangeOverageAction = deviceApprovalsChangeOverageAction;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeUnlinkAction:
    (DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *)deviceApprovalsChangeUnlinkAction {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction;
    _deviceApprovalsChangeUnlinkAction = deviceApprovalsChangeUnlinkAction;
  }
  return self;
}

- (instancetype)initWithDirectoryRestrictionsAddMembers:
    (DBTEAMLOGDirectoryRestrictionsAddMembersType *)directoryRestrictionsAddMembers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDirectoryRestrictionsAddMembers;
    _directoryRestrictionsAddMembers = directoryRestrictionsAddMembers;
  }
  return self;
}

- (instancetype)initWithDirectoryRestrictionsRemoveMembers:
    (DBTEAMLOGDirectoryRestrictionsRemoveMembersType *)directoryRestrictionsRemoveMembers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDirectoryRestrictionsRemoveMembers;
    _directoryRestrictionsRemoveMembers = directoryRestrictionsRemoveMembers;
  }
  return self;
}

- (instancetype)initWithEmmAddException:(DBTEAMLOGEmmAddExceptionType *)emmAddException {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmAddException;
    _emmAddException = emmAddException;
  }
  return self;
}

- (instancetype)initWithEmmChangePolicy:(DBTEAMLOGEmmChangePolicyType *)emmChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmChangePolicy;
    _emmChangePolicy = emmChangePolicy;
  }
  return self;
}

- (instancetype)initWithEmmRemoveException:(DBTEAMLOGEmmRemoveExceptionType *)emmRemoveException {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmRemoveException;
    _emmRemoveException = emmRemoveException;
  }
  return self;
}

- (instancetype)initWithExtendedVersionHistoryChangePolicy:
    (DBTEAMLOGExtendedVersionHistoryChangePolicyType *)extendedVersionHistoryChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy;
    _extendedVersionHistoryChangePolicy = extendedVersionHistoryChangePolicy;
  }
  return self;
}

- (instancetype)initWithFileCommentsChangePolicy:(DBTEAMLOGFileCommentsChangePolicyType *)fileCommentsChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileCommentsChangePolicy;
    _fileCommentsChangePolicy = fileCommentsChangePolicy;
  }
  return self;
}

- (instancetype)initWithFileRequestsChangePolicy:(DBTEAMLOGFileRequestsChangePolicyType *)fileRequestsChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestsChangePolicy;
    _fileRequestsChangePolicy = fileRequestsChangePolicy;
  }
  return self;
}

- (instancetype)initWithFileRequestsEmailsEnabled:(DBTEAMLOGFileRequestsEmailsEnabledType *)fileRequestsEmailsEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestsEmailsEnabled;
    _fileRequestsEmailsEnabled = fileRequestsEmailsEnabled;
  }
  return self;
}

- (instancetype)initWithFileRequestsEmailsRestrictedToTeamOnly:
    (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType *)fileRequestsEmailsRestrictedToTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly;
    _fileRequestsEmailsRestrictedToTeamOnly = fileRequestsEmailsRestrictedToTeamOnly;
  }
  return self;
}

- (instancetype)initWithGoogleSsoChangePolicy:(DBTEAMLOGGoogleSsoChangePolicyType *)googleSsoChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGoogleSsoChangePolicy;
    _googleSsoChangePolicy = googleSsoChangePolicy;
  }
  return self;
}

- (instancetype)initWithGroupUserManagementChangePolicy:
    (DBTEAMLOGGroupUserManagementChangePolicyType *)groupUserManagementChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupUserManagementChangePolicy;
    _groupUserManagementChangePolicy = groupUserManagementChangePolicy;
  }
  return self;
}

- (instancetype)initWithMemberRequestsChangePolicy:
    (DBTEAMLOGMemberRequestsChangePolicyType *)memberRequestsChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberRequestsChangePolicy;
    _memberRequestsChangePolicy = memberRequestsChangePolicy;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsAddException:
    (DBTEAMLOGMemberSpaceLimitsAddExceptionType *)memberSpaceLimitsAddException {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsAddException;
    _memberSpaceLimitsAddException = memberSpaceLimitsAddException;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeCapsTypePolicy:
    (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType *)memberSpaceLimitsChangeCapsTypePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsChangeCapsTypePolicy;
    _memberSpaceLimitsChangeCapsTypePolicy = memberSpaceLimitsChangeCapsTypePolicy;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangePolicy:
    (DBTEAMLOGMemberSpaceLimitsChangePolicyType *)memberSpaceLimitsChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy;
    _memberSpaceLimitsChangePolicy = memberSpaceLimitsChangePolicy;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsRemoveException:
    (DBTEAMLOGMemberSpaceLimitsRemoveExceptionType *)memberSpaceLimitsRemoveException {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException;
    _memberSpaceLimitsRemoveException = memberSpaceLimitsRemoveException;
  }
  return self;
}

- (instancetype)initWithMemberSuggestionsChangePolicy:
    (DBTEAMLOGMemberSuggestionsChangePolicyType *)memberSuggestionsChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSuggestionsChangePolicy;
    _memberSuggestionsChangePolicy = memberSuggestionsChangePolicy;
  }
  return self;
}

- (instancetype)initWithMicrosoftOfficeAddinChangePolicy:
    (DBTEAMLOGMicrosoftOfficeAddinChangePolicyType *)microsoftOfficeAddinChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy;
    _microsoftOfficeAddinChangePolicy = microsoftOfficeAddinChangePolicy;
  }
  return self;
}

- (instancetype)initWithNetworkControlChangePolicy:
    (DBTEAMLOGNetworkControlChangePolicyType *)networkControlChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNetworkControlChangePolicy;
    _networkControlChangePolicy = networkControlChangePolicy;
  }
  return self;
}

- (instancetype)initWithPaperChangeDeploymentPolicy:
    (DBTEAMLOGPaperChangeDeploymentPolicyType *)paperChangeDeploymentPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperChangeDeploymentPolicy;
    _paperChangeDeploymentPolicy = paperChangeDeploymentPolicy;
  }
  return self;
}

- (instancetype)initWithPaperChangeMemberLinkPolicy:
    (DBTEAMLOGPaperChangeMemberLinkPolicyType *)paperChangeMemberLinkPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperChangeMemberLinkPolicy;
    _paperChangeMemberLinkPolicy = paperChangeMemberLinkPolicy;
  }
  return self;
}

- (instancetype)initWithPaperChangeMemberPolicy:(DBTEAMLOGPaperChangeMemberPolicyType *)paperChangeMemberPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperChangeMemberPolicy;
    _paperChangeMemberPolicy = paperChangeMemberPolicy;
  }
  return self;
}

- (instancetype)initWithPaperChangePolicy:(DBTEAMLOGPaperChangePolicyType *)paperChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperChangePolicy;
    _paperChangePolicy = paperChangePolicy;
  }
  return self;
}

- (instancetype)initWithPaperEnabledUsersGroupAddition:
    (DBTEAMLOGPaperEnabledUsersGroupAdditionType *)paperEnabledUsersGroupAddition {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperEnabledUsersGroupAddition;
    _paperEnabledUsersGroupAddition = paperEnabledUsersGroupAddition;
  }
  return self;
}

- (instancetype)initWithPaperEnabledUsersGroupRemoval:
    (DBTEAMLOGPaperEnabledUsersGroupRemovalType *)paperEnabledUsersGroupRemoval {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval;
    _paperEnabledUsersGroupRemoval = paperEnabledUsersGroupRemoval;
  }
  return self;
}

- (instancetype)initWithPermanentDeleteChangePolicy:
    (DBTEAMLOGPermanentDeleteChangePolicyType *)permanentDeleteChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePermanentDeleteChangePolicy;
    _permanentDeleteChangePolicy = permanentDeleteChangePolicy;
  }
  return self;
}

- (instancetype)initWithSharingChangeFolderJoinPolicy:
    (DBTEAMLOGSharingChangeFolderJoinPolicyType *)sharingChangeFolderJoinPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy;
    _sharingChangeFolderJoinPolicy = sharingChangeFolderJoinPolicy;
  }
  return self;
}

- (instancetype)initWithSharingChangeLinkPolicy:(DBTEAMLOGSharingChangeLinkPolicyType *)sharingChangeLinkPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharingChangeLinkPolicy;
    _sharingChangeLinkPolicy = sharingChangeLinkPolicy;
  }
  return self;
}

- (instancetype)initWithSharingChangeMemberPolicy:(DBTEAMLOGSharingChangeMemberPolicyType *)sharingChangeMemberPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharingChangeMemberPolicy;
    _sharingChangeMemberPolicy = sharingChangeMemberPolicy;
  }
  return self;
}

- (instancetype)initWithShowcaseChangeDownloadPolicy:
    (DBTEAMLOGShowcaseChangeDownloadPolicyType *)showcaseChangeDownloadPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseChangeDownloadPolicy;
    _showcaseChangeDownloadPolicy = showcaseChangeDownloadPolicy;
  }
  return self;
}

- (instancetype)initWithShowcaseChangeEnabledPolicy:
    (DBTEAMLOGShowcaseChangeEnabledPolicyType *)showcaseChangeEnabledPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseChangeEnabledPolicy;
    _showcaseChangeEnabledPolicy = showcaseChangeEnabledPolicy;
  }
  return self;
}

- (instancetype)initWithShowcaseChangeExternalSharingPolicy:
    (DBTEAMLOGShowcaseChangeExternalSharingPolicyType *)showcaseChangeExternalSharingPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShowcaseChangeExternalSharingPolicy;
    _showcaseChangeExternalSharingPolicy = showcaseChangeExternalSharingPolicy;
  }
  return self;
}

- (instancetype)initWithSmartSyncChangePolicy:(DBTEAMLOGSmartSyncChangePolicyType *)smartSyncChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSmartSyncChangePolicy;
    _smartSyncChangePolicy = smartSyncChangePolicy;
  }
  return self;
}

- (instancetype)initWithSmartSyncNotOptOut:(DBTEAMLOGSmartSyncNotOptOutType *)smartSyncNotOptOut {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSmartSyncNotOptOut;
    _smartSyncNotOptOut = smartSyncNotOptOut;
  }
  return self;
}

- (instancetype)initWithSmartSyncOptOut:(DBTEAMLOGSmartSyncOptOutType *)smartSyncOptOut {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSmartSyncOptOut;
    _smartSyncOptOut = smartSyncOptOut;
  }
  return self;
}

- (instancetype)initWithSsoChangePolicy:(DBTEAMLOGSsoChangePolicyType *)ssoChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoChangePolicy;
    _ssoChangePolicy = ssoChangePolicy;
  }
  return self;
}

- (instancetype)initWithTfaChangePolicy:(DBTEAMLOGTfaChangePolicyType *)tfaChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaChangePolicy;
    _tfaChangePolicy = tfaChangePolicy;
  }
  return self;
}

- (instancetype)initWithTwoAccountChangePolicy:(DBTEAMLOGTwoAccountChangePolicyType *)twoAccountChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTwoAccountChangePolicy;
    _twoAccountChangePolicy = twoAccountChangePolicy;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeFixedLengthPolicy:
    (DBTEAMLOGWebSessionsChangeFixedLengthPolicyType *)webSessionsChangeFixedLengthPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy;
    _webSessionsChangeFixedLengthPolicy = webSessionsChangeFixedLengthPolicy;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeIdleLengthPolicy:
    (DBTEAMLOGWebSessionsChangeIdleLengthPolicyType *)webSessionsChangeIdleLengthPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy;
    _webSessionsChangeIdleLengthPolicy = webSessionsChangeIdleLengthPolicy;
  }
  return self;
}

- (instancetype)initWithTeamMergeFrom:(DBTEAMLOGTeamMergeFromType *)teamMergeFrom {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamMergeFrom;
    _teamMergeFrom = teamMergeFrom;
  }
  return self;
}

- (instancetype)initWithTeamMergeTo:(DBTEAMLOGTeamMergeToType *)teamMergeTo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamMergeTo;
    _teamMergeTo = teamMergeTo;
  }
  return self;
}

- (instancetype)initWithTeamProfileAddLogo:(DBTEAMLOGTeamProfileAddLogoType *)teamProfileAddLogo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamProfileAddLogo;
    _teamProfileAddLogo = teamProfileAddLogo;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeDefaultLanguage:
    (DBTEAMLOGTeamProfileChangeDefaultLanguageType *)teamProfileChangeDefaultLanguage {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamProfileChangeDefaultLanguage;
    _teamProfileChangeDefaultLanguage = teamProfileChangeDefaultLanguage;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeLogo:(DBTEAMLOGTeamProfileChangeLogoType *)teamProfileChangeLogo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamProfileChangeLogo;
    _teamProfileChangeLogo = teamProfileChangeLogo;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeName:(DBTEAMLOGTeamProfileChangeNameType *)teamProfileChangeName {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamProfileChangeName;
    _teamProfileChangeName = teamProfileChangeName;
  }
  return self;
}

- (instancetype)initWithTeamProfileRemoveLogo:(DBTEAMLOGTeamProfileRemoveLogoType *)teamProfileRemoveLogo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamProfileRemoveLogo;
    _teamProfileRemoveLogo = teamProfileRemoveLogo;
  }
  return self;
}

- (instancetype)initWithTfaAddBackupPhone:(DBTEAMLOGTfaAddBackupPhoneType *)tfaAddBackupPhone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaAddBackupPhone;
    _tfaAddBackupPhone = tfaAddBackupPhone;
  }
  return self;
}

- (instancetype)initWithTfaAddSecurityKey:(DBTEAMLOGTfaAddSecurityKeyType *)tfaAddSecurityKey {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaAddSecurityKey;
    _tfaAddSecurityKey = tfaAddSecurityKey;
  }
  return self;
}

- (instancetype)initWithTfaChangeBackupPhone:(DBTEAMLOGTfaChangeBackupPhoneType *)tfaChangeBackupPhone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaChangeBackupPhone;
    _tfaChangeBackupPhone = tfaChangeBackupPhone;
  }
  return self;
}

- (instancetype)initWithTfaChangeStatus:(DBTEAMLOGTfaChangeStatusType *)tfaChangeStatus {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaChangeStatus;
    _tfaChangeStatus = tfaChangeStatus;
  }
  return self;
}

- (instancetype)initWithTfaRemoveBackupPhone:(DBTEAMLOGTfaRemoveBackupPhoneType *)tfaRemoveBackupPhone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaRemoveBackupPhone;
    _tfaRemoveBackupPhone = tfaRemoveBackupPhone;
  }
  return self;
}

- (instancetype)initWithTfaRemoveSecurityKey:(DBTEAMLOGTfaRemoveSecurityKeyType *)tfaRemoveSecurityKey {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaRemoveSecurityKey;
    _tfaRemoveSecurityKey = tfaRemoveSecurityKey;
  }
  return self;
}

- (instancetype)initWithTfaReset:(DBTEAMLOGTfaResetType *)tfaReset {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaReset;
    _tfaReset = tfaReset;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGAppLinkTeamType *)appLinkTeam {
  if (![self isAppLinkTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeAppLinkTeam, but was %@.", [self tagName]];
  }
  return _appLinkTeam;
}

- (DBTEAMLOGAppLinkUserType *)appLinkUser {
  if (![self isAppLinkUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeAppLinkUser, but was %@.", [self tagName]];
  }
  return _appLinkUser;
}

- (DBTEAMLOGAppUnlinkTeamType *)appUnlinkTeam {
  if (![self isAppUnlinkTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeAppUnlinkTeam, but was %@.", [self tagName]];
  }
  return _appUnlinkTeam;
}

- (DBTEAMLOGAppUnlinkUserType *)appUnlinkUser {
  if (![self isAppUnlinkUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeAppUnlinkUser, but was %@.", [self tagName]];
  }
  return _appUnlinkUser;
}

- (DBTEAMLOGFileAddCommentType *)fileAddComment {
  if (![self isFileAddComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileAddComment, but was %@.", [self tagName]];
  }
  return _fileAddComment;
}

- (DBTEAMLOGFileChangeCommentSubscriptionType *)fileChangeCommentSubscription {
  if (![self isFileChangeCommentSubscription]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeFileChangeCommentSubscription, but was %@.", [self tagName]];
  }
  return _fileChangeCommentSubscription;
}

- (DBTEAMLOGFileDeleteCommentType *)fileDeleteComment {
  if (![self isFileDeleteComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileDeleteComment, but was %@.", [self tagName]];
  }
  return _fileDeleteComment;
}

- (DBTEAMLOGFileLikeCommentType *)fileLikeComment {
  if (![self isFileLikeComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileLikeComment, but was %@.", [self tagName]];
  }
  return _fileLikeComment;
}

- (DBTEAMLOGFileResolveCommentType *)fileResolveComment {
  if (![self isFileResolveComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileResolveComment, but was %@.", [self tagName]];
  }
  return _fileResolveComment;
}

- (DBTEAMLOGFileUnlikeCommentType *)fileUnlikeComment {
  if (![self isFileUnlikeComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileUnlikeComment, but was %@.", [self tagName]];
  }
  return _fileUnlikeComment;
}

- (DBTEAMLOGFileUnresolveCommentType *)fileUnresolveComment {
  if (![self isFileUnresolveComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileUnresolveComment, but was %@.", [self tagName]];
  }
  return _fileUnresolveComment;
}

- (DBTEAMLOGDeviceChangeIpDesktopType *)deviceChangeIpDesktop {
  if (![self isDeviceChangeIpDesktop]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceChangeIpDesktop, but was %@.", [self tagName]];
  }
  return _deviceChangeIpDesktop;
}

- (DBTEAMLOGDeviceChangeIpMobileType *)deviceChangeIpMobile {
  if (![self isDeviceChangeIpMobile]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceChangeIpMobile, but was %@.", [self tagName]];
  }
  return _deviceChangeIpMobile;
}

- (DBTEAMLOGDeviceChangeIpWebType *)deviceChangeIpWeb {
  if (![self isDeviceChangeIpWeb]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceChangeIpWeb, but was %@.", [self tagName]];
  }
  return _deviceChangeIpWeb;
}

- (DBTEAMLOGDeviceDeleteOnUnlinkFailType *)deviceDeleteOnUnlinkFail {
  if (![self isDeviceDeleteOnUnlinkFail]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail, but was %@.", [self tagName]];
  }
  return _deviceDeleteOnUnlinkFail;
}

- (DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *)deviceDeleteOnUnlinkSuccess {
  if (![self isDeviceDeleteOnUnlinkSuccess]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess, but was %@.", [self tagName]];
  }
  return _deviceDeleteOnUnlinkSuccess;
}

- (DBTEAMLOGDeviceLinkFailType *)deviceLinkFail {
  if (![self isDeviceLinkFail]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceLinkFail, but was %@.", [self tagName]];
  }
  return _deviceLinkFail;
}

- (DBTEAMLOGDeviceLinkSuccessType *)deviceLinkSuccess {
  if (![self isDeviceLinkSuccess]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceLinkSuccess, but was %@.", [self tagName]];
  }
  return _deviceLinkSuccess;
}

- (DBTEAMLOGDeviceManagementDisabledType *)deviceManagementDisabled {
  if (![self isDeviceManagementDisabled]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceManagementDisabled, but was %@.", [self tagName]];
  }
  return _deviceManagementDisabled;
}

- (DBTEAMLOGDeviceManagementEnabledType *)deviceManagementEnabled {
  if (![self isDeviceManagementEnabled]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceManagementEnabled, but was %@.", [self tagName]];
  }
  return _deviceManagementEnabled;
}

- (DBTEAMLOGDeviceUnlinkType *)deviceUnlink {
  if (![self isDeviceUnlink]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceUnlink, but was %@.", [self tagName]];
  }
  return _deviceUnlink;
}

- (DBTEAMLOGEmmRefreshAuthTokenType *)emmRefreshAuthToken {
  if (![self isEmmRefreshAuthToken]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeEmmRefreshAuthToken, but was %@.", [self tagName]];
  }
  return _emmRefreshAuthToken;
}

- (DBTEAMLOGAccountCaptureChangeAvailabilityType *)accountCaptureChangeAvailability {
  if (![self isAccountCaptureChangeAvailability]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeAccountCaptureChangeAvailability, but was %@.",
                       [self tagName]];
  }
  return _accountCaptureChangeAvailability;
}

- (DBTEAMLOGAccountCaptureMigrateAccountType *)accountCaptureMigrateAccount {
  if (![self isAccountCaptureMigrateAccount]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeAccountCaptureMigrateAccount, but was %@.", [self tagName]];
  }
  return _accountCaptureMigrateAccount;
}

- (DBTEAMLOGAccountCaptureNotificationEmailsSentType *)accountCaptureNotificationEmailsSent {
  if (![self isAccountCaptureNotificationEmailsSent]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeAccountCaptureNotificationEmailsSent, but was %@.",
                       [self tagName]];
  }
  return _accountCaptureNotificationEmailsSent;
}

- (DBTEAMLOGAccountCaptureRelinquishAccountType *)accountCaptureRelinquishAccount {
  if (![self isAccountCaptureRelinquishAccount]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeAccountCaptureRelinquishAccount, but was %@.", [self tagName]];
  }
  return _accountCaptureRelinquishAccount;
}

- (DBTEAMLOGDisabledDomainInvitesType *)disabledDomainInvites {
  if (![self isDisabledDomainInvites]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDisabledDomainInvites, but was %@.", [self tagName]];
  }
  return _disabledDomainInvites;
}

- (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *)domainInvitesApproveRequestToJoinTeam {
  if (![self isDomainInvitesApproveRequestToJoinTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam, but was %@.",
                       [self tagName]];
  }
  return _domainInvitesApproveRequestToJoinTeam;
}

- (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *)domainInvitesDeclineRequestToJoinTeam {
  if (![self isDomainInvitesDeclineRequestToJoinTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam, but was %@.",
                       [self tagName]];
  }
  return _domainInvitesDeclineRequestToJoinTeam;
}

- (DBTEAMLOGDomainInvitesEmailExistingUsersType *)domainInvitesEmailExistingUsers {
  if (![self isDomainInvitesEmailExistingUsers]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers, but was %@.", [self tagName]];
  }
  return _domainInvitesEmailExistingUsers;
}

- (DBTEAMLOGDomainInvitesRequestToJoinTeamType *)domainInvitesRequestToJoinTeam {
  if (![self isDomainInvitesRequestToJoinTeam]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam, but was %@.", [self tagName]];
  }
  return _domainInvitesRequestToJoinTeam;
}

- (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *)domainInvitesSetInviteNewUserPrefToNo {
  if (![self isDomainInvitesSetInviteNewUserPrefToNo]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo, but was %@.",
                       [self tagName]];
  }
  return _domainInvitesSetInviteNewUserPrefToNo;
}

- (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *)domainInvitesSetInviteNewUserPrefToYes {
  if (![self isDomainInvitesSetInviteNewUserPrefToYes]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes, but was %@.",
                       [self tagName]];
  }
  return _domainInvitesSetInviteNewUserPrefToYes;
}

- (DBTEAMLOGDomainVerificationAddDomainFailType *)domainVerificationAddDomainFail {
  if (![self isDomainVerificationAddDomainFail]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeDomainVerificationAddDomainFail, but was %@.", [self tagName]];
  }
  return _domainVerificationAddDomainFail;
}

- (DBTEAMLOGDomainVerificationAddDomainSuccessType *)domainVerificationAddDomainSuccess {
  if (![self isDomainVerificationAddDomainSuccess]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess, but was %@.",
                       [self tagName]];
  }
  return _domainVerificationAddDomainSuccess;
}

- (DBTEAMLOGDomainVerificationRemoveDomainType *)domainVerificationRemoveDomain {
  if (![self isDomainVerificationRemoveDomain]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeDomainVerificationRemoveDomain, but was %@.", [self tagName]];
  }
  return _domainVerificationRemoveDomain;
}

- (DBTEAMLOGEnabledDomainInvitesType *)enabledDomainInvites {
  if (![self isEnabledDomainInvites]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeEnabledDomainInvites, but was %@.", [self tagName]];
  }
  return _enabledDomainInvites;
}

- (DBTEAMLOGCreateFolderType *)createFolder {
  if (![self isCreateFolder]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeCreateFolder, but was %@.", [self tagName]];
  }
  return _createFolder;
}

- (DBTEAMLOGFileAddType *)fileAdd {
  if (![self isFileAdd]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileAdd, but was %@.", [self tagName]];
  }
  return _fileAdd;
}

- (DBTEAMLOGFileCopyType *)fileCopy {
  if (![self isFileCopy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileCopy, but was %@.", [self tagName]];
  }
  return _fileCopy;
}

- (DBTEAMLOGFileDeleteType *)fileDelete {
  if (![self isFileDelete]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileDelete, but was %@.", [self tagName]];
  }
  return _fileDelete;
}

- (DBTEAMLOGFileDownloadType *)fileDownload {
  if (![self isFileDownload]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileDownload, but was %@.", [self tagName]];
  }
  return _fileDownload;
}

- (DBTEAMLOGFileEditType *)fileEdit {
  if (![self isFileEdit]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileEdit, but was %@.", [self tagName]];
  }
  return _fileEdit;
}

- (DBTEAMLOGFileGetCopyReferenceType *)fileGetCopyReference {
  if (![self isFileGetCopyReference]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileGetCopyReference, but was %@.", [self tagName]];
  }
  return _fileGetCopyReference;
}

- (DBTEAMLOGFileMoveType *)fileMove {
  if (![self isFileMove]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileMove, but was %@.", [self tagName]];
  }
  return _fileMove;
}

- (DBTEAMLOGFilePermanentlyDeleteType *)filePermanentlyDelete {
  if (![self isFilePermanentlyDelete]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFilePermanentlyDelete, but was %@.", [self tagName]];
  }
  return _filePermanentlyDelete;
}

- (DBTEAMLOGFilePreviewType *)filePreview {
  if (![self isFilePreview]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFilePreview, but was %@.", [self tagName]];
  }
  return _filePreview;
}

- (DBTEAMLOGFileRenameType *)fileRename {
  if (![self isFileRename]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileRename, but was %@.", [self tagName]];
  }
  return _fileRename;
}

- (DBTEAMLOGFileRestoreType *)fileRestore {
  if (![self isFileRestore]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileRestore, but was %@.", [self tagName]];
  }
  return _fileRestore;
}

- (DBTEAMLOGFileRevertType *)fileRevert {
  if (![self isFileRevert]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileRevert, but was %@.", [self tagName]];
  }
  return _fileRevert;
}

- (DBTEAMLOGFileRollbackChangesType *)fileRollbackChanges {
  if (![self isFileRollbackChanges]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileRollbackChanges, but was %@.", [self tagName]];
  }
  return _fileRollbackChanges;
}

- (DBTEAMLOGFileSaveCopyReferenceType *)fileSaveCopyReference {
  if (![self isFileSaveCopyReference]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileSaveCopyReference, but was %@.", [self tagName]];
  }
  return _fileSaveCopyReference;
}

- (DBTEAMLOGFileRequestChangeType *)fileRequestChange {
  if (![self isFileRequestChange]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileRequestChange, but was %@.", [self tagName]];
  }
  return _fileRequestChange;
}

- (DBTEAMLOGFileRequestCloseType *)fileRequestClose {
  if (![self isFileRequestClose]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileRequestClose, but was %@.", [self tagName]];
  }
  return _fileRequestClose;
}

- (DBTEAMLOGFileRequestCreateType *)fileRequestCreate {
  if (![self isFileRequestCreate]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileRequestCreate, but was %@.", [self tagName]];
  }
  return _fileRequestCreate;
}

- (DBTEAMLOGFileRequestReceiveFileType *)fileRequestReceiveFile {
  if (![self isFileRequestReceiveFile]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileRequestReceiveFile, but was %@.", [self tagName]];
  }
  return _fileRequestReceiveFile;
}

- (DBTEAMLOGGroupAddExternalIdType *)groupAddExternalId {
  if (![self isGroupAddExternalId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupAddExternalId, but was %@.", [self tagName]];
  }
  return _groupAddExternalId;
}

- (DBTEAMLOGGroupAddMemberType *)groupAddMember {
  if (![self isGroupAddMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupAddMember, but was %@.", [self tagName]];
  }
  return _groupAddMember;
}

- (DBTEAMLOGGroupChangeExternalIdType *)groupChangeExternalId {
  if (![self isGroupChangeExternalId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupChangeExternalId, but was %@.", [self tagName]];
  }
  return _groupChangeExternalId;
}

- (DBTEAMLOGGroupChangeManagementTypeType *)groupChangeManagementType {
  if (![self isGroupChangeManagementType]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeGroupChangeManagementType, but was %@.", [self tagName]];
  }
  return _groupChangeManagementType;
}

- (DBTEAMLOGGroupChangeMemberRoleType *)groupChangeMemberRole {
  if (![self isGroupChangeMemberRole]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupChangeMemberRole, but was %@.", [self tagName]];
  }
  return _groupChangeMemberRole;
}

- (DBTEAMLOGGroupCreateType *)groupCreate {
  if (![self isGroupCreate]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupCreate, but was %@.", [self tagName]];
  }
  return _groupCreate;
}

- (DBTEAMLOGGroupDeleteType *)groupDelete {
  if (![self isGroupDelete]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupDelete, but was %@.", [self tagName]];
  }
  return _groupDelete;
}

- (DBTEAMLOGGroupDescriptionUpdatedType *)groupDescriptionUpdated {
  if (![self isGroupDescriptionUpdated]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupDescriptionUpdated, but was %@.", [self tagName]];
  }
  return _groupDescriptionUpdated;
}

- (DBTEAMLOGGroupJoinPolicyUpdatedType *)groupJoinPolicyUpdated {
  if (![self isGroupJoinPolicyUpdated]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupJoinPolicyUpdated, but was %@.", [self tagName]];
  }
  return _groupJoinPolicyUpdated;
}

- (DBTEAMLOGGroupMovedType *)groupMoved {
  if (![self isGroupMoved]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupMoved, but was %@.", [self tagName]];
  }
  return _groupMoved;
}

- (DBTEAMLOGGroupRemoveExternalIdType *)groupRemoveExternalId {
  if (![self isGroupRemoveExternalId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupRemoveExternalId, but was %@.", [self tagName]];
  }
  return _groupRemoveExternalId;
}

- (DBTEAMLOGGroupRemoveMemberType *)groupRemoveMember {
  if (![self isGroupRemoveMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupRemoveMember, but was %@.", [self tagName]];
  }
  return _groupRemoveMember;
}

- (DBTEAMLOGGroupRenameType *)groupRename {
  if (![self isGroupRename]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGroupRename, but was %@.", [self tagName]];
  }
  return _groupRename;
}

- (DBTEAMLOGEmmErrorType *)emmError {
  if (![self isEmmError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeEmmError, but was %@.", [self tagName]];
  }
  return _emmError;
}

- (DBTEAMLOGLoginFailType *)loginFail {
  if (![self isLoginFail]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeLoginFail, but was %@.", [self tagName]];
  }
  return _loginFail;
}

- (DBTEAMLOGLoginSuccessType *)loginSuccess {
  if (![self isLoginSuccess]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeLoginSuccess, but was %@.", [self tagName]];
  }
  return _loginSuccess;
}

- (DBTEAMLOGLogoutType *)logout {
  if (![self isLogout]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeLogout, but was %@.", [self tagName]];
  }
  return _logout;
}

- (DBTEAMLOGResellerSupportSessionEndType *)resellerSupportSessionEnd {
  if (![self isResellerSupportSessionEnd]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeResellerSupportSessionEnd, but was %@.", [self tagName]];
  }
  return _resellerSupportSessionEnd;
}

- (DBTEAMLOGResellerSupportSessionStartType *)resellerSupportSessionStart {
  if (![self isResellerSupportSessionStart]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeResellerSupportSessionStart, but was %@.", [self tagName]];
  }
  return _resellerSupportSessionStart;
}

- (DBTEAMLOGSignInAsSessionEndType *)signInAsSessionEnd {
  if (![self isSignInAsSessionEnd]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSignInAsSessionEnd, but was %@.", [self tagName]];
  }
  return _signInAsSessionEnd;
}

- (DBTEAMLOGSignInAsSessionStartType *)signInAsSessionStart {
  if (![self isSignInAsSessionStart]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSignInAsSessionStart, but was %@.", [self tagName]];
  }
  return _signInAsSessionStart;
}

- (DBTEAMLOGSsoErrorType *)ssoError {
  if (![self isSsoError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoError, but was %@.", [self tagName]];
  }
  return _ssoError;
}

- (DBTEAMLOGMemberAddNameType *)memberAddName {
  if (![self isMemberAddName]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberAddName, but was %@.", [self tagName]];
  }
  return _memberAddName;
}

- (DBTEAMLOGMemberChangeAdminRoleType *)memberChangeAdminRole {
  if (![self isMemberChangeAdminRole]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberChangeAdminRole, but was %@.", [self tagName]];
  }
  return _memberChangeAdminRole;
}

- (DBTEAMLOGMemberChangeEmailType *)memberChangeEmail {
  if (![self isMemberChangeEmail]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberChangeEmail, but was %@.", [self tagName]];
  }
  return _memberChangeEmail;
}

- (DBTEAMLOGMemberChangeMembershipTypeType *)memberChangeMembershipType {
  if (![self isMemberChangeMembershipType]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeMemberChangeMembershipType, but was %@.", [self tagName]];
  }
  return _memberChangeMembershipType;
}

- (DBTEAMLOGMemberChangeNameType *)memberChangeName {
  if (![self isMemberChangeName]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberChangeName, but was %@.", [self tagName]];
  }
  return _memberChangeName;
}

- (DBTEAMLOGMemberChangeStatusType *)memberChangeStatus {
  if (![self isMemberChangeStatus]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberChangeStatus, but was %@.", [self tagName]];
  }
  return _memberChangeStatus;
}

- (DBTEAMLOGMemberPermanentlyDeleteAccountContentsType *)memberPermanentlyDeleteAccountContents {
  if (![self isMemberPermanentlyDeleteAccountContents]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents, but was %@.",
                       [self tagName]];
  }
  return _memberPermanentlyDeleteAccountContents;
}

- (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType *)memberSpaceLimitsAddCustomQuota {
  if (![self isMemberSpaceLimitsAddCustomQuota]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeMemberSpaceLimitsAddCustomQuota, but was %@.", [self tagName]];
  }
  return _memberSpaceLimitsAddCustomQuota;
}

- (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType *)memberSpaceLimitsChangeCustomQuota {
  if (![self isMemberSpaceLimitsChangeCustomQuota]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberSpaceLimitsChangeCustomQuota, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsChangeCustomQuota;
}

- (DBTEAMLOGMemberSpaceLimitsChangeStatusType *)memberSpaceLimitsChangeStatus {
  if (![self isMemberSpaceLimitsChangeStatus]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus, but was %@.", [self tagName]];
  }
  return _memberSpaceLimitsChangeStatus;
}

- (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType *)memberSpaceLimitsRemoveCustomQuota {
  if (![self isMemberSpaceLimitsRemoveCustomQuota]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberSpaceLimitsRemoveCustomQuota, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsRemoveCustomQuota;
}

- (DBTEAMLOGMemberSuggestType *)memberSuggest {
  if (![self isMemberSuggest]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberSuggest, but was %@.", [self tagName]];
  }
  return _memberSuggest;
}

- (DBTEAMLOGMemberTransferAccountContentsType *)memberTransferAccountContents {
  if (![self isMemberTransferAccountContents]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeMemberTransferAccountContents, but was %@.", [self tagName]];
  }
  return _memberTransferAccountContents;
}

- (DBTEAMLOGSecondaryMailsPolicyChangedType *)secondaryMailsPolicyChanged {
  if (![self isSecondaryMailsPolicyChanged]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSecondaryMailsPolicyChanged, but was %@.", [self tagName]];
  }
  return _secondaryMailsPolicyChanged;
}

- (DBTEAMLOGPaperContentAddMemberType *)paperContentAddMember {
  if (![self isPaperContentAddMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperContentAddMember, but was %@.", [self tagName]];
  }
  return _paperContentAddMember;
}

- (DBTEAMLOGPaperContentAddToFolderType *)paperContentAddToFolder {
  if (![self isPaperContentAddToFolder]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperContentAddToFolder, but was %@.", [self tagName]];
  }
  return _paperContentAddToFolder;
}

- (DBTEAMLOGPaperContentArchiveType *)paperContentArchive {
  if (![self isPaperContentArchive]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperContentArchive, but was %@.", [self tagName]];
  }
  return _paperContentArchive;
}

- (DBTEAMLOGPaperContentCreateType *)paperContentCreate {
  if (![self isPaperContentCreate]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperContentCreate, but was %@.", [self tagName]];
  }
  return _paperContentCreate;
}

- (DBTEAMLOGPaperContentPermanentlyDeleteType *)paperContentPermanentlyDelete {
  if (![self isPaperContentPermanentlyDelete]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperContentPermanentlyDelete, but was %@.", [self tagName]];
  }
  return _paperContentPermanentlyDelete;
}

- (DBTEAMLOGPaperContentRemoveFromFolderType *)paperContentRemoveFromFolder {
  if (![self isPaperContentRemoveFromFolder]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperContentRemoveFromFolder, but was %@.", [self tagName]];
  }
  return _paperContentRemoveFromFolder;
}

- (DBTEAMLOGPaperContentRemoveMemberType *)paperContentRemoveMember {
  if (![self isPaperContentRemoveMember]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperContentRemoveMember, but was %@.", [self tagName]];
  }
  return _paperContentRemoveMember;
}

- (DBTEAMLOGPaperContentRenameType *)paperContentRename {
  if (![self isPaperContentRename]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperContentRename, but was %@.", [self tagName]];
  }
  return _paperContentRename;
}

- (DBTEAMLOGPaperContentRestoreType *)paperContentRestore {
  if (![self isPaperContentRestore]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperContentRestore, but was %@.", [self tagName]];
  }
  return _paperContentRestore;
}

- (DBTEAMLOGPaperDocAddCommentType *)paperDocAddComment {
  if (![self isPaperDocAddComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocAddComment, but was %@.", [self tagName]];
  }
  return _paperDocAddComment;
}

- (DBTEAMLOGPaperDocChangeMemberRoleType *)paperDocChangeMemberRole {
  if (![self isPaperDocChangeMemberRole]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocChangeMemberRole, but was %@.", [self tagName]];
  }
  return _paperDocChangeMemberRole;
}

- (DBTEAMLOGPaperDocChangeSharingPolicyType *)paperDocChangeSharingPolicy {
  if (![self isPaperDocChangeSharingPolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocChangeSharingPolicy, but was %@.", [self tagName]];
  }
  return _paperDocChangeSharingPolicy;
}

- (DBTEAMLOGPaperDocChangeSubscriptionType *)paperDocChangeSubscription {
  if (![self isPaperDocChangeSubscription]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocChangeSubscription, but was %@.", [self tagName]];
  }
  return _paperDocChangeSubscription;
}

- (DBTEAMLOGPaperDocDeletedType *)paperDocDeleted {
  if (![self isPaperDocDeleted]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocDeleted, but was %@.", [self tagName]];
  }
  return _paperDocDeleted;
}

- (DBTEAMLOGPaperDocDeleteCommentType *)paperDocDeleteComment {
  if (![self isPaperDocDeleteComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocDeleteComment, but was %@.", [self tagName]];
  }
  return _paperDocDeleteComment;
}

- (DBTEAMLOGPaperDocDownloadType *)paperDocDownload {
  if (![self isPaperDocDownload]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocDownload, but was %@.", [self tagName]];
  }
  return _paperDocDownload;
}

- (DBTEAMLOGPaperDocEditType *)paperDocEdit {
  if (![self isPaperDocEdit]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocEdit, but was %@.", [self tagName]];
  }
  return _paperDocEdit;
}

- (DBTEAMLOGPaperDocEditCommentType *)paperDocEditComment {
  if (![self isPaperDocEditComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocEditComment, but was %@.", [self tagName]];
  }
  return _paperDocEditComment;
}

- (DBTEAMLOGPaperDocFollowedType *)paperDocFollowed {
  if (![self isPaperDocFollowed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocFollowed, but was %@.", [self tagName]];
  }
  return _paperDocFollowed;
}

- (DBTEAMLOGPaperDocMentionType *)paperDocMention {
  if (![self isPaperDocMention]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocMention, but was %@.", [self tagName]];
  }
  return _paperDocMention;
}

- (DBTEAMLOGPaperDocRequestAccessType *)paperDocRequestAccess {
  if (![self isPaperDocRequestAccess]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocRequestAccess, but was %@.", [self tagName]];
  }
  return _paperDocRequestAccess;
}

- (DBTEAMLOGPaperDocResolveCommentType *)paperDocResolveComment {
  if (![self isPaperDocResolveComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocResolveComment, but was %@.", [self tagName]];
  }
  return _paperDocResolveComment;
}

- (DBTEAMLOGPaperDocRevertType *)paperDocRevert {
  if (![self isPaperDocRevert]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocRevert, but was %@.", [self tagName]];
  }
  return _paperDocRevert;
}

- (DBTEAMLOGPaperDocSlackShareType *)paperDocSlackShare {
  if (![self isPaperDocSlackShare]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocSlackShare, but was %@.", [self tagName]];
  }
  return _paperDocSlackShare;
}

- (DBTEAMLOGPaperDocTeamInviteType *)paperDocTeamInvite {
  if (![self isPaperDocTeamInvite]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocTeamInvite, but was %@.", [self tagName]];
  }
  return _paperDocTeamInvite;
}

- (DBTEAMLOGPaperDocTrashedType *)paperDocTrashed {
  if (![self isPaperDocTrashed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocTrashed, but was %@.", [self tagName]];
  }
  return _paperDocTrashed;
}

- (DBTEAMLOGPaperDocUnresolveCommentType *)paperDocUnresolveComment {
  if (![self isPaperDocUnresolveComment]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocUnresolveComment, but was %@.", [self tagName]];
  }
  return _paperDocUnresolveComment;
}

- (DBTEAMLOGPaperDocUntrashedType *)paperDocUntrashed {
  if (![self isPaperDocUntrashed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocUntrashed, but was %@.", [self tagName]];
  }
  return _paperDocUntrashed;
}

- (DBTEAMLOGPaperDocViewType *)paperDocView {
  if (![self isPaperDocView]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperDocView, but was %@.", [self tagName]];
  }
  return _paperDocView;
}

- (DBTEAMLOGPaperExternalViewAllowType *)paperExternalViewAllow {
  if (![self isPaperExternalViewAllow]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperExternalViewAllow, but was %@.", [self tagName]];
  }
  return _paperExternalViewAllow;
}

- (DBTEAMLOGPaperExternalViewDefaultTeamType *)paperExternalViewDefaultTeam {
  if (![self isPaperExternalViewDefaultTeam]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperExternalViewDefaultTeam, but was %@.", [self tagName]];
  }
  return _paperExternalViewDefaultTeam;
}

- (DBTEAMLOGPaperExternalViewForbidType *)paperExternalViewForbid {
  if (![self isPaperExternalViewForbid]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperExternalViewForbid, but was %@.", [self tagName]];
  }
  return _paperExternalViewForbid;
}

- (DBTEAMLOGPaperFolderChangeSubscriptionType *)paperFolderChangeSubscription {
  if (![self isPaperFolderChangeSubscription]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperFolderChangeSubscription, but was %@.", [self tagName]];
  }
  return _paperFolderChangeSubscription;
}

- (DBTEAMLOGPaperFolderDeletedType *)paperFolderDeleted {
  if (![self isPaperFolderDeleted]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperFolderDeleted, but was %@.", [self tagName]];
  }
  return _paperFolderDeleted;
}

- (DBTEAMLOGPaperFolderFollowedType *)paperFolderFollowed {
  if (![self isPaperFolderFollowed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperFolderFollowed, but was %@.", [self tagName]];
  }
  return _paperFolderFollowed;
}

- (DBTEAMLOGPaperFolderTeamInviteType *)paperFolderTeamInvite {
  if (![self isPaperFolderTeamInvite]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperFolderTeamInvite, but was %@.", [self tagName]];
  }
  return _paperFolderTeamInvite;
}

- (DBTEAMLOGPasswordChangeType *)passwordChange {
  if (![self isPasswordChange]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePasswordChange, but was %@.", [self tagName]];
  }
  return _passwordChange;
}

- (DBTEAMLOGPasswordResetType *)passwordReset {
  if (![self isPasswordReset]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePasswordReset, but was %@.", [self tagName]];
  }
  return _passwordReset;
}

- (DBTEAMLOGPasswordResetAllType *)passwordResetAll {
  if (![self isPasswordResetAll]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePasswordResetAll, but was %@.", [self tagName]];
  }
  return _passwordResetAll;
}

- (DBTEAMLOGEmmCreateExceptionsReportType *)emmCreateExceptionsReport {
  if (![self isEmmCreateExceptionsReport]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeEmmCreateExceptionsReport, but was %@.", [self tagName]];
  }
  return _emmCreateExceptionsReport;
}

- (DBTEAMLOGEmmCreateUsageReportType *)emmCreateUsageReport {
  if (![self isEmmCreateUsageReport]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeEmmCreateUsageReport, but was %@.", [self tagName]];
  }
  return _emmCreateUsageReport;
}

- (DBTEAMLOGExportMembersReportType *)exportMembersReport {
  if (![self isExportMembersReport]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeExportMembersReport, but was %@.", [self tagName]];
  }
  return _exportMembersReport;
}

- (DBTEAMLOGPaperAdminExportStartType *)paperAdminExportStart {
  if (![self isPaperAdminExportStart]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperAdminExportStart, but was %@.", [self tagName]];
  }
  return _paperAdminExportStart;
}

- (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType *)smartSyncCreateAdminPrivilegeReport {
  if (![self isSmartSyncCreateAdminPrivilegeReport]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport, but was %@.",
                       [self tagName]];
  }
  return _smartSyncCreateAdminPrivilegeReport;
}

- (DBTEAMLOGTeamActivityCreateReportType *)teamActivityCreateReport {
  if (![self isTeamActivityCreateReport]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeTeamActivityCreateReport, but was %@.", [self tagName]];
  }
  return _teamActivityCreateReport;
}

- (DBTEAMLOGCollectionShareType *)collectionShare {
  if (![self isCollectionShare]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeCollectionShare, but was %@.", [self tagName]];
  }
  return _collectionShare;
}

- (DBTEAMLOGNoteAclInviteOnlyType *)noteAclInviteOnly {
  if (![self isNoteAclInviteOnly]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeNoteAclInviteOnly, but was %@.", [self tagName]];
  }
  return _noteAclInviteOnly;
}

- (DBTEAMLOGNoteAclLinkType *)noteAclLink {
  if (![self isNoteAclLink]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeNoteAclLink, but was %@.", [self tagName]];
  }
  return _noteAclLink;
}

- (DBTEAMLOGNoteAclTeamLinkType *)noteAclTeamLink {
  if (![self isNoteAclTeamLink]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeNoteAclTeamLink, but was %@.", [self tagName]];
  }
  return _noteAclTeamLink;
}

- (DBTEAMLOGNoteSharedType *)noteShared {
  if (![self isNoteShared]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeNoteShared, but was %@.", [self tagName]];
  }
  return _noteShared;
}

- (DBTEAMLOGNoteShareReceiveType *)noteShareReceive {
  if (![self isNoteShareReceive]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeNoteShareReceive, but was %@.", [self tagName]];
  }
  return _noteShareReceive;
}

- (DBTEAMLOGOpenNoteSharedType *)openNoteShared {
  if (![self isOpenNoteShared]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeOpenNoteShared, but was %@.", [self tagName]];
  }
  return _openNoteShared;
}

- (DBTEAMLOGSfAddGroupType *)sfAddGroup {
  if (![self isSfAddGroup]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfAddGroup, but was %@.", [self tagName]];
  }
  return _sfAddGroup;
}

- (DBTEAMLOGSfAllowNonMembersToViewSharedLinksType *)sfAllowNonMembersToViewSharedLinks {
  if (![self isSfAllowNonMembersToViewSharedLinks]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks, but was %@.",
                       [self tagName]];
  }
  return _sfAllowNonMembersToViewSharedLinks;
}

- (DBTEAMLOGSfExternalInviteWarnType *)sfExternalInviteWarn {
  if (![self isSfExternalInviteWarn]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfExternalInviteWarn, but was %@.", [self tagName]];
  }
  return _sfExternalInviteWarn;
}

- (DBTEAMLOGSfFbInviteType *)sfFbInvite {
  if (![self isSfFbInvite]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfFbInvite, but was %@.", [self tagName]];
  }
  return _sfFbInvite;
}

- (DBTEAMLOGSfFbInviteChangeRoleType *)sfFbInviteChangeRole {
  if (![self isSfFbInviteChangeRole]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfFbInviteChangeRole, but was %@.", [self tagName]];
  }
  return _sfFbInviteChangeRole;
}

- (DBTEAMLOGSfFbUninviteType *)sfFbUninvite {
  if (![self isSfFbUninvite]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfFbUninvite, but was %@.", [self tagName]];
  }
  return _sfFbUninvite;
}

- (DBTEAMLOGSfInviteGroupType *)sfInviteGroup {
  if (![self isSfInviteGroup]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfInviteGroup, but was %@.", [self tagName]];
  }
  return _sfInviteGroup;
}

- (DBTEAMLOGSfTeamGrantAccessType *)sfTeamGrantAccess {
  if (![self isSfTeamGrantAccess]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfTeamGrantAccess, but was %@.", [self tagName]];
  }
  return _sfTeamGrantAccess;
}

- (DBTEAMLOGSfTeamInviteType *)sfTeamInvite {
  if (![self isSfTeamInvite]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfTeamInvite, but was %@.", [self tagName]];
  }
  return _sfTeamInvite;
}

- (DBTEAMLOGSfTeamInviteChangeRoleType *)sfTeamInviteChangeRole {
  if (![self isSfTeamInviteChangeRole]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfTeamInviteChangeRole, but was %@.", [self tagName]];
  }
  return _sfTeamInviteChangeRole;
}

- (DBTEAMLOGSfTeamJoinType *)sfTeamJoin {
  if (![self isSfTeamJoin]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfTeamJoin, but was %@.", [self tagName]];
  }
  return _sfTeamJoin;
}

- (DBTEAMLOGSfTeamJoinFromOobLinkType *)sfTeamJoinFromOobLink {
  if (![self isSfTeamJoinFromOobLink]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfTeamJoinFromOobLink, but was %@.", [self tagName]];
  }
  return _sfTeamJoinFromOobLink;
}

- (DBTEAMLOGSfTeamUninviteType *)sfTeamUninvite {
  if (![self isSfTeamUninvite]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSfTeamUninvite, but was %@.", [self tagName]];
  }
  return _sfTeamUninvite;
}

- (DBTEAMLOGSharedContentAddInviteesType *)sharedContentAddInvitees {
  if (![self isSharedContentAddInvitees]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentAddInvitees, but was %@.", [self tagName]];
  }
  return _sharedContentAddInvitees;
}

- (DBTEAMLOGSharedContentAddLinkExpiryType *)sharedContentAddLinkExpiry {
  if (![self isSharedContentAddLinkExpiry]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentAddLinkExpiry, but was %@.", [self tagName]];
  }
  return _sharedContentAddLinkExpiry;
}

- (DBTEAMLOGSharedContentAddLinkPasswordType *)sharedContentAddLinkPassword {
  if (![self isSharedContentAddLinkPassword]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentAddLinkPassword, but was %@.", [self tagName]];
  }
  return _sharedContentAddLinkPassword;
}

- (DBTEAMLOGSharedContentAddMemberType *)sharedContentAddMember {
  if (![self isSharedContentAddMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentAddMember, but was %@.", [self tagName]];
  }
  return _sharedContentAddMember;
}

- (DBTEAMLOGSharedContentChangeDownloadsPolicyType *)sharedContentChangeDownloadsPolicy {
  if (![self isSharedContentChangeDownloadsPolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeDownloadsPolicy;
}

- (DBTEAMLOGSharedContentChangeInviteeRoleType *)sharedContentChangeInviteeRole {
  if (![self isSharedContentChangeInviteeRole]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentChangeInviteeRole, but was %@.", [self tagName]];
  }
  return _sharedContentChangeInviteeRole;
}

- (DBTEAMLOGSharedContentChangeLinkAudienceType *)sharedContentChangeLinkAudience {
  if (![self isSharedContentChangeLinkAudience]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentChangeLinkAudience, but was %@.", [self tagName]];
  }
  return _sharedContentChangeLinkAudience;
}

- (DBTEAMLOGSharedContentChangeLinkExpiryType *)sharedContentChangeLinkExpiry {
  if (![self isSharedContentChangeLinkExpiry]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentChangeLinkExpiry, but was %@.", [self tagName]];
  }
  return _sharedContentChangeLinkExpiry;
}

- (DBTEAMLOGSharedContentChangeLinkPasswordType *)sharedContentChangeLinkPassword {
  if (![self isSharedContentChangeLinkPassword]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentChangeLinkPassword, but was %@.", [self tagName]];
  }
  return _sharedContentChangeLinkPassword;
}

- (DBTEAMLOGSharedContentChangeMemberRoleType *)sharedContentChangeMemberRole {
  if (![self isSharedContentChangeMemberRole]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentChangeMemberRole, but was %@.", [self tagName]];
  }
  return _sharedContentChangeMemberRole;
}

- (DBTEAMLOGSharedContentChangeViewerInfoPolicyType *)sharedContentChangeViewerInfoPolicy {
  if (![self isSharedContentChangeViewerInfoPolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeViewerInfoPolicy;
}

- (DBTEAMLOGSharedContentClaimInvitationType *)sharedContentClaimInvitation {
  if (![self isSharedContentClaimInvitation]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentClaimInvitation, but was %@.", [self tagName]];
  }
  return _sharedContentClaimInvitation;
}

- (DBTEAMLOGSharedContentCopyType *)sharedContentCopy {
  if (![self isSharedContentCopy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentCopy, but was %@.", [self tagName]];
  }
  return _sharedContentCopy;
}

- (DBTEAMLOGSharedContentDownloadType *)sharedContentDownload {
  if (![self isSharedContentDownload]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentDownload, but was %@.", [self tagName]];
  }
  return _sharedContentDownload;
}

- (DBTEAMLOGSharedContentRelinquishMembershipType *)sharedContentRelinquishMembership {
  if (![self isSharedContentRelinquishMembership]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentRelinquishMembership, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRelinquishMembership;
}

- (DBTEAMLOGSharedContentRemoveInviteesType *)sharedContentRemoveInvitees {
  if (![self isSharedContentRemoveInvitees]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentRemoveInvitees, but was %@.", [self tagName]];
  }
  return _sharedContentRemoveInvitees;
}

- (DBTEAMLOGSharedContentRemoveLinkExpiryType *)sharedContentRemoveLinkExpiry {
  if (![self isSharedContentRemoveLinkExpiry]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry, but was %@.", [self tagName]];
  }
  return _sharedContentRemoveLinkExpiry;
}

- (DBTEAMLOGSharedContentRemoveLinkPasswordType *)sharedContentRemoveLinkPassword {
  if (![self isSharedContentRemoveLinkPassword]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentRemoveLinkPassword, but was %@.", [self tagName]];
  }
  return _sharedContentRemoveLinkPassword;
}

- (DBTEAMLOGSharedContentRemoveMemberType *)sharedContentRemoveMember {
  if (![self isSharedContentRemoveMember]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentRemoveMember, but was %@.", [self tagName]];
  }
  return _sharedContentRemoveMember;
}

- (DBTEAMLOGSharedContentRequestAccessType *)sharedContentRequestAccess {
  if (![self isSharedContentRequestAccess]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentRequestAccess, but was %@.", [self tagName]];
  }
  return _sharedContentRequestAccess;
}

- (DBTEAMLOGSharedContentUnshareType *)sharedContentUnshare {
  if (![self isSharedContentUnshare]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentUnshare, but was %@.", [self tagName]];
  }
  return _sharedContentUnshare;
}

- (DBTEAMLOGSharedContentViewType *)sharedContentView {
  if (![self isSharedContentView]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedContentView, but was %@.", [self tagName]];
  }
  return _sharedContentView;
}

- (DBTEAMLOGSharedFolderChangeLinkPolicyType *)sharedFolderChangeLinkPolicy {
  if (![self isSharedFolderChangeLinkPolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy, but was %@.", [self tagName]];
  }
  return _sharedFolderChangeLinkPolicy;
}

- (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType *)sharedFolderChangeMembersInheritancePolicy {
  if (![self isSharedFolderChangeMembersInheritancePolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedFolderChangeMembersInheritancePolicy, but was %@.",
               [self tagName]];
  }
  return _sharedFolderChangeMembersInheritancePolicy;
}

- (DBTEAMLOGSharedFolderChangeMembersManagementPolicyType *)sharedFolderChangeMembersManagementPolicy {
  if (![self isSharedFolderChangeMembersManagementPolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedFolderChangeMembersManagementPolicy, but was %@.",
               [self tagName]];
  }
  return _sharedFolderChangeMembersManagementPolicy;
}

- (DBTEAMLOGSharedFolderChangeMembersPolicyType *)sharedFolderChangeMembersPolicy {
  if (![self isSharedFolderChangeMembersPolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedFolderChangeMembersPolicy, but was %@.", [self tagName]];
  }
  return _sharedFolderChangeMembersPolicy;
}

- (DBTEAMLOGSharedFolderCreateType *)sharedFolderCreate {
  if (![self isSharedFolderCreate]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedFolderCreate, but was %@.", [self tagName]];
  }
  return _sharedFolderCreate;
}

- (DBTEAMLOGSharedFolderDeclineInvitationType *)sharedFolderDeclineInvitation {
  if (![self isSharedFolderDeclineInvitation]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedFolderDeclineInvitation, but was %@.", [self tagName]];
  }
  return _sharedFolderDeclineInvitation;
}

- (DBTEAMLOGSharedFolderMountType *)sharedFolderMount {
  if (![self isSharedFolderMount]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedFolderMount, but was %@.", [self tagName]];
  }
  return _sharedFolderMount;
}

- (DBTEAMLOGSharedFolderNestType *)sharedFolderNest {
  if (![self isSharedFolderNest]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedFolderNest, but was %@.", [self tagName]];
  }
  return _sharedFolderNest;
}

- (DBTEAMLOGSharedFolderTransferOwnershipType *)sharedFolderTransferOwnership {
  if (![self isSharedFolderTransferOwnership]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedFolderTransferOwnership, but was %@.", [self tagName]];
  }
  return _sharedFolderTransferOwnership;
}

- (DBTEAMLOGSharedFolderUnmountType *)sharedFolderUnmount {
  if (![self isSharedFolderUnmount]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedFolderUnmount, but was %@.", [self tagName]];
  }
  return _sharedFolderUnmount;
}

- (DBTEAMLOGSharedLinkAddExpiryType *)sharedLinkAddExpiry {
  if (![self isSharedLinkAddExpiry]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedLinkAddExpiry, but was %@.", [self tagName]];
  }
  return _sharedLinkAddExpiry;
}

- (DBTEAMLOGSharedLinkChangeExpiryType *)sharedLinkChangeExpiry {
  if (![self isSharedLinkChangeExpiry]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedLinkChangeExpiry, but was %@.", [self tagName]];
  }
  return _sharedLinkChangeExpiry;
}

- (DBTEAMLOGSharedLinkChangeVisibilityType *)sharedLinkChangeVisibility {
  if (![self isSharedLinkChangeVisibility]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharedLinkChangeVisibility, but was %@.", [self tagName]];
  }
  return _sharedLinkChangeVisibility;
}

- (DBTEAMLOGSharedLinkCopyType *)sharedLinkCopy {
  if (![self isSharedLinkCopy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedLinkCopy, but was %@.", [self tagName]];
  }
  return _sharedLinkCopy;
}

- (DBTEAMLOGSharedLinkCreateType *)sharedLinkCreate {
  if (![self isSharedLinkCreate]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedLinkCreate, but was %@.", [self tagName]];
  }
  return _sharedLinkCreate;
}

- (DBTEAMLOGSharedLinkDisableType *)sharedLinkDisable {
  if (![self isSharedLinkDisable]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedLinkDisable, but was %@.", [self tagName]];
  }
  return _sharedLinkDisable;
}

- (DBTEAMLOGSharedLinkDownloadType *)sharedLinkDownload {
  if (![self isSharedLinkDownload]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedLinkDownload, but was %@.", [self tagName]];
  }
  return _sharedLinkDownload;
}

- (DBTEAMLOGSharedLinkRemoveExpiryType *)sharedLinkRemoveExpiry {
  if (![self isSharedLinkRemoveExpiry]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedLinkRemoveExpiry, but was %@.", [self tagName]];
  }
  return _sharedLinkRemoveExpiry;
}

- (DBTEAMLOGSharedLinkShareType *)sharedLinkShare {
  if (![self isSharedLinkShare]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedLinkShare, but was %@.", [self tagName]];
  }
  return _sharedLinkShare;
}

- (DBTEAMLOGSharedLinkViewType *)sharedLinkView {
  if (![self isSharedLinkView]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedLinkView, but was %@.", [self tagName]];
  }
  return _sharedLinkView;
}

- (DBTEAMLOGSharedNoteOpenedType *)sharedNoteOpened {
  if (![self isSharedNoteOpened]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharedNoteOpened, but was %@.", [self tagName]];
  }
  return _sharedNoteOpened;
}

- (DBTEAMLOGShmodelGroupShareType *)shmodelGroupShare {
  if (![self isShmodelGroupShare]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShmodelGroupShare, but was %@.", [self tagName]];
  }
  return _shmodelGroupShare;
}

- (DBTEAMLOGShowcaseAccessGrantedType *)showcaseAccessGranted {
  if (![self isShowcaseAccessGranted]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseAccessGranted, but was %@.", [self tagName]];
  }
  return _showcaseAccessGranted;
}

- (DBTEAMLOGShowcaseAddMemberType *)showcaseAddMember {
  if (![self isShowcaseAddMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseAddMember, but was %@.", [self tagName]];
  }
  return _showcaseAddMember;
}

- (DBTEAMLOGShowcaseArchivedType *)showcaseArchived {
  if (![self isShowcaseArchived]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseArchived, but was %@.", [self tagName]];
  }
  return _showcaseArchived;
}

- (DBTEAMLOGShowcaseCreatedType *)showcaseCreated {
  if (![self isShowcaseCreated]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseCreated, but was %@.", [self tagName]];
  }
  return _showcaseCreated;
}

- (DBTEAMLOGShowcaseDeleteCommentType *)showcaseDeleteComment {
  if (![self isShowcaseDeleteComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseDeleteComment, but was %@.", [self tagName]];
  }
  return _showcaseDeleteComment;
}

- (DBTEAMLOGShowcaseEditedType *)showcaseEdited {
  if (![self isShowcaseEdited]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseEdited, but was %@.", [self tagName]];
  }
  return _showcaseEdited;
}

- (DBTEAMLOGShowcaseEditCommentType *)showcaseEditComment {
  if (![self isShowcaseEditComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseEditComment, but was %@.", [self tagName]];
  }
  return _showcaseEditComment;
}

- (DBTEAMLOGShowcaseFileAddedType *)showcaseFileAdded {
  if (![self isShowcaseFileAdded]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseFileAdded, but was %@.", [self tagName]];
  }
  return _showcaseFileAdded;
}

- (DBTEAMLOGShowcaseFileDownloadType *)showcaseFileDownload {
  if (![self isShowcaseFileDownload]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseFileDownload, but was %@.", [self tagName]];
  }
  return _showcaseFileDownload;
}

- (DBTEAMLOGShowcaseFileRemovedType *)showcaseFileRemoved {
  if (![self isShowcaseFileRemoved]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseFileRemoved, but was %@.", [self tagName]];
  }
  return _showcaseFileRemoved;
}

- (DBTEAMLOGShowcaseFileViewType *)showcaseFileView {
  if (![self isShowcaseFileView]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseFileView, but was %@.", [self tagName]];
  }
  return _showcaseFileView;
}

- (DBTEAMLOGShowcasePermanentlyDeletedType *)showcasePermanentlyDeleted {
  if (![self isShowcasePermanentlyDeleted]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeShowcasePermanentlyDeleted, but was %@.", [self tagName]];
  }
  return _showcasePermanentlyDeleted;
}

- (DBTEAMLOGShowcasePostCommentType *)showcasePostComment {
  if (![self isShowcasePostComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcasePostComment, but was %@.", [self tagName]];
  }
  return _showcasePostComment;
}

- (DBTEAMLOGShowcaseRemoveMemberType *)showcaseRemoveMember {
  if (![self isShowcaseRemoveMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseRemoveMember, but was %@.", [self tagName]];
  }
  return _showcaseRemoveMember;
}

- (DBTEAMLOGShowcaseRenamedType *)showcaseRenamed {
  if (![self isShowcaseRenamed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseRenamed, but was %@.", [self tagName]];
  }
  return _showcaseRenamed;
}

- (DBTEAMLOGShowcaseRequestAccessType *)showcaseRequestAccess {
  if (![self isShowcaseRequestAccess]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseRequestAccess, but was %@.", [self tagName]];
  }
  return _showcaseRequestAccess;
}

- (DBTEAMLOGShowcaseResolveCommentType *)showcaseResolveComment {
  if (![self isShowcaseResolveComment]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseResolveComment, but was %@.", [self tagName]];
  }
  return _showcaseResolveComment;
}

- (DBTEAMLOGShowcaseRestoredType *)showcaseRestored {
  if (![self isShowcaseRestored]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseRestored, but was %@.", [self tagName]];
  }
  return _showcaseRestored;
}

- (DBTEAMLOGShowcaseTrashedType *)showcaseTrashed {
  if (![self isShowcaseTrashed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseTrashed, but was %@.", [self tagName]];
  }
  return _showcaseTrashed;
}

- (DBTEAMLOGShowcaseTrashedDeprecatedType *)showcaseTrashedDeprecated {
  if (![self isShowcaseTrashedDeprecated]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseTrashedDeprecated, but was %@.", [self tagName]];
  }
  return _showcaseTrashedDeprecated;
}

- (DBTEAMLOGShowcaseUnresolveCommentType *)showcaseUnresolveComment {
  if (![self isShowcaseUnresolveComment]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseUnresolveComment, but was %@.", [self tagName]];
  }
  return _showcaseUnresolveComment;
}

- (DBTEAMLOGShowcaseUntrashedType *)showcaseUntrashed {
  if (![self isShowcaseUntrashed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseUntrashed, but was %@.", [self tagName]];
  }
  return _showcaseUntrashed;
}

- (DBTEAMLOGShowcaseUntrashedDeprecatedType *)showcaseUntrashedDeprecated {
  if (![self isShowcaseUntrashedDeprecated]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseUntrashedDeprecated, but was %@.", [self tagName]];
  }
  return _showcaseUntrashedDeprecated;
}

- (DBTEAMLOGShowcaseViewType *)showcaseView {
  if (![self isShowcaseView]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseView, but was %@.", [self tagName]];
  }
  return _showcaseView;
}

- (DBTEAMLOGSsoAddCertType *)ssoAddCert {
  if (![self isSsoAddCert]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoAddCert, but was %@.", [self tagName]];
  }
  return _ssoAddCert;
}

- (DBTEAMLOGSsoAddLoginUrlType *)ssoAddLoginUrl {
  if (![self isSsoAddLoginUrl]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoAddLoginUrl, but was %@.", [self tagName]];
  }
  return _ssoAddLoginUrl;
}

- (DBTEAMLOGSsoAddLogoutUrlType *)ssoAddLogoutUrl {
  if (![self isSsoAddLogoutUrl]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoAddLogoutUrl, but was %@.", [self tagName]];
  }
  return _ssoAddLogoutUrl;
}

- (DBTEAMLOGSsoChangeCertType *)ssoChangeCert {
  if (![self isSsoChangeCert]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoChangeCert, but was %@.", [self tagName]];
  }
  return _ssoChangeCert;
}

- (DBTEAMLOGSsoChangeLoginUrlType *)ssoChangeLoginUrl {
  if (![self isSsoChangeLoginUrl]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoChangeLoginUrl, but was %@.", [self tagName]];
  }
  return _ssoChangeLoginUrl;
}

- (DBTEAMLOGSsoChangeLogoutUrlType *)ssoChangeLogoutUrl {
  if (![self isSsoChangeLogoutUrl]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoChangeLogoutUrl, but was %@.", [self tagName]];
  }
  return _ssoChangeLogoutUrl;
}

- (DBTEAMLOGSsoChangeSamlIdentityModeType *)ssoChangeSamlIdentityMode {
  if (![self isSsoChangeSamlIdentityMode]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSsoChangeSamlIdentityMode, but was %@.", [self tagName]];
  }
  return _ssoChangeSamlIdentityMode;
}

- (DBTEAMLOGSsoRemoveCertType *)ssoRemoveCert {
  if (![self isSsoRemoveCert]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoRemoveCert, but was %@.", [self tagName]];
  }
  return _ssoRemoveCert;
}

- (DBTEAMLOGSsoRemoveLoginUrlType *)ssoRemoveLoginUrl {
  if (![self isSsoRemoveLoginUrl]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoRemoveLoginUrl, but was %@.", [self tagName]];
  }
  return _ssoRemoveLoginUrl;
}

- (DBTEAMLOGSsoRemoveLogoutUrlType *)ssoRemoveLogoutUrl {
  if (![self isSsoRemoveLogoutUrl]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoRemoveLogoutUrl, but was %@.", [self tagName]];
  }
  return _ssoRemoveLogoutUrl;
}

- (DBTEAMLOGTeamFolderChangeStatusType *)teamFolderChangeStatus {
  if (![self isTeamFolderChangeStatus]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamFolderChangeStatus, but was %@.", [self tagName]];
  }
  return _teamFolderChangeStatus;
}

- (DBTEAMLOGTeamFolderCreateType *)teamFolderCreate {
  if (![self isTeamFolderCreate]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamFolderCreate, but was %@.", [self tagName]];
  }
  return _teamFolderCreate;
}

- (DBTEAMLOGTeamFolderDowngradeType *)teamFolderDowngrade {
  if (![self isTeamFolderDowngrade]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamFolderDowngrade, but was %@.", [self tagName]];
  }
  return _teamFolderDowngrade;
}

- (DBTEAMLOGTeamFolderPermanentlyDeleteType *)teamFolderPermanentlyDelete {
  if (![self isTeamFolderPermanentlyDelete]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeTeamFolderPermanentlyDelete, but was %@.", [self tagName]];
  }
  return _teamFolderPermanentlyDelete;
}

- (DBTEAMLOGTeamFolderRenameType *)teamFolderRename {
  if (![self isTeamFolderRename]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamFolderRename, but was %@.", [self tagName]];
  }
  return _teamFolderRename;
}

- (DBTEAMLOGTeamSelectiveSyncSettingsChangedType *)teamSelectiveSyncSettingsChanged {
  if (![self isTeamSelectiveSyncSettingsChanged]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamSelectiveSyncSettingsChanged, but was %@.",
                       [self tagName]];
  }
  return _teamSelectiveSyncSettingsChanged;
}

- (DBTEAMLOGAccountCaptureChangePolicyType *)accountCaptureChangePolicy {
  if (![self isAccountCaptureChangePolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeAccountCaptureChangePolicy, but was %@.", [self tagName]];
  }
  return _accountCaptureChangePolicy;
}

- (DBTEAMLOGAllowDownloadDisabledType *)allowDownloadDisabled {
  if (![self isAllowDownloadDisabled]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeAllowDownloadDisabled, but was %@.", [self tagName]];
  }
  return _allowDownloadDisabled;
}

- (DBTEAMLOGAllowDownloadEnabledType *)allowDownloadEnabled {
  if (![self isAllowDownloadEnabled]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeAllowDownloadEnabled, but was %@.", [self tagName]];
  }
  return _allowDownloadEnabled;
}

- (DBTEAMLOGDataPlacementRestrictionChangePolicyType *)dataPlacementRestrictionChangePolicy {
  if (![self isDataPlacementRestrictionChangePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy, but was %@.",
                       [self tagName]];
  }
  return _dataPlacementRestrictionChangePolicy;
}

- (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *)dataPlacementRestrictionSatisfyPolicy {
  if (![self isDataPlacementRestrictionSatisfyPolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy, but was %@.",
                       [self tagName]];
  }
  return _dataPlacementRestrictionSatisfyPolicy;
}

- (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *)deviceApprovalsChangeDesktopPolicy {
  if (![self isDeviceApprovalsChangeDesktopPolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy, but was %@.",
                       [self tagName]];
  }
  return _deviceApprovalsChangeDesktopPolicy;
}

- (DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *)deviceApprovalsChangeMobilePolicy {
  if (![self isDeviceApprovalsChangeMobilePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy, but was %@.",
                       [self tagName]];
  }
  return _deviceApprovalsChangeMobilePolicy;
}

- (DBTEAMLOGDeviceApprovalsChangeOverageActionType *)deviceApprovalsChangeOverageAction {
  if (![self isDeviceApprovalsChangeOverageAction]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction, but was %@.",
                       [self tagName]];
  }
  return _deviceApprovalsChangeOverageAction;
}

- (DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *)deviceApprovalsChangeUnlinkAction {
  if (![self isDeviceApprovalsChangeUnlinkAction]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction, but was %@.",
                       [self tagName]];
  }
  return _deviceApprovalsChangeUnlinkAction;
}

- (DBTEAMLOGDirectoryRestrictionsAddMembersType *)directoryRestrictionsAddMembers {
  if (![self isDirectoryRestrictionsAddMembers]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeDirectoryRestrictionsAddMembers, but was %@.", [self tagName]];
  }
  return _directoryRestrictionsAddMembers;
}

- (DBTEAMLOGDirectoryRestrictionsRemoveMembersType *)directoryRestrictionsRemoveMembers {
  if (![self isDirectoryRestrictionsRemoveMembers]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeDirectoryRestrictionsRemoveMembers, but was %@.",
                       [self tagName]];
  }
  return _directoryRestrictionsRemoveMembers;
}

- (DBTEAMLOGEmmAddExceptionType *)emmAddException {
  if (![self isEmmAddException]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeEmmAddException, but was %@.", [self tagName]];
  }
  return _emmAddException;
}

- (DBTEAMLOGEmmChangePolicyType *)emmChangePolicy {
  if (![self isEmmChangePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeEmmChangePolicy, but was %@.", [self tagName]];
  }
  return _emmChangePolicy;
}

- (DBTEAMLOGEmmRemoveExceptionType *)emmRemoveException {
  if (![self isEmmRemoveException]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeEmmRemoveException, but was %@.", [self tagName]];
  }
  return _emmRemoveException;
}

- (DBTEAMLOGExtendedVersionHistoryChangePolicyType *)extendedVersionHistoryChangePolicy {
  if (![self isExtendedVersionHistoryChangePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy, but was %@.",
                       [self tagName]];
  }
  return _extendedVersionHistoryChangePolicy;
}

- (DBTEAMLOGFileCommentsChangePolicyType *)fileCommentsChangePolicy {
  if (![self isFileCommentsChangePolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeFileCommentsChangePolicy, but was %@.", [self tagName]];
  }
  return _fileCommentsChangePolicy;
}

- (DBTEAMLOGFileRequestsChangePolicyType *)fileRequestsChangePolicy {
  if (![self isFileRequestsChangePolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeFileRequestsChangePolicy, but was %@.", [self tagName]];
  }
  return _fileRequestsChangePolicy;
}

- (DBTEAMLOGFileRequestsEmailsEnabledType *)fileRequestsEmailsEnabled {
  if (![self isFileRequestsEmailsEnabled]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeFileRequestsEmailsEnabled, but was %@.", [self tagName]];
  }
  return _fileRequestsEmailsEnabled;
}

- (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType *)fileRequestsEmailsRestrictedToTeamOnly {
  if (![self isFileRequestsEmailsRestrictedToTeamOnly]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly, but was %@.",
                       [self tagName]];
  }
  return _fileRequestsEmailsRestrictedToTeamOnly;
}

- (DBTEAMLOGGoogleSsoChangePolicyType *)googleSsoChangePolicy {
  if (![self isGoogleSsoChangePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeGoogleSsoChangePolicy, but was %@.", [self tagName]];
  }
  return _googleSsoChangePolicy;
}

- (DBTEAMLOGGroupUserManagementChangePolicyType *)groupUserManagementChangePolicy {
  if (![self isGroupUserManagementChangePolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeGroupUserManagementChangePolicy, but was %@.", [self tagName]];
  }
  return _groupUserManagementChangePolicy;
}

- (DBTEAMLOGMemberRequestsChangePolicyType *)memberRequestsChangePolicy {
  if (![self isMemberRequestsChangePolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeMemberRequestsChangePolicy, but was %@.", [self tagName]];
  }
  return _memberRequestsChangePolicy;
}

- (DBTEAMLOGMemberSpaceLimitsAddExceptionType *)memberSpaceLimitsAddException {
  if (![self isMemberSpaceLimitsAddException]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeMemberSpaceLimitsAddException, but was %@.", [self tagName]];
  }
  return _memberSpaceLimitsAddException;
}

- (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType *)memberSpaceLimitsChangeCapsTypePolicy {
  if (![self isMemberSpaceLimitsChangeCapsTypePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberSpaceLimitsChangeCapsTypePolicy, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsChangeCapsTypePolicy;
}

- (DBTEAMLOGMemberSpaceLimitsChangePolicyType *)memberSpaceLimitsChangePolicy {
  if (![self isMemberSpaceLimitsChangePolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy, but was %@.", [self tagName]];
  }
  return _memberSpaceLimitsChangePolicy;
}

- (DBTEAMLOGMemberSpaceLimitsRemoveExceptionType *)memberSpaceLimitsRemoveException {
  if (![self isMemberSpaceLimitsRemoveException]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsRemoveException;
}

- (DBTEAMLOGMemberSuggestionsChangePolicyType *)memberSuggestionsChangePolicy {
  if (![self isMemberSuggestionsChangePolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeMemberSuggestionsChangePolicy, but was %@.", [self tagName]];
  }
  return _memberSuggestionsChangePolicy;
}

- (DBTEAMLOGMicrosoftOfficeAddinChangePolicyType *)microsoftOfficeAddinChangePolicy {
  if (![self isMicrosoftOfficeAddinChangePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy, but was %@.",
                       [self tagName]];
  }
  return _microsoftOfficeAddinChangePolicy;
}

- (DBTEAMLOGNetworkControlChangePolicyType *)networkControlChangePolicy {
  if (![self isNetworkControlChangePolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeNetworkControlChangePolicy, but was %@.", [self tagName]];
  }
  return _networkControlChangePolicy;
}

- (DBTEAMLOGPaperChangeDeploymentPolicyType *)paperChangeDeploymentPolicy {
  if (![self isPaperChangeDeploymentPolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperChangeDeploymentPolicy, but was %@.", [self tagName]];
  }
  return _paperChangeDeploymentPolicy;
}

- (DBTEAMLOGPaperChangeMemberLinkPolicyType *)paperChangeMemberLinkPolicy {
  if (![self isPaperChangeMemberLinkPolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperChangeMemberLinkPolicy, but was %@.", [self tagName]];
  }
  return _paperChangeMemberLinkPolicy;
}

- (DBTEAMLOGPaperChangeMemberPolicyType *)paperChangeMemberPolicy {
  if (![self isPaperChangeMemberPolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperChangeMemberPolicy, but was %@.", [self tagName]];
  }
  return _paperChangeMemberPolicy;
}

- (DBTEAMLOGPaperChangePolicyType *)paperChangePolicy {
  if (![self isPaperChangePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypePaperChangePolicy, but was %@.", [self tagName]];
  }
  return _paperChangePolicy;
}

- (DBTEAMLOGPaperEnabledUsersGroupAdditionType *)paperEnabledUsersGroupAddition {
  if (![self isPaperEnabledUsersGroupAddition]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperEnabledUsersGroupAddition, but was %@.", [self tagName]];
  }
  return _paperEnabledUsersGroupAddition;
}

- (DBTEAMLOGPaperEnabledUsersGroupRemovalType *)paperEnabledUsersGroupRemoval {
  if (![self isPaperEnabledUsersGroupRemoval]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval, but was %@.", [self tagName]];
  }
  return _paperEnabledUsersGroupRemoval;
}

- (DBTEAMLOGPermanentDeleteChangePolicyType *)permanentDeleteChangePolicy {
  if (![self isPermanentDeleteChangePolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypePermanentDeleteChangePolicy, but was %@.", [self tagName]];
  }
  return _permanentDeleteChangePolicy;
}

- (DBTEAMLOGSharingChangeFolderJoinPolicyType *)sharingChangeFolderJoinPolicy {
  if (![self isSharingChangeFolderJoinPolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy, but was %@.", [self tagName]];
  }
  return _sharingChangeFolderJoinPolicy;
}

- (DBTEAMLOGSharingChangeLinkPolicyType *)sharingChangeLinkPolicy {
  if (![self isSharingChangeLinkPolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSharingChangeLinkPolicy, but was %@.", [self tagName]];
  }
  return _sharingChangeLinkPolicy;
}

- (DBTEAMLOGSharingChangeMemberPolicyType *)sharingChangeMemberPolicy {
  if (![self isSharingChangeMemberPolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeSharingChangeMemberPolicy, but was %@.", [self tagName]];
  }
  return _sharingChangeMemberPolicy;
}

- (DBTEAMLOGShowcaseChangeDownloadPolicyType *)showcaseChangeDownloadPolicy {
  if (![self isShowcaseChangeDownloadPolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseChangeDownloadPolicy, but was %@.", [self tagName]];
  }
  return _showcaseChangeDownloadPolicy;
}

- (DBTEAMLOGShowcaseChangeEnabledPolicyType *)showcaseChangeEnabledPolicy {
  if (![self isShowcaseChangeEnabledPolicy]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseChangeEnabledPolicy, but was %@.", [self tagName]];
  }
  return _showcaseChangeEnabledPolicy;
}

- (DBTEAMLOGShowcaseChangeExternalSharingPolicyType *)showcaseChangeExternalSharingPolicy {
  if (![self isShowcaseChangeExternalSharingPolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeShowcaseChangeExternalSharingPolicy, but was %@.",
                       [self tagName]];
  }
  return _showcaseChangeExternalSharingPolicy;
}

- (DBTEAMLOGSmartSyncChangePolicyType *)smartSyncChangePolicy {
  if (![self isSmartSyncChangePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSmartSyncChangePolicy, but was %@.", [self tagName]];
  }
  return _smartSyncChangePolicy;
}

- (DBTEAMLOGSmartSyncNotOptOutType *)smartSyncNotOptOut {
  if (![self isSmartSyncNotOptOut]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSmartSyncNotOptOut, but was %@.", [self tagName]];
  }
  return _smartSyncNotOptOut;
}

- (DBTEAMLOGSmartSyncOptOutType *)smartSyncOptOut {
  if (![self isSmartSyncOptOut]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSmartSyncOptOut, but was %@.", [self tagName]];
  }
  return _smartSyncOptOut;
}

- (DBTEAMLOGSsoChangePolicyType *)ssoChangePolicy {
  if (![self isSsoChangePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeSsoChangePolicy, but was %@.", [self tagName]];
  }
  return _ssoChangePolicy;
}

- (DBTEAMLOGTfaChangePolicyType *)tfaChangePolicy {
  if (![self isTfaChangePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTfaChangePolicy, but was %@.", [self tagName]];
  }
  return _tfaChangePolicy;
}

- (DBTEAMLOGTwoAccountChangePolicyType *)twoAccountChangePolicy {
  if (![self isTwoAccountChangePolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTwoAccountChangePolicy, but was %@.", [self tagName]];
  }
  return _twoAccountChangePolicy;
}

- (DBTEAMLOGWebSessionsChangeFixedLengthPolicyType *)webSessionsChangeFixedLengthPolicy {
  if (![self isWebSessionsChangeFixedLengthPolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy, but was %@.",
                       [self tagName]];
  }
  return _webSessionsChangeFixedLengthPolicy;
}

- (DBTEAMLOGWebSessionsChangeIdleLengthPolicyType *)webSessionsChangeIdleLengthPolicy {
  if (![self isWebSessionsChangeIdleLengthPolicy]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy, but was %@.",
                       [self tagName]];
  }
  return _webSessionsChangeIdleLengthPolicy;
}

- (DBTEAMLOGTeamMergeFromType *)teamMergeFrom {
  if (![self isTeamMergeFrom]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamMergeFrom, but was %@.", [self tagName]];
  }
  return _teamMergeFrom;
}

- (DBTEAMLOGTeamMergeToType *)teamMergeTo {
  if (![self isTeamMergeTo]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamMergeTo, but was %@.", [self tagName]];
  }
  return _teamMergeTo;
}

- (DBTEAMLOGTeamProfileAddLogoType *)teamProfileAddLogo {
  if (![self isTeamProfileAddLogo]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamProfileAddLogo, but was %@.", [self tagName]];
  }
  return _teamProfileAddLogo;
}

- (DBTEAMLOGTeamProfileChangeDefaultLanguageType *)teamProfileChangeDefaultLanguage {
  if (![self isTeamProfileChangeDefaultLanguage]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamProfileChangeDefaultLanguage, but was %@.",
                       [self tagName]];
  }
  return _teamProfileChangeDefaultLanguage;
}

- (DBTEAMLOGTeamProfileChangeLogoType *)teamProfileChangeLogo {
  if (![self isTeamProfileChangeLogo]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamProfileChangeLogo, but was %@.", [self tagName]];
  }
  return _teamProfileChangeLogo;
}

- (DBTEAMLOGTeamProfileChangeNameType *)teamProfileChangeName {
  if (![self isTeamProfileChangeName]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamProfileChangeName, but was %@.", [self tagName]];
  }
  return _teamProfileChangeName;
}

- (DBTEAMLOGTeamProfileRemoveLogoType *)teamProfileRemoveLogo {
  if (![self isTeamProfileRemoveLogo]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTeamProfileRemoveLogo, but was %@.", [self tagName]];
  }
  return _teamProfileRemoveLogo;
}

- (DBTEAMLOGTfaAddBackupPhoneType *)tfaAddBackupPhone {
  if (![self isTfaAddBackupPhone]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTfaAddBackupPhone, but was %@.", [self tagName]];
  }
  return _tfaAddBackupPhone;
}

- (DBTEAMLOGTfaAddSecurityKeyType *)tfaAddSecurityKey {
  if (![self isTfaAddSecurityKey]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTfaAddSecurityKey, but was %@.", [self tagName]];
  }
  return _tfaAddSecurityKey;
}

- (DBTEAMLOGTfaChangeBackupPhoneType *)tfaChangeBackupPhone {
  if (![self isTfaChangeBackupPhone]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTfaChangeBackupPhone, but was %@.", [self tagName]];
  }
  return _tfaChangeBackupPhone;
}

- (DBTEAMLOGTfaChangeStatusType *)tfaChangeStatus {
  if (![self isTfaChangeStatus]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTfaChangeStatus, but was %@.", [self tagName]];
  }
  return _tfaChangeStatus;
}

- (DBTEAMLOGTfaRemoveBackupPhoneType *)tfaRemoveBackupPhone {
  if (![self isTfaRemoveBackupPhone]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTfaRemoveBackupPhone, but was %@.", [self tagName]];
  }
  return _tfaRemoveBackupPhone;
}

- (DBTEAMLOGTfaRemoveSecurityKeyType *)tfaRemoveSecurityKey {
  if (![self isTfaRemoveSecurityKey]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTfaRemoveSecurityKey, but was %@.", [self tagName]];
  }
  return _tfaRemoveSecurityKey;
}

- (DBTEAMLOGTfaResetType *)tfaReset {
  if (![self isTfaReset]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventTypeTfaReset, but was %@.", [self tagName]];
  }
  return _tfaReset;
}

#pragma mark - Tag state methods

- (BOOL)isAppLinkTeam {
  return _tag == DBTEAMLOGEventTypeAppLinkTeam;
}

- (BOOL)isAppLinkUser {
  return _tag == DBTEAMLOGEventTypeAppLinkUser;
}

- (BOOL)isAppUnlinkTeam {
  return _tag == DBTEAMLOGEventTypeAppUnlinkTeam;
}

- (BOOL)isAppUnlinkUser {
  return _tag == DBTEAMLOGEventTypeAppUnlinkUser;
}

- (BOOL)isFileAddComment {
  return _tag == DBTEAMLOGEventTypeFileAddComment;
}

- (BOOL)isFileChangeCommentSubscription {
  return _tag == DBTEAMLOGEventTypeFileChangeCommentSubscription;
}

- (BOOL)isFileDeleteComment {
  return _tag == DBTEAMLOGEventTypeFileDeleteComment;
}

- (BOOL)isFileLikeComment {
  return _tag == DBTEAMLOGEventTypeFileLikeComment;
}

- (BOOL)isFileResolveComment {
  return _tag == DBTEAMLOGEventTypeFileResolveComment;
}

- (BOOL)isFileUnlikeComment {
  return _tag == DBTEAMLOGEventTypeFileUnlikeComment;
}

- (BOOL)isFileUnresolveComment {
  return _tag == DBTEAMLOGEventTypeFileUnresolveComment;
}

- (BOOL)isDeviceChangeIpDesktop {
  return _tag == DBTEAMLOGEventTypeDeviceChangeIpDesktop;
}

- (BOOL)isDeviceChangeIpMobile {
  return _tag == DBTEAMLOGEventTypeDeviceChangeIpMobile;
}

- (BOOL)isDeviceChangeIpWeb {
  return _tag == DBTEAMLOGEventTypeDeviceChangeIpWeb;
}

- (BOOL)isDeviceDeleteOnUnlinkFail {
  return _tag == DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail;
}

- (BOOL)isDeviceDeleteOnUnlinkSuccess {
  return _tag == DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess;
}

- (BOOL)isDeviceLinkFail {
  return _tag == DBTEAMLOGEventTypeDeviceLinkFail;
}

- (BOOL)isDeviceLinkSuccess {
  return _tag == DBTEAMLOGEventTypeDeviceLinkSuccess;
}

- (BOOL)isDeviceManagementDisabled {
  return _tag == DBTEAMLOGEventTypeDeviceManagementDisabled;
}

- (BOOL)isDeviceManagementEnabled {
  return _tag == DBTEAMLOGEventTypeDeviceManagementEnabled;
}

- (BOOL)isDeviceUnlink {
  return _tag == DBTEAMLOGEventTypeDeviceUnlink;
}

- (BOOL)isEmmRefreshAuthToken {
  return _tag == DBTEAMLOGEventTypeEmmRefreshAuthToken;
}

- (BOOL)isAccountCaptureChangeAvailability {
  return _tag == DBTEAMLOGEventTypeAccountCaptureChangeAvailability;
}

- (BOOL)isAccountCaptureMigrateAccount {
  return _tag == DBTEAMLOGEventTypeAccountCaptureMigrateAccount;
}

- (BOOL)isAccountCaptureNotificationEmailsSent {
  return _tag == DBTEAMLOGEventTypeAccountCaptureNotificationEmailsSent;
}

- (BOOL)isAccountCaptureRelinquishAccount {
  return _tag == DBTEAMLOGEventTypeAccountCaptureRelinquishAccount;
}

- (BOOL)isDisabledDomainInvites {
  return _tag == DBTEAMLOGEventTypeDisabledDomainInvites;
}

- (BOOL)isDomainInvitesApproveRequestToJoinTeam {
  return _tag == DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam;
}

- (BOOL)isDomainInvitesDeclineRequestToJoinTeam {
  return _tag == DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam;
}

- (BOOL)isDomainInvitesEmailExistingUsers {
  return _tag == DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers;
}

- (BOOL)isDomainInvitesRequestToJoinTeam {
  return _tag == DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam;
}

- (BOOL)isDomainInvitesSetInviteNewUserPrefToNo {
  return _tag == DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo;
}

- (BOOL)isDomainInvitesSetInviteNewUserPrefToYes {
  return _tag == DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes;
}

- (BOOL)isDomainVerificationAddDomainFail {
  return _tag == DBTEAMLOGEventTypeDomainVerificationAddDomainFail;
}

- (BOOL)isDomainVerificationAddDomainSuccess {
  return _tag == DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess;
}

- (BOOL)isDomainVerificationRemoveDomain {
  return _tag == DBTEAMLOGEventTypeDomainVerificationRemoveDomain;
}

- (BOOL)isEnabledDomainInvites {
  return _tag == DBTEAMLOGEventTypeEnabledDomainInvites;
}

- (BOOL)isCreateFolder {
  return _tag == DBTEAMLOGEventTypeCreateFolder;
}

- (BOOL)isFileAdd {
  return _tag == DBTEAMLOGEventTypeFileAdd;
}

- (BOOL)isFileCopy {
  return _tag == DBTEAMLOGEventTypeFileCopy;
}

- (BOOL)isFileDelete {
  return _tag == DBTEAMLOGEventTypeFileDelete;
}

- (BOOL)isFileDownload {
  return _tag == DBTEAMLOGEventTypeFileDownload;
}

- (BOOL)isFileEdit {
  return _tag == DBTEAMLOGEventTypeFileEdit;
}

- (BOOL)isFileGetCopyReference {
  return _tag == DBTEAMLOGEventTypeFileGetCopyReference;
}

- (BOOL)isFileMove {
  return _tag == DBTEAMLOGEventTypeFileMove;
}

- (BOOL)isFilePermanentlyDelete {
  return _tag == DBTEAMLOGEventTypeFilePermanentlyDelete;
}

- (BOOL)isFilePreview {
  return _tag == DBTEAMLOGEventTypeFilePreview;
}

- (BOOL)isFileRename {
  return _tag == DBTEAMLOGEventTypeFileRename;
}

- (BOOL)isFileRestore {
  return _tag == DBTEAMLOGEventTypeFileRestore;
}

- (BOOL)isFileRevert {
  return _tag == DBTEAMLOGEventTypeFileRevert;
}

- (BOOL)isFileRollbackChanges {
  return _tag == DBTEAMLOGEventTypeFileRollbackChanges;
}

- (BOOL)isFileSaveCopyReference {
  return _tag == DBTEAMLOGEventTypeFileSaveCopyReference;
}

- (BOOL)isFileRequestChange {
  return _tag == DBTEAMLOGEventTypeFileRequestChange;
}

- (BOOL)isFileRequestClose {
  return _tag == DBTEAMLOGEventTypeFileRequestClose;
}

- (BOOL)isFileRequestCreate {
  return _tag == DBTEAMLOGEventTypeFileRequestCreate;
}

- (BOOL)isFileRequestReceiveFile {
  return _tag == DBTEAMLOGEventTypeFileRequestReceiveFile;
}

- (BOOL)isGroupAddExternalId {
  return _tag == DBTEAMLOGEventTypeGroupAddExternalId;
}

- (BOOL)isGroupAddMember {
  return _tag == DBTEAMLOGEventTypeGroupAddMember;
}

- (BOOL)isGroupChangeExternalId {
  return _tag == DBTEAMLOGEventTypeGroupChangeExternalId;
}

- (BOOL)isGroupChangeManagementType {
  return _tag == DBTEAMLOGEventTypeGroupChangeManagementType;
}

- (BOOL)isGroupChangeMemberRole {
  return _tag == DBTEAMLOGEventTypeGroupChangeMemberRole;
}

- (BOOL)isGroupCreate {
  return _tag == DBTEAMLOGEventTypeGroupCreate;
}

- (BOOL)isGroupDelete {
  return _tag == DBTEAMLOGEventTypeGroupDelete;
}

- (BOOL)isGroupDescriptionUpdated {
  return _tag == DBTEAMLOGEventTypeGroupDescriptionUpdated;
}

- (BOOL)isGroupJoinPolicyUpdated {
  return _tag == DBTEAMLOGEventTypeGroupJoinPolicyUpdated;
}

- (BOOL)isGroupMoved {
  return _tag == DBTEAMLOGEventTypeGroupMoved;
}

- (BOOL)isGroupRemoveExternalId {
  return _tag == DBTEAMLOGEventTypeGroupRemoveExternalId;
}

- (BOOL)isGroupRemoveMember {
  return _tag == DBTEAMLOGEventTypeGroupRemoveMember;
}

- (BOOL)isGroupRename {
  return _tag == DBTEAMLOGEventTypeGroupRename;
}

- (BOOL)isEmmError {
  return _tag == DBTEAMLOGEventTypeEmmError;
}

- (BOOL)isLoginFail {
  return _tag == DBTEAMLOGEventTypeLoginFail;
}

- (BOOL)isLoginSuccess {
  return _tag == DBTEAMLOGEventTypeLoginSuccess;
}

- (BOOL)isLogout {
  return _tag == DBTEAMLOGEventTypeLogout;
}

- (BOOL)isResellerSupportSessionEnd {
  return _tag == DBTEAMLOGEventTypeResellerSupportSessionEnd;
}

- (BOOL)isResellerSupportSessionStart {
  return _tag == DBTEAMLOGEventTypeResellerSupportSessionStart;
}

- (BOOL)isSignInAsSessionEnd {
  return _tag == DBTEAMLOGEventTypeSignInAsSessionEnd;
}

- (BOOL)isSignInAsSessionStart {
  return _tag == DBTEAMLOGEventTypeSignInAsSessionStart;
}

- (BOOL)isSsoError {
  return _tag == DBTEAMLOGEventTypeSsoError;
}

- (BOOL)isMemberAddName {
  return _tag == DBTEAMLOGEventTypeMemberAddName;
}

- (BOOL)isMemberChangeAdminRole {
  return _tag == DBTEAMLOGEventTypeMemberChangeAdminRole;
}

- (BOOL)isMemberChangeEmail {
  return _tag == DBTEAMLOGEventTypeMemberChangeEmail;
}

- (BOOL)isMemberChangeMembershipType {
  return _tag == DBTEAMLOGEventTypeMemberChangeMembershipType;
}

- (BOOL)isMemberChangeName {
  return _tag == DBTEAMLOGEventTypeMemberChangeName;
}

- (BOOL)isMemberChangeStatus {
  return _tag == DBTEAMLOGEventTypeMemberChangeStatus;
}

- (BOOL)isMemberPermanentlyDeleteAccountContents {
  return _tag == DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents;
}

- (BOOL)isMemberSpaceLimitsAddCustomQuota {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsAddCustomQuota;
}

- (BOOL)isMemberSpaceLimitsChangeCustomQuota {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsChangeCustomQuota;
}

- (BOOL)isMemberSpaceLimitsChangeStatus {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus;
}

- (BOOL)isMemberSpaceLimitsRemoveCustomQuota {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsRemoveCustomQuota;
}

- (BOOL)isMemberSuggest {
  return _tag == DBTEAMLOGEventTypeMemberSuggest;
}

- (BOOL)isMemberTransferAccountContents {
  return _tag == DBTEAMLOGEventTypeMemberTransferAccountContents;
}

- (BOOL)isSecondaryMailsPolicyChanged {
  return _tag == DBTEAMLOGEventTypeSecondaryMailsPolicyChanged;
}

- (BOOL)isPaperContentAddMember {
  return _tag == DBTEAMLOGEventTypePaperContentAddMember;
}

- (BOOL)isPaperContentAddToFolder {
  return _tag == DBTEAMLOGEventTypePaperContentAddToFolder;
}

- (BOOL)isPaperContentArchive {
  return _tag == DBTEAMLOGEventTypePaperContentArchive;
}

- (BOOL)isPaperContentCreate {
  return _tag == DBTEAMLOGEventTypePaperContentCreate;
}

- (BOOL)isPaperContentPermanentlyDelete {
  return _tag == DBTEAMLOGEventTypePaperContentPermanentlyDelete;
}

- (BOOL)isPaperContentRemoveFromFolder {
  return _tag == DBTEAMLOGEventTypePaperContentRemoveFromFolder;
}

- (BOOL)isPaperContentRemoveMember {
  return _tag == DBTEAMLOGEventTypePaperContentRemoveMember;
}

- (BOOL)isPaperContentRename {
  return _tag == DBTEAMLOGEventTypePaperContentRename;
}

- (BOOL)isPaperContentRestore {
  return _tag == DBTEAMLOGEventTypePaperContentRestore;
}

- (BOOL)isPaperDocAddComment {
  return _tag == DBTEAMLOGEventTypePaperDocAddComment;
}

- (BOOL)isPaperDocChangeMemberRole {
  return _tag == DBTEAMLOGEventTypePaperDocChangeMemberRole;
}

- (BOOL)isPaperDocChangeSharingPolicy {
  return _tag == DBTEAMLOGEventTypePaperDocChangeSharingPolicy;
}

- (BOOL)isPaperDocChangeSubscription {
  return _tag == DBTEAMLOGEventTypePaperDocChangeSubscription;
}

- (BOOL)isPaperDocDeleted {
  return _tag == DBTEAMLOGEventTypePaperDocDeleted;
}

- (BOOL)isPaperDocDeleteComment {
  return _tag == DBTEAMLOGEventTypePaperDocDeleteComment;
}

- (BOOL)isPaperDocDownload {
  return _tag == DBTEAMLOGEventTypePaperDocDownload;
}

- (BOOL)isPaperDocEdit {
  return _tag == DBTEAMLOGEventTypePaperDocEdit;
}

- (BOOL)isPaperDocEditComment {
  return _tag == DBTEAMLOGEventTypePaperDocEditComment;
}

- (BOOL)isPaperDocFollowed {
  return _tag == DBTEAMLOGEventTypePaperDocFollowed;
}

- (BOOL)isPaperDocMention {
  return _tag == DBTEAMLOGEventTypePaperDocMention;
}

- (BOOL)isPaperDocRequestAccess {
  return _tag == DBTEAMLOGEventTypePaperDocRequestAccess;
}

- (BOOL)isPaperDocResolveComment {
  return _tag == DBTEAMLOGEventTypePaperDocResolveComment;
}

- (BOOL)isPaperDocRevert {
  return _tag == DBTEAMLOGEventTypePaperDocRevert;
}

- (BOOL)isPaperDocSlackShare {
  return _tag == DBTEAMLOGEventTypePaperDocSlackShare;
}

- (BOOL)isPaperDocTeamInvite {
  return _tag == DBTEAMLOGEventTypePaperDocTeamInvite;
}

- (BOOL)isPaperDocTrashed {
  return _tag == DBTEAMLOGEventTypePaperDocTrashed;
}

- (BOOL)isPaperDocUnresolveComment {
  return _tag == DBTEAMLOGEventTypePaperDocUnresolveComment;
}

- (BOOL)isPaperDocUntrashed {
  return _tag == DBTEAMLOGEventTypePaperDocUntrashed;
}

- (BOOL)isPaperDocView {
  return _tag == DBTEAMLOGEventTypePaperDocView;
}

- (BOOL)isPaperExternalViewAllow {
  return _tag == DBTEAMLOGEventTypePaperExternalViewAllow;
}

- (BOOL)isPaperExternalViewDefaultTeam {
  return _tag == DBTEAMLOGEventTypePaperExternalViewDefaultTeam;
}

- (BOOL)isPaperExternalViewForbid {
  return _tag == DBTEAMLOGEventTypePaperExternalViewForbid;
}

- (BOOL)isPaperFolderChangeSubscription {
  return _tag == DBTEAMLOGEventTypePaperFolderChangeSubscription;
}

- (BOOL)isPaperFolderDeleted {
  return _tag == DBTEAMLOGEventTypePaperFolderDeleted;
}

- (BOOL)isPaperFolderFollowed {
  return _tag == DBTEAMLOGEventTypePaperFolderFollowed;
}

- (BOOL)isPaperFolderTeamInvite {
  return _tag == DBTEAMLOGEventTypePaperFolderTeamInvite;
}

- (BOOL)isPasswordChange {
  return _tag == DBTEAMLOGEventTypePasswordChange;
}

- (BOOL)isPasswordReset {
  return _tag == DBTEAMLOGEventTypePasswordReset;
}

- (BOOL)isPasswordResetAll {
  return _tag == DBTEAMLOGEventTypePasswordResetAll;
}

- (BOOL)isEmmCreateExceptionsReport {
  return _tag == DBTEAMLOGEventTypeEmmCreateExceptionsReport;
}

- (BOOL)isEmmCreateUsageReport {
  return _tag == DBTEAMLOGEventTypeEmmCreateUsageReport;
}

- (BOOL)isExportMembersReport {
  return _tag == DBTEAMLOGEventTypeExportMembersReport;
}

- (BOOL)isPaperAdminExportStart {
  return _tag == DBTEAMLOGEventTypePaperAdminExportStart;
}

- (BOOL)isSmartSyncCreateAdminPrivilegeReport {
  return _tag == DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport;
}

- (BOOL)isTeamActivityCreateReport {
  return _tag == DBTEAMLOGEventTypeTeamActivityCreateReport;
}

- (BOOL)isCollectionShare {
  return _tag == DBTEAMLOGEventTypeCollectionShare;
}

- (BOOL)isNoteAclInviteOnly {
  return _tag == DBTEAMLOGEventTypeNoteAclInviteOnly;
}

- (BOOL)isNoteAclLink {
  return _tag == DBTEAMLOGEventTypeNoteAclLink;
}

- (BOOL)isNoteAclTeamLink {
  return _tag == DBTEAMLOGEventTypeNoteAclTeamLink;
}

- (BOOL)isNoteShared {
  return _tag == DBTEAMLOGEventTypeNoteShared;
}

- (BOOL)isNoteShareReceive {
  return _tag == DBTEAMLOGEventTypeNoteShareReceive;
}

- (BOOL)isOpenNoteShared {
  return _tag == DBTEAMLOGEventTypeOpenNoteShared;
}

- (BOOL)isSfAddGroup {
  return _tag == DBTEAMLOGEventTypeSfAddGroup;
}

- (BOOL)isSfAllowNonMembersToViewSharedLinks {
  return _tag == DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks;
}

- (BOOL)isSfExternalInviteWarn {
  return _tag == DBTEAMLOGEventTypeSfExternalInviteWarn;
}

- (BOOL)isSfFbInvite {
  return _tag == DBTEAMLOGEventTypeSfFbInvite;
}

- (BOOL)isSfFbInviteChangeRole {
  return _tag == DBTEAMLOGEventTypeSfFbInviteChangeRole;
}

- (BOOL)isSfFbUninvite {
  return _tag == DBTEAMLOGEventTypeSfFbUninvite;
}

- (BOOL)isSfInviteGroup {
  return _tag == DBTEAMLOGEventTypeSfInviteGroup;
}

- (BOOL)isSfTeamGrantAccess {
  return _tag == DBTEAMLOGEventTypeSfTeamGrantAccess;
}

- (BOOL)isSfTeamInvite {
  return _tag == DBTEAMLOGEventTypeSfTeamInvite;
}

- (BOOL)isSfTeamInviteChangeRole {
  return _tag == DBTEAMLOGEventTypeSfTeamInviteChangeRole;
}

- (BOOL)isSfTeamJoin {
  return _tag == DBTEAMLOGEventTypeSfTeamJoin;
}

- (BOOL)isSfTeamJoinFromOobLink {
  return _tag == DBTEAMLOGEventTypeSfTeamJoinFromOobLink;
}

- (BOOL)isSfTeamUninvite {
  return _tag == DBTEAMLOGEventTypeSfTeamUninvite;
}

- (BOOL)isSharedContentAddInvitees {
  return _tag == DBTEAMLOGEventTypeSharedContentAddInvitees;
}

- (BOOL)isSharedContentAddLinkExpiry {
  return _tag == DBTEAMLOGEventTypeSharedContentAddLinkExpiry;
}

- (BOOL)isSharedContentAddLinkPassword {
  return _tag == DBTEAMLOGEventTypeSharedContentAddLinkPassword;
}

- (BOOL)isSharedContentAddMember {
  return _tag == DBTEAMLOGEventTypeSharedContentAddMember;
}

- (BOOL)isSharedContentChangeDownloadsPolicy {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy;
}

- (BOOL)isSharedContentChangeInviteeRole {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeInviteeRole;
}

- (BOOL)isSharedContentChangeLinkAudience {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeLinkAudience;
}

- (BOOL)isSharedContentChangeLinkExpiry {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeLinkExpiry;
}

- (BOOL)isSharedContentChangeLinkPassword {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeLinkPassword;
}

- (BOOL)isSharedContentChangeMemberRole {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeMemberRole;
}

- (BOOL)isSharedContentChangeViewerInfoPolicy {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy;
}

- (BOOL)isSharedContentClaimInvitation {
  return _tag == DBTEAMLOGEventTypeSharedContentClaimInvitation;
}

- (BOOL)isSharedContentCopy {
  return _tag == DBTEAMLOGEventTypeSharedContentCopy;
}

- (BOOL)isSharedContentDownload {
  return _tag == DBTEAMLOGEventTypeSharedContentDownload;
}

- (BOOL)isSharedContentRelinquishMembership {
  return _tag == DBTEAMLOGEventTypeSharedContentRelinquishMembership;
}

- (BOOL)isSharedContentRemoveInvitees {
  return _tag == DBTEAMLOGEventTypeSharedContentRemoveInvitees;
}

- (BOOL)isSharedContentRemoveLinkExpiry {
  return _tag == DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry;
}

- (BOOL)isSharedContentRemoveLinkPassword {
  return _tag == DBTEAMLOGEventTypeSharedContentRemoveLinkPassword;
}

- (BOOL)isSharedContentRemoveMember {
  return _tag == DBTEAMLOGEventTypeSharedContentRemoveMember;
}

- (BOOL)isSharedContentRequestAccess {
  return _tag == DBTEAMLOGEventTypeSharedContentRequestAccess;
}

- (BOOL)isSharedContentUnshare {
  return _tag == DBTEAMLOGEventTypeSharedContentUnshare;
}

- (BOOL)isSharedContentView {
  return _tag == DBTEAMLOGEventTypeSharedContentView;
}

- (BOOL)isSharedFolderChangeLinkPolicy {
  return _tag == DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy;
}

- (BOOL)isSharedFolderChangeMembersInheritancePolicy {
  return _tag == DBTEAMLOGEventTypeSharedFolderChangeMembersInheritancePolicy;
}

- (BOOL)isSharedFolderChangeMembersManagementPolicy {
  return _tag == DBTEAMLOGEventTypeSharedFolderChangeMembersManagementPolicy;
}

- (BOOL)isSharedFolderChangeMembersPolicy {
  return _tag == DBTEAMLOGEventTypeSharedFolderChangeMembersPolicy;
}

- (BOOL)isSharedFolderCreate {
  return _tag == DBTEAMLOGEventTypeSharedFolderCreate;
}

- (BOOL)isSharedFolderDeclineInvitation {
  return _tag == DBTEAMLOGEventTypeSharedFolderDeclineInvitation;
}

- (BOOL)isSharedFolderMount {
  return _tag == DBTEAMLOGEventTypeSharedFolderMount;
}

- (BOOL)isSharedFolderNest {
  return _tag == DBTEAMLOGEventTypeSharedFolderNest;
}

- (BOOL)isSharedFolderTransferOwnership {
  return _tag == DBTEAMLOGEventTypeSharedFolderTransferOwnership;
}

- (BOOL)isSharedFolderUnmount {
  return _tag == DBTEAMLOGEventTypeSharedFolderUnmount;
}

- (BOOL)isSharedLinkAddExpiry {
  return _tag == DBTEAMLOGEventTypeSharedLinkAddExpiry;
}

- (BOOL)isSharedLinkChangeExpiry {
  return _tag == DBTEAMLOGEventTypeSharedLinkChangeExpiry;
}

- (BOOL)isSharedLinkChangeVisibility {
  return _tag == DBTEAMLOGEventTypeSharedLinkChangeVisibility;
}

- (BOOL)isSharedLinkCopy {
  return _tag == DBTEAMLOGEventTypeSharedLinkCopy;
}

- (BOOL)isSharedLinkCreate {
  return _tag == DBTEAMLOGEventTypeSharedLinkCreate;
}

- (BOOL)isSharedLinkDisable {
  return _tag == DBTEAMLOGEventTypeSharedLinkDisable;
}

- (BOOL)isSharedLinkDownload {
  return _tag == DBTEAMLOGEventTypeSharedLinkDownload;
}

- (BOOL)isSharedLinkRemoveExpiry {
  return _tag == DBTEAMLOGEventTypeSharedLinkRemoveExpiry;
}

- (BOOL)isSharedLinkShare {
  return _tag == DBTEAMLOGEventTypeSharedLinkShare;
}

- (BOOL)isSharedLinkView {
  return _tag == DBTEAMLOGEventTypeSharedLinkView;
}

- (BOOL)isSharedNoteOpened {
  return _tag == DBTEAMLOGEventTypeSharedNoteOpened;
}

- (BOOL)isShmodelGroupShare {
  return _tag == DBTEAMLOGEventTypeShmodelGroupShare;
}

- (BOOL)isShowcaseAccessGranted {
  return _tag == DBTEAMLOGEventTypeShowcaseAccessGranted;
}

- (BOOL)isShowcaseAddMember {
  return _tag == DBTEAMLOGEventTypeShowcaseAddMember;
}

- (BOOL)isShowcaseArchived {
  return _tag == DBTEAMLOGEventTypeShowcaseArchived;
}

- (BOOL)isShowcaseCreated {
  return _tag == DBTEAMLOGEventTypeShowcaseCreated;
}

- (BOOL)isShowcaseDeleteComment {
  return _tag == DBTEAMLOGEventTypeShowcaseDeleteComment;
}

- (BOOL)isShowcaseEdited {
  return _tag == DBTEAMLOGEventTypeShowcaseEdited;
}

- (BOOL)isShowcaseEditComment {
  return _tag == DBTEAMLOGEventTypeShowcaseEditComment;
}

- (BOOL)isShowcaseFileAdded {
  return _tag == DBTEAMLOGEventTypeShowcaseFileAdded;
}

- (BOOL)isShowcaseFileDownload {
  return _tag == DBTEAMLOGEventTypeShowcaseFileDownload;
}

- (BOOL)isShowcaseFileRemoved {
  return _tag == DBTEAMLOGEventTypeShowcaseFileRemoved;
}

- (BOOL)isShowcaseFileView {
  return _tag == DBTEAMLOGEventTypeShowcaseFileView;
}

- (BOOL)isShowcasePermanentlyDeleted {
  return _tag == DBTEAMLOGEventTypeShowcasePermanentlyDeleted;
}

- (BOOL)isShowcasePostComment {
  return _tag == DBTEAMLOGEventTypeShowcasePostComment;
}

- (BOOL)isShowcaseRemoveMember {
  return _tag == DBTEAMLOGEventTypeShowcaseRemoveMember;
}

- (BOOL)isShowcaseRenamed {
  return _tag == DBTEAMLOGEventTypeShowcaseRenamed;
}

- (BOOL)isShowcaseRequestAccess {
  return _tag == DBTEAMLOGEventTypeShowcaseRequestAccess;
}

- (BOOL)isShowcaseResolveComment {
  return _tag == DBTEAMLOGEventTypeShowcaseResolveComment;
}

- (BOOL)isShowcaseRestored {
  return _tag == DBTEAMLOGEventTypeShowcaseRestored;
}

- (BOOL)isShowcaseTrashed {
  return _tag == DBTEAMLOGEventTypeShowcaseTrashed;
}

- (BOOL)isShowcaseTrashedDeprecated {
  return _tag == DBTEAMLOGEventTypeShowcaseTrashedDeprecated;
}

- (BOOL)isShowcaseUnresolveComment {
  return _tag == DBTEAMLOGEventTypeShowcaseUnresolveComment;
}

- (BOOL)isShowcaseUntrashed {
  return _tag == DBTEAMLOGEventTypeShowcaseUntrashed;
}

- (BOOL)isShowcaseUntrashedDeprecated {
  return _tag == DBTEAMLOGEventTypeShowcaseUntrashedDeprecated;
}

- (BOOL)isShowcaseView {
  return _tag == DBTEAMLOGEventTypeShowcaseView;
}

- (BOOL)isSsoAddCert {
  return _tag == DBTEAMLOGEventTypeSsoAddCert;
}

- (BOOL)isSsoAddLoginUrl {
  return _tag == DBTEAMLOGEventTypeSsoAddLoginUrl;
}

- (BOOL)isSsoAddLogoutUrl {
  return _tag == DBTEAMLOGEventTypeSsoAddLogoutUrl;
}

- (BOOL)isSsoChangeCert {
  return _tag == DBTEAMLOGEventTypeSsoChangeCert;
}

- (BOOL)isSsoChangeLoginUrl {
  return _tag == DBTEAMLOGEventTypeSsoChangeLoginUrl;
}

- (BOOL)isSsoChangeLogoutUrl {
  return _tag == DBTEAMLOGEventTypeSsoChangeLogoutUrl;
}

- (BOOL)isSsoChangeSamlIdentityMode {
  return _tag == DBTEAMLOGEventTypeSsoChangeSamlIdentityMode;
}

- (BOOL)isSsoRemoveCert {
  return _tag == DBTEAMLOGEventTypeSsoRemoveCert;
}

- (BOOL)isSsoRemoveLoginUrl {
  return _tag == DBTEAMLOGEventTypeSsoRemoveLoginUrl;
}

- (BOOL)isSsoRemoveLogoutUrl {
  return _tag == DBTEAMLOGEventTypeSsoRemoveLogoutUrl;
}

- (BOOL)isTeamFolderChangeStatus {
  return _tag == DBTEAMLOGEventTypeTeamFolderChangeStatus;
}

- (BOOL)isTeamFolderCreate {
  return _tag == DBTEAMLOGEventTypeTeamFolderCreate;
}

- (BOOL)isTeamFolderDowngrade {
  return _tag == DBTEAMLOGEventTypeTeamFolderDowngrade;
}

- (BOOL)isTeamFolderPermanentlyDelete {
  return _tag == DBTEAMLOGEventTypeTeamFolderPermanentlyDelete;
}

- (BOOL)isTeamFolderRename {
  return _tag == DBTEAMLOGEventTypeTeamFolderRename;
}

- (BOOL)isTeamSelectiveSyncSettingsChanged {
  return _tag == DBTEAMLOGEventTypeTeamSelectiveSyncSettingsChanged;
}

- (BOOL)isAccountCaptureChangePolicy {
  return _tag == DBTEAMLOGEventTypeAccountCaptureChangePolicy;
}

- (BOOL)isAllowDownloadDisabled {
  return _tag == DBTEAMLOGEventTypeAllowDownloadDisabled;
}

- (BOOL)isAllowDownloadEnabled {
  return _tag == DBTEAMLOGEventTypeAllowDownloadEnabled;
}

- (BOOL)isDataPlacementRestrictionChangePolicy {
  return _tag == DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy;
}

- (BOOL)isDataPlacementRestrictionSatisfyPolicy {
  return _tag == DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy;
}

- (BOOL)isDeviceApprovalsChangeDesktopPolicy {
  return _tag == DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy;
}

- (BOOL)isDeviceApprovalsChangeMobilePolicy {
  return _tag == DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy;
}

- (BOOL)isDeviceApprovalsChangeOverageAction {
  return _tag == DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction;
}

- (BOOL)isDeviceApprovalsChangeUnlinkAction {
  return _tag == DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction;
}

- (BOOL)isDirectoryRestrictionsAddMembers {
  return _tag == DBTEAMLOGEventTypeDirectoryRestrictionsAddMembers;
}

- (BOOL)isDirectoryRestrictionsRemoveMembers {
  return _tag == DBTEAMLOGEventTypeDirectoryRestrictionsRemoveMembers;
}

- (BOOL)isEmmAddException {
  return _tag == DBTEAMLOGEventTypeEmmAddException;
}

- (BOOL)isEmmChangePolicy {
  return _tag == DBTEAMLOGEventTypeEmmChangePolicy;
}

- (BOOL)isEmmRemoveException {
  return _tag == DBTEAMLOGEventTypeEmmRemoveException;
}

- (BOOL)isExtendedVersionHistoryChangePolicy {
  return _tag == DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy;
}

- (BOOL)isFileCommentsChangePolicy {
  return _tag == DBTEAMLOGEventTypeFileCommentsChangePolicy;
}

- (BOOL)isFileRequestsChangePolicy {
  return _tag == DBTEAMLOGEventTypeFileRequestsChangePolicy;
}

- (BOOL)isFileRequestsEmailsEnabled {
  return _tag == DBTEAMLOGEventTypeFileRequestsEmailsEnabled;
}

- (BOOL)isFileRequestsEmailsRestrictedToTeamOnly {
  return _tag == DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly;
}

- (BOOL)isGoogleSsoChangePolicy {
  return _tag == DBTEAMLOGEventTypeGoogleSsoChangePolicy;
}

- (BOOL)isGroupUserManagementChangePolicy {
  return _tag == DBTEAMLOGEventTypeGroupUserManagementChangePolicy;
}

- (BOOL)isMemberRequestsChangePolicy {
  return _tag == DBTEAMLOGEventTypeMemberRequestsChangePolicy;
}

- (BOOL)isMemberSpaceLimitsAddException {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsAddException;
}

- (BOOL)isMemberSpaceLimitsChangeCapsTypePolicy {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsChangeCapsTypePolicy;
}

- (BOOL)isMemberSpaceLimitsChangePolicy {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy;
}

- (BOOL)isMemberSpaceLimitsRemoveException {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException;
}

- (BOOL)isMemberSuggestionsChangePolicy {
  return _tag == DBTEAMLOGEventTypeMemberSuggestionsChangePolicy;
}

- (BOOL)isMicrosoftOfficeAddinChangePolicy {
  return _tag == DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy;
}

- (BOOL)isNetworkControlChangePolicy {
  return _tag == DBTEAMLOGEventTypeNetworkControlChangePolicy;
}

- (BOOL)isPaperChangeDeploymentPolicy {
  return _tag == DBTEAMLOGEventTypePaperChangeDeploymentPolicy;
}

- (BOOL)isPaperChangeMemberLinkPolicy {
  return _tag == DBTEAMLOGEventTypePaperChangeMemberLinkPolicy;
}

- (BOOL)isPaperChangeMemberPolicy {
  return _tag == DBTEAMLOGEventTypePaperChangeMemberPolicy;
}

- (BOOL)isPaperChangePolicy {
  return _tag == DBTEAMLOGEventTypePaperChangePolicy;
}

- (BOOL)isPaperEnabledUsersGroupAddition {
  return _tag == DBTEAMLOGEventTypePaperEnabledUsersGroupAddition;
}

- (BOOL)isPaperEnabledUsersGroupRemoval {
  return _tag == DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval;
}

- (BOOL)isPermanentDeleteChangePolicy {
  return _tag == DBTEAMLOGEventTypePermanentDeleteChangePolicy;
}

- (BOOL)isSharingChangeFolderJoinPolicy {
  return _tag == DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy;
}

- (BOOL)isSharingChangeLinkPolicy {
  return _tag == DBTEAMLOGEventTypeSharingChangeLinkPolicy;
}

- (BOOL)isSharingChangeMemberPolicy {
  return _tag == DBTEAMLOGEventTypeSharingChangeMemberPolicy;
}

- (BOOL)isShowcaseChangeDownloadPolicy {
  return _tag == DBTEAMLOGEventTypeShowcaseChangeDownloadPolicy;
}

- (BOOL)isShowcaseChangeEnabledPolicy {
  return _tag == DBTEAMLOGEventTypeShowcaseChangeEnabledPolicy;
}

- (BOOL)isShowcaseChangeExternalSharingPolicy {
  return _tag == DBTEAMLOGEventTypeShowcaseChangeExternalSharingPolicy;
}

- (BOOL)isSmartSyncChangePolicy {
  return _tag == DBTEAMLOGEventTypeSmartSyncChangePolicy;
}

- (BOOL)isSmartSyncNotOptOut {
  return _tag == DBTEAMLOGEventTypeSmartSyncNotOptOut;
}

- (BOOL)isSmartSyncOptOut {
  return _tag == DBTEAMLOGEventTypeSmartSyncOptOut;
}

- (BOOL)isSsoChangePolicy {
  return _tag == DBTEAMLOGEventTypeSsoChangePolicy;
}

- (BOOL)isTfaChangePolicy {
  return _tag == DBTEAMLOGEventTypeTfaChangePolicy;
}

- (BOOL)isTwoAccountChangePolicy {
  return _tag == DBTEAMLOGEventTypeTwoAccountChangePolicy;
}

- (BOOL)isWebSessionsChangeFixedLengthPolicy {
  return _tag == DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy;
}

- (BOOL)isWebSessionsChangeIdleLengthPolicy {
  return _tag == DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy;
}

- (BOOL)isTeamMergeFrom {
  return _tag == DBTEAMLOGEventTypeTeamMergeFrom;
}

- (BOOL)isTeamMergeTo {
  return _tag == DBTEAMLOGEventTypeTeamMergeTo;
}

- (BOOL)isTeamProfileAddLogo {
  return _tag == DBTEAMLOGEventTypeTeamProfileAddLogo;
}

- (BOOL)isTeamProfileChangeDefaultLanguage {
  return _tag == DBTEAMLOGEventTypeTeamProfileChangeDefaultLanguage;
}

- (BOOL)isTeamProfileChangeLogo {
  return _tag == DBTEAMLOGEventTypeTeamProfileChangeLogo;
}

- (BOOL)isTeamProfileChangeName {
  return _tag == DBTEAMLOGEventTypeTeamProfileChangeName;
}

- (BOOL)isTeamProfileRemoveLogo {
  return _tag == DBTEAMLOGEventTypeTeamProfileRemoveLogo;
}

- (BOOL)isTfaAddBackupPhone {
  return _tag == DBTEAMLOGEventTypeTfaAddBackupPhone;
}

- (BOOL)isTfaAddSecurityKey {
  return _tag == DBTEAMLOGEventTypeTfaAddSecurityKey;
}

- (BOOL)isTfaChangeBackupPhone {
  return _tag == DBTEAMLOGEventTypeTfaChangeBackupPhone;
}

- (BOOL)isTfaChangeStatus {
  return _tag == DBTEAMLOGEventTypeTfaChangeStatus;
}

- (BOOL)isTfaRemoveBackupPhone {
  return _tag == DBTEAMLOGEventTypeTfaRemoveBackupPhone;
}

- (BOOL)isTfaRemoveSecurityKey {
  return _tag == DBTEAMLOGEventTypeTfaRemoveSecurityKey;
}

- (BOOL)isTfaReset {
  return _tag == DBTEAMLOGEventTypeTfaReset;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEventTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEventTypeAppLinkTeam:
    return @"DBTEAMLOGEventTypeAppLinkTeam";
  case DBTEAMLOGEventTypeAppLinkUser:
    return @"DBTEAMLOGEventTypeAppLinkUser";
  case DBTEAMLOGEventTypeAppUnlinkTeam:
    return @"DBTEAMLOGEventTypeAppUnlinkTeam";
  case DBTEAMLOGEventTypeAppUnlinkUser:
    return @"DBTEAMLOGEventTypeAppUnlinkUser";
  case DBTEAMLOGEventTypeFileAddComment:
    return @"DBTEAMLOGEventTypeFileAddComment";
  case DBTEAMLOGEventTypeFileChangeCommentSubscription:
    return @"DBTEAMLOGEventTypeFileChangeCommentSubscription";
  case DBTEAMLOGEventTypeFileDeleteComment:
    return @"DBTEAMLOGEventTypeFileDeleteComment";
  case DBTEAMLOGEventTypeFileLikeComment:
    return @"DBTEAMLOGEventTypeFileLikeComment";
  case DBTEAMLOGEventTypeFileResolveComment:
    return @"DBTEAMLOGEventTypeFileResolveComment";
  case DBTEAMLOGEventTypeFileUnlikeComment:
    return @"DBTEAMLOGEventTypeFileUnlikeComment";
  case DBTEAMLOGEventTypeFileUnresolveComment:
    return @"DBTEAMLOGEventTypeFileUnresolveComment";
  case DBTEAMLOGEventTypeDeviceChangeIpDesktop:
    return @"DBTEAMLOGEventTypeDeviceChangeIpDesktop";
  case DBTEAMLOGEventTypeDeviceChangeIpMobile:
    return @"DBTEAMLOGEventTypeDeviceChangeIpMobile";
  case DBTEAMLOGEventTypeDeviceChangeIpWeb:
    return @"DBTEAMLOGEventTypeDeviceChangeIpWeb";
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail:
    return @"DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail";
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess:
    return @"DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess";
  case DBTEAMLOGEventTypeDeviceLinkFail:
    return @"DBTEAMLOGEventTypeDeviceLinkFail";
  case DBTEAMLOGEventTypeDeviceLinkSuccess:
    return @"DBTEAMLOGEventTypeDeviceLinkSuccess";
  case DBTEAMLOGEventTypeDeviceManagementDisabled:
    return @"DBTEAMLOGEventTypeDeviceManagementDisabled";
  case DBTEAMLOGEventTypeDeviceManagementEnabled:
    return @"DBTEAMLOGEventTypeDeviceManagementEnabled";
  case DBTEAMLOGEventTypeDeviceUnlink:
    return @"DBTEAMLOGEventTypeDeviceUnlink";
  case DBTEAMLOGEventTypeEmmRefreshAuthToken:
    return @"DBTEAMLOGEventTypeEmmRefreshAuthToken";
  case DBTEAMLOGEventTypeAccountCaptureChangeAvailability:
    return @"DBTEAMLOGEventTypeAccountCaptureChangeAvailability";
  case DBTEAMLOGEventTypeAccountCaptureMigrateAccount:
    return @"DBTEAMLOGEventTypeAccountCaptureMigrateAccount";
  case DBTEAMLOGEventTypeAccountCaptureNotificationEmailsSent:
    return @"DBTEAMLOGEventTypeAccountCaptureNotificationEmailsSent";
  case DBTEAMLOGEventTypeAccountCaptureRelinquishAccount:
    return @"DBTEAMLOGEventTypeAccountCaptureRelinquishAccount";
  case DBTEAMLOGEventTypeDisabledDomainInvites:
    return @"DBTEAMLOGEventTypeDisabledDomainInvites";
  case DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam:
    return @"DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam";
  case DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam:
    return @"DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam";
  case DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers:
    return @"DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers";
  case DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam:
    return @"DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam";
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo:
    return @"DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo";
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes:
    return @"DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes";
  case DBTEAMLOGEventTypeDomainVerificationAddDomainFail:
    return @"DBTEAMLOGEventTypeDomainVerificationAddDomainFail";
  case DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess:
    return @"DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess";
  case DBTEAMLOGEventTypeDomainVerificationRemoveDomain:
    return @"DBTEAMLOGEventTypeDomainVerificationRemoveDomain";
  case DBTEAMLOGEventTypeEnabledDomainInvites:
    return @"DBTEAMLOGEventTypeEnabledDomainInvites";
  case DBTEAMLOGEventTypeCreateFolder:
    return @"DBTEAMLOGEventTypeCreateFolder";
  case DBTEAMLOGEventTypeFileAdd:
    return @"DBTEAMLOGEventTypeFileAdd";
  case DBTEAMLOGEventTypeFileCopy:
    return @"DBTEAMLOGEventTypeFileCopy";
  case DBTEAMLOGEventTypeFileDelete:
    return @"DBTEAMLOGEventTypeFileDelete";
  case DBTEAMLOGEventTypeFileDownload:
    return @"DBTEAMLOGEventTypeFileDownload";
  case DBTEAMLOGEventTypeFileEdit:
    return @"DBTEAMLOGEventTypeFileEdit";
  case DBTEAMLOGEventTypeFileGetCopyReference:
    return @"DBTEAMLOGEventTypeFileGetCopyReference";
  case DBTEAMLOGEventTypeFileMove:
    return @"DBTEAMLOGEventTypeFileMove";
  case DBTEAMLOGEventTypeFilePermanentlyDelete:
    return @"DBTEAMLOGEventTypeFilePermanentlyDelete";
  case DBTEAMLOGEventTypeFilePreview:
    return @"DBTEAMLOGEventTypeFilePreview";
  case DBTEAMLOGEventTypeFileRename:
    return @"DBTEAMLOGEventTypeFileRename";
  case DBTEAMLOGEventTypeFileRestore:
    return @"DBTEAMLOGEventTypeFileRestore";
  case DBTEAMLOGEventTypeFileRevert:
    return @"DBTEAMLOGEventTypeFileRevert";
  case DBTEAMLOGEventTypeFileRollbackChanges:
    return @"DBTEAMLOGEventTypeFileRollbackChanges";
  case DBTEAMLOGEventTypeFileSaveCopyReference:
    return @"DBTEAMLOGEventTypeFileSaveCopyReference";
  case DBTEAMLOGEventTypeFileRequestChange:
    return @"DBTEAMLOGEventTypeFileRequestChange";
  case DBTEAMLOGEventTypeFileRequestClose:
    return @"DBTEAMLOGEventTypeFileRequestClose";
  case DBTEAMLOGEventTypeFileRequestCreate:
    return @"DBTEAMLOGEventTypeFileRequestCreate";
  case DBTEAMLOGEventTypeFileRequestReceiveFile:
    return @"DBTEAMLOGEventTypeFileRequestReceiveFile";
  case DBTEAMLOGEventTypeGroupAddExternalId:
    return @"DBTEAMLOGEventTypeGroupAddExternalId";
  case DBTEAMLOGEventTypeGroupAddMember:
    return @"DBTEAMLOGEventTypeGroupAddMember";
  case DBTEAMLOGEventTypeGroupChangeExternalId:
    return @"DBTEAMLOGEventTypeGroupChangeExternalId";
  case DBTEAMLOGEventTypeGroupChangeManagementType:
    return @"DBTEAMLOGEventTypeGroupChangeManagementType";
  case DBTEAMLOGEventTypeGroupChangeMemberRole:
    return @"DBTEAMLOGEventTypeGroupChangeMemberRole";
  case DBTEAMLOGEventTypeGroupCreate:
    return @"DBTEAMLOGEventTypeGroupCreate";
  case DBTEAMLOGEventTypeGroupDelete:
    return @"DBTEAMLOGEventTypeGroupDelete";
  case DBTEAMLOGEventTypeGroupDescriptionUpdated:
    return @"DBTEAMLOGEventTypeGroupDescriptionUpdated";
  case DBTEAMLOGEventTypeGroupJoinPolicyUpdated:
    return @"DBTEAMLOGEventTypeGroupJoinPolicyUpdated";
  case DBTEAMLOGEventTypeGroupMoved:
    return @"DBTEAMLOGEventTypeGroupMoved";
  case DBTEAMLOGEventTypeGroupRemoveExternalId:
    return @"DBTEAMLOGEventTypeGroupRemoveExternalId";
  case DBTEAMLOGEventTypeGroupRemoveMember:
    return @"DBTEAMLOGEventTypeGroupRemoveMember";
  case DBTEAMLOGEventTypeGroupRename:
    return @"DBTEAMLOGEventTypeGroupRename";
  case DBTEAMLOGEventTypeEmmError:
    return @"DBTEAMLOGEventTypeEmmError";
  case DBTEAMLOGEventTypeLoginFail:
    return @"DBTEAMLOGEventTypeLoginFail";
  case DBTEAMLOGEventTypeLoginSuccess:
    return @"DBTEAMLOGEventTypeLoginSuccess";
  case DBTEAMLOGEventTypeLogout:
    return @"DBTEAMLOGEventTypeLogout";
  case DBTEAMLOGEventTypeResellerSupportSessionEnd:
    return @"DBTEAMLOGEventTypeResellerSupportSessionEnd";
  case DBTEAMLOGEventTypeResellerSupportSessionStart:
    return @"DBTEAMLOGEventTypeResellerSupportSessionStart";
  case DBTEAMLOGEventTypeSignInAsSessionEnd:
    return @"DBTEAMLOGEventTypeSignInAsSessionEnd";
  case DBTEAMLOGEventTypeSignInAsSessionStart:
    return @"DBTEAMLOGEventTypeSignInAsSessionStart";
  case DBTEAMLOGEventTypeSsoError:
    return @"DBTEAMLOGEventTypeSsoError";
  case DBTEAMLOGEventTypeMemberAddName:
    return @"DBTEAMLOGEventTypeMemberAddName";
  case DBTEAMLOGEventTypeMemberChangeAdminRole:
    return @"DBTEAMLOGEventTypeMemberChangeAdminRole";
  case DBTEAMLOGEventTypeMemberChangeEmail:
    return @"DBTEAMLOGEventTypeMemberChangeEmail";
  case DBTEAMLOGEventTypeMemberChangeMembershipType:
    return @"DBTEAMLOGEventTypeMemberChangeMembershipType";
  case DBTEAMLOGEventTypeMemberChangeName:
    return @"DBTEAMLOGEventTypeMemberChangeName";
  case DBTEAMLOGEventTypeMemberChangeStatus:
    return @"DBTEAMLOGEventTypeMemberChangeStatus";
  case DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents:
    return @"DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents";
  case DBTEAMLOGEventTypeMemberSpaceLimitsAddCustomQuota:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsAddCustomQuota";
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeCustomQuota:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsChangeCustomQuota";
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus";
  case DBTEAMLOGEventTypeMemberSpaceLimitsRemoveCustomQuota:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsRemoveCustomQuota";
  case DBTEAMLOGEventTypeMemberSuggest:
    return @"DBTEAMLOGEventTypeMemberSuggest";
  case DBTEAMLOGEventTypeMemberTransferAccountContents:
    return @"DBTEAMLOGEventTypeMemberTransferAccountContents";
  case DBTEAMLOGEventTypeSecondaryMailsPolicyChanged:
    return @"DBTEAMLOGEventTypeSecondaryMailsPolicyChanged";
  case DBTEAMLOGEventTypePaperContentAddMember:
    return @"DBTEAMLOGEventTypePaperContentAddMember";
  case DBTEAMLOGEventTypePaperContentAddToFolder:
    return @"DBTEAMLOGEventTypePaperContentAddToFolder";
  case DBTEAMLOGEventTypePaperContentArchive:
    return @"DBTEAMLOGEventTypePaperContentArchive";
  case DBTEAMLOGEventTypePaperContentCreate:
    return @"DBTEAMLOGEventTypePaperContentCreate";
  case DBTEAMLOGEventTypePaperContentPermanentlyDelete:
    return @"DBTEAMLOGEventTypePaperContentPermanentlyDelete";
  case DBTEAMLOGEventTypePaperContentRemoveFromFolder:
    return @"DBTEAMLOGEventTypePaperContentRemoveFromFolder";
  case DBTEAMLOGEventTypePaperContentRemoveMember:
    return @"DBTEAMLOGEventTypePaperContentRemoveMember";
  case DBTEAMLOGEventTypePaperContentRename:
    return @"DBTEAMLOGEventTypePaperContentRename";
  case DBTEAMLOGEventTypePaperContentRestore:
    return @"DBTEAMLOGEventTypePaperContentRestore";
  case DBTEAMLOGEventTypePaperDocAddComment:
    return @"DBTEAMLOGEventTypePaperDocAddComment";
  case DBTEAMLOGEventTypePaperDocChangeMemberRole:
    return @"DBTEAMLOGEventTypePaperDocChangeMemberRole";
  case DBTEAMLOGEventTypePaperDocChangeSharingPolicy:
    return @"DBTEAMLOGEventTypePaperDocChangeSharingPolicy";
  case DBTEAMLOGEventTypePaperDocChangeSubscription:
    return @"DBTEAMLOGEventTypePaperDocChangeSubscription";
  case DBTEAMLOGEventTypePaperDocDeleted:
    return @"DBTEAMLOGEventTypePaperDocDeleted";
  case DBTEAMLOGEventTypePaperDocDeleteComment:
    return @"DBTEAMLOGEventTypePaperDocDeleteComment";
  case DBTEAMLOGEventTypePaperDocDownload:
    return @"DBTEAMLOGEventTypePaperDocDownload";
  case DBTEAMLOGEventTypePaperDocEdit:
    return @"DBTEAMLOGEventTypePaperDocEdit";
  case DBTEAMLOGEventTypePaperDocEditComment:
    return @"DBTEAMLOGEventTypePaperDocEditComment";
  case DBTEAMLOGEventTypePaperDocFollowed:
    return @"DBTEAMLOGEventTypePaperDocFollowed";
  case DBTEAMLOGEventTypePaperDocMention:
    return @"DBTEAMLOGEventTypePaperDocMention";
  case DBTEAMLOGEventTypePaperDocRequestAccess:
    return @"DBTEAMLOGEventTypePaperDocRequestAccess";
  case DBTEAMLOGEventTypePaperDocResolveComment:
    return @"DBTEAMLOGEventTypePaperDocResolveComment";
  case DBTEAMLOGEventTypePaperDocRevert:
    return @"DBTEAMLOGEventTypePaperDocRevert";
  case DBTEAMLOGEventTypePaperDocSlackShare:
    return @"DBTEAMLOGEventTypePaperDocSlackShare";
  case DBTEAMLOGEventTypePaperDocTeamInvite:
    return @"DBTEAMLOGEventTypePaperDocTeamInvite";
  case DBTEAMLOGEventTypePaperDocTrashed:
    return @"DBTEAMLOGEventTypePaperDocTrashed";
  case DBTEAMLOGEventTypePaperDocUnresolveComment:
    return @"DBTEAMLOGEventTypePaperDocUnresolveComment";
  case DBTEAMLOGEventTypePaperDocUntrashed:
    return @"DBTEAMLOGEventTypePaperDocUntrashed";
  case DBTEAMLOGEventTypePaperDocView:
    return @"DBTEAMLOGEventTypePaperDocView";
  case DBTEAMLOGEventTypePaperExternalViewAllow:
    return @"DBTEAMLOGEventTypePaperExternalViewAllow";
  case DBTEAMLOGEventTypePaperExternalViewDefaultTeam:
    return @"DBTEAMLOGEventTypePaperExternalViewDefaultTeam";
  case DBTEAMLOGEventTypePaperExternalViewForbid:
    return @"DBTEAMLOGEventTypePaperExternalViewForbid";
  case DBTEAMLOGEventTypePaperFolderChangeSubscription:
    return @"DBTEAMLOGEventTypePaperFolderChangeSubscription";
  case DBTEAMLOGEventTypePaperFolderDeleted:
    return @"DBTEAMLOGEventTypePaperFolderDeleted";
  case DBTEAMLOGEventTypePaperFolderFollowed:
    return @"DBTEAMLOGEventTypePaperFolderFollowed";
  case DBTEAMLOGEventTypePaperFolderTeamInvite:
    return @"DBTEAMLOGEventTypePaperFolderTeamInvite";
  case DBTEAMLOGEventTypePasswordChange:
    return @"DBTEAMLOGEventTypePasswordChange";
  case DBTEAMLOGEventTypePasswordReset:
    return @"DBTEAMLOGEventTypePasswordReset";
  case DBTEAMLOGEventTypePasswordResetAll:
    return @"DBTEAMLOGEventTypePasswordResetAll";
  case DBTEAMLOGEventTypeEmmCreateExceptionsReport:
    return @"DBTEAMLOGEventTypeEmmCreateExceptionsReport";
  case DBTEAMLOGEventTypeEmmCreateUsageReport:
    return @"DBTEAMLOGEventTypeEmmCreateUsageReport";
  case DBTEAMLOGEventTypeExportMembersReport:
    return @"DBTEAMLOGEventTypeExportMembersReport";
  case DBTEAMLOGEventTypePaperAdminExportStart:
    return @"DBTEAMLOGEventTypePaperAdminExportStart";
  case DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport:
    return @"DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport";
  case DBTEAMLOGEventTypeTeamActivityCreateReport:
    return @"DBTEAMLOGEventTypeTeamActivityCreateReport";
  case DBTEAMLOGEventTypeCollectionShare:
    return @"DBTEAMLOGEventTypeCollectionShare";
  case DBTEAMLOGEventTypeNoteAclInviteOnly:
    return @"DBTEAMLOGEventTypeNoteAclInviteOnly";
  case DBTEAMLOGEventTypeNoteAclLink:
    return @"DBTEAMLOGEventTypeNoteAclLink";
  case DBTEAMLOGEventTypeNoteAclTeamLink:
    return @"DBTEAMLOGEventTypeNoteAclTeamLink";
  case DBTEAMLOGEventTypeNoteShared:
    return @"DBTEAMLOGEventTypeNoteShared";
  case DBTEAMLOGEventTypeNoteShareReceive:
    return @"DBTEAMLOGEventTypeNoteShareReceive";
  case DBTEAMLOGEventTypeOpenNoteShared:
    return @"DBTEAMLOGEventTypeOpenNoteShared";
  case DBTEAMLOGEventTypeSfAddGroup:
    return @"DBTEAMLOGEventTypeSfAddGroup";
  case DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks:
    return @"DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks";
  case DBTEAMLOGEventTypeSfExternalInviteWarn:
    return @"DBTEAMLOGEventTypeSfExternalInviteWarn";
  case DBTEAMLOGEventTypeSfFbInvite:
    return @"DBTEAMLOGEventTypeSfFbInvite";
  case DBTEAMLOGEventTypeSfFbInviteChangeRole:
    return @"DBTEAMLOGEventTypeSfFbInviteChangeRole";
  case DBTEAMLOGEventTypeSfFbUninvite:
    return @"DBTEAMLOGEventTypeSfFbUninvite";
  case DBTEAMLOGEventTypeSfInviteGroup:
    return @"DBTEAMLOGEventTypeSfInviteGroup";
  case DBTEAMLOGEventTypeSfTeamGrantAccess:
    return @"DBTEAMLOGEventTypeSfTeamGrantAccess";
  case DBTEAMLOGEventTypeSfTeamInvite:
    return @"DBTEAMLOGEventTypeSfTeamInvite";
  case DBTEAMLOGEventTypeSfTeamInviteChangeRole:
    return @"DBTEAMLOGEventTypeSfTeamInviteChangeRole";
  case DBTEAMLOGEventTypeSfTeamJoin:
    return @"DBTEAMLOGEventTypeSfTeamJoin";
  case DBTEAMLOGEventTypeSfTeamJoinFromOobLink:
    return @"DBTEAMLOGEventTypeSfTeamJoinFromOobLink";
  case DBTEAMLOGEventTypeSfTeamUninvite:
    return @"DBTEAMLOGEventTypeSfTeamUninvite";
  case DBTEAMLOGEventTypeSharedContentAddInvitees:
    return @"DBTEAMLOGEventTypeSharedContentAddInvitees";
  case DBTEAMLOGEventTypeSharedContentAddLinkExpiry:
    return @"DBTEAMLOGEventTypeSharedContentAddLinkExpiry";
  case DBTEAMLOGEventTypeSharedContentAddLinkPassword:
    return @"DBTEAMLOGEventTypeSharedContentAddLinkPassword";
  case DBTEAMLOGEventTypeSharedContentAddMember:
    return @"DBTEAMLOGEventTypeSharedContentAddMember";
  case DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy:
    return @"DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy";
  case DBTEAMLOGEventTypeSharedContentChangeInviteeRole:
    return @"DBTEAMLOGEventTypeSharedContentChangeInviteeRole";
  case DBTEAMLOGEventTypeSharedContentChangeLinkAudience:
    return @"DBTEAMLOGEventTypeSharedContentChangeLinkAudience";
  case DBTEAMLOGEventTypeSharedContentChangeLinkExpiry:
    return @"DBTEAMLOGEventTypeSharedContentChangeLinkExpiry";
  case DBTEAMLOGEventTypeSharedContentChangeLinkPassword:
    return @"DBTEAMLOGEventTypeSharedContentChangeLinkPassword";
  case DBTEAMLOGEventTypeSharedContentChangeMemberRole:
    return @"DBTEAMLOGEventTypeSharedContentChangeMemberRole";
  case DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy:
    return @"DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy";
  case DBTEAMLOGEventTypeSharedContentClaimInvitation:
    return @"DBTEAMLOGEventTypeSharedContentClaimInvitation";
  case DBTEAMLOGEventTypeSharedContentCopy:
    return @"DBTEAMLOGEventTypeSharedContentCopy";
  case DBTEAMLOGEventTypeSharedContentDownload:
    return @"DBTEAMLOGEventTypeSharedContentDownload";
  case DBTEAMLOGEventTypeSharedContentRelinquishMembership:
    return @"DBTEAMLOGEventTypeSharedContentRelinquishMembership";
  case DBTEAMLOGEventTypeSharedContentRemoveInvitees:
    return @"DBTEAMLOGEventTypeSharedContentRemoveInvitees";
  case DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry:
    return @"DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry";
  case DBTEAMLOGEventTypeSharedContentRemoveLinkPassword:
    return @"DBTEAMLOGEventTypeSharedContentRemoveLinkPassword";
  case DBTEAMLOGEventTypeSharedContentRemoveMember:
    return @"DBTEAMLOGEventTypeSharedContentRemoveMember";
  case DBTEAMLOGEventTypeSharedContentRequestAccess:
    return @"DBTEAMLOGEventTypeSharedContentRequestAccess";
  case DBTEAMLOGEventTypeSharedContentUnshare:
    return @"DBTEAMLOGEventTypeSharedContentUnshare";
  case DBTEAMLOGEventTypeSharedContentView:
    return @"DBTEAMLOGEventTypeSharedContentView";
  case DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy:
    return @"DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy";
  case DBTEAMLOGEventTypeSharedFolderChangeMembersInheritancePolicy:
    return @"DBTEAMLOGEventTypeSharedFolderChangeMembersInheritancePolicy";
  case DBTEAMLOGEventTypeSharedFolderChangeMembersManagementPolicy:
    return @"DBTEAMLOGEventTypeSharedFolderChangeMembersManagementPolicy";
  case DBTEAMLOGEventTypeSharedFolderChangeMembersPolicy:
    return @"DBTEAMLOGEventTypeSharedFolderChangeMembersPolicy";
  case DBTEAMLOGEventTypeSharedFolderCreate:
    return @"DBTEAMLOGEventTypeSharedFolderCreate";
  case DBTEAMLOGEventTypeSharedFolderDeclineInvitation:
    return @"DBTEAMLOGEventTypeSharedFolderDeclineInvitation";
  case DBTEAMLOGEventTypeSharedFolderMount:
    return @"DBTEAMLOGEventTypeSharedFolderMount";
  case DBTEAMLOGEventTypeSharedFolderNest:
    return @"DBTEAMLOGEventTypeSharedFolderNest";
  case DBTEAMLOGEventTypeSharedFolderTransferOwnership:
    return @"DBTEAMLOGEventTypeSharedFolderTransferOwnership";
  case DBTEAMLOGEventTypeSharedFolderUnmount:
    return @"DBTEAMLOGEventTypeSharedFolderUnmount";
  case DBTEAMLOGEventTypeSharedLinkAddExpiry:
    return @"DBTEAMLOGEventTypeSharedLinkAddExpiry";
  case DBTEAMLOGEventTypeSharedLinkChangeExpiry:
    return @"DBTEAMLOGEventTypeSharedLinkChangeExpiry";
  case DBTEAMLOGEventTypeSharedLinkChangeVisibility:
    return @"DBTEAMLOGEventTypeSharedLinkChangeVisibility";
  case DBTEAMLOGEventTypeSharedLinkCopy:
    return @"DBTEAMLOGEventTypeSharedLinkCopy";
  case DBTEAMLOGEventTypeSharedLinkCreate:
    return @"DBTEAMLOGEventTypeSharedLinkCreate";
  case DBTEAMLOGEventTypeSharedLinkDisable:
    return @"DBTEAMLOGEventTypeSharedLinkDisable";
  case DBTEAMLOGEventTypeSharedLinkDownload:
    return @"DBTEAMLOGEventTypeSharedLinkDownload";
  case DBTEAMLOGEventTypeSharedLinkRemoveExpiry:
    return @"DBTEAMLOGEventTypeSharedLinkRemoveExpiry";
  case DBTEAMLOGEventTypeSharedLinkShare:
    return @"DBTEAMLOGEventTypeSharedLinkShare";
  case DBTEAMLOGEventTypeSharedLinkView:
    return @"DBTEAMLOGEventTypeSharedLinkView";
  case DBTEAMLOGEventTypeSharedNoteOpened:
    return @"DBTEAMLOGEventTypeSharedNoteOpened";
  case DBTEAMLOGEventTypeShmodelGroupShare:
    return @"DBTEAMLOGEventTypeShmodelGroupShare";
  case DBTEAMLOGEventTypeShowcaseAccessGranted:
    return @"DBTEAMLOGEventTypeShowcaseAccessGranted";
  case DBTEAMLOGEventTypeShowcaseAddMember:
    return @"DBTEAMLOGEventTypeShowcaseAddMember";
  case DBTEAMLOGEventTypeShowcaseArchived:
    return @"DBTEAMLOGEventTypeShowcaseArchived";
  case DBTEAMLOGEventTypeShowcaseCreated:
    return @"DBTEAMLOGEventTypeShowcaseCreated";
  case DBTEAMLOGEventTypeShowcaseDeleteComment:
    return @"DBTEAMLOGEventTypeShowcaseDeleteComment";
  case DBTEAMLOGEventTypeShowcaseEdited:
    return @"DBTEAMLOGEventTypeShowcaseEdited";
  case DBTEAMLOGEventTypeShowcaseEditComment:
    return @"DBTEAMLOGEventTypeShowcaseEditComment";
  case DBTEAMLOGEventTypeShowcaseFileAdded:
    return @"DBTEAMLOGEventTypeShowcaseFileAdded";
  case DBTEAMLOGEventTypeShowcaseFileDownload:
    return @"DBTEAMLOGEventTypeShowcaseFileDownload";
  case DBTEAMLOGEventTypeShowcaseFileRemoved:
    return @"DBTEAMLOGEventTypeShowcaseFileRemoved";
  case DBTEAMLOGEventTypeShowcaseFileView:
    return @"DBTEAMLOGEventTypeShowcaseFileView";
  case DBTEAMLOGEventTypeShowcasePermanentlyDeleted:
    return @"DBTEAMLOGEventTypeShowcasePermanentlyDeleted";
  case DBTEAMLOGEventTypeShowcasePostComment:
    return @"DBTEAMLOGEventTypeShowcasePostComment";
  case DBTEAMLOGEventTypeShowcaseRemoveMember:
    return @"DBTEAMLOGEventTypeShowcaseRemoveMember";
  case DBTEAMLOGEventTypeShowcaseRenamed:
    return @"DBTEAMLOGEventTypeShowcaseRenamed";
  case DBTEAMLOGEventTypeShowcaseRequestAccess:
    return @"DBTEAMLOGEventTypeShowcaseRequestAccess";
  case DBTEAMLOGEventTypeShowcaseResolveComment:
    return @"DBTEAMLOGEventTypeShowcaseResolveComment";
  case DBTEAMLOGEventTypeShowcaseRestored:
    return @"DBTEAMLOGEventTypeShowcaseRestored";
  case DBTEAMLOGEventTypeShowcaseTrashed:
    return @"DBTEAMLOGEventTypeShowcaseTrashed";
  case DBTEAMLOGEventTypeShowcaseTrashedDeprecated:
    return @"DBTEAMLOGEventTypeShowcaseTrashedDeprecated";
  case DBTEAMLOGEventTypeShowcaseUnresolveComment:
    return @"DBTEAMLOGEventTypeShowcaseUnresolveComment";
  case DBTEAMLOGEventTypeShowcaseUntrashed:
    return @"DBTEAMLOGEventTypeShowcaseUntrashed";
  case DBTEAMLOGEventTypeShowcaseUntrashedDeprecated:
    return @"DBTEAMLOGEventTypeShowcaseUntrashedDeprecated";
  case DBTEAMLOGEventTypeShowcaseView:
    return @"DBTEAMLOGEventTypeShowcaseView";
  case DBTEAMLOGEventTypeSsoAddCert:
    return @"DBTEAMLOGEventTypeSsoAddCert";
  case DBTEAMLOGEventTypeSsoAddLoginUrl:
    return @"DBTEAMLOGEventTypeSsoAddLoginUrl";
  case DBTEAMLOGEventTypeSsoAddLogoutUrl:
    return @"DBTEAMLOGEventTypeSsoAddLogoutUrl";
  case DBTEAMLOGEventTypeSsoChangeCert:
    return @"DBTEAMLOGEventTypeSsoChangeCert";
  case DBTEAMLOGEventTypeSsoChangeLoginUrl:
    return @"DBTEAMLOGEventTypeSsoChangeLoginUrl";
  case DBTEAMLOGEventTypeSsoChangeLogoutUrl:
    return @"DBTEAMLOGEventTypeSsoChangeLogoutUrl";
  case DBTEAMLOGEventTypeSsoChangeSamlIdentityMode:
    return @"DBTEAMLOGEventTypeSsoChangeSamlIdentityMode";
  case DBTEAMLOGEventTypeSsoRemoveCert:
    return @"DBTEAMLOGEventTypeSsoRemoveCert";
  case DBTEAMLOGEventTypeSsoRemoveLoginUrl:
    return @"DBTEAMLOGEventTypeSsoRemoveLoginUrl";
  case DBTEAMLOGEventTypeSsoRemoveLogoutUrl:
    return @"DBTEAMLOGEventTypeSsoRemoveLogoutUrl";
  case DBTEAMLOGEventTypeTeamFolderChangeStatus:
    return @"DBTEAMLOGEventTypeTeamFolderChangeStatus";
  case DBTEAMLOGEventTypeTeamFolderCreate:
    return @"DBTEAMLOGEventTypeTeamFolderCreate";
  case DBTEAMLOGEventTypeTeamFolderDowngrade:
    return @"DBTEAMLOGEventTypeTeamFolderDowngrade";
  case DBTEAMLOGEventTypeTeamFolderPermanentlyDelete:
    return @"DBTEAMLOGEventTypeTeamFolderPermanentlyDelete";
  case DBTEAMLOGEventTypeTeamFolderRename:
    return @"DBTEAMLOGEventTypeTeamFolderRename";
  case DBTEAMLOGEventTypeTeamSelectiveSyncSettingsChanged:
    return @"DBTEAMLOGEventTypeTeamSelectiveSyncSettingsChanged";
  case DBTEAMLOGEventTypeAccountCaptureChangePolicy:
    return @"DBTEAMLOGEventTypeAccountCaptureChangePolicy";
  case DBTEAMLOGEventTypeAllowDownloadDisabled:
    return @"DBTEAMLOGEventTypeAllowDownloadDisabled";
  case DBTEAMLOGEventTypeAllowDownloadEnabled:
    return @"DBTEAMLOGEventTypeAllowDownloadEnabled";
  case DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy:
    return @"DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy";
  case DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy:
    return @"DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy";
  case DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy:
    return @"DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy";
  case DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy:
    return @"DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy";
  case DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction:
    return @"DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction";
  case DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction:
    return @"DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction";
  case DBTEAMLOGEventTypeDirectoryRestrictionsAddMembers:
    return @"DBTEAMLOGEventTypeDirectoryRestrictionsAddMembers";
  case DBTEAMLOGEventTypeDirectoryRestrictionsRemoveMembers:
    return @"DBTEAMLOGEventTypeDirectoryRestrictionsRemoveMembers";
  case DBTEAMLOGEventTypeEmmAddException:
    return @"DBTEAMLOGEventTypeEmmAddException";
  case DBTEAMLOGEventTypeEmmChangePolicy:
    return @"DBTEAMLOGEventTypeEmmChangePolicy";
  case DBTEAMLOGEventTypeEmmRemoveException:
    return @"DBTEAMLOGEventTypeEmmRemoveException";
  case DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy:
    return @"DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy";
  case DBTEAMLOGEventTypeFileCommentsChangePolicy:
    return @"DBTEAMLOGEventTypeFileCommentsChangePolicy";
  case DBTEAMLOGEventTypeFileRequestsChangePolicy:
    return @"DBTEAMLOGEventTypeFileRequestsChangePolicy";
  case DBTEAMLOGEventTypeFileRequestsEmailsEnabled:
    return @"DBTEAMLOGEventTypeFileRequestsEmailsEnabled";
  case DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly:
    return @"DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly";
  case DBTEAMLOGEventTypeGoogleSsoChangePolicy:
    return @"DBTEAMLOGEventTypeGoogleSsoChangePolicy";
  case DBTEAMLOGEventTypeGroupUserManagementChangePolicy:
    return @"DBTEAMLOGEventTypeGroupUserManagementChangePolicy";
  case DBTEAMLOGEventTypeMemberRequestsChangePolicy:
    return @"DBTEAMLOGEventTypeMemberRequestsChangePolicy";
  case DBTEAMLOGEventTypeMemberSpaceLimitsAddException:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsAddException";
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeCapsTypePolicy:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsChangeCapsTypePolicy";
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy";
  case DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException";
  case DBTEAMLOGEventTypeMemberSuggestionsChangePolicy:
    return @"DBTEAMLOGEventTypeMemberSuggestionsChangePolicy";
  case DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy:
    return @"DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy";
  case DBTEAMLOGEventTypeNetworkControlChangePolicy:
    return @"DBTEAMLOGEventTypeNetworkControlChangePolicy";
  case DBTEAMLOGEventTypePaperChangeDeploymentPolicy:
    return @"DBTEAMLOGEventTypePaperChangeDeploymentPolicy";
  case DBTEAMLOGEventTypePaperChangeMemberLinkPolicy:
    return @"DBTEAMLOGEventTypePaperChangeMemberLinkPolicy";
  case DBTEAMLOGEventTypePaperChangeMemberPolicy:
    return @"DBTEAMLOGEventTypePaperChangeMemberPolicy";
  case DBTEAMLOGEventTypePaperChangePolicy:
    return @"DBTEAMLOGEventTypePaperChangePolicy";
  case DBTEAMLOGEventTypePaperEnabledUsersGroupAddition:
    return @"DBTEAMLOGEventTypePaperEnabledUsersGroupAddition";
  case DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval:
    return @"DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval";
  case DBTEAMLOGEventTypePermanentDeleteChangePolicy:
    return @"DBTEAMLOGEventTypePermanentDeleteChangePolicy";
  case DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy:
    return @"DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy";
  case DBTEAMLOGEventTypeSharingChangeLinkPolicy:
    return @"DBTEAMLOGEventTypeSharingChangeLinkPolicy";
  case DBTEAMLOGEventTypeSharingChangeMemberPolicy:
    return @"DBTEAMLOGEventTypeSharingChangeMemberPolicy";
  case DBTEAMLOGEventTypeShowcaseChangeDownloadPolicy:
    return @"DBTEAMLOGEventTypeShowcaseChangeDownloadPolicy";
  case DBTEAMLOGEventTypeShowcaseChangeEnabledPolicy:
    return @"DBTEAMLOGEventTypeShowcaseChangeEnabledPolicy";
  case DBTEAMLOGEventTypeShowcaseChangeExternalSharingPolicy:
    return @"DBTEAMLOGEventTypeShowcaseChangeExternalSharingPolicy";
  case DBTEAMLOGEventTypeSmartSyncChangePolicy:
    return @"DBTEAMLOGEventTypeSmartSyncChangePolicy";
  case DBTEAMLOGEventTypeSmartSyncNotOptOut:
    return @"DBTEAMLOGEventTypeSmartSyncNotOptOut";
  case DBTEAMLOGEventTypeSmartSyncOptOut:
    return @"DBTEAMLOGEventTypeSmartSyncOptOut";
  case DBTEAMLOGEventTypeSsoChangePolicy:
    return @"DBTEAMLOGEventTypeSsoChangePolicy";
  case DBTEAMLOGEventTypeTfaChangePolicy:
    return @"DBTEAMLOGEventTypeTfaChangePolicy";
  case DBTEAMLOGEventTypeTwoAccountChangePolicy:
    return @"DBTEAMLOGEventTypeTwoAccountChangePolicy";
  case DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy:
    return @"DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy";
  case DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy:
    return @"DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy";
  case DBTEAMLOGEventTypeTeamMergeFrom:
    return @"DBTEAMLOGEventTypeTeamMergeFrom";
  case DBTEAMLOGEventTypeTeamMergeTo:
    return @"DBTEAMLOGEventTypeTeamMergeTo";
  case DBTEAMLOGEventTypeTeamProfileAddLogo:
    return @"DBTEAMLOGEventTypeTeamProfileAddLogo";
  case DBTEAMLOGEventTypeTeamProfileChangeDefaultLanguage:
    return @"DBTEAMLOGEventTypeTeamProfileChangeDefaultLanguage";
  case DBTEAMLOGEventTypeTeamProfileChangeLogo:
    return @"DBTEAMLOGEventTypeTeamProfileChangeLogo";
  case DBTEAMLOGEventTypeTeamProfileChangeName:
    return @"DBTEAMLOGEventTypeTeamProfileChangeName";
  case DBTEAMLOGEventTypeTeamProfileRemoveLogo:
    return @"DBTEAMLOGEventTypeTeamProfileRemoveLogo";
  case DBTEAMLOGEventTypeTfaAddBackupPhone:
    return @"DBTEAMLOGEventTypeTfaAddBackupPhone";
  case DBTEAMLOGEventTypeTfaAddSecurityKey:
    return @"DBTEAMLOGEventTypeTfaAddSecurityKey";
  case DBTEAMLOGEventTypeTfaChangeBackupPhone:
    return @"DBTEAMLOGEventTypeTfaChangeBackupPhone";
  case DBTEAMLOGEventTypeTfaChangeStatus:
    return @"DBTEAMLOGEventTypeTfaChangeStatus";
  case DBTEAMLOGEventTypeTfaRemoveBackupPhone:
    return @"DBTEAMLOGEventTypeTfaRemoveBackupPhone";
  case DBTEAMLOGEventTypeTfaRemoveSecurityKey:
    return @"DBTEAMLOGEventTypeTfaRemoveSecurityKey";
  case DBTEAMLOGEventTypeTfaReset:
    return @"DBTEAMLOGEventTypeTfaReset";
  case DBTEAMLOGEventTypeOther:
    return @"DBTEAMLOGEventTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEventTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEventTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEventTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEventTypeAppLinkTeam:
    result = prime * result + [self.appLinkTeam hash];
  case DBTEAMLOGEventTypeAppLinkUser:
    result = prime * result + [self.appLinkUser hash];
  case DBTEAMLOGEventTypeAppUnlinkTeam:
    result = prime * result + [self.appUnlinkTeam hash];
  case DBTEAMLOGEventTypeAppUnlinkUser:
    result = prime * result + [self.appUnlinkUser hash];
  case DBTEAMLOGEventTypeFileAddComment:
    result = prime * result + [self.fileAddComment hash];
  case DBTEAMLOGEventTypeFileChangeCommentSubscription:
    result = prime * result + [self.fileChangeCommentSubscription hash];
  case DBTEAMLOGEventTypeFileDeleteComment:
    result = prime * result + [self.fileDeleteComment hash];
  case DBTEAMLOGEventTypeFileLikeComment:
    result = prime * result + [self.fileLikeComment hash];
  case DBTEAMLOGEventTypeFileResolveComment:
    result = prime * result + [self.fileResolveComment hash];
  case DBTEAMLOGEventTypeFileUnlikeComment:
    result = prime * result + [self.fileUnlikeComment hash];
  case DBTEAMLOGEventTypeFileUnresolveComment:
    result = prime * result + [self.fileUnresolveComment hash];
  case DBTEAMLOGEventTypeDeviceChangeIpDesktop:
    result = prime * result + [self.deviceChangeIpDesktop hash];
  case DBTEAMLOGEventTypeDeviceChangeIpMobile:
    result = prime * result + [self.deviceChangeIpMobile hash];
  case DBTEAMLOGEventTypeDeviceChangeIpWeb:
    result = prime * result + [self.deviceChangeIpWeb hash];
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail:
    result = prime * result + [self.deviceDeleteOnUnlinkFail hash];
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess:
    result = prime * result + [self.deviceDeleteOnUnlinkSuccess hash];
  case DBTEAMLOGEventTypeDeviceLinkFail:
    result = prime * result + [self.deviceLinkFail hash];
  case DBTEAMLOGEventTypeDeviceLinkSuccess:
    result = prime * result + [self.deviceLinkSuccess hash];
  case DBTEAMLOGEventTypeDeviceManagementDisabled:
    result = prime * result + [self.deviceManagementDisabled hash];
  case DBTEAMLOGEventTypeDeviceManagementEnabled:
    result = prime * result + [self.deviceManagementEnabled hash];
  case DBTEAMLOGEventTypeDeviceUnlink:
    result = prime * result + [self.deviceUnlink hash];
  case DBTEAMLOGEventTypeEmmRefreshAuthToken:
    result = prime * result + [self.emmRefreshAuthToken hash];
  case DBTEAMLOGEventTypeAccountCaptureChangeAvailability:
    result = prime * result + [self.accountCaptureChangeAvailability hash];
  case DBTEAMLOGEventTypeAccountCaptureMigrateAccount:
    result = prime * result + [self.accountCaptureMigrateAccount hash];
  case DBTEAMLOGEventTypeAccountCaptureNotificationEmailsSent:
    result = prime * result + [self.accountCaptureNotificationEmailsSent hash];
  case DBTEAMLOGEventTypeAccountCaptureRelinquishAccount:
    result = prime * result + [self.accountCaptureRelinquishAccount hash];
  case DBTEAMLOGEventTypeDisabledDomainInvites:
    result = prime * result + [self.disabledDomainInvites hash];
  case DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam:
    result = prime * result + [self.domainInvitesApproveRequestToJoinTeam hash];
  case DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam:
    result = prime * result + [self.domainInvitesDeclineRequestToJoinTeam hash];
  case DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers:
    result = prime * result + [self.domainInvitesEmailExistingUsers hash];
  case DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam:
    result = prime * result + [self.domainInvitesRequestToJoinTeam hash];
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo:
    result = prime * result + [self.domainInvitesSetInviteNewUserPrefToNo hash];
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes:
    result = prime * result + [self.domainInvitesSetInviteNewUserPrefToYes hash];
  case DBTEAMLOGEventTypeDomainVerificationAddDomainFail:
    result = prime * result + [self.domainVerificationAddDomainFail hash];
  case DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess:
    result = prime * result + [self.domainVerificationAddDomainSuccess hash];
  case DBTEAMLOGEventTypeDomainVerificationRemoveDomain:
    result = prime * result + [self.domainVerificationRemoveDomain hash];
  case DBTEAMLOGEventTypeEnabledDomainInvites:
    result = prime * result + [self.enabledDomainInvites hash];
  case DBTEAMLOGEventTypeCreateFolder:
    result = prime * result + [self.createFolder hash];
  case DBTEAMLOGEventTypeFileAdd:
    result = prime * result + [self.fileAdd hash];
  case DBTEAMLOGEventTypeFileCopy:
    result = prime * result + [self.fileCopy hash];
  case DBTEAMLOGEventTypeFileDelete:
    result = prime * result + [self.fileDelete hash];
  case DBTEAMLOGEventTypeFileDownload:
    result = prime * result + [self.fileDownload hash];
  case DBTEAMLOGEventTypeFileEdit:
    result = prime * result + [self.fileEdit hash];
  case DBTEAMLOGEventTypeFileGetCopyReference:
    result = prime * result + [self.fileGetCopyReference hash];
  case DBTEAMLOGEventTypeFileMove:
    result = prime * result + [self.fileMove hash];
  case DBTEAMLOGEventTypeFilePermanentlyDelete:
    result = prime * result + [self.filePermanentlyDelete hash];
  case DBTEAMLOGEventTypeFilePreview:
    result = prime * result + [self.filePreview hash];
  case DBTEAMLOGEventTypeFileRename:
    result = prime * result + [self.fileRename hash];
  case DBTEAMLOGEventTypeFileRestore:
    result = prime * result + [self.fileRestore hash];
  case DBTEAMLOGEventTypeFileRevert:
    result = prime * result + [self.fileRevert hash];
  case DBTEAMLOGEventTypeFileRollbackChanges:
    result = prime * result + [self.fileRollbackChanges hash];
  case DBTEAMLOGEventTypeFileSaveCopyReference:
    result = prime * result + [self.fileSaveCopyReference hash];
  case DBTEAMLOGEventTypeFileRequestChange:
    result = prime * result + [self.fileRequestChange hash];
  case DBTEAMLOGEventTypeFileRequestClose:
    result = prime * result + [self.fileRequestClose hash];
  case DBTEAMLOGEventTypeFileRequestCreate:
    result = prime * result + [self.fileRequestCreate hash];
  case DBTEAMLOGEventTypeFileRequestReceiveFile:
    result = prime * result + [self.fileRequestReceiveFile hash];
  case DBTEAMLOGEventTypeGroupAddExternalId:
    result = prime * result + [self.groupAddExternalId hash];
  case DBTEAMLOGEventTypeGroupAddMember:
    result = prime * result + [self.groupAddMember hash];
  case DBTEAMLOGEventTypeGroupChangeExternalId:
    result = prime * result + [self.groupChangeExternalId hash];
  case DBTEAMLOGEventTypeGroupChangeManagementType:
    result = prime * result + [self.groupChangeManagementType hash];
  case DBTEAMLOGEventTypeGroupChangeMemberRole:
    result = prime * result + [self.groupChangeMemberRole hash];
  case DBTEAMLOGEventTypeGroupCreate:
    result = prime * result + [self.groupCreate hash];
  case DBTEAMLOGEventTypeGroupDelete:
    result = prime * result + [self.groupDelete hash];
  case DBTEAMLOGEventTypeGroupDescriptionUpdated:
    result = prime * result + [self.groupDescriptionUpdated hash];
  case DBTEAMLOGEventTypeGroupJoinPolicyUpdated:
    result = prime * result + [self.groupJoinPolicyUpdated hash];
  case DBTEAMLOGEventTypeGroupMoved:
    result = prime * result + [self.groupMoved hash];
  case DBTEAMLOGEventTypeGroupRemoveExternalId:
    result = prime * result + [self.groupRemoveExternalId hash];
  case DBTEAMLOGEventTypeGroupRemoveMember:
    result = prime * result + [self.groupRemoveMember hash];
  case DBTEAMLOGEventTypeGroupRename:
    result = prime * result + [self.groupRename hash];
  case DBTEAMLOGEventTypeEmmError:
    result = prime * result + [self.emmError hash];
  case DBTEAMLOGEventTypeLoginFail:
    result = prime * result + [self.loginFail hash];
  case DBTEAMLOGEventTypeLoginSuccess:
    result = prime * result + [self.loginSuccess hash];
  case DBTEAMLOGEventTypeLogout:
    result = prime * result + [self.logout hash];
  case DBTEAMLOGEventTypeResellerSupportSessionEnd:
    result = prime * result + [self.resellerSupportSessionEnd hash];
  case DBTEAMLOGEventTypeResellerSupportSessionStart:
    result = prime * result + [self.resellerSupportSessionStart hash];
  case DBTEAMLOGEventTypeSignInAsSessionEnd:
    result = prime * result + [self.signInAsSessionEnd hash];
  case DBTEAMLOGEventTypeSignInAsSessionStart:
    result = prime * result + [self.signInAsSessionStart hash];
  case DBTEAMLOGEventTypeSsoError:
    result = prime * result + [self.ssoError hash];
  case DBTEAMLOGEventTypeMemberAddName:
    result = prime * result + [self.memberAddName hash];
  case DBTEAMLOGEventTypeMemberChangeAdminRole:
    result = prime * result + [self.memberChangeAdminRole hash];
  case DBTEAMLOGEventTypeMemberChangeEmail:
    result = prime * result + [self.memberChangeEmail hash];
  case DBTEAMLOGEventTypeMemberChangeMembershipType:
    result = prime * result + [self.memberChangeMembershipType hash];
  case DBTEAMLOGEventTypeMemberChangeName:
    result = prime * result + [self.memberChangeName hash];
  case DBTEAMLOGEventTypeMemberChangeStatus:
    result = prime * result + [self.memberChangeStatus hash];
  case DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents:
    result = prime * result + [self.memberPermanentlyDeleteAccountContents hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsAddCustomQuota:
    result = prime * result + [self.memberSpaceLimitsAddCustomQuota hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeCustomQuota:
    result = prime * result + [self.memberSpaceLimitsChangeCustomQuota hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus:
    result = prime * result + [self.memberSpaceLimitsChangeStatus hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsRemoveCustomQuota:
    result = prime * result + [self.memberSpaceLimitsRemoveCustomQuota hash];
  case DBTEAMLOGEventTypeMemberSuggest:
    result = prime * result + [self.memberSuggest hash];
  case DBTEAMLOGEventTypeMemberTransferAccountContents:
    result = prime * result + [self.memberTransferAccountContents hash];
  case DBTEAMLOGEventTypeSecondaryMailsPolicyChanged:
    result = prime * result + [self.secondaryMailsPolicyChanged hash];
  case DBTEAMLOGEventTypePaperContentAddMember:
    result = prime * result + [self.paperContentAddMember hash];
  case DBTEAMLOGEventTypePaperContentAddToFolder:
    result = prime * result + [self.paperContentAddToFolder hash];
  case DBTEAMLOGEventTypePaperContentArchive:
    result = prime * result + [self.paperContentArchive hash];
  case DBTEAMLOGEventTypePaperContentCreate:
    result = prime * result + [self.paperContentCreate hash];
  case DBTEAMLOGEventTypePaperContentPermanentlyDelete:
    result = prime * result + [self.paperContentPermanentlyDelete hash];
  case DBTEAMLOGEventTypePaperContentRemoveFromFolder:
    result = prime * result + [self.paperContentRemoveFromFolder hash];
  case DBTEAMLOGEventTypePaperContentRemoveMember:
    result = prime * result + [self.paperContentRemoveMember hash];
  case DBTEAMLOGEventTypePaperContentRename:
    result = prime * result + [self.paperContentRename hash];
  case DBTEAMLOGEventTypePaperContentRestore:
    result = prime * result + [self.paperContentRestore hash];
  case DBTEAMLOGEventTypePaperDocAddComment:
    result = prime * result + [self.paperDocAddComment hash];
  case DBTEAMLOGEventTypePaperDocChangeMemberRole:
    result = prime * result + [self.paperDocChangeMemberRole hash];
  case DBTEAMLOGEventTypePaperDocChangeSharingPolicy:
    result = prime * result + [self.paperDocChangeSharingPolicy hash];
  case DBTEAMLOGEventTypePaperDocChangeSubscription:
    result = prime * result + [self.paperDocChangeSubscription hash];
  case DBTEAMLOGEventTypePaperDocDeleted:
    result = prime * result + [self.paperDocDeleted hash];
  case DBTEAMLOGEventTypePaperDocDeleteComment:
    result = prime * result + [self.paperDocDeleteComment hash];
  case DBTEAMLOGEventTypePaperDocDownload:
    result = prime * result + [self.paperDocDownload hash];
  case DBTEAMLOGEventTypePaperDocEdit:
    result = prime * result + [self.paperDocEdit hash];
  case DBTEAMLOGEventTypePaperDocEditComment:
    result = prime * result + [self.paperDocEditComment hash];
  case DBTEAMLOGEventTypePaperDocFollowed:
    result = prime * result + [self.paperDocFollowed hash];
  case DBTEAMLOGEventTypePaperDocMention:
    result = prime * result + [self.paperDocMention hash];
  case DBTEAMLOGEventTypePaperDocRequestAccess:
    result = prime * result + [self.paperDocRequestAccess hash];
  case DBTEAMLOGEventTypePaperDocResolveComment:
    result = prime * result + [self.paperDocResolveComment hash];
  case DBTEAMLOGEventTypePaperDocRevert:
    result = prime * result + [self.paperDocRevert hash];
  case DBTEAMLOGEventTypePaperDocSlackShare:
    result = prime * result + [self.paperDocSlackShare hash];
  case DBTEAMLOGEventTypePaperDocTeamInvite:
    result = prime * result + [self.paperDocTeamInvite hash];
  case DBTEAMLOGEventTypePaperDocTrashed:
    result = prime * result + [self.paperDocTrashed hash];
  case DBTEAMLOGEventTypePaperDocUnresolveComment:
    result = prime * result + [self.paperDocUnresolveComment hash];
  case DBTEAMLOGEventTypePaperDocUntrashed:
    result = prime * result + [self.paperDocUntrashed hash];
  case DBTEAMLOGEventTypePaperDocView:
    result = prime * result + [self.paperDocView hash];
  case DBTEAMLOGEventTypePaperExternalViewAllow:
    result = prime * result + [self.paperExternalViewAllow hash];
  case DBTEAMLOGEventTypePaperExternalViewDefaultTeam:
    result = prime * result + [self.paperExternalViewDefaultTeam hash];
  case DBTEAMLOGEventTypePaperExternalViewForbid:
    result = prime * result + [self.paperExternalViewForbid hash];
  case DBTEAMLOGEventTypePaperFolderChangeSubscription:
    result = prime * result + [self.paperFolderChangeSubscription hash];
  case DBTEAMLOGEventTypePaperFolderDeleted:
    result = prime * result + [self.paperFolderDeleted hash];
  case DBTEAMLOGEventTypePaperFolderFollowed:
    result = prime * result + [self.paperFolderFollowed hash];
  case DBTEAMLOGEventTypePaperFolderTeamInvite:
    result = prime * result + [self.paperFolderTeamInvite hash];
  case DBTEAMLOGEventTypePasswordChange:
    result = prime * result + [self.passwordChange hash];
  case DBTEAMLOGEventTypePasswordReset:
    result = prime * result + [self.passwordReset hash];
  case DBTEAMLOGEventTypePasswordResetAll:
    result = prime * result + [self.passwordResetAll hash];
  case DBTEAMLOGEventTypeEmmCreateExceptionsReport:
    result = prime * result + [self.emmCreateExceptionsReport hash];
  case DBTEAMLOGEventTypeEmmCreateUsageReport:
    result = prime * result + [self.emmCreateUsageReport hash];
  case DBTEAMLOGEventTypeExportMembersReport:
    result = prime * result + [self.exportMembersReport hash];
  case DBTEAMLOGEventTypePaperAdminExportStart:
    result = prime * result + [self.paperAdminExportStart hash];
  case DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport:
    result = prime * result + [self.smartSyncCreateAdminPrivilegeReport hash];
  case DBTEAMLOGEventTypeTeamActivityCreateReport:
    result = prime * result + [self.teamActivityCreateReport hash];
  case DBTEAMLOGEventTypeCollectionShare:
    result = prime * result + [self.collectionShare hash];
  case DBTEAMLOGEventTypeNoteAclInviteOnly:
    result = prime * result + [self.noteAclInviteOnly hash];
  case DBTEAMLOGEventTypeNoteAclLink:
    result = prime * result + [self.noteAclLink hash];
  case DBTEAMLOGEventTypeNoteAclTeamLink:
    result = prime * result + [self.noteAclTeamLink hash];
  case DBTEAMLOGEventTypeNoteShared:
    result = prime * result + [self.noteShared hash];
  case DBTEAMLOGEventTypeNoteShareReceive:
    result = prime * result + [self.noteShareReceive hash];
  case DBTEAMLOGEventTypeOpenNoteShared:
    result = prime * result + [self.openNoteShared hash];
  case DBTEAMLOGEventTypeSfAddGroup:
    result = prime * result + [self.sfAddGroup hash];
  case DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks:
    result = prime * result + [self.sfAllowNonMembersToViewSharedLinks hash];
  case DBTEAMLOGEventTypeSfExternalInviteWarn:
    result = prime * result + [self.sfExternalInviteWarn hash];
  case DBTEAMLOGEventTypeSfFbInvite:
    result = prime * result + [self.sfFbInvite hash];
  case DBTEAMLOGEventTypeSfFbInviteChangeRole:
    result = prime * result + [self.sfFbInviteChangeRole hash];
  case DBTEAMLOGEventTypeSfFbUninvite:
    result = prime * result + [self.sfFbUninvite hash];
  case DBTEAMLOGEventTypeSfInviteGroup:
    result = prime * result + [self.sfInviteGroup hash];
  case DBTEAMLOGEventTypeSfTeamGrantAccess:
    result = prime * result + [self.sfTeamGrantAccess hash];
  case DBTEAMLOGEventTypeSfTeamInvite:
    result = prime * result + [self.sfTeamInvite hash];
  case DBTEAMLOGEventTypeSfTeamInviteChangeRole:
    result = prime * result + [self.sfTeamInviteChangeRole hash];
  case DBTEAMLOGEventTypeSfTeamJoin:
    result = prime * result + [self.sfTeamJoin hash];
  case DBTEAMLOGEventTypeSfTeamJoinFromOobLink:
    result = prime * result + [self.sfTeamJoinFromOobLink hash];
  case DBTEAMLOGEventTypeSfTeamUninvite:
    result = prime * result + [self.sfTeamUninvite hash];
  case DBTEAMLOGEventTypeSharedContentAddInvitees:
    result = prime * result + [self.sharedContentAddInvitees hash];
  case DBTEAMLOGEventTypeSharedContentAddLinkExpiry:
    result = prime * result + [self.sharedContentAddLinkExpiry hash];
  case DBTEAMLOGEventTypeSharedContentAddLinkPassword:
    result = prime * result + [self.sharedContentAddLinkPassword hash];
  case DBTEAMLOGEventTypeSharedContentAddMember:
    result = prime * result + [self.sharedContentAddMember hash];
  case DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy:
    result = prime * result + [self.sharedContentChangeDownloadsPolicy hash];
  case DBTEAMLOGEventTypeSharedContentChangeInviteeRole:
    result = prime * result + [self.sharedContentChangeInviteeRole hash];
  case DBTEAMLOGEventTypeSharedContentChangeLinkAudience:
    result = prime * result + [self.sharedContentChangeLinkAudience hash];
  case DBTEAMLOGEventTypeSharedContentChangeLinkExpiry:
    result = prime * result + [self.sharedContentChangeLinkExpiry hash];
  case DBTEAMLOGEventTypeSharedContentChangeLinkPassword:
    result = prime * result + [self.sharedContentChangeLinkPassword hash];
  case DBTEAMLOGEventTypeSharedContentChangeMemberRole:
    result = prime * result + [self.sharedContentChangeMemberRole hash];
  case DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy:
    result = prime * result + [self.sharedContentChangeViewerInfoPolicy hash];
  case DBTEAMLOGEventTypeSharedContentClaimInvitation:
    result = prime * result + [self.sharedContentClaimInvitation hash];
  case DBTEAMLOGEventTypeSharedContentCopy:
    result = prime * result + [self.sharedContentCopy hash];
  case DBTEAMLOGEventTypeSharedContentDownload:
    result = prime * result + [self.sharedContentDownload hash];
  case DBTEAMLOGEventTypeSharedContentRelinquishMembership:
    result = prime * result + [self.sharedContentRelinquishMembership hash];
  case DBTEAMLOGEventTypeSharedContentRemoveInvitees:
    result = prime * result + [self.sharedContentRemoveInvitees hash];
  case DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry:
    result = prime * result + [self.sharedContentRemoveLinkExpiry hash];
  case DBTEAMLOGEventTypeSharedContentRemoveLinkPassword:
    result = prime * result + [self.sharedContentRemoveLinkPassword hash];
  case DBTEAMLOGEventTypeSharedContentRemoveMember:
    result = prime * result + [self.sharedContentRemoveMember hash];
  case DBTEAMLOGEventTypeSharedContentRequestAccess:
    result = prime * result + [self.sharedContentRequestAccess hash];
  case DBTEAMLOGEventTypeSharedContentUnshare:
    result = prime * result + [self.sharedContentUnshare hash];
  case DBTEAMLOGEventTypeSharedContentView:
    result = prime * result + [self.sharedContentView hash];
  case DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy:
    result = prime * result + [self.sharedFolderChangeLinkPolicy hash];
  case DBTEAMLOGEventTypeSharedFolderChangeMembersInheritancePolicy:
    result = prime * result + [self.sharedFolderChangeMembersInheritancePolicy hash];
  case DBTEAMLOGEventTypeSharedFolderChangeMembersManagementPolicy:
    result = prime * result + [self.sharedFolderChangeMembersManagementPolicy hash];
  case DBTEAMLOGEventTypeSharedFolderChangeMembersPolicy:
    result = prime * result + [self.sharedFolderChangeMembersPolicy hash];
  case DBTEAMLOGEventTypeSharedFolderCreate:
    result = prime * result + [self.sharedFolderCreate hash];
  case DBTEAMLOGEventTypeSharedFolderDeclineInvitation:
    result = prime * result + [self.sharedFolderDeclineInvitation hash];
  case DBTEAMLOGEventTypeSharedFolderMount:
    result = prime * result + [self.sharedFolderMount hash];
  case DBTEAMLOGEventTypeSharedFolderNest:
    result = prime * result + [self.sharedFolderNest hash];
  case DBTEAMLOGEventTypeSharedFolderTransferOwnership:
    result = prime * result + [self.sharedFolderTransferOwnership hash];
  case DBTEAMLOGEventTypeSharedFolderUnmount:
    result = prime * result + [self.sharedFolderUnmount hash];
  case DBTEAMLOGEventTypeSharedLinkAddExpiry:
    result = prime * result + [self.sharedLinkAddExpiry hash];
  case DBTEAMLOGEventTypeSharedLinkChangeExpiry:
    result = prime * result + [self.sharedLinkChangeExpiry hash];
  case DBTEAMLOGEventTypeSharedLinkChangeVisibility:
    result = prime * result + [self.sharedLinkChangeVisibility hash];
  case DBTEAMLOGEventTypeSharedLinkCopy:
    result = prime * result + [self.sharedLinkCopy hash];
  case DBTEAMLOGEventTypeSharedLinkCreate:
    result = prime * result + [self.sharedLinkCreate hash];
  case DBTEAMLOGEventTypeSharedLinkDisable:
    result = prime * result + [self.sharedLinkDisable hash];
  case DBTEAMLOGEventTypeSharedLinkDownload:
    result = prime * result + [self.sharedLinkDownload hash];
  case DBTEAMLOGEventTypeSharedLinkRemoveExpiry:
    result = prime * result + [self.sharedLinkRemoveExpiry hash];
  case DBTEAMLOGEventTypeSharedLinkShare:
    result = prime * result + [self.sharedLinkShare hash];
  case DBTEAMLOGEventTypeSharedLinkView:
    result = prime * result + [self.sharedLinkView hash];
  case DBTEAMLOGEventTypeSharedNoteOpened:
    result = prime * result + [self.sharedNoteOpened hash];
  case DBTEAMLOGEventTypeShmodelGroupShare:
    result = prime * result + [self.shmodelGroupShare hash];
  case DBTEAMLOGEventTypeShowcaseAccessGranted:
    result = prime * result + [self.showcaseAccessGranted hash];
  case DBTEAMLOGEventTypeShowcaseAddMember:
    result = prime * result + [self.showcaseAddMember hash];
  case DBTEAMLOGEventTypeShowcaseArchived:
    result = prime * result + [self.showcaseArchived hash];
  case DBTEAMLOGEventTypeShowcaseCreated:
    result = prime * result + [self.showcaseCreated hash];
  case DBTEAMLOGEventTypeShowcaseDeleteComment:
    result = prime * result + [self.showcaseDeleteComment hash];
  case DBTEAMLOGEventTypeShowcaseEdited:
    result = prime * result + [self.showcaseEdited hash];
  case DBTEAMLOGEventTypeShowcaseEditComment:
    result = prime * result + [self.showcaseEditComment hash];
  case DBTEAMLOGEventTypeShowcaseFileAdded:
    result = prime * result + [self.showcaseFileAdded hash];
  case DBTEAMLOGEventTypeShowcaseFileDownload:
    result = prime * result + [self.showcaseFileDownload hash];
  case DBTEAMLOGEventTypeShowcaseFileRemoved:
    result = prime * result + [self.showcaseFileRemoved hash];
  case DBTEAMLOGEventTypeShowcaseFileView:
    result = prime * result + [self.showcaseFileView hash];
  case DBTEAMLOGEventTypeShowcasePermanentlyDeleted:
    result = prime * result + [self.showcasePermanentlyDeleted hash];
  case DBTEAMLOGEventTypeShowcasePostComment:
    result = prime * result + [self.showcasePostComment hash];
  case DBTEAMLOGEventTypeShowcaseRemoveMember:
    result = prime * result + [self.showcaseRemoveMember hash];
  case DBTEAMLOGEventTypeShowcaseRenamed:
    result = prime * result + [self.showcaseRenamed hash];
  case DBTEAMLOGEventTypeShowcaseRequestAccess:
    result = prime * result + [self.showcaseRequestAccess hash];
  case DBTEAMLOGEventTypeShowcaseResolveComment:
    result = prime * result + [self.showcaseResolveComment hash];
  case DBTEAMLOGEventTypeShowcaseRestored:
    result = prime * result + [self.showcaseRestored hash];
  case DBTEAMLOGEventTypeShowcaseTrashed:
    result = prime * result + [self.showcaseTrashed hash];
  case DBTEAMLOGEventTypeShowcaseTrashedDeprecated:
    result = prime * result + [self.showcaseTrashedDeprecated hash];
  case DBTEAMLOGEventTypeShowcaseUnresolveComment:
    result = prime * result + [self.showcaseUnresolveComment hash];
  case DBTEAMLOGEventTypeShowcaseUntrashed:
    result = prime * result + [self.showcaseUntrashed hash];
  case DBTEAMLOGEventTypeShowcaseUntrashedDeprecated:
    result = prime * result + [self.showcaseUntrashedDeprecated hash];
  case DBTEAMLOGEventTypeShowcaseView:
    result = prime * result + [self.showcaseView hash];
  case DBTEAMLOGEventTypeSsoAddCert:
    result = prime * result + [self.ssoAddCert hash];
  case DBTEAMLOGEventTypeSsoAddLoginUrl:
    result = prime * result + [self.ssoAddLoginUrl hash];
  case DBTEAMLOGEventTypeSsoAddLogoutUrl:
    result = prime * result + [self.ssoAddLogoutUrl hash];
  case DBTEAMLOGEventTypeSsoChangeCert:
    result = prime * result + [self.ssoChangeCert hash];
  case DBTEAMLOGEventTypeSsoChangeLoginUrl:
    result = prime * result + [self.ssoChangeLoginUrl hash];
  case DBTEAMLOGEventTypeSsoChangeLogoutUrl:
    result = prime * result + [self.ssoChangeLogoutUrl hash];
  case DBTEAMLOGEventTypeSsoChangeSamlIdentityMode:
    result = prime * result + [self.ssoChangeSamlIdentityMode hash];
  case DBTEAMLOGEventTypeSsoRemoveCert:
    result = prime * result + [self.ssoRemoveCert hash];
  case DBTEAMLOGEventTypeSsoRemoveLoginUrl:
    result = prime * result + [self.ssoRemoveLoginUrl hash];
  case DBTEAMLOGEventTypeSsoRemoveLogoutUrl:
    result = prime * result + [self.ssoRemoveLogoutUrl hash];
  case DBTEAMLOGEventTypeTeamFolderChangeStatus:
    result = prime * result + [self.teamFolderChangeStatus hash];
  case DBTEAMLOGEventTypeTeamFolderCreate:
    result = prime * result + [self.teamFolderCreate hash];
  case DBTEAMLOGEventTypeTeamFolderDowngrade:
    result = prime * result + [self.teamFolderDowngrade hash];
  case DBTEAMLOGEventTypeTeamFolderPermanentlyDelete:
    result = prime * result + [self.teamFolderPermanentlyDelete hash];
  case DBTEAMLOGEventTypeTeamFolderRename:
    result = prime * result + [self.teamFolderRename hash];
  case DBTEAMLOGEventTypeTeamSelectiveSyncSettingsChanged:
    result = prime * result + [self.teamSelectiveSyncSettingsChanged hash];
  case DBTEAMLOGEventTypeAccountCaptureChangePolicy:
    result = prime * result + [self.accountCaptureChangePolicy hash];
  case DBTEAMLOGEventTypeAllowDownloadDisabled:
    result = prime * result + [self.allowDownloadDisabled hash];
  case DBTEAMLOGEventTypeAllowDownloadEnabled:
    result = prime * result + [self.allowDownloadEnabled hash];
  case DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy:
    result = prime * result + [self.dataPlacementRestrictionChangePolicy hash];
  case DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy:
    result = prime * result + [self.dataPlacementRestrictionSatisfyPolicy hash];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy:
    result = prime * result + [self.deviceApprovalsChangeDesktopPolicy hash];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy:
    result = prime * result + [self.deviceApprovalsChangeMobilePolicy hash];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction:
    result = prime * result + [self.deviceApprovalsChangeOverageAction hash];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction:
    result = prime * result + [self.deviceApprovalsChangeUnlinkAction hash];
  case DBTEAMLOGEventTypeDirectoryRestrictionsAddMembers:
    result = prime * result + [self.directoryRestrictionsAddMembers hash];
  case DBTEAMLOGEventTypeDirectoryRestrictionsRemoveMembers:
    result = prime * result + [self.directoryRestrictionsRemoveMembers hash];
  case DBTEAMLOGEventTypeEmmAddException:
    result = prime * result + [self.emmAddException hash];
  case DBTEAMLOGEventTypeEmmChangePolicy:
    result = prime * result + [self.emmChangePolicy hash];
  case DBTEAMLOGEventTypeEmmRemoveException:
    result = prime * result + [self.emmRemoveException hash];
  case DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy:
    result = prime * result + [self.extendedVersionHistoryChangePolicy hash];
  case DBTEAMLOGEventTypeFileCommentsChangePolicy:
    result = prime * result + [self.fileCommentsChangePolicy hash];
  case DBTEAMLOGEventTypeFileRequestsChangePolicy:
    result = prime * result + [self.fileRequestsChangePolicy hash];
  case DBTEAMLOGEventTypeFileRequestsEmailsEnabled:
    result = prime * result + [self.fileRequestsEmailsEnabled hash];
  case DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly:
    result = prime * result + [self.fileRequestsEmailsRestrictedToTeamOnly hash];
  case DBTEAMLOGEventTypeGoogleSsoChangePolicy:
    result = prime * result + [self.googleSsoChangePolicy hash];
  case DBTEAMLOGEventTypeGroupUserManagementChangePolicy:
    result = prime * result + [self.groupUserManagementChangePolicy hash];
  case DBTEAMLOGEventTypeMemberRequestsChangePolicy:
    result = prime * result + [self.memberRequestsChangePolicy hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsAddException:
    result = prime * result + [self.memberSpaceLimitsAddException hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeCapsTypePolicy:
    result = prime * result + [self.memberSpaceLimitsChangeCapsTypePolicy hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy:
    result = prime * result + [self.memberSpaceLimitsChangePolicy hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException:
    result = prime * result + [self.memberSpaceLimitsRemoveException hash];
  case DBTEAMLOGEventTypeMemberSuggestionsChangePolicy:
    result = prime * result + [self.memberSuggestionsChangePolicy hash];
  case DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy:
    result = prime * result + [self.microsoftOfficeAddinChangePolicy hash];
  case DBTEAMLOGEventTypeNetworkControlChangePolicy:
    result = prime * result + [self.networkControlChangePolicy hash];
  case DBTEAMLOGEventTypePaperChangeDeploymentPolicy:
    result = prime * result + [self.paperChangeDeploymentPolicy hash];
  case DBTEAMLOGEventTypePaperChangeMemberLinkPolicy:
    result = prime * result + [self.paperChangeMemberLinkPolicy hash];
  case DBTEAMLOGEventTypePaperChangeMemberPolicy:
    result = prime * result + [self.paperChangeMemberPolicy hash];
  case DBTEAMLOGEventTypePaperChangePolicy:
    result = prime * result + [self.paperChangePolicy hash];
  case DBTEAMLOGEventTypePaperEnabledUsersGroupAddition:
    result = prime * result + [self.paperEnabledUsersGroupAddition hash];
  case DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval:
    result = prime * result + [self.paperEnabledUsersGroupRemoval hash];
  case DBTEAMLOGEventTypePermanentDeleteChangePolicy:
    result = prime * result + [self.permanentDeleteChangePolicy hash];
  case DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy:
    result = prime * result + [self.sharingChangeFolderJoinPolicy hash];
  case DBTEAMLOGEventTypeSharingChangeLinkPolicy:
    result = prime * result + [self.sharingChangeLinkPolicy hash];
  case DBTEAMLOGEventTypeSharingChangeMemberPolicy:
    result = prime * result + [self.sharingChangeMemberPolicy hash];
  case DBTEAMLOGEventTypeShowcaseChangeDownloadPolicy:
    result = prime * result + [self.showcaseChangeDownloadPolicy hash];
  case DBTEAMLOGEventTypeShowcaseChangeEnabledPolicy:
    result = prime * result + [self.showcaseChangeEnabledPolicy hash];
  case DBTEAMLOGEventTypeShowcaseChangeExternalSharingPolicy:
    result = prime * result + [self.showcaseChangeExternalSharingPolicy hash];
  case DBTEAMLOGEventTypeSmartSyncChangePolicy:
    result = prime * result + [self.smartSyncChangePolicy hash];
  case DBTEAMLOGEventTypeSmartSyncNotOptOut:
    result = prime * result + [self.smartSyncNotOptOut hash];
  case DBTEAMLOGEventTypeSmartSyncOptOut:
    result = prime * result + [self.smartSyncOptOut hash];
  case DBTEAMLOGEventTypeSsoChangePolicy:
    result = prime * result + [self.ssoChangePolicy hash];
  case DBTEAMLOGEventTypeTfaChangePolicy:
    result = prime * result + [self.tfaChangePolicy hash];
  case DBTEAMLOGEventTypeTwoAccountChangePolicy:
    result = prime * result + [self.twoAccountChangePolicy hash];
  case DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy:
    result = prime * result + [self.webSessionsChangeFixedLengthPolicy hash];
  case DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy:
    result = prime * result + [self.webSessionsChangeIdleLengthPolicy hash];
  case DBTEAMLOGEventTypeTeamMergeFrom:
    result = prime * result + [self.teamMergeFrom hash];
  case DBTEAMLOGEventTypeTeamMergeTo:
    result = prime * result + [self.teamMergeTo hash];
  case DBTEAMLOGEventTypeTeamProfileAddLogo:
    result = prime * result + [self.teamProfileAddLogo hash];
  case DBTEAMLOGEventTypeTeamProfileChangeDefaultLanguage:
    result = prime * result + [self.teamProfileChangeDefaultLanguage hash];
  case DBTEAMLOGEventTypeTeamProfileChangeLogo:
    result = prime * result + [self.teamProfileChangeLogo hash];
  case DBTEAMLOGEventTypeTeamProfileChangeName:
    result = prime * result + [self.teamProfileChangeName hash];
  case DBTEAMLOGEventTypeTeamProfileRemoveLogo:
    result = prime * result + [self.teamProfileRemoveLogo hash];
  case DBTEAMLOGEventTypeTfaAddBackupPhone:
    result = prime * result + [self.tfaAddBackupPhone hash];
  case DBTEAMLOGEventTypeTfaAddSecurityKey:
    result = prime * result + [self.tfaAddSecurityKey hash];
  case DBTEAMLOGEventTypeTfaChangeBackupPhone:
    result = prime * result + [self.tfaChangeBackupPhone hash];
  case DBTEAMLOGEventTypeTfaChangeStatus:
    result = prime * result + [self.tfaChangeStatus hash];
  case DBTEAMLOGEventTypeTfaRemoveBackupPhone:
    result = prime * result + [self.tfaRemoveBackupPhone hash];
  case DBTEAMLOGEventTypeTfaRemoveSecurityKey:
    result = prime * result + [self.tfaRemoveSecurityKey hash];
  case DBTEAMLOGEventTypeTfaReset:
    result = prime * result + [self.tfaReset hash];
  case DBTEAMLOGEventTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEventType:other];
}

- (BOOL)isEqualToEventType:(DBTEAMLOGEventType *)anEventType {
  if (self == anEventType) {
    return YES;
  }
  if (self.tag != anEventType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEventTypeAppLinkTeam:
    return [self.appLinkTeam isEqual:anEventType.appLinkTeam];
  case DBTEAMLOGEventTypeAppLinkUser:
    return [self.appLinkUser isEqual:anEventType.appLinkUser];
  case DBTEAMLOGEventTypeAppUnlinkTeam:
    return [self.appUnlinkTeam isEqual:anEventType.appUnlinkTeam];
  case DBTEAMLOGEventTypeAppUnlinkUser:
    return [self.appUnlinkUser isEqual:anEventType.appUnlinkUser];
  case DBTEAMLOGEventTypeFileAddComment:
    return [self.fileAddComment isEqual:anEventType.fileAddComment];
  case DBTEAMLOGEventTypeFileChangeCommentSubscription:
    return [self.fileChangeCommentSubscription isEqual:anEventType.fileChangeCommentSubscription];
  case DBTEAMLOGEventTypeFileDeleteComment:
    return [self.fileDeleteComment isEqual:anEventType.fileDeleteComment];
  case DBTEAMLOGEventTypeFileLikeComment:
    return [self.fileLikeComment isEqual:anEventType.fileLikeComment];
  case DBTEAMLOGEventTypeFileResolveComment:
    return [self.fileResolveComment isEqual:anEventType.fileResolveComment];
  case DBTEAMLOGEventTypeFileUnlikeComment:
    return [self.fileUnlikeComment isEqual:anEventType.fileUnlikeComment];
  case DBTEAMLOGEventTypeFileUnresolveComment:
    return [self.fileUnresolveComment isEqual:anEventType.fileUnresolveComment];
  case DBTEAMLOGEventTypeDeviceChangeIpDesktop:
    return [self.deviceChangeIpDesktop isEqual:anEventType.deviceChangeIpDesktop];
  case DBTEAMLOGEventTypeDeviceChangeIpMobile:
    return [self.deviceChangeIpMobile isEqual:anEventType.deviceChangeIpMobile];
  case DBTEAMLOGEventTypeDeviceChangeIpWeb:
    return [self.deviceChangeIpWeb isEqual:anEventType.deviceChangeIpWeb];
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail:
    return [self.deviceDeleteOnUnlinkFail isEqual:anEventType.deviceDeleteOnUnlinkFail];
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess:
    return [self.deviceDeleteOnUnlinkSuccess isEqual:anEventType.deviceDeleteOnUnlinkSuccess];
  case DBTEAMLOGEventTypeDeviceLinkFail:
    return [self.deviceLinkFail isEqual:anEventType.deviceLinkFail];
  case DBTEAMLOGEventTypeDeviceLinkSuccess:
    return [self.deviceLinkSuccess isEqual:anEventType.deviceLinkSuccess];
  case DBTEAMLOGEventTypeDeviceManagementDisabled:
    return [self.deviceManagementDisabled isEqual:anEventType.deviceManagementDisabled];
  case DBTEAMLOGEventTypeDeviceManagementEnabled:
    return [self.deviceManagementEnabled isEqual:anEventType.deviceManagementEnabled];
  case DBTEAMLOGEventTypeDeviceUnlink:
    return [self.deviceUnlink isEqual:anEventType.deviceUnlink];
  case DBTEAMLOGEventTypeEmmRefreshAuthToken:
    return [self.emmRefreshAuthToken isEqual:anEventType.emmRefreshAuthToken];
  case DBTEAMLOGEventTypeAccountCaptureChangeAvailability:
    return [self.accountCaptureChangeAvailability isEqual:anEventType.accountCaptureChangeAvailability];
  case DBTEAMLOGEventTypeAccountCaptureMigrateAccount:
    return [self.accountCaptureMigrateAccount isEqual:anEventType.accountCaptureMigrateAccount];
  case DBTEAMLOGEventTypeAccountCaptureNotificationEmailsSent:
    return [self.accountCaptureNotificationEmailsSent isEqual:anEventType.accountCaptureNotificationEmailsSent];
  case DBTEAMLOGEventTypeAccountCaptureRelinquishAccount:
    return [self.accountCaptureRelinquishAccount isEqual:anEventType.accountCaptureRelinquishAccount];
  case DBTEAMLOGEventTypeDisabledDomainInvites:
    return [self.disabledDomainInvites isEqual:anEventType.disabledDomainInvites];
  case DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam:
    return [self.domainInvitesApproveRequestToJoinTeam isEqual:anEventType.domainInvitesApproveRequestToJoinTeam];
  case DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam:
    return [self.domainInvitesDeclineRequestToJoinTeam isEqual:anEventType.domainInvitesDeclineRequestToJoinTeam];
  case DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers:
    return [self.domainInvitesEmailExistingUsers isEqual:anEventType.domainInvitesEmailExistingUsers];
  case DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam:
    return [self.domainInvitesRequestToJoinTeam isEqual:anEventType.domainInvitesRequestToJoinTeam];
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo:
    return [self.domainInvitesSetInviteNewUserPrefToNo isEqual:anEventType.domainInvitesSetInviteNewUserPrefToNo];
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes:
    return [self.domainInvitesSetInviteNewUserPrefToYes isEqual:anEventType.domainInvitesSetInviteNewUserPrefToYes];
  case DBTEAMLOGEventTypeDomainVerificationAddDomainFail:
    return [self.domainVerificationAddDomainFail isEqual:anEventType.domainVerificationAddDomainFail];
  case DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess:
    return [self.domainVerificationAddDomainSuccess isEqual:anEventType.domainVerificationAddDomainSuccess];
  case DBTEAMLOGEventTypeDomainVerificationRemoveDomain:
    return [self.domainVerificationRemoveDomain isEqual:anEventType.domainVerificationRemoveDomain];
  case DBTEAMLOGEventTypeEnabledDomainInvites:
    return [self.enabledDomainInvites isEqual:anEventType.enabledDomainInvites];
  case DBTEAMLOGEventTypeCreateFolder:
    return [self.createFolder isEqual:anEventType.createFolder];
  case DBTEAMLOGEventTypeFileAdd:
    return [self.fileAdd isEqual:anEventType.fileAdd];
  case DBTEAMLOGEventTypeFileCopy:
    return [self.fileCopy isEqual:anEventType.fileCopy];
  case DBTEAMLOGEventTypeFileDelete:
    return [self.fileDelete isEqual:anEventType.fileDelete];
  case DBTEAMLOGEventTypeFileDownload:
    return [self.fileDownload isEqual:anEventType.fileDownload];
  case DBTEAMLOGEventTypeFileEdit:
    return [self.fileEdit isEqual:anEventType.fileEdit];
  case DBTEAMLOGEventTypeFileGetCopyReference:
    return [self.fileGetCopyReference isEqual:anEventType.fileGetCopyReference];
  case DBTEAMLOGEventTypeFileMove:
    return [self.fileMove isEqual:anEventType.fileMove];
  case DBTEAMLOGEventTypeFilePermanentlyDelete:
    return [self.filePermanentlyDelete isEqual:anEventType.filePermanentlyDelete];
  case DBTEAMLOGEventTypeFilePreview:
    return [self.filePreview isEqual:anEventType.filePreview];
  case DBTEAMLOGEventTypeFileRename:
    return [self.fileRename isEqual:anEventType.fileRename];
  case DBTEAMLOGEventTypeFileRestore:
    return [self.fileRestore isEqual:anEventType.fileRestore];
  case DBTEAMLOGEventTypeFileRevert:
    return [self.fileRevert isEqual:anEventType.fileRevert];
  case DBTEAMLOGEventTypeFileRollbackChanges:
    return [self.fileRollbackChanges isEqual:anEventType.fileRollbackChanges];
  case DBTEAMLOGEventTypeFileSaveCopyReference:
    return [self.fileSaveCopyReference isEqual:anEventType.fileSaveCopyReference];
  case DBTEAMLOGEventTypeFileRequestChange:
    return [self.fileRequestChange isEqual:anEventType.fileRequestChange];
  case DBTEAMLOGEventTypeFileRequestClose:
    return [self.fileRequestClose isEqual:anEventType.fileRequestClose];
  case DBTEAMLOGEventTypeFileRequestCreate:
    return [self.fileRequestCreate isEqual:anEventType.fileRequestCreate];
  case DBTEAMLOGEventTypeFileRequestReceiveFile:
    return [self.fileRequestReceiveFile isEqual:anEventType.fileRequestReceiveFile];
  case DBTEAMLOGEventTypeGroupAddExternalId:
    return [self.groupAddExternalId isEqual:anEventType.groupAddExternalId];
  case DBTEAMLOGEventTypeGroupAddMember:
    return [self.groupAddMember isEqual:anEventType.groupAddMember];
  case DBTEAMLOGEventTypeGroupChangeExternalId:
    return [self.groupChangeExternalId isEqual:anEventType.groupChangeExternalId];
  case DBTEAMLOGEventTypeGroupChangeManagementType:
    return [self.groupChangeManagementType isEqual:anEventType.groupChangeManagementType];
  case DBTEAMLOGEventTypeGroupChangeMemberRole:
    return [self.groupChangeMemberRole isEqual:anEventType.groupChangeMemberRole];
  case DBTEAMLOGEventTypeGroupCreate:
    return [self.groupCreate isEqual:anEventType.groupCreate];
  case DBTEAMLOGEventTypeGroupDelete:
    return [self.groupDelete isEqual:anEventType.groupDelete];
  case DBTEAMLOGEventTypeGroupDescriptionUpdated:
    return [self.groupDescriptionUpdated isEqual:anEventType.groupDescriptionUpdated];
  case DBTEAMLOGEventTypeGroupJoinPolicyUpdated:
    return [self.groupJoinPolicyUpdated isEqual:anEventType.groupJoinPolicyUpdated];
  case DBTEAMLOGEventTypeGroupMoved:
    return [self.groupMoved isEqual:anEventType.groupMoved];
  case DBTEAMLOGEventTypeGroupRemoveExternalId:
    return [self.groupRemoveExternalId isEqual:anEventType.groupRemoveExternalId];
  case DBTEAMLOGEventTypeGroupRemoveMember:
    return [self.groupRemoveMember isEqual:anEventType.groupRemoveMember];
  case DBTEAMLOGEventTypeGroupRename:
    return [self.groupRename isEqual:anEventType.groupRename];
  case DBTEAMLOGEventTypeEmmError:
    return [self.emmError isEqual:anEventType.emmError];
  case DBTEAMLOGEventTypeLoginFail:
    return [self.loginFail isEqual:anEventType.loginFail];
  case DBTEAMLOGEventTypeLoginSuccess:
    return [self.loginSuccess isEqual:anEventType.loginSuccess];
  case DBTEAMLOGEventTypeLogout:
    return [self.logout isEqual:anEventType.logout];
  case DBTEAMLOGEventTypeResellerSupportSessionEnd:
    return [self.resellerSupportSessionEnd isEqual:anEventType.resellerSupportSessionEnd];
  case DBTEAMLOGEventTypeResellerSupportSessionStart:
    return [self.resellerSupportSessionStart isEqual:anEventType.resellerSupportSessionStart];
  case DBTEAMLOGEventTypeSignInAsSessionEnd:
    return [self.signInAsSessionEnd isEqual:anEventType.signInAsSessionEnd];
  case DBTEAMLOGEventTypeSignInAsSessionStart:
    return [self.signInAsSessionStart isEqual:anEventType.signInAsSessionStart];
  case DBTEAMLOGEventTypeSsoError:
    return [self.ssoError isEqual:anEventType.ssoError];
  case DBTEAMLOGEventTypeMemberAddName:
    return [self.memberAddName isEqual:anEventType.memberAddName];
  case DBTEAMLOGEventTypeMemberChangeAdminRole:
    return [self.memberChangeAdminRole isEqual:anEventType.memberChangeAdminRole];
  case DBTEAMLOGEventTypeMemberChangeEmail:
    return [self.memberChangeEmail isEqual:anEventType.memberChangeEmail];
  case DBTEAMLOGEventTypeMemberChangeMembershipType:
    return [self.memberChangeMembershipType isEqual:anEventType.memberChangeMembershipType];
  case DBTEAMLOGEventTypeMemberChangeName:
    return [self.memberChangeName isEqual:anEventType.memberChangeName];
  case DBTEAMLOGEventTypeMemberChangeStatus:
    return [self.memberChangeStatus isEqual:anEventType.memberChangeStatus];
  case DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents:
    return [self.memberPermanentlyDeleteAccountContents isEqual:anEventType.memberPermanentlyDeleteAccountContents];
  case DBTEAMLOGEventTypeMemberSpaceLimitsAddCustomQuota:
    return [self.memberSpaceLimitsAddCustomQuota isEqual:anEventType.memberSpaceLimitsAddCustomQuota];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeCustomQuota:
    return [self.memberSpaceLimitsChangeCustomQuota isEqual:anEventType.memberSpaceLimitsChangeCustomQuota];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus:
    return [self.memberSpaceLimitsChangeStatus isEqual:anEventType.memberSpaceLimitsChangeStatus];
  case DBTEAMLOGEventTypeMemberSpaceLimitsRemoveCustomQuota:
    return [self.memberSpaceLimitsRemoveCustomQuota isEqual:anEventType.memberSpaceLimitsRemoveCustomQuota];
  case DBTEAMLOGEventTypeMemberSuggest:
    return [self.memberSuggest isEqual:anEventType.memberSuggest];
  case DBTEAMLOGEventTypeMemberTransferAccountContents:
    return [self.memberTransferAccountContents isEqual:anEventType.memberTransferAccountContents];
  case DBTEAMLOGEventTypeSecondaryMailsPolicyChanged:
    return [self.secondaryMailsPolicyChanged isEqual:anEventType.secondaryMailsPolicyChanged];
  case DBTEAMLOGEventTypePaperContentAddMember:
    return [self.paperContentAddMember isEqual:anEventType.paperContentAddMember];
  case DBTEAMLOGEventTypePaperContentAddToFolder:
    return [self.paperContentAddToFolder isEqual:anEventType.paperContentAddToFolder];
  case DBTEAMLOGEventTypePaperContentArchive:
    return [self.paperContentArchive isEqual:anEventType.paperContentArchive];
  case DBTEAMLOGEventTypePaperContentCreate:
    return [self.paperContentCreate isEqual:anEventType.paperContentCreate];
  case DBTEAMLOGEventTypePaperContentPermanentlyDelete:
    return [self.paperContentPermanentlyDelete isEqual:anEventType.paperContentPermanentlyDelete];
  case DBTEAMLOGEventTypePaperContentRemoveFromFolder:
    return [self.paperContentRemoveFromFolder isEqual:anEventType.paperContentRemoveFromFolder];
  case DBTEAMLOGEventTypePaperContentRemoveMember:
    return [self.paperContentRemoveMember isEqual:anEventType.paperContentRemoveMember];
  case DBTEAMLOGEventTypePaperContentRename:
    return [self.paperContentRename isEqual:anEventType.paperContentRename];
  case DBTEAMLOGEventTypePaperContentRestore:
    return [self.paperContentRestore isEqual:anEventType.paperContentRestore];
  case DBTEAMLOGEventTypePaperDocAddComment:
    return [self.paperDocAddComment isEqual:anEventType.paperDocAddComment];
  case DBTEAMLOGEventTypePaperDocChangeMemberRole:
    return [self.paperDocChangeMemberRole isEqual:anEventType.paperDocChangeMemberRole];
  case DBTEAMLOGEventTypePaperDocChangeSharingPolicy:
    return [self.paperDocChangeSharingPolicy isEqual:anEventType.paperDocChangeSharingPolicy];
  case DBTEAMLOGEventTypePaperDocChangeSubscription:
    return [self.paperDocChangeSubscription isEqual:anEventType.paperDocChangeSubscription];
  case DBTEAMLOGEventTypePaperDocDeleted:
    return [self.paperDocDeleted isEqual:anEventType.paperDocDeleted];
  case DBTEAMLOGEventTypePaperDocDeleteComment:
    return [self.paperDocDeleteComment isEqual:anEventType.paperDocDeleteComment];
  case DBTEAMLOGEventTypePaperDocDownload:
    return [self.paperDocDownload isEqual:anEventType.paperDocDownload];
  case DBTEAMLOGEventTypePaperDocEdit:
    return [self.paperDocEdit isEqual:anEventType.paperDocEdit];
  case DBTEAMLOGEventTypePaperDocEditComment:
    return [self.paperDocEditComment isEqual:anEventType.paperDocEditComment];
  case DBTEAMLOGEventTypePaperDocFollowed:
    return [self.paperDocFollowed isEqual:anEventType.paperDocFollowed];
  case DBTEAMLOGEventTypePaperDocMention:
    return [self.paperDocMention isEqual:anEventType.paperDocMention];
  case DBTEAMLOGEventTypePaperDocRequestAccess:
    return [self.paperDocRequestAccess isEqual:anEventType.paperDocRequestAccess];
  case DBTEAMLOGEventTypePaperDocResolveComment:
    return [self.paperDocResolveComment isEqual:anEventType.paperDocResolveComment];
  case DBTEAMLOGEventTypePaperDocRevert:
    return [self.paperDocRevert isEqual:anEventType.paperDocRevert];
  case DBTEAMLOGEventTypePaperDocSlackShare:
    return [self.paperDocSlackShare isEqual:anEventType.paperDocSlackShare];
  case DBTEAMLOGEventTypePaperDocTeamInvite:
    return [self.paperDocTeamInvite isEqual:anEventType.paperDocTeamInvite];
  case DBTEAMLOGEventTypePaperDocTrashed:
    return [self.paperDocTrashed isEqual:anEventType.paperDocTrashed];
  case DBTEAMLOGEventTypePaperDocUnresolveComment:
    return [self.paperDocUnresolveComment isEqual:anEventType.paperDocUnresolveComment];
  case DBTEAMLOGEventTypePaperDocUntrashed:
    return [self.paperDocUntrashed isEqual:anEventType.paperDocUntrashed];
  case DBTEAMLOGEventTypePaperDocView:
    return [self.paperDocView isEqual:anEventType.paperDocView];
  case DBTEAMLOGEventTypePaperExternalViewAllow:
    return [self.paperExternalViewAllow isEqual:anEventType.paperExternalViewAllow];
  case DBTEAMLOGEventTypePaperExternalViewDefaultTeam:
    return [self.paperExternalViewDefaultTeam isEqual:anEventType.paperExternalViewDefaultTeam];
  case DBTEAMLOGEventTypePaperExternalViewForbid:
    return [self.paperExternalViewForbid isEqual:anEventType.paperExternalViewForbid];
  case DBTEAMLOGEventTypePaperFolderChangeSubscription:
    return [self.paperFolderChangeSubscription isEqual:anEventType.paperFolderChangeSubscription];
  case DBTEAMLOGEventTypePaperFolderDeleted:
    return [self.paperFolderDeleted isEqual:anEventType.paperFolderDeleted];
  case DBTEAMLOGEventTypePaperFolderFollowed:
    return [self.paperFolderFollowed isEqual:anEventType.paperFolderFollowed];
  case DBTEAMLOGEventTypePaperFolderTeamInvite:
    return [self.paperFolderTeamInvite isEqual:anEventType.paperFolderTeamInvite];
  case DBTEAMLOGEventTypePasswordChange:
    return [self.passwordChange isEqual:anEventType.passwordChange];
  case DBTEAMLOGEventTypePasswordReset:
    return [self.passwordReset isEqual:anEventType.passwordReset];
  case DBTEAMLOGEventTypePasswordResetAll:
    return [self.passwordResetAll isEqual:anEventType.passwordResetAll];
  case DBTEAMLOGEventTypeEmmCreateExceptionsReport:
    return [self.emmCreateExceptionsReport isEqual:anEventType.emmCreateExceptionsReport];
  case DBTEAMLOGEventTypeEmmCreateUsageReport:
    return [self.emmCreateUsageReport isEqual:anEventType.emmCreateUsageReport];
  case DBTEAMLOGEventTypeExportMembersReport:
    return [self.exportMembersReport isEqual:anEventType.exportMembersReport];
  case DBTEAMLOGEventTypePaperAdminExportStart:
    return [self.paperAdminExportStart isEqual:anEventType.paperAdminExportStart];
  case DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport:
    return [self.smartSyncCreateAdminPrivilegeReport isEqual:anEventType.smartSyncCreateAdminPrivilegeReport];
  case DBTEAMLOGEventTypeTeamActivityCreateReport:
    return [self.teamActivityCreateReport isEqual:anEventType.teamActivityCreateReport];
  case DBTEAMLOGEventTypeCollectionShare:
    return [self.collectionShare isEqual:anEventType.collectionShare];
  case DBTEAMLOGEventTypeNoteAclInviteOnly:
    return [self.noteAclInviteOnly isEqual:anEventType.noteAclInviteOnly];
  case DBTEAMLOGEventTypeNoteAclLink:
    return [self.noteAclLink isEqual:anEventType.noteAclLink];
  case DBTEAMLOGEventTypeNoteAclTeamLink:
    return [self.noteAclTeamLink isEqual:anEventType.noteAclTeamLink];
  case DBTEAMLOGEventTypeNoteShared:
    return [self.noteShared isEqual:anEventType.noteShared];
  case DBTEAMLOGEventTypeNoteShareReceive:
    return [self.noteShareReceive isEqual:anEventType.noteShareReceive];
  case DBTEAMLOGEventTypeOpenNoteShared:
    return [self.openNoteShared isEqual:anEventType.openNoteShared];
  case DBTEAMLOGEventTypeSfAddGroup:
    return [self.sfAddGroup isEqual:anEventType.sfAddGroup];
  case DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks:
    return [self.sfAllowNonMembersToViewSharedLinks isEqual:anEventType.sfAllowNonMembersToViewSharedLinks];
  case DBTEAMLOGEventTypeSfExternalInviteWarn:
    return [self.sfExternalInviteWarn isEqual:anEventType.sfExternalInviteWarn];
  case DBTEAMLOGEventTypeSfFbInvite:
    return [self.sfFbInvite isEqual:anEventType.sfFbInvite];
  case DBTEAMLOGEventTypeSfFbInviteChangeRole:
    return [self.sfFbInviteChangeRole isEqual:anEventType.sfFbInviteChangeRole];
  case DBTEAMLOGEventTypeSfFbUninvite:
    return [self.sfFbUninvite isEqual:anEventType.sfFbUninvite];
  case DBTEAMLOGEventTypeSfInviteGroup:
    return [self.sfInviteGroup isEqual:anEventType.sfInviteGroup];
  case DBTEAMLOGEventTypeSfTeamGrantAccess:
    return [self.sfTeamGrantAccess isEqual:anEventType.sfTeamGrantAccess];
  case DBTEAMLOGEventTypeSfTeamInvite:
    return [self.sfTeamInvite isEqual:anEventType.sfTeamInvite];
  case DBTEAMLOGEventTypeSfTeamInviteChangeRole:
    return [self.sfTeamInviteChangeRole isEqual:anEventType.sfTeamInviteChangeRole];
  case DBTEAMLOGEventTypeSfTeamJoin:
    return [self.sfTeamJoin isEqual:anEventType.sfTeamJoin];
  case DBTEAMLOGEventTypeSfTeamJoinFromOobLink:
    return [self.sfTeamJoinFromOobLink isEqual:anEventType.sfTeamJoinFromOobLink];
  case DBTEAMLOGEventTypeSfTeamUninvite:
    return [self.sfTeamUninvite isEqual:anEventType.sfTeamUninvite];
  case DBTEAMLOGEventTypeSharedContentAddInvitees:
    return [self.sharedContentAddInvitees isEqual:anEventType.sharedContentAddInvitees];
  case DBTEAMLOGEventTypeSharedContentAddLinkExpiry:
    return [self.sharedContentAddLinkExpiry isEqual:anEventType.sharedContentAddLinkExpiry];
  case DBTEAMLOGEventTypeSharedContentAddLinkPassword:
    return [self.sharedContentAddLinkPassword isEqual:anEventType.sharedContentAddLinkPassword];
  case DBTEAMLOGEventTypeSharedContentAddMember:
    return [self.sharedContentAddMember isEqual:anEventType.sharedContentAddMember];
  case DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy:
    return [self.sharedContentChangeDownloadsPolicy isEqual:anEventType.sharedContentChangeDownloadsPolicy];
  case DBTEAMLOGEventTypeSharedContentChangeInviteeRole:
    return [self.sharedContentChangeInviteeRole isEqual:anEventType.sharedContentChangeInviteeRole];
  case DBTEAMLOGEventTypeSharedContentChangeLinkAudience:
    return [self.sharedContentChangeLinkAudience isEqual:anEventType.sharedContentChangeLinkAudience];
  case DBTEAMLOGEventTypeSharedContentChangeLinkExpiry:
    return [self.sharedContentChangeLinkExpiry isEqual:anEventType.sharedContentChangeLinkExpiry];
  case DBTEAMLOGEventTypeSharedContentChangeLinkPassword:
    return [self.sharedContentChangeLinkPassword isEqual:anEventType.sharedContentChangeLinkPassword];
  case DBTEAMLOGEventTypeSharedContentChangeMemberRole:
    return [self.sharedContentChangeMemberRole isEqual:anEventType.sharedContentChangeMemberRole];
  case DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy:
    return [self.sharedContentChangeViewerInfoPolicy isEqual:anEventType.sharedContentChangeViewerInfoPolicy];
  case DBTEAMLOGEventTypeSharedContentClaimInvitation:
    return [self.sharedContentClaimInvitation isEqual:anEventType.sharedContentClaimInvitation];
  case DBTEAMLOGEventTypeSharedContentCopy:
    return [self.sharedContentCopy isEqual:anEventType.sharedContentCopy];
  case DBTEAMLOGEventTypeSharedContentDownload:
    return [self.sharedContentDownload isEqual:anEventType.sharedContentDownload];
  case DBTEAMLOGEventTypeSharedContentRelinquishMembership:
    return [self.sharedContentRelinquishMembership isEqual:anEventType.sharedContentRelinquishMembership];
  case DBTEAMLOGEventTypeSharedContentRemoveInvitees:
    return [self.sharedContentRemoveInvitees isEqual:anEventType.sharedContentRemoveInvitees];
  case DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry:
    return [self.sharedContentRemoveLinkExpiry isEqual:anEventType.sharedContentRemoveLinkExpiry];
  case DBTEAMLOGEventTypeSharedContentRemoveLinkPassword:
    return [self.sharedContentRemoveLinkPassword isEqual:anEventType.sharedContentRemoveLinkPassword];
  case DBTEAMLOGEventTypeSharedContentRemoveMember:
    return [self.sharedContentRemoveMember isEqual:anEventType.sharedContentRemoveMember];
  case DBTEAMLOGEventTypeSharedContentRequestAccess:
    return [self.sharedContentRequestAccess isEqual:anEventType.sharedContentRequestAccess];
  case DBTEAMLOGEventTypeSharedContentUnshare:
    return [self.sharedContentUnshare isEqual:anEventType.sharedContentUnshare];
  case DBTEAMLOGEventTypeSharedContentView:
    return [self.sharedContentView isEqual:anEventType.sharedContentView];
  case DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy:
    return [self.sharedFolderChangeLinkPolicy isEqual:anEventType.sharedFolderChangeLinkPolicy];
  case DBTEAMLOGEventTypeSharedFolderChangeMembersInheritancePolicy:
    return [self.sharedFolderChangeMembersInheritancePolicy
        isEqual:anEventType.sharedFolderChangeMembersInheritancePolicy];
  case DBTEAMLOGEventTypeSharedFolderChangeMembersManagementPolicy:
    return
        [self.sharedFolderChangeMembersManagementPolicy isEqual:anEventType.sharedFolderChangeMembersManagementPolicy];
  case DBTEAMLOGEventTypeSharedFolderChangeMembersPolicy:
    return [self.sharedFolderChangeMembersPolicy isEqual:anEventType.sharedFolderChangeMembersPolicy];
  case DBTEAMLOGEventTypeSharedFolderCreate:
    return [self.sharedFolderCreate isEqual:anEventType.sharedFolderCreate];
  case DBTEAMLOGEventTypeSharedFolderDeclineInvitation:
    return [self.sharedFolderDeclineInvitation isEqual:anEventType.sharedFolderDeclineInvitation];
  case DBTEAMLOGEventTypeSharedFolderMount:
    return [self.sharedFolderMount isEqual:anEventType.sharedFolderMount];
  case DBTEAMLOGEventTypeSharedFolderNest:
    return [self.sharedFolderNest isEqual:anEventType.sharedFolderNest];
  case DBTEAMLOGEventTypeSharedFolderTransferOwnership:
    return [self.sharedFolderTransferOwnership isEqual:anEventType.sharedFolderTransferOwnership];
  case DBTEAMLOGEventTypeSharedFolderUnmount:
    return [self.sharedFolderUnmount isEqual:anEventType.sharedFolderUnmount];
  case DBTEAMLOGEventTypeSharedLinkAddExpiry:
    return [self.sharedLinkAddExpiry isEqual:anEventType.sharedLinkAddExpiry];
  case DBTEAMLOGEventTypeSharedLinkChangeExpiry:
    return [self.sharedLinkChangeExpiry isEqual:anEventType.sharedLinkChangeExpiry];
  case DBTEAMLOGEventTypeSharedLinkChangeVisibility:
    return [self.sharedLinkChangeVisibility isEqual:anEventType.sharedLinkChangeVisibility];
  case DBTEAMLOGEventTypeSharedLinkCopy:
    return [self.sharedLinkCopy isEqual:anEventType.sharedLinkCopy];
  case DBTEAMLOGEventTypeSharedLinkCreate:
    return [self.sharedLinkCreate isEqual:anEventType.sharedLinkCreate];
  case DBTEAMLOGEventTypeSharedLinkDisable:
    return [self.sharedLinkDisable isEqual:anEventType.sharedLinkDisable];
  case DBTEAMLOGEventTypeSharedLinkDownload:
    return [self.sharedLinkDownload isEqual:anEventType.sharedLinkDownload];
  case DBTEAMLOGEventTypeSharedLinkRemoveExpiry:
    return [self.sharedLinkRemoveExpiry isEqual:anEventType.sharedLinkRemoveExpiry];
  case DBTEAMLOGEventTypeSharedLinkShare:
    return [self.sharedLinkShare isEqual:anEventType.sharedLinkShare];
  case DBTEAMLOGEventTypeSharedLinkView:
    return [self.sharedLinkView isEqual:anEventType.sharedLinkView];
  case DBTEAMLOGEventTypeSharedNoteOpened:
    return [self.sharedNoteOpened isEqual:anEventType.sharedNoteOpened];
  case DBTEAMLOGEventTypeShmodelGroupShare:
    return [self.shmodelGroupShare isEqual:anEventType.shmodelGroupShare];
  case DBTEAMLOGEventTypeShowcaseAccessGranted:
    return [self.showcaseAccessGranted isEqual:anEventType.showcaseAccessGranted];
  case DBTEAMLOGEventTypeShowcaseAddMember:
    return [self.showcaseAddMember isEqual:anEventType.showcaseAddMember];
  case DBTEAMLOGEventTypeShowcaseArchived:
    return [self.showcaseArchived isEqual:anEventType.showcaseArchived];
  case DBTEAMLOGEventTypeShowcaseCreated:
    return [self.showcaseCreated isEqual:anEventType.showcaseCreated];
  case DBTEAMLOGEventTypeShowcaseDeleteComment:
    return [self.showcaseDeleteComment isEqual:anEventType.showcaseDeleteComment];
  case DBTEAMLOGEventTypeShowcaseEdited:
    return [self.showcaseEdited isEqual:anEventType.showcaseEdited];
  case DBTEAMLOGEventTypeShowcaseEditComment:
    return [self.showcaseEditComment isEqual:anEventType.showcaseEditComment];
  case DBTEAMLOGEventTypeShowcaseFileAdded:
    return [self.showcaseFileAdded isEqual:anEventType.showcaseFileAdded];
  case DBTEAMLOGEventTypeShowcaseFileDownload:
    return [self.showcaseFileDownload isEqual:anEventType.showcaseFileDownload];
  case DBTEAMLOGEventTypeShowcaseFileRemoved:
    return [self.showcaseFileRemoved isEqual:anEventType.showcaseFileRemoved];
  case DBTEAMLOGEventTypeShowcaseFileView:
    return [self.showcaseFileView isEqual:anEventType.showcaseFileView];
  case DBTEAMLOGEventTypeShowcasePermanentlyDeleted:
    return [self.showcasePermanentlyDeleted isEqual:anEventType.showcasePermanentlyDeleted];
  case DBTEAMLOGEventTypeShowcasePostComment:
    return [self.showcasePostComment isEqual:anEventType.showcasePostComment];
  case DBTEAMLOGEventTypeShowcaseRemoveMember:
    return [self.showcaseRemoveMember isEqual:anEventType.showcaseRemoveMember];
  case DBTEAMLOGEventTypeShowcaseRenamed:
    return [self.showcaseRenamed isEqual:anEventType.showcaseRenamed];
  case DBTEAMLOGEventTypeShowcaseRequestAccess:
    return [self.showcaseRequestAccess isEqual:anEventType.showcaseRequestAccess];
  case DBTEAMLOGEventTypeShowcaseResolveComment:
    return [self.showcaseResolveComment isEqual:anEventType.showcaseResolveComment];
  case DBTEAMLOGEventTypeShowcaseRestored:
    return [self.showcaseRestored isEqual:anEventType.showcaseRestored];
  case DBTEAMLOGEventTypeShowcaseTrashed:
    return [self.showcaseTrashed isEqual:anEventType.showcaseTrashed];
  case DBTEAMLOGEventTypeShowcaseTrashedDeprecated:
    return [self.showcaseTrashedDeprecated isEqual:anEventType.showcaseTrashedDeprecated];
  case DBTEAMLOGEventTypeShowcaseUnresolveComment:
    return [self.showcaseUnresolveComment isEqual:anEventType.showcaseUnresolveComment];
  case DBTEAMLOGEventTypeShowcaseUntrashed:
    return [self.showcaseUntrashed isEqual:anEventType.showcaseUntrashed];
  case DBTEAMLOGEventTypeShowcaseUntrashedDeprecated:
    return [self.showcaseUntrashedDeprecated isEqual:anEventType.showcaseUntrashedDeprecated];
  case DBTEAMLOGEventTypeShowcaseView:
    return [self.showcaseView isEqual:anEventType.showcaseView];
  case DBTEAMLOGEventTypeSsoAddCert:
    return [self.ssoAddCert isEqual:anEventType.ssoAddCert];
  case DBTEAMLOGEventTypeSsoAddLoginUrl:
    return [self.ssoAddLoginUrl isEqual:anEventType.ssoAddLoginUrl];
  case DBTEAMLOGEventTypeSsoAddLogoutUrl:
    return [self.ssoAddLogoutUrl isEqual:anEventType.ssoAddLogoutUrl];
  case DBTEAMLOGEventTypeSsoChangeCert:
    return [self.ssoChangeCert isEqual:anEventType.ssoChangeCert];
  case DBTEAMLOGEventTypeSsoChangeLoginUrl:
    return [self.ssoChangeLoginUrl isEqual:anEventType.ssoChangeLoginUrl];
  case DBTEAMLOGEventTypeSsoChangeLogoutUrl:
    return [self.ssoChangeLogoutUrl isEqual:anEventType.ssoChangeLogoutUrl];
  case DBTEAMLOGEventTypeSsoChangeSamlIdentityMode:
    return [self.ssoChangeSamlIdentityMode isEqual:anEventType.ssoChangeSamlIdentityMode];
  case DBTEAMLOGEventTypeSsoRemoveCert:
    return [self.ssoRemoveCert isEqual:anEventType.ssoRemoveCert];
  case DBTEAMLOGEventTypeSsoRemoveLoginUrl:
    return [self.ssoRemoveLoginUrl isEqual:anEventType.ssoRemoveLoginUrl];
  case DBTEAMLOGEventTypeSsoRemoveLogoutUrl:
    return [self.ssoRemoveLogoutUrl isEqual:anEventType.ssoRemoveLogoutUrl];
  case DBTEAMLOGEventTypeTeamFolderChangeStatus:
    return [self.teamFolderChangeStatus isEqual:anEventType.teamFolderChangeStatus];
  case DBTEAMLOGEventTypeTeamFolderCreate:
    return [self.teamFolderCreate isEqual:anEventType.teamFolderCreate];
  case DBTEAMLOGEventTypeTeamFolderDowngrade:
    return [self.teamFolderDowngrade isEqual:anEventType.teamFolderDowngrade];
  case DBTEAMLOGEventTypeTeamFolderPermanentlyDelete:
    return [self.teamFolderPermanentlyDelete isEqual:anEventType.teamFolderPermanentlyDelete];
  case DBTEAMLOGEventTypeTeamFolderRename:
    return [self.teamFolderRename isEqual:anEventType.teamFolderRename];
  case DBTEAMLOGEventTypeTeamSelectiveSyncSettingsChanged:
    return [self.teamSelectiveSyncSettingsChanged isEqual:anEventType.teamSelectiveSyncSettingsChanged];
  case DBTEAMLOGEventTypeAccountCaptureChangePolicy:
    return [self.accountCaptureChangePolicy isEqual:anEventType.accountCaptureChangePolicy];
  case DBTEAMLOGEventTypeAllowDownloadDisabled:
    return [self.allowDownloadDisabled isEqual:anEventType.allowDownloadDisabled];
  case DBTEAMLOGEventTypeAllowDownloadEnabled:
    return [self.allowDownloadEnabled isEqual:anEventType.allowDownloadEnabled];
  case DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy:
    return [self.dataPlacementRestrictionChangePolicy isEqual:anEventType.dataPlacementRestrictionChangePolicy];
  case DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy:
    return [self.dataPlacementRestrictionSatisfyPolicy isEqual:anEventType.dataPlacementRestrictionSatisfyPolicy];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy:
    return [self.deviceApprovalsChangeDesktopPolicy isEqual:anEventType.deviceApprovalsChangeDesktopPolicy];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy:
    return [self.deviceApprovalsChangeMobilePolicy isEqual:anEventType.deviceApprovalsChangeMobilePolicy];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction:
    return [self.deviceApprovalsChangeOverageAction isEqual:anEventType.deviceApprovalsChangeOverageAction];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction:
    return [self.deviceApprovalsChangeUnlinkAction isEqual:anEventType.deviceApprovalsChangeUnlinkAction];
  case DBTEAMLOGEventTypeDirectoryRestrictionsAddMembers:
    return [self.directoryRestrictionsAddMembers isEqual:anEventType.directoryRestrictionsAddMembers];
  case DBTEAMLOGEventTypeDirectoryRestrictionsRemoveMembers:
    return [self.directoryRestrictionsRemoveMembers isEqual:anEventType.directoryRestrictionsRemoveMembers];
  case DBTEAMLOGEventTypeEmmAddException:
    return [self.emmAddException isEqual:anEventType.emmAddException];
  case DBTEAMLOGEventTypeEmmChangePolicy:
    return [self.emmChangePolicy isEqual:anEventType.emmChangePolicy];
  case DBTEAMLOGEventTypeEmmRemoveException:
    return [self.emmRemoveException isEqual:anEventType.emmRemoveException];
  case DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy:
    return [self.extendedVersionHistoryChangePolicy isEqual:anEventType.extendedVersionHistoryChangePolicy];
  case DBTEAMLOGEventTypeFileCommentsChangePolicy:
    return [self.fileCommentsChangePolicy isEqual:anEventType.fileCommentsChangePolicy];
  case DBTEAMLOGEventTypeFileRequestsChangePolicy:
    return [self.fileRequestsChangePolicy isEqual:anEventType.fileRequestsChangePolicy];
  case DBTEAMLOGEventTypeFileRequestsEmailsEnabled:
    return [self.fileRequestsEmailsEnabled isEqual:anEventType.fileRequestsEmailsEnabled];
  case DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly:
    return [self.fileRequestsEmailsRestrictedToTeamOnly isEqual:anEventType.fileRequestsEmailsRestrictedToTeamOnly];
  case DBTEAMLOGEventTypeGoogleSsoChangePolicy:
    return [self.googleSsoChangePolicy isEqual:anEventType.googleSsoChangePolicy];
  case DBTEAMLOGEventTypeGroupUserManagementChangePolicy:
    return [self.groupUserManagementChangePolicy isEqual:anEventType.groupUserManagementChangePolicy];
  case DBTEAMLOGEventTypeMemberRequestsChangePolicy:
    return [self.memberRequestsChangePolicy isEqual:anEventType.memberRequestsChangePolicy];
  case DBTEAMLOGEventTypeMemberSpaceLimitsAddException:
    return [self.memberSpaceLimitsAddException isEqual:anEventType.memberSpaceLimitsAddException];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeCapsTypePolicy:
    return [self.memberSpaceLimitsChangeCapsTypePolicy isEqual:anEventType.memberSpaceLimitsChangeCapsTypePolicy];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy:
    return [self.memberSpaceLimitsChangePolicy isEqual:anEventType.memberSpaceLimitsChangePolicy];
  case DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException:
    return [self.memberSpaceLimitsRemoveException isEqual:anEventType.memberSpaceLimitsRemoveException];
  case DBTEAMLOGEventTypeMemberSuggestionsChangePolicy:
    return [self.memberSuggestionsChangePolicy isEqual:anEventType.memberSuggestionsChangePolicy];
  case DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy:
    return [self.microsoftOfficeAddinChangePolicy isEqual:anEventType.microsoftOfficeAddinChangePolicy];
  case DBTEAMLOGEventTypeNetworkControlChangePolicy:
    return [self.networkControlChangePolicy isEqual:anEventType.networkControlChangePolicy];
  case DBTEAMLOGEventTypePaperChangeDeploymentPolicy:
    return [self.paperChangeDeploymentPolicy isEqual:anEventType.paperChangeDeploymentPolicy];
  case DBTEAMLOGEventTypePaperChangeMemberLinkPolicy:
    return [self.paperChangeMemberLinkPolicy isEqual:anEventType.paperChangeMemberLinkPolicy];
  case DBTEAMLOGEventTypePaperChangeMemberPolicy:
    return [self.paperChangeMemberPolicy isEqual:anEventType.paperChangeMemberPolicy];
  case DBTEAMLOGEventTypePaperChangePolicy:
    return [self.paperChangePolicy isEqual:anEventType.paperChangePolicy];
  case DBTEAMLOGEventTypePaperEnabledUsersGroupAddition:
    return [self.paperEnabledUsersGroupAddition isEqual:anEventType.paperEnabledUsersGroupAddition];
  case DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval:
    return [self.paperEnabledUsersGroupRemoval isEqual:anEventType.paperEnabledUsersGroupRemoval];
  case DBTEAMLOGEventTypePermanentDeleteChangePolicy:
    return [self.permanentDeleteChangePolicy isEqual:anEventType.permanentDeleteChangePolicy];
  case DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy:
    return [self.sharingChangeFolderJoinPolicy isEqual:anEventType.sharingChangeFolderJoinPolicy];
  case DBTEAMLOGEventTypeSharingChangeLinkPolicy:
    return [self.sharingChangeLinkPolicy isEqual:anEventType.sharingChangeLinkPolicy];
  case DBTEAMLOGEventTypeSharingChangeMemberPolicy:
    return [self.sharingChangeMemberPolicy isEqual:anEventType.sharingChangeMemberPolicy];
  case DBTEAMLOGEventTypeShowcaseChangeDownloadPolicy:
    return [self.showcaseChangeDownloadPolicy isEqual:anEventType.showcaseChangeDownloadPolicy];
  case DBTEAMLOGEventTypeShowcaseChangeEnabledPolicy:
    return [self.showcaseChangeEnabledPolicy isEqual:anEventType.showcaseChangeEnabledPolicy];
  case DBTEAMLOGEventTypeShowcaseChangeExternalSharingPolicy:
    return [self.showcaseChangeExternalSharingPolicy isEqual:anEventType.showcaseChangeExternalSharingPolicy];
  case DBTEAMLOGEventTypeSmartSyncChangePolicy:
    return [self.smartSyncChangePolicy isEqual:anEventType.smartSyncChangePolicy];
  case DBTEAMLOGEventTypeSmartSyncNotOptOut:
    return [self.smartSyncNotOptOut isEqual:anEventType.smartSyncNotOptOut];
  case DBTEAMLOGEventTypeSmartSyncOptOut:
    return [self.smartSyncOptOut isEqual:anEventType.smartSyncOptOut];
  case DBTEAMLOGEventTypeSsoChangePolicy:
    return [self.ssoChangePolicy isEqual:anEventType.ssoChangePolicy];
  case DBTEAMLOGEventTypeTfaChangePolicy:
    return [self.tfaChangePolicy isEqual:anEventType.tfaChangePolicy];
  case DBTEAMLOGEventTypeTwoAccountChangePolicy:
    return [self.twoAccountChangePolicy isEqual:anEventType.twoAccountChangePolicy];
  case DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy:
    return [self.webSessionsChangeFixedLengthPolicy isEqual:anEventType.webSessionsChangeFixedLengthPolicy];
  case DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy:
    return [self.webSessionsChangeIdleLengthPolicy isEqual:anEventType.webSessionsChangeIdleLengthPolicy];
  case DBTEAMLOGEventTypeTeamMergeFrom:
    return [self.teamMergeFrom isEqual:anEventType.teamMergeFrom];
  case DBTEAMLOGEventTypeTeamMergeTo:
    return [self.teamMergeTo isEqual:anEventType.teamMergeTo];
  case DBTEAMLOGEventTypeTeamProfileAddLogo:
    return [self.teamProfileAddLogo isEqual:anEventType.teamProfileAddLogo];
  case DBTEAMLOGEventTypeTeamProfileChangeDefaultLanguage:
    return [self.teamProfileChangeDefaultLanguage isEqual:anEventType.teamProfileChangeDefaultLanguage];
  case DBTEAMLOGEventTypeTeamProfileChangeLogo:
    return [self.teamProfileChangeLogo isEqual:anEventType.teamProfileChangeLogo];
  case DBTEAMLOGEventTypeTeamProfileChangeName:
    return [self.teamProfileChangeName isEqual:anEventType.teamProfileChangeName];
  case DBTEAMLOGEventTypeTeamProfileRemoveLogo:
    return [self.teamProfileRemoveLogo isEqual:anEventType.teamProfileRemoveLogo];
  case DBTEAMLOGEventTypeTfaAddBackupPhone:
    return [self.tfaAddBackupPhone isEqual:anEventType.tfaAddBackupPhone];
  case DBTEAMLOGEventTypeTfaAddSecurityKey:
    return [self.tfaAddSecurityKey isEqual:anEventType.tfaAddSecurityKey];
  case DBTEAMLOGEventTypeTfaChangeBackupPhone:
    return [self.tfaChangeBackupPhone isEqual:anEventType.tfaChangeBackupPhone];
  case DBTEAMLOGEventTypeTfaChangeStatus:
    return [self.tfaChangeStatus isEqual:anEventType.tfaChangeStatus];
  case DBTEAMLOGEventTypeTfaRemoveBackupPhone:
    return [self.tfaRemoveBackupPhone isEqual:anEventType.tfaRemoveBackupPhone];
  case DBTEAMLOGEventTypeTfaRemoveSecurityKey:
    return [self.tfaRemoveSecurityKey isEqual:anEventType.tfaRemoveSecurityKey];
  case DBTEAMLOGEventTypeTfaReset:
    return [self.tfaReset isEqual:anEventType.tfaReset];
  case DBTEAMLOGEventTypeOther:
    return [[self tagName] isEqual:[anEventType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEventTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEventType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAppLinkTeam]) {
    jsonDict = [[DBTEAMLOGAppLinkTeamTypeSerializer serialize:valueObj.appLinkTeam] mutableCopy];
    jsonDict[@".tag"] = @"app_link_team";
  } else if ([valueObj isAppLinkUser]) {
    jsonDict = [[DBTEAMLOGAppLinkUserTypeSerializer serialize:valueObj.appLinkUser] mutableCopy];
    jsonDict[@".tag"] = @"app_link_user";
  } else if ([valueObj isAppUnlinkTeam]) {
    jsonDict = [[DBTEAMLOGAppUnlinkTeamTypeSerializer serialize:valueObj.appUnlinkTeam] mutableCopy];
    jsonDict[@".tag"] = @"app_unlink_team";
  } else if ([valueObj isAppUnlinkUser]) {
    jsonDict = [[DBTEAMLOGAppUnlinkUserTypeSerializer serialize:valueObj.appUnlinkUser] mutableCopy];
    jsonDict[@".tag"] = @"app_unlink_user";
  } else if ([valueObj isFileAddComment]) {
    jsonDict = [[DBTEAMLOGFileAddCommentTypeSerializer serialize:valueObj.fileAddComment] mutableCopy];
    jsonDict[@".tag"] = @"file_add_comment";
  } else if ([valueObj isFileChangeCommentSubscription]) {
    jsonDict = [[DBTEAMLOGFileChangeCommentSubscriptionTypeSerializer serialize:valueObj.fileChangeCommentSubscription]
        mutableCopy];
    jsonDict[@".tag"] = @"file_change_comment_subscription";
  } else if ([valueObj isFileDeleteComment]) {
    jsonDict = [[DBTEAMLOGFileDeleteCommentTypeSerializer serialize:valueObj.fileDeleteComment] mutableCopy];
    jsonDict[@".tag"] = @"file_delete_comment";
  } else if ([valueObj isFileLikeComment]) {
    jsonDict = [[DBTEAMLOGFileLikeCommentTypeSerializer serialize:valueObj.fileLikeComment] mutableCopy];
    jsonDict[@".tag"] = @"file_like_comment";
  } else if ([valueObj isFileResolveComment]) {
    jsonDict = [[DBTEAMLOGFileResolveCommentTypeSerializer serialize:valueObj.fileResolveComment] mutableCopy];
    jsonDict[@".tag"] = @"file_resolve_comment";
  } else if ([valueObj isFileUnlikeComment]) {
    jsonDict = [[DBTEAMLOGFileUnlikeCommentTypeSerializer serialize:valueObj.fileUnlikeComment] mutableCopy];
    jsonDict[@".tag"] = @"file_unlike_comment";
  } else if ([valueObj isFileUnresolveComment]) {
    jsonDict = [[DBTEAMLOGFileUnresolveCommentTypeSerializer serialize:valueObj.fileUnresolveComment] mutableCopy];
    jsonDict[@".tag"] = @"file_unresolve_comment";
  } else if ([valueObj isDeviceChangeIpDesktop]) {
    jsonDict = [[DBTEAMLOGDeviceChangeIpDesktopTypeSerializer serialize:valueObj.deviceChangeIpDesktop] mutableCopy];
    jsonDict[@".tag"] = @"device_change_ip_desktop";
  } else if ([valueObj isDeviceChangeIpMobile]) {
    jsonDict = [[DBTEAMLOGDeviceChangeIpMobileTypeSerializer serialize:valueObj.deviceChangeIpMobile] mutableCopy];
    jsonDict[@".tag"] = @"device_change_ip_mobile";
  } else if ([valueObj isDeviceChangeIpWeb]) {
    jsonDict = [[DBTEAMLOGDeviceChangeIpWebTypeSerializer serialize:valueObj.deviceChangeIpWeb] mutableCopy];
    jsonDict[@".tag"] = @"device_change_ip_web";
  } else if ([valueObj isDeviceDeleteOnUnlinkFail]) {
    jsonDict =
        [[DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer serialize:valueObj.deviceDeleteOnUnlinkFail] mutableCopy];
    jsonDict[@".tag"] = @"device_delete_on_unlink_fail";
  } else if ([valueObj isDeviceDeleteOnUnlinkSuccess]) {
    jsonDict = [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer serialize:valueObj.deviceDeleteOnUnlinkSuccess]
        mutableCopy];
    jsonDict[@".tag"] = @"device_delete_on_unlink_success";
  } else if ([valueObj isDeviceLinkFail]) {
    jsonDict = [[DBTEAMLOGDeviceLinkFailTypeSerializer serialize:valueObj.deviceLinkFail] mutableCopy];
    jsonDict[@".tag"] = @"device_link_fail";
  } else if ([valueObj isDeviceLinkSuccess]) {
    jsonDict = [[DBTEAMLOGDeviceLinkSuccessTypeSerializer serialize:valueObj.deviceLinkSuccess] mutableCopy];
    jsonDict[@".tag"] = @"device_link_success";
  } else if ([valueObj isDeviceManagementDisabled]) {
    jsonDict =
        [[DBTEAMLOGDeviceManagementDisabledTypeSerializer serialize:valueObj.deviceManagementDisabled] mutableCopy];
    jsonDict[@".tag"] = @"device_management_disabled";
  } else if ([valueObj isDeviceManagementEnabled]) {
    jsonDict =
        [[DBTEAMLOGDeviceManagementEnabledTypeSerializer serialize:valueObj.deviceManagementEnabled] mutableCopy];
    jsonDict[@".tag"] = @"device_management_enabled";
  } else if ([valueObj isDeviceUnlink]) {
    jsonDict = [[DBTEAMLOGDeviceUnlinkTypeSerializer serialize:valueObj.deviceUnlink] mutableCopy];
    jsonDict[@".tag"] = @"device_unlink";
  } else if ([valueObj isEmmRefreshAuthToken]) {
    jsonDict = [[DBTEAMLOGEmmRefreshAuthTokenTypeSerializer serialize:valueObj.emmRefreshAuthToken] mutableCopy];
    jsonDict[@".tag"] = @"emm_refresh_auth_token";
  } else if ([valueObj isAccountCaptureChangeAvailability]) {
    jsonDict = [[DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer
        serialize:valueObj.accountCaptureChangeAvailability] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_change_availability";
  } else if ([valueObj isAccountCaptureMigrateAccount]) {
    jsonDict = [[DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer serialize:valueObj.accountCaptureMigrateAccount]
        mutableCopy];
    jsonDict[@".tag"] = @"account_capture_migrate_account";
  } else if ([valueObj isAccountCaptureNotificationEmailsSent]) {
    jsonDict = [[DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer
        serialize:valueObj.accountCaptureNotificationEmailsSent] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_notification_emails_sent";
  } else if ([valueObj isAccountCaptureRelinquishAccount]) {
    jsonDict = [[DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer
        serialize:valueObj.accountCaptureRelinquishAccount] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_relinquish_account";
  } else if ([valueObj isDisabledDomainInvites]) {
    jsonDict = [[DBTEAMLOGDisabledDomainInvitesTypeSerializer serialize:valueObj.disabledDomainInvites] mutableCopy];
    jsonDict[@".tag"] = @"disabled_domain_invites";
  } else if ([valueObj isDomainInvitesApproveRequestToJoinTeam]) {
    jsonDict = [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer
        serialize:valueObj.domainInvitesApproveRequestToJoinTeam] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_approve_request_to_join_team";
  } else if ([valueObj isDomainInvitesDeclineRequestToJoinTeam]) {
    jsonDict = [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer
        serialize:valueObj.domainInvitesDeclineRequestToJoinTeam] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_decline_request_to_join_team";
  } else if ([valueObj isDomainInvitesEmailExistingUsers]) {
    jsonDict = [[DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer
        serialize:valueObj.domainInvitesEmailExistingUsers] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_email_existing_users";
  } else if ([valueObj isDomainInvitesRequestToJoinTeam]) {
    jsonDict = [[DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer
        serialize:valueObj.domainInvitesRequestToJoinTeam] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_request_to_join_team";
  } else if ([valueObj isDomainInvitesSetInviteNewUserPrefToNo]) {
    jsonDict = [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer
        serialize:valueObj.domainInvitesSetInviteNewUserPrefToNo] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_set_invite_new_user_pref_to_no";
  } else if ([valueObj isDomainInvitesSetInviteNewUserPrefToYes]) {
    jsonDict = [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer
        serialize:valueObj.domainInvitesSetInviteNewUserPrefToYes] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_set_invite_new_user_pref_to_yes";
  } else if ([valueObj isDomainVerificationAddDomainFail]) {
    jsonDict = [[DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer
        serialize:valueObj.domainVerificationAddDomainFail] mutableCopy];
    jsonDict[@".tag"] = @"domain_verification_add_domain_fail";
  } else if ([valueObj isDomainVerificationAddDomainSuccess]) {
    jsonDict = [[DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer
        serialize:valueObj.domainVerificationAddDomainSuccess] mutableCopy];
    jsonDict[@".tag"] = @"domain_verification_add_domain_success";
  } else if ([valueObj isDomainVerificationRemoveDomain]) {
    jsonDict = [[DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer
        serialize:valueObj.domainVerificationRemoveDomain] mutableCopy];
    jsonDict[@".tag"] = @"domain_verification_remove_domain";
  } else if ([valueObj isEnabledDomainInvites]) {
    jsonDict = [[DBTEAMLOGEnabledDomainInvitesTypeSerializer serialize:valueObj.enabledDomainInvites] mutableCopy];
    jsonDict[@".tag"] = @"enabled_domain_invites";
  } else if ([valueObj isCreateFolder]) {
    jsonDict = [[DBTEAMLOGCreateFolderTypeSerializer serialize:valueObj.createFolder] mutableCopy];
    jsonDict[@".tag"] = @"create_folder";
  } else if ([valueObj isFileAdd]) {
    jsonDict = [[DBTEAMLOGFileAddTypeSerializer serialize:valueObj.fileAdd] mutableCopy];
    jsonDict[@".tag"] = @"file_add";
  } else if ([valueObj isFileCopy]) {
    jsonDict = [[DBTEAMLOGFileCopyTypeSerializer serialize:valueObj.fileCopy] mutableCopy];
    jsonDict[@".tag"] = @"file_copy";
  } else if ([valueObj isFileDelete]) {
    jsonDict = [[DBTEAMLOGFileDeleteTypeSerializer serialize:valueObj.fileDelete] mutableCopy];
    jsonDict[@".tag"] = @"file_delete";
  } else if ([valueObj isFileDownload]) {
    jsonDict = [[DBTEAMLOGFileDownloadTypeSerializer serialize:valueObj.fileDownload] mutableCopy];
    jsonDict[@".tag"] = @"file_download";
  } else if ([valueObj isFileEdit]) {
    jsonDict = [[DBTEAMLOGFileEditTypeSerializer serialize:valueObj.fileEdit] mutableCopy];
    jsonDict[@".tag"] = @"file_edit";
  } else if ([valueObj isFileGetCopyReference]) {
    jsonDict = [[DBTEAMLOGFileGetCopyReferenceTypeSerializer serialize:valueObj.fileGetCopyReference] mutableCopy];
    jsonDict[@".tag"] = @"file_get_copy_reference";
  } else if ([valueObj isFileMove]) {
    jsonDict = [[DBTEAMLOGFileMoveTypeSerializer serialize:valueObj.fileMove] mutableCopy];
    jsonDict[@".tag"] = @"file_move";
  } else if ([valueObj isFilePermanentlyDelete]) {
    jsonDict = [[DBTEAMLOGFilePermanentlyDeleteTypeSerializer serialize:valueObj.filePermanentlyDelete] mutableCopy];
    jsonDict[@".tag"] = @"file_permanently_delete";
  } else if ([valueObj isFilePreview]) {
    jsonDict = [[DBTEAMLOGFilePreviewTypeSerializer serialize:valueObj.filePreview] mutableCopy];
    jsonDict[@".tag"] = @"file_preview";
  } else if ([valueObj isFileRename]) {
    jsonDict = [[DBTEAMLOGFileRenameTypeSerializer serialize:valueObj.fileRename] mutableCopy];
    jsonDict[@".tag"] = @"file_rename";
  } else if ([valueObj isFileRestore]) {
    jsonDict = [[DBTEAMLOGFileRestoreTypeSerializer serialize:valueObj.fileRestore] mutableCopy];
    jsonDict[@".tag"] = @"file_restore";
  } else if ([valueObj isFileRevert]) {
    jsonDict = [[DBTEAMLOGFileRevertTypeSerializer serialize:valueObj.fileRevert] mutableCopy];
    jsonDict[@".tag"] = @"file_revert";
  } else if ([valueObj isFileRollbackChanges]) {
    jsonDict = [[DBTEAMLOGFileRollbackChangesTypeSerializer serialize:valueObj.fileRollbackChanges] mutableCopy];
    jsonDict[@".tag"] = @"file_rollback_changes";
  } else if ([valueObj isFileSaveCopyReference]) {
    jsonDict = [[DBTEAMLOGFileSaveCopyReferenceTypeSerializer serialize:valueObj.fileSaveCopyReference] mutableCopy];
    jsonDict[@".tag"] = @"file_save_copy_reference";
  } else if ([valueObj isFileRequestChange]) {
    jsonDict = [[DBTEAMLOGFileRequestChangeTypeSerializer serialize:valueObj.fileRequestChange] mutableCopy];
    jsonDict[@".tag"] = @"file_request_change";
  } else if ([valueObj isFileRequestClose]) {
    jsonDict = [[DBTEAMLOGFileRequestCloseTypeSerializer serialize:valueObj.fileRequestClose] mutableCopy];
    jsonDict[@".tag"] = @"file_request_close";
  } else if ([valueObj isFileRequestCreate]) {
    jsonDict = [[DBTEAMLOGFileRequestCreateTypeSerializer serialize:valueObj.fileRequestCreate] mutableCopy];
    jsonDict[@".tag"] = @"file_request_create";
  } else if ([valueObj isFileRequestReceiveFile]) {
    jsonDict = [[DBTEAMLOGFileRequestReceiveFileTypeSerializer serialize:valueObj.fileRequestReceiveFile] mutableCopy];
    jsonDict[@".tag"] = @"file_request_receive_file";
  } else if ([valueObj isGroupAddExternalId]) {
    jsonDict = [[DBTEAMLOGGroupAddExternalIdTypeSerializer serialize:valueObj.groupAddExternalId] mutableCopy];
    jsonDict[@".tag"] = @"group_add_external_id";
  } else if ([valueObj isGroupAddMember]) {
    jsonDict = [[DBTEAMLOGGroupAddMemberTypeSerializer serialize:valueObj.groupAddMember] mutableCopy];
    jsonDict[@".tag"] = @"group_add_member";
  } else if ([valueObj isGroupChangeExternalId]) {
    jsonDict = [[DBTEAMLOGGroupChangeExternalIdTypeSerializer serialize:valueObj.groupChangeExternalId] mutableCopy];
    jsonDict[@".tag"] = @"group_change_external_id";
  } else if ([valueObj isGroupChangeManagementType]) {
    jsonDict =
        [[DBTEAMLOGGroupChangeManagementTypeTypeSerializer serialize:valueObj.groupChangeManagementType] mutableCopy];
    jsonDict[@".tag"] = @"group_change_management_type";
  } else if ([valueObj isGroupChangeMemberRole]) {
    jsonDict = [[DBTEAMLOGGroupChangeMemberRoleTypeSerializer serialize:valueObj.groupChangeMemberRole] mutableCopy];
    jsonDict[@".tag"] = @"group_change_member_role";
  } else if ([valueObj isGroupCreate]) {
    jsonDict = [[DBTEAMLOGGroupCreateTypeSerializer serialize:valueObj.groupCreate] mutableCopy];
    jsonDict[@".tag"] = @"group_create";
  } else if ([valueObj isGroupDelete]) {
    jsonDict = [[DBTEAMLOGGroupDeleteTypeSerializer serialize:valueObj.groupDelete] mutableCopy];
    jsonDict[@".tag"] = @"group_delete";
  } else if ([valueObj isGroupDescriptionUpdated]) {
    jsonDict =
        [[DBTEAMLOGGroupDescriptionUpdatedTypeSerializer serialize:valueObj.groupDescriptionUpdated] mutableCopy];
    jsonDict[@".tag"] = @"group_description_updated";
  } else if ([valueObj isGroupJoinPolicyUpdated]) {
    jsonDict = [[DBTEAMLOGGroupJoinPolicyUpdatedTypeSerializer serialize:valueObj.groupJoinPolicyUpdated] mutableCopy];
    jsonDict[@".tag"] = @"group_join_policy_updated";
  } else if ([valueObj isGroupMoved]) {
    jsonDict = [[DBTEAMLOGGroupMovedTypeSerializer serialize:valueObj.groupMoved] mutableCopy];
    jsonDict[@".tag"] = @"group_moved";
  } else if ([valueObj isGroupRemoveExternalId]) {
    jsonDict = [[DBTEAMLOGGroupRemoveExternalIdTypeSerializer serialize:valueObj.groupRemoveExternalId] mutableCopy];
    jsonDict[@".tag"] = @"group_remove_external_id";
  } else if ([valueObj isGroupRemoveMember]) {
    jsonDict = [[DBTEAMLOGGroupRemoveMemberTypeSerializer serialize:valueObj.groupRemoveMember] mutableCopy];
    jsonDict[@".tag"] = @"group_remove_member";
  } else if ([valueObj isGroupRename]) {
    jsonDict = [[DBTEAMLOGGroupRenameTypeSerializer serialize:valueObj.groupRename] mutableCopy];
    jsonDict[@".tag"] = @"group_rename";
  } else if ([valueObj isEmmError]) {
    jsonDict = [[DBTEAMLOGEmmErrorTypeSerializer serialize:valueObj.emmError] mutableCopy];
    jsonDict[@".tag"] = @"emm_error";
  } else if ([valueObj isLoginFail]) {
    jsonDict = [[DBTEAMLOGLoginFailTypeSerializer serialize:valueObj.loginFail] mutableCopy];
    jsonDict[@".tag"] = @"login_fail";
  } else if ([valueObj isLoginSuccess]) {
    jsonDict = [[DBTEAMLOGLoginSuccessTypeSerializer serialize:valueObj.loginSuccess] mutableCopy];
    jsonDict[@".tag"] = @"login_success";
  } else if ([valueObj isLogout]) {
    jsonDict = [[DBTEAMLOGLogoutTypeSerializer serialize:valueObj.logout] mutableCopy];
    jsonDict[@".tag"] = @"logout";
  } else if ([valueObj isResellerSupportSessionEnd]) {
    jsonDict =
        [[DBTEAMLOGResellerSupportSessionEndTypeSerializer serialize:valueObj.resellerSupportSessionEnd] mutableCopy];
    jsonDict[@".tag"] = @"reseller_support_session_end";
  } else if ([valueObj isResellerSupportSessionStart]) {
    jsonDict = [[DBTEAMLOGResellerSupportSessionStartTypeSerializer serialize:valueObj.resellerSupportSessionStart]
        mutableCopy];
    jsonDict[@".tag"] = @"reseller_support_session_start";
  } else if ([valueObj isSignInAsSessionEnd]) {
    jsonDict = [[DBTEAMLOGSignInAsSessionEndTypeSerializer serialize:valueObj.signInAsSessionEnd] mutableCopy];
    jsonDict[@".tag"] = @"sign_in_as_session_end";
  } else if ([valueObj isSignInAsSessionStart]) {
    jsonDict = [[DBTEAMLOGSignInAsSessionStartTypeSerializer serialize:valueObj.signInAsSessionStart] mutableCopy];
    jsonDict[@".tag"] = @"sign_in_as_session_start";
  } else if ([valueObj isSsoError]) {
    jsonDict = [[DBTEAMLOGSsoErrorTypeSerializer serialize:valueObj.ssoError] mutableCopy];
    jsonDict[@".tag"] = @"sso_error";
  } else if ([valueObj isMemberAddName]) {
    jsonDict = [[DBTEAMLOGMemberAddNameTypeSerializer serialize:valueObj.memberAddName] mutableCopy];
    jsonDict[@".tag"] = @"member_add_name";
  } else if ([valueObj isMemberChangeAdminRole]) {
    jsonDict = [[DBTEAMLOGMemberChangeAdminRoleTypeSerializer serialize:valueObj.memberChangeAdminRole] mutableCopy];
    jsonDict[@".tag"] = @"member_change_admin_role";
  } else if ([valueObj isMemberChangeEmail]) {
    jsonDict = [[DBTEAMLOGMemberChangeEmailTypeSerializer serialize:valueObj.memberChangeEmail] mutableCopy];
    jsonDict[@".tag"] = @"member_change_email";
  } else if ([valueObj isMemberChangeMembershipType]) {
    jsonDict =
        [[DBTEAMLOGMemberChangeMembershipTypeTypeSerializer serialize:valueObj.memberChangeMembershipType] mutableCopy];
    jsonDict[@".tag"] = @"member_change_membership_type";
  } else if ([valueObj isMemberChangeName]) {
    jsonDict = [[DBTEAMLOGMemberChangeNameTypeSerializer serialize:valueObj.memberChangeName] mutableCopy];
    jsonDict[@".tag"] = @"member_change_name";
  } else if ([valueObj isMemberChangeStatus]) {
    jsonDict = [[DBTEAMLOGMemberChangeStatusTypeSerializer serialize:valueObj.memberChangeStatus] mutableCopy];
    jsonDict[@".tag"] = @"member_change_status";
  } else if ([valueObj isMemberPermanentlyDeleteAccountContents]) {
    jsonDict = [[DBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeSerializer
        serialize:valueObj.memberPermanentlyDeleteAccountContents] mutableCopy];
    jsonDict[@".tag"] = @"member_permanently_delete_account_contents";
  } else if ([valueObj isMemberSpaceLimitsAddCustomQuota]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeSerializer
        serialize:valueObj.memberSpaceLimitsAddCustomQuota] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_add_custom_quota";
  } else if ([valueObj isMemberSpaceLimitsChangeCustomQuota]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeSerializer
        serialize:valueObj.memberSpaceLimitsChangeCustomQuota] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_change_custom_quota";
  } else if ([valueObj isMemberSpaceLimitsChangeStatus]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsChangeStatusTypeSerializer serialize:valueObj.memberSpaceLimitsChangeStatus]
        mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_change_status";
  } else if ([valueObj isMemberSpaceLimitsRemoveCustomQuota]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeSerializer
        serialize:valueObj.memberSpaceLimitsRemoveCustomQuota] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_remove_custom_quota";
  } else if ([valueObj isMemberSuggest]) {
    jsonDict = [[DBTEAMLOGMemberSuggestTypeSerializer serialize:valueObj.memberSuggest] mutableCopy];
    jsonDict[@".tag"] = @"member_suggest";
  } else if ([valueObj isMemberTransferAccountContents]) {
    jsonDict = [[DBTEAMLOGMemberTransferAccountContentsTypeSerializer serialize:valueObj.memberTransferAccountContents]
        mutableCopy];
    jsonDict[@".tag"] = @"member_transfer_account_contents";
  } else if ([valueObj isSecondaryMailsPolicyChanged]) {
    jsonDict = [[DBTEAMLOGSecondaryMailsPolicyChangedTypeSerializer serialize:valueObj.secondaryMailsPolicyChanged]
        mutableCopy];
    jsonDict[@".tag"] = @"secondary_mails_policy_changed";
  } else if ([valueObj isPaperContentAddMember]) {
    jsonDict = [[DBTEAMLOGPaperContentAddMemberTypeSerializer serialize:valueObj.paperContentAddMember] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_add_member";
  } else if ([valueObj isPaperContentAddToFolder]) {
    jsonDict =
        [[DBTEAMLOGPaperContentAddToFolderTypeSerializer serialize:valueObj.paperContentAddToFolder] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_add_to_folder";
  } else if ([valueObj isPaperContentArchive]) {
    jsonDict = [[DBTEAMLOGPaperContentArchiveTypeSerializer serialize:valueObj.paperContentArchive] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_archive";
  } else if ([valueObj isPaperContentCreate]) {
    jsonDict = [[DBTEAMLOGPaperContentCreateTypeSerializer serialize:valueObj.paperContentCreate] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_create";
  } else if ([valueObj isPaperContentPermanentlyDelete]) {
    jsonDict = [[DBTEAMLOGPaperContentPermanentlyDeleteTypeSerializer serialize:valueObj.paperContentPermanentlyDelete]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_content_permanently_delete";
  } else if ([valueObj isPaperContentRemoveFromFolder]) {
    jsonDict = [[DBTEAMLOGPaperContentRemoveFromFolderTypeSerializer serialize:valueObj.paperContentRemoveFromFolder]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_content_remove_from_folder";
  } else if ([valueObj isPaperContentRemoveMember]) {
    jsonDict =
        [[DBTEAMLOGPaperContentRemoveMemberTypeSerializer serialize:valueObj.paperContentRemoveMember] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_remove_member";
  } else if ([valueObj isPaperContentRename]) {
    jsonDict = [[DBTEAMLOGPaperContentRenameTypeSerializer serialize:valueObj.paperContentRename] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_rename";
  } else if ([valueObj isPaperContentRestore]) {
    jsonDict = [[DBTEAMLOGPaperContentRestoreTypeSerializer serialize:valueObj.paperContentRestore] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_restore";
  } else if ([valueObj isPaperDocAddComment]) {
    jsonDict = [[DBTEAMLOGPaperDocAddCommentTypeSerializer serialize:valueObj.paperDocAddComment] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_add_comment";
  } else if ([valueObj isPaperDocChangeMemberRole]) {
    jsonDict =
        [[DBTEAMLOGPaperDocChangeMemberRoleTypeSerializer serialize:valueObj.paperDocChangeMemberRole] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_change_member_role";
  } else if ([valueObj isPaperDocChangeSharingPolicy]) {
    jsonDict = [[DBTEAMLOGPaperDocChangeSharingPolicyTypeSerializer serialize:valueObj.paperDocChangeSharingPolicy]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_change_sharing_policy";
  } else if ([valueObj isPaperDocChangeSubscription]) {
    jsonDict =
        [[DBTEAMLOGPaperDocChangeSubscriptionTypeSerializer serialize:valueObj.paperDocChangeSubscription] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_change_subscription";
  } else if ([valueObj isPaperDocDeleted]) {
    jsonDict = [[DBTEAMLOGPaperDocDeletedTypeSerializer serialize:valueObj.paperDocDeleted] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_deleted";
  } else if ([valueObj isPaperDocDeleteComment]) {
    jsonDict = [[DBTEAMLOGPaperDocDeleteCommentTypeSerializer serialize:valueObj.paperDocDeleteComment] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_delete_comment";
  } else if ([valueObj isPaperDocDownload]) {
    jsonDict = [[DBTEAMLOGPaperDocDownloadTypeSerializer serialize:valueObj.paperDocDownload] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_download";
  } else if ([valueObj isPaperDocEdit]) {
    jsonDict = [[DBTEAMLOGPaperDocEditTypeSerializer serialize:valueObj.paperDocEdit] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_edit";
  } else if ([valueObj isPaperDocEditComment]) {
    jsonDict = [[DBTEAMLOGPaperDocEditCommentTypeSerializer serialize:valueObj.paperDocEditComment] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_edit_comment";
  } else if ([valueObj isPaperDocFollowed]) {
    jsonDict = [[DBTEAMLOGPaperDocFollowedTypeSerializer serialize:valueObj.paperDocFollowed] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_followed";
  } else if ([valueObj isPaperDocMention]) {
    jsonDict = [[DBTEAMLOGPaperDocMentionTypeSerializer serialize:valueObj.paperDocMention] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_mention";
  } else if ([valueObj isPaperDocRequestAccess]) {
    jsonDict = [[DBTEAMLOGPaperDocRequestAccessTypeSerializer serialize:valueObj.paperDocRequestAccess] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_request_access";
  } else if ([valueObj isPaperDocResolveComment]) {
    jsonDict = [[DBTEAMLOGPaperDocResolveCommentTypeSerializer serialize:valueObj.paperDocResolveComment] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_resolve_comment";
  } else if ([valueObj isPaperDocRevert]) {
    jsonDict = [[DBTEAMLOGPaperDocRevertTypeSerializer serialize:valueObj.paperDocRevert] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_revert";
  } else if ([valueObj isPaperDocSlackShare]) {
    jsonDict = [[DBTEAMLOGPaperDocSlackShareTypeSerializer serialize:valueObj.paperDocSlackShare] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_slack_share";
  } else if ([valueObj isPaperDocTeamInvite]) {
    jsonDict = [[DBTEAMLOGPaperDocTeamInviteTypeSerializer serialize:valueObj.paperDocTeamInvite] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_team_invite";
  } else if ([valueObj isPaperDocTrashed]) {
    jsonDict = [[DBTEAMLOGPaperDocTrashedTypeSerializer serialize:valueObj.paperDocTrashed] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_trashed";
  } else if ([valueObj isPaperDocUnresolveComment]) {
    jsonDict =
        [[DBTEAMLOGPaperDocUnresolveCommentTypeSerializer serialize:valueObj.paperDocUnresolveComment] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_unresolve_comment";
  } else if ([valueObj isPaperDocUntrashed]) {
    jsonDict = [[DBTEAMLOGPaperDocUntrashedTypeSerializer serialize:valueObj.paperDocUntrashed] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_untrashed";
  } else if ([valueObj isPaperDocView]) {
    jsonDict = [[DBTEAMLOGPaperDocViewTypeSerializer serialize:valueObj.paperDocView] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_view";
  } else if ([valueObj isPaperExternalViewAllow]) {
    jsonDict = [[DBTEAMLOGPaperExternalViewAllowTypeSerializer serialize:valueObj.paperExternalViewAllow] mutableCopy];
    jsonDict[@".tag"] = @"paper_external_view_allow";
  } else if ([valueObj isPaperExternalViewDefaultTeam]) {
    jsonDict = [[DBTEAMLOGPaperExternalViewDefaultTeamTypeSerializer serialize:valueObj.paperExternalViewDefaultTeam]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_external_view_default_team";
  } else if ([valueObj isPaperExternalViewForbid]) {
    jsonDict =
        [[DBTEAMLOGPaperExternalViewForbidTypeSerializer serialize:valueObj.paperExternalViewForbid] mutableCopy];
    jsonDict[@".tag"] = @"paper_external_view_forbid";
  } else if ([valueObj isPaperFolderChangeSubscription]) {
    jsonDict = [[DBTEAMLOGPaperFolderChangeSubscriptionTypeSerializer serialize:valueObj.paperFolderChangeSubscription]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_change_subscription";
  } else if ([valueObj isPaperFolderDeleted]) {
    jsonDict = [[DBTEAMLOGPaperFolderDeletedTypeSerializer serialize:valueObj.paperFolderDeleted] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_deleted";
  } else if ([valueObj isPaperFolderFollowed]) {
    jsonDict = [[DBTEAMLOGPaperFolderFollowedTypeSerializer serialize:valueObj.paperFolderFollowed] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_followed";
  } else if ([valueObj isPaperFolderTeamInvite]) {
    jsonDict = [[DBTEAMLOGPaperFolderTeamInviteTypeSerializer serialize:valueObj.paperFolderTeamInvite] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_team_invite";
  } else if ([valueObj isPasswordChange]) {
    jsonDict = [[DBTEAMLOGPasswordChangeTypeSerializer serialize:valueObj.passwordChange] mutableCopy];
    jsonDict[@".tag"] = @"password_change";
  } else if ([valueObj isPasswordReset]) {
    jsonDict = [[DBTEAMLOGPasswordResetTypeSerializer serialize:valueObj.passwordReset] mutableCopy];
    jsonDict[@".tag"] = @"password_reset";
  } else if ([valueObj isPasswordResetAll]) {
    jsonDict = [[DBTEAMLOGPasswordResetAllTypeSerializer serialize:valueObj.passwordResetAll] mutableCopy];
    jsonDict[@".tag"] = @"password_reset_all";
  } else if ([valueObj isEmmCreateExceptionsReport]) {
    jsonDict =
        [[DBTEAMLOGEmmCreateExceptionsReportTypeSerializer serialize:valueObj.emmCreateExceptionsReport] mutableCopy];
    jsonDict[@".tag"] = @"emm_create_exceptions_report";
  } else if ([valueObj isEmmCreateUsageReport]) {
    jsonDict = [[DBTEAMLOGEmmCreateUsageReportTypeSerializer serialize:valueObj.emmCreateUsageReport] mutableCopy];
    jsonDict[@".tag"] = @"emm_create_usage_report";
  } else if ([valueObj isExportMembersReport]) {
    jsonDict = [[DBTEAMLOGExportMembersReportTypeSerializer serialize:valueObj.exportMembersReport] mutableCopy];
    jsonDict[@".tag"] = @"export_members_report";
  } else if ([valueObj isPaperAdminExportStart]) {
    jsonDict = [[DBTEAMLOGPaperAdminExportStartTypeSerializer serialize:valueObj.paperAdminExportStart] mutableCopy];
    jsonDict[@".tag"] = @"paper_admin_export_start";
  } else if ([valueObj isSmartSyncCreateAdminPrivilegeReport]) {
    jsonDict = [[DBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeSerializer
        serialize:valueObj.smartSyncCreateAdminPrivilegeReport] mutableCopy];
    jsonDict[@".tag"] = @"smart_sync_create_admin_privilege_report";
  } else if ([valueObj isTeamActivityCreateReport]) {
    jsonDict =
        [[DBTEAMLOGTeamActivityCreateReportTypeSerializer serialize:valueObj.teamActivityCreateReport] mutableCopy];
    jsonDict[@".tag"] = @"team_activity_create_report";
  } else if ([valueObj isCollectionShare]) {
    jsonDict = [[DBTEAMLOGCollectionShareTypeSerializer serialize:valueObj.collectionShare] mutableCopy];
    jsonDict[@".tag"] = @"collection_share";
  } else if ([valueObj isNoteAclInviteOnly]) {
    jsonDict = [[DBTEAMLOGNoteAclInviteOnlyTypeSerializer serialize:valueObj.noteAclInviteOnly] mutableCopy];
    jsonDict[@".tag"] = @"note_acl_invite_only";
  } else if ([valueObj isNoteAclLink]) {
    jsonDict = [[DBTEAMLOGNoteAclLinkTypeSerializer serialize:valueObj.noteAclLink] mutableCopy];
    jsonDict[@".tag"] = @"note_acl_link";
  } else if ([valueObj isNoteAclTeamLink]) {
    jsonDict = [[DBTEAMLOGNoteAclTeamLinkTypeSerializer serialize:valueObj.noteAclTeamLink] mutableCopy];
    jsonDict[@".tag"] = @"note_acl_team_link";
  } else if ([valueObj isNoteShared]) {
    jsonDict = [[DBTEAMLOGNoteSharedTypeSerializer serialize:valueObj.noteShared] mutableCopy];
    jsonDict[@".tag"] = @"note_shared";
  } else if ([valueObj isNoteShareReceive]) {
    jsonDict = [[DBTEAMLOGNoteShareReceiveTypeSerializer serialize:valueObj.noteShareReceive] mutableCopy];
    jsonDict[@".tag"] = @"note_share_receive";
  } else if ([valueObj isOpenNoteShared]) {
    jsonDict = [[DBTEAMLOGOpenNoteSharedTypeSerializer serialize:valueObj.openNoteShared] mutableCopy];
    jsonDict[@".tag"] = @"open_note_shared";
  } else if ([valueObj isSfAddGroup]) {
    jsonDict = [[DBTEAMLOGSfAddGroupTypeSerializer serialize:valueObj.sfAddGroup] mutableCopy];
    jsonDict[@".tag"] = @"sf_add_group";
  } else if ([valueObj isSfAllowNonMembersToViewSharedLinks]) {
    jsonDict = [[DBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeSerializer
        serialize:valueObj.sfAllowNonMembersToViewSharedLinks] mutableCopy];
    jsonDict[@".tag"] = @"sf_allow_non_members_to_view_shared_links";
  } else if ([valueObj isSfExternalInviteWarn]) {
    jsonDict = [[DBTEAMLOGSfExternalInviteWarnTypeSerializer serialize:valueObj.sfExternalInviteWarn] mutableCopy];
    jsonDict[@".tag"] = @"sf_external_invite_warn";
  } else if ([valueObj isSfFbInvite]) {
    jsonDict = [[DBTEAMLOGSfFbInviteTypeSerializer serialize:valueObj.sfFbInvite] mutableCopy];
    jsonDict[@".tag"] = @"sf_fb_invite";
  } else if ([valueObj isSfFbInviteChangeRole]) {
    jsonDict = [[DBTEAMLOGSfFbInviteChangeRoleTypeSerializer serialize:valueObj.sfFbInviteChangeRole] mutableCopy];
    jsonDict[@".tag"] = @"sf_fb_invite_change_role";
  } else if ([valueObj isSfFbUninvite]) {
    jsonDict = [[DBTEAMLOGSfFbUninviteTypeSerializer serialize:valueObj.sfFbUninvite] mutableCopy];
    jsonDict[@".tag"] = @"sf_fb_uninvite";
  } else if ([valueObj isSfInviteGroup]) {
    jsonDict = [[DBTEAMLOGSfInviteGroupTypeSerializer serialize:valueObj.sfInviteGroup] mutableCopy];
    jsonDict[@".tag"] = @"sf_invite_group";
  } else if ([valueObj isSfTeamGrantAccess]) {
    jsonDict = [[DBTEAMLOGSfTeamGrantAccessTypeSerializer serialize:valueObj.sfTeamGrantAccess] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_grant_access";
  } else if ([valueObj isSfTeamInvite]) {
    jsonDict = [[DBTEAMLOGSfTeamInviteTypeSerializer serialize:valueObj.sfTeamInvite] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_invite";
  } else if ([valueObj isSfTeamInviteChangeRole]) {
    jsonDict = [[DBTEAMLOGSfTeamInviteChangeRoleTypeSerializer serialize:valueObj.sfTeamInviteChangeRole] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_invite_change_role";
  } else if ([valueObj isSfTeamJoin]) {
    jsonDict = [[DBTEAMLOGSfTeamJoinTypeSerializer serialize:valueObj.sfTeamJoin] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_join";
  } else if ([valueObj isSfTeamJoinFromOobLink]) {
    jsonDict = [[DBTEAMLOGSfTeamJoinFromOobLinkTypeSerializer serialize:valueObj.sfTeamJoinFromOobLink] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_join_from_oob_link";
  } else if ([valueObj isSfTeamUninvite]) {
    jsonDict = [[DBTEAMLOGSfTeamUninviteTypeSerializer serialize:valueObj.sfTeamUninvite] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_uninvite";
  } else if ([valueObj isSharedContentAddInvitees]) {
    jsonDict =
        [[DBTEAMLOGSharedContentAddInviteesTypeSerializer serialize:valueObj.sharedContentAddInvitees] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_invitees";
  } else if ([valueObj isSharedContentAddLinkExpiry]) {
    jsonDict =
        [[DBTEAMLOGSharedContentAddLinkExpiryTypeSerializer serialize:valueObj.sharedContentAddLinkExpiry] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_link_expiry";
  } else if ([valueObj isSharedContentAddLinkPassword]) {
    jsonDict = [[DBTEAMLOGSharedContentAddLinkPasswordTypeSerializer serialize:valueObj.sharedContentAddLinkPassword]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_link_password";
  } else if ([valueObj isSharedContentAddMember]) {
    jsonDict = [[DBTEAMLOGSharedContentAddMemberTypeSerializer serialize:valueObj.sharedContentAddMember] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_member";
  } else if ([valueObj isSharedContentChangeDownloadsPolicy]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeDownloadsPolicyTypeSerializer
        serialize:valueObj.sharedContentChangeDownloadsPolicy] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_downloads_policy";
  } else if ([valueObj isSharedContentChangeInviteeRole]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeInviteeRoleTypeSerializer
        serialize:valueObj.sharedContentChangeInviteeRole] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_invitee_role";
  } else if ([valueObj isSharedContentChangeLinkAudience]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeLinkAudienceTypeSerializer
        serialize:valueObj.sharedContentChangeLinkAudience] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_link_audience";
  } else if ([valueObj isSharedContentChangeLinkExpiry]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeLinkExpiryTypeSerializer serialize:valueObj.sharedContentChangeLinkExpiry]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_link_expiry";
  } else if ([valueObj isSharedContentChangeLinkPassword]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeLinkPasswordTypeSerializer
        serialize:valueObj.sharedContentChangeLinkPassword] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_link_password";
  } else if ([valueObj isSharedContentChangeMemberRole]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeMemberRoleTypeSerializer serialize:valueObj.sharedContentChangeMemberRole]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_member_role";
  } else if ([valueObj isSharedContentChangeViewerInfoPolicy]) {
    jsonDict = [[DBTEAMLOGSharedContentChangeViewerInfoPolicyTypeSerializer
        serialize:valueObj.sharedContentChangeViewerInfoPolicy] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_viewer_info_policy";
  } else if ([valueObj isSharedContentClaimInvitation]) {
    jsonDict = [[DBTEAMLOGSharedContentClaimInvitationTypeSerializer serialize:valueObj.sharedContentClaimInvitation]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_content_claim_invitation";
  } else if ([valueObj isSharedContentCopy]) {
    jsonDict = [[DBTEAMLOGSharedContentCopyTypeSerializer serialize:valueObj.sharedContentCopy] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_copy";
  } else if ([valueObj isSharedContentDownload]) {
    jsonDict = [[DBTEAMLOGSharedContentDownloadTypeSerializer serialize:valueObj.sharedContentDownload] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_download";
  } else if ([valueObj isSharedContentRelinquishMembership]) {
    jsonDict = [[DBTEAMLOGSharedContentRelinquishMembershipTypeSerializer
        serialize:valueObj.sharedContentRelinquishMembership] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_relinquish_membership";
  } else if ([valueObj isSharedContentRemoveInvitees]) {
    jsonDict = [[DBTEAMLOGSharedContentRemoveInviteesTypeSerializer serialize:valueObj.sharedContentRemoveInvitees]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_invitees";
  } else if ([valueObj isSharedContentRemoveLinkExpiry]) {
    jsonDict = [[DBTEAMLOGSharedContentRemoveLinkExpiryTypeSerializer serialize:valueObj.sharedContentRemoveLinkExpiry]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_link_expiry";
  } else if ([valueObj isSharedContentRemoveLinkPassword]) {
    jsonDict = [[DBTEAMLOGSharedContentRemoveLinkPasswordTypeSerializer
        serialize:valueObj.sharedContentRemoveLinkPassword] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_link_password";
  } else if ([valueObj isSharedContentRemoveMember]) {
    jsonDict =
        [[DBTEAMLOGSharedContentRemoveMemberTypeSerializer serialize:valueObj.sharedContentRemoveMember] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_member";
  } else if ([valueObj isSharedContentRequestAccess]) {
    jsonDict =
        [[DBTEAMLOGSharedContentRequestAccessTypeSerializer serialize:valueObj.sharedContentRequestAccess] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_request_access";
  } else if ([valueObj isSharedContentUnshare]) {
    jsonDict = [[DBTEAMLOGSharedContentUnshareTypeSerializer serialize:valueObj.sharedContentUnshare] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_unshare";
  } else if ([valueObj isSharedContentView]) {
    jsonDict = [[DBTEAMLOGSharedContentViewTypeSerializer serialize:valueObj.sharedContentView] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_view";
  } else if ([valueObj isSharedFolderChangeLinkPolicy]) {
    jsonDict = [[DBTEAMLOGSharedFolderChangeLinkPolicyTypeSerializer serialize:valueObj.sharedFolderChangeLinkPolicy]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_link_policy";
  } else if ([valueObj isSharedFolderChangeMembersInheritancePolicy]) {
    jsonDict = [[DBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeSerializer
        serialize:valueObj.sharedFolderChangeMembersInheritancePolicy] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_members_inheritance_policy";
  } else if ([valueObj isSharedFolderChangeMembersManagementPolicy]) {
    jsonDict = [[DBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeSerializer
        serialize:valueObj.sharedFolderChangeMembersManagementPolicy] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_members_management_policy";
  } else if ([valueObj isSharedFolderChangeMembersPolicy]) {
    jsonDict = [[DBTEAMLOGSharedFolderChangeMembersPolicyTypeSerializer
        serialize:valueObj.sharedFolderChangeMembersPolicy] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_members_policy";
  } else if ([valueObj isSharedFolderCreate]) {
    jsonDict = [[DBTEAMLOGSharedFolderCreateTypeSerializer serialize:valueObj.sharedFolderCreate] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_create";
  } else if ([valueObj isSharedFolderDeclineInvitation]) {
    jsonDict = [[DBTEAMLOGSharedFolderDeclineInvitationTypeSerializer serialize:valueObj.sharedFolderDeclineInvitation]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_decline_invitation";
  } else if ([valueObj isSharedFolderMount]) {
    jsonDict = [[DBTEAMLOGSharedFolderMountTypeSerializer serialize:valueObj.sharedFolderMount] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_mount";
  } else if ([valueObj isSharedFolderNest]) {
    jsonDict = [[DBTEAMLOGSharedFolderNestTypeSerializer serialize:valueObj.sharedFolderNest] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_nest";
  } else if ([valueObj isSharedFolderTransferOwnership]) {
    jsonDict = [[DBTEAMLOGSharedFolderTransferOwnershipTypeSerializer serialize:valueObj.sharedFolderTransferOwnership]
        mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_transfer_ownership";
  } else if ([valueObj isSharedFolderUnmount]) {
    jsonDict = [[DBTEAMLOGSharedFolderUnmountTypeSerializer serialize:valueObj.sharedFolderUnmount] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_unmount";
  } else if ([valueObj isSharedLinkAddExpiry]) {
    jsonDict = [[DBTEAMLOGSharedLinkAddExpiryTypeSerializer serialize:valueObj.sharedLinkAddExpiry] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_add_expiry";
  } else if ([valueObj isSharedLinkChangeExpiry]) {
    jsonDict = [[DBTEAMLOGSharedLinkChangeExpiryTypeSerializer serialize:valueObj.sharedLinkChangeExpiry] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_change_expiry";
  } else if ([valueObj isSharedLinkChangeVisibility]) {
    jsonDict =
        [[DBTEAMLOGSharedLinkChangeVisibilityTypeSerializer serialize:valueObj.sharedLinkChangeVisibility] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_change_visibility";
  } else if ([valueObj isSharedLinkCopy]) {
    jsonDict = [[DBTEAMLOGSharedLinkCopyTypeSerializer serialize:valueObj.sharedLinkCopy] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_copy";
  } else if ([valueObj isSharedLinkCreate]) {
    jsonDict = [[DBTEAMLOGSharedLinkCreateTypeSerializer serialize:valueObj.sharedLinkCreate] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_create";
  } else if ([valueObj isSharedLinkDisable]) {
    jsonDict = [[DBTEAMLOGSharedLinkDisableTypeSerializer serialize:valueObj.sharedLinkDisable] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_disable";
  } else if ([valueObj isSharedLinkDownload]) {
    jsonDict = [[DBTEAMLOGSharedLinkDownloadTypeSerializer serialize:valueObj.sharedLinkDownload] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_download";
  } else if ([valueObj isSharedLinkRemoveExpiry]) {
    jsonDict = [[DBTEAMLOGSharedLinkRemoveExpiryTypeSerializer serialize:valueObj.sharedLinkRemoveExpiry] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_remove_expiry";
  } else if ([valueObj isSharedLinkShare]) {
    jsonDict = [[DBTEAMLOGSharedLinkShareTypeSerializer serialize:valueObj.sharedLinkShare] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_share";
  } else if ([valueObj isSharedLinkView]) {
    jsonDict = [[DBTEAMLOGSharedLinkViewTypeSerializer serialize:valueObj.sharedLinkView] mutableCopy];
    jsonDict[@".tag"] = @"shared_link_view";
  } else if ([valueObj isSharedNoteOpened]) {
    jsonDict = [[DBTEAMLOGSharedNoteOpenedTypeSerializer serialize:valueObj.sharedNoteOpened] mutableCopy];
    jsonDict[@".tag"] = @"shared_note_opened";
  } else if ([valueObj isShmodelGroupShare]) {
    jsonDict = [[DBTEAMLOGShmodelGroupShareTypeSerializer serialize:valueObj.shmodelGroupShare] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_group_share";
  } else if ([valueObj isShowcaseAccessGranted]) {
    jsonDict = [[DBTEAMLOGShowcaseAccessGrantedTypeSerializer serialize:valueObj.showcaseAccessGranted] mutableCopy];
    jsonDict[@".tag"] = @"showcase_access_granted";
  } else if ([valueObj isShowcaseAddMember]) {
    jsonDict = [[DBTEAMLOGShowcaseAddMemberTypeSerializer serialize:valueObj.showcaseAddMember] mutableCopy];
    jsonDict[@".tag"] = @"showcase_add_member";
  } else if ([valueObj isShowcaseArchived]) {
    jsonDict = [[DBTEAMLOGShowcaseArchivedTypeSerializer serialize:valueObj.showcaseArchived] mutableCopy];
    jsonDict[@".tag"] = @"showcase_archived";
  } else if ([valueObj isShowcaseCreated]) {
    jsonDict = [[DBTEAMLOGShowcaseCreatedTypeSerializer serialize:valueObj.showcaseCreated] mutableCopy];
    jsonDict[@".tag"] = @"showcase_created";
  } else if ([valueObj isShowcaseDeleteComment]) {
    jsonDict = [[DBTEAMLOGShowcaseDeleteCommentTypeSerializer serialize:valueObj.showcaseDeleteComment] mutableCopy];
    jsonDict[@".tag"] = @"showcase_delete_comment";
  } else if ([valueObj isShowcaseEdited]) {
    jsonDict = [[DBTEAMLOGShowcaseEditedTypeSerializer serialize:valueObj.showcaseEdited] mutableCopy];
    jsonDict[@".tag"] = @"showcase_edited";
  } else if ([valueObj isShowcaseEditComment]) {
    jsonDict = [[DBTEAMLOGShowcaseEditCommentTypeSerializer serialize:valueObj.showcaseEditComment] mutableCopy];
    jsonDict[@".tag"] = @"showcase_edit_comment";
  } else if ([valueObj isShowcaseFileAdded]) {
    jsonDict = [[DBTEAMLOGShowcaseFileAddedTypeSerializer serialize:valueObj.showcaseFileAdded] mutableCopy];
    jsonDict[@".tag"] = @"showcase_file_added";
  } else if ([valueObj isShowcaseFileDownload]) {
    jsonDict = [[DBTEAMLOGShowcaseFileDownloadTypeSerializer serialize:valueObj.showcaseFileDownload] mutableCopy];
    jsonDict[@".tag"] = @"showcase_file_download";
  } else if ([valueObj isShowcaseFileRemoved]) {
    jsonDict = [[DBTEAMLOGShowcaseFileRemovedTypeSerializer serialize:valueObj.showcaseFileRemoved] mutableCopy];
    jsonDict[@".tag"] = @"showcase_file_removed";
  } else if ([valueObj isShowcaseFileView]) {
    jsonDict = [[DBTEAMLOGShowcaseFileViewTypeSerializer serialize:valueObj.showcaseFileView] mutableCopy];
    jsonDict[@".tag"] = @"showcase_file_view";
  } else if ([valueObj isShowcasePermanentlyDeleted]) {
    jsonDict =
        [[DBTEAMLOGShowcasePermanentlyDeletedTypeSerializer serialize:valueObj.showcasePermanentlyDeleted] mutableCopy];
    jsonDict[@".tag"] = @"showcase_permanently_deleted";
  } else if ([valueObj isShowcasePostComment]) {
    jsonDict = [[DBTEAMLOGShowcasePostCommentTypeSerializer serialize:valueObj.showcasePostComment] mutableCopy];
    jsonDict[@".tag"] = @"showcase_post_comment";
  } else if ([valueObj isShowcaseRemoveMember]) {
    jsonDict = [[DBTEAMLOGShowcaseRemoveMemberTypeSerializer serialize:valueObj.showcaseRemoveMember] mutableCopy];
    jsonDict[@".tag"] = @"showcase_remove_member";
  } else if ([valueObj isShowcaseRenamed]) {
    jsonDict = [[DBTEAMLOGShowcaseRenamedTypeSerializer serialize:valueObj.showcaseRenamed] mutableCopy];
    jsonDict[@".tag"] = @"showcase_renamed";
  } else if ([valueObj isShowcaseRequestAccess]) {
    jsonDict = [[DBTEAMLOGShowcaseRequestAccessTypeSerializer serialize:valueObj.showcaseRequestAccess] mutableCopy];
    jsonDict[@".tag"] = @"showcase_request_access";
  } else if ([valueObj isShowcaseResolveComment]) {
    jsonDict = [[DBTEAMLOGShowcaseResolveCommentTypeSerializer serialize:valueObj.showcaseResolveComment] mutableCopy];
    jsonDict[@".tag"] = @"showcase_resolve_comment";
  } else if ([valueObj isShowcaseRestored]) {
    jsonDict = [[DBTEAMLOGShowcaseRestoredTypeSerializer serialize:valueObj.showcaseRestored] mutableCopy];
    jsonDict[@".tag"] = @"showcase_restored";
  } else if ([valueObj isShowcaseTrashed]) {
    jsonDict = [[DBTEAMLOGShowcaseTrashedTypeSerializer serialize:valueObj.showcaseTrashed] mutableCopy];
    jsonDict[@".tag"] = @"showcase_trashed";
  } else if ([valueObj isShowcaseTrashedDeprecated]) {
    jsonDict =
        [[DBTEAMLOGShowcaseTrashedDeprecatedTypeSerializer serialize:valueObj.showcaseTrashedDeprecated] mutableCopy];
    jsonDict[@".tag"] = @"showcase_trashed_deprecated";
  } else if ([valueObj isShowcaseUnresolveComment]) {
    jsonDict =
        [[DBTEAMLOGShowcaseUnresolveCommentTypeSerializer serialize:valueObj.showcaseUnresolveComment] mutableCopy];
    jsonDict[@".tag"] = @"showcase_unresolve_comment";
  } else if ([valueObj isShowcaseUntrashed]) {
    jsonDict = [[DBTEAMLOGShowcaseUntrashedTypeSerializer serialize:valueObj.showcaseUntrashed] mutableCopy];
    jsonDict[@".tag"] = @"showcase_untrashed";
  } else if ([valueObj isShowcaseUntrashedDeprecated]) {
    jsonDict = [[DBTEAMLOGShowcaseUntrashedDeprecatedTypeSerializer serialize:valueObj.showcaseUntrashedDeprecated]
        mutableCopy];
    jsonDict[@".tag"] = @"showcase_untrashed_deprecated";
  } else if ([valueObj isShowcaseView]) {
    jsonDict = [[DBTEAMLOGShowcaseViewTypeSerializer serialize:valueObj.showcaseView] mutableCopy];
    jsonDict[@".tag"] = @"showcase_view";
  } else if ([valueObj isSsoAddCert]) {
    jsonDict = [[DBTEAMLOGSsoAddCertTypeSerializer serialize:valueObj.ssoAddCert] mutableCopy];
    jsonDict[@".tag"] = @"sso_add_cert";
  } else if ([valueObj isSsoAddLoginUrl]) {
    jsonDict = [[DBTEAMLOGSsoAddLoginUrlTypeSerializer serialize:valueObj.ssoAddLoginUrl] mutableCopy];
    jsonDict[@".tag"] = @"sso_add_login_url";
  } else if ([valueObj isSsoAddLogoutUrl]) {
    jsonDict = [[DBTEAMLOGSsoAddLogoutUrlTypeSerializer serialize:valueObj.ssoAddLogoutUrl] mutableCopy];
    jsonDict[@".tag"] = @"sso_add_logout_url";
  } else if ([valueObj isSsoChangeCert]) {
    jsonDict = [[DBTEAMLOGSsoChangeCertTypeSerializer serialize:valueObj.ssoChangeCert] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_cert";
  } else if ([valueObj isSsoChangeLoginUrl]) {
    jsonDict = [[DBTEAMLOGSsoChangeLoginUrlTypeSerializer serialize:valueObj.ssoChangeLoginUrl] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_login_url";
  } else if ([valueObj isSsoChangeLogoutUrl]) {
    jsonDict = [[DBTEAMLOGSsoChangeLogoutUrlTypeSerializer serialize:valueObj.ssoChangeLogoutUrl] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_logout_url";
  } else if ([valueObj isSsoChangeSamlIdentityMode]) {
    jsonDict =
        [[DBTEAMLOGSsoChangeSamlIdentityModeTypeSerializer serialize:valueObj.ssoChangeSamlIdentityMode] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_saml_identity_mode";
  } else if ([valueObj isSsoRemoveCert]) {
    jsonDict = [[DBTEAMLOGSsoRemoveCertTypeSerializer serialize:valueObj.ssoRemoveCert] mutableCopy];
    jsonDict[@".tag"] = @"sso_remove_cert";
  } else if ([valueObj isSsoRemoveLoginUrl]) {
    jsonDict = [[DBTEAMLOGSsoRemoveLoginUrlTypeSerializer serialize:valueObj.ssoRemoveLoginUrl] mutableCopy];
    jsonDict[@".tag"] = @"sso_remove_login_url";
  } else if ([valueObj isSsoRemoveLogoutUrl]) {
    jsonDict = [[DBTEAMLOGSsoRemoveLogoutUrlTypeSerializer serialize:valueObj.ssoRemoveLogoutUrl] mutableCopy];
    jsonDict[@".tag"] = @"sso_remove_logout_url";
  } else if ([valueObj isTeamFolderChangeStatus]) {
    jsonDict = [[DBTEAMLOGTeamFolderChangeStatusTypeSerializer serialize:valueObj.teamFolderChangeStatus] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_change_status";
  } else if ([valueObj isTeamFolderCreate]) {
    jsonDict = [[DBTEAMLOGTeamFolderCreateTypeSerializer serialize:valueObj.teamFolderCreate] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_create";
  } else if ([valueObj isTeamFolderDowngrade]) {
    jsonDict = [[DBTEAMLOGTeamFolderDowngradeTypeSerializer serialize:valueObj.teamFolderDowngrade] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_downgrade";
  } else if ([valueObj isTeamFolderPermanentlyDelete]) {
    jsonDict = [[DBTEAMLOGTeamFolderPermanentlyDeleteTypeSerializer serialize:valueObj.teamFolderPermanentlyDelete]
        mutableCopy];
    jsonDict[@".tag"] = @"team_folder_permanently_delete";
  } else if ([valueObj isTeamFolderRename]) {
    jsonDict = [[DBTEAMLOGTeamFolderRenameTypeSerializer serialize:valueObj.teamFolderRename] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_rename";
  } else if ([valueObj isTeamSelectiveSyncSettingsChanged]) {
    jsonDict = [[DBTEAMLOGTeamSelectiveSyncSettingsChangedTypeSerializer
        serialize:valueObj.teamSelectiveSyncSettingsChanged] mutableCopy];
    jsonDict[@".tag"] = @"team_selective_sync_settings_changed";
  } else if ([valueObj isAccountCaptureChangePolicy]) {
    jsonDict =
        [[DBTEAMLOGAccountCaptureChangePolicyTypeSerializer serialize:valueObj.accountCaptureChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_change_policy";
  } else if ([valueObj isAllowDownloadDisabled]) {
    jsonDict = [[DBTEAMLOGAllowDownloadDisabledTypeSerializer serialize:valueObj.allowDownloadDisabled] mutableCopy];
    jsonDict[@".tag"] = @"allow_download_disabled";
  } else if ([valueObj isAllowDownloadEnabled]) {
    jsonDict = [[DBTEAMLOGAllowDownloadEnabledTypeSerializer serialize:valueObj.allowDownloadEnabled] mutableCopy];
    jsonDict[@".tag"] = @"allow_download_enabled";
  } else if ([valueObj isDataPlacementRestrictionChangePolicy]) {
    jsonDict = [[DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer
        serialize:valueObj.dataPlacementRestrictionChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"data_placement_restriction_change_policy";
  } else if ([valueObj isDataPlacementRestrictionSatisfyPolicy]) {
    jsonDict = [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer
        serialize:valueObj.dataPlacementRestrictionSatisfyPolicy] mutableCopy];
    jsonDict[@".tag"] = @"data_placement_restriction_satisfy_policy";
  } else if ([valueObj isDeviceApprovalsChangeDesktopPolicy]) {
    jsonDict = [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer
        serialize:valueObj.deviceApprovalsChangeDesktopPolicy] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_desktop_policy";
  } else if ([valueObj isDeviceApprovalsChangeMobilePolicy]) {
    jsonDict = [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer
        serialize:valueObj.deviceApprovalsChangeMobilePolicy] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_mobile_policy";
  } else if ([valueObj isDeviceApprovalsChangeOverageAction]) {
    jsonDict = [[DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer
        serialize:valueObj.deviceApprovalsChangeOverageAction] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_overage_action";
  } else if ([valueObj isDeviceApprovalsChangeUnlinkAction]) {
    jsonDict = [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer
        serialize:valueObj.deviceApprovalsChangeUnlinkAction] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_unlink_action";
  } else if ([valueObj isDirectoryRestrictionsAddMembers]) {
    jsonDict = [[DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer
        serialize:valueObj.directoryRestrictionsAddMembers] mutableCopy];
    jsonDict[@".tag"] = @"directory_restrictions_add_members";
  } else if ([valueObj isDirectoryRestrictionsRemoveMembers]) {
    jsonDict = [[DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer
        serialize:valueObj.directoryRestrictionsRemoveMembers] mutableCopy];
    jsonDict[@".tag"] = @"directory_restrictions_remove_members";
  } else if ([valueObj isEmmAddException]) {
    jsonDict = [[DBTEAMLOGEmmAddExceptionTypeSerializer serialize:valueObj.emmAddException] mutableCopy];
    jsonDict[@".tag"] = @"emm_add_exception";
  } else if ([valueObj isEmmChangePolicy]) {
    jsonDict = [[DBTEAMLOGEmmChangePolicyTypeSerializer serialize:valueObj.emmChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"emm_change_policy";
  } else if ([valueObj isEmmRemoveException]) {
    jsonDict = [[DBTEAMLOGEmmRemoveExceptionTypeSerializer serialize:valueObj.emmRemoveException] mutableCopy];
    jsonDict[@".tag"] = @"emm_remove_exception";
  } else if ([valueObj isExtendedVersionHistoryChangePolicy]) {
    jsonDict = [[DBTEAMLOGExtendedVersionHistoryChangePolicyTypeSerializer
        serialize:valueObj.extendedVersionHistoryChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"extended_version_history_change_policy";
  } else if ([valueObj isFileCommentsChangePolicy]) {
    jsonDict =
        [[DBTEAMLOGFileCommentsChangePolicyTypeSerializer serialize:valueObj.fileCommentsChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"file_comments_change_policy";
  } else if ([valueObj isFileRequestsChangePolicy]) {
    jsonDict =
        [[DBTEAMLOGFileRequestsChangePolicyTypeSerializer serialize:valueObj.fileRequestsChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"file_requests_change_policy";
  } else if ([valueObj isFileRequestsEmailsEnabled]) {
    jsonDict =
        [[DBTEAMLOGFileRequestsEmailsEnabledTypeSerializer serialize:valueObj.fileRequestsEmailsEnabled] mutableCopy];
    jsonDict[@".tag"] = @"file_requests_emails_enabled";
  } else if ([valueObj isFileRequestsEmailsRestrictedToTeamOnly]) {
    jsonDict = [[DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeSerializer
        serialize:valueObj.fileRequestsEmailsRestrictedToTeamOnly] mutableCopy];
    jsonDict[@".tag"] = @"file_requests_emails_restricted_to_team_only";
  } else if ([valueObj isGoogleSsoChangePolicy]) {
    jsonDict = [[DBTEAMLOGGoogleSsoChangePolicyTypeSerializer serialize:valueObj.googleSsoChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"google_sso_change_policy";
  } else if ([valueObj isGroupUserManagementChangePolicy]) {
    jsonDict = [[DBTEAMLOGGroupUserManagementChangePolicyTypeSerializer
        serialize:valueObj.groupUserManagementChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"group_user_management_change_policy";
  } else if ([valueObj isMemberRequestsChangePolicy]) {
    jsonDict =
        [[DBTEAMLOGMemberRequestsChangePolicyTypeSerializer serialize:valueObj.memberRequestsChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"member_requests_change_policy";
  } else if ([valueObj isMemberSpaceLimitsAddException]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsAddExceptionTypeSerializer serialize:valueObj.memberSpaceLimitsAddException]
        mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_add_exception";
  } else if ([valueObj isMemberSpaceLimitsChangeCapsTypePolicy]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeSerializer
        serialize:valueObj.memberSpaceLimitsChangeCapsTypePolicy] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_change_caps_type_policy";
  } else if ([valueObj isMemberSpaceLimitsChangePolicy]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsChangePolicyTypeSerializer serialize:valueObj.memberSpaceLimitsChangePolicy]
        mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_change_policy";
  } else if ([valueObj isMemberSpaceLimitsRemoveException]) {
    jsonDict = [[DBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeSerializer
        serialize:valueObj.memberSpaceLimitsRemoveException] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_remove_exception";
  } else if ([valueObj isMemberSuggestionsChangePolicy]) {
    jsonDict = [[DBTEAMLOGMemberSuggestionsChangePolicyTypeSerializer serialize:valueObj.memberSuggestionsChangePolicy]
        mutableCopy];
    jsonDict[@".tag"] = @"member_suggestions_change_policy";
  } else if ([valueObj isMicrosoftOfficeAddinChangePolicy]) {
    jsonDict = [[DBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeSerializer
        serialize:valueObj.microsoftOfficeAddinChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"microsoft_office_addin_change_policy";
  } else if ([valueObj isNetworkControlChangePolicy]) {
    jsonDict =
        [[DBTEAMLOGNetworkControlChangePolicyTypeSerializer serialize:valueObj.networkControlChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"network_control_change_policy";
  } else if ([valueObj isPaperChangeDeploymentPolicy]) {
    jsonDict = [[DBTEAMLOGPaperChangeDeploymentPolicyTypeSerializer serialize:valueObj.paperChangeDeploymentPolicy]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_change_deployment_policy";
  } else if ([valueObj isPaperChangeMemberLinkPolicy]) {
    jsonDict = [[DBTEAMLOGPaperChangeMemberLinkPolicyTypeSerializer serialize:valueObj.paperChangeMemberLinkPolicy]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_change_member_link_policy";
  } else if ([valueObj isPaperChangeMemberPolicy]) {
    jsonDict =
        [[DBTEAMLOGPaperChangeMemberPolicyTypeSerializer serialize:valueObj.paperChangeMemberPolicy] mutableCopy];
    jsonDict[@".tag"] = @"paper_change_member_policy";
  } else if ([valueObj isPaperChangePolicy]) {
    jsonDict = [[DBTEAMLOGPaperChangePolicyTypeSerializer serialize:valueObj.paperChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"paper_change_policy";
  } else if ([valueObj isPaperEnabledUsersGroupAddition]) {
    jsonDict = [[DBTEAMLOGPaperEnabledUsersGroupAdditionTypeSerializer
        serialize:valueObj.paperEnabledUsersGroupAddition] mutableCopy];
    jsonDict[@".tag"] = @"paper_enabled_users_group_addition";
  } else if ([valueObj isPaperEnabledUsersGroupRemoval]) {
    jsonDict = [[DBTEAMLOGPaperEnabledUsersGroupRemovalTypeSerializer serialize:valueObj.paperEnabledUsersGroupRemoval]
        mutableCopy];
    jsonDict[@".tag"] = @"paper_enabled_users_group_removal";
  } else if ([valueObj isPermanentDeleteChangePolicy]) {
    jsonDict = [[DBTEAMLOGPermanentDeleteChangePolicyTypeSerializer serialize:valueObj.permanentDeleteChangePolicy]
        mutableCopy];
    jsonDict[@".tag"] = @"permanent_delete_change_policy";
  } else if ([valueObj isSharingChangeFolderJoinPolicy]) {
    jsonDict = [[DBTEAMLOGSharingChangeFolderJoinPolicyTypeSerializer serialize:valueObj.sharingChangeFolderJoinPolicy]
        mutableCopy];
    jsonDict[@".tag"] = @"sharing_change_folder_join_policy";
  } else if ([valueObj isSharingChangeLinkPolicy]) {
    jsonDict =
        [[DBTEAMLOGSharingChangeLinkPolicyTypeSerializer serialize:valueObj.sharingChangeLinkPolicy] mutableCopy];
    jsonDict[@".tag"] = @"sharing_change_link_policy";
  } else if ([valueObj isSharingChangeMemberPolicy]) {
    jsonDict =
        [[DBTEAMLOGSharingChangeMemberPolicyTypeSerializer serialize:valueObj.sharingChangeMemberPolicy] mutableCopy];
    jsonDict[@".tag"] = @"sharing_change_member_policy";
  } else if ([valueObj isShowcaseChangeDownloadPolicy]) {
    jsonDict = [[DBTEAMLOGShowcaseChangeDownloadPolicyTypeSerializer serialize:valueObj.showcaseChangeDownloadPolicy]
        mutableCopy];
    jsonDict[@".tag"] = @"showcase_change_download_policy";
  } else if ([valueObj isShowcaseChangeEnabledPolicy]) {
    jsonDict = [[DBTEAMLOGShowcaseChangeEnabledPolicyTypeSerializer serialize:valueObj.showcaseChangeEnabledPolicy]
        mutableCopy];
    jsonDict[@".tag"] = @"showcase_change_enabled_policy";
  } else if ([valueObj isShowcaseChangeExternalSharingPolicy]) {
    jsonDict = [[DBTEAMLOGShowcaseChangeExternalSharingPolicyTypeSerializer
        serialize:valueObj.showcaseChangeExternalSharingPolicy] mutableCopy];
    jsonDict[@".tag"] = @"showcase_change_external_sharing_policy";
  } else if ([valueObj isSmartSyncChangePolicy]) {
    jsonDict = [[DBTEAMLOGSmartSyncChangePolicyTypeSerializer serialize:valueObj.smartSyncChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"smart_sync_change_policy";
  } else if ([valueObj isSmartSyncNotOptOut]) {
    jsonDict = [[DBTEAMLOGSmartSyncNotOptOutTypeSerializer serialize:valueObj.smartSyncNotOptOut] mutableCopy];
    jsonDict[@".tag"] = @"smart_sync_not_opt_out";
  } else if ([valueObj isSmartSyncOptOut]) {
    jsonDict = [[DBTEAMLOGSmartSyncOptOutTypeSerializer serialize:valueObj.smartSyncOptOut] mutableCopy];
    jsonDict[@".tag"] = @"smart_sync_opt_out";
  } else if ([valueObj isSsoChangePolicy]) {
    jsonDict = [[DBTEAMLOGSsoChangePolicyTypeSerializer serialize:valueObj.ssoChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_policy";
  } else if ([valueObj isTfaChangePolicy]) {
    jsonDict = [[DBTEAMLOGTfaChangePolicyTypeSerializer serialize:valueObj.tfaChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"tfa_change_policy";
  } else if ([valueObj isTwoAccountChangePolicy]) {
    jsonDict = [[DBTEAMLOGTwoAccountChangePolicyTypeSerializer serialize:valueObj.twoAccountChangePolicy] mutableCopy];
    jsonDict[@".tag"] = @"two_account_change_policy";
  } else if ([valueObj isWebSessionsChangeFixedLengthPolicy]) {
    jsonDict = [[DBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeSerializer
        serialize:valueObj.webSessionsChangeFixedLengthPolicy] mutableCopy];
    jsonDict[@".tag"] = @"web_sessions_change_fixed_length_policy";
  } else if ([valueObj isWebSessionsChangeIdleLengthPolicy]) {
    jsonDict = [[DBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeSerializer
        serialize:valueObj.webSessionsChangeIdleLengthPolicy] mutableCopy];
    jsonDict[@".tag"] = @"web_sessions_change_idle_length_policy";
  } else if ([valueObj isTeamMergeFrom]) {
    jsonDict = [[DBTEAMLOGTeamMergeFromTypeSerializer serialize:valueObj.teamMergeFrom] mutableCopy];
    jsonDict[@".tag"] = @"team_merge_from";
  } else if ([valueObj isTeamMergeTo]) {
    jsonDict = [[DBTEAMLOGTeamMergeToTypeSerializer serialize:valueObj.teamMergeTo] mutableCopy];
    jsonDict[@".tag"] = @"team_merge_to";
  } else if ([valueObj isTeamProfileAddLogo]) {
    jsonDict = [[DBTEAMLOGTeamProfileAddLogoTypeSerializer serialize:valueObj.teamProfileAddLogo] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_add_logo";
  } else if ([valueObj isTeamProfileChangeDefaultLanguage]) {
    jsonDict = [[DBTEAMLOGTeamProfileChangeDefaultLanguageTypeSerializer
        serialize:valueObj.teamProfileChangeDefaultLanguage] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_change_default_language";
  } else if ([valueObj isTeamProfileChangeLogo]) {
    jsonDict = [[DBTEAMLOGTeamProfileChangeLogoTypeSerializer serialize:valueObj.teamProfileChangeLogo] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_change_logo";
  } else if ([valueObj isTeamProfileChangeName]) {
    jsonDict = [[DBTEAMLOGTeamProfileChangeNameTypeSerializer serialize:valueObj.teamProfileChangeName] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_change_name";
  } else if ([valueObj isTeamProfileRemoveLogo]) {
    jsonDict = [[DBTEAMLOGTeamProfileRemoveLogoTypeSerializer serialize:valueObj.teamProfileRemoveLogo] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_remove_logo";
  } else if ([valueObj isTfaAddBackupPhone]) {
    jsonDict = [[DBTEAMLOGTfaAddBackupPhoneTypeSerializer serialize:valueObj.tfaAddBackupPhone] mutableCopy];
    jsonDict[@".tag"] = @"tfa_add_backup_phone";
  } else if ([valueObj isTfaAddSecurityKey]) {
    jsonDict = [[DBTEAMLOGTfaAddSecurityKeyTypeSerializer serialize:valueObj.tfaAddSecurityKey] mutableCopy];
    jsonDict[@".tag"] = @"tfa_add_security_key";
  } else if ([valueObj isTfaChangeBackupPhone]) {
    jsonDict = [[DBTEAMLOGTfaChangeBackupPhoneTypeSerializer serialize:valueObj.tfaChangeBackupPhone] mutableCopy];
    jsonDict[@".tag"] = @"tfa_change_backup_phone";
  } else if ([valueObj isTfaChangeStatus]) {
    jsonDict = [[DBTEAMLOGTfaChangeStatusTypeSerializer serialize:valueObj.tfaChangeStatus] mutableCopy];
    jsonDict[@".tag"] = @"tfa_change_status";
  } else if ([valueObj isTfaRemoveBackupPhone]) {
    jsonDict = [[DBTEAMLOGTfaRemoveBackupPhoneTypeSerializer serialize:valueObj.tfaRemoveBackupPhone] mutableCopy];
    jsonDict[@".tag"] = @"tfa_remove_backup_phone";
  } else if ([valueObj isTfaRemoveSecurityKey]) {
    jsonDict = [[DBTEAMLOGTfaRemoveSecurityKeyTypeSerializer serialize:valueObj.tfaRemoveSecurityKey] mutableCopy];
    jsonDict[@".tag"] = @"tfa_remove_security_key";
  } else if ([valueObj isTfaReset]) {
    jsonDict = [[DBTEAMLOGTfaResetTypeSerializer serialize:valueObj.tfaReset] mutableCopy];
    jsonDict[@".tag"] = @"tfa_reset";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEventType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"app_link_team"]) {
    DBTEAMLOGAppLinkTeamType *appLinkTeam = [DBTEAMLOGAppLinkTeamTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithAppLinkTeam:appLinkTeam];
  } else if ([tag isEqualToString:@"app_link_user"]) {
    DBTEAMLOGAppLinkUserType *appLinkUser = [DBTEAMLOGAppLinkUserTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithAppLinkUser:appLinkUser];
  } else if ([tag isEqualToString:@"app_unlink_team"]) {
    DBTEAMLOGAppUnlinkTeamType *appUnlinkTeam = [DBTEAMLOGAppUnlinkTeamTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithAppUnlinkTeam:appUnlinkTeam];
  } else if ([tag isEqualToString:@"app_unlink_user"]) {
    DBTEAMLOGAppUnlinkUserType *appUnlinkUser = [DBTEAMLOGAppUnlinkUserTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithAppUnlinkUser:appUnlinkUser];
  } else if ([tag isEqualToString:@"file_add_comment"]) {
    DBTEAMLOGFileAddCommentType *fileAddComment = [DBTEAMLOGFileAddCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileAddComment:fileAddComment];
  } else if ([tag isEqualToString:@"file_change_comment_subscription"]) {
    DBTEAMLOGFileChangeCommentSubscriptionType *fileChangeCommentSubscription =
        [DBTEAMLOGFileChangeCommentSubscriptionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileChangeCommentSubscription:fileChangeCommentSubscription];
  } else if ([tag isEqualToString:@"file_delete_comment"]) {
    DBTEAMLOGFileDeleteCommentType *fileDeleteComment =
        [DBTEAMLOGFileDeleteCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileDeleteComment:fileDeleteComment];
  } else if ([tag isEqualToString:@"file_like_comment"]) {
    DBTEAMLOGFileLikeCommentType *fileLikeComment = [DBTEAMLOGFileLikeCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileLikeComment:fileLikeComment];
  } else if ([tag isEqualToString:@"file_resolve_comment"]) {
    DBTEAMLOGFileResolveCommentType *fileResolveComment =
        [DBTEAMLOGFileResolveCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileResolveComment:fileResolveComment];
  } else if ([tag isEqualToString:@"file_unlike_comment"]) {
    DBTEAMLOGFileUnlikeCommentType *fileUnlikeComment =
        [DBTEAMLOGFileUnlikeCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileUnlikeComment:fileUnlikeComment];
  } else if ([tag isEqualToString:@"file_unresolve_comment"]) {
    DBTEAMLOGFileUnresolveCommentType *fileUnresolveComment =
        [DBTEAMLOGFileUnresolveCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileUnresolveComment:fileUnresolveComment];
  } else if ([tag isEqualToString:@"device_change_ip_desktop"]) {
    DBTEAMLOGDeviceChangeIpDesktopType *deviceChangeIpDesktop =
        [DBTEAMLOGDeviceChangeIpDesktopTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceChangeIpDesktop:deviceChangeIpDesktop];
  } else if ([tag isEqualToString:@"device_change_ip_mobile"]) {
    DBTEAMLOGDeviceChangeIpMobileType *deviceChangeIpMobile =
        [DBTEAMLOGDeviceChangeIpMobileTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceChangeIpMobile:deviceChangeIpMobile];
  } else if ([tag isEqualToString:@"device_change_ip_web"]) {
    DBTEAMLOGDeviceChangeIpWebType *deviceChangeIpWeb =
        [DBTEAMLOGDeviceChangeIpWebTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceChangeIpWeb:deviceChangeIpWeb];
  } else if ([tag isEqualToString:@"device_delete_on_unlink_fail"]) {
    DBTEAMLOGDeviceDeleteOnUnlinkFailType *deviceDeleteOnUnlinkFail =
        [DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceDeleteOnUnlinkFail:deviceDeleteOnUnlinkFail];
  } else if ([tag isEqualToString:@"device_delete_on_unlink_success"]) {
    DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *deviceDeleteOnUnlinkSuccess =
        [DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceDeleteOnUnlinkSuccess:deviceDeleteOnUnlinkSuccess];
  } else if ([tag isEqualToString:@"device_link_fail"]) {
    DBTEAMLOGDeviceLinkFailType *deviceLinkFail = [DBTEAMLOGDeviceLinkFailTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceLinkFail:deviceLinkFail];
  } else if ([tag isEqualToString:@"device_link_success"]) {
    DBTEAMLOGDeviceLinkSuccessType *deviceLinkSuccess =
        [DBTEAMLOGDeviceLinkSuccessTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceLinkSuccess:deviceLinkSuccess];
  } else if ([tag isEqualToString:@"device_management_disabled"]) {
    DBTEAMLOGDeviceManagementDisabledType *deviceManagementDisabled =
        [DBTEAMLOGDeviceManagementDisabledTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceManagementDisabled:deviceManagementDisabled];
  } else if ([tag isEqualToString:@"device_management_enabled"]) {
    DBTEAMLOGDeviceManagementEnabledType *deviceManagementEnabled =
        [DBTEAMLOGDeviceManagementEnabledTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceManagementEnabled:deviceManagementEnabled];
  } else if ([tag isEqualToString:@"device_unlink"]) {
    DBTEAMLOGDeviceUnlinkType *deviceUnlink = [DBTEAMLOGDeviceUnlinkTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceUnlink:deviceUnlink];
  } else if ([tag isEqualToString:@"emm_refresh_auth_token"]) {
    DBTEAMLOGEmmRefreshAuthTokenType *emmRefreshAuthToken =
        [DBTEAMLOGEmmRefreshAuthTokenTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithEmmRefreshAuthToken:emmRefreshAuthToken];
  } else if ([tag isEqualToString:@"account_capture_change_availability"]) {
    DBTEAMLOGAccountCaptureChangeAvailabilityType *accountCaptureChangeAvailability =
        [DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithAccountCaptureChangeAvailability:accountCaptureChangeAvailability];
  } else if ([tag isEqualToString:@"account_capture_migrate_account"]) {
    DBTEAMLOGAccountCaptureMigrateAccountType *accountCaptureMigrateAccount =
        [DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithAccountCaptureMigrateAccount:accountCaptureMigrateAccount];
  } else if ([tag isEqualToString:@"account_capture_notification_emails_sent"]) {
    DBTEAMLOGAccountCaptureNotificationEmailsSentType *accountCaptureNotificationEmailsSent =
        [DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventType alloc] initWithAccountCaptureNotificationEmailsSent:accountCaptureNotificationEmailsSent];
  } else if ([tag isEqualToString:@"account_capture_relinquish_account"]) {
    DBTEAMLOGAccountCaptureRelinquishAccountType *accountCaptureRelinquishAccount =
        [DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithAccountCaptureRelinquishAccount:accountCaptureRelinquishAccount];
  } else if ([tag isEqualToString:@"disabled_domain_invites"]) {
    DBTEAMLOGDisabledDomainInvitesType *disabledDomainInvites =
        [DBTEAMLOGDisabledDomainInvitesTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDisabledDomainInvites:disabledDomainInvites];
  } else if ([tag isEqualToString:@"domain_invites_approve_request_to_join_team"]) {
    DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *domainInvitesApproveRequestToJoinTeam =
        [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc]
        initWithDomainInvitesApproveRequestToJoinTeam:domainInvitesApproveRequestToJoinTeam];
  } else if ([tag isEqualToString:@"domain_invites_decline_request_to_join_team"]) {
    DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *domainInvitesDeclineRequestToJoinTeam =
        [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc]
        initWithDomainInvitesDeclineRequestToJoinTeam:domainInvitesDeclineRequestToJoinTeam];
  } else if ([tag isEqualToString:@"domain_invites_email_existing_users"]) {
    DBTEAMLOGDomainInvitesEmailExistingUsersType *domainInvitesEmailExistingUsers =
        [DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDomainInvitesEmailExistingUsers:domainInvitesEmailExistingUsers];
  } else if ([tag isEqualToString:@"domain_invites_request_to_join_team"]) {
    DBTEAMLOGDomainInvitesRequestToJoinTeamType *domainInvitesRequestToJoinTeam =
        [DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDomainInvitesRequestToJoinTeam:domainInvitesRequestToJoinTeam];
  } else if ([tag isEqualToString:@"domain_invites_set_invite_new_user_pref_to_no"]) {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *domainInvitesSetInviteNewUserPrefToNo =
        [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc]
        initWithDomainInvitesSetInviteNewUserPrefToNo:domainInvitesSetInviteNewUserPrefToNo];
  } else if ([tag isEqualToString:@"domain_invites_set_invite_new_user_pref_to_yes"]) {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *domainInvitesSetInviteNewUserPrefToYes =
        [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc]
        initWithDomainInvitesSetInviteNewUserPrefToYes:domainInvitesSetInviteNewUserPrefToYes];
  } else if ([tag isEqualToString:@"domain_verification_add_domain_fail"]) {
    DBTEAMLOGDomainVerificationAddDomainFailType *domainVerificationAddDomainFail =
        [DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDomainVerificationAddDomainFail:domainVerificationAddDomainFail];
  } else if ([tag isEqualToString:@"domain_verification_add_domain_success"]) {
    DBTEAMLOGDomainVerificationAddDomainSuccessType *domainVerificationAddDomainSuccess =
        [DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDomainVerificationAddDomainSuccess:domainVerificationAddDomainSuccess];
  } else if ([tag isEqualToString:@"domain_verification_remove_domain"]) {
    DBTEAMLOGDomainVerificationRemoveDomainType *domainVerificationRemoveDomain =
        [DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDomainVerificationRemoveDomain:domainVerificationRemoveDomain];
  } else if ([tag isEqualToString:@"enabled_domain_invites"]) {
    DBTEAMLOGEnabledDomainInvitesType *enabledDomainInvites =
        [DBTEAMLOGEnabledDomainInvitesTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithEnabledDomainInvites:enabledDomainInvites];
  } else if ([tag isEqualToString:@"create_folder"]) {
    DBTEAMLOGCreateFolderType *createFolder = [DBTEAMLOGCreateFolderTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithCreateFolder:createFolder];
  } else if ([tag isEqualToString:@"file_add"]) {
    DBTEAMLOGFileAddType *fileAdd = [DBTEAMLOGFileAddTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileAdd:fileAdd];
  } else if ([tag isEqualToString:@"file_copy"]) {
    DBTEAMLOGFileCopyType *fileCopy = [DBTEAMLOGFileCopyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileCopy:fileCopy];
  } else if ([tag isEqualToString:@"file_delete"]) {
    DBTEAMLOGFileDeleteType *fileDelete = [DBTEAMLOGFileDeleteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileDelete:fileDelete];
  } else if ([tag isEqualToString:@"file_download"]) {
    DBTEAMLOGFileDownloadType *fileDownload = [DBTEAMLOGFileDownloadTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileDownload:fileDownload];
  } else if ([tag isEqualToString:@"file_edit"]) {
    DBTEAMLOGFileEditType *fileEdit = [DBTEAMLOGFileEditTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileEdit:fileEdit];
  } else if ([tag isEqualToString:@"file_get_copy_reference"]) {
    DBTEAMLOGFileGetCopyReferenceType *fileGetCopyReference =
        [DBTEAMLOGFileGetCopyReferenceTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileGetCopyReference:fileGetCopyReference];
  } else if ([tag isEqualToString:@"file_move"]) {
    DBTEAMLOGFileMoveType *fileMove = [DBTEAMLOGFileMoveTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileMove:fileMove];
  } else if ([tag isEqualToString:@"file_permanently_delete"]) {
    DBTEAMLOGFilePermanentlyDeleteType *filePermanentlyDelete =
        [DBTEAMLOGFilePermanentlyDeleteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFilePermanentlyDelete:filePermanentlyDelete];
  } else if ([tag isEqualToString:@"file_preview"]) {
    DBTEAMLOGFilePreviewType *filePreview = [DBTEAMLOGFilePreviewTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFilePreview:filePreview];
  } else if ([tag isEqualToString:@"file_rename"]) {
    DBTEAMLOGFileRenameType *fileRename = [DBTEAMLOGFileRenameTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileRename:fileRename];
  } else if ([tag isEqualToString:@"file_restore"]) {
    DBTEAMLOGFileRestoreType *fileRestore = [DBTEAMLOGFileRestoreTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileRestore:fileRestore];
  } else if ([tag isEqualToString:@"file_revert"]) {
    DBTEAMLOGFileRevertType *fileRevert = [DBTEAMLOGFileRevertTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileRevert:fileRevert];
  } else if ([tag isEqualToString:@"file_rollback_changes"]) {
    DBTEAMLOGFileRollbackChangesType *fileRollbackChanges =
        [DBTEAMLOGFileRollbackChangesTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileRollbackChanges:fileRollbackChanges];
  } else if ([tag isEqualToString:@"file_save_copy_reference"]) {
    DBTEAMLOGFileSaveCopyReferenceType *fileSaveCopyReference =
        [DBTEAMLOGFileSaveCopyReferenceTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileSaveCopyReference:fileSaveCopyReference];
  } else if ([tag isEqualToString:@"file_request_change"]) {
    DBTEAMLOGFileRequestChangeType *fileRequestChange =
        [DBTEAMLOGFileRequestChangeTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileRequestChange:fileRequestChange];
  } else if ([tag isEqualToString:@"file_request_close"]) {
    DBTEAMLOGFileRequestCloseType *fileRequestClose = [DBTEAMLOGFileRequestCloseTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileRequestClose:fileRequestClose];
  } else if ([tag isEqualToString:@"file_request_create"]) {
    DBTEAMLOGFileRequestCreateType *fileRequestCreate =
        [DBTEAMLOGFileRequestCreateTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileRequestCreate:fileRequestCreate];
  } else if ([tag isEqualToString:@"file_request_receive_file"]) {
    DBTEAMLOGFileRequestReceiveFileType *fileRequestReceiveFile =
        [DBTEAMLOGFileRequestReceiveFileTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileRequestReceiveFile:fileRequestReceiveFile];
  } else if ([tag isEqualToString:@"group_add_external_id"]) {
    DBTEAMLOGGroupAddExternalIdType *groupAddExternalId =
        [DBTEAMLOGGroupAddExternalIdTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupAddExternalId:groupAddExternalId];
  } else if ([tag isEqualToString:@"group_add_member"]) {
    DBTEAMLOGGroupAddMemberType *groupAddMember = [DBTEAMLOGGroupAddMemberTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupAddMember:groupAddMember];
  } else if ([tag isEqualToString:@"group_change_external_id"]) {
    DBTEAMLOGGroupChangeExternalIdType *groupChangeExternalId =
        [DBTEAMLOGGroupChangeExternalIdTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupChangeExternalId:groupChangeExternalId];
  } else if ([tag isEqualToString:@"group_change_management_type"]) {
    DBTEAMLOGGroupChangeManagementTypeType *groupChangeManagementType =
        [DBTEAMLOGGroupChangeManagementTypeTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupChangeManagementType:groupChangeManagementType];
  } else if ([tag isEqualToString:@"group_change_member_role"]) {
    DBTEAMLOGGroupChangeMemberRoleType *groupChangeMemberRole =
        [DBTEAMLOGGroupChangeMemberRoleTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupChangeMemberRole:groupChangeMemberRole];
  } else if ([tag isEqualToString:@"group_create"]) {
    DBTEAMLOGGroupCreateType *groupCreate = [DBTEAMLOGGroupCreateTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupCreate:groupCreate];
  } else if ([tag isEqualToString:@"group_delete"]) {
    DBTEAMLOGGroupDeleteType *groupDelete = [DBTEAMLOGGroupDeleteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupDelete:groupDelete];
  } else if ([tag isEqualToString:@"group_description_updated"]) {
    DBTEAMLOGGroupDescriptionUpdatedType *groupDescriptionUpdated =
        [DBTEAMLOGGroupDescriptionUpdatedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupDescriptionUpdated:groupDescriptionUpdated];
  } else if ([tag isEqualToString:@"group_join_policy_updated"]) {
    DBTEAMLOGGroupJoinPolicyUpdatedType *groupJoinPolicyUpdated =
        [DBTEAMLOGGroupJoinPolicyUpdatedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupJoinPolicyUpdated:groupJoinPolicyUpdated];
  } else if ([tag isEqualToString:@"group_moved"]) {
    DBTEAMLOGGroupMovedType *groupMoved = [DBTEAMLOGGroupMovedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupMoved:groupMoved];
  } else if ([tag isEqualToString:@"group_remove_external_id"]) {
    DBTEAMLOGGroupRemoveExternalIdType *groupRemoveExternalId =
        [DBTEAMLOGGroupRemoveExternalIdTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupRemoveExternalId:groupRemoveExternalId];
  } else if ([tag isEqualToString:@"group_remove_member"]) {
    DBTEAMLOGGroupRemoveMemberType *groupRemoveMember =
        [DBTEAMLOGGroupRemoveMemberTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupRemoveMember:groupRemoveMember];
  } else if ([tag isEqualToString:@"group_rename"]) {
    DBTEAMLOGGroupRenameType *groupRename = [DBTEAMLOGGroupRenameTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupRename:groupRename];
  } else if ([tag isEqualToString:@"emm_error"]) {
    DBTEAMLOGEmmErrorType *emmError = [DBTEAMLOGEmmErrorTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithEmmError:emmError];
  } else if ([tag isEqualToString:@"login_fail"]) {
    DBTEAMLOGLoginFailType *loginFail = [DBTEAMLOGLoginFailTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithLoginFail:loginFail];
  } else if ([tag isEqualToString:@"login_success"]) {
    DBTEAMLOGLoginSuccessType *loginSuccess = [DBTEAMLOGLoginSuccessTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithLoginSuccess:loginSuccess];
  } else if ([tag isEqualToString:@"logout"]) {
    DBTEAMLOGLogoutType *logout = [DBTEAMLOGLogoutTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithLogout:logout];
  } else if ([tag isEqualToString:@"reseller_support_session_end"]) {
    DBTEAMLOGResellerSupportSessionEndType *resellerSupportSessionEnd =
        [DBTEAMLOGResellerSupportSessionEndTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithResellerSupportSessionEnd:resellerSupportSessionEnd];
  } else if ([tag isEqualToString:@"reseller_support_session_start"]) {
    DBTEAMLOGResellerSupportSessionStartType *resellerSupportSessionStart =
        [DBTEAMLOGResellerSupportSessionStartTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithResellerSupportSessionStart:resellerSupportSessionStart];
  } else if ([tag isEqualToString:@"sign_in_as_session_end"]) {
    DBTEAMLOGSignInAsSessionEndType *signInAsSessionEnd =
        [DBTEAMLOGSignInAsSessionEndTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSignInAsSessionEnd:signInAsSessionEnd];
  } else if ([tag isEqualToString:@"sign_in_as_session_start"]) {
    DBTEAMLOGSignInAsSessionStartType *signInAsSessionStart =
        [DBTEAMLOGSignInAsSessionStartTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSignInAsSessionStart:signInAsSessionStart];
  } else if ([tag isEqualToString:@"sso_error"]) {
    DBTEAMLOGSsoErrorType *ssoError = [DBTEAMLOGSsoErrorTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoError:ssoError];
  } else if ([tag isEqualToString:@"member_add_name"]) {
    DBTEAMLOGMemberAddNameType *memberAddName = [DBTEAMLOGMemberAddNameTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberAddName:memberAddName];
  } else if ([tag isEqualToString:@"member_change_admin_role"]) {
    DBTEAMLOGMemberChangeAdminRoleType *memberChangeAdminRole =
        [DBTEAMLOGMemberChangeAdminRoleTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberChangeAdminRole:memberChangeAdminRole];
  } else if ([tag isEqualToString:@"member_change_email"]) {
    DBTEAMLOGMemberChangeEmailType *memberChangeEmail =
        [DBTEAMLOGMemberChangeEmailTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberChangeEmail:memberChangeEmail];
  } else if ([tag isEqualToString:@"member_change_membership_type"]) {
    DBTEAMLOGMemberChangeMembershipTypeType *memberChangeMembershipType =
        [DBTEAMLOGMemberChangeMembershipTypeTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberChangeMembershipType:memberChangeMembershipType];
  } else if ([tag isEqualToString:@"member_change_name"]) {
    DBTEAMLOGMemberChangeNameType *memberChangeName = [DBTEAMLOGMemberChangeNameTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberChangeName:memberChangeName];
  } else if ([tag isEqualToString:@"member_change_status"]) {
    DBTEAMLOGMemberChangeStatusType *memberChangeStatus =
        [DBTEAMLOGMemberChangeStatusTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberChangeStatus:memberChangeStatus];
  } else if ([tag isEqualToString:@"member_permanently_delete_account_contents"]) {
    DBTEAMLOGMemberPermanentlyDeleteAccountContentsType *memberPermanentlyDeleteAccountContents =
        [DBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc]
        initWithMemberPermanentlyDeleteAccountContents:memberPermanentlyDeleteAccountContents];
  } else if ([tag isEqualToString:@"member_space_limits_add_custom_quota"]) {
    DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType *memberSpaceLimitsAddCustomQuota =
        [DBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsAddCustomQuota:memberSpaceLimitsAddCustomQuota];
  } else if ([tag isEqualToString:@"member_space_limits_change_custom_quota"]) {
    DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType *memberSpaceLimitsChangeCustomQuota =
        [DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsChangeCustomQuota:memberSpaceLimitsChangeCustomQuota];
  } else if ([tag isEqualToString:@"member_space_limits_change_status"]) {
    DBTEAMLOGMemberSpaceLimitsChangeStatusType *memberSpaceLimitsChangeStatus =
        [DBTEAMLOGMemberSpaceLimitsChangeStatusTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsChangeStatus:memberSpaceLimitsChangeStatus];
  } else if ([tag isEqualToString:@"member_space_limits_remove_custom_quota"]) {
    DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType *memberSpaceLimitsRemoveCustomQuota =
        [DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsRemoveCustomQuota:memberSpaceLimitsRemoveCustomQuota];
  } else if ([tag isEqualToString:@"member_suggest"]) {
    DBTEAMLOGMemberSuggestType *memberSuggest = [DBTEAMLOGMemberSuggestTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberSuggest:memberSuggest];
  } else if ([tag isEqualToString:@"member_transfer_account_contents"]) {
    DBTEAMLOGMemberTransferAccountContentsType *memberTransferAccountContents =
        [DBTEAMLOGMemberTransferAccountContentsTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberTransferAccountContents:memberTransferAccountContents];
  } else if ([tag isEqualToString:@"secondary_mails_policy_changed"]) {
    DBTEAMLOGSecondaryMailsPolicyChangedType *secondaryMailsPolicyChanged =
        [DBTEAMLOGSecondaryMailsPolicyChangedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSecondaryMailsPolicyChanged:secondaryMailsPolicyChanged];
  } else if ([tag isEqualToString:@"paper_content_add_member"]) {
    DBTEAMLOGPaperContentAddMemberType *paperContentAddMember =
        [DBTEAMLOGPaperContentAddMemberTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperContentAddMember:paperContentAddMember];
  } else if ([tag isEqualToString:@"paper_content_add_to_folder"]) {
    DBTEAMLOGPaperContentAddToFolderType *paperContentAddToFolder =
        [DBTEAMLOGPaperContentAddToFolderTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperContentAddToFolder:paperContentAddToFolder];
  } else if ([tag isEqualToString:@"paper_content_archive"]) {
    DBTEAMLOGPaperContentArchiveType *paperContentArchive =
        [DBTEAMLOGPaperContentArchiveTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperContentArchive:paperContentArchive];
  } else if ([tag isEqualToString:@"paper_content_create"]) {
    DBTEAMLOGPaperContentCreateType *paperContentCreate =
        [DBTEAMLOGPaperContentCreateTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperContentCreate:paperContentCreate];
  } else if ([tag isEqualToString:@"paper_content_permanently_delete"]) {
    DBTEAMLOGPaperContentPermanentlyDeleteType *paperContentPermanentlyDelete =
        [DBTEAMLOGPaperContentPermanentlyDeleteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperContentPermanentlyDelete:paperContentPermanentlyDelete];
  } else if ([tag isEqualToString:@"paper_content_remove_from_folder"]) {
    DBTEAMLOGPaperContentRemoveFromFolderType *paperContentRemoveFromFolder =
        [DBTEAMLOGPaperContentRemoveFromFolderTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperContentRemoveFromFolder:paperContentRemoveFromFolder];
  } else if ([tag isEqualToString:@"paper_content_remove_member"]) {
    DBTEAMLOGPaperContentRemoveMemberType *paperContentRemoveMember =
        [DBTEAMLOGPaperContentRemoveMemberTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperContentRemoveMember:paperContentRemoveMember];
  } else if ([tag isEqualToString:@"paper_content_rename"]) {
    DBTEAMLOGPaperContentRenameType *paperContentRename =
        [DBTEAMLOGPaperContentRenameTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperContentRename:paperContentRename];
  } else if ([tag isEqualToString:@"paper_content_restore"]) {
    DBTEAMLOGPaperContentRestoreType *paperContentRestore =
        [DBTEAMLOGPaperContentRestoreTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperContentRestore:paperContentRestore];
  } else if ([tag isEqualToString:@"paper_doc_add_comment"]) {
    DBTEAMLOGPaperDocAddCommentType *paperDocAddComment =
        [DBTEAMLOGPaperDocAddCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocAddComment:paperDocAddComment];
  } else if ([tag isEqualToString:@"paper_doc_change_member_role"]) {
    DBTEAMLOGPaperDocChangeMemberRoleType *paperDocChangeMemberRole =
        [DBTEAMLOGPaperDocChangeMemberRoleTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocChangeMemberRole:paperDocChangeMemberRole];
  } else if ([tag isEqualToString:@"paper_doc_change_sharing_policy"]) {
    DBTEAMLOGPaperDocChangeSharingPolicyType *paperDocChangeSharingPolicy =
        [DBTEAMLOGPaperDocChangeSharingPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocChangeSharingPolicy:paperDocChangeSharingPolicy];
  } else if ([tag isEqualToString:@"paper_doc_change_subscription"]) {
    DBTEAMLOGPaperDocChangeSubscriptionType *paperDocChangeSubscription =
        [DBTEAMLOGPaperDocChangeSubscriptionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocChangeSubscription:paperDocChangeSubscription];
  } else if ([tag isEqualToString:@"paper_doc_deleted"]) {
    DBTEAMLOGPaperDocDeletedType *paperDocDeleted = [DBTEAMLOGPaperDocDeletedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocDeleted:paperDocDeleted];
  } else if ([tag isEqualToString:@"paper_doc_delete_comment"]) {
    DBTEAMLOGPaperDocDeleteCommentType *paperDocDeleteComment =
        [DBTEAMLOGPaperDocDeleteCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocDeleteComment:paperDocDeleteComment];
  } else if ([tag isEqualToString:@"paper_doc_download"]) {
    DBTEAMLOGPaperDocDownloadType *paperDocDownload = [DBTEAMLOGPaperDocDownloadTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocDownload:paperDocDownload];
  } else if ([tag isEqualToString:@"paper_doc_edit"]) {
    DBTEAMLOGPaperDocEditType *paperDocEdit = [DBTEAMLOGPaperDocEditTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocEdit:paperDocEdit];
  } else if ([tag isEqualToString:@"paper_doc_edit_comment"]) {
    DBTEAMLOGPaperDocEditCommentType *paperDocEditComment =
        [DBTEAMLOGPaperDocEditCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocEditComment:paperDocEditComment];
  } else if ([tag isEqualToString:@"paper_doc_followed"]) {
    DBTEAMLOGPaperDocFollowedType *paperDocFollowed = [DBTEAMLOGPaperDocFollowedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocFollowed:paperDocFollowed];
  } else if ([tag isEqualToString:@"paper_doc_mention"]) {
    DBTEAMLOGPaperDocMentionType *paperDocMention = [DBTEAMLOGPaperDocMentionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocMention:paperDocMention];
  } else if ([tag isEqualToString:@"paper_doc_request_access"]) {
    DBTEAMLOGPaperDocRequestAccessType *paperDocRequestAccess =
        [DBTEAMLOGPaperDocRequestAccessTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocRequestAccess:paperDocRequestAccess];
  } else if ([tag isEqualToString:@"paper_doc_resolve_comment"]) {
    DBTEAMLOGPaperDocResolveCommentType *paperDocResolveComment =
        [DBTEAMLOGPaperDocResolveCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocResolveComment:paperDocResolveComment];
  } else if ([tag isEqualToString:@"paper_doc_revert"]) {
    DBTEAMLOGPaperDocRevertType *paperDocRevert = [DBTEAMLOGPaperDocRevertTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocRevert:paperDocRevert];
  } else if ([tag isEqualToString:@"paper_doc_slack_share"]) {
    DBTEAMLOGPaperDocSlackShareType *paperDocSlackShare =
        [DBTEAMLOGPaperDocSlackShareTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocSlackShare:paperDocSlackShare];
  } else if ([tag isEqualToString:@"paper_doc_team_invite"]) {
    DBTEAMLOGPaperDocTeamInviteType *paperDocTeamInvite =
        [DBTEAMLOGPaperDocTeamInviteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocTeamInvite:paperDocTeamInvite];
  } else if ([tag isEqualToString:@"paper_doc_trashed"]) {
    DBTEAMLOGPaperDocTrashedType *paperDocTrashed = [DBTEAMLOGPaperDocTrashedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocTrashed:paperDocTrashed];
  } else if ([tag isEqualToString:@"paper_doc_unresolve_comment"]) {
    DBTEAMLOGPaperDocUnresolveCommentType *paperDocUnresolveComment =
        [DBTEAMLOGPaperDocUnresolveCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocUnresolveComment:paperDocUnresolveComment];
  } else if ([tag isEqualToString:@"paper_doc_untrashed"]) {
    DBTEAMLOGPaperDocUntrashedType *paperDocUntrashed =
        [DBTEAMLOGPaperDocUntrashedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocUntrashed:paperDocUntrashed];
  } else if ([tag isEqualToString:@"paper_doc_view"]) {
    DBTEAMLOGPaperDocViewType *paperDocView = [DBTEAMLOGPaperDocViewTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperDocView:paperDocView];
  } else if ([tag isEqualToString:@"paper_external_view_allow"]) {
    DBTEAMLOGPaperExternalViewAllowType *paperExternalViewAllow =
        [DBTEAMLOGPaperExternalViewAllowTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperExternalViewAllow:paperExternalViewAllow];
  } else if ([tag isEqualToString:@"paper_external_view_default_team"]) {
    DBTEAMLOGPaperExternalViewDefaultTeamType *paperExternalViewDefaultTeam =
        [DBTEAMLOGPaperExternalViewDefaultTeamTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperExternalViewDefaultTeam:paperExternalViewDefaultTeam];
  } else if ([tag isEqualToString:@"paper_external_view_forbid"]) {
    DBTEAMLOGPaperExternalViewForbidType *paperExternalViewForbid =
        [DBTEAMLOGPaperExternalViewForbidTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperExternalViewForbid:paperExternalViewForbid];
  } else if ([tag isEqualToString:@"paper_folder_change_subscription"]) {
    DBTEAMLOGPaperFolderChangeSubscriptionType *paperFolderChangeSubscription =
        [DBTEAMLOGPaperFolderChangeSubscriptionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperFolderChangeSubscription:paperFolderChangeSubscription];
  } else if ([tag isEqualToString:@"paper_folder_deleted"]) {
    DBTEAMLOGPaperFolderDeletedType *paperFolderDeleted =
        [DBTEAMLOGPaperFolderDeletedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperFolderDeleted:paperFolderDeleted];
  } else if ([tag isEqualToString:@"paper_folder_followed"]) {
    DBTEAMLOGPaperFolderFollowedType *paperFolderFollowed =
        [DBTEAMLOGPaperFolderFollowedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperFolderFollowed:paperFolderFollowed];
  } else if ([tag isEqualToString:@"paper_folder_team_invite"]) {
    DBTEAMLOGPaperFolderTeamInviteType *paperFolderTeamInvite =
        [DBTEAMLOGPaperFolderTeamInviteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperFolderTeamInvite:paperFolderTeamInvite];
  } else if ([tag isEqualToString:@"password_change"]) {
    DBTEAMLOGPasswordChangeType *passwordChange = [DBTEAMLOGPasswordChangeTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPasswordChange:passwordChange];
  } else if ([tag isEqualToString:@"password_reset"]) {
    DBTEAMLOGPasswordResetType *passwordReset = [DBTEAMLOGPasswordResetTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPasswordReset:passwordReset];
  } else if ([tag isEqualToString:@"password_reset_all"]) {
    DBTEAMLOGPasswordResetAllType *passwordResetAll = [DBTEAMLOGPasswordResetAllTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPasswordResetAll:passwordResetAll];
  } else if ([tag isEqualToString:@"emm_create_exceptions_report"]) {
    DBTEAMLOGEmmCreateExceptionsReportType *emmCreateExceptionsReport =
        [DBTEAMLOGEmmCreateExceptionsReportTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithEmmCreateExceptionsReport:emmCreateExceptionsReport];
  } else if ([tag isEqualToString:@"emm_create_usage_report"]) {
    DBTEAMLOGEmmCreateUsageReportType *emmCreateUsageReport =
        [DBTEAMLOGEmmCreateUsageReportTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithEmmCreateUsageReport:emmCreateUsageReport];
  } else if ([tag isEqualToString:@"export_members_report"]) {
    DBTEAMLOGExportMembersReportType *exportMembersReport =
        [DBTEAMLOGExportMembersReportTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithExportMembersReport:exportMembersReport];
  } else if ([tag isEqualToString:@"paper_admin_export_start"]) {
    DBTEAMLOGPaperAdminExportStartType *paperAdminExportStart =
        [DBTEAMLOGPaperAdminExportStartTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperAdminExportStart:paperAdminExportStart];
  } else if ([tag isEqualToString:@"smart_sync_create_admin_privilege_report"]) {
    DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType *smartSyncCreateAdminPrivilegeReport =
        [DBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSmartSyncCreateAdminPrivilegeReport:smartSyncCreateAdminPrivilegeReport];
  } else if ([tag isEqualToString:@"team_activity_create_report"]) {
    DBTEAMLOGTeamActivityCreateReportType *teamActivityCreateReport =
        [DBTEAMLOGTeamActivityCreateReportTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamActivityCreateReport:teamActivityCreateReport];
  } else if ([tag isEqualToString:@"collection_share"]) {
    DBTEAMLOGCollectionShareType *collectionShare = [DBTEAMLOGCollectionShareTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithCollectionShare:collectionShare];
  } else if ([tag isEqualToString:@"note_acl_invite_only"]) {
    DBTEAMLOGNoteAclInviteOnlyType *noteAclInviteOnly =
        [DBTEAMLOGNoteAclInviteOnlyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithNoteAclInviteOnly:noteAclInviteOnly];
  } else if ([tag isEqualToString:@"note_acl_link"]) {
    DBTEAMLOGNoteAclLinkType *noteAclLink = [DBTEAMLOGNoteAclLinkTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithNoteAclLink:noteAclLink];
  } else if ([tag isEqualToString:@"note_acl_team_link"]) {
    DBTEAMLOGNoteAclTeamLinkType *noteAclTeamLink = [DBTEAMLOGNoteAclTeamLinkTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithNoteAclTeamLink:noteAclTeamLink];
  } else if ([tag isEqualToString:@"note_shared"]) {
    DBTEAMLOGNoteSharedType *noteShared = [DBTEAMLOGNoteSharedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithNoteShared:noteShared];
  } else if ([tag isEqualToString:@"note_share_receive"]) {
    DBTEAMLOGNoteShareReceiveType *noteShareReceive = [DBTEAMLOGNoteShareReceiveTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithNoteShareReceive:noteShareReceive];
  } else if ([tag isEqualToString:@"open_note_shared"]) {
    DBTEAMLOGOpenNoteSharedType *openNoteShared = [DBTEAMLOGOpenNoteSharedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithOpenNoteShared:openNoteShared];
  } else if ([tag isEqualToString:@"sf_add_group"]) {
    DBTEAMLOGSfAddGroupType *sfAddGroup = [DBTEAMLOGSfAddGroupTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfAddGroup:sfAddGroup];
  } else if ([tag isEqualToString:@"sf_allow_non_members_to_view_shared_links"]) {
    DBTEAMLOGSfAllowNonMembersToViewSharedLinksType *sfAllowNonMembersToViewSharedLinks =
        [DBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfAllowNonMembersToViewSharedLinks:sfAllowNonMembersToViewSharedLinks];
  } else if ([tag isEqualToString:@"sf_external_invite_warn"]) {
    DBTEAMLOGSfExternalInviteWarnType *sfExternalInviteWarn =
        [DBTEAMLOGSfExternalInviteWarnTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfExternalInviteWarn:sfExternalInviteWarn];
  } else if ([tag isEqualToString:@"sf_fb_invite"]) {
    DBTEAMLOGSfFbInviteType *sfFbInvite = [DBTEAMLOGSfFbInviteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfFbInvite:sfFbInvite];
  } else if ([tag isEqualToString:@"sf_fb_invite_change_role"]) {
    DBTEAMLOGSfFbInviteChangeRoleType *sfFbInviteChangeRole =
        [DBTEAMLOGSfFbInviteChangeRoleTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfFbInviteChangeRole:sfFbInviteChangeRole];
  } else if ([tag isEqualToString:@"sf_fb_uninvite"]) {
    DBTEAMLOGSfFbUninviteType *sfFbUninvite = [DBTEAMLOGSfFbUninviteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfFbUninvite:sfFbUninvite];
  } else if ([tag isEqualToString:@"sf_invite_group"]) {
    DBTEAMLOGSfInviteGroupType *sfInviteGroup = [DBTEAMLOGSfInviteGroupTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfInviteGroup:sfInviteGroup];
  } else if ([tag isEqualToString:@"sf_team_grant_access"]) {
    DBTEAMLOGSfTeamGrantAccessType *sfTeamGrantAccess =
        [DBTEAMLOGSfTeamGrantAccessTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfTeamGrantAccess:sfTeamGrantAccess];
  } else if ([tag isEqualToString:@"sf_team_invite"]) {
    DBTEAMLOGSfTeamInviteType *sfTeamInvite = [DBTEAMLOGSfTeamInviteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfTeamInvite:sfTeamInvite];
  } else if ([tag isEqualToString:@"sf_team_invite_change_role"]) {
    DBTEAMLOGSfTeamInviteChangeRoleType *sfTeamInviteChangeRole =
        [DBTEAMLOGSfTeamInviteChangeRoleTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfTeamInviteChangeRole:sfTeamInviteChangeRole];
  } else if ([tag isEqualToString:@"sf_team_join"]) {
    DBTEAMLOGSfTeamJoinType *sfTeamJoin = [DBTEAMLOGSfTeamJoinTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfTeamJoin:sfTeamJoin];
  } else if ([tag isEqualToString:@"sf_team_join_from_oob_link"]) {
    DBTEAMLOGSfTeamJoinFromOobLinkType *sfTeamJoinFromOobLink =
        [DBTEAMLOGSfTeamJoinFromOobLinkTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfTeamJoinFromOobLink:sfTeamJoinFromOobLink];
  } else if ([tag isEqualToString:@"sf_team_uninvite"]) {
    DBTEAMLOGSfTeamUninviteType *sfTeamUninvite = [DBTEAMLOGSfTeamUninviteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSfTeamUninvite:sfTeamUninvite];
  } else if ([tag isEqualToString:@"shared_content_add_invitees"]) {
    DBTEAMLOGSharedContentAddInviteesType *sharedContentAddInvitees =
        [DBTEAMLOGSharedContentAddInviteesTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentAddInvitees:sharedContentAddInvitees];
  } else if ([tag isEqualToString:@"shared_content_add_link_expiry"]) {
    DBTEAMLOGSharedContentAddLinkExpiryType *sharedContentAddLinkExpiry =
        [DBTEAMLOGSharedContentAddLinkExpiryTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentAddLinkExpiry:sharedContentAddLinkExpiry];
  } else if ([tag isEqualToString:@"shared_content_add_link_password"]) {
    DBTEAMLOGSharedContentAddLinkPasswordType *sharedContentAddLinkPassword =
        [DBTEAMLOGSharedContentAddLinkPasswordTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentAddLinkPassword:sharedContentAddLinkPassword];
  } else if ([tag isEqualToString:@"shared_content_add_member"]) {
    DBTEAMLOGSharedContentAddMemberType *sharedContentAddMember =
        [DBTEAMLOGSharedContentAddMemberTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentAddMember:sharedContentAddMember];
  } else if ([tag isEqualToString:@"shared_content_change_downloads_policy"]) {
    DBTEAMLOGSharedContentChangeDownloadsPolicyType *sharedContentChangeDownloadsPolicy =
        [DBTEAMLOGSharedContentChangeDownloadsPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeDownloadsPolicy:sharedContentChangeDownloadsPolicy];
  } else if ([tag isEqualToString:@"shared_content_change_invitee_role"]) {
    DBTEAMLOGSharedContentChangeInviteeRoleType *sharedContentChangeInviteeRole =
        [DBTEAMLOGSharedContentChangeInviteeRoleTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeInviteeRole:sharedContentChangeInviteeRole];
  } else if ([tag isEqualToString:@"shared_content_change_link_audience"]) {
    DBTEAMLOGSharedContentChangeLinkAudienceType *sharedContentChangeLinkAudience =
        [DBTEAMLOGSharedContentChangeLinkAudienceTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeLinkAudience:sharedContentChangeLinkAudience];
  } else if ([tag isEqualToString:@"shared_content_change_link_expiry"]) {
    DBTEAMLOGSharedContentChangeLinkExpiryType *sharedContentChangeLinkExpiry =
        [DBTEAMLOGSharedContentChangeLinkExpiryTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeLinkExpiry:sharedContentChangeLinkExpiry];
  } else if ([tag isEqualToString:@"shared_content_change_link_password"]) {
    DBTEAMLOGSharedContentChangeLinkPasswordType *sharedContentChangeLinkPassword =
        [DBTEAMLOGSharedContentChangeLinkPasswordTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeLinkPassword:sharedContentChangeLinkPassword];
  } else if ([tag isEqualToString:@"shared_content_change_member_role"]) {
    DBTEAMLOGSharedContentChangeMemberRoleType *sharedContentChangeMemberRole =
        [DBTEAMLOGSharedContentChangeMemberRoleTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeMemberRole:sharedContentChangeMemberRole];
  } else if ([tag isEqualToString:@"shared_content_change_viewer_info_policy"]) {
    DBTEAMLOGSharedContentChangeViewerInfoPolicyType *sharedContentChangeViewerInfoPolicy =
        [DBTEAMLOGSharedContentChangeViewerInfoPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeViewerInfoPolicy:sharedContentChangeViewerInfoPolicy];
  } else if ([tag isEqualToString:@"shared_content_claim_invitation"]) {
    DBTEAMLOGSharedContentClaimInvitationType *sharedContentClaimInvitation =
        [DBTEAMLOGSharedContentClaimInvitationTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentClaimInvitation:sharedContentClaimInvitation];
  } else if ([tag isEqualToString:@"shared_content_copy"]) {
    DBTEAMLOGSharedContentCopyType *sharedContentCopy =
        [DBTEAMLOGSharedContentCopyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentCopy:sharedContentCopy];
  } else if ([tag isEqualToString:@"shared_content_download"]) {
    DBTEAMLOGSharedContentDownloadType *sharedContentDownload =
        [DBTEAMLOGSharedContentDownloadTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentDownload:sharedContentDownload];
  } else if ([tag isEqualToString:@"shared_content_relinquish_membership"]) {
    DBTEAMLOGSharedContentRelinquishMembershipType *sharedContentRelinquishMembership =
        [DBTEAMLOGSharedContentRelinquishMembershipTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRelinquishMembership:sharedContentRelinquishMembership];
  } else if ([tag isEqualToString:@"shared_content_remove_invitees"]) {
    DBTEAMLOGSharedContentRemoveInviteesType *sharedContentRemoveInvitees =
        [DBTEAMLOGSharedContentRemoveInviteesTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRemoveInvitees:sharedContentRemoveInvitees];
  } else if ([tag isEqualToString:@"shared_content_remove_link_expiry"]) {
    DBTEAMLOGSharedContentRemoveLinkExpiryType *sharedContentRemoveLinkExpiry =
        [DBTEAMLOGSharedContentRemoveLinkExpiryTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRemoveLinkExpiry:sharedContentRemoveLinkExpiry];
  } else if ([tag isEqualToString:@"shared_content_remove_link_password"]) {
    DBTEAMLOGSharedContentRemoveLinkPasswordType *sharedContentRemoveLinkPassword =
        [DBTEAMLOGSharedContentRemoveLinkPasswordTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRemoveLinkPassword:sharedContentRemoveLinkPassword];
  } else if ([tag isEqualToString:@"shared_content_remove_member"]) {
    DBTEAMLOGSharedContentRemoveMemberType *sharedContentRemoveMember =
        [DBTEAMLOGSharedContentRemoveMemberTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRemoveMember:sharedContentRemoveMember];
  } else if ([tag isEqualToString:@"shared_content_request_access"]) {
    DBTEAMLOGSharedContentRequestAccessType *sharedContentRequestAccess =
        [DBTEAMLOGSharedContentRequestAccessTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRequestAccess:sharedContentRequestAccess];
  } else if ([tag isEqualToString:@"shared_content_unshare"]) {
    DBTEAMLOGSharedContentUnshareType *sharedContentUnshare =
        [DBTEAMLOGSharedContentUnshareTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentUnshare:sharedContentUnshare];
  } else if ([tag isEqualToString:@"shared_content_view"]) {
    DBTEAMLOGSharedContentViewType *sharedContentView =
        [DBTEAMLOGSharedContentViewTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedContentView:sharedContentView];
  } else if ([tag isEqualToString:@"shared_folder_change_link_policy"]) {
    DBTEAMLOGSharedFolderChangeLinkPolicyType *sharedFolderChangeLinkPolicy =
        [DBTEAMLOGSharedFolderChangeLinkPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderChangeLinkPolicy:sharedFolderChangeLinkPolicy];
  } else if ([tag isEqualToString:@"shared_folder_change_members_inheritance_policy"]) {
    DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType *sharedFolderChangeMembersInheritancePolicy =
        [DBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc]
        initWithSharedFolderChangeMembersInheritancePolicy:sharedFolderChangeMembersInheritancePolicy];
  } else if ([tag isEqualToString:@"shared_folder_change_members_management_policy"]) {
    DBTEAMLOGSharedFolderChangeMembersManagementPolicyType *sharedFolderChangeMembersManagementPolicy =
        [DBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc]
        initWithSharedFolderChangeMembersManagementPolicy:sharedFolderChangeMembersManagementPolicy];
  } else if ([tag isEqualToString:@"shared_folder_change_members_policy"]) {
    DBTEAMLOGSharedFolderChangeMembersPolicyType *sharedFolderChangeMembersPolicy =
        [DBTEAMLOGSharedFolderChangeMembersPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderChangeMembersPolicy:sharedFolderChangeMembersPolicy];
  } else if ([tag isEqualToString:@"shared_folder_create"]) {
    DBTEAMLOGSharedFolderCreateType *sharedFolderCreate =
        [DBTEAMLOGSharedFolderCreateTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderCreate:sharedFolderCreate];
  } else if ([tag isEqualToString:@"shared_folder_decline_invitation"]) {
    DBTEAMLOGSharedFolderDeclineInvitationType *sharedFolderDeclineInvitation =
        [DBTEAMLOGSharedFolderDeclineInvitationTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderDeclineInvitation:sharedFolderDeclineInvitation];
  } else if ([tag isEqualToString:@"shared_folder_mount"]) {
    DBTEAMLOGSharedFolderMountType *sharedFolderMount =
        [DBTEAMLOGSharedFolderMountTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderMount:sharedFolderMount];
  } else if ([tag isEqualToString:@"shared_folder_nest"]) {
    DBTEAMLOGSharedFolderNestType *sharedFolderNest = [DBTEAMLOGSharedFolderNestTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderNest:sharedFolderNest];
  } else if ([tag isEqualToString:@"shared_folder_transfer_ownership"]) {
    DBTEAMLOGSharedFolderTransferOwnershipType *sharedFolderTransferOwnership =
        [DBTEAMLOGSharedFolderTransferOwnershipTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderTransferOwnership:sharedFolderTransferOwnership];
  } else if ([tag isEqualToString:@"shared_folder_unmount"]) {
    DBTEAMLOGSharedFolderUnmountType *sharedFolderUnmount =
        [DBTEAMLOGSharedFolderUnmountTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderUnmount:sharedFolderUnmount];
  } else if ([tag isEqualToString:@"shared_link_add_expiry"]) {
    DBTEAMLOGSharedLinkAddExpiryType *sharedLinkAddExpiry =
        [DBTEAMLOGSharedLinkAddExpiryTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedLinkAddExpiry:sharedLinkAddExpiry];
  } else if ([tag isEqualToString:@"shared_link_change_expiry"]) {
    DBTEAMLOGSharedLinkChangeExpiryType *sharedLinkChangeExpiry =
        [DBTEAMLOGSharedLinkChangeExpiryTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedLinkChangeExpiry:sharedLinkChangeExpiry];
  } else if ([tag isEqualToString:@"shared_link_change_visibility"]) {
    DBTEAMLOGSharedLinkChangeVisibilityType *sharedLinkChangeVisibility =
        [DBTEAMLOGSharedLinkChangeVisibilityTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedLinkChangeVisibility:sharedLinkChangeVisibility];
  } else if ([tag isEqualToString:@"shared_link_copy"]) {
    DBTEAMLOGSharedLinkCopyType *sharedLinkCopy = [DBTEAMLOGSharedLinkCopyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedLinkCopy:sharedLinkCopy];
  } else if ([tag isEqualToString:@"shared_link_create"]) {
    DBTEAMLOGSharedLinkCreateType *sharedLinkCreate = [DBTEAMLOGSharedLinkCreateTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedLinkCreate:sharedLinkCreate];
  } else if ([tag isEqualToString:@"shared_link_disable"]) {
    DBTEAMLOGSharedLinkDisableType *sharedLinkDisable =
        [DBTEAMLOGSharedLinkDisableTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedLinkDisable:sharedLinkDisable];
  } else if ([tag isEqualToString:@"shared_link_download"]) {
    DBTEAMLOGSharedLinkDownloadType *sharedLinkDownload =
        [DBTEAMLOGSharedLinkDownloadTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedLinkDownload:sharedLinkDownload];
  } else if ([tag isEqualToString:@"shared_link_remove_expiry"]) {
    DBTEAMLOGSharedLinkRemoveExpiryType *sharedLinkRemoveExpiry =
        [DBTEAMLOGSharedLinkRemoveExpiryTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedLinkRemoveExpiry:sharedLinkRemoveExpiry];
  } else if ([tag isEqualToString:@"shared_link_share"]) {
    DBTEAMLOGSharedLinkShareType *sharedLinkShare = [DBTEAMLOGSharedLinkShareTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedLinkShare:sharedLinkShare];
  } else if ([tag isEqualToString:@"shared_link_view"]) {
    DBTEAMLOGSharedLinkViewType *sharedLinkView = [DBTEAMLOGSharedLinkViewTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedLinkView:sharedLinkView];
  } else if ([tag isEqualToString:@"shared_note_opened"]) {
    DBTEAMLOGSharedNoteOpenedType *sharedNoteOpened = [DBTEAMLOGSharedNoteOpenedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharedNoteOpened:sharedNoteOpened];
  } else if ([tag isEqualToString:@"shmodel_group_share"]) {
    DBTEAMLOGShmodelGroupShareType *shmodelGroupShare =
        [DBTEAMLOGShmodelGroupShareTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShmodelGroupShare:shmodelGroupShare];
  } else if ([tag isEqualToString:@"showcase_access_granted"]) {
    DBTEAMLOGShowcaseAccessGrantedType *showcaseAccessGranted =
        [DBTEAMLOGShowcaseAccessGrantedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseAccessGranted:showcaseAccessGranted];
  } else if ([tag isEqualToString:@"showcase_add_member"]) {
    DBTEAMLOGShowcaseAddMemberType *showcaseAddMember =
        [DBTEAMLOGShowcaseAddMemberTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseAddMember:showcaseAddMember];
  } else if ([tag isEqualToString:@"showcase_archived"]) {
    DBTEAMLOGShowcaseArchivedType *showcaseArchived = [DBTEAMLOGShowcaseArchivedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseArchived:showcaseArchived];
  } else if ([tag isEqualToString:@"showcase_created"]) {
    DBTEAMLOGShowcaseCreatedType *showcaseCreated = [DBTEAMLOGShowcaseCreatedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseCreated:showcaseCreated];
  } else if ([tag isEqualToString:@"showcase_delete_comment"]) {
    DBTEAMLOGShowcaseDeleteCommentType *showcaseDeleteComment =
        [DBTEAMLOGShowcaseDeleteCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseDeleteComment:showcaseDeleteComment];
  } else if ([tag isEqualToString:@"showcase_edited"]) {
    DBTEAMLOGShowcaseEditedType *showcaseEdited = [DBTEAMLOGShowcaseEditedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseEdited:showcaseEdited];
  } else if ([tag isEqualToString:@"showcase_edit_comment"]) {
    DBTEAMLOGShowcaseEditCommentType *showcaseEditComment =
        [DBTEAMLOGShowcaseEditCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseEditComment:showcaseEditComment];
  } else if ([tag isEqualToString:@"showcase_file_added"]) {
    DBTEAMLOGShowcaseFileAddedType *showcaseFileAdded =
        [DBTEAMLOGShowcaseFileAddedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseFileAdded:showcaseFileAdded];
  } else if ([tag isEqualToString:@"showcase_file_download"]) {
    DBTEAMLOGShowcaseFileDownloadType *showcaseFileDownload =
        [DBTEAMLOGShowcaseFileDownloadTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseFileDownload:showcaseFileDownload];
  } else if ([tag isEqualToString:@"showcase_file_removed"]) {
    DBTEAMLOGShowcaseFileRemovedType *showcaseFileRemoved =
        [DBTEAMLOGShowcaseFileRemovedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseFileRemoved:showcaseFileRemoved];
  } else if ([tag isEqualToString:@"showcase_file_view"]) {
    DBTEAMLOGShowcaseFileViewType *showcaseFileView = [DBTEAMLOGShowcaseFileViewTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseFileView:showcaseFileView];
  } else if ([tag isEqualToString:@"showcase_permanently_deleted"]) {
    DBTEAMLOGShowcasePermanentlyDeletedType *showcasePermanentlyDeleted =
        [DBTEAMLOGShowcasePermanentlyDeletedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcasePermanentlyDeleted:showcasePermanentlyDeleted];
  } else if ([tag isEqualToString:@"showcase_post_comment"]) {
    DBTEAMLOGShowcasePostCommentType *showcasePostComment =
        [DBTEAMLOGShowcasePostCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcasePostComment:showcasePostComment];
  } else if ([tag isEqualToString:@"showcase_remove_member"]) {
    DBTEAMLOGShowcaseRemoveMemberType *showcaseRemoveMember =
        [DBTEAMLOGShowcaseRemoveMemberTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseRemoveMember:showcaseRemoveMember];
  } else if ([tag isEqualToString:@"showcase_renamed"]) {
    DBTEAMLOGShowcaseRenamedType *showcaseRenamed = [DBTEAMLOGShowcaseRenamedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseRenamed:showcaseRenamed];
  } else if ([tag isEqualToString:@"showcase_request_access"]) {
    DBTEAMLOGShowcaseRequestAccessType *showcaseRequestAccess =
        [DBTEAMLOGShowcaseRequestAccessTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseRequestAccess:showcaseRequestAccess];
  } else if ([tag isEqualToString:@"showcase_resolve_comment"]) {
    DBTEAMLOGShowcaseResolveCommentType *showcaseResolveComment =
        [DBTEAMLOGShowcaseResolveCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseResolveComment:showcaseResolveComment];
  } else if ([tag isEqualToString:@"showcase_restored"]) {
    DBTEAMLOGShowcaseRestoredType *showcaseRestored = [DBTEAMLOGShowcaseRestoredTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseRestored:showcaseRestored];
  } else if ([tag isEqualToString:@"showcase_trashed"]) {
    DBTEAMLOGShowcaseTrashedType *showcaseTrashed = [DBTEAMLOGShowcaseTrashedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseTrashed:showcaseTrashed];
  } else if ([tag isEqualToString:@"showcase_trashed_deprecated"]) {
    DBTEAMLOGShowcaseTrashedDeprecatedType *showcaseTrashedDeprecated =
        [DBTEAMLOGShowcaseTrashedDeprecatedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseTrashedDeprecated:showcaseTrashedDeprecated];
  } else if ([tag isEqualToString:@"showcase_unresolve_comment"]) {
    DBTEAMLOGShowcaseUnresolveCommentType *showcaseUnresolveComment =
        [DBTEAMLOGShowcaseUnresolveCommentTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseUnresolveComment:showcaseUnresolveComment];
  } else if ([tag isEqualToString:@"showcase_untrashed"]) {
    DBTEAMLOGShowcaseUntrashedType *showcaseUntrashed =
        [DBTEAMLOGShowcaseUntrashedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseUntrashed:showcaseUntrashed];
  } else if ([tag isEqualToString:@"showcase_untrashed_deprecated"]) {
    DBTEAMLOGShowcaseUntrashedDeprecatedType *showcaseUntrashedDeprecated =
        [DBTEAMLOGShowcaseUntrashedDeprecatedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseUntrashedDeprecated:showcaseUntrashedDeprecated];
  } else if ([tag isEqualToString:@"showcase_view"]) {
    DBTEAMLOGShowcaseViewType *showcaseView = [DBTEAMLOGShowcaseViewTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseView:showcaseView];
  } else if ([tag isEqualToString:@"sso_add_cert"]) {
    DBTEAMLOGSsoAddCertType *ssoAddCert = [DBTEAMLOGSsoAddCertTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoAddCert:ssoAddCert];
  } else if ([tag isEqualToString:@"sso_add_login_url"]) {
    DBTEAMLOGSsoAddLoginUrlType *ssoAddLoginUrl = [DBTEAMLOGSsoAddLoginUrlTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoAddLoginUrl:ssoAddLoginUrl];
  } else if ([tag isEqualToString:@"sso_add_logout_url"]) {
    DBTEAMLOGSsoAddLogoutUrlType *ssoAddLogoutUrl = [DBTEAMLOGSsoAddLogoutUrlTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoAddLogoutUrl:ssoAddLogoutUrl];
  } else if ([tag isEqualToString:@"sso_change_cert"]) {
    DBTEAMLOGSsoChangeCertType *ssoChangeCert = [DBTEAMLOGSsoChangeCertTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoChangeCert:ssoChangeCert];
  } else if ([tag isEqualToString:@"sso_change_login_url"]) {
    DBTEAMLOGSsoChangeLoginUrlType *ssoChangeLoginUrl =
        [DBTEAMLOGSsoChangeLoginUrlTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoChangeLoginUrl:ssoChangeLoginUrl];
  } else if ([tag isEqualToString:@"sso_change_logout_url"]) {
    DBTEAMLOGSsoChangeLogoutUrlType *ssoChangeLogoutUrl =
        [DBTEAMLOGSsoChangeLogoutUrlTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoChangeLogoutUrl:ssoChangeLogoutUrl];
  } else if ([tag isEqualToString:@"sso_change_saml_identity_mode"]) {
    DBTEAMLOGSsoChangeSamlIdentityModeType *ssoChangeSamlIdentityMode =
        [DBTEAMLOGSsoChangeSamlIdentityModeTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoChangeSamlIdentityMode:ssoChangeSamlIdentityMode];
  } else if ([tag isEqualToString:@"sso_remove_cert"]) {
    DBTEAMLOGSsoRemoveCertType *ssoRemoveCert = [DBTEAMLOGSsoRemoveCertTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoRemoveCert:ssoRemoveCert];
  } else if ([tag isEqualToString:@"sso_remove_login_url"]) {
    DBTEAMLOGSsoRemoveLoginUrlType *ssoRemoveLoginUrl =
        [DBTEAMLOGSsoRemoveLoginUrlTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoRemoveLoginUrl:ssoRemoveLoginUrl];
  } else if ([tag isEqualToString:@"sso_remove_logout_url"]) {
    DBTEAMLOGSsoRemoveLogoutUrlType *ssoRemoveLogoutUrl =
        [DBTEAMLOGSsoRemoveLogoutUrlTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoRemoveLogoutUrl:ssoRemoveLogoutUrl];
  } else if ([tag isEqualToString:@"team_folder_change_status"]) {
    DBTEAMLOGTeamFolderChangeStatusType *teamFolderChangeStatus =
        [DBTEAMLOGTeamFolderChangeStatusTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamFolderChangeStatus:teamFolderChangeStatus];
  } else if ([tag isEqualToString:@"team_folder_create"]) {
    DBTEAMLOGTeamFolderCreateType *teamFolderCreate = [DBTEAMLOGTeamFolderCreateTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamFolderCreate:teamFolderCreate];
  } else if ([tag isEqualToString:@"team_folder_downgrade"]) {
    DBTEAMLOGTeamFolderDowngradeType *teamFolderDowngrade =
        [DBTEAMLOGTeamFolderDowngradeTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamFolderDowngrade:teamFolderDowngrade];
  } else if ([tag isEqualToString:@"team_folder_permanently_delete"]) {
    DBTEAMLOGTeamFolderPermanentlyDeleteType *teamFolderPermanentlyDelete =
        [DBTEAMLOGTeamFolderPermanentlyDeleteTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamFolderPermanentlyDelete:teamFolderPermanentlyDelete];
  } else if ([tag isEqualToString:@"team_folder_rename"]) {
    DBTEAMLOGTeamFolderRenameType *teamFolderRename = [DBTEAMLOGTeamFolderRenameTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamFolderRename:teamFolderRename];
  } else if ([tag isEqualToString:@"team_selective_sync_settings_changed"]) {
    DBTEAMLOGTeamSelectiveSyncSettingsChangedType *teamSelectiveSyncSettingsChanged =
        [DBTEAMLOGTeamSelectiveSyncSettingsChangedTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamSelectiveSyncSettingsChanged:teamSelectiveSyncSettingsChanged];
  } else if ([tag isEqualToString:@"account_capture_change_policy"]) {
    DBTEAMLOGAccountCaptureChangePolicyType *accountCaptureChangePolicy =
        [DBTEAMLOGAccountCaptureChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithAccountCaptureChangePolicy:accountCaptureChangePolicy];
  } else if ([tag isEqualToString:@"allow_download_disabled"]) {
    DBTEAMLOGAllowDownloadDisabledType *allowDownloadDisabled =
        [DBTEAMLOGAllowDownloadDisabledTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithAllowDownloadDisabled:allowDownloadDisabled];
  } else if ([tag isEqualToString:@"allow_download_enabled"]) {
    DBTEAMLOGAllowDownloadEnabledType *allowDownloadEnabled =
        [DBTEAMLOGAllowDownloadEnabledTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithAllowDownloadEnabled:allowDownloadEnabled];
  } else if ([tag isEqualToString:@"data_placement_restriction_change_policy"]) {
    DBTEAMLOGDataPlacementRestrictionChangePolicyType *dataPlacementRestrictionChangePolicy =
        [DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventType alloc] initWithDataPlacementRestrictionChangePolicy:dataPlacementRestrictionChangePolicy];
  } else if ([tag isEqualToString:@"data_placement_restriction_satisfy_policy"]) {
    DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *dataPlacementRestrictionSatisfyPolicy =
        [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc]
        initWithDataPlacementRestrictionSatisfyPolicy:dataPlacementRestrictionSatisfyPolicy];
  } else if ([tag isEqualToString:@"device_approvals_change_desktop_policy"]) {
    DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *deviceApprovalsChangeDesktopPolicy =
        [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceApprovalsChangeDesktopPolicy:deviceApprovalsChangeDesktopPolicy];
  } else if ([tag isEqualToString:@"device_approvals_change_mobile_policy"]) {
    DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *deviceApprovalsChangeMobilePolicy =
        [DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceApprovalsChangeMobilePolicy:deviceApprovalsChangeMobilePolicy];
  } else if ([tag isEqualToString:@"device_approvals_change_overage_action"]) {
    DBTEAMLOGDeviceApprovalsChangeOverageActionType *deviceApprovalsChangeOverageAction =
        [DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceApprovalsChangeOverageAction:deviceApprovalsChangeOverageAction];
  } else if ([tag isEqualToString:@"device_approvals_change_unlink_action"]) {
    DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *deviceApprovalsChangeUnlinkAction =
        [DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDeviceApprovalsChangeUnlinkAction:deviceApprovalsChangeUnlinkAction];
  } else if ([tag isEqualToString:@"directory_restrictions_add_members"]) {
    DBTEAMLOGDirectoryRestrictionsAddMembersType *directoryRestrictionsAddMembers =
        [DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDirectoryRestrictionsAddMembers:directoryRestrictionsAddMembers];
  } else if ([tag isEqualToString:@"directory_restrictions_remove_members"]) {
    DBTEAMLOGDirectoryRestrictionsRemoveMembersType *directoryRestrictionsRemoveMembers =
        [DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithDirectoryRestrictionsRemoveMembers:directoryRestrictionsRemoveMembers];
  } else if ([tag isEqualToString:@"emm_add_exception"]) {
    DBTEAMLOGEmmAddExceptionType *emmAddException = [DBTEAMLOGEmmAddExceptionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithEmmAddException:emmAddException];
  } else if ([tag isEqualToString:@"emm_change_policy"]) {
    DBTEAMLOGEmmChangePolicyType *emmChangePolicy = [DBTEAMLOGEmmChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithEmmChangePolicy:emmChangePolicy];
  } else if ([tag isEqualToString:@"emm_remove_exception"]) {
    DBTEAMLOGEmmRemoveExceptionType *emmRemoveException =
        [DBTEAMLOGEmmRemoveExceptionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithEmmRemoveException:emmRemoveException];
  } else if ([tag isEqualToString:@"extended_version_history_change_policy"]) {
    DBTEAMLOGExtendedVersionHistoryChangePolicyType *extendedVersionHistoryChangePolicy =
        [DBTEAMLOGExtendedVersionHistoryChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithExtendedVersionHistoryChangePolicy:extendedVersionHistoryChangePolicy];
  } else if ([tag isEqualToString:@"file_comments_change_policy"]) {
    DBTEAMLOGFileCommentsChangePolicyType *fileCommentsChangePolicy =
        [DBTEAMLOGFileCommentsChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileCommentsChangePolicy:fileCommentsChangePolicy];
  } else if ([tag isEqualToString:@"file_requests_change_policy"]) {
    DBTEAMLOGFileRequestsChangePolicyType *fileRequestsChangePolicy =
        [DBTEAMLOGFileRequestsChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileRequestsChangePolicy:fileRequestsChangePolicy];
  } else if ([tag isEqualToString:@"file_requests_emails_enabled"]) {
    DBTEAMLOGFileRequestsEmailsEnabledType *fileRequestsEmailsEnabled =
        [DBTEAMLOGFileRequestsEmailsEnabledTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithFileRequestsEmailsEnabled:fileRequestsEmailsEnabled];
  } else if ([tag isEqualToString:@"file_requests_emails_restricted_to_team_only"]) {
    DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType *fileRequestsEmailsRestrictedToTeamOnly =
        [DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc]
        initWithFileRequestsEmailsRestrictedToTeamOnly:fileRequestsEmailsRestrictedToTeamOnly];
  } else if ([tag isEqualToString:@"google_sso_change_policy"]) {
    DBTEAMLOGGoogleSsoChangePolicyType *googleSsoChangePolicy =
        [DBTEAMLOGGoogleSsoChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGoogleSsoChangePolicy:googleSsoChangePolicy];
  } else if ([tag isEqualToString:@"group_user_management_change_policy"]) {
    DBTEAMLOGGroupUserManagementChangePolicyType *groupUserManagementChangePolicy =
        [DBTEAMLOGGroupUserManagementChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithGroupUserManagementChangePolicy:groupUserManagementChangePolicy];
  } else if ([tag isEqualToString:@"member_requests_change_policy"]) {
    DBTEAMLOGMemberRequestsChangePolicyType *memberRequestsChangePolicy =
        [DBTEAMLOGMemberRequestsChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberRequestsChangePolicy:memberRequestsChangePolicy];
  } else if ([tag isEqualToString:@"member_space_limits_add_exception"]) {
    DBTEAMLOGMemberSpaceLimitsAddExceptionType *memberSpaceLimitsAddException =
        [DBTEAMLOGMemberSpaceLimitsAddExceptionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsAddException:memberSpaceLimitsAddException];
  } else if ([tag isEqualToString:@"member_space_limits_change_caps_type_policy"]) {
    DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType *memberSpaceLimitsChangeCapsTypePolicy =
        [DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc]
        initWithMemberSpaceLimitsChangeCapsTypePolicy:memberSpaceLimitsChangeCapsTypePolicy];
  } else if ([tag isEqualToString:@"member_space_limits_change_policy"]) {
    DBTEAMLOGMemberSpaceLimitsChangePolicyType *memberSpaceLimitsChangePolicy =
        [DBTEAMLOGMemberSpaceLimitsChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsChangePolicy:memberSpaceLimitsChangePolicy];
  } else if ([tag isEqualToString:@"member_space_limits_remove_exception"]) {
    DBTEAMLOGMemberSpaceLimitsRemoveExceptionType *memberSpaceLimitsRemoveException =
        [DBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsRemoveException:memberSpaceLimitsRemoveException];
  } else if ([tag isEqualToString:@"member_suggestions_change_policy"]) {
    DBTEAMLOGMemberSuggestionsChangePolicyType *memberSuggestionsChangePolicy =
        [DBTEAMLOGMemberSuggestionsChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMemberSuggestionsChangePolicy:memberSuggestionsChangePolicy];
  } else if ([tag isEqualToString:@"microsoft_office_addin_change_policy"]) {
    DBTEAMLOGMicrosoftOfficeAddinChangePolicyType *microsoftOfficeAddinChangePolicy =
        [DBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithMicrosoftOfficeAddinChangePolicy:microsoftOfficeAddinChangePolicy];
  } else if ([tag isEqualToString:@"network_control_change_policy"]) {
    DBTEAMLOGNetworkControlChangePolicyType *networkControlChangePolicy =
        [DBTEAMLOGNetworkControlChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithNetworkControlChangePolicy:networkControlChangePolicy];
  } else if ([tag isEqualToString:@"paper_change_deployment_policy"]) {
    DBTEAMLOGPaperChangeDeploymentPolicyType *paperChangeDeploymentPolicy =
        [DBTEAMLOGPaperChangeDeploymentPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperChangeDeploymentPolicy:paperChangeDeploymentPolicy];
  } else if ([tag isEqualToString:@"paper_change_member_link_policy"]) {
    DBTEAMLOGPaperChangeMemberLinkPolicyType *paperChangeMemberLinkPolicy =
        [DBTEAMLOGPaperChangeMemberLinkPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperChangeMemberLinkPolicy:paperChangeMemberLinkPolicy];
  } else if ([tag isEqualToString:@"paper_change_member_policy"]) {
    DBTEAMLOGPaperChangeMemberPolicyType *paperChangeMemberPolicy =
        [DBTEAMLOGPaperChangeMemberPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperChangeMemberPolicy:paperChangeMemberPolicy];
  } else if ([tag isEqualToString:@"paper_change_policy"]) {
    DBTEAMLOGPaperChangePolicyType *paperChangePolicy =
        [DBTEAMLOGPaperChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperChangePolicy:paperChangePolicy];
  } else if ([tag isEqualToString:@"paper_enabled_users_group_addition"]) {
    DBTEAMLOGPaperEnabledUsersGroupAdditionType *paperEnabledUsersGroupAddition =
        [DBTEAMLOGPaperEnabledUsersGroupAdditionTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperEnabledUsersGroupAddition:paperEnabledUsersGroupAddition];
  } else if ([tag isEqualToString:@"paper_enabled_users_group_removal"]) {
    DBTEAMLOGPaperEnabledUsersGroupRemovalType *paperEnabledUsersGroupRemoval =
        [DBTEAMLOGPaperEnabledUsersGroupRemovalTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPaperEnabledUsersGroupRemoval:paperEnabledUsersGroupRemoval];
  } else if ([tag isEqualToString:@"permanent_delete_change_policy"]) {
    DBTEAMLOGPermanentDeleteChangePolicyType *permanentDeleteChangePolicy =
        [DBTEAMLOGPermanentDeleteChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithPermanentDeleteChangePolicy:permanentDeleteChangePolicy];
  } else if ([tag isEqualToString:@"sharing_change_folder_join_policy"]) {
    DBTEAMLOGSharingChangeFolderJoinPolicyType *sharingChangeFolderJoinPolicy =
        [DBTEAMLOGSharingChangeFolderJoinPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharingChangeFolderJoinPolicy:sharingChangeFolderJoinPolicy];
  } else if ([tag isEqualToString:@"sharing_change_link_policy"]) {
    DBTEAMLOGSharingChangeLinkPolicyType *sharingChangeLinkPolicy =
        [DBTEAMLOGSharingChangeLinkPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharingChangeLinkPolicy:sharingChangeLinkPolicy];
  } else if ([tag isEqualToString:@"sharing_change_member_policy"]) {
    DBTEAMLOGSharingChangeMemberPolicyType *sharingChangeMemberPolicy =
        [DBTEAMLOGSharingChangeMemberPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSharingChangeMemberPolicy:sharingChangeMemberPolicy];
  } else if ([tag isEqualToString:@"showcase_change_download_policy"]) {
    DBTEAMLOGShowcaseChangeDownloadPolicyType *showcaseChangeDownloadPolicy =
        [DBTEAMLOGShowcaseChangeDownloadPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseChangeDownloadPolicy:showcaseChangeDownloadPolicy];
  } else if ([tag isEqualToString:@"showcase_change_enabled_policy"]) {
    DBTEAMLOGShowcaseChangeEnabledPolicyType *showcaseChangeEnabledPolicy =
        [DBTEAMLOGShowcaseChangeEnabledPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseChangeEnabledPolicy:showcaseChangeEnabledPolicy];
  } else if ([tag isEqualToString:@"showcase_change_external_sharing_policy"]) {
    DBTEAMLOGShowcaseChangeExternalSharingPolicyType *showcaseChangeExternalSharingPolicy =
        [DBTEAMLOGShowcaseChangeExternalSharingPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithShowcaseChangeExternalSharingPolicy:showcaseChangeExternalSharingPolicy];
  } else if ([tag isEqualToString:@"smart_sync_change_policy"]) {
    DBTEAMLOGSmartSyncChangePolicyType *smartSyncChangePolicy =
        [DBTEAMLOGSmartSyncChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSmartSyncChangePolicy:smartSyncChangePolicy];
  } else if ([tag isEqualToString:@"smart_sync_not_opt_out"]) {
    DBTEAMLOGSmartSyncNotOptOutType *smartSyncNotOptOut =
        [DBTEAMLOGSmartSyncNotOptOutTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSmartSyncNotOptOut:smartSyncNotOptOut];
  } else if ([tag isEqualToString:@"smart_sync_opt_out"]) {
    DBTEAMLOGSmartSyncOptOutType *smartSyncOptOut = [DBTEAMLOGSmartSyncOptOutTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSmartSyncOptOut:smartSyncOptOut];
  } else if ([tag isEqualToString:@"sso_change_policy"]) {
    DBTEAMLOGSsoChangePolicyType *ssoChangePolicy = [DBTEAMLOGSsoChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithSsoChangePolicy:ssoChangePolicy];
  } else if ([tag isEqualToString:@"tfa_change_policy"]) {
    DBTEAMLOGTfaChangePolicyType *tfaChangePolicy = [DBTEAMLOGTfaChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTfaChangePolicy:tfaChangePolicy];
  } else if ([tag isEqualToString:@"two_account_change_policy"]) {
    DBTEAMLOGTwoAccountChangePolicyType *twoAccountChangePolicy =
        [DBTEAMLOGTwoAccountChangePolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTwoAccountChangePolicy:twoAccountChangePolicy];
  } else if ([tag isEqualToString:@"web_sessions_change_fixed_length_policy"]) {
    DBTEAMLOGWebSessionsChangeFixedLengthPolicyType *webSessionsChangeFixedLengthPolicy =
        [DBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithWebSessionsChangeFixedLengthPolicy:webSessionsChangeFixedLengthPolicy];
  } else if ([tag isEqualToString:@"web_sessions_change_idle_length_policy"]) {
    DBTEAMLOGWebSessionsChangeIdleLengthPolicyType *webSessionsChangeIdleLengthPolicy =
        [DBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithWebSessionsChangeIdleLengthPolicy:webSessionsChangeIdleLengthPolicy];
  } else if ([tag isEqualToString:@"team_merge_from"]) {
    DBTEAMLOGTeamMergeFromType *teamMergeFrom = [DBTEAMLOGTeamMergeFromTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamMergeFrom:teamMergeFrom];
  } else if ([tag isEqualToString:@"team_merge_to"]) {
    DBTEAMLOGTeamMergeToType *teamMergeTo = [DBTEAMLOGTeamMergeToTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamMergeTo:teamMergeTo];
  } else if ([tag isEqualToString:@"team_profile_add_logo"]) {
    DBTEAMLOGTeamProfileAddLogoType *teamProfileAddLogo =
        [DBTEAMLOGTeamProfileAddLogoTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamProfileAddLogo:teamProfileAddLogo];
  } else if ([tag isEqualToString:@"team_profile_change_default_language"]) {
    DBTEAMLOGTeamProfileChangeDefaultLanguageType *teamProfileChangeDefaultLanguage =
        [DBTEAMLOGTeamProfileChangeDefaultLanguageTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamProfileChangeDefaultLanguage:teamProfileChangeDefaultLanguage];
  } else if ([tag isEqualToString:@"team_profile_change_logo"]) {
    DBTEAMLOGTeamProfileChangeLogoType *teamProfileChangeLogo =
        [DBTEAMLOGTeamProfileChangeLogoTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamProfileChangeLogo:teamProfileChangeLogo];
  } else if ([tag isEqualToString:@"team_profile_change_name"]) {
    DBTEAMLOGTeamProfileChangeNameType *teamProfileChangeName =
        [DBTEAMLOGTeamProfileChangeNameTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamProfileChangeName:teamProfileChangeName];
  } else if ([tag isEqualToString:@"team_profile_remove_logo"]) {
    DBTEAMLOGTeamProfileRemoveLogoType *teamProfileRemoveLogo =
        [DBTEAMLOGTeamProfileRemoveLogoTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTeamProfileRemoveLogo:teamProfileRemoveLogo];
  } else if ([tag isEqualToString:@"tfa_add_backup_phone"]) {
    DBTEAMLOGTfaAddBackupPhoneType *tfaAddBackupPhone =
        [DBTEAMLOGTfaAddBackupPhoneTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTfaAddBackupPhone:tfaAddBackupPhone];
  } else if ([tag isEqualToString:@"tfa_add_security_key"]) {
    DBTEAMLOGTfaAddSecurityKeyType *tfaAddSecurityKey =
        [DBTEAMLOGTfaAddSecurityKeyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTfaAddSecurityKey:tfaAddSecurityKey];
  } else if ([tag isEqualToString:@"tfa_change_backup_phone"]) {
    DBTEAMLOGTfaChangeBackupPhoneType *tfaChangeBackupPhone =
        [DBTEAMLOGTfaChangeBackupPhoneTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTfaChangeBackupPhone:tfaChangeBackupPhone];
  } else if ([tag isEqualToString:@"tfa_change_status"]) {
    DBTEAMLOGTfaChangeStatusType *tfaChangeStatus = [DBTEAMLOGTfaChangeStatusTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTfaChangeStatus:tfaChangeStatus];
  } else if ([tag isEqualToString:@"tfa_remove_backup_phone"]) {
    DBTEAMLOGTfaRemoveBackupPhoneType *tfaRemoveBackupPhone =
        [DBTEAMLOGTfaRemoveBackupPhoneTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTfaRemoveBackupPhone:tfaRemoveBackupPhone];
  } else if ([tag isEqualToString:@"tfa_remove_security_key"]) {
    DBTEAMLOGTfaRemoveSecurityKeyType *tfaRemoveSecurityKey =
        [DBTEAMLOGTfaRemoveSecurityKeyTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTfaRemoveSecurityKey:tfaRemoveSecurityKey];
  } else if ([tag isEqualToString:@"tfa_reset"]) {
    DBTEAMLOGTfaResetType *tfaReset = [DBTEAMLOGTfaResetTypeSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventType alloc] initWithTfaReset:tfaReset];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEventType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEventType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExportMembersReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGExportMembersReportDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGExportMembersReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGExportMembersReportDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGExportMembersReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExportMembersReportDetails:other];
}

- (BOOL)isEqualToExportMembersReportDetails:(DBTEAMLOGExportMembersReportDetails *)anExportMembersReportDetails {
  if (self == anExportMembersReportDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGExportMembersReportDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGExportMembersReportDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGExportMembersReportDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGExportMembersReportDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExportMembersReportType.h"

#pragma mark - API Object

@implementation DBTEAMLOGExportMembersReportType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGExportMembersReportTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGExportMembersReportTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGExportMembersReportTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExportMembersReportType:other];
}

- (BOOL)isEqualToExportMembersReportType:(DBTEAMLOGExportMembersReportType *)anExportMembersReportType {
  if (self == anExportMembersReportType) {
    return YES;
  }
  if (![self.description_ isEqual:anExportMembersReportType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGExportMembersReportTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGExportMembersReportType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGExportMembersReportType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGExportMembersReportType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExtendedVersionHistoryChangePolicyDetails.h"
#import "DBTEAMLOGExtendedVersionHistoryPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGExtendedVersionHistoryChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGExtendedVersionHistoryPolicy *)dNewValue
                    previousValue:(DBTEAMLOGExtendedVersionHistoryPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGExtendedVersionHistoryPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExtendedVersionHistoryChangePolicyDetails:other];
}

- (BOOL)isEqualToExtendedVersionHistoryChangePolicyDetails:
    (DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)anExtendedVersionHistoryChangePolicyDetails {
  if (self == anExtendedVersionHistoryChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anExtendedVersionHistoryChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:anExtendedVersionHistoryChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGExtendedVersionHistoryPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGExtendedVersionHistoryPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGExtendedVersionHistoryPolicy *dNewValue =
      [DBTEAMLOGExtendedVersionHistoryPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGExtendedVersionHistoryPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGExtendedVersionHistoryPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGExtendedVersionHistoryChangePolicyDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExtendedVersionHistoryChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGExtendedVersionHistoryChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGExtendedVersionHistoryChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGExtendedVersionHistoryChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGExtendedVersionHistoryChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExtendedVersionHistoryChangePolicyType:other];
}

- (BOOL)isEqualToExtendedVersionHistoryChangePolicyType:
    (DBTEAMLOGExtendedVersionHistoryChangePolicyType *)anExtendedVersionHistoryChangePolicyType {
  if (self == anExtendedVersionHistoryChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:anExtendedVersionHistoryChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGExtendedVersionHistoryChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGExtendedVersionHistoryChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGExtendedVersionHistoryChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGExtendedVersionHistoryChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExtendedVersionHistoryPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGExtendedVersionHistoryPolicy

#pragma mark - Constructors

- (instancetype)initWithExplicitlyLimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyLimited;
  }
  return self;
}

- (instancetype)initWithExplicitlyUnlimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyUnlimited;
  }
  return self;
}

- (instancetype)initWithImplicitlyLimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyLimited;
  }
  return self;
}

- (instancetype)initWithImplicitlyUnlimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyUnlimited;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExtendedVersionHistoryPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isExplicitlyLimited {
  return _tag == DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyLimited;
}

- (BOOL)isExplicitlyUnlimited {
  return _tag == DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyUnlimited;
}

- (BOOL)isImplicitlyLimited {
  return _tag == DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyLimited;
}

- (BOOL)isImplicitlyUnlimited {
  return _tag == DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyUnlimited;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGExtendedVersionHistoryPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyLimited:
    return @"DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyLimited";
  case DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyUnlimited:
    return @"DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyUnlimited";
  case DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyLimited:
    return @"DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyLimited";
  case DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyUnlimited:
    return @"DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyUnlimited";
  case DBTEAMLOGExtendedVersionHistoryPolicyOther:
    return @"DBTEAMLOGExtendedVersionHistoryPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGExtendedVersionHistoryPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGExtendedVersionHistoryPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGExtendedVersionHistoryPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyLimited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyUnlimited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyLimited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyUnlimited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExtendedVersionHistoryPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExtendedVersionHistoryPolicy:other];
}

- (BOOL)isEqualToExtendedVersionHistoryPolicy:(DBTEAMLOGExtendedVersionHistoryPolicy *)anExtendedVersionHistoryPolicy {
  if (self == anExtendedVersionHistoryPolicy) {
    return YES;
  }
  if (self.tag != anExtendedVersionHistoryPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyLimited:
    return [[self tagName] isEqual:[anExtendedVersionHistoryPolicy tagName]];
  case DBTEAMLOGExtendedVersionHistoryPolicyExplicitlyUnlimited:
    return [[self tagName] isEqual:[anExtendedVersionHistoryPolicy tagName]];
  case DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyLimited:
    return [[self tagName] isEqual:[anExtendedVersionHistoryPolicy tagName]];
  case DBTEAMLOGExtendedVersionHistoryPolicyImplicitlyUnlimited:
    return [[self tagName] isEqual:[anExtendedVersionHistoryPolicy tagName]];
  case DBTEAMLOGExtendedVersionHistoryPolicyOther:
    return [[self tagName] isEqual:[anExtendedVersionHistoryPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGExtendedVersionHistoryPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGExtendedVersionHistoryPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isExplicitlyLimited]) {
    jsonDict[@".tag"] = @"explicitly_limited";
  } else if ([valueObj isExplicitlyUnlimited]) {
    jsonDict[@".tag"] = @"explicitly_unlimited";
  } else if ([valueObj isImplicitlyLimited]) {
    jsonDict[@".tag"] = @"implicitly_limited";
  } else if ([valueObj isImplicitlyUnlimited]) {
    jsonDict[@".tag"] = @"implicitly_unlimited";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGExtendedVersionHistoryPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"explicitly_limited"]) {
    return [[DBTEAMLOGExtendedVersionHistoryPolicy alloc] initWithExplicitlyLimited];
  } else if ([tag isEqualToString:@"explicitly_unlimited"]) {
    return [[DBTEAMLOGExtendedVersionHistoryPolicy alloc] initWithExplicitlyUnlimited];
  } else if ([tag isEqualToString:@"implicitly_limited"]) {
    return [[DBTEAMLOGExtendedVersionHistoryPolicy alloc] initWithImplicitlyLimited];
  } else if ([tag isEqualToString:@"implicitly_unlimited"]) {
    return [[DBTEAMLOGExtendedVersionHistoryPolicy alloc] initWithImplicitlyUnlimited];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGExtendedVersionHistoryPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGExtendedVersionHistoryPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExternalUserLogInfo.h"
#import "DBTEAMLOGIdentifierType.h"

#pragma mark - API Object

@implementation DBTEAMLOGExternalUserLogInfo

#pragma mark - Constructors

- (instancetype)initWithUserIdentifier:(NSString *)userIdentifier
                        identifierType:(DBTEAMLOGIdentifierType *)identifierType {
  [DBStoneValidators nonnullValidator:nil](userIdentifier);
  [DBStoneValidators nonnullValidator:nil](identifierType);

  self = [super init];
  if (self) {
    _userIdentifier = userIdentifier;
    _identifierType = identifierType;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGExternalUserLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGExternalUserLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGExternalUserLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.userIdentifier hash];
  result = prime * result + [self.identifierType hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExternalUserLogInfo:other];
}

- (BOOL)isEqualToExternalUserLogInfo:(DBTEAMLOGExternalUserLogInfo *)anExternalUserLogInfo {
  if (self == anExternalUserLogInfo) {
    return YES;
  }
  if (![self.userIdentifier isEqual:anExternalUserLogInfo.userIdentifier]) {
    return NO;
  }
  if (![self.identifierType isEqual:anExternalUserLogInfo.identifierType]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGExternalUserLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGExternalUserLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user_identifier"] = valueObj.userIdentifier;
  jsonDict[@"identifier_type"] = [DBTEAMLOGIdentifierTypeSerializer serialize:valueObj.identifierType];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGExternalUserLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *userIdentifier = valueDict[@"user_identifier"];
  DBTEAMLOGIdentifierType *identifierType =
      [DBTEAMLOGIdentifierTypeSerializer deserialize:valueDict[@"identifier_type"]];

  return [[DBTEAMLOGExternalUserLogInfo alloc] initWithUserIdentifier:userIdentifier identifierType:identifierType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFailureDetailsLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFailureDetailsLogInfo

#pragma mark - Constructors

- (instancetype)initWithUserFriendlyMessage:(NSString *)userFriendlyMessage
                      technicalErrorMessage:(NSString *)technicalErrorMessage {

  self = [super init];
  if (self) {
    _userFriendlyMessage = userFriendlyMessage;
    _technicalErrorMessage = technicalErrorMessage;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithUserFriendlyMessage:nil technicalErrorMessage:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFailureDetailsLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFailureDetailsLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFailureDetailsLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.userFriendlyMessage != nil) {
    result = prime * result + [self.userFriendlyMessage hash];
  }
  if (self.technicalErrorMessage != nil) {
    result = prime * result + [self.technicalErrorMessage hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFailureDetailsLogInfo:other];
}

- (BOOL)isEqualToFailureDetailsLogInfo:(DBTEAMLOGFailureDetailsLogInfo *)aFailureDetailsLogInfo {
  if (self == aFailureDetailsLogInfo) {
    return YES;
  }
  if (self.userFriendlyMessage) {
    if (![self.userFriendlyMessage isEqual:aFailureDetailsLogInfo.userFriendlyMessage]) {
      return NO;
    }
  }
  if (self.technicalErrorMessage) {
    if (![self.technicalErrorMessage isEqual:aFailureDetailsLogInfo.technicalErrorMessage]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFailureDetailsLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFailureDetailsLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.userFriendlyMessage) {
    jsonDict[@"user_friendly_message"] = valueObj.userFriendlyMessage;
  }
  if (valueObj.technicalErrorMessage) {
    jsonDict[@"technical_error_message"] = valueObj.technicalErrorMessage;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFailureDetailsLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *userFriendlyMessage = valueDict[@"user_friendly_message"] ?: nil;
  NSString *technicalErrorMessage = valueDict[@"technical_error_message"] ?: nil;

  return [[DBTEAMLOGFailureDetailsLogInfo alloc] initWithUserFriendlyMessage:userFriendlyMessage
                                                       technicalErrorMessage:technicalErrorMessage];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileAddCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileAddCommentDetails

#pragma mark - Constructors

- (instancetype)initWithCommentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCommentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileAddCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileAddCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileAddCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileAddCommentDetails:other];
}

- (BOOL)isEqualToFileAddCommentDetails:(DBTEAMLOGFileAddCommentDetails *)aFileAddCommentDetails {
  if (self == aFileAddCommentDetails) {
    return YES;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aFileAddCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileAddCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileAddCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileAddCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGFileAddCommentDetails alloc] initWithCommentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileAddCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileAddCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileAddCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileAddCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileAddCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileAddCommentType:other];
}

- (BOOL)isEqualToFileAddCommentType:(DBTEAMLOGFileAddCommentType *)aFileAddCommentType {
  if (self == aFileAddCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileAddCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileAddCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileAddCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileAddCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileAddCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileAddDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileAddDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileAddDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileAddDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileAddDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileAddDetails:other];
}

- (BOOL)isEqualToFileAddDetails:(DBTEAMLOGFileAddDetails *)aFileAddDetails {
  if (self == aFileAddDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileAddDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileAddDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileAddDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileAddDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileAddType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileAddType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileAddTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileAddTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileAddTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileAddType:other];
}

- (BOOL)isEqualToFileAddType:(DBTEAMLOGFileAddType *)aFileAddType {
  if (self == aFileAddType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileAddType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileAddTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileAddType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileAddType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileAddType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileChangeCommentSubscriptionDetails.h"
#import "DBTEAMLOGFileCommentNotificationPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileChangeCommentSubscriptionDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGFileCommentNotificationPolicy *)dNewValue
                    previousValue:(DBTEAMLOGFileCommentNotificationPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGFileCommentNotificationPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileChangeCommentSubscriptionDetails:other];
}

- (BOOL)isEqualToFileChangeCommentSubscriptionDetails:
    (DBTEAMLOGFileChangeCommentSubscriptionDetails *)aFileChangeCommentSubscriptionDetails {
  if (self == aFileChangeCommentSubscriptionDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aFileChangeCommentSubscriptionDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aFileChangeCommentSubscriptionDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileChangeCommentSubscriptionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGFileCommentNotificationPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGFileCommentNotificationPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileChangeCommentSubscriptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGFileCommentNotificationPolicy *dNewValue =
      [DBTEAMLOGFileCommentNotificationPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGFileCommentNotificationPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGFileCommentNotificationPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return
      [[DBTEAMLOGFileChangeCommentSubscriptionDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileChangeCommentSubscriptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileChangeCommentSubscriptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileChangeCommentSubscriptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileChangeCommentSubscriptionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileChangeCommentSubscriptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileChangeCommentSubscriptionType:other];
}

- (BOOL)isEqualToFileChangeCommentSubscriptionType:
    (DBTEAMLOGFileChangeCommentSubscriptionType *)aFileChangeCommentSubscriptionType {
  if (self == aFileChangeCommentSubscriptionType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileChangeCommentSubscriptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileChangeCommentSubscriptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileChangeCommentSubscriptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileChangeCommentSubscriptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileChangeCommentSubscriptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileCommentNotificationPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileCommentNotificationPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGFileCommentNotificationPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGFileCommentNotificationPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGFileCommentNotificationPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGFileCommentNotificationPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGFileCommentNotificationPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGFileCommentNotificationPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGFileCommentNotificationPolicyDisabled:
    return @"DBTEAMLOGFileCommentNotificationPolicyDisabled";
  case DBTEAMLOGFileCommentNotificationPolicyEnabled:
    return @"DBTEAMLOGFileCommentNotificationPolicyEnabled";
  case DBTEAMLOGFileCommentNotificationPolicyOther:
    return @"DBTEAMLOGFileCommentNotificationPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileCommentNotificationPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileCommentNotificationPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileCommentNotificationPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGFileCommentNotificationPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGFileCommentNotificationPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGFileCommentNotificationPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileCommentNotificationPolicy:other];
}

- (BOOL)isEqualToFileCommentNotificationPolicy:
    (DBTEAMLOGFileCommentNotificationPolicy *)aFileCommentNotificationPolicy {
  if (self == aFileCommentNotificationPolicy) {
    return YES;
  }
  if (self.tag != aFileCommentNotificationPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGFileCommentNotificationPolicyDisabled:
    return [[self tagName] isEqual:[aFileCommentNotificationPolicy tagName]];
  case DBTEAMLOGFileCommentNotificationPolicyEnabled:
    return [[self tagName] isEqual:[aFileCommentNotificationPolicy tagName]];
  case DBTEAMLOGFileCommentNotificationPolicyOther:
    return [[self tagName] isEqual:[aFileCommentNotificationPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileCommentNotificationPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileCommentNotificationPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileCommentNotificationPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGFileCommentNotificationPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGFileCommentNotificationPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGFileCommentNotificationPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGFileCommentNotificationPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileCommentsChangePolicyDetails.h"
#import "DBTEAMLOGFileCommentsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileCommentsChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGFileCommentsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGFileCommentsPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGFileCommentsPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileCommentsChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileCommentsChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileCommentsChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileCommentsChangePolicyDetails:other];
}

- (BOOL)isEqualToFileCommentsChangePolicyDetails:
    (DBTEAMLOGFileCommentsChangePolicyDetails *)aFileCommentsChangePolicyDetails {
  if (self == aFileCommentsChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aFileCommentsChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aFileCommentsChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileCommentsChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileCommentsChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGFileCommentsPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGFileCommentsPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileCommentsChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGFileCommentsPolicy *dNewValue = [DBTEAMLOGFileCommentsPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGFileCommentsPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGFileCommentsPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGFileCommentsChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileCommentsChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileCommentsChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileCommentsChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileCommentsChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileCommentsChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileCommentsChangePolicyType:other];
}

- (BOOL)isEqualToFileCommentsChangePolicyType:(DBTEAMLOGFileCommentsChangePolicyType *)aFileCommentsChangePolicyType {
  if (self == aFileCommentsChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileCommentsChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileCommentsChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileCommentsChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileCommentsChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileCommentsChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileCommentsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileCommentsPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGFileCommentsPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGFileCommentsPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGFileCommentsPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGFileCommentsPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGFileCommentsPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGFileCommentsPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGFileCommentsPolicyDisabled:
    return @"DBTEAMLOGFileCommentsPolicyDisabled";
  case DBTEAMLOGFileCommentsPolicyEnabled:
    return @"DBTEAMLOGFileCommentsPolicyEnabled";
  case DBTEAMLOGFileCommentsPolicyOther:
    return @"DBTEAMLOGFileCommentsPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileCommentsPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileCommentsPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileCommentsPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGFileCommentsPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGFileCommentsPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGFileCommentsPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileCommentsPolicy:other];
}

- (BOOL)isEqualToFileCommentsPolicy:(DBTEAMLOGFileCommentsPolicy *)aFileCommentsPolicy {
  if (self == aFileCommentsPolicy) {
    return YES;
  }
  if (self.tag != aFileCommentsPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGFileCommentsPolicyDisabled:
    return [[self tagName] isEqual:[aFileCommentsPolicy tagName]];
  case DBTEAMLOGFileCommentsPolicyEnabled:
    return [[self tagName] isEqual:[aFileCommentsPolicy tagName]];
  case DBTEAMLOGFileCommentsPolicyOther:
    return [[self tagName] isEqual:[aFileCommentsPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileCommentsPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileCommentsPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileCommentsPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGFileCommentsPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGFileCommentsPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGFileCommentsPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGFileCommentsPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileCopyDetails.h"
#import "DBTEAMLOGRelocateAssetReferencesLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileCopyDetails

#pragma mark - Constructors

- (instancetype)initWithRelocateActionDetails:
    (NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo *> *)relocateActionDetails {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](relocateActionDetails);

  self = [super init];
  if (self) {
    _relocateActionDetails = relocateActionDetails;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileCopyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileCopyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileCopyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.relocateActionDetails hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileCopyDetails:other];
}

- (BOOL)isEqualToFileCopyDetails:(DBTEAMLOGFileCopyDetails *)aFileCopyDetails {
  if (self == aFileCopyDetails) {
    return YES;
  }
  if (![self.relocateActionDetails isEqual:aFileCopyDetails.relocateActionDetails]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileCopyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileCopyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"relocate_action_details"] =
      [DBArraySerializer serialize:valueObj.relocateActionDetails
                         withBlock:^id(id elem0) {
                           return [DBTEAMLOGRelocateAssetReferencesLogInfoSerializer serialize:elem0];
                         }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileCopyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo *> *relocateActionDetails =
      [DBArraySerializer deserialize:valueDict[@"relocate_action_details"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGRelocateAssetReferencesLogInfoSerializer deserialize:elem0];
                           }];

  return [[DBTEAMLOGFileCopyDetails alloc] initWithRelocateActionDetails:relocateActionDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileCopyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileCopyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileCopyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileCopyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileCopyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileCopyType:other];
}

- (BOOL)isEqualToFileCopyType:(DBTEAMLOGFileCopyType *)aFileCopyType {
  if (self == aFileCopyType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileCopyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileCopyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileCopyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileCopyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileCopyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileDeleteCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileDeleteCommentDetails

#pragma mark - Constructors

- (instancetype)initWithCommentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCommentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileDeleteCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileDeleteCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileDeleteCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileDeleteCommentDetails:other];
}

- (BOOL)isEqualToFileDeleteCommentDetails:(DBTEAMLOGFileDeleteCommentDetails *)aFileDeleteCommentDetails {
  if (self == aFileDeleteCommentDetails) {
    return YES;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aFileDeleteCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileDeleteCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileDeleteCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileDeleteCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGFileDeleteCommentDetails alloc] initWithCommentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileDeleteCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileDeleteCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileDeleteCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileDeleteCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileDeleteCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileDeleteCommentType:other];
}

- (BOOL)isEqualToFileDeleteCommentType:(DBTEAMLOGFileDeleteCommentType *)aFileDeleteCommentType {
  if (self == aFileDeleteCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileDeleteCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileDeleteCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileDeleteCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileDeleteCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileDeleteCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileDeleteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileDeleteDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileDeleteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileDeleteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileDeleteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileDeleteDetails:other];
}

- (BOOL)isEqualToFileDeleteDetails:(DBTEAMLOGFileDeleteDetails *)aFileDeleteDetails {
  if (self == aFileDeleteDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileDeleteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileDeleteDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileDeleteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileDeleteDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileDeleteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileDeleteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileDeleteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileDeleteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileDeleteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileDeleteType:other];
}

- (BOOL)isEqualToFileDeleteType:(DBTEAMLOGFileDeleteType *)aFileDeleteType {
  if (self == aFileDeleteType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileDeleteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileDeleteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileDeleteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileDeleteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileDeleteType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileDownloadDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileDownloadDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileDownloadDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileDownloadDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileDownloadDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileDownloadDetails:other];
}

- (BOOL)isEqualToFileDownloadDetails:(DBTEAMLOGFileDownloadDetails *)aFileDownloadDetails {
  if (self == aFileDownloadDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileDownloadDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileDownloadDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileDownloadDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileDownloadDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileDownloadType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileDownloadType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileDownloadTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileDownloadTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileDownloadTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileDownloadType:other];
}

- (BOOL)isEqualToFileDownloadType:(DBTEAMLOGFileDownloadType *)aFileDownloadType {
  if (self == aFileDownloadType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileDownloadType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileDownloadTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileDownloadType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileDownloadType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileDownloadType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileEditDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileEditDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileEditDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileEditDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileEditDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileEditDetails:other];
}

- (BOOL)isEqualToFileEditDetails:(DBTEAMLOGFileEditDetails *)aFileEditDetails {
  if (self == aFileEditDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileEditDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileEditDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileEditDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileEditDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileEditType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileEditType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileEditTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileEditTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileEditTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileEditType:other];
}

- (BOOL)isEqualToFileEditType:(DBTEAMLOGFileEditType *)aFileEditType {
  if (self == aFileEditType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileEditType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileEditTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileEditType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileEditType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileEditType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileGetCopyReferenceDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileGetCopyReferenceDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileGetCopyReferenceDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileGetCopyReferenceDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileGetCopyReferenceDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileGetCopyReferenceDetails:other];
}

- (BOOL)isEqualToFileGetCopyReferenceDetails:(DBTEAMLOGFileGetCopyReferenceDetails *)aFileGetCopyReferenceDetails {
  if (self == aFileGetCopyReferenceDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileGetCopyReferenceDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileGetCopyReferenceDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileGetCopyReferenceDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileGetCopyReferenceDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileGetCopyReferenceType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileGetCopyReferenceType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileGetCopyReferenceTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileGetCopyReferenceTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileGetCopyReferenceTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileGetCopyReferenceType:other];
}

- (BOOL)isEqualToFileGetCopyReferenceType:(DBTEAMLOGFileGetCopyReferenceType *)aFileGetCopyReferenceType {
  if (self == aFileGetCopyReferenceType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileGetCopyReferenceType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileGetCopyReferenceTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileGetCopyReferenceType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileGetCopyReferenceType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileGetCopyReferenceType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileLikeCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileLikeCommentDetails

#pragma mark - Constructors

- (instancetype)initWithCommentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCommentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileLikeCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileLikeCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileLikeCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileLikeCommentDetails:other];
}

- (BOOL)isEqualToFileLikeCommentDetails:(DBTEAMLOGFileLikeCommentDetails *)aFileLikeCommentDetails {
  if (self == aFileLikeCommentDetails) {
    return YES;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aFileLikeCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileLikeCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileLikeCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileLikeCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGFileLikeCommentDetails alloc] initWithCommentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileLikeCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileLikeCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileLikeCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileLikeCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileLikeCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileLikeCommentType:other];
}

- (BOOL)isEqualToFileLikeCommentType:(DBTEAMLOGFileLikeCommentType *)aFileLikeCommentType {
  if (self == aFileLikeCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileLikeCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileLikeCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileLikeCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileLikeCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileLikeCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileOrFolderLogInfo.h"
#import "DBTEAMLOGPathLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileOrFolderLogInfo

#pragma mark - Constructors

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path
                 displayName:(NSString *)displayName
                      fileId:(NSString *)fileId {
  [DBStoneValidators nonnullValidator:nil](path);

  self = [super init];
  if (self) {
    _path = path;
    _displayName = displayName;
    _fileId = fileId;
  }
  return self;
}

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path {
  return [self initWithPath:path displayName:nil fileId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileOrFolderLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileOrFolderLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileOrFolderLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.path hash];
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }
  if (self.fileId != nil) {
    result = prime * result + [self.fileId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileOrFolderLogInfo:other];
}

- (BOOL)isEqualToFileOrFolderLogInfo:(DBTEAMLOGFileOrFolderLogInfo *)aFileOrFolderLogInfo {
  if (self == aFileOrFolderLogInfo) {
    return YES;
  }
  if (![self.path isEqual:aFileOrFolderLogInfo.path]) {
    return NO;
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aFileOrFolderLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.fileId) {
    if (![self.fileId isEqual:aFileOrFolderLogInfo.fileId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileOrFolderLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileOrFolderLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"path"] = [DBTEAMLOGPathLogInfoSerializer serialize:valueObj.path];
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.fileId) {
    jsonDict[@"file_id"] = valueObj.fileId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileOrFolderLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGPathLogInfo *path = [DBTEAMLOGPathLogInfoSerializer deserialize:valueDict[@"path"]];
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *fileId = valueDict[@"file_id"] ?: nil;

  return [[DBTEAMLOGFileOrFolderLogInfo alloc] initWithPath:path displayName:displayName fileId:fileId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileLogInfo.h"
#import "DBTEAMLOGFileOrFolderLogInfo.h"
#import "DBTEAMLOGPathLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileLogInfo

#pragma mark - Constructors

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path
                 displayName:(NSString *)displayName
                      fileId:(NSString *)fileId {
  [DBStoneValidators nonnullValidator:nil](path);

  self = [super initWithPath:path displayName:displayName fileId:fileId];
  if (self) {
  }
  return self;
}

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path {
  return [self initWithPath:path displayName:nil fileId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.path hash];
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }
  if (self.fileId != nil) {
    result = prime * result + [self.fileId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileLogInfo:other];
}

- (BOOL)isEqualToFileLogInfo:(DBTEAMLOGFileLogInfo *)aFileLogInfo {
  if (self == aFileLogInfo) {
    return YES;
  }
  if (![self.path isEqual:aFileLogInfo.path]) {
    return NO;
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aFileLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.fileId) {
    if (![self.fileId isEqual:aFileLogInfo.fileId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"path"] = [DBTEAMLOGPathLogInfoSerializer serialize:valueObj.path];
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.fileId) {
    jsonDict[@"file_id"] = valueObj.fileId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGPathLogInfo *path = [DBTEAMLOGPathLogInfoSerializer deserialize:valueDict[@"path"]];
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *fileId = valueDict[@"file_id"] ?: nil;

  return [[DBTEAMLOGFileLogInfo alloc] initWithPath:path displayName:displayName fileId:fileId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileMoveDetails.h"
#import "DBTEAMLOGRelocateAssetReferencesLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileMoveDetails

#pragma mark - Constructors

- (instancetype)initWithRelocateActionDetails:
    (NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo *> *)relocateActionDetails {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](relocateActionDetails);

  self = [super init];
  if (self) {
    _relocateActionDetails = relocateActionDetails;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileMoveDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileMoveDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileMoveDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.relocateActionDetails hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileMoveDetails:other];
}

- (BOOL)isEqualToFileMoveDetails:(DBTEAMLOGFileMoveDetails *)aFileMoveDetails {
  if (self == aFileMoveDetails) {
    return YES;
  }
  if (![self.relocateActionDetails isEqual:aFileMoveDetails.relocateActionDetails]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileMoveDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileMoveDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"relocate_action_details"] =
      [DBArraySerializer serialize:valueObj.relocateActionDetails
                         withBlock:^id(id elem0) {
                           return [DBTEAMLOGRelocateAssetReferencesLogInfoSerializer serialize:elem0];
                         }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileMoveDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo *> *relocateActionDetails =
      [DBArraySerializer deserialize:valueDict[@"relocate_action_details"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGRelocateAssetReferencesLogInfoSerializer deserialize:elem0];
                           }];

  return [[DBTEAMLOGFileMoveDetails alloc] initWithRelocateActionDetails:relocateActionDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileMoveType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileMoveType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileMoveTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileMoveTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileMoveTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileMoveType:other];
}

- (BOOL)isEqualToFileMoveType:(DBTEAMLOGFileMoveType *)aFileMoveType {
  if (self == aFileMoveType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileMoveType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileMoveTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileMoveType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileMoveType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileMoveType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFilePermanentlyDeleteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFilePermanentlyDeleteDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFilePermanentlyDeleteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFilePermanentlyDeleteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFilePermanentlyDeleteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFilePermanentlyDeleteDetails:other];
}

- (BOOL)isEqualToFilePermanentlyDeleteDetails:(DBTEAMLOGFilePermanentlyDeleteDetails *)aFilePermanentlyDeleteDetails {
  if (self == aFilePermanentlyDeleteDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFilePermanentlyDeleteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFilePermanentlyDeleteDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFilePermanentlyDeleteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFilePermanentlyDeleteDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFilePermanentlyDeleteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFilePermanentlyDeleteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFilePermanentlyDeleteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFilePermanentlyDeleteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFilePermanentlyDeleteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFilePermanentlyDeleteType:other];
}

- (BOOL)isEqualToFilePermanentlyDeleteType:(DBTEAMLOGFilePermanentlyDeleteType *)aFilePermanentlyDeleteType {
  if (self == aFilePermanentlyDeleteType) {
    return YES;
  }
  if (![self.description_ isEqual:aFilePermanentlyDeleteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFilePermanentlyDeleteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFilePermanentlyDeleteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFilePermanentlyDeleteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFilePermanentlyDeleteType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFilePreviewDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFilePreviewDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFilePreviewDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFilePreviewDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFilePreviewDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFilePreviewDetails:other];
}

- (BOOL)isEqualToFilePreviewDetails:(DBTEAMLOGFilePreviewDetails *)aFilePreviewDetails {
  if (self == aFilePreviewDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFilePreviewDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFilePreviewDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFilePreviewDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFilePreviewDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFilePreviewType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFilePreviewType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFilePreviewTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFilePreviewTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFilePreviewTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFilePreviewType:other];
}

- (BOOL)isEqualToFilePreviewType:(DBTEAMLOGFilePreviewType *)aFilePreviewType {
  if (self == aFilePreviewType) {
    return YES;
  }
  if (![self.description_ isEqual:aFilePreviewType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFilePreviewTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFilePreviewType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFilePreviewType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFilePreviewType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRenameDetails.h"
#import "DBTEAMLOGRelocateAssetReferencesLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRenameDetails

#pragma mark - Constructors

- (instancetype)initWithRelocateActionDetails:
    (NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo *> *)relocateActionDetails {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](relocateActionDetails);

  self = [super init];
  if (self) {
    _relocateActionDetails = relocateActionDetails;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRenameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRenameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRenameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.relocateActionDetails hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRenameDetails:other];
}

- (BOOL)isEqualToFileRenameDetails:(DBTEAMLOGFileRenameDetails *)aFileRenameDetails {
  if (self == aFileRenameDetails) {
    return YES;
  }
  if (![self.relocateActionDetails isEqual:aFileRenameDetails.relocateActionDetails]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRenameDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRenameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"relocate_action_details"] =
      [DBArraySerializer serialize:valueObj.relocateActionDetails
                         withBlock:^id(id elem0) {
                           return [DBTEAMLOGRelocateAssetReferencesLogInfoSerializer serialize:elem0];
                         }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRenameDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo *> *relocateActionDetails =
      [DBArraySerializer deserialize:valueDict[@"relocate_action_details"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGRelocateAssetReferencesLogInfoSerializer deserialize:elem0];
                           }];

  return [[DBTEAMLOGFileRenameDetails alloc] initWithRelocateActionDetails:relocateActionDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRenameType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRenameType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRenameTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRenameTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRenameTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRenameType:other];
}

- (BOOL)isEqualToFileRenameType:(DBTEAMLOGFileRenameType *)aFileRenameType {
  if (self == aFileRenameType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRenameType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRenameTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRenameType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRenameType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRenameType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestChangeDetails.h"
#import "DBTEAMLOGFileRequestDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestChangeDetails

#pragma mark - Constructors

- (instancetype)initWithDNewDetails:(DBTEAMLOGFileRequestDetails *)dNewDetails
                      fileRequestId:(NSString *)fileRequestId
                    previousDetails:(DBTEAMLOGFileRequestDetails *)previousDetails {
  [DBStoneValidators nonnullValidator:nil](dNewDetails);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"[-_0-9a-zA-Z]+"]](fileRequestId);

  self = [super init];
  if (self) {
    _fileRequestId = fileRequestId;
    _previousDetails = previousDetails;
    _dNewDetails = dNewDetails;
  }
  return self;
}

- (instancetype)initWithDNewDetails:(DBTEAMLOGFileRequestDetails *)dNewDetails {
  return [self initWithDNewDetails:dNewDetails fileRequestId:nil previousDetails:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestChangeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestChangeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestChangeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewDetails hash];
  if (self.fileRequestId != nil) {
    result = prime * result + [self.fileRequestId hash];
  }
  if (self.previousDetails != nil) {
    result = prime * result + [self.previousDetails hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestChangeDetails:other];
}

- (BOOL)isEqualToFileRequestChangeDetails:(DBTEAMLOGFileRequestChangeDetails *)aFileRequestChangeDetails {
  if (self == aFileRequestChangeDetails) {
    return YES;
  }
  if (![self.dNewDetails isEqual:aFileRequestChangeDetails.dNewDetails]) {
    return NO;
  }
  if (self.fileRequestId) {
    if (![self.fileRequestId isEqual:aFileRequestChangeDetails.fileRequestId]) {
      return NO;
    }
  }
  if (self.previousDetails) {
    if (![self.previousDetails isEqual:aFileRequestChangeDetails.previousDetails]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestChangeDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestChangeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_details"] = [DBTEAMLOGFileRequestDetailsSerializer serialize:valueObj.dNewDetails];
  if (valueObj.fileRequestId) {
    jsonDict[@"file_request_id"] = valueObj.fileRequestId;
  }
  if (valueObj.previousDetails) {
    jsonDict[@"previous_details"] = [DBTEAMLOGFileRequestDetailsSerializer serialize:valueObj.previousDetails];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestChangeDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGFileRequestDetails *dNewDetails =
      [DBTEAMLOGFileRequestDetailsSerializer deserialize:valueDict[@"new_details"]];
  NSString *fileRequestId = valueDict[@"file_request_id"] ?: nil;
  DBTEAMLOGFileRequestDetails *previousDetails =
      valueDict[@"previous_details"]
          ? [DBTEAMLOGFileRequestDetailsSerializer deserialize:valueDict[@"previous_details"]]
          : nil;

  return [[DBTEAMLOGFileRequestChangeDetails alloc] initWithDNewDetails:dNewDetails
                                                          fileRequestId:fileRequestId
                                                        previousDetails:previousDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestChangeType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestChangeType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestChangeTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestChangeTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestChangeTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestChangeType:other];
}

- (BOOL)isEqualToFileRequestChangeType:(DBTEAMLOGFileRequestChangeType *)aFileRequestChangeType {
  if (self == aFileRequestChangeType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRequestChangeType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestChangeTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestChangeType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestChangeType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRequestChangeType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestCloseDetails.h"
#import "DBTEAMLOGFileRequestDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestCloseDetails

#pragma mark - Constructors

- (instancetype)initWithFileRequestId:(NSString *)fileRequestId
                      previousDetails:(DBTEAMLOGFileRequestDetails *)previousDetails {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"[-_0-9a-zA-Z]+"]](fileRequestId);

  self = [super init];
  if (self) {
    _fileRequestId = fileRequestId;
    _previousDetails = previousDetails;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithFileRequestId:nil previousDetails:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestCloseDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestCloseDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestCloseDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.fileRequestId != nil) {
    result = prime * result + [self.fileRequestId hash];
  }
  if (self.previousDetails != nil) {
    result = prime * result + [self.previousDetails hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestCloseDetails:other];
}

- (BOOL)isEqualToFileRequestCloseDetails:(DBTEAMLOGFileRequestCloseDetails *)aFileRequestCloseDetails {
  if (self == aFileRequestCloseDetails) {
    return YES;
  }
  if (self.fileRequestId) {
    if (![self.fileRequestId isEqual:aFileRequestCloseDetails.fileRequestId]) {
      return NO;
    }
  }
  if (self.previousDetails) {
    if (![self.previousDetails isEqual:aFileRequestCloseDetails.previousDetails]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestCloseDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestCloseDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.fileRequestId) {
    jsonDict[@"file_request_id"] = valueObj.fileRequestId;
  }
  if (valueObj.previousDetails) {
    jsonDict[@"previous_details"] = [DBTEAMLOGFileRequestDetailsSerializer serialize:valueObj.previousDetails];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestCloseDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *fileRequestId = valueDict[@"file_request_id"] ?: nil;
  DBTEAMLOGFileRequestDetails *previousDetails =
      valueDict[@"previous_details"]
          ? [DBTEAMLOGFileRequestDetailsSerializer deserialize:valueDict[@"previous_details"]]
          : nil;

  return [[DBTEAMLOGFileRequestCloseDetails alloc] initWithFileRequestId:fileRequestId previousDetails:previousDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestCloseType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestCloseType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestCloseTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestCloseTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestCloseTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestCloseType:other];
}

- (BOOL)isEqualToFileRequestCloseType:(DBTEAMLOGFileRequestCloseType *)aFileRequestCloseType {
  if (self == aFileRequestCloseType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRequestCloseType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestCloseTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestCloseType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestCloseType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRequestCloseType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestCreateDetails.h"
#import "DBTEAMLOGFileRequestDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestCreateDetails

#pragma mark - Constructors

- (instancetype)initWithFileRequestId:(NSString *)fileRequestId
                       requestDetails:(DBTEAMLOGFileRequestDetails *)requestDetails {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"[-_0-9a-zA-Z]+"]](fileRequestId);

  self = [super init];
  if (self) {
    _fileRequestId = fileRequestId;
    _requestDetails = requestDetails;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithFileRequestId:nil requestDetails:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.fileRequestId != nil) {
    result = prime * result + [self.fileRequestId hash];
  }
  if (self.requestDetails != nil) {
    result = prime * result + [self.requestDetails hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestCreateDetails:other];
}

- (BOOL)isEqualToFileRequestCreateDetails:(DBTEAMLOGFileRequestCreateDetails *)aFileRequestCreateDetails {
  if (self == aFileRequestCreateDetails) {
    return YES;
  }
  if (self.fileRequestId) {
    if (![self.fileRequestId isEqual:aFileRequestCreateDetails.fileRequestId]) {
      return NO;
    }
  }
  if (self.requestDetails) {
    if (![self.requestDetails isEqual:aFileRequestCreateDetails.requestDetails]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestCreateDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.fileRequestId) {
    jsonDict[@"file_request_id"] = valueObj.fileRequestId;
  }
  if (valueObj.requestDetails) {
    jsonDict[@"request_details"] = [DBTEAMLOGFileRequestDetailsSerializer serialize:valueObj.requestDetails];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestCreateDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *fileRequestId = valueDict[@"file_request_id"] ?: nil;
  DBTEAMLOGFileRequestDetails *requestDetails =
      valueDict[@"request_details"] ? [DBTEAMLOGFileRequestDetailsSerializer deserialize:valueDict[@"request_details"]]
                                    : nil;

  return [[DBTEAMLOGFileRequestCreateDetails alloc] initWithFileRequestId:fileRequestId requestDetails:requestDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestCreateType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestCreateType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestCreateTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestCreateTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestCreateTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestCreateType:other];
}

- (BOOL)isEqualToFileRequestCreateType:(DBTEAMLOGFileRequestCreateType *)aFileRequestCreateType {
  if (self == aFileRequestCreateType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRequestCreateType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestCreateTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestCreateType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestCreateType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRequestCreateType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestDeadline.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestDeadline

#pragma mark - Constructors

- (instancetype)initWithDeadline:(NSDate *)deadline allowLateUploads:(NSString *)allowLateUploads {

  self = [super init];
  if (self) {
    _deadline = deadline;
    _allowLateUploads = allowLateUploads;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDeadline:nil allowLateUploads:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestDeadlineSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestDeadlineSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestDeadlineSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.deadline != nil) {
    result = prime * result + [self.deadline hash];
  }
  if (self.allowLateUploads != nil) {
    result = prime * result + [self.allowLateUploads hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestDeadline:other];
}

- (BOOL)isEqualToFileRequestDeadline:(DBTEAMLOGFileRequestDeadline *)aFileRequestDeadline {
  if (self == aFileRequestDeadline) {
    return YES;
  }
  if (self.deadline) {
    if (![self.deadline isEqual:aFileRequestDeadline.deadline]) {
      return NO;
    }
  }
  if (self.allowLateUploads) {
    if (![self.allowLateUploads isEqual:aFileRequestDeadline.allowLateUploads]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestDeadlineSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestDeadline *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.deadline) {
    jsonDict[@"deadline"] = [DBNSDateSerializer serialize:valueObj.deadline dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.allowLateUploads) {
    jsonDict[@"allow_late_uploads"] = valueObj.allowLateUploads;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestDeadline *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSDate *deadline = valueDict[@"deadline"]
                         ? [DBNSDateSerializer deserialize:valueDict[@"deadline"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                         : nil;
  NSString *allowLateUploads = valueDict[@"allow_late_uploads"] ?: nil;

  return [[DBTEAMLOGFileRequestDeadline alloc] initWithDeadline:deadline allowLateUploads:allowLateUploads];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestDeadline.h"
#import "DBTEAMLOGFileRequestDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestDetails

#pragma mark - Constructors

- (instancetype)initWithAssetIndex:(NSNumber *)assetIndex deadline:(DBTEAMLOGFileRequestDeadline *)deadline {
  [DBStoneValidators nonnullValidator:nil](assetIndex);

  self = [super init];
  if (self) {
    _assetIndex = assetIndex;
    _deadline = deadline;
  }
  return self;
}

- (instancetype)initWithAssetIndex:(NSNumber *)assetIndex {
  return [self initWithAssetIndex:assetIndex deadline:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.assetIndex hash];
  if (self.deadline != nil) {
    result = prime * result + [self.deadline hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestDetails:other];
}

- (BOOL)isEqualToFileRequestDetails:(DBTEAMLOGFileRequestDetails *)aFileRequestDetails {
  if (self == aFileRequestDetails) {
    return YES;
  }
  if (![self.assetIndex isEqual:aFileRequestDetails.assetIndex]) {
    return NO;
  }
  if (self.deadline) {
    if (![self.deadline isEqual:aFileRequestDetails.deadline]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"asset_index"] = valueObj.assetIndex;
  if (valueObj.deadline) {
    jsonDict[@"deadline"] = [DBTEAMLOGFileRequestDeadlineSerializer serialize:valueObj.deadline];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *assetIndex = valueDict[@"asset_index"];
  DBTEAMLOGFileRequestDeadline *deadline =
      valueDict[@"deadline"] ? [DBTEAMLOGFileRequestDeadlineSerializer deserialize:valueDict[@"deadline"]] : nil;

  return [[DBTEAMLOGFileRequestDetails alloc] initWithAssetIndex:assetIndex deadline:deadline];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestDetails.h"
#import "DBTEAMLOGFileRequestReceiveFileDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestReceiveFileDetails

#pragma mark - Constructors

- (instancetype)initWithSubmittedFileNames:(NSArray<NSString *> *)submittedFileNames
                             fileRequestId:(NSString *)fileRequestId
                        fileRequestDetails:(DBTEAMLOGFileRequestDetails *)fileRequestDetails
                             submitterName:(NSString *)submitterName
                            submitterEmail:(NSString *)submitterEmail {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](submittedFileNames);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"[-_0-9a-zA-Z]+"]](fileRequestId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:nil]](submitterName);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](submitterEmail);

  self = [super init];
  if (self) {
    _fileRequestId = fileRequestId;
    _fileRequestDetails = fileRequestDetails;
    _submittedFileNames = submittedFileNames;
    _submitterName = submitterName;
    _submitterEmail = submitterEmail;
  }
  return self;
}

- (instancetype)initWithSubmittedFileNames:(NSArray<NSString *> *)submittedFileNames {
  return [self initWithSubmittedFileNames:submittedFileNames
                            fileRequestId:nil
                       fileRequestDetails:nil
                            submitterName:nil
                           submitterEmail:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestReceiveFileDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestReceiveFileDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestReceiveFileDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.submittedFileNames hash];
  if (self.fileRequestId != nil) {
    result = prime * result + [self.fileRequestId hash];
  }
  if (self.fileRequestDetails != nil) {
    result = prime * result + [self.fileRequestDetails hash];
  }
  if (self.submitterName != nil) {
    result = prime * result + [self.submitterName hash];
  }
  if (self.submitterEmail != nil) {
    result = prime * result + [self.submitterEmail hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestReceiveFileDetails:other];
}

- (BOOL)isEqualToFileRequestReceiveFileDetails:
    (DBTEAMLOGFileRequestReceiveFileDetails *)aFileRequestReceiveFileDetails {
  if (self == aFileRequestReceiveFileDetails) {
    return YES;
  }
  if (![self.submittedFileNames isEqual:aFileRequestReceiveFileDetails.submittedFileNames]) {
    return NO;
  }
  if (self.fileRequestId) {
    if (![self.fileRequestId isEqual:aFileRequestReceiveFileDetails.fileRequestId]) {
      return NO;
    }
  }
  if (self.fileRequestDetails) {
    if (![self.fileRequestDetails isEqual:aFileRequestReceiveFileDetails.fileRequestDetails]) {
      return NO;
    }
  }
  if (self.submitterName) {
    if (![self.submitterName isEqual:aFileRequestReceiveFileDetails.submitterName]) {
      return NO;
    }
  }
  if (self.submitterEmail) {
    if (![self.submitterEmail isEqual:aFileRequestReceiveFileDetails.submitterEmail]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestReceiveFileDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestReceiveFileDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"submitted_file_names"] = [DBArraySerializer serialize:valueObj.submittedFileNames
                                                         withBlock:^id(id elem0) {
                                                           return elem0;
                                                         }];
  if (valueObj.fileRequestId) {
    jsonDict[@"file_request_id"] = valueObj.fileRequestId;
  }
  if (valueObj.fileRequestDetails) {
    jsonDict[@"file_request_details"] = [DBTEAMLOGFileRequestDetailsSerializer serialize:valueObj.fileRequestDetails];
  }
  if (valueObj.submitterName) {
    jsonDict[@"submitter_name"] = valueObj.submitterName;
  }
  if (valueObj.submitterEmail) {
    jsonDict[@"submitter_email"] = valueObj.submitterEmail;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestReceiveFileDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<NSString *> *submittedFileNames = [DBArraySerializer deserialize:valueDict[@"submitted_file_names"]
                                                                 withBlock:^id(id elem0) {
                                                                   return elem0;
                                                                 }];
  NSString *fileRequestId = valueDict[@"file_request_id"] ?: nil;
  DBTEAMLOGFileRequestDetails *fileRequestDetails =
      valueDict[@"file_request_details"]
          ? [DBTEAMLOGFileRequestDetailsSerializer deserialize:valueDict[@"file_request_details"]]
          : nil;
  NSString *submitterName = valueDict[@"submitter_name"] ?: nil;
  NSString *submitterEmail = valueDict[@"submitter_email"] ?: nil;

  return [[DBTEAMLOGFileRequestReceiveFileDetails alloc] initWithSubmittedFileNames:submittedFileNames
                                                                      fileRequestId:fileRequestId
                                                                 fileRequestDetails:fileRequestDetails
                                                                      submitterName:submitterName
                                                                     submitterEmail:submitterEmail];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestReceiveFileType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestReceiveFileType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestReceiveFileTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestReceiveFileTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestReceiveFileTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestReceiveFileType:other];
}

- (BOOL)isEqualToFileRequestReceiveFileType:(DBTEAMLOGFileRequestReceiveFileType *)aFileRequestReceiveFileType {
  if (self == aFileRequestReceiveFileType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRequestReceiveFileType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestReceiveFileTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestReceiveFileType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestReceiveFileType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRequestReceiveFileType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestsChangePolicyDetails.h"
#import "DBTEAMLOGFileRequestsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestsChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGFileRequestsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGFileRequestsPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGFileRequestsPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestsChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestsChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestsChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestsChangePolicyDetails:other];
}

- (BOOL)isEqualToFileRequestsChangePolicyDetails:
    (DBTEAMLOGFileRequestsChangePolicyDetails *)aFileRequestsChangePolicyDetails {
  if (self == aFileRequestsChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aFileRequestsChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aFileRequestsChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestsChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestsChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGFileRequestsPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGFileRequestsPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestsChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGFileRequestsPolicy *dNewValue = [DBTEAMLOGFileRequestsPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGFileRequestsPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGFileRequestsPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGFileRequestsChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestsChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestsChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestsChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestsChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestsChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestsChangePolicyType:other];
}

- (BOOL)isEqualToFileRequestsChangePolicyType:(DBTEAMLOGFileRequestsChangePolicyType *)aFileRequestsChangePolicyType {
  if (self == aFileRequestsChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRequestsChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestsChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestsChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestsChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRequestsChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestsEmailsEnabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestsEmailsEnabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestsEmailsEnabledDetails:other];
}

- (BOOL)isEqualToFileRequestsEmailsEnabledDetails:
    (DBTEAMLOGFileRequestsEmailsEnabledDetails *)aFileRequestsEmailsEnabledDetails {
  if (self == aFileRequestsEmailsEnabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestsEmailsEnabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestsEmailsEnabledDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileRequestsEmailsEnabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestsEmailsEnabledType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestsEmailsEnabledType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestsEmailsEnabledTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestsEmailsEnabledTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestsEmailsEnabledTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestsEmailsEnabledType:other];
}

- (BOOL)isEqualToFileRequestsEmailsEnabledType:
    (DBTEAMLOGFileRequestsEmailsEnabledType *)aFileRequestsEmailsEnabledType {
  if (self == aFileRequestsEmailsEnabledType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRequestsEmailsEnabledType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestsEmailsEnabledTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestsEmailsEnabledType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestsEmailsEnabledType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRequestsEmailsEnabledType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestsEmailsRestrictedToTeamOnlyDetails:other];
}

- (BOOL)isEqualToFileRequestsEmailsRestrictedToTeamOnlyDetails:
    (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)aFileRequestsEmailsRestrictedToTeamOnlyDetails {
  if (self == aFileRequestsEmailsRestrictedToTeamOnlyDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestsEmailsRestrictedToTeamOnlyType:other];
}

- (BOOL)isEqualToFileRequestsEmailsRestrictedToTeamOnlyType:
    (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType *)aFileRequestsEmailsRestrictedToTeamOnlyType {
  if (self == aFileRequestsEmailsRestrictedToTeamOnlyType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRequestsEmailsRestrictedToTeamOnlyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestsPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGFileRequestsPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGFileRequestsPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGFileRequestsPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGFileRequestsPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGFileRequestsPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGFileRequestsPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGFileRequestsPolicyDisabled:
    return @"DBTEAMLOGFileRequestsPolicyDisabled";
  case DBTEAMLOGFileRequestsPolicyEnabled:
    return @"DBTEAMLOGFileRequestsPolicyEnabled";
  case DBTEAMLOGFileRequestsPolicyOther:
    return @"DBTEAMLOGFileRequestsPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestsPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRequestsPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestsPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGFileRequestsPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGFileRequestsPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGFileRequestsPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestsPolicy:other];
}

- (BOOL)isEqualToFileRequestsPolicy:(DBTEAMLOGFileRequestsPolicy *)aFileRequestsPolicy {
  if (self == aFileRequestsPolicy) {
    return YES;
  }
  if (self.tag != aFileRequestsPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGFileRequestsPolicyDisabled:
    return [[self tagName] isEqual:[aFileRequestsPolicy tagName]];
  case DBTEAMLOGFileRequestsPolicyEnabled:
    return [[self tagName] isEqual:[aFileRequestsPolicy tagName]];
  case DBTEAMLOGFileRequestsPolicyOther:
    return [[self tagName] isEqual:[aFileRequestsPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestsPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRequestsPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRequestsPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGFileRequestsPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGFileRequestsPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGFileRequestsPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGFileRequestsPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileResolveCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileResolveCommentDetails

#pragma mark - Constructors

- (instancetype)initWithCommentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCommentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileResolveCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileResolveCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileResolveCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileResolveCommentDetails:other];
}

- (BOOL)isEqualToFileResolveCommentDetails:(DBTEAMLOGFileResolveCommentDetails *)aFileResolveCommentDetails {
  if (self == aFileResolveCommentDetails) {
    return YES;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aFileResolveCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileResolveCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileResolveCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileResolveCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGFileResolveCommentDetails alloc] initWithCommentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileResolveCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileResolveCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileResolveCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileResolveCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileResolveCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileResolveCommentType:other];
}

- (BOOL)isEqualToFileResolveCommentType:(DBTEAMLOGFileResolveCommentType *)aFileResolveCommentType {
  if (self == aFileResolveCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileResolveCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileResolveCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileResolveCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileResolveCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileResolveCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRestoreDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRestoreDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRestoreDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRestoreDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRestoreDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRestoreDetails:other];
}

- (BOOL)isEqualToFileRestoreDetails:(DBTEAMLOGFileRestoreDetails *)aFileRestoreDetails {
  if (self == aFileRestoreDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRestoreDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRestoreDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRestoreDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileRestoreDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRestoreType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRestoreType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRestoreTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRestoreTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRestoreTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRestoreType:other];
}

- (BOOL)isEqualToFileRestoreType:(DBTEAMLOGFileRestoreType *)aFileRestoreType {
  if (self == aFileRestoreType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRestoreType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRestoreTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRestoreType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRestoreType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRestoreType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRevertDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRevertDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRevertDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRevertDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRevertDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRevertDetails:other];
}

- (BOOL)isEqualToFileRevertDetails:(DBTEAMLOGFileRevertDetails *)aFileRevertDetails {
  if (self == aFileRevertDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRevertDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRevertDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRevertDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileRevertDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRevertType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRevertType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRevertTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRevertTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRevertTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRevertType:other];
}

- (BOOL)isEqualToFileRevertType:(DBTEAMLOGFileRevertType *)aFileRevertType {
  if (self == aFileRevertType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRevertType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRevertTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRevertType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRevertType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRevertType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRollbackChangesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRollbackChangesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRollbackChangesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRollbackChangesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRollbackChangesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRollbackChangesDetails:other];
}

- (BOOL)isEqualToFileRollbackChangesDetails:(DBTEAMLOGFileRollbackChangesDetails *)aFileRollbackChangesDetails {
  if (self == aFileRollbackChangesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRollbackChangesDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRollbackChangesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRollbackChangesDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileRollbackChangesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRollbackChangesType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRollbackChangesType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileRollbackChangesTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileRollbackChangesTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRollbackChangesTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRollbackChangesType:other];
}

- (BOOL)isEqualToFileRollbackChangesType:(DBTEAMLOGFileRollbackChangesType *)aFileRollbackChangesType {
  if (self == aFileRollbackChangesType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileRollbackChangesType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRollbackChangesTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileRollbackChangesType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileRollbackChangesType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileRollbackChangesType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileSaveCopyReferenceDetails.h"
#import "DBTEAMLOGRelocateAssetReferencesLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileSaveCopyReferenceDetails

#pragma mark - Constructors

- (instancetype)initWithRelocateActionDetails:
    (NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo *> *)relocateActionDetails {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](relocateActionDetails);

  self = [super init];
  if (self) {
    _relocateActionDetails = relocateActionDetails;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileSaveCopyReferenceDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileSaveCopyReferenceDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileSaveCopyReferenceDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.relocateActionDetails hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileSaveCopyReferenceDetails:other];
}

- (BOOL)isEqualToFileSaveCopyReferenceDetails:(DBTEAMLOGFileSaveCopyReferenceDetails *)aFileSaveCopyReferenceDetails {
  if (self == aFileSaveCopyReferenceDetails) {
    return YES;
  }
  if (![self.relocateActionDetails isEqual:aFileSaveCopyReferenceDetails.relocateActionDetails]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileSaveCopyReferenceDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileSaveCopyReferenceDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"relocate_action_details"] =
      [DBArraySerializer serialize:valueObj.relocateActionDetails
                         withBlock:^id(id elem0) {
                           return [DBTEAMLOGRelocateAssetReferencesLogInfoSerializer serialize:elem0];
                         }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileSaveCopyReferenceDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo *> *relocateActionDetails =
      [DBArraySerializer deserialize:valueDict[@"relocate_action_details"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGRelocateAssetReferencesLogInfoSerializer deserialize:elem0];
                           }];

  return [[DBTEAMLOGFileSaveCopyReferenceDetails alloc] initWithRelocateActionDetails:relocateActionDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileSaveCopyReferenceType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileSaveCopyReferenceType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileSaveCopyReferenceTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileSaveCopyReferenceTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileSaveCopyReferenceTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileSaveCopyReferenceType:other];
}

- (BOOL)isEqualToFileSaveCopyReferenceType:(DBTEAMLOGFileSaveCopyReferenceType *)aFileSaveCopyReferenceType {
  if (self == aFileSaveCopyReferenceType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileSaveCopyReferenceType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileSaveCopyReferenceTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileSaveCopyReferenceType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileSaveCopyReferenceType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileSaveCopyReferenceType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileUnlikeCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileUnlikeCommentDetails

#pragma mark - Constructors

- (instancetype)initWithCommentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCommentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileUnlikeCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileUnlikeCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileUnlikeCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileUnlikeCommentDetails:other];
}

- (BOOL)isEqualToFileUnlikeCommentDetails:(DBTEAMLOGFileUnlikeCommentDetails *)aFileUnlikeCommentDetails {
  if (self == aFileUnlikeCommentDetails) {
    return YES;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aFileUnlikeCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileUnlikeCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileUnlikeCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileUnlikeCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGFileUnlikeCommentDetails alloc] initWithCommentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileUnlikeCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileUnlikeCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileUnlikeCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileUnlikeCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileUnlikeCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileUnlikeCommentType:other];
}

- (BOOL)isEqualToFileUnlikeCommentType:(DBTEAMLOGFileUnlikeCommentType *)aFileUnlikeCommentType {
  if (self == aFileUnlikeCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileUnlikeCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileUnlikeCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileUnlikeCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileUnlikeCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileUnlikeCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileUnresolveCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileUnresolveCommentDetails

#pragma mark - Constructors

- (instancetype)initWithCommentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCommentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileUnresolveCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileUnresolveCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileUnresolveCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileUnresolveCommentDetails:other];
}

- (BOOL)isEqualToFileUnresolveCommentDetails:(DBTEAMLOGFileUnresolveCommentDetails *)aFileUnresolveCommentDetails {
  if (self == aFileUnresolveCommentDetails) {
    return YES;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aFileUnresolveCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileUnresolveCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileUnresolveCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileUnresolveCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGFileUnresolveCommentDetails alloc] initWithCommentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileUnresolveCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileUnresolveCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFileUnresolveCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFileUnresolveCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileUnresolveCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileUnresolveCommentType:other];
}

- (BOOL)isEqualToFileUnresolveCommentType:(DBTEAMLOGFileUnresolveCommentType *)aFileUnresolveCommentType {
  if (self == aFileUnresolveCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aFileUnresolveCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileUnresolveCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFileUnresolveCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFileUnresolveCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGFileUnresolveCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileOrFolderLogInfo.h"
#import "DBTEAMLOGFolderLogInfo.h"
#import "DBTEAMLOGPathLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFolderLogInfo

#pragma mark - Constructors

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path
                 displayName:(NSString *)displayName
                      fileId:(NSString *)fileId {
  [DBStoneValidators nonnullValidator:nil](path);

  self = [super initWithPath:path displayName:displayName fileId:fileId];
  if (self) {
  }
  return self;
}

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path {
  return [self initWithPath:path displayName:nil fileId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGFolderLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGFolderLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFolderLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.path hash];
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }
  if (self.fileId != nil) {
    result = prime * result + [self.fileId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFolderLogInfo:other];
}

- (BOOL)isEqualToFolderLogInfo:(DBTEAMLOGFolderLogInfo *)aFolderLogInfo {
  if (self == aFolderLogInfo) {
    return YES;
  }
  if (![self.path isEqual:aFolderLogInfo.path]) {
    return NO;
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aFolderLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.fileId) {
    if (![self.fileId isEqual:aFolderLogInfo.fileId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFolderLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGFolderLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"path"] = [DBTEAMLOGPathLogInfoSerializer serialize:valueObj.path];
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.fileId) {
    jsonDict[@"file_id"] = valueObj.fileId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGFolderLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGPathLogInfo *path = [DBTEAMLOGPathLogInfoSerializer deserialize:valueDict[@"path"]];
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *fileId = valueDict[@"file_id"] ?: nil;

  return [[DBTEAMLOGFolderLogInfo alloc] initWithPath:path displayName:displayName fileId:fileId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGeoLocationLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGeoLocationLogInfo

#pragma mark - Constructors

- (instancetype)initWithIpAddress:(NSString *)ipAddress
                             city:(NSString *)city
                           region:(NSString *)region
                          country:(NSString *)country {
  [DBStoneValidators nonnullValidator:nil](ipAddress);

  self = [super init];
  if (self) {
    _city = city;
    _region = region;
    _country = country;
    _ipAddress = ipAddress;
  }
  return self;
}

- (instancetype)initWithIpAddress:(NSString *)ipAddress {
  return [self initWithIpAddress:ipAddress city:nil region:nil country:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGeoLocationLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGeoLocationLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGeoLocationLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.ipAddress hash];
  if (self.city != nil) {
    result = prime * result + [self.city hash];
  }
  if (self.region != nil) {
    result = prime * result + [self.region hash];
  }
  if (self.country != nil) {
    result = prime * result + [self.country hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGeoLocationLogInfo:other];
}

- (BOOL)isEqualToGeoLocationLogInfo:(DBTEAMLOGGeoLocationLogInfo *)aGeoLocationLogInfo {
  if (self == aGeoLocationLogInfo) {
    return YES;
  }
  if (![self.ipAddress isEqual:aGeoLocationLogInfo.ipAddress]) {
    return NO;
  }
  if (self.city) {
    if (![self.city isEqual:aGeoLocationLogInfo.city]) {
      return NO;
    }
  }
  if (self.region) {
    if (![self.region isEqual:aGeoLocationLogInfo.region]) {
      return NO;
    }
  }
  if (self.country) {
    if (![self.country isEqual:aGeoLocationLogInfo.country]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGeoLocationLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGeoLocationLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"ip_address"] = valueObj.ipAddress;
  if (valueObj.city) {
    jsonDict[@"city"] = valueObj.city;
  }
  if (valueObj.region) {
    jsonDict[@"region"] = valueObj.region;
  }
  if (valueObj.country) {
    jsonDict[@"country"] = valueObj.country;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGeoLocationLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *ipAddress = valueDict[@"ip_address"];
  NSString *city = valueDict[@"city"] ?: nil;
  NSString *region = valueDict[@"region"] ?: nil;
  NSString *country = valueDict[@"country"] ?: nil;

  return [[DBTEAMLOGGeoLocationLogInfo alloc] initWithIpAddress:ipAddress city:city region:region country:country];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONTimeRange.h"
#import "DBTEAMLOGEventCategory.h"
#import "DBTEAMLOGGetTeamEventsArg.h"

#pragma mark - API Object

@implementation DBTEAMLOGGetTeamEventsArg

#pragma mark - Constructors

- (instancetype)initWithLimit:(NSNumber *)limit
                    accountId:(NSString *)accountId
                         time:(DBTEAMCOMMONTimeRange *)time
                     category:(DBTEAMLOGEventCategory *)category {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);

  self = [super init];
  if (self) {
    _limit = limit ?: @(1000);
    _accountId = accountId;
    _time = time;
    _category = category;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithLimit:nil accountId:nil time:nil category:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGetTeamEventsArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGetTeamEventsArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGetTeamEventsArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.limit hash];
  if (self.accountId != nil) {
    result = prime * result + [self.accountId hash];
  }
  if (self.time != nil) {
    result = prime * result + [self.time hash];
  }
  if (self.category != nil) {
    result = prime * result + [self.category hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetTeamEventsArg:other];
}

- (BOOL)isEqualToGetTeamEventsArg:(DBTEAMLOGGetTeamEventsArg *)aGetTeamEventsArg {
  if (self == aGetTeamEventsArg) {
    return YES;
  }
  if (![self.limit isEqual:aGetTeamEventsArg.limit]) {
    return NO;
  }
  if (self.accountId) {
    if (![self.accountId isEqual:aGetTeamEventsArg.accountId]) {
      return NO;
    }
  }
  if (self.time) {
    if (![self.time isEqual:aGetTeamEventsArg.time]) {
      return NO;
    }
  }
  if (self.category) {
    if (![self.category isEqual:aGetTeamEventsArg.category]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGetTeamEventsArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGetTeamEventsArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"limit"] = valueObj.limit;
  if (valueObj.accountId) {
    jsonDict[@"account_id"] = valueObj.accountId;
  }
  if (valueObj.time) {
    jsonDict[@"time"] = [DBTEAMCOMMONTimeRangeSerializer serialize:valueObj.time];
  }
  if (valueObj.category) {
    jsonDict[@"category"] = [DBTEAMLOGEventCategorySerializer serialize:valueObj.category];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGetTeamEventsArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);
  NSString *accountId = valueDict[@"account_id"] ?: nil;
  DBTEAMCOMMONTimeRange *time =
      valueDict[@"time"] ? [DBTEAMCOMMONTimeRangeSerializer deserialize:valueDict[@"time"]] : nil;
  DBTEAMLOGEventCategory *category =
      valueDict[@"category"] ? [DBTEAMLOGEventCategorySerializer deserialize:valueDict[@"category"]] : nil;

  return [[DBTEAMLOGGetTeamEventsArg alloc] initWithLimit:limit accountId:accountId time:time category:category];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGetTeamEventsContinueArg.h"

#pragma mark - API Object

@implementation DBTEAMLOGGetTeamEventsContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {
  [DBStoneValidators nonnullValidator:nil](cursor);

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGetTeamEventsContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGetTeamEventsContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGetTeamEventsContinueArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.cursor hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetTeamEventsContinueArg:other];
}

- (BOOL)isEqualToGetTeamEventsContinueArg:(DBTEAMLOGGetTeamEventsContinueArg *)aGetTeamEventsContinueArg {
  if (self == aGetTeamEventsContinueArg) {
    return YES;
  }
  if (![self.cursor isEqual:aGetTeamEventsContinueArg.cursor]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGetTeamEventsContinueArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGetTeamEventsContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGetTeamEventsContinueArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBTEAMLOGGetTeamEventsContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGetTeamEventsContinueError.h"

#pragma mark - API Object

@implementation DBTEAMLOGGetTeamEventsContinueError

#pragma mark - Constructors

- (instancetype)initWithBadCursor {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGetTeamEventsContinueErrorBadCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGetTeamEventsContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isBadCursor {
  return _tag == DBTEAMLOGGetTeamEventsContinueErrorBadCursor;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGGetTeamEventsContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGGetTeamEventsContinueErrorBadCursor:
    return @"DBTEAMLOGGetTeamEventsContinueErrorBadCursor";
  case DBTEAMLOGGetTeamEventsContinueErrorOther:
    return @"DBTEAMLOGGetTeamEventsContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGetTeamEventsContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGetTeamEventsContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGetTeamEventsContinueErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGGetTeamEventsContinueErrorBadCursor:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGetTeamEventsContinueErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetTeamEventsContinueError:other];
}

- (BOOL)isEqualToGetTeamEventsContinueError:(DBTEAMLOGGetTeamEventsContinueError *)aGetTeamEventsContinueError {
  if (self == aGetTeamEventsContinueError) {
    return YES;
  }
  if (self.tag != aGetTeamEventsContinueError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGGetTeamEventsContinueErrorBadCursor:
    return [[self tagName] isEqual:[aGetTeamEventsContinueError tagName]];
  case DBTEAMLOGGetTeamEventsContinueErrorOther:
    return [[self tagName] isEqual:[aGetTeamEventsContinueError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGetTeamEventsContinueErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGetTeamEventsContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isBadCursor]) {
    jsonDict[@".tag"] = @"bad_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGetTeamEventsContinueError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"bad_cursor"]) {
    return [[DBTEAMLOGGetTeamEventsContinueError alloc] initWithBadCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGGetTeamEventsContinueError alloc] initWithOther];
  } else {
    return [[DBTEAMLOGGetTeamEventsContinueError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGetTeamEventsError.h"

#pragma mark - API Object

@implementation DBTEAMLOGGetTeamEventsError

#pragma mark - Constructors

- (instancetype)initWithAccountIdNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGetTeamEventsErrorAccountIdNotFound;
  }
  return self;
}

- (instancetype)initWithInvalidTimeRange {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGetTeamEventsErrorInvalidTimeRange;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGetTeamEventsErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAccountIdNotFound {
  return _tag == DBTEAMLOGGetTeamEventsErrorAccountIdNotFound;
}

- (BOOL)isInvalidTimeRange {
  return _tag == DBTEAMLOGGetTeamEventsErrorInvalidTimeRange;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGGetTeamEventsErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGGetTeamEventsErrorAccountIdNotFound:
    return @"DBTEAMLOGGetTeamEventsErrorAccountIdNotFound";
  case DBTEAMLOGGetTeamEventsErrorInvalidTimeRange:
    return @"DBTEAMLOGGetTeamEventsErrorInvalidTimeRange";
  case DBTEAMLOGGetTeamEventsErrorOther:
    return @"DBTEAMLOGGetTeamEventsErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGetTeamEventsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGetTeamEventsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGetTeamEventsErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGGetTeamEventsErrorAccountIdNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGetTeamEventsErrorInvalidTimeRange:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGetTeamEventsErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetTeamEventsError:other];
}

- (BOOL)isEqualToGetTeamEventsError:(DBTEAMLOGGetTeamEventsError *)aGetTeamEventsError {
  if (self == aGetTeamEventsError) {
    return YES;
  }
  if (self.tag != aGetTeamEventsError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGGetTeamEventsErrorAccountIdNotFound:
    return [[self tagName] isEqual:[aGetTeamEventsError tagName]];
  case DBTEAMLOGGetTeamEventsErrorInvalidTimeRange:
    return [[self tagName] isEqual:[aGetTeamEventsError tagName]];
  case DBTEAMLOGGetTeamEventsErrorOther:
    return [[self tagName] isEqual:[aGetTeamEventsError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGetTeamEventsErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGetTeamEventsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccountIdNotFound]) {
    jsonDict[@".tag"] = @"account_id_not_found";
  } else if ([valueObj isInvalidTimeRange]) {
    jsonDict[@".tag"] = @"invalid_time_range";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGetTeamEventsError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"account_id_not_found"]) {
    return [[DBTEAMLOGGetTeamEventsError alloc] initWithAccountIdNotFound];
  } else if ([tag isEqualToString:@"invalid_time_range"]) {
    return [[DBTEAMLOGGetTeamEventsError alloc] initWithInvalidTimeRange];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGGetTeamEventsError alloc] initWithOther];
  } else {
    return [[DBTEAMLOGGetTeamEventsError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGetTeamEventsResult.h"
#import "DBTEAMLOGTeamEvent.h"

#pragma mark - API Object

@implementation DBTEAMLOGGetTeamEventsResult

#pragma mark - Constructors

- (instancetype)initWithEvents:(NSArray<DBTEAMLOGTeamEvent *> *)events
                        cursor:(NSString *)cursor
                       hasMore:(NSNumber *)hasMore {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](events);
  [DBStoneValidators nonnullValidator:nil](cursor);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _events = events;
    _cursor = cursor;
    _hasMore = hasMore;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGetTeamEventsResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGetTeamEventsResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGetTeamEventsResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.events hash];
  result = prime * result + [self.cursor hash];
  result = prime * result + [self.hasMore hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetTeamEventsResult:other];
}

- (BOOL)isEqualToGetTeamEventsResult:(DBTEAMLOGGetTeamEventsResult *)aGetTeamEventsResult {
  if (self == aGetTeamEventsResult) {
    return YES;
  }
  if (![self.events isEqual:aGetTeamEventsResult.events]) {
    return NO;
  }
  if (![self.cursor isEqual:aGetTeamEventsResult.cursor]) {
    return NO;
  }
  if (![self.hasMore isEqual:aGetTeamEventsResult.hasMore]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGetTeamEventsResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGetTeamEventsResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"events"] = [DBArraySerializer serialize:valueObj.events
                                           withBlock:^id(id elem0) {
                                             return [DBTEAMLOGTeamEventSerializer serialize:elem0];
                                           }];
  jsonDict[@"cursor"] = valueObj.cursor;
  jsonDict[@"has_more"] = valueObj.hasMore;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGetTeamEventsResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMLOGTeamEvent *> *events =
      [DBArraySerializer deserialize:valueDict[@"events"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGTeamEventSerializer deserialize:elem0];
                           }];
  NSString *cursor = valueDict[@"cursor"];
  NSNumber *hasMore = valueDict[@"has_more"];

  return [[DBTEAMLOGGetTeamEventsResult alloc] initWithEvents:events cursor:cursor hasMore:hasMore];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGoogleSsoChangePolicyDetails.h"
#import "DBTEAMLOGGoogleSsoPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGGoogleSsoChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGGoogleSsoPolicy *)dNewValue
                    previousValue:(DBTEAMLOGGoogleSsoPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGGoogleSsoPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGoogleSsoChangePolicyDetails:other];
}

- (BOOL)isEqualToGoogleSsoChangePolicyDetails:(DBTEAMLOGGoogleSsoChangePolicyDetails *)aGoogleSsoChangePolicyDetails {
  if (self == aGoogleSsoChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aGoogleSsoChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aGoogleSsoChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGoogleSsoChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGGoogleSsoPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGGoogleSsoPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGoogleSsoChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGGoogleSsoPolicy *dNewValue = [DBTEAMLOGGoogleSsoPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGGoogleSsoPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGGoogleSsoPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGGoogleSsoChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGoogleSsoChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGoogleSsoChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGoogleSsoChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGoogleSsoChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGoogleSsoChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGoogleSsoChangePolicyType:other];
}

- (BOOL)isEqualToGoogleSsoChangePolicyType:(DBTEAMLOGGoogleSsoChangePolicyType *)aGoogleSsoChangePolicyType {
  if (self == aGoogleSsoChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aGoogleSsoChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGoogleSsoChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGoogleSsoChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGoogleSsoChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGoogleSsoChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGoogleSsoPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGGoogleSsoPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGoogleSsoPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGoogleSsoPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGoogleSsoPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGGoogleSsoPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGGoogleSsoPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGGoogleSsoPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGGoogleSsoPolicyDisabled:
    return @"DBTEAMLOGGoogleSsoPolicyDisabled";
  case DBTEAMLOGGoogleSsoPolicyEnabled:
    return @"DBTEAMLOGGoogleSsoPolicyEnabled";
  case DBTEAMLOGGoogleSsoPolicyOther:
    return @"DBTEAMLOGGoogleSsoPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGoogleSsoPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGoogleSsoPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGoogleSsoPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGGoogleSsoPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGoogleSsoPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGoogleSsoPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGoogleSsoPolicy:other];
}

- (BOOL)isEqualToGoogleSsoPolicy:(DBTEAMLOGGoogleSsoPolicy *)aGoogleSsoPolicy {
  if (self == aGoogleSsoPolicy) {
    return YES;
  }
  if (self.tag != aGoogleSsoPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGGoogleSsoPolicyDisabled:
    return [[self tagName] isEqual:[aGoogleSsoPolicy tagName]];
  case DBTEAMLOGGoogleSsoPolicyEnabled:
    return [[self tagName] isEqual:[aGoogleSsoPolicy tagName]];
  case DBTEAMLOGGoogleSsoPolicyOther:
    return [[self tagName] isEqual:[aGoogleSsoPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGoogleSsoPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGoogleSsoPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGoogleSsoPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGGoogleSsoPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGGoogleSsoPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGGoogleSsoPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGGoogleSsoPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupAddExternalIdDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupAddExternalIdDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSString *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupAddExternalIdDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupAddExternalIdDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupAddExternalIdDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupAddExternalIdDetails:other];
}

- (BOOL)isEqualToGroupAddExternalIdDetails:(DBTEAMLOGGroupAddExternalIdDetails *)aGroupAddExternalIdDetails {
  if (self == aGroupAddExternalIdDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aGroupAddExternalIdDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupAddExternalIdDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupAddExternalIdDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = valueObj.dNewValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupAddExternalIdDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *dNewValue = valueDict[@"new_value"];

  return [[DBTEAMLOGGroupAddExternalIdDetails alloc] initWithDNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupAddExternalIdType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupAddExternalIdType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupAddExternalIdTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupAddExternalIdTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupAddExternalIdTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupAddExternalIdType:other];
}

- (BOOL)isEqualToGroupAddExternalIdType:(DBTEAMLOGGroupAddExternalIdType *)aGroupAddExternalIdType {
  if (self == aGroupAddExternalIdType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupAddExternalIdType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupAddExternalIdTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupAddExternalIdType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupAddExternalIdType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupAddExternalIdType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupAddMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupAddMemberDetails

#pragma mark - Constructors

- (instancetype)initWithIsGroupOwner:(NSNumber *)isGroupOwner {
  [DBStoneValidators nonnullValidator:nil](isGroupOwner);

  self = [super init];
  if (self) {
    _isGroupOwner = isGroupOwner;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupAddMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupAddMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupAddMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.isGroupOwner hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupAddMemberDetails:other];
}

- (BOOL)isEqualToGroupAddMemberDetails:(DBTEAMLOGGroupAddMemberDetails *)aGroupAddMemberDetails {
  if (self == aGroupAddMemberDetails) {
    return YES;
  }
  if (![self.isGroupOwner isEqual:aGroupAddMemberDetails.isGroupOwner]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupAddMemberDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupAddMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"is_group_owner"] = valueObj.isGroupOwner;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupAddMemberDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *isGroupOwner = valueDict[@"is_group_owner"];

  return [[DBTEAMLOGGroupAddMemberDetails alloc] initWithIsGroupOwner:isGroupOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupAddMemberType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupAddMemberType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupAddMemberTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupAddMemberTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupAddMemberTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupAddMemberType:other];
}

- (BOOL)isEqualToGroupAddMemberType:(DBTEAMLOGGroupAddMemberType *)aGroupAddMemberType {
  if (self == aGroupAddMemberType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupAddMemberType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupAddMemberTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupAddMemberType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupAddMemberType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupAddMemberType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupChangeExternalIdDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupChangeExternalIdDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSString *)dNewValue previousValue:(NSString *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupChangeExternalIdDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupChangeExternalIdDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupChangeExternalIdDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupChangeExternalIdDetails:other];
}

- (BOOL)isEqualToGroupChangeExternalIdDetails:(DBTEAMLOGGroupChangeExternalIdDetails *)aGroupChangeExternalIdDetails {
  if (self == aGroupChangeExternalIdDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aGroupChangeExternalIdDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aGroupChangeExternalIdDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupChangeExternalIdDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupChangeExternalIdDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = valueObj.dNewValue;
  jsonDict[@"previous_value"] = valueObj.previousValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupChangeExternalIdDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *dNewValue = valueDict[@"new_value"];
  NSString *previousValue = valueDict[@"previous_value"];

  return [[DBTEAMLOGGroupChangeExternalIdDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupChangeExternalIdType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupChangeExternalIdType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupChangeExternalIdTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupChangeExternalIdTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupChangeExternalIdTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupChangeExternalIdType:other];
}

- (BOOL)isEqualToGroupChangeExternalIdType:(DBTEAMLOGGroupChangeExternalIdType *)aGroupChangeExternalIdType {
  if (self == aGroupChangeExternalIdType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupChangeExternalIdType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupChangeExternalIdTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupChangeExternalIdType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupChangeExternalIdType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupChangeExternalIdType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONGroupManagementType.h"
#import "DBTEAMLOGGroupChangeManagementTypeDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupChangeManagementTypeDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMCOMMONGroupManagementType *)dNewValue
                    previousValue:(DBTEAMCOMMONGroupManagementType *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMCOMMONGroupManagementType *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupChangeManagementTypeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupChangeManagementTypeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupChangeManagementTypeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupChangeManagementTypeDetails:other];
}

- (BOOL)isEqualToGroupChangeManagementTypeDetails:
    (DBTEAMLOGGroupChangeManagementTypeDetails *)aGroupChangeManagementTypeDetails {
  if (self == aGroupChangeManagementTypeDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aGroupChangeManagementTypeDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aGroupChangeManagementTypeDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupChangeManagementTypeDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupChangeManagementTypeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMCOMMONGroupManagementTypeSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMCOMMONGroupManagementTypeSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupChangeManagementTypeDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMCOMMONGroupManagementType *dNewValue =
      [DBTEAMCOMMONGroupManagementTypeSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMCOMMONGroupManagementType *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMCOMMONGroupManagementTypeSerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGGroupChangeManagementTypeDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupChangeManagementTypeType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupChangeManagementTypeType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupChangeManagementTypeTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupChangeManagementTypeTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupChangeManagementTypeTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupChangeManagementTypeType:other];
}

- (BOOL)isEqualToGroupChangeManagementTypeType:
    (DBTEAMLOGGroupChangeManagementTypeType *)aGroupChangeManagementTypeType {
  if (self == aGroupChangeManagementTypeType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupChangeManagementTypeType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupChangeManagementTypeTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupChangeManagementTypeType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupChangeManagementTypeType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupChangeManagementTypeType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupChangeMemberRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupChangeMemberRoleDetails

#pragma mark - Constructors

- (instancetype)initWithIsGroupOwner:(NSNumber *)isGroupOwner {
  [DBStoneValidators nonnullValidator:nil](isGroupOwner);

  self = [super init];
  if (self) {
    _isGroupOwner = isGroupOwner;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupChangeMemberRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupChangeMemberRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupChangeMemberRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.isGroupOwner hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupChangeMemberRoleDetails:other];
}

- (BOOL)isEqualToGroupChangeMemberRoleDetails:(DBTEAMLOGGroupChangeMemberRoleDetails *)aGroupChangeMemberRoleDetails {
  if (self == aGroupChangeMemberRoleDetails) {
    return YES;
  }
  if (![self.isGroupOwner isEqual:aGroupChangeMemberRoleDetails.isGroupOwner]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupChangeMemberRoleDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupChangeMemberRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"is_group_owner"] = valueObj.isGroupOwner;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupChangeMemberRoleDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *isGroupOwner = valueDict[@"is_group_owner"];

  return [[DBTEAMLOGGroupChangeMemberRoleDetails alloc] initWithIsGroupOwner:isGroupOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupChangeMemberRoleType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupChangeMemberRoleType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupChangeMemberRoleTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupChangeMemberRoleTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupChangeMemberRoleTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupChangeMemberRoleType:other];
}

- (BOOL)isEqualToGroupChangeMemberRoleType:(DBTEAMLOGGroupChangeMemberRoleType *)aGroupChangeMemberRoleType {
  if (self == aGroupChangeMemberRoleType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupChangeMemberRoleType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupChangeMemberRoleTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupChangeMemberRoleType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupChangeMemberRoleType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupChangeMemberRoleType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupCreateDetails.h"
#import "DBTEAMLOGGroupJoinPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupCreateDetails

#pragma mark - Constructors

- (instancetype)initWithIsCompanyManaged:(NSNumber *)isCompanyManaged
                              joinPolicy:(DBTEAMLOGGroupJoinPolicy *)joinPolicy {

  self = [super init];
  if (self) {
    _isCompanyManaged = isCompanyManaged;
    _joinPolicy = joinPolicy;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithIsCompanyManaged:nil joinPolicy:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.isCompanyManaged != nil) {
    result = prime * result + [self.isCompanyManaged hash];
  }
  if (self.joinPolicy != nil) {
    result = prime * result + [self.joinPolicy hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupCreateDetails:other];
}

- (BOOL)isEqualToGroupCreateDetails:(DBTEAMLOGGroupCreateDetails *)aGroupCreateDetails {
  if (self == aGroupCreateDetails) {
    return YES;
  }
  if (self.isCompanyManaged) {
    if (![self.isCompanyManaged isEqual:aGroupCreateDetails.isCompanyManaged]) {
      return NO;
    }
  }
  if (self.joinPolicy) {
    if (![self.joinPolicy isEqual:aGroupCreateDetails.joinPolicy]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupCreateDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.isCompanyManaged) {
    jsonDict[@"is_company_managed"] = valueObj.isCompanyManaged;
  }
  if (valueObj.joinPolicy) {
    jsonDict[@"join_policy"] = [DBTEAMLOGGroupJoinPolicySerializer serialize:valueObj.joinPolicy];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupCreateDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *isCompanyManaged = valueDict[@"is_company_managed"] ?: nil;
  DBTEAMLOGGroupJoinPolicy *joinPolicy =
      valueDict[@"join_policy"] ? [DBTEAMLOGGroupJoinPolicySerializer deserialize:valueDict[@"join_policy"]] : nil;

  return [[DBTEAMLOGGroupCreateDetails alloc] initWithIsCompanyManaged:isCompanyManaged joinPolicy:joinPolicy];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupCreateType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupCreateType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupCreateTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupCreateTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupCreateTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupCreateType:other];
}

- (BOOL)isEqualToGroupCreateType:(DBTEAMLOGGroupCreateType *)aGroupCreateType {
  if (self == aGroupCreateType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupCreateType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupCreateTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupCreateType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupCreateType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupCreateType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupDeleteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupDeleteDetails

#pragma mark - Constructors

- (instancetype)initWithIsCompanyManaged:(NSNumber *)isCompanyManaged {

  self = [super init];
  if (self) {
    _isCompanyManaged = isCompanyManaged;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithIsCompanyManaged:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupDeleteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupDeleteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupDeleteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.isCompanyManaged != nil) {
    result = prime * result + [self.isCompanyManaged hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupDeleteDetails:other];
}

- (BOOL)isEqualToGroupDeleteDetails:(DBTEAMLOGGroupDeleteDetails *)aGroupDeleteDetails {
  if (self == aGroupDeleteDetails) {
    return YES;
  }
  if (self.isCompanyManaged) {
    if (![self.isCompanyManaged isEqual:aGroupDeleteDetails.isCompanyManaged]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupDeleteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupDeleteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.isCompanyManaged) {
    jsonDict[@"is_company_managed"] = valueObj.isCompanyManaged;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupDeleteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *isCompanyManaged = valueDict[@"is_company_managed"] ?: nil;

  return [[DBTEAMLOGGroupDeleteDetails alloc] initWithIsCompanyManaged:isCompanyManaged];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupDeleteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupDeleteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupDeleteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupDeleteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupDeleteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupDeleteType:other];
}

- (BOOL)isEqualToGroupDeleteType:(DBTEAMLOGGroupDeleteType *)aGroupDeleteType {
  if (self == aGroupDeleteType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupDeleteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupDeleteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupDeleteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupDeleteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupDeleteType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupDescriptionUpdatedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupDescriptionUpdatedDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupDescriptionUpdatedDetails:other];
}

- (BOOL)isEqualToGroupDescriptionUpdatedDetails:
    (DBTEAMLOGGroupDescriptionUpdatedDetails *)aGroupDescriptionUpdatedDetails {
  if (self == aGroupDescriptionUpdatedDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupDescriptionUpdatedDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupDescriptionUpdatedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGGroupDescriptionUpdatedDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupDescriptionUpdatedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupDescriptionUpdatedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupDescriptionUpdatedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupDescriptionUpdatedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupDescriptionUpdatedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupDescriptionUpdatedType:other];
}

- (BOOL)isEqualToGroupDescriptionUpdatedType:(DBTEAMLOGGroupDescriptionUpdatedType *)aGroupDescriptionUpdatedType {
  if (self == aGroupDescriptionUpdatedType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupDescriptionUpdatedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupDescriptionUpdatedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupDescriptionUpdatedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupDescriptionUpdatedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupDescriptionUpdatedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupJoinPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupJoinPolicy

#pragma mark - Constructors

- (instancetype)initWithOpen {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupJoinPolicyOpen;
  }
  return self;
}

- (instancetype)initWithRequestToJoin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupJoinPolicyRequestToJoin;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupJoinPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOpen {
  return _tag == DBTEAMLOGGroupJoinPolicyOpen;
}

- (BOOL)isRequestToJoin {
  return _tag == DBTEAMLOGGroupJoinPolicyRequestToJoin;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGGroupJoinPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGGroupJoinPolicyOpen:
    return @"DBTEAMLOGGroupJoinPolicyOpen";
  case DBTEAMLOGGroupJoinPolicyRequestToJoin:
    return @"DBTEAMLOGGroupJoinPolicyRequestToJoin";
  case DBTEAMLOGGroupJoinPolicyOther:
    return @"DBTEAMLOGGroupJoinPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupJoinPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupJoinPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupJoinPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGGroupJoinPolicyOpen:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGroupJoinPolicyRequestToJoin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGroupJoinPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupJoinPolicy:other];
}

- (BOOL)isEqualToGroupJoinPolicy:(DBTEAMLOGGroupJoinPolicy *)aGroupJoinPolicy {
  if (self == aGroupJoinPolicy) {
    return YES;
  }
  if (self.tag != aGroupJoinPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGGroupJoinPolicyOpen:
    return [[self tagName] isEqual:[aGroupJoinPolicy tagName]];
  case DBTEAMLOGGroupJoinPolicyRequestToJoin:
    return [[self tagName] isEqual:[aGroupJoinPolicy tagName]];
  case DBTEAMLOGGroupJoinPolicyOther:
    return [[self tagName] isEqual:[aGroupJoinPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupJoinPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupJoinPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOpen]) {
    jsonDict[@".tag"] = @"open";
  } else if ([valueObj isRequestToJoin]) {
    jsonDict[@".tag"] = @"request_to_join";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupJoinPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"open"]) {
    return [[DBTEAMLOGGroupJoinPolicy alloc] initWithOpen];
  } else if ([tag isEqualToString:@"request_to_join"]) {
    return [[DBTEAMLOGGroupJoinPolicy alloc] initWithRequestToJoin];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGGroupJoinPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGGroupJoinPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupJoinPolicy.h"
#import "DBTEAMLOGGroupJoinPolicyUpdatedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupJoinPolicyUpdatedDetails

#pragma mark - Constructors

- (instancetype)initWithIsCompanyManaged:(NSNumber *)isCompanyManaged
                              joinPolicy:(DBTEAMLOGGroupJoinPolicy *)joinPolicy {

  self = [super init];
  if (self) {
    _isCompanyManaged = isCompanyManaged;
    _joinPolicy = joinPolicy;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithIsCompanyManaged:nil joinPolicy:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.isCompanyManaged != nil) {
    result = prime * result + [self.isCompanyManaged hash];
  }
  if (self.joinPolicy != nil) {
    result = prime * result + [self.joinPolicy hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupJoinPolicyUpdatedDetails:other];
}

- (BOOL)isEqualToGroupJoinPolicyUpdatedDetails:
    (DBTEAMLOGGroupJoinPolicyUpdatedDetails *)aGroupJoinPolicyUpdatedDetails {
  if (self == aGroupJoinPolicyUpdatedDetails) {
    return YES;
  }
  if (self.isCompanyManaged) {
    if (![self.isCompanyManaged isEqual:aGroupJoinPolicyUpdatedDetails.isCompanyManaged]) {
      return NO;
    }
  }
  if (self.joinPolicy) {
    if (![self.joinPolicy isEqual:aGroupJoinPolicyUpdatedDetails.joinPolicy]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupJoinPolicyUpdatedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.isCompanyManaged) {
    jsonDict[@"is_company_managed"] = valueObj.isCompanyManaged;
  }
  if (valueObj.joinPolicy) {
    jsonDict[@"join_policy"] = [DBTEAMLOGGroupJoinPolicySerializer serialize:valueObj.joinPolicy];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupJoinPolicyUpdatedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *isCompanyManaged = valueDict[@"is_company_managed"] ?: nil;
  DBTEAMLOGGroupJoinPolicy *joinPolicy =
      valueDict[@"join_policy"] ? [DBTEAMLOGGroupJoinPolicySerializer deserialize:valueDict[@"join_policy"]] : nil;

  return
      [[DBTEAMLOGGroupJoinPolicyUpdatedDetails alloc] initWithIsCompanyManaged:isCompanyManaged joinPolicy:joinPolicy];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupJoinPolicyUpdatedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupJoinPolicyUpdatedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupJoinPolicyUpdatedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupJoinPolicyUpdatedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupJoinPolicyUpdatedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupJoinPolicyUpdatedType:other];
}

- (BOOL)isEqualToGroupJoinPolicyUpdatedType:(DBTEAMLOGGroupJoinPolicyUpdatedType *)aGroupJoinPolicyUpdatedType {
  if (self == aGroupJoinPolicyUpdatedType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupJoinPolicyUpdatedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupJoinPolicyUpdatedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupJoinPolicyUpdatedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupJoinPolicyUpdatedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupJoinPolicyUpdatedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupLogInfo

#pragma mark - Constructors

- (instancetype)initWithDisplayName:(NSString *)displayName
                            groupId:(NSString *)groupId
                         externalId:(NSString *)externalId {
  [DBStoneValidators nonnullValidator:nil](displayName);

  self = [super init];
  if (self) {
    _groupId = groupId;
    _displayName = displayName;
    _externalId = externalId;
  }
  return self;
}

- (instancetype)initWithDisplayName:(NSString *)displayName {
  return [self initWithDisplayName:displayName groupId:nil externalId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.displayName hash];
  if (self.groupId != nil) {
    result = prime * result + [self.groupId hash];
  }
  if (self.externalId != nil) {
    result = prime * result + [self.externalId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupLogInfo:other];
}

- (BOOL)isEqualToGroupLogInfo:(DBTEAMLOGGroupLogInfo *)aGroupLogInfo {
  if (self == aGroupLogInfo) {
    return YES;
  }
  if (![self.displayName isEqual:aGroupLogInfo.displayName]) {
    return NO;
  }
  if (self.groupId) {
    if (![self.groupId isEqual:aGroupLogInfo.groupId]) {
      return NO;
    }
  }
  if (self.externalId) {
    if (![self.externalId isEqual:aGroupLogInfo.externalId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"display_name"] = valueObj.displayName;
  if (valueObj.groupId) {
    jsonDict[@"group_id"] = valueObj.groupId;
  }
  if (valueObj.externalId) {
    jsonDict[@"external_id"] = valueObj.externalId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *displayName = valueDict[@"display_name"];
  NSString *groupId = valueDict[@"group_id"] ?: nil;
  NSString *externalId = valueDict[@"external_id"] ?: nil;

  return [[DBTEAMLOGGroupLogInfo alloc] initWithDisplayName:displayName groupId:groupId externalId:externalId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupMovedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupMovedDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupMovedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupMovedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupMovedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMovedDetails:other];
}

- (BOOL)isEqualToGroupMovedDetails:(DBTEAMLOGGroupMovedDetails *)aGroupMovedDetails {
  if (self == aGroupMovedDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupMovedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupMovedDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupMovedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGGroupMovedDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupMovedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupMovedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupMovedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupMovedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupMovedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMovedType:other];
}

- (BOOL)isEqualToGroupMovedType:(DBTEAMLOGGroupMovedType *)aGroupMovedType {
  if (self == aGroupMovedType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupMovedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupMovedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupMovedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupMovedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupMovedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupRemoveExternalIdDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupRemoveExternalIdDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSString *)previousValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupRemoveExternalIdDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupRemoveExternalIdDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupRemoveExternalIdDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupRemoveExternalIdDetails:other];
}

- (BOOL)isEqualToGroupRemoveExternalIdDetails:(DBTEAMLOGGroupRemoveExternalIdDetails *)aGroupRemoveExternalIdDetails {
  if (self == aGroupRemoveExternalIdDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aGroupRemoveExternalIdDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupRemoveExternalIdDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupRemoveExternalIdDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = valueObj.previousValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupRemoveExternalIdDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *previousValue = valueDict[@"previous_value"];

  return [[DBTEAMLOGGroupRemoveExternalIdDetails alloc] initWithPreviousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupRemoveExternalIdType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupRemoveExternalIdType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupRemoveExternalIdTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupRemoveExternalIdTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupRemoveExternalIdTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupRemoveExternalIdType:other];
}

- (BOOL)isEqualToGroupRemoveExternalIdType:(DBTEAMLOGGroupRemoveExternalIdType *)aGroupRemoveExternalIdType {
  if (self == aGroupRemoveExternalIdType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupRemoveExternalIdType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupRemoveExternalIdTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupRemoveExternalIdType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupRemoveExternalIdType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupRemoveExternalIdType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupRemoveMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupRemoveMemberDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupRemoveMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupRemoveMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupRemoveMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupRemoveMemberDetails:other];
}

- (BOOL)isEqualToGroupRemoveMemberDetails:(DBTEAMLOGGroupRemoveMemberDetails *)aGroupRemoveMemberDetails {
  if (self == aGroupRemoveMemberDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupRemoveMemberDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupRemoveMemberDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupRemoveMemberDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGGroupRemoveMemberDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupRemoveMemberType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupRemoveMemberType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupRemoveMemberTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupRemoveMemberTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupRemoveMemberTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupRemoveMemberType:other];
}

- (BOOL)isEqualToGroupRemoveMemberType:(DBTEAMLOGGroupRemoveMemberType *)aGroupRemoveMemberType {
  if (self == aGroupRemoveMemberType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupRemoveMemberType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupRemoveMemberTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupRemoveMemberType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupRemoveMemberType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupRemoveMemberType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupRenameDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupRenameDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSString *)previousValue dNewValue:(NSString *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupRenameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupRenameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupRenameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupRenameDetails:other];
}

- (BOOL)isEqualToGroupRenameDetails:(DBTEAMLOGGroupRenameDetails *)aGroupRenameDetails {
  if (self == aGroupRenameDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aGroupRenameDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aGroupRenameDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupRenameDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupRenameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = valueObj.previousValue;
  jsonDict[@"new_value"] = valueObj.dNewValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupRenameDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *previousValue = valueDict[@"previous_value"];
  NSString *dNewValue = valueDict[@"new_value"];

  return [[DBTEAMLOGGroupRenameDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupRenameType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupRenameType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupRenameTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupRenameTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupRenameTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupRenameType:other];
}

- (BOOL)isEqualToGroupRenameType:(DBTEAMLOGGroupRenameType *)aGroupRenameType {
  if (self == aGroupRenameType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupRenameType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupRenameTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupRenameType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupRenameType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupRenameType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupUserManagementChangePolicyDetails.h"
#import "DBTEAMPOLICIESGroupCreation.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupUserManagementChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESGroupCreation *)dNewValue
                    previousValue:(DBTEAMPOLICIESGroupCreation *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESGroupCreation *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupUserManagementChangePolicyDetails:other];
}

- (BOOL)isEqualToGroupUserManagementChangePolicyDetails:
    (DBTEAMLOGGroupUserManagementChangePolicyDetails *)aGroupUserManagementChangePolicyDetails {
  if (self == aGroupUserManagementChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aGroupUserManagementChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aGroupUserManagementChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupUserManagementChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMPOLICIESGroupCreationSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMPOLICIESGroupCreationSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupUserManagementChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMPOLICIESGroupCreation *dNewValue = [DBTEAMPOLICIESGroupCreationSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMPOLICIESGroupCreation *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMPOLICIESGroupCreationSerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return
      [[DBTEAMLOGGroupUserManagementChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupUserManagementChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupUserManagementChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGGroupUserManagementChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGGroupUserManagementChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupUserManagementChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupUserManagementChangePolicyType:other];
}

- (BOOL)isEqualToGroupUserManagementChangePolicyType:
    (DBTEAMLOGGroupUserManagementChangePolicyType *)aGroupUserManagementChangePolicyType {
  if (self == aGroupUserManagementChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aGroupUserManagementChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupUserManagementChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGGroupUserManagementChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGGroupUserManagementChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGGroupUserManagementChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGIdentifierType.h"

#pragma mark - API Object

@implementation DBTEAMLOGIdentifierType

#pragma mark - Constructors

- (instancetype)initWithEmail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGIdentifierTypeEmail;
  }
  return self;
}

- (instancetype)initWithFacebookProfileName {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGIdentifierTypeFacebookProfileName;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGIdentifierTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isEmail {
  return _tag == DBTEAMLOGIdentifierTypeEmail;
}

- (BOOL)isFacebookProfileName {
  return _tag == DBTEAMLOGIdentifierTypeFacebookProfileName;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGIdentifierTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGIdentifierTypeEmail:
    return @"DBTEAMLOGIdentifierTypeEmail";
  case DBTEAMLOGIdentifierTypeFacebookProfileName:
    return @"DBTEAMLOGIdentifierTypeFacebookProfileName";
  case DBTEAMLOGIdentifierTypeOther:
    return @"DBTEAMLOGIdentifierTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGIdentifierTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGIdentifierTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGIdentifierTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGIdentifierTypeEmail:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGIdentifierTypeFacebookProfileName:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGIdentifierTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToIdentifierType:other];
}

- (BOOL)isEqualToIdentifierType:(DBTEAMLOGIdentifierType *)anIdentifierType {
  if (self == anIdentifierType) {
    return YES;
  }
  if (self.tag != anIdentifierType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGIdentifierTypeEmail:
    return [[self tagName] isEqual:[anIdentifierType tagName]];
  case DBTEAMLOGIdentifierTypeFacebookProfileName:
    return [[self tagName] isEqual:[anIdentifierType tagName]];
  case DBTEAMLOGIdentifierTypeOther:
    return [[self tagName] isEqual:[anIdentifierType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGIdentifierTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGIdentifierType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEmail]) {
    jsonDict[@".tag"] = @"email";
  } else if ([valueObj isFacebookProfileName]) {
    jsonDict[@".tag"] = @"facebook_profile_name";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGIdentifierType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"email"]) {
    return [[DBTEAMLOGIdentifierType alloc] initWithEmail];
  } else if ([tag isEqualToString:@"facebook_profile_name"]) {
    return [[DBTEAMLOGIdentifierType alloc] initWithFacebookProfileName];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGIdentifierType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGIdentifierType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFolderLogInfo.h"
#import "DBTEAMLOGJoinTeamDetails.h"
#import "DBTEAMLOGLinkedDeviceLogInfo.h"
#import "DBTEAMLOGUserLinkedAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGJoinTeamDetails

#pragma mark - Constructors

- (instancetype)initWithLinkedApps:(NSArray<DBTEAMLOGUserLinkedAppLogInfo *> *)linkedApps
                     linkedDevices:(NSArray<DBTEAMLOGLinkedDeviceLogInfo *> *)linkedDevices
               linkedSharedFolders:(NSArray<DBTEAMLOGFolderLogInfo *> *)linkedSharedFolders {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](linkedApps);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](linkedDevices);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](linkedSharedFolders);

  self = [super init];
  if (self) {
    _linkedApps = linkedApps;
    _linkedDevices = linkedDevices;
    _linkedSharedFolders = linkedSharedFolders;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGJoinTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGJoinTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGJoinTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.linkedApps hash];
  result = prime * result + [self.linkedDevices hash];
  result = prime * result + [self.linkedSharedFolders hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToJoinTeamDetails:other];
}

- (BOOL)isEqualToJoinTeamDetails:(DBTEAMLOGJoinTeamDetails *)aJoinTeamDetails {
  if (self == aJoinTeamDetails) {
    return YES;
  }
  if (![self.linkedApps isEqual:aJoinTeamDetails.linkedApps]) {
    return NO;
  }
  if (![self.linkedDevices isEqual:aJoinTeamDetails.linkedDevices]) {
    return NO;
  }
  if (![self.linkedSharedFolders isEqual:aJoinTeamDetails.linkedSharedFolders]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGJoinTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGJoinTeamDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"linked_apps"] = [DBArraySerializer serialize:valueObj.linkedApps
                                                withBlock:^id(id elem0) {
                                                  return [DBTEAMLOGUserLinkedAppLogInfoSerializer serialize:elem0];
                                                }];
  jsonDict[@"linked_devices"] = [DBArraySerializer serialize:valueObj.linkedDevices
                                                   withBlock:^id(id elem0) {
                                                     return [DBTEAMLOGLinkedDeviceLogInfoSerializer serialize:elem0];
                                                   }];
  jsonDict[@"linked_shared_folders"] = [DBArraySerializer serialize:valueObj.linkedSharedFolders
                                                          withBlock:^id(id elem0) {
                                                            return [DBTEAMLOGFolderLogInfoSerializer serialize:elem0];
                                                          }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGJoinTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMLOGUserLinkedAppLogInfo *> *linkedApps =
      [DBArraySerializer deserialize:valueDict[@"linked_apps"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGUserLinkedAppLogInfoSerializer deserialize:elem0];
                           }];
  NSArray<DBTEAMLOGLinkedDeviceLogInfo *> *linkedDevices =
      [DBArraySerializer deserialize:valueDict[@"linked_devices"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGLinkedDeviceLogInfoSerializer deserialize:elem0];
                           }];
  NSArray<DBTEAMLOGFolderLogInfo *> *linkedSharedFolders =
      [DBArraySerializer deserialize:valueDict[@"linked_shared_folders"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGFolderLogInfoSerializer deserialize:elem0];
                           }];

  return [[DBTEAMLOGJoinTeamDetails alloc] initWithLinkedApps:linkedApps
                                                linkedDevices:linkedDevices
                                          linkedSharedFolders:linkedSharedFolders];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"
#import "DBTEAMLOGLegacyDeviceSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGLegacyDeviceSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithIpAddress:(NSString *)ipAddress
                          created:(NSDate *)created
                          updated:(NSDate *)updated
                      sessionInfo:(DBTEAMLOGSessionLogInfo *)sessionInfo
                      displayName:(NSString *)displayName
                     isEmmManaged:(NSNumber *)isEmmManaged
                         platform:(NSString *)platform
                       macAddress:(NSString *)macAddress
                        osVersion:(NSString *)osVersion
                       deviceType:(NSString *)deviceType
                    clientVersion:(NSString *)clientVersion
                     legacyUniqId:(NSString *)legacyUniqId {

  self = [super initWithIpAddress:ipAddress created:created updated:updated];
  if (self) {
    _sessionInfo = sessionInfo;
    _displayName = displayName;
    _isEmmManaged = isEmmManaged;
    _platform = platform;
    _macAddress = macAddress;
    _osVersion = osVersion;
    _deviceType = deviceType;
    _clientVersion = clientVersion;
    _legacyUniqId = legacyUniqId;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithIpAddress:nil
                         created:nil
                         updated:nil
                     sessionInfo:nil
                     displayName:nil
                    isEmmManaged:nil
                        platform:nil
                      macAddress:nil
                       osVersion:nil
                      deviceType:nil
                   clientVersion:nil
                    legacyUniqId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGLegacyDeviceSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGLegacyDeviceSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLegacyDeviceSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }
  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }
  if (self.isEmmManaged != nil) {
    result = prime * result + [self.isEmmManaged hash];
  }
  if (self.platform != nil) {
    result = prime * result + [self.platform hash];
  }
  if (self.macAddress != nil) {
    result = prime * result + [self.macAddress hash];
  }
  if (self.osVersion != nil) {
    result = prime * result + [self.osVersion hash];
  }
  if (self.deviceType != nil) {
    result = prime * result + [self.deviceType hash];
  }
  if (self.clientVersion != nil) {
    result = prime * result + [self.clientVersion hash];
  }
  if (self.legacyUniqId != nil) {
    result = prime * result + [self.legacyUniqId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLegacyDeviceSessionLogInfo:other];
}

- (BOOL)isEqualToLegacyDeviceSessionLogInfo:(DBTEAMLOGLegacyDeviceSessionLogInfo *)aLegacyDeviceSessionLogInfo {
  if (self == aLegacyDeviceSessionLogInfo) {
    return YES;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aLegacyDeviceSessionLogInfo.ipAddress]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:aLegacyDeviceSessionLogInfo.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:aLegacyDeviceSessionLogInfo.updated]) {
      return NO;
    }
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aLegacyDeviceSessionLogInfo.sessionInfo]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aLegacyDeviceSessionLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.isEmmManaged) {
    if (![self.isEmmManaged isEqual:aLegacyDeviceSessionLogInfo.isEmmManaged]) {
      return NO;
    }
  }
  if (self.platform) {
    if (![self.platform isEqual:aLegacyDeviceSessionLogInfo.platform]) {
      return NO;
    }
  }
  if (self.macAddress) {
    if (![self.macAddress isEqual:aLegacyDeviceSessionLogInfo.macAddress]) {
      return NO;
    }
  }
  if (self.osVersion) {
    if (![self.osVersion isEqual:aLegacyDeviceSessionLogInfo.osVersion]) {
      return NO;
    }
  }
  if (self.deviceType) {
    if (![self.deviceType isEqual:aLegacyDeviceSessionLogInfo.deviceType]) {
      return NO;
    }
  }
  if (self.clientVersion) {
    if (![self.clientVersion isEqual:aLegacyDeviceSessionLogInfo.clientVersion]) {
      return NO;
    }
  }
  if (self.legacyUniqId) {
    if (![self.legacyUniqId isEqual:aLegacyDeviceSessionLogInfo.legacyUniqId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLegacyDeviceSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGLegacyDeviceSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.isEmmManaged) {
    jsonDict[@"is_emm_managed"] = valueObj.isEmmManaged;
  }
  if (valueObj.platform) {
    jsonDict[@"platform"] = valueObj.platform;
  }
  if (valueObj.macAddress) {
    jsonDict[@"mac_address"] = valueObj.macAddress;
  }
  if (valueObj.osVersion) {
    jsonDict[@"os_version"] = valueObj.osVersion;
  }
  if (valueObj.deviceType) {
    jsonDict[@"device_type"] = valueObj.deviceType;
  }
  if (valueObj.clientVersion) {
    jsonDict[@"client_version"] = valueObj.clientVersion;
  }
  if (valueObj.legacyUniqId) {
    jsonDict[@"legacy_uniq_id"] = valueObj.legacyUniqId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGLegacyDeviceSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  DBTEAMLOGSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGSessionLogInfoSerializer deserialize:valueDict[@"session_info"]] : nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSNumber *isEmmManaged = valueDict[@"is_emm_managed"] ?: nil;
  NSString *platform = valueDict[@"platform"] ?: nil;
  NSString *macAddress = valueDict[@"mac_address"] ?: nil;
  NSString *osVersion = valueDict[@"os_version"] ?: nil;
  NSString *deviceType = valueDict[@"device_type"] ?: nil;
  NSString *clientVersion = valueDict[@"client_version"] ?: nil;
  NSString *legacyUniqId = valueDict[@"legacy_uniq_id"] ?: nil;

  return [[DBTEAMLOGLegacyDeviceSessionLogInfo alloc] initWithIpAddress:ipAddress
                                                                created:created
                                                                updated:updated
                                                            sessionInfo:sessionInfo
                                                            displayName:displayName
                                                           isEmmManaged:isEmmManaged
                                                               platform:platform
                                                             macAddress:macAddress
                                                              osVersion:osVersion
                                                             deviceType:deviceType
                                                          clientVersion:clientVersion
                                                           legacyUniqId:legacyUniqId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDesktopDeviceSessionLogInfo.h"
#import "DBTEAMLOGLegacyDeviceSessionLogInfo.h"
#import "DBTEAMLOGLinkedDeviceLogInfo.h"
#import "DBTEAMLOGMobileDeviceSessionLogInfo.h"
#import "DBTEAMLOGWebDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGLinkedDeviceLogInfo

@synthesize mobileDeviceSession = _mobileDeviceSession;
@synthesize desktopDeviceSession = _desktopDeviceSession;
@synthesize webDeviceSession = _webDeviceSession;
@synthesize legacyDeviceSession = _legacyDeviceSession;

#pragma mark - Constructors

- (instancetype)initWithMobileDeviceSession:(DBTEAMLOGMobileDeviceSessionLogInfo *)mobileDeviceSession {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLinkedDeviceLogInfoMobileDeviceSession;
    _mobileDeviceSession = mobileDeviceSession;
  }
  return self;
}

- (instancetype)initWithDesktopDeviceSession:(DBTEAMLOGDesktopDeviceSessionLogInfo *)desktopDeviceSession {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLinkedDeviceLogInfoDesktopDeviceSession;
    _desktopDeviceSession = desktopDeviceSession;
  }
  return self;
}

- (instancetype)initWithWebDeviceSession:(DBTEAMLOGWebDeviceSessionLogInfo *)webDeviceSession {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLinkedDeviceLogInfoWebDeviceSession;
    _webDeviceSession = webDeviceSession;
  }
  return self;
}

- (instancetype)initWithLegacyDeviceSession:(DBTEAMLOGLegacyDeviceSessionLogInfo *)legacyDeviceSession {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLinkedDeviceLogInfoLegacyDeviceSession;
    _legacyDeviceSession = legacyDeviceSession;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLinkedDeviceLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGMobileDeviceSessionLogInfo *)mobileDeviceSession {
  if (![self isMobileDeviceSession]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGLinkedDeviceLogInfoMobileDeviceSession, but was %@.", [self tagName]];
  }
  return _mobileDeviceSession;
}

- (DBTEAMLOGDesktopDeviceSessionLogInfo *)desktopDeviceSession {
  if (![self isDesktopDeviceSession]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGLinkedDeviceLogInfoDesktopDeviceSession, but was %@.", [self tagName]];
  }
  return _desktopDeviceSession;
}

- (DBTEAMLOGWebDeviceSessionLogInfo *)webDeviceSession {
  if (![self isWebDeviceSession]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGLinkedDeviceLogInfoWebDeviceSession, but was %@.", [self tagName]];
  }
  return _webDeviceSession;
}

- (DBTEAMLOGLegacyDeviceSessionLogInfo *)legacyDeviceSession {
  if (![self isLegacyDeviceSession]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGLinkedDeviceLogInfoLegacyDeviceSession, but was %@.", [self tagName]];
  }
  return _legacyDeviceSession;
}

#pragma mark - Tag state methods

- (BOOL)isMobileDeviceSession {
  return _tag == DBTEAMLOGLinkedDeviceLogInfoMobileDeviceSession;
}

- (BOOL)isDesktopDeviceSession {
  return _tag == DBTEAMLOGLinkedDeviceLogInfoDesktopDeviceSession;
}

- (BOOL)isWebDeviceSession {
  return _tag == DBTEAMLOGLinkedDeviceLogInfoWebDeviceSession;
}

- (BOOL)isLegacyDeviceSession {
  return _tag == DBTEAMLOGLinkedDeviceLogInfoLegacyDeviceSession;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGLinkedDeviceLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGLinkedDeviceLogInfoMobileDeviceSession:
    return @"DBTEAMLOGLinkedDeviceLogInfoMobileDeviceSession";
  case DBTEAMLOGLinkedDeviceLogInfoDesktopDeviceSession:
    return @"DBTEAMLOGLinkedDeviceLogInfoDesktopDeviceSession";
  case DBTEAMLOGLinkedDeviceLogInfoWebDeviceSession:
    return @"DBTEAMLOGLinkedDeviceLogInfoWebDeviceSession";
  case DBTEAMLOGLinkedDeviceLogInfoLegacyDeviceSession:
    return @"DBTEAMLOGLinkedDeviceLogInfoLegacyDeviceSession";
  case DBTEAMLOGLinkedDeviceLogInfoOther:
    return @"DBTEAMLOGLinkedDeviceLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGLinkedDeviceLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGLinkedDeviceLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLinkedDeviceLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGLinkedDeviceLogInfoMobileDeviceSession:
    result = prime * result + [self.mobileDeviceSession hash];
  case DBTEAMLOGLinkedDeviceLogInfoDesktopDeviceSession:
    result = prime * result + [self.desktopDeviceSession hash];
  case DBTEAMLOGLinkedDeviceLogInfoWebDeviceSession:
    result = prime * result + [self.webDeviceSession hash];
  case DBTEAMLOGLinkedDeviceLogInfoLegacyDeviceSession:
    result = prime * result + [self.legacyDeviceSession hash];
  case DBTEAMLOGLinkedDeviceLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLinkedDeviceLogInfo:other];
}

- (BOOL)isEqualToLinkedDeviceLogInfo:(DBTEAMLOGLinkedDeviceLogInfo *)aLinkedDeviceLogInfo {
  if (self == aLinkedDeviceLogInfo) {
    return YES;
  }
  if (self.tag != aLinkedDeviceLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGLinkedDeviceLogInfoMobileDeviceSession:
    return [self.mobileDeviceSession isEqual:aLinkedDeviceLogInfo.mobileDeviceSession];
  case DBTEAMLOGLinkedDeviceLogInfoDesktopDeviceSession:
    return [self.desktopDeviceSession isEqual:aLinkedDeviceLogInfo.desktopDeviceSession];
  case DBTEAMLOGLinkedDeviceLogInfoWebDeviceSession:
    return [self.webDeviceSession isEqual:aLinkedDeviceLogInfo.webDeviceSession];
  case DBTEAMLOGLinkedDeviceLogInfoLegacyDeviceSession:
    return [self.legacyDeviceSession isEqual:aLinkedDeviceLogInfo.legacyDeviceSession];
  case DBTEAMLOGLinkedDeviceLogInfoOther:
    return [[self tagName] isEqual:[aLinkedDeviceLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLinkedDeviceLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGLinkedDeviceLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMobileDeviceSession]) {
    jsonDict = [[DBTEAMLOGMobileDeviceSessionLogInfoSerializer serialize:valueObj.mobileDeviceSession] mutableCopy];
    jsonDict[@".tag"] = @"mobile_device_session";
  } else if ([valueObj isDesktopDeviceSession]) {
    jsonDict = [[DBTEAMLOGDesktopDeviceSessionLogInfoSerializer serialize:valueObj.desktopDeviceSession] mutableCopy];
    jsonDict[@".tag"] = @"desktop_device_session";
  } else if ([valueObj isWebDeviceSession]) {
    jsonDict = [[DBTEAMLOGWebDeviceSessionLogInfoSerializer serialize:valueObj.webDeviceSession] mutableCopy];
    jsonDict[@".tag"] = @"web_device_session";
  } else if ([valueObj isLegacyDeviceSession]) {
    jsonDict = [[DBTEAMLOGLegacyDeviceSessionLogInfoSerializer serialize:valueObj.legacyDeviceSession] mutableCopy];
    jsonDict[@".tag"] = @"legacy_device_session";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGLinkedDeviceLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"mobile_device_session"]) {
    DBTEAMLOGMobileDeviceSessionLogInfo *mobileDeviceSession =
        [DBTEAMLOGMobileDeviceSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGLinkedDeviceLogInfo alloc] initWithMobileDeviceSession:mobileDeviceSession];
  } else if ([tag isEqualToString:@"desktop_device_session"]) {
    DBTEAMLOGDesktopDeviceSessionLogInfo *desktopDeviceSession =
        [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGLinkedDeviceLogInfo alloc] initWithDesktopDeviceSession:desktopDeviceSession];
  } else if ([tag isEqualToString:@"web_device_session"]) {
    DBTEAMLOGWebDeviceSessionLogInfo *webDeviceSession =
        [DBTEAMLOGWebDeviceSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGLinkedDeviceLogInfo alloc] initWithWebDeviceSession:webDeviceSession];
  } else if ([tag isEqualToString:@"legacy_device_session"]) {
    DBTEAMLOGLegacyDeviceSessionLogInfo *legacyDeviceSession =
        [DBTEAMLOGLegacyDeviceSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGLinkedDeviceLogInfo alloc] initWithLegacyDeviceSession:legacyDeviceSession];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGLinkedDeviceLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGLinkedDeviceLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFailureDetailsLogInfo.h"
#import "DBTEAMLOGLoginFailDetails.h"
#import "DBTEAMLOGLoginMethod.h"

#pragma mark - API Object

@implementation DBTEAMLOGLoginFailDetails

#pragma mark - Constructors

- (instancetype)initWithLoginMethod:(DBTEAMLOGLoginMethod *)loginMethod
                       errorDetails:(DBTEAMLOGFailureDetailsLogInfo *)errorDetails
                       isEmmManaged:(NSNumber *)isEmmManaged {
  [DBStoneValidators nonnullValidator:nil](loginMethod);
  [DBStoneValidators nonnullValidator:nil](errorDetails);

  self = [super init];
  if (self) {
    _isEmmManaged = isEmmManaged;
    _loginMethod = loginMethod;
    _errorDetails = errorDetails;
  }
  return self;
}

- (instancetype)initWithLoginMethod:(DBTEAMLOGLoginMethod *)loginMethod
                       errorDetails:(DBTEAMLOGFailureDetailsLogInfo *)errorDetails {
  return [self initWithLoginMethod:loginMethod errorDetails:errorDetails isEmmManaged:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGLoginFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGLoginFailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLoginFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.loginMethod hash];
  result = prime * result + [self.errorDetails hash];
  if (self.isEmmManaged != nil) {
    result = prime * result + [self.isEmmManaged hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLoginFailDetails:other];
}

- (BOOL)isEqualToLoginFailDetails:(DBTEAMLOGLoginFailDetails *)aLoginFailDetails {
  if (self == aLoginFailDetails) {
    return YES;
  }
  if (![self.loginMethod isEqual:aLoginFailDetails.loginMethod]) {
    return NO;
  }
  if (![self.errorDetails isEqual:aLoginFailDetails.errorDetails]) {
    return NO;
  }
  if (self.isEmmManaged) {
    if (![self.isEmmManaged isEqual:aLoginFailDetails.isEmmManaged]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLoginFailDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGLoginFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"login_method"] = [DBTEAMLOGLoginMethodSerializer serialize:valueObj.loginMethod];
  jsonDict[@"error_details"] = [DBTEAMLOGFailureDetailsLogInfoSerializer serialize:valueObj.errorDetails];
  if (valueObj.isEmmManaged) {
    jsonDict[@"is_emm_managed"] = valueObj.isEmmManaged;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGLoginFailDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGLoginMethod *loginMethod = [DBTEAMLOGLoginMethodSerializer deserialize:valueDict[@"login_method"]];
  DBTEAMLOGFailureDetailsLogInfo *errorDetails =
      [DBTEAMLOGFailureDetailsLogInfoSerializer deserialize:valueDict[@"error_details"]];
  NSNumber *isEmmManaged = valueDict[@"is_emm_managed"] ?: nil;

  return [[DBTEAMLOGLoginFailDetails alloc] initWithLoginMethod:loginMethod
                                                   errorDetails:errorDetails
                                                   isEmmManaged:isEmmManaged];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGLoginFailType.h"

#pragma mark - API Object

@implementation DBTEAMLOGLoginFailType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGLoginFailTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGLoginFailTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLoginFailTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLoginFailType:other];
}

- (BOOL)isEqualToLoginFailType:(DBTEAMLOGLoginFailType *)aLoginFailType {
  if (self == aLoginFailType) {
    return YES;
  }
  if (![self.description_ isEqual:aLoginFailType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLoginFailTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGLoginFailType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGLoginFailType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGLoginFailType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGLoginMethod.h"

#pragma mark - API Object

@implementation DBTEAMLOGLoginMethod

#pragma mark - Constructors

- (instancetype)initWithPassword {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLoginMethodPassword;
  }
  return self;
}

- (instancetype)initWithTwoFactorAuthentication {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLoginMethodTwoFactorAuthentication;
  }
  return self;
}

- (instancetype)initWithSaml {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLoginMethodSaml;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLoginMethodOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isPassword {
  return _tag == DBTEAMLOGLoginMethodPassword;
}

- (BOOL)isTwoFactorAuthentication {
  return _tag == DBTEAMLOGLoginMethodTwoFactorAuthentication;
}

- (BOOL)isSaml {
  return _tag == DBTEAMLOGLoginMethodSaml;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGLoginMethodOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGLoginMethodPassword:
    return @"DBTEAMLOGLoginMethodPassword";
  case DBTEAMLOGLoginMethodTwoFactorAuthentication:
    return @"DBTEAMLOGLoginMethodTwoFactorAuthentication";
  case DBTEAMLOGLoginMethodSaml:
    return @"DBTEAMLOGLoginMethodSaml";
  case DBTEAMLOGLoginMethodOther:
    return @"DBTEAMLOGLoginMethodOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGLoginMethodSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGLoginMethodSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLoginMethodSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGLoginMethodPassword:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGLoginMethodTwoFactorAuthentication:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGLoginMethodSaml:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGLoginMethodOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLoginMethod:other];
}

- (BOOL)isEqualToLoginMethod:(DBTEAMLOGLoginMethod *)aLoginMethod {
  if (self == aLoginMethod) {
    return YES;
  }
  if (self.tag != aLoginMethod.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGLoginMethodPassword:
    return [[self tagName] isEqual:[aLoginMethod tagName]];
  case DBTEAMLOGLoginMethodTwoFactorAuthentication:
    return [[self tagName] isEqual:[aLoginMethod tagName]];
  case DBTEAMLOGLoginMethodSaml:
    return [[self tagName] isEqual:[aLoginMethod tagName]];
  case DBTEAMLOGLoginMethodOther:
    return [[self tagName] isEqual:[aLoginMethod tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLoginMethodSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGLoginMethod *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPassword]) {
    jsonDict[@".tag"] = @"password";
  } else if ([valueObj isTwoFactorAuthentication]) {
    jsonDict[@".tag"] = @"two_factor_authentication";
  } else if ([valueObj isSaml]) {
    jsonDict[@".tag"] = @"saml";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGLoginMethod *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"password"]) {
    return [[DBTEAMLOGLoginMethod alloc] initWithPassword];
  } else if ([tag isEqualToString:@"two_factor_authentication"]) {
    return [[DBTEAMLOGLoginMethod alloc] initWithTwoFactorAuthentication];
  } else if ([tag isEqualToString:@"saml"]) {
    return [[DBTEAMLOGLoginMethod alloc] initWithSaml];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGLoginMethod alloc] initWithOther];
  } else {
    return [[DBTEAMLOGLoginMethod alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGLoginMethod.h"
#import "DBTEAMLOGLoginSuccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGLoginSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithLoginMethod:(DBTEAMLOGLoginMethod *)loginMethod isEmmManaged:(NSNumber *)isEmmManaged {
  [DBStoneValidators nonnullValidator:nil](loginMethod);

  self = [super init];
  if (self) {
    _isEmmManaged = isEmmManaged;
    _loginMethod = loginMethod;
  }
  return self;
}

- (instancetype)initWithLoginMethod:(DBTEAMLOGLoginMethod *)loginMethod {
  return [self initWithLoginMethod:loginMethod isEmmManaged:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGLoginSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGLoginSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLoginSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.loginMethod hash];
  if (self.isEmmManaged != nil) {
    result = prime * result + [self.isEmmManaged hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLoginSuccessDetails:other];
}

- (BOOL)isEqualToLoginSuccessDetails:(DBTEAMLOGLoginSuccessDetails *)aLoginSuccessDetails {
  if (self == aLoginSuccessDetails) {
    return YES;
  }
  if (![self.loginMethod isEqual:aLoginSuccessDetails.loginMethod]) {
    return NO;
  }
  if (self.isEmmManaged) {
    if (![self.isEmmManaged isEqual:aLoginSuccessDetails.isEmmManaged]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLoginSuccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGLoginSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"login_method"] = [DBTEAMLOGLoginMethodSerializer serialize:valueObj.loginMethod];
  if (valueObj.isEmmManaged) {
    jsonDict[@"is_emm_managed"] = valueObj.isEmmManaged;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGLoginSuccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGLoginMethod *loginMethod = [DBTEAMLOGLoginMethodSerializer deserialize:valueDict[@"login_method"]];
  NSNumber *isEmmManaged = valueDict[@"is_emm_managed"] ?: nil;

  return [[DBTEAMLOGLoginSuccessDetails alloc] initWithLoginMethod:loginMethod isEmmManaged:isEmmManaged];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGLoginSuccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGLoginSuccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGLoginSuccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGLoginSuccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLoginSuccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLoginSuccessType:other];
}

- (BOOL)isEqualToLoginSuccessType:(DBTEAMLOGLoginSuccessType *)aLoginSuccessType {
  if (self == aLoginSuccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aLoginSuccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLoginSuccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGLoginSuccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGLoginSuccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGLoginSuccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGLogoutDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGLogoutDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGLogoutDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGLogoutDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLogoutDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLogoutDetails:other];
}

- (BOOL)isEqualToLogoutDetails:(DBTEAMLOGLogoutDetails *)aLogoutDetails {
  if (self == aLogoutDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLogoutDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGLogoutDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGLogoutDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGLogoutDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGLogoutType.h"

#pragma mark - API Object

@implementation DBTEAMLOGLogoutType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGLogoutTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGLogoutTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLogoutTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLogoutType:other];
}

- (BOOL)isEqualToLogoutType:(DBTEAMLOGLogoutType *)aLogoutType {
  if (self == aLogoutType) {
    return YES;
  }
  if (![self.description_ isEqual:aLogoutType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLogoutTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGLogoutType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGLogoutType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGLogoutType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberAddNameDetails.h"
#import "DBTEAMLOGUserNameLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberAddNameDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGUserNameLogInfo *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberAddNameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberAddNameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberAddNameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberAddNameDetails:other];
}

- (BOOL)isEqualToMemberAddNameDetails:(DBTEAMLOGMemberAddNameDetails *)aMemberAddNameDetails {
  if (self == aMemberAddNameDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberAddNameDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberAddNameDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberAddNameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGUserNameLogInfoSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberAddNameDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGUserNameLogInfo *dNewValue = [DBTEAMLOGUserNameLogInfoSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGMemberAddNameDetails alloc] initWithDNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberAddNameType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberAddNameType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberAddNameTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberAddNameTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberAddNameTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberAddNameType:other];
}

- (BOOL)isEqualToMemberAddNameType:(DBTEAMLOGMemberAddNameType *)aMemberAddNameType {
  if (self == aMemberAddNameType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberAddNameType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberAddNameTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberAddNameType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberAddNameType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberAddNameType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminRole.h"
#import "DBTEAMLOGMemberChangeAdminRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeAdminRoleDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGAdminRole *)dNewValue previousValue:(DBTEAMLOGAdminRole *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeAdminRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberChangeAdminRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeAdminRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeAdminRoleDetails:other];
}

- (BOOL)isEqualToMemberChangeAdminRoleDetails:(DBTEAMLOGMemberChangeAdminRoleDetails *)aMemberChangeAdminRoleDetails {
  if (self == aMemberChangeAdminRoleDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aMemberChangeAdminRoleDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberChangeAdminRoleDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeAdminRoleDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberChangeAdminRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGAdminRoleSerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGAdminRoleSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberChangeAdminRoleDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAdminRole *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGAdminRoleSerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMLOGAdminRole *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGAdminRoleSerializer deserialize:valueDict[@"previous_value"]] : nil;

  return [[DBTEAMLOGMemberChangeAdminRoleDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeAdminRoleType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeAdminRoleType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeAdminRoleTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberChangeAdminRoleTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeAdminRoleTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeAdminRoleType:other];
}

- (BOOL)isEqualToMemberChangeAdminRoleType:(DBTEAMLOGMemberChangeAdminRoleType *)aMemberChangeAdminRoleType {
  if (self == aMemberChangeAdminRoleType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberChangeAdminRoleType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeAdminRoleTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberChangeAdminRoleType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberChangeAdminRoleType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberChangeAdminRoleType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeEmailDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeEmailDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSString *)dNewValue previousValue:(NSString *)previousValue {
  [DBStoneValidators nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](dNewValue);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(NSString *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeEmailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberChangeEmailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeEmailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeEmailDetails:other];
}

- (BOOL)isEqualToMemberChangeEmailDetails:(DBTEAMLOGMemberChangeEmailDetails *)aMemberChangeEmailDetails {
  if (self == aMemberChangeEmailDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberChangeEmailDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberChangeEmailDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeEmailDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberChangeEmailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = valueObj.dNewValue;
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = valueObj.previousValue;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberChangeEmailDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *dNewValue = valueDict[@"new_value"];
  NSString *previousValue = valueDict[@"previous_value"] ?: nil;

  return [[DBTEAMLOGMemberChangeEmailDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeEmailType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeEmailType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeEmailTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberChangeEmailTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeEmailTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeEmailType:other];
}

- (BOOL)isEqualToMemberChangeEmailType:(DBTEAMLOGMemberChangeEmailType *)aMemberChangeEmailType {
  if (self == aMemberChangeEmailType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberChangeEmailType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeEmailTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberChangeEmailType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberChangeEmailType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberChangeEmailType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeMembershipTypeDetails.h"
#import "DBTEAMLOGTeamMembershipType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeMembershipTypeDetails

#pragma mark - Constructors

- (instancetype)initWithPrevValue:(DBTEAMLOGTeamMembershipType *)prevValue
                        dNewValue:(DBTEAMLOGTeamMembershipType *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](prevValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _prevValue = prevValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.prevValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeMembershipTypeDetails:other];
}

- (BOOL)isEqualToMemberChangeMembershipTypeDetails:
    (DBTEAMLOGMemberChangeMembershipTypeDetails *)aMemberChangeMembershipTypeDetails {
  if (self == aMemberChangeMembershipTypeDetails) {
    return YES;
  }
  if (![self.prevValue isEqual:aMemberChangeMembershipTypeDetails.prevValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aMemberChangeMembershipTypeDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberChangeMembershipTypeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"prev_value"] = [DBTEAMLOGTeamMembershipTypeSerializer serialize:valueObj.prevValue];
  jsonDict[@"new_value"] = [DBTEAMLOGTeamMembershipTypeSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberChangeMembershipTypeDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGTeamMembershipType *prevValue = [DBTEAMLOGTeamMembershipTypeSerializer deserialize:valueDict[@"prev_value"]];
  DBTEAMLOGTeamMembershipType *dNewValue = [DBTEAMLOGTeamMembershipTypeSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGMemberChangeMembershipTypeDetails alloc] initWithPrevValue:prevValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeMembershipTypeType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeMembershipTypeType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeMembershipTypeTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberChangeMembershipTypeTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeMembershipTypeTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeMembershipTypeType:other];
}

- (BOOL)isEqualToMemberChangeMembershipTypeType:
    (DBTEAMLOGMemberChangeMembershipTypeType *)aMemberChangeMembershipTypeType {
  if (self == aMemberChangeMembershipTypeType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberChangeMembershipTypeType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeMembershipTypeTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberChangeMembershipTypeType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberChangeMembershipTypeType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberChangeMembershipTypeType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeNameDetails.h"
#import "DBTEAMLOGUserNameLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeNameDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGUserNameLogInfo *)dNewValue
                    previousValue:(DBTEAMLOGUserNameLogInfo *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGUserNameLogInfo *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeNameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberChangeNameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeNameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeNameDetails:other];
}

- (BOOL)isEqualToMemberChangeNameDetails:(DBTEAMLOGMemberChangeNameDetails *)aMemberChangeNameDetails {
  if (self == aMemberChangeNameDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberChangeNameDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberChangeNameDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeNameDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberChangeNameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGUserNameLogInfoSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGUserNameLogInfoSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberChangeNameDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGUserNameLogInfo *dNewValue = [DBTEAMLOGUserNameLogInfoSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGUserNameLogInfo *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGUserNameLogInfoSerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGMemberChangeNameDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeNameType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeNameType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeNameTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberChangeNameTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeNameTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeNameType:other];
}

- (BOOL)isEqualToMemberChangeNameType:(DBTEAMLOGMemberChangeNameType *)aMemberChangeNameType {
  if (self == aMemberChangeNameType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberChangeNameType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeNameTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberChangeNameType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberChangeNameType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberChangeNameType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGActionDetails.h"
#import "DBTEAMLOGMemberChangeStatusDetails.h"
#import "DBTEAMLOGMemberStatus.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeStatusDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGMemberStatus *)dNewValue
                    previousValue:(DBTEAMLOGMemberStatus *)previousValue
                           action:(DBTEAMLOGActionDetails *)action {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
    _action = action;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGMemberStatus *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil action:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeStatusDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberChangeStatusDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeStatusDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }
  if (self.action != nil) {
    result = prime * result + [self.action hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeStatusDetails:other];
}

- (BOOL)isEqualToMemberChangeStatusDetails:(DBTEAMLOGMemberChangeStatusDetails *)aMemberChangeStatusDetails {
  if (self == aMemberChangeStatusDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberChangeStatusDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberChangeStatusDetails.previousValue]) {
      return NO;
    }
  }
  if (self.action) {
    if (![self.action isEqual:aMemberChangeStatusDetails.action]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeStatusDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberChangeStatusDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGMemberStatusSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGMemberStatusSerializer serialize:valueObj.previousValue];
  }
  if (valueObj.action) {
    jsonDict[@"action"] = [DBTEAMLOGActionDetailsSerializer serialize:valueObj.action];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberChangeStatusDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGMemberStatus *dNewValue = [DBTEAMLOGMemberStatusSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGMemberStatus *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGMemberStatusSerializer deserialize:valueDict[@"previous_value"]] : nil;
  DBTEAMLOGActionDetails *action =
      valueDict[@"action"] ? [DBTEAMLOGActionDetailsSerializer deserialize:valueDict[@"action"]] : nil;

  return [[DBTEAMLOGMemberChangeStatusDetails alloc] initWithDNewValue:dNewValue
                                                         previousValue:previousValue
                                                                action:action];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeStatusType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeStatusType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeStatusTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberChangeStatusTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeStatusTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeStatusType:other];
}

- (BOOL)isEqualToMemberChangeStatusType:(DBTEAMLOGMemberChangeStatusType *)aMemberChangeStatusType {
  if (self == aMemberChangeStatusType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberChangeStatusType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeStatusTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberChangeStatusType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberChangeStatusType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberChangeStatusType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberPermanentlyDeleteAccountContentsDetails:other];
}

- (BOOL)isEqualToMemberPermanentlyDeleteAccountContentsDetails:
    (DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)aMemberPermanentlyDeleteAccountContentsDetails {
  if (self == aMemberPermanentlyDeleteAccountContentsDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberPermanentlyDeleteAccountContentsType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberPermanentlyDeleteAccountContentsType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberPermanentlyDeleteAccountContentsType:other];
}

- (BOOL)isEqualToMemberPermanentlyDeleteAccountContentsType:
    (DBTEAMLOGMemberPermanentlyDeleteAccountContentsType *)aMemberPermanentlyDeleteAccountContentsType {
  if (self == aMemberPermanentlyDeleteAccountContentsType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberPermanentlyDeleteAccountContentsType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberPermanentlyDeleteAccountContentsType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberPermanentlyDeleteAccountContentsType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberPermanentlyDeleteAccountContentsType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberRemoveActionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberRemoveActionType

#pragma mark - Constructors

- (instancetype)initWithDelete_ {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRemoveActionTypeDelete_;
  }
  return self;
}

- (instancetype)initWithOffboard {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRemoveActionTypeOffboard;
  }
  return self;
}

- (instancetype)initWithLeave {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRemoveActionTypeLeave;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRemoveActionTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDelete_ {
  return _tag == DBTEAMLOGMemberRemoveActionTypeDelete_;
}

- (BOOL)isOffboard {
  return _tag == DBTEAMLOGMemberRemoveActionTypeOffboard;
}

- (BOOL)isLeave {
  return _tag == DBTEAMLOGMemberRemoveActionTypeLeave;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGMemberRemoveActionTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGMemberRemoveActionTypeDelete_:
    return @"DBTEAMLOGMemberRemoveActionTypeDelete_";
  case DBTEAMLOGMemberRemoveActionTypeOffboard:
    return @"DBTEAMLOGMemberRemoveActionTypeOffboard";
  case DBTEAMLOGMemberRemoveActionTypeLeave:
    return @"DBTEAMLOGMemberRemoveActionTypeLeave";
  case DBTEAMLOGMemberRemoveActionTypeOther:
    return @"DBTEAMLOGMemberRemoveActionTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberRemoveActionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberRemoveActionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberRemoveActionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGMemberRemoveActionTypeDelete_:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberRemoveActionTypeOffboard:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberRemoveActionTypeLeave:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberRemoveActionTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberRemoveActionType:other];
}

- (BOOL)isEqualToMemberRemoveActionType:(DBTEAMLOGMemberRemoveActionType *)aMemberRemoveActionType {
  if (self == aMemberRemoveActionType) {
    return YES;
  }
  if (self.tag != aMemberRemoveActionType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGMemberRemoveActionTypeDelete_:
    return [[self tagName] isEqual:[aMemberRemoveActionType tagName]];
  case DBTEAMLOGMemberRemoveActionTypeOffboard:
    return [[self tagName] isEqual:[aMemberRemoveActionType tagName]];
  case DBTEAMLOGMemberRemoveActionTypeLeave:
    return [[self tagName] isEqual:[aMemberRemoveActionType tagName]];
  case DBTEAMLOGMemberRemoveActionTypeOther:
    return [[self tagName] isEqual:[aMemberRemoveActionType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberRemoveActionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberRemoveActionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDelete_]) {
    jsonDict[@".tag"] = @"delete";
  } else if ([valueObj isOffboard]) {
    jsonDict[@".tag"] = @"offboard";
  } else if ([valueObj isLeave]) {
    jsonDict[@".tag"] = @"leave";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberRemoveActionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"delete"]) {
    return [[DBTEAMLOGMemberRemoveActionType alloc] initWithDelete_];
  } else if ([tag isEqualToString:@"offboard"]) {
    return [[DBTEAMLOGMemberRemoveActionType alloc] initWithOffboard];
  } else if ([tag isEqualToString:@"leave"]) {
    return [[DBTEAMLOGMemberRemoveActionType alloc] initWithLeave];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGMemberRemoveActionType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGMemberRemoveActionType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberRequestsChangePolicyDetails.h"
#import "DBTEAMLOGMemberRequestsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberRequestsChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGMemberRequestsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGMemberRequestsPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGMemberRequestsPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberRequestsChangePolicyDetails:other];
}

- (BOOL)isEqualToMemberRequestsChangePolicyDetails:
    (DBTEAMLOGMemberRequestsChangePolicyDetails *)aMemberRequestsChangePolicyDetails {
  if (self == aMemberRequestsChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberRequestsChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberRequestsChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberRequestsChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGMemberRequestsPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGMemberRequestsPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberRequestsChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGMemberRequestsPolicy *dNewValue =
      [DBTEAMLOGMemberRequestsPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGMemberRequestsPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGMemberRequestsPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGMemberRequestsChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberRequestsChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberRequestsChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberRequestsChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberRequestsChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberRequestsChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberRequestsChangePolicyType:other];
}

- (BOOL)isEqualToMemberRequestsChangePolicyType:
    (DBTEAMLOGMemberRequestsChangePolicyType *)aMemberRequestsChangePolicyType {
  if (self == aMemberRequestsChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberRequestsChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberRequestsChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberRequestsChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberRequestsChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberRequestsChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberRequestsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberRequestsPolicy

#pragma mark - Constructors

- (instancetype)initWithAutoAccept {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRequestsPolicyAutoAccept;
  }
  return self;
}

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRequestsPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithRequireApproval {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRequestsPolicyRequireApproval;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRequestsPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAutoAccept {
  return _tag == DBTEAMLOGMemberRequestsPolicyAutoAccept;
}

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGMemberRequestsPolicyDisabled;
}

- (BOOL)isRequireApproval {
  return _tag == DBTEAMLOGMemberRequestsPolicyRequireApproval;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGMemberRequestsPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGMemberRequestsPolicyAutoAccept:
    return @"DBTEAMLOGMemberRequestsPolicyAutoAccept";
  case DBTEAMLOGMemberRequestsPolicyDisabled:
    return @"DBTEAMLOGMemberRequestsPolicyDisabled";
  case DBTEAMLOGMemberRequestsPolicyRequireApproval:
    return @"DBTEAMLOGMemberRequestsPolicyRequireApproval";
  case DBTEAMLOGMemberRequestsPolicyOther:
    return @"DBTEAMLOGMemberRequestsPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberRequestsPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberRequestsPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberRequestsPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGMemberRequestsPolicyAutoAccept:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberRequestsPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberRequestsPolicyRequireApproval:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberRequestsPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberRequestsPolicy:other];
}

- (BOOL)isEqualToMemberRequestsPolicy:(DBTEAMLOGMemberRequestsPolicy *)aMemberRequestsPolicy {
  if (self == aMemberRequestsPolicy) {
    return YES;
  }
  if (self.tag != aMemberRequestsPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGMemberRequestsPolicyAutoAccept:
    return [[self tagName] isEqual:[aMemberRequestsPolicy tagName]];
  case DBTEAMLOGMemberRequestsPolicyDisabled:
    return [[self tagName] isEqual:[aMemberRequestsPolicy tagName]];
  case DBTEAMLOGMemberRequestsPolicyRequireApproval:
    return [[self tagName] isEqual:[aMemberRequestsPolicy tagName]];
  case DBTEAMLOGMemberRequestsPolicyOther:
    return [[self tagName] isEqual:[aMemberRequestsPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberRequestsPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberRequestsPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAutoAccept]) {
    jsonDict[@".tag"] = @"auto_accept";
  } else if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isRequireApproval]) {
    jsonDict[@".tag"] = @"require_approval";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberRequestsPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"auto_accept"]) {
    return [[DBTEAMLOGMemberRequestsPolicy alloc] initWithAutoAccept];
  } else if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGMemberRequestsPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"require_approval"]) {
    return [[DBTEAMLOGMemberRequestsPolicy alloc] initWithRequireApproval];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGMemberRequestsPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGMemberRequestsPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSNumber *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsAddCustomQuotaDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsAddCustomQuotaDetails:
    (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails *)aMemberSpaceLimitsAddCustomQuotaDetails {
  if (self == aMemberSpaceLimitsAddCustomQuotaDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberSpaceLimitsAddCustomQuotaDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = valueObj.dNewValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *dNewValue = valueDict[@"new_value"];

  return [[DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails alloc] initWithDNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsAddCustomQuotaType:other];
}

- (BOOL)isEqualToMemberSpaceLimitsAddCustomQuotaType:
    (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType *)aMemberSpaceLimitsAddCustomQuotaType {
  if (self == aMemberSpaceLimitsAddCustomQuotaType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberSpaceLimitsAddCustomQuotaType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsAddExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsAddExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsAddExceptionDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsAddExceptionDetails:
    (DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)aMemberSpaceLimitsAddExceptionDetails {
  if (self == aMemberSpaceLimitsAddExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberSpaceLimitsAddExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsAddExceptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsAddExceptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsAddExceptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsAddExceptionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsAddExceptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsAddExceptionType:other];
}

- (BOOL)isEqualToMemberSpaceLimitsAddExceptionType:
    (DBTEAMLOGMemberSpaceLimitsAddExceptionType *)aMemberSpaceLimitsAddExceptionType {
  if (self == aMemberSpaceLimitsAddExceptionType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberSpaceLimitsAddExceptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsAddExceptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsAddExceptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsAddExceptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberSpaceLimitsAddExceptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails.h"
#import "DBTEAMLOGSpaceCapsType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGSpaceCapsType *)previousValue
                            dNewValue:(DBTEAMLOGSpaceCapsType *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsChangeCapsTypePolicyDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsChangeCapsTypePolicyDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails *)aMemberSpaceLimitsChangeCapsTypePolicyDetails {
  if (self == aMemberSpaceLimitsChangeCapsTypePolicyDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aMemberSpaceLimitsChangeCapsTypePolicyDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aMemberSpaceLimitsChangeCapsTypePolicyDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGSpaceCapsTypeSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGSpaceCapsTypeSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSpaceCapsType *previousValue = [DBTEAMLOGSpaceCapsTypeSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGSpaceCapsType *dNewValue = [DBTEAMLOGSpaceCapsTypeSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails alloc] initWithPreviousValue:previousValue
                                                                                    dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsChangeCapsTypePolicyType:other];
}

- (BOOL)isEqualToMemberSpaceLimitsChangeCapsTypePolicyType:
    (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType *)aMemberSpaceLimitsChangeCapsTypePolicyType {
  if (self == aMemberSpaceLimitsChangeCapsTypePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberSpaceLimitsChangeCapsTypePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSNumber *)previousValue dNewValue:(NSNumber *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsChangeCustomQuotaDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsChangeCustomQuotaDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails *)aMemberSpaceLimitsChangeCustomQuotaDetails {
  if (self == aMemberSpaceLimitsChangeCustomQuotaDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aMemberSpaceLimitsChangeCustomQuotaDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aMemberSpaceLimitsChangeCustomQuotaDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = valueObj.previousValue;
  jsonDict[@"new_value"] = valueObj.dNewValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *previousValue = valueDict[@"previous_value"];
  NSNumber *dNewValue = valueDict[@"new_value"];

  return [[DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails alloc] initWithPreviousValue:previousValue
                                                                                 dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsChangeCustomQuotaType:other];
}

- (BOOL)isEqualToMemberSpaceLimitsChangeCustomQuotaType:
    (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType *)aMemberSpaceLimitsChangeCustomQuotaType {
  if (self == aMemberSpaceLimitsChangeCustomQuotaType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberSpaceLimitsChangeCustomQuotaType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSNumber *)previousValue dNewValue:(NSNumber *)dNewValue {

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithPreviousValue:nil dNewValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }
  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsChangePolicyDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsChangePolicyDetails:
    (DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)aMemberSpaceLimitsChangePolicyDetails {
  if (self == aMemberSpaceLimitsChangePolicyDetails) {
    return YES;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberSpaceLimitsChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aMemberSpaceLimitsChangePolicyDetails.dNewValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = valueObj.previousValue;
  }
  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = valueObj.dNewValue;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *previousValue = valueDict[@"previous_value"] ?: nil;
  NSNumber *dNewValue = valueDict[@"new_value"] ?: nil;

  return
      [[DBTEAMLOGMemberSpaceLimitsChangePolicyDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsChangePolicyType:other];
}

- (BOOL)isEqualToMemberSpaceLimitsChangePolicyType:
    (DBTEAMLOGMemberSpaceLimitsChangePolicyType *)aMemberSpaceLimitsChangePolicyType {
  if (self == aMemberSpaceLimitsChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberSpaceLimitsChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberSpaceLimitsChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeStatusDetails.h"
#import "DBTEAMLOGSpaceLimitsStatus.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeStatusDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGSpaceLimitsStatus *)previousValue
                            dNewValue:(DBTEAMLOGSpaceLimitsStatus *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsChangeStatusDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsChangeStatusDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)aMemberSpaceLimitsChangeStatusDetails {
  if (self == aMemberSpaceLimitsChangeStatusDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aMemberSpaceLimitsChangeStatusDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aMemberSpaceLimitsChangeStatusDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGSpaceLimitsStatusSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGSpaceLimitsStatusSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSpaceLimitsStatus *previousValue =
      [DBTEAMLOGSpaceLimitsStatusSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGSpaceLimitsStatus *dNewValue = [DBTEAMLOGSpaceLimitsStatusSerializer deserialize:valueDict[@"new_value"]];

  return
      [[DBTEAMLOGMemberSpaceLimitsChangeStatusDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeStatusType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeStatusType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsChangeStatusTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsChangeStatusTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsChangeStatusTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsChangeStatusType:other];
}

- (BOOL)isEqualToMemberSpaceLimitsChangeStatusType:
    (DBTEAMLOGMemberSpaceLimitsChangeStatusType *)aMemberSpaceLimitsChangeStatusType {
  if (self == aMemberSpaceLimitsChangeStatusType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberSpaceLimitsChangeStatusType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeStatusTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsChangeStatusType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsChangeStatusType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberSpaceLimitsChangeStatusType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsRemoveCustomQuotaDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsRemoveCustomQuotaDetails:
    (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails *)aMemberSpaceLimitsRemoveCustomQuotaDetails {
  if (self == aMemberSpaceLimitsRemoveCustomQuotaDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsRemoveCustomQuotaType:other];
}

- (BOOL)isEqualToMemberSpaceLimitsRemoveCustomQuotaType:
    (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType *)aMemberSpaceLimitsRemoveCustomQuotaType {
  if (self == aMemberSpaceLimitsRemoveCustomQuotaType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberSpaceLimitsRemoveCustomQuotaType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsRemoveExceptionDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsRemoveExceptionDetails:
    (DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)aMemberSpaceLimitsRemoveExceptionDetails {
  if (self == aMemberSpaceLimitsRemoveExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveExceptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsRemoveExceptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsRemoveExceptionType:other];
}

- (BOOL)isEqualToMemberSpaceLimitsRemoveExceptionType:
    (DBTEAMLOGMemberSpaceLimitsRemoveExceptionType *)aMemberSpaceLimitsRemoveExceptionType {
  if (self == aMemberSpaceLimitsRemoveExceptionType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberSpaceLimitsRemoveExceptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSpaceLimitsRemoveExceptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSpaceLimitsRemoveExceptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberSpaceLimitsRemoveExceptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberStatus.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberStatus

#pragma mark - Constructors

- (instancetype)initWithNotJoined {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberStatusNotJoined;
  }
  return self;
}

- (instancetype)initWithInvited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberStatusInvited;
  }
  return self;
}

- (instancetype)initWithActive {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberStatusActive;
  }
  return self;
}

- (instancetype)initWithSuspended {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberStatusSuspended;
  }
  return self;
}

- (instancetype)initWithRemoved {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberStatusRemoved;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberStatusOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isNotJoined {
  return _tag == DBTEAMLOGMemberStatusNotJoined;
}

- (BOOL)isInvited {
  return _tag == DBTEAMLOGMemberStatusInvited;
}

- (BOOL)isActive {
  return _tag == DBTEAMLOGMemberStatusActive;
}

- (BOOL)isSuspended {
  return _tag == DBTEAMLOGMemberStatusSuspended;
}

- (BOOL)isRemoved {
  return _tag == DBTEAMLOGMemberStatusRemoved;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGMemberStatusOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGMemberStatusNotJoined:
    return @"DBTEAMLOGMemberStatusNotJoined";
  case DBTEAMLOGMemberStatusInvited:
    return @"DBTEAMLOGMemberStatusInvited";
  case DBTEAMLOGMemberStatusActive:
    return @"DBTEAMLOGMemberStatusActive";
  case DBTEAMLOGMemberStatusSuspended:
    return @"DBTEAMLOGMemberStatusSuspended";
  case DBTEAMLOGMemberStatusRemoved:
    return @"DBTEAMLOGMemberStatusRemoved";
  case DBTEAMLOGMemberStatusOther:
    return @"DBTEAMLOGMemberStatusOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGMemberStatusNotJoined:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberStatusInvited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberStatusActive:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberStatusSuspended:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberStatusRemoved:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberStatusOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberStatus:other];
}

- (BOOL)isEqualToMemberStatus:(DBTEAMLOGMemberStatus *)aMemberStatus {
  if (self == aMemberStatus) {
    return YES;
  }
  if (self.tag != aMemberStatus.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGMemberStatusNotJoined:
    return [[self tagName] isEqual:[aMemberStatus tagName]];
  case DBTEAMLOGMemberStatusInvited:
    return [[self tagName] isEqual:[aMemberStatus tagName]];
  case DBTEAMLOGMemberStatusActive:
    return [[self tagName] isEqual:[aMemberStatus tagName]];
  case DBTEAMLOGMemberStatusSuspended:
    return [[self tagName] isEqual:[aMemberStatus tagName]];
  case DBTEAMLOGMemberStatusRemoved:
    return [[self tagName] isEqual:[aMemberStatus tagName]];
  case DBTEAMLOGMemberStatusOther:
    return [[self tagName] isEqual:[aMemberStatus tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isNotJoined]) {
    jsonDict[@".tag"] = @"not_joined";
  } else if ([valueObj isInvited]) {
    jsonDict[@".tag"] = @"invited";
  } else if ([valueObj isActive]) {
    jsonDict[@".tag"] = @"active";
  } else if ([valueObj isSuspended]) {
    jsonDict[@".tag"] = @"suspended";
  } else if ([valueObj isRemoved]) {
    jsonDict[@".tag"] = @"removed";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"not_joined"]) {
    return [[DBTEAMLOGMemberStatus alloc] initWithNotJoined];
  } else if ([tag isEqualToString:@"invited"]) {
    return [[DBTEAMLOGMemberStatus alloc] initWithInvited];
  } else if ([tag isEqualToString:@"active"]) {
    return [[DBTEAMLOGMemberStatus alloc] initWithActive];
  } else if ([tag isEqualToString:@"suspended"]) {
    return [[DBTEAMLOGMemberStatus alloc] initWithSuspended];
  } else if ([tag isEqualToString:@"removed"]) {
    return [[DBTEAMLOGMemberStatus alloc] initWithRemoved];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGMemberStatus alloc] initWithOther];
  } else {
    return [[DBTEAMLOGMemberStatus alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSuggestDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSuggestDetails

#pragma mark - Constructors

- (instancetype)initWithSuggestedMembers:(NSArray<NSString *> *)suggestedMembers {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators
                        arrayValidator:nil
                              maxItems:nil
                         itemValidator:[DBStoneValidators nonnullValidator:[DBStoneValidators stringValidator:nil
                                                                                                    maxLength:@(255)
                                                                                                      pattern:nil]]]](
      suggestedMembers);

  self = [super init];
  if (self) {
    _suggestedMembers = suggestedMembers;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSuggestDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSuggestDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSuggestDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.suggestedMembers hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSuggestDetails:other];
}

- (BOOL)isEqualToMemberSuggestDetails:(DBTEAMLOGMemberSuggestDetails *)aMemberSuggestDetails {
  if (self == aMemberSuggestDetails) {
    return YES;
  }
  if (![self.suggestedMembers isEqual:aMemberSuggestDetails.suggestedMembers]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSuggestDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSuggestDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"suggested_members"] = [DBArraySerializer serialize:valueObj.suggestedMembers
                                                      withBlock:^id(id elem0) {
                                                        return elem0;
                                                      }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSuggestDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<NSString *> *suggestedMembers = [DBArraySerializer deserialize:valueDict[@"suggested_members"]
                                                               withBlock:^id(id elem0) {
                                                                 return elem0;
                                                               }];

  return [[DBTEAMLOGMemberSuggestDetails alloc] initWithSuggestedMembers:suggestedMembers];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSuggestType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSuggestType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSuggestTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSuggestTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSuggestTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSuggestType:other];
}

- (BOOL)isEqualToMemberSuggestType:(DBTEAMLOGMemberSuggestType *)aMemberSuggestType {
  if (self == aMemberSuggestType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberSuggestType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSuggestTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSuggestType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSuggestType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberSuggestType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSuggestionsChangePolicyDetails.h"
#import "DBTEAMLOGMemberSuggestionsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSuggestionsChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGMemberSuggestionsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGMemberSuggestionsPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGMemberSuggestionsPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSuggestionsChangePolicyDetails:other];
}

- (BOOL)isEqualToMemberSuggestionsChangePolicyDetails:
    (DBTEAMLOGMemberSuggestionsChangePolicyDetails *)aMemberSuggestionsChangePolicyDetails {
  if (self == aMemberSuggestionsChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberSuggestionsChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberSuggestionsChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSuggestionsChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGMemberSuggestionsPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGMemberSuggestionsPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSuggestionsChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGMemberSuggestionsPolicy *dNewValue =
      [DBTEAMLOGMemberSuggestionsPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGMemberSuggestionsPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGMemberSuggestionsPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return
      [[DBTEAMLOGMemberSuggestionsChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSuggestionsChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSuggestionsChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSuggestionsChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSuggestionsChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSuggestionsChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSuggestionsChangePolicyType:other];
}

- (BOOL)isEqualToMemberSuggestionsChangePolicyType:
    (DBTEAMLOGMemberSuggestionsChangePolicyType *)aMemberSuggestionsChangePolicyType {
  if (self == aMemberSuggestionsChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberSuggestionsChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSuggestionsChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSuggestionsChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSuggestionsChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberSuggestionsChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSuggestionsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSuggestionsPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberSuggestionsPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberSuggestionsPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberSuggestionsPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGMemberSuggestionsPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGMemberSuggestionsPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGMemberSuggestionsPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGMemberSuggestionsPolicyDisabled:
    return @"DBTEAMLOGMemberSuggestionsPolicyDisabled";
  case DBTEAMLOGMemberSuggestionsPolicyEnabled:
    return @"DBTEAMLOGMemberSuggestionsPolicyEnabled";
  case DBTEAMLOGMemberSuggestionsPolicyOther:
    return @"DBTEAMLOGMemberSuggestionsPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberSuggestionsPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberSuggestionsPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSuggestionsPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGMemberSuggestionsPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberSuggestionsPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberSuggestionsPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSuggestionsPolicy:other];
}

- (BOOL)isEqualToMemberSuggestionsPolicy:(DBTEAMLOGMemberSuggestionsPolicy *)aMemberSuggestionsPolicy {
  if (self == aMemberSuggestionsPolicy) {
    return YES;
  }
  if (self.tag != aMemberSuggestionsPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGMemberSuggestionsPolicyDisabled:
    return [[self tagName] isEqual:[aMemberSuggestionsPolicy tagName]];
  case DBTEAMLOGMemberSuggestionsPolicyEnabled:
    return [[self tagName] isEqual:[aMemberSuggestionsPolicy tagName]];
  case DBTEAMLOGMemberSuggestionsPolicyOther:
    return [[self tagName] isEqual:[aMemberSuggestionsPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSuggestionsPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberSuggestionsPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberSuggestionsPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGMemberSuggestionsPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGMemberSuggestionsPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGMemberSuggestionsPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGMemberSuggestionsPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberTransferAccountContentsDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberTransferAccountContentsDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberTransferAccountContentsDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberTransferAccountContentsDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberTransferAccountContentsDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberTransferAccountContentsDetails:other];
}

- (BOOL)isEqualToMemberTransferAccountContentsDetails:
    (DBTEAMLOGMemberTransferAccountContentsDetails *)aMemberTransferAccountContentsDetails {
  if (self == aMemberTransferAccountContentsDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberTransferAccountContentsDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberTransferAccountContentsDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberTransferAccountContentsDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberTransferAccountContentsDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberTransferAccountContentsType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberTransferAccountContentsType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMemberTransferAccountContentsTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMemberTransferAccountContentsTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberTransferAccountContentsTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberTransferAccountContentsType:other];
}

- (BOOL)isEqualToMemberTransferAccountContentsType:
    (DBTEAMLOGMemberTransferAccountContentsType *)aMemberTransferAccountContentsType {
  if (self == aMemberTransferAccountContentsType) {
    return YES;
  }
  if (![self.description_ isEqual:aMemberTransferAccountContentsType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberTransferAccountContentsTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMemberTransferAccountContentsType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMemberTransferAccountContentsType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMemberTransferAccountContentsType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails.h"
#import "DBTEAMLOGMicrosoftOfficeAddinPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGMicrosoftOfficeAddinPolicy *)dNewValue
                    previousValue:(DBTEAMLOGMicrosoftOfficeAddinPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGMicrosoftOfficeAddinPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMicrosoftOfficeAddinChangePolicyDetails:other];
}

- (BOOL)isEqualToMicrosoftOfficeAddinChangePolicyDetails:
    (DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)aMicrosoftOfficeAddinChangePolicyDetails {
  if (self == aMicrosoftOfficeAddinChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMicrosoftOfficeAddinChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMicrosoftOfficeAddinChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGMicrosoftOfficeAddinPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGMicrosoftOfficeAddinPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGMicrosoftOfficeAddinPolicy *dNewValue =
      [DBTEAMLOGMicrosoftOfficeAddinPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGMicrosoftOfficeAddinPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGMicrosoftOfficeAddinPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails alloc] initWithDNewValue:dNewValue
                                                                       previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMicrosoftOfficeAddinChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGMicrosoftOfficeAddinChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMicrosoftOfficeAddinChangePolicyType:other];
}

- (BOOL)isEqualToMicrosoftOfficeAddinChangePolicyType:
    (DBTEAMLOGMicrosoftOfficeAddinChangePolicyType *)aMicrosoftOfficeAddinChangePolicyType {
  if (self == aMicrosoftOfficeAddinChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aMicrosoftOfficeAddinChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMicrosoftOfficeAddinChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMicrosoftOfficeAddinChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGMicrosoftOfficeAddinChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMicrosoftOfficeAddinPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGMicrosoftOfficeAddinPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMicrosoftOfficeAddinPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMicrosoftOfficeAddinPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMicrosoftOfficeAddinPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGMicrosoftOfficeAddinPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGMicrosoftOfficeAddinPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGMicrosoftOfficeAddinPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGMicrosoftOfficeAddinPolicyDisabled:
    return @"DBTEAMLOGMicrosoftOfficeAddinPolicyDisabled";
  case DBTEAMLOGMicrosoftOfficeAddinPolicyEnabled:
    return @"DBTEAMLOGMicrosoftOfficeAddinPolicyEnabled";
  case DBTEAMLOGMicrosoftOfficeAddinPolicyOther:
    return @"DBTEAMLOGMicrosoftOfficeAddinPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMicrosoftOfficeAddinPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMicrosoftOfficeAddinPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMicrosoftOfficeAddinPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGMicrosoftOfficeAddinPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMicrosoftOfficeAddinPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMicrosoftOfficeAddinPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMicrosoftOfficeAddinPolicy:other];
}

- (BOOL)isEqualToMicrosoftOfficeAddinPolicy:(DBTEAMLOGMicrosoftOfficeAddinPolicy *)aMicrosoftOfficeAddinPolicy {
  if (self == aMicrosoftOfficeAddinPolicy) {
    return YES;
  }
  if (self.tag != aMicrosoftOfficeAddinPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGMicrosoftOfficeAddinPolicyDisabled:
    return [[self tagName] isEqual:[aMicrosoftOfficeAddinPolicy tagName]];
  case DBTEAMLOGMicrosoftOfficeAddinPolicyEnabled:
    return [[self tagName] isEqual:[aMicrosoftOfficeAddinPolicy tagName]];
  case DBTEAMLOGMicrosoftOfficeAddinPolicyOther:
    return [[self tagName] isEqual:[aMicrosoftOfficeAddinPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMicrosoftOfficeAddinPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMicrosoftOfficeAddinPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMicrosoftOfficeAddinPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGMicrosoftOfficeAddinPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGMicrosoftOfficeAddinPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGMicrosoftOfficeAddinPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGMicrosoftOfficeAddinPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMissingDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMissingDetails

#pragma mark - Constructors

- (instancetype)initWithSourceEventFields:(NSString *)sourceEventFields {

  self = [super init];
  if (self) {
    _sourceEventFields = sourceEventFields;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSourceEventFields:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMissingDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMissingDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMissingDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sourceEventFields != nil) {
    result = prime * result + [self.sourceEventFields hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMissingDetails:other];
}

- (BOOL)isEqualToMissingDetails:(DBTEAMLOGMissingDetails *)aMissingDetails {
  if (self == aMissingDetails) {
    return YES;
  }
  if (self.sourceEventFields) {
    if (![self.sourceEventFields isEqual:aMissingDetails.sourceEventFields]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMissingDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMissingDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sourceEventFields) {
    jsonDict[@"source_event_fields"] = valueObj.sourceEventFields;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMissingDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sourceEventFields = valueDict[@"source_event_fields"] ?: nil;

  return [[DBTEAMLOGMissingDetails alloc] initWithSourceEventFields:sourceEventFields];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"
#import "DBTEAMLOGMobileDeviceSessionLogInfo.h"
#import "DBTEAMLOGMobileSessionLogInfo.h"
#import "DBTEAMMobileClientPlatform.h"

#pragma mark - API Object

@implementation DBTEAMLOGMobileDeviceSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithDeviceName:(NSString *)deviceName
                        clientType:(DBTEAMMobileClientPlatform *)clientType
                         ipAddress:(NSString *)ipAddress
                           created:(NSDate *)created
                           updated:(NSDate *)updated
                       sessionInfo:(DBTEAMLOGMobileSessionLogInfo *)sessionInfo
                     clientVersion:(NSString *)clientVersion
                         osVersion:(NSString *)osVersion
                       lastCarrier:(NSString *)lastCarrier {
  [DBStoneValidators nonnullValidator:nil](deviceName);
  [DBStoneValidators nonnullValidator:nil](clientType);

  self = [super initWithIpAddress:ipAddress created:created updated:updated];
  if (self) {
    _sessionInfo = sessionInfo;
    _deviceName = deviceName;
    _clientType = clientType;
    _clientVersion = clientVersion;
    _osVersion = osVersion;
    _lastCarrier = lastCarrier;
  }
  return self;
}

- (instancetype)initWithDeviceName:(NSString *)deviceName clientType:(DBTEAMMobileClientPlatform *)clientType {
  return [self initWithDeviceName:deviceName
                       clientType:clientType
                        ipAddress:nil
                          created:nil
                          updated:nil
                      sessionInfo:nil
                    clientVersion:nil
                        osVersion:nil
                      lastCarrier:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMobileDeviceSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMobileDeviceSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMobileDeviceSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceName hash];
  result = prime * result + [self.clientType hash];
  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }
  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }
  if (self.clientVersion != nil) {
    result = prime * result + [self.clientVersion hash];
  }
  if (self.osVersion != nil) {
    result = prime * result + [self.osVersion hash];
  }
  if (self.lastCarrier != nil) {
    result = prime * result + [self.lastCarrier hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMobileDeviceSessionLogInfo:other];
}

- (BOOL)isEqualToMobileDeviceSessionLogInfo:(DBTEAMLOGMobileDeviceSessionLogInfo *)aMobileDeviceSessionLogInfo {
  if (self == aMobileDeviceSessionLogInfo) {
    return YES;
  }
  if (![self.deviceName isEqual:aMobileDeviceSessionLogInfo.deviceName]) {
    return NO;
  }
  if (![self.clientType isEqual:aMobileDeviceSessionLogInfo.clientType]) {
    return NO;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aMobileDeviceSessionLogInfo.ipAddress]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:aMobileDeviceSessionLogInfo.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:aMobileDeviceSessionLogInfo.updated]) {
      return NO;
    }
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aMobileDeviceSessionLogInfo.sessionInfo]) {
      return NO;
    }
  }
  if (self.clientVersion) {
    if (![self.clientVersion isEqual:aMobileDeviceSessionLogInfo.clientVersion]) {
      return NO;
    }
  }
  if (self.osVersion) {
    if (![self.osVersion isEqual:aMobileDeviceSessionLogInfo.osVersion]) {
      return NO;
    }
  }
  if (self.lastCarrier) {
    if (![self.lastCarrier isEqual:aMobileDeviceSessionLogInfo.lastCarrier]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMobileDeviceSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMobileDeviceSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_name"] = valueObj.deviceName;
  jsonDict[@"client_type"] = [DBTEAMMobileClientPlatformSerializer serialize:valueObj.clientType];
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGMobileSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }
  if (valueObj.clientVersion) {
    jsonDict[@"client_version"] = valueObj.clientVersion;
  }
  if (valueObj.osVersion) {
    jsonDict[@"os_version"] = valueObj.osVersion;
  }
  if (valueObj.lastCarrier) {
    jsonDict[@"last_carrier"] = valueObj.lastCarrier;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMobileDeviceSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *deviceName = valueDict[@"device_name"];
  DBTEAMMobileClientPlatform *clientType = [DBTEAMMobileClientPlatformSerializer deserialize:valueDict[@"client_type"]];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  DBTEAMLOGMobileSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGMobileSessionLogInfoSerializer deserialize:valueDict[@"session_info"]]
                                 : nil;
  NSString *clientVersion = valueDict[@"client_version"] ?: nil;
  NSString *osVersion = valueDict[@"os_version"] ?: nil;
  NSString *lastCarrier = valueDict[@"last_carrier"] ?: nil;

  return [[DBTEAMLOGMobileDeviceSessionLogInfo alloc] initWithDeviceName:deviceName
                                                              clientType:clientType
                                                               ipAddress:ipAddress
                                                                 created:created
                                                                 updated:updated
                                                             sessionInfo:sessionInfo
                                                           clientVersion:clientVersion
                                                               osVersion:osVersion
                                                             lastCarrier:lastCarrier];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMobileSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGMobileSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId {

  self = [super initWithSessionId:sessionId];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGMobileSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGMobileSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMobileSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionId != nil) {
    result = prime * result + [self.sessionId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMobileSessionLogInfo:other];
}

- (BOOL)isEqualToMobileSessionLogInfo:(DBTEAMLOGMobileSessionLogInfo *)aMobileSessionLogInfo {
  if (self == aMobileSessionLogInfo) {
    return YES;
  }
  if (self.sessionId) {
    if (![self.sessionId isEqual:aMobileSessionLogInfo.sessionId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMobileSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGMobileSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionId) {
    jsonDict[@"session_id"] = valueObj.sessionId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGMobileSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sessionId = valueDict[@"session_id"] ?: nil;

  return [[DBTEAMLOGMobileSessionLogInfo alloc] initWithSessionId:sessionId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNamespaceRelativePathLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGNamespaceRelativePathLogInfo

#pragma mark - Constructors

- (instancetype)initWithNsId:(NSString *)nsId relativePath:(NSString *)relativePath {

  self = [super init];
  if (self) {
    _nsId = nsId;
    _relativePath = relativePath;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithNsId:nil relativePath:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNamespaceRelativePathLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNamespaceRelativePathLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNamespaceRelativePathLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.nsId != nil) {
    result = prime * result + [self.nsId hash];
  }
  if (self.relativePath != nil) {
    result = prime * result + [self.relativePath hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNamespaceRelativePathLogInfo:other];
}

- (BOOL)isEqualToNamespaceRelativePathLogInfo:(DBTEAMLOGNamespaceRelativePathLogInfo *)aNamespaceRelativePathLogInfo {
  if (self == aNamespaceRelativePathLogInfo) {
    return YES;
  }
  if (self.nsId) {
    if (![self.nsId isEqual:aNamespaceRelativePathLogInfo.nsId]) {
      return NO;
    }
  }
  if (self.relativePath) {
    if (![self.relativePath isEqual:aNamespaceRelativePathLogInfo.relativePath]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNamespaceRelativePathLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNamespaceRelativePathLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.nsId) {
    jsonDict[@"ns_id"] = valueObj.nsId;
  }
  if (valueObj.relativePath) {
    jsonDict[@"relative_path"] = valueObj.relativePath;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNamespaceRelativePathLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *nsId = valueDict[@"ns_id"] ?: nil;
  NSString *relativePath = valueDict[@"relative_path"] ?: nil;

  return [[DBTEAMLOGNamespaceRelativePathLogInfo alloc] initWithNsId:nsId relativePath:relativePath];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNetworkControlChangePolicyDetails.h"
#import "DBTEAMLOGNetworkControlPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGNetworkControlChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGNetworkControlPolicy *)dNewValue
                    previousValue:(DBTEAMLOGNetworkControlPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGNetworkControlPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNetworkControlChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNetworkControlChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNetworkControlChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNetworkControlChangePolicyDetails:other];
}

- (BOOL)isEqualToNetworkControlChangePolicyDetails:
    (DBTEAMLOGNetworkControlChangePolicyDetails *)aNetworkControlChangePolicyDetails {
  if (self == aNetworkControlChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aNetworkControlChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aNetworkControlChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNetworkControlChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNetworkControlChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGNetworkControlPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGNetworkControlPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNetworkControlChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGNetworkControlPolicy *dNewValue =
      [DBTEAMLOGNetworkControlPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGNetworkControlPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGNetworkControlPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGNetworkControlChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNetworkControlChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGNetworkControlChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNetworkControlChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNetworkControlChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNetworkControlChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNetworkControlChangePolicyType:other];
}

- (BOOL)isEqualToNetworkControlChangePolicyType:
    (DBTEAMLOGNetworkControlChangePolicyType *)aNetworkControlChangePolicyType {
  if (self == aNetworkControlChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aNetworkControlChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNetworkControlChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNetworkControlChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNetworkControlChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGNetworkControlChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNetworkControlPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGNetworkControlPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGNetworkControlPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGNetworkControlPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGNetworkControlPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGNetworkControlPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGNetworkControlPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGNetworkControlPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGNetworkControlPolicyDisabled:
    return @"DBTEAMLOGNetworkControlPolicyDisabled";
  case DBTEAMLOGNetworkControlPolicyEnabled:
    return @"DBTEAMLOGNetworkControlPolicyEnabled";
  case DBTEAMLOGNetworkControlPolicyOther:
    return @"DBTEAMLOGNetworkControlPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNetworkControlPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNetworkControlPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNetworkControlPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGNetworkControlPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGNetworkControlPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGNetworkControlPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNetworkControlPolicy:other];
}

- (BOOL)isEqualToNetworkControlPolicy:(DBTEAMLOGNetworkControlPolicy *)aNetworkControlPolicy {
  if (self == aNetworkControlPolicy) {
    return YES;
  }
  if (self.tag != aNetworkControlPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGNetworkControlPolicyDisabled:
    return [[self tagName] isEqual:[aNetworkControlPolicy tagName]];
  case DBTEAMLOGNetworkControlPolicyEnabled:
    return [[self tagName] isEqual:[aNetworkControlPolicy tagName]];
  case DBTEAMLOGNetworkControlPolicyOther:
    return [[self tagName] isEqual:[aNetworkControlPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNetworkControlPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNetworkControlPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNetworkControlPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGNetworkControlPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGNetworkControlPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGNetworkControlPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGNetworkControlPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNonTeamMemberLogInfo.h"
#import "DBTEAMLOGTeamMemberLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGUserLogInfo

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId displayName:(NSString *)displayName email:(NSString *)email {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:nil]](displayName);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](email);

  self = [super init];
  if (self) {
    _accountId = accountId;
    _displayName = displayName;
    _email = email;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAccountId:nil displayName:nil email:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGUserLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGUserLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGUserLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.accountId != nil) {
    result = prime * result + [self.accountId hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }
  if (self.email != nil) {
    result = prime * result + [self.email hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserLogInfo:other];
}

- (BOOL)isEqualToUserLogInfo:(DBTEAMLOGUserLogInfo *)anUserLogInfo {
  if (self == anUserLogInfo) {
    return YES;
  }
  if (self.accountId) {
    if (![self.accountId isEqual:anUserLogInfo.accountId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:anUserLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.email) {
    if (![self.email isEqual:anUserLogInfo.email]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGUserLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGUserLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.accountId) {
    jsonDict[@"account_id"] = valueObj.accountId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.email) {
    jsonDict[@"email"] = valueObj.email;
  }

  if ([valueObj isKindOfClass:[DBTEAMLOGTeamMemberLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGTeamMemberLogInfoSerializer serialize:(DBTEAMLOGTeamMemberLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"teamMember";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGNonTeamMemberLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGNonTeamMemberLogInfoSerializer serialize:(DBTEAMLOGNonTeamMemberLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"nonTeamMember";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGUserLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"team_member"]) {
    return [DBTEAMLOGTeamMemberLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"non_team_member"]) {
    return [DBTEAMLOGNonTeamMemberLogInfoSerializer deserialize:valueDict];
  }

  NSString *accountId = valueDict[@"account_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *email = valueDict[@"email"] ?: nil;

  return [[DBTEAMLOGUserLogInfo alloc] initWithAccountId:accountId displayName:displayName email:email];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNonTeamMemberLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGNonTeamMemberLogInfo

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId displayName:(NSString *)displayName email:(NSString *)email {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:nil]](displayName);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](email);

  self = [super initWithAccountId:accountId displayName:displayName email:email];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAccountId:nil displayName:nil email:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNonTeamMemberLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNonTeamMemberLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNonTeamMemberLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.accountId != nil) {
    result = prime * result + [self.accountId hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }
  if (self.email != nil) {
    result = prime * result + [self.email hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNonTeamMemberLogInfo:other];
}

- (BOOL)isEqualToNonTeamMemberLogInfo:(DBTEAMLOGNonTeamMemberLogInfo *)aNonTeamMemberLogInfo {
  if (self == aNonTeamMemberLogInfo) {
    return YES;
  }
  if (self.accountId) {
    if (![self.accountId isEqual:aNonTeamMemberLogInfo.accountId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aNonTeamMemberLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.email) {
    if (![self.email isEqual:aNonTeamMemberLogInfo.email]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNonTeamMemberLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNonTeamMemberLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.accountId) {
    jsonDict[@"account_id"] = valueObj.accountId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.email) {
    jsonDict[@"email"] = valueObj.email;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNonTeamMemberLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *accountId = valueDict[@"account_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *email = valueDict[@"email"] ?: nil;

  return [[DBTEAMLOGNonTeamMemberLogInfo alloc] initWithAccountId:accountId displayName:displayName email:email];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteAclInviteOnlyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteAclInviteOnlyDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNoteAclInviteOnlyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNoteAclInviteOnlyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteAclInviteOnlyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteAclInviteOnlyDetails:other];
}

- (BOOL)isEqualToNoteAclInviteOnlyDetails:(DBTEAMLOGNoteAclInviteOnlyDetails *)aNoteAclInviteOnlyDetails {
  if (self == aNoteAclInviteOnlyDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteAclInviteOnlyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNoteAclInviteOnlyDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNoteAclInviteOnlyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGNoteAclInviteOnlyDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteAclInviteOnlyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteAclInviteOnlyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNoteAclInviteOnlyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNoteAclInviteOnlyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteAclInviteOnlyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteAclInviteOnlyType:other];
}

- (BOOL)isEqualToNoteAclInviteOnlyType:(DBTEAMLOGNoteAclInviteOnlyType *)aNoteAclInviteOnlyType {
  if (self == aNoteAclInviteOnlyType) {
    return YES;
  }
  if (![self.description_ isEqual:aNoteAclInviteOnlyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteAclInviteOnlyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNoteAclInviteOnlyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNoteAclInviteOnlyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGNoteAclInviteOnlyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteAclLinkDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteAclLinkDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNoteAclLinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNoteAclLinkDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteAclLinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteAclLinkDetails:other];
}

- (BOOL)isEqualToNoteAclLinkDetails:(DBTEAMLOGNoteAclLinkDetails *)aNoteAclLinkDetails {
  if (self == aNoteAclLinkDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteAclLinkDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNoteAclLinkDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNoteAclLinkDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGNoteAclLinkDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteAclLinkType.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteAclLinkType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNoteAclLinkTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNoteAclLinkTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteAclLinkTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteAclLinkType:other];
}

- (BOOL)isEqualToNoteAclLinkType:(DBTEAMLOGNoteAclLinkType *)aNoteAclLinkType {
  if (self == aNoteAclLinkType) {
    return YES;
  }
  if (![self.description_ isEqual:aNoteAclLinkType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteAclLinkTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNoteAclLinkType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNoteAclLinkType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGNoteAclLinkType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteAclTeamLinkDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteAclTeamLinkDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNoteAclTeamLinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNoteAclTeamLinkDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteAclTeamLinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteAclTeamLinkDetails:other];
}

- (BOOL)isEqualToNoteAclTeamLinkDetails:(DBTEAMLOGNoteAclTeamLinkDetails *)aNoteAclTeamLinkDetails {
  if (self == aNoteAclTeamLinkDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteAclTeamLinkDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNoteAclTeamLinkDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNoteAclTeamLinkDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGNoteAclTeamLinkDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteAclTeamLinkType.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteAclTeamLinkType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNoteAclTeamLinkTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNoteAclTeamLinkTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteAclTeamLinkTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteAclTeamLinkType:other];
}

- (BOOL)isEqualToNoteAclTeamLinkType:(DBTEAMLOGNoteAclTeamLinkType *)aNoteAclTeamLinkType {
  if (self == aNoteAclTeamLinkType) {
    return YES;
  }
  if (![self.description_ isEqual:aNoteAclTeamLinkType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteAclTeamLinkTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNoteAclTeamLinkType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNoteAclTeamLinkType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGNoteAclTeamLinkType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteShareReceiveDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteShareReceiveDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNoteShareReceiveDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNoteShareReceiveDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteShareReceiveDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteShareReceiveDetails:other];
}

- (BOOL)isEqualToNoteShareReceiveDetails:(DBTEAMLOGNoteShareReceiveDetails *)aNoteShareReceiveDetails {
  if (self == aNoteShareReceiveDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteShareReceiveDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNoteShareReceiveDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNoteShareReceiveDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGNoteShareReceiveDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteShareReceiveType.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteShareReceiveType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNoteShareReceiveTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNoteShareReceiveTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteShareReceiveTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteShareReceiveType:other];
}

- (BOOL)isEqualToNoteShareReceiveType:(DBTEAMLOGNoteShareReceiveType *)aNoteShareReceiveType {
  if (self == aNoteShareReceiveType) {
    return YES;
  }
  if (![self.description_ isEqual:aNoteShareReceiveType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteShareReceiveTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNoteShareReceiveType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNoteShareReceiveType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGNoteShareReceiveType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteSharedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteSharedDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNoteSharedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNoteSharedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteSharedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteSharedDetails:other];
}

- (BOOL)isEqualToNoteSharedDetails:(DBTEAMLOGNoteSharedDetails *)aNoteSharedDetails {
  if (self == aNoteSharedDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteSharedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNoteSharedDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNoteSharedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGNoteSharedDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteSharedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteSharedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGNoteSharedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGNoteSharedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteSharedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteSharedType:other];
}

- (BOOL)isEqualToNoteSharedType:(DBTEAMLOGNoteSharedType *)aNoteSharedType {
  if (self == aNoteSharedType) {
    return YES;
  }
  if (![self.description_ isEqual:aNoteSharedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteSharedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGNoteSharedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGNoteSharedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGNoteSharedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGOpenNoteSharedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGOpenNoteSharedDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGOpenNoteSharedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGOpenNoteSharedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGOpenNoteSharedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToOpenNoteSharedDetails:other];
}

- (BOOL)isEqualToOpenNoteSharedDetails:(DBTEAMLOGOpenNoteSharedDetails *)anOpenNoteSharedDetails {
  if (self == anOpenNoteSharedDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGOpenNoteSharedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGOpenNoteSharedDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGOpenNoteSharedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGOpenNoteSharedDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGOpenNoteSharedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGOpenNoteSharedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGOpenNoteSharedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGOpenNoteSharedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGOpenNoteSharedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToOpenNoteSharedType:other];
}

- (BOOL)isEqualToOpenNoteSharedType:(DBTEAMLOGOpenNoteSharedType *)anOpenNoteSharedType {
  if (self == anOpenNoteSharedType) {
    return YES;
  }
  if (![self.description_ isEqual:anOpenNoteSharedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGOpenNoteSharedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGOpenNoteSharedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGOpenNoteSharedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGOpenNoteSharedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccessMethodLogInfo.h"
#import "DBTEAMLOGGeoLocationLogInfo.h"
#import "DBTEAMLOGOriginLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGOriginLogInfo

#pragma mark - Constructors

- (instancetype)initWithAccessMethod:(DBTEAMLOGAccessMethodLogInfo *)accessMethod
                         geoLocation:(DBTEAMLOGGeoLocationLogInfo *)geoLocation {
  [DBStoneValidators nonnullValidator:nil](accessMethod);

  self = [super init];
  if (self) {
    _geoLocation = geoLocation;
    _accessMethod = accessMethod;
  }
  return self;
}

- (instancetype)initWithAccessMethod:(DBTEAMLOGAccessMethodLogInfo *)accessMethod {
  return [self initWithAccessMethod:accessMethod geoLocation:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGOriginLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGOriginLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGOriginLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.accessMethod hash];
  if (self.geoLocation != nil) {
    result = prime * result + [self.geoLocation hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToOriginLogInfo:other];
}

- (BOOL)isEqualToOriginLogInfo:(DBTEAMLOGOriginLogInfo *)anOriginLogInfo {
  if (self == anOriginLogInfo) {
    return YES;
  }
  if (![self.accessMethod isEqual:anOriginLogInfo.accessMethod]) {
    return NO;
  }
  if (self.geoLocation) {
    if (![self.geoLocation isEqual:anOriginLogInfo.geoLocation]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGOriginLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGOriginLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_method"] = [DBTEAMLOGAccessMethodLogInfoSerializer serialize:valueObj.accessMethod];
  if (valueObj.geoLocation) {
    jsonDict[@"geo_location"] = [DBTEAMLOGGeoLocationLogInfoSerializer serialize:valueObj.geoLocation];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGOriginLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAccessMethodLogInfo *accessMethod =
      [DBTEAMLOGAccessMethodLogInfoSerializer deserialize:valueDict[@"access_method"]];
  DBTEAMLOGGeoLocationLogInfo *geoLocation =
      valueDict[@"geo_location"] ? [DBTEAMLOGGeoLocationLogInfoSerializer deserialize:valueDict[@"geo_location"]] : nil;

  return [[DBTEAMLOGOriginLogInfo alloc] initWithAccessMethod:accessMethod geoLocation:geoLocation];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperAccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperAccessType

#pragma mark - Constructors

- (instancetype)initWithViewer {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperAccessTypeViewer;
  }
  return self;
}

- (instancetype)initWithCommenter {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperAccessTypeCommenter;
  }
  return self;
}

- (instancetype)initWithEditor {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperAccessTypeEditor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperAccessTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isViewer {
  return _tag == DBTEAMLOGPaperAccessTypeViewer;
}

- (BOOL)isCommenter {
  return _tag == DBTEAMLOGPaperAccessTypeCommenter;
}

- (BOOL)isEditor {
  return _tag == DBTEAMLOGPaperAccessTypeEditor;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGPaperAccessTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGPaperAccessTypeViewer:
    return @"DBTEAMLOGPaperAccessTypeViewer";
  case DBTEAMLOGPaperAccessTypeCommenter:
    return @"DBTEAMLOGPaperAccessTypeCommenter";
  case DBTEAMLOGPaperAccessTypeEditor:
    return @"DBTEAMLOGPaperAccessTypeEditor";
  case DBTEAMLOGPaperAccessTypeOther:
    return @"DBTEAMLOGPaperAccessTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperAccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperAccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperAccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGPaperAccessTypeViewer:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperAccessTypeCommenter:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperAccessTypeEditor:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperAccessTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperAccessType:other];
}

- (BOOL)isEqualToPaperAccessType:(DBTEAMLOGPaperAccessType *)aPaperAccessType {
  if (self == aPaperAccessType) {
    return YES;
  }
  if (self.tag != aPaperAccessType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGPaperAccessTypeViewer:
    return [[self tagName] isEqual:[aPaperAccessType tagName]];
  case DBTEAMLOGPaperAccessTypeCommenter:
    return [[self tagName] isEqual:[aPaperAccessType tagName]];
  case DBTEAMLOGPaperAccessTypeEditor:
    return [[self tagName] isEqual:[aPaperAccessType tagName]];
  case DBTEAMLOGPaperAccessTypeOther:
    return [[self tagName] isEqual:[aPaperAccessType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperAccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperAccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isViewer]) {
    jsonDict[@".tag"] = @"viewer";
  } else if ([valueObj isCommenter]) {
    jsonDict[@".tag"] = @"commenter";
  } else if ([valueObj isEditor]) {
    jsonDict[@".tag"] = @"editor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperAccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"viewer"]) {
    return [[DBTEAMLOGPaperAccessType alloc] initWithViewer];
  } else if ([tag isEqualToString:@"commenter"]) {
    return [[DBTEAMLOGPaperAccessType alloc] initWithCommenter];
  } else if ([tag isEqualToString:@"editor"]) {
    return [[DBTEAMLOGPaperAccessType alloc] initWithEditor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGPaperAccessType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGPaperAccessType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperAdminExportStartDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperAdminExportStartDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperAdminExportStartDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperAdminExportStartDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperAdminExportStartDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperAdminExportStartDetails:other];
}

- (BOOL)isEqualToPaperAdminExportStartDetails:(DBTEAMLOGPaperAdminExportStartDetails *)aPaperAdminExportStartDetails {
  if (self == aPaperAdminExportStartDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperAdminExportStartDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperAdminExportStartDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperAdminExportStartDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPaperAdminExportStartDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperAdminExportStartType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperAdminExportStartType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperAdminExportStartTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperAdminExportStartTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperAdminExportStartTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperAdminExportStartType:other];
}

- (BOOL)isEqualToPaperAdminExportStartType:(DBTEAMLOGPaperAdminExportStartType *)aPaperAdminExportStartType {
  if (self == aPaperAdminExportStartType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperAdminExportStartType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperAdminExportStartTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperAdminExportStartType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperAdminExportStartType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperAdminExportStartType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperChangeDeploymentPolicyDetails.h"
#import "DBTEAMPOLICIESPaperDeploymentPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangeDeploymentPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESPaperDeploymentPolicy *)dNewValue
                    previousValue:(DBTEAMPOLICIESPaperDeploymentPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESPaperDeploymentPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangeDeploymentPolicyDetails:other];
}

- (BOOL)isEqualToPaperChangeDeploymentPolicyDetails:
    (DBTEAMLOGPaperChangeDeploymentPolicyDetails *)aPaperChangeDeploymentPolicyDetails {
  if (self == aPaperChangeDeploymentPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aPaperChangeDeploymentPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aPaperChangeDeploymentPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperChangeDeploymentPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMPOLICIESPaperDeploymentPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMPOLICIESPaperDeploymentPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperChangeDeploymentPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMPOLICIESPaperDeploymentPolicy *dNewValue =
      [DBTEAMPOLICIESPaperDeploymentPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMPOLICIESPaperDeploymentPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMPOLICIESPaperDeploymentPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGPaperChangeDeploymentPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperChangeDeploymentPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangeDeploymentPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangeDeploymentPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperChangeDeploymentPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangeDeploymentPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangeDeploymentPolicyType:other];
}

- (BOOL)isEqualToPaperChangeDeploymentPolicyType:
    (DBTEAMLOGPaperChangeDeploymentPolicyType *)aPaperChangeDeploymentPolicyType {
  if (self == aPaperChangeDeploymentPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperChangeDeploymentPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangeDeploymentPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperChangeDeploymentPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperChangeDeploymentPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperChangeDeploymentPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperChangeMemberLinkPolicyDetails.h"
#import "DBTEAMLOGPaperMemberPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangeMemberLinkPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGPaperMemberPolicy *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangeMemberLinkPolicyDetails:other];
}

- (BOOL)isEqualToPaperChangeMemberLinkPolicyDetails:
    (DBTEAMLOGPaperChangeMemberLinkPolicyDetails *)aPaperChangeMemberLinkPolicyDetails {
  if (self == aPaperChangeMemberLinkPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aPaperChangeMemberLinkPolicyDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperChangeMemberLinkPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGPaperMemberPolicySerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperChangeMemberLinkPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGPaperMemberPolicy *dNewValue = [DBTEAMLOGPaperMemberPolicySerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGPaperChangeMemberLinkPolicyDetails alloc] initWithDNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperChangeMemberLinkPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangeMemberLinkPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangeMemberLinkPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperChangeMemberLinkPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangeMemberLinkPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangeMemberLinkPolicyType:other];
}

- (BOOL)isEqualToPaperChangeMemberLinkPolicyType:
    (DBTEAMLOGPaperChangeMemberLinkPolicyType *)aPaperChangeMemberLinkPolicyType {
  if (self == aPaperChangeMemberLinkPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperChangeMemberLinkPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangeMemberLinkPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperChangeMemberLinkPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperChangeMemberLinkPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperChangeMemberLinkPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperChangeMemberPolicyDetails.h"
#import "DBTEAMLOGPaperMemberPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangeMemberPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGPaperMemberPolicy *)dNewValue
                    previousValue:(DBTEAMLOGPaperMemberPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGPaperMemberPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangeMemberPolicyDetails:other];
}

- (BOOL)isEqualToPaperChangeMemberPolicyDetails:
    (DBTEAMLOGPaperChangeMemberPolicyDetails *)aPaperChangeMemberPolicyDetails {
  if (self == aPaperChangeMemberPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aPaperChangeMemberPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aPaperChangeMemberPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperChangeMemberPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGPaperMemberPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGPaperMemberPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperChangeMemberPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGPaperMemberPolicy *dNewValue = [DBTEAMLOGPaperMemberPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGPaperMemberPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGPaperMemberPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGPaperChangeMemberPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperChangeMemberPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangeMemberPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangeMemberPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperChangeMemberPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangeMemberPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangeMemberPolicyType:other];
}

- (BOOL)isEqualToPaperChangeMemberPolicyType:(DBTEAMLOGPaperChangeMemberPolicyType *)aPaperChangeMemberPolicyType {
  if (self == aPaperChangeMemberPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperChangeMemberPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangeMemberPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperChangeMemberPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperChangeMemberPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperChangeMemberPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperChangePolicyDetails.h"
#import "DBTEAMPOLICIESPaperEnabledPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESPaperEnabledPolicy *)dNewValue
                    previousValue:(DBTEAMPOLICIESPaperEnabledPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESPaperEnabledPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangePolicyDetails:other];
}

- (BOOL)isEqualToPaperChangePolicyDetails:(DBTEAMLOGPaperChangePolicyDetails *)aPaperChangePolicyDetails {
  if (self == aPaperChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aPaperChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aPaperChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMPOLICIESPaperEnabledPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMPOLICIESPaperEnabledPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMPOLICIESPaperEnabledPolicy *dNewValue =
      [DBTEAMPOLICIESPaperEnabledPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMPOLICIESPaperEnabledPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMPOLICIESPaperEnabledPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGPaperChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangePolicyType:other];
}

- (BOOL)isEqualToPaperChangePolicyType:(DBTEAMLOGPaperChangePolicyType *)aPaperChangePolicyType {
  if (self == aPaperChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentAddMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentAddMemberDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentAddMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentAddMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentAddMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentAddMemberDetails:other];
}

- (BOOL)isEqualToPaperContentAddMemberDetails:(DBTEAMLOGPaperContentAddMemberDetails *)aPaperContentAddMemberDetails {
  if (self == aPaperContentAddMemberDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentAddMemberDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentAddMemberDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentAddMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentAddMemberDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentAddMemberDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentAddMemberType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentAddMemberType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentAddMemberTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentAddMemberTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentAddMemberTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentAddMemberType:other];
}

- (BOOL)isEqualToPaperContentAddMemberType:(DBTEAMLOGPaperContentAddMemberType *)aPaperContentAddMemberType {
  if (self == aPaperContentAddMemberType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperContentAddMemberType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentAddMemberTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentAddMemberType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentAddMemberType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperContentAddMemberType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentAddToFolderDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentAddToFolderDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                 targetAssetIndex:(NSNumber *)targetAssetIndex
                 parentAssetIndex:(NSNumber *)parentAssetIndex {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](parentAssetIndex);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _targetAssetIndex = targetAssetIndex;
    _parentAssetIndex = parentAssetIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentAddToFolderDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentAddToFolderDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentAddToFolderDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.parentAssetIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentAddToFolderDetails:other];
}

- (BOOL)isEqualToPaperContentAddToFolderDetails:
    (DBTEAMLOGPaperContentAddToFolderDetails *)aPaperContentAddToFolderDetails {
  if (self == aPaperContentAddToFolderDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentAddToFolderDetails.eventUuid]) {
    return NO;
  }
  if (![self.targetAssetIndex isEqual:aPaperContentAddToFolderDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.parentAssetIndex isEqual:aPaperContentAddToFolderDetails.parentAssetIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentAddToFolderDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentAddToFolderDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"parent_asset_index"] = valueObj.parentAssetIndex;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentAddToFolderDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSNumber *parentAssetIndex = valueDict[@"parent_asset_index"];

  return [[DBTEAMLOGPaperContentAddToFolderDetails alloc] initWithEventUuid:eventUuid
                                                           targetAssetIndex:targetAssetIndex
                                                           parentAssetIndex:parentAssetIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentAddToFolderType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentAddToFolderType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentAddToFolderTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentAddToFolderTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentAddToFolderTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentAddToFolderType:other];
}

- (BOOL)isEqualToPaperContentAddToFolderType:(DBTEAMLOGPaperContentAddToFolderType *)aPaperContentAddToFolderType {
  if (self == aPaperContentAddToFolderType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperContentAddToFolderType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentAddToFolderTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentAddToFolderType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentAddToFolderType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperContentAddToFolderType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentArchiveDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentArchiveDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentArchiveDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentArchiveDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentArchiveDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentArchiveDetails:other];
}

- (BOOL)isEqualToPaperContentArchiveDetails:(DBTEAMLOGPaperContentArchiveDetails *)aPaperContentArchiveDetails {
  if (self == aPaperContentArchiveDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentArchiveDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentArchiveDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentArchiveDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentArchiveDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentArchiveDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentArchiveType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentArchiveType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentArchiveTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentArchiveTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentArchiveTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentArchiveType:other];
}

- (BOOL)isEqualToPaperContentArchiveType:(DBTEAMLOGPaperContentArchiveType *)aPaperContentArchiveType {
  if (self == aPaperContentArchiveType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperContentArchiveType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentArchiveTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentArchiveType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentArchiveType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperContentArchiveType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentCreateDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentCreateDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentCreateDetails:other];
}

- (BOOL)isEqualToPaperContentCreateDetails:(DBTEAMLOGPaperContentCreateDetails *)aPaperContentCreateDetails {
  if (self == aPaperContentCreateDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentCreateDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentCreateDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentCreateDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentCreateDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentCreateType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentCreateType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentCreateTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentCreateTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentCreateTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentCreateType:other];
}

- (BOOL)isEqualToPaperContentCreateType:(DBTEAMLOGPaperContentCreateType *)aPaperContentCreateType {
  if (self == aPaperContentCreateType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperContentCreateType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentCreateTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentCreateType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentCreateType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperContentCreateType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentPermanentlyDeleteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentPermanentlyDeleteDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentPermanentlyDeleteDetails:other];
}

- (BOOL)isEqualToPaperContentPermanentlyDeleteDetails:
    (DBTEAMLOGPaperContentPermanentlyDeleteDetails *)aPaperContentPermanentlyDeleteDetails {
  if (self == aPaperContentPermanentlyDeleteDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentPermanentlyDeleteDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentPermanentlyDeleteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentPermanentlyDeleteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentPermanentlyDeleteDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentPermanentlyDeleteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentPermanentlyDeleteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentPermanentlyDeleteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentPermanentlyDeleteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentPermanentlyDeleteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentPermanentlyDeleteType:other];
}

- (BOOL)isEqualToPaperContentPermanentlyDeleteType:
    (DBTEAMLOGPaperContentPermanentlyDeleteType *)aPaperContentPermanentlyDeleteType {
  if (self == aPaperContentPermanentlyDeleteType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperContentPermanentlyDeleteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentPermanentlyDeleteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentPermanentlyDeleteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentPermanentlyDeleteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperContentPermanentlyDeleteType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRemoveFromFolderDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRemoveFromFolderDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                 targetAssetIndex:(NSNumber *)targetAssetIndex
                 parentAssetIndex:(NSNumber *)parentAssetIndex {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](parentAssetIndex);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _targetAssetIndex = targetAssetIndex;
    _parentAssetIndex = parentAssetIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.parentAssetIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRemoveFromFolderDetails:other];
}

- (BOOL)isEqualToPaperContentRemoveFromFolderDetails:
    (DBTEAMLOGPaperContentRemoveFromFolderDetails *)aPaperContentRemoveFromFolderDetails {
  if (self == aPaperContentRemoveFromFolderDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentRemoveFromFolderDetails.eventUuid]) {
    return NO;
  }
  if (![self.targetAssetIndex isEqual:aPaperContentRemoveFromFolderDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.parentAssetIndex isEqual:aPaperContentRemoveFromFolderDetails.parentAssetIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentRemoveFromFolderDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"parent_asset_index"] = valueObj.parentAssetIndex;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentRemoveFromFolderDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSNumber *parentAssetIndex = valueDict[@"parent_asset_index"];

  return [[DBTEAMLOGPaperContentRemoveFromFolderDetails alloc] initWithEventUuid:eventUuid
                                                                targetAssetIndex:targetAssetIndex
                                                                parentAssetIndex:parentAssetIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRemoveFromFolderType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRemoveFromFolderType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRemoveFromFolderTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentRemoveFromFolderTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRemoveFromFolderTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRemoveFromFolderType:other];
}

- (BOOL)isEqualToPaperContentRemoveFromFolderType:
    (DBTEAMLOGPaperContentRemoveFromFolderType *)aPaperContentRemoveFromFolderType {
  if (self == aPaperContentRemoveFromFolderType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperContentRemoveFromFolderType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRemoveFromFolderTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentRemoveFromFolderType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentRemoveFromFolderType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperContentRemoveFromFolderType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRemoveMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRemoveMemberDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRemoveMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentRemoveMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRemoveMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRemoveMemberDetails:other];
}

- (BOOL)isEqualToPaperContentRemoveMemberDetails:
    (DBTEAMLOGPaperContentRemoveMemberDetails *)aPaperContentRemoveMemberDetails {
  if (self == aPaperContentRemoveMemberDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentRemoveMemberDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRemoveMemberDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentRemoveMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentRemoveMemberDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentRemoveMemberDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRemoveMemberType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRemoveMemberType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRemoveMemberTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentRemoveMemberTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRemoveMemberTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRemoveMemberType:other];
}

- (BOOL)isEqualToPaperContentRemoveMemberType:(DBTEAMLOGPaperContentRemoveMemberType *)aPaperContentRemoveMemberType {
  if (self == aPaperContentRemoveMemberType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperContentRemoveMemberType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRemoveMemberTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentRemoveMemberType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentRemoveMemberType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperContentRemoveMemberType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRenameDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRenameDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRenameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentRenameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRenameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRenameDetails:other];
}

- (BOOL)isEqualToPaperContentRenameDetails:(DBTEAMLOGPaperContentRenameDetails *)aPaperContentRenameDetails {
  if (self == aPaperContentRenameDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentRenameDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRenameDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentRenameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentRenameDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentRenameDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRenameType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRenameType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRenameTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentRenameTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRenameTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRenameType:other];
}

- (BOOL)isEqualToPaperContentRenameType:(DBTEAMLOGPaperContentRenameType *)aPaperContentRenameType {
  if (self == aPaperContentRenameType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperContentRenameType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRenameTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentRenameType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentRenameType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperContentRenameType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRestoreDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRestoreDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRestoreDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentRestoreDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRestoreDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRestoreDetails:other];
}

- (BOOL)isEqualToPaperContentRestoreDetails:(DBTEAMLOGPaperContentRestoreDetails *)aPaperContentRestoreDetails {
  if (self == aPaperContentRestoreDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentRestoreDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRestoreDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentRestoreDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentRestoreDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentRestoreDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRestoreType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRestoreType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRestoreTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperContentRestoreTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRestoreTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRestoreType:other];
}

- (BOOL)isEqualToPaperContentRestoreType:(DBTEAMLOGPaperContentRestoreType *)aPaperContentRestoreType {
  if (self == aPaperContentRestoreType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperContentRestoreType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRestoreTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperContentRestoreType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperContentRestoreType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperContentRestoreType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocAddCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocAddCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocAddCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocAddCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocAddCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocAddCommentDetails:other];
}

- (BOOL)isEqualToPaperDocAddCommentDetails:(DBTEAMLOGPaperDocAddCommentDetails *)aPaperDocAddCommentDetails {
  if (self == aPaperDocAddCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocAddCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aPaperDocAddCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocAddCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocAddCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocAddCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGPaperDocAddCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocAddCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocAddCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocAddCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocAddCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocAddCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocAddCommentType:other];
}

- (BOOL)isEqualToPaperDocAddCommentType:(DBTEAMLOGPaperDocAddCommentType *)aPaperDocAddCommentType {
  if (self == aPaperDocAddCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocAddCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocAddCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocAddCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocAddCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocAddCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperAccessType.h"
#import "DBTEAMLOGPaperDocChangeMemberRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocChangeMemberRoleDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid accessType:(DBTEAMLOGPaperAccessType *)accessType {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](accessType);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _accessType = accessType;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.accessType hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocChangeMemberRoleDetails:other];
}

- (BOOL)isEqualToPaperDocChangeMemberRoleDetails:
    (DBTEAMLOGPaperDocChangeMemberRoleDetails *)aPaperDocChangeMemberRoleDetails {
  if (self == aPaperDocChangeMemberRoleDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocChangeMemberRoleDetails.eventUuid]) {
    return NO;
  }
  if (![self.accessType isEqual:aPaperDocChangeMemberRoleDetails.accessType]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocChangeMemberRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"access_type"] = [DBTEAMLOGPaperAccessTypeSerializer serialize:valueObj.accessType];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocChangeMemberRoleDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  DBTEAMLOGPaperAccessType *accessType = [DBTEAMLOGPaperAccessTypeSerializer deserialize:valueDict[@"access_type"]];

  return [[DBTEAMLOGPaperDocChangeMemberRoleDetails alloc] initWithEventUuid:eventUuid accessType:accessType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocChangeMemberRoleType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocChangeMemberRoleType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocChangeMemberRoleTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocChangeMemberRoleTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocChangeMemberRoleTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocChangeMemberRoleType:other];
}

- (BOOL)isEqualToPaperDocChangeMemberRoleType:(DBTEAMLOGPaperDocChangeMemberRoleType *)aPaperDocChangeMemberRoleType {
  if (self == aPaperDocChangeMemberRoleType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocChangeMemberRoleType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocChangeMemberRoleTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocChangeMemberRoleType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocChangeMemberRoleType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocChangeMemberRoleType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocChangeSharingPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocChangeSharingPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
              publicSharingPolicy:(NSString *)publicSharingPolicy
                teamSharingPolicy:(NSString *)teamSharingPolicy {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _publicSharingPolicy = publicSharingPolicy;
    _teamSharingPolicy = teamSharingPolicy;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid publicSharingPolicy:nil teamSharingPolicy:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.publicSharingPolicy != nil) {
    result = prime * result + [self.publicSharingPolicy hash];
  }
  if (self.teamSharingPolicy != nil) {
    result = prime * result + [self.teamSharingPolicy hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocChangeSharingPolicyDetails:other];
}

- (BOOL)isEqualToPaperDocChangeSharingPolicyDetails:
    (DBTEAMLOGPaperDocChangeSharingPolicyDetails *)aPaperDocChangeSharingPolicyDetails {
  if (self == aPaperDocChangeSharingPolicyDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocChangeSharingPolicyDetails.eventUuid]) {
    return NO;
  }
  if (self.publicSharingPolicy) {
    if (![self.publicSharingPolicy isEqual:aPaperDocChangeSharingPolicyDetails.publicSharingPolicy]) {
      return NO;
    }
  }
  if (self.teamSharingPolicy) {
    if (![self.teamSharingPolicy isEqual:aPaperDocChangeSharingPolicyDetails.teamSharingPolicy]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocChangeSharingPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.publicSharingPolicy) {
    jsonDict[@"public_sharing_policy"] = valueObj.publicSharingPolicy;
  }
  if (valueObj.teamSharingPolicy) {
    jsonDict[@"team_sharing_policy"] = valueObj.teamSharingPolicy;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocChangeSharingPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *publicSharingPolicy = valueDict[@"public_sharing_policy"] ?: nil;
  NSString *teamSharingPolicy = valueDict[@"team_sharing_policy"] ?: nil;

  return [[DBTEAMLOGPaperDocChangeSharingPolicyDetails alloc] initWithEventUuid:eventUuid
                                                            publicSharingPolicy:publicSharingPolicy
                                                              teamSharingPolicy:teamSharingPolicy];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocChangeSharingPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocChangeSharingPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocChangeSharingPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocChangeSharingPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocChangeSharingPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocChangeSharingPolicyType:other];
}

- (BOOL)isEqualToPaperDocChangeSharingPolicyType:
    (DBTEAMLOGPaperDocChangeSharingPolicyType *)aPaperDocChangeSharingPolicyType {
  if (self == aPaperDocChangeSharingPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocChangeSharingPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocChangeSharingPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocChangeSharingPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocChangeSharingPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocChangeSharingPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocChangeSubscriptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocChangeSubscriptionDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
            dNewSubscriptionLevel:(NSString *)dNewSubscriptionLevel
        previousSubscriptionLevel:(NSString *)previousSubscriptionLevel {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](dNewSubscriptionLevel);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _dNewSubscriptionLevel = dNewSubscriptionLevel;
    _previousSubscriptionLevel = previousSubscriptionLevel;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid dNewSubscriptionLevel:(NSString *)dNewSubscriptionLevel {
  return [self initWithEventUuid:eventUuid dNewSubscriptionLevel:dNewSubscriptionLevel previousSubscriptionLevel:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.dNewSubscriptionLevel hash];
  if (self.previousSubscriptionLevel != nil) {
    result = prime * result + [self.previousSubscriptionLevel hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocChangeSubscriptionDetails:other];
}

- (BOOL)isEqualToPaperDocChangeSubscriptionDetails:
    (DBTEAMLOGPaperDocChangeSubscriptionDetails *)aPaperDocChangeSubscriptionDetails {
  if (self == aPaperDocChangeSubscriptionDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocChangeSubscriptionDetails.eventUuid]) {
    return NO;
  }
  if (![self.dNewSubscriptionLevel isEqual:aPaperDocChangeSubscriptionDetails.dNewSubscriptionLevel]) {
    return NO;
  }
  if (self.previousSubscriptionLevel) {
    if (![self.previousSubscriptionLevel isEqual:aPaperDocChangeSubscriptionDetails.previousSubscriptionLevel]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocChangeSubscriptionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"new_subscription_level"] = valueObj.dNewSubscriptionLevel;
  if (valueObj.previousSubscriptionLevel) {
    jsonDict[@"previous_subscription_level"] = valueObj.previousSubscriptionLevel;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocChangeSubscriptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *dNewSubscriptionLevel = valueDict[@"new_subscription_level"];
  NSString *previousSubscriptionLevel = valueDict[@"previous_subscription_level"] ?: nil;

  return [[DBTEAMLOGPaperDocChangeSubscriptionDetails alloc] initWithEventUuid:eventUuid
                                                         dNewSubscriptionLevel:dNewSubscriptionLevel
                                                     previousSubscriptionLevel:previousSubscriptionLevel];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocChangeSubscriptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocChangeSubscriptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocChangeSubscriptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocChangeSubscriptionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocChangeSubscriptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocChangeSubscriptionType:other];
}

- (BOOL)isEqualToPaperDocChangeSubscriptionType:
    (DBTEAMLOGPaperDocChangeSubscriptionType *)aPaperDocChangeSubscriptionType {
  if (self == aPaperDocChangeSubscriptionType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocChangeSubscriptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocChangeSubscriptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocChangeSubscriptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocChangeSubscriptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocChangeSubscriptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocDeleteCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocDeleteCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocDeleteCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocDeleteCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocDeleteCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocDeleteCommentDetails:other];
}

- (BOOL)isEqualToPaperDocDeleteCommentDetails:(DBTEAMLOGPaperDocDeleteCommentDetails *)aPaperDocDeleteCommentDetails {
  if (self == aPaperDocDeleteCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocDeleteCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aPaperDocDeleteCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocDeleteCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocDeleteCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocDeleteCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGPaperDocDeleteCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocDeleteCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocDeleteCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocDeleteCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocDeleteCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocDeleteCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocDeleteCommentType:other];
}

- (BOOL)isEqualToPaperDocDeleteCommentType:(DBTEAMLOGPaperDocDeleteCommentType *)aPaperDocDeleteCommentType {
  if (self == aPaperDocDeleteCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocDeleteCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocDeleteCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocDeleteCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocDeleteCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocDeleteCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocDeletedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocDeletedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocDeletedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocDeletedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocDeletedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocDeletedDetails:other];
}

- (BOOL)isEqualToPaperDocDeletedDetails:(DBTEAMLOGPaperDocDeletedDetails *)aPaperDocDeletedDetails {
  if (self == aPaperDocDeletedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocDeletedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocDeletedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocDeletedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocDeletedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocDeletedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocDeletedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocDeletedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocDeletedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocDeletedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocDeletedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocDeletedType:other];
}

- (BOOL)isEqualToPaperDocDeletedType:(DBTEAMLOGPaperDocDeletedType *)aPaperDocDeletedType {
  if (self == aPaperDocDeletedType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocDeletedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocDeletedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocDeletedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocDeletedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocDeletedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocDownloadDetails.h"
#import "DBTEAMLOGPaperDownloadFormat.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocDownloadDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                 exportFileFormat:(DBTEAMLOGPaperDownloadFormat *)exportFileFormat {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](exportFileFormat);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _exportFileFormat = exportFileFormat;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocDownloadDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocDownloadDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocDownloadDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.exportFileFormat hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocDownloadDetails:other];
}

- (BOOL)isEqualToPaperDocDownloadDetails:(DBTEAMLOGPaperDocDownloadDetails *)aPaperDocDownloadDetails {
  if (self == aPaperDocDownloadDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocDownloadDetails.eventUuid]) {
    return NO;
  }
  if (![self.exportFileFormat isEqual:aPaperDocDownloadDetails.exportFileFormat]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocDownloadDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocDownloadDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"export_file_format"] = [DBTEAMLOGPaperDownloadFormatSerializer serialize:valueObj.exportFileFormat];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocDownloadDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  DBTEAMLOGPaperDownloadFormat *exportFileFormat =
      [DBTEAMLOGPaperDownloadFormatSerializer deserialize:valueDict[@"export_file_format"]];

  return [[DBTEAMLOGPaperDocDownloadDetails alloc] initWithEventUuid:eventUuid exportFileFormat:exportFileFormat];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocDownloadType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocDownloadType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocDownloadTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocDownloadTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocDownloadTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocDownloadType:other];
}

- (BOOL)isEqualToPaperDocDownloadType:(DBTEAMLOGPaperDocDownloadType *)aPaperDocDownloadType {
  if (self == aPaperDocDownloadType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocDownloadType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocDownloadTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocDownloadType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocDownloadType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocDownloadType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocEditCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocEditCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocEditCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocEditCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocEditCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocEditCommentDetails:other];
}

- (BOOL)isEqualToPaperDocEditCommentDetails:(DBTEAMLOGPaperDocEditCommentDetails *)aPaperDocEditCommentDetails {
  if (self == aPaperDocEditCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocEditCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aPaperDocEditCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocEditCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocEditCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocEditCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGPaperDocEditCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocEditCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocEditCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocEditCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocEditCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocEditCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocEditCommentType:other];
}

- (BOOL)isEqualToPaperDocEditCommentType:(DBTEAMLOGPaperDocEditCommentType *)aPaperDocEditCommentType {
  if (self == aPaperDocEditCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocEditCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocEditCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocEditCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocEditCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocEditCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocEditDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocEditDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocEditDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocEditDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocEditDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocEditDetails:other];
}

- (BOOL)isEqualToPaperDocEditDetails:(DBTEAMLOGPaperDocEditDetails *)aPaperDocEditDetails {
  if (self == aPaperDocEditDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocEditDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocEditDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocEditDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocEditDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocEditDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocEditType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocEditType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocEditTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocEditTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocEditTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocEditType:other];
}

- (BOOL)isEqualToPaperDocEditType:(DBTEAMLOGPaperDocEditType *)aPaperDocEditType {
  if (self == aPaperDocEditType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocEditType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocEditTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocEditType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocEditType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocEditType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocFollowedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocFollowedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocFollowedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocFollowedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocFollowedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocFollowedDetails:other];
}

- (BOOL)isEqualToPaperDocFollowedDetails:(DBTEAMLOGPaperDocFollowedDetails *)aPaperDocFollowedDetails {
  if (self == aPaperDocFollowedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocFollowedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocFollowedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocFollowedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocFollowedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocFollowedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocFollowedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocFollowedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocFollowedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocFollowedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocFollowedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocFollowedType:other];
}

- (BOOL)isEqualToPaperDocFollowedType:(DBTEAMLOGPaperDocFollowedType *)aPaperDocFollowedType {
  if (self == aPaperDocFollowedType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocFollowedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocFollowedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocFollowedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocFollowedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocFollowedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocMentionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocMentionDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocMentionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocMentionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocMentionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocMentionDetails:other];
}

- (BOOL)isEqualToPaperDocMentionDetails:(DBTEAMLOGPaperDocMentionDetails *)aPaperDocMentionDetails {
  if (self == aPaperDocMentionDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocMentionDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocMentionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocMentionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocMentionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocMentionDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocMentionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocMentionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocMentionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocMentionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocMentionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocMentionType:other];
}

- (BOOL)isEqualToPaperDocMentionType:(DBTEAMLOGPaperDocMentionType *)aPaperDocMentionType {
  if (self == aPaperDocMentionType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocMentionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocMentionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocMentionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocMentionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocMentionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocRequestAccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocRequestAccessDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocRequestAccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocRequestAccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocRequestAccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocRequestAccessDetails:other];
}

- (BOOL)isEqualToPaperDocRequestAccessDetails:(DBTEAMLOGPaperDocRequestAccessDetails *)aPaperDocRequestAccessDetails {
  if (self == aPaperDocRequestAccessDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocRequestAccessDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocRequestAccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocRequestAccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocRequestAccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocRequestAccessDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocRequestAccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocRequestAccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocRequestAccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocRequestAccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocRequestAccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocRequestAccessType:other];
}

- (BOOL)isEqualToPaperDocRequestAccessType:(DBTEAMLOGPaperDocRequestAccessType *)aPaperDocRequestAccessType {
  if (self == aPaperDocRequestAccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocRequestAccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocRequestAccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocRequestAccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocRequestAccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocRequestAccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocResolveCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocResolveCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocResolveCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocResolveCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocResolveCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocResolveCommentDetails:other];
}

- (BOOL)isEqualToPaperDocResolveCommentDetails:
    (DBTEAMLOGPaperDocResolveCommentDetails *)aPaperDocResolveCommentDetails {
  if (self == aPaperDocResolveCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocResolveCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aPaperDocResolveCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocResolveCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocResolveCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocResolveCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGPaperDocResolveCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocResolveCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocResolveCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocResolveCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocResolveCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocResolveCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocResolveCommentType:other];
}

- (BOOL)isEqualToPaperDocResolveCommentType:(DBTEAMLOGPaperDocResolveCommentType *)aPaperDocResolveCommentType {
  if (self == aPaperDocResolveCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocResolveCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocResolveCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocResolveCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocResolveCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocResolveCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocRevertDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocRevertDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocRevertDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocRevertDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocRevertDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocRevertDetails:other];
}

- (BOOL)isEqualToPaperDocRevertDetails:(DBTEAMLOGPaperDocRevertDetails *)aPaperDocRevertDetails {
  if (self == aPaperDocRevertDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocRevertDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocRevertDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocRevertDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocRevertDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocRevertDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocRevertType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocRevertType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocRevertTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocRevertTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocRevertTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocRevertType:other];
}

- (BOOL)isEqualToPaperDocRevertType:(DBTEAMLOGPaperDocRevertType *)aPaperDocRevertType {
  if (self == aPaperDocRevertType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocRevertType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocRevertTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocRevertType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocRevertType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocRevertType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocSlackShareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocSlackShareDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocSlackShareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocSlackShareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocSlackShareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocSlackShareDetails:other];
}

- (BOOL)isEqualToPaperDocSlackShareDetails:(DBTEAMLOGPaperDocSlackShareDetails *)aPaperDocSlackShareDetails {
  if (self == aPaperDocSlackShareDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocSlackShareDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocSlackShareDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocSlackShareDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocSlackShareDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocSlackShareDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocSlackShareType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocSlackShareType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocSlackShareTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocSlackShareTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocSlackShareTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocSlackShareType:other];
}

- (BOOL)isEqualToPaperDocSlackShareType:(DBTEAMLOGPaperDocSlackShareType *)aPaperDocSlackShareType {
  if (self == aPaperDocSlackShareType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocSlackShareType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocSlackShareTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocSlackShareType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocSlackShareType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocSlackShareType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocTeamInviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocTeamInviteDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocTeamInviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocTeamInviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocTeamInviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocTeamInviteDetails:other];
}

- (BOOL)isEqualToPaperDocTeamInviteDetails:(DBTEAMLOGPaperDocTeamInviteDetails *)aPaperDocTeamInviteDetails {
  if (self == aPaperDocTeamInviteDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocTeamInviteDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocTeamInviteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocTeamInviteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocTeamInviteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocTeamInviteDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocTeamInviteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocTeamInviteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocTeamInviteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocTeamInviteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocTeamInviteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocTeamInviteType:other];
}

- (BOOL)isEqualToPaperDocTeamInviteType:(DBTEAMLOGPaperDocTeamInviteType *)aPaperDocTeamInviteType {
  if (self == aPaperDocTeamInviteType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocTeamInviteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocTeamInviteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocTeamInviteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocTeamInviteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocTeamInviteType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocTrashedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocTrashedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocTrashedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocTrashedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocTrashedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocTrashedDetails:other];
}

- (BOOL)isEqualToPaperDocTrashedDetails:(DBTEAMLOGPaperDocTrashedDetails *)aPaperDocTrashedDetails {
  if (self == aPaperDocTrashedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocTrashedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocTrashedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocTrashedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocTrashedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocTrashedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocTrashedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocTrashedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocTrashedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocTrashedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocTrashedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocTrashedType:other];
}

- (BOOL)isEqualToPaperDocTrashedType:(DBTEAMLOGPaperDocTrashedType *)aPaperDocTrashedType {
  if (self == aPaperDocTrashedType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocTrashedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocTrashedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocTrashedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocTrashedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocTrashedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocUnresolveCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocUnresolveCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocUnresolveCommentDetails:other];
}

- (BOOL)isEqualToPaperDocUnresolveCommentDetails:
    (DBTEAMLOGPaperDocUnresolveCommentDetails *)aPaperDocUnresolveCommentDetails {
  if (self == aPaperDocUnresolveCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocUnresolveCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aPaperDocUnresolveCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocUnresolveCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocUnresolveCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGPaperDocUnresolveCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocUnresolveCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocUnresolveCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocUnresolveCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocUnresolveCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocUnresolveCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocUnresolveCommentType:other];
}

- (BOOL)isEqualToPaperDocUnresolveCommentType:(DBTEAMLOGPaperDocUnresolveCommentType *)aPaperDocUnresolveCommentType {
  if (self == aPaperDocUnresolveCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocUnresolveCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocUnresolveCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocUnresolveCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocUnresolveCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocUnresolveCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocUntrashedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocUntrashedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocUntrashedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocUntrashedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocUntrashedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocUntrashedDetails:other];
}

- (BOOL)isEqualToPaperDocUntrashedDetails:(DBTEAMLOGPaperDocUntrashedDetails *)aPaperDocUntrashedDetails {
  if (self == aPaperDocUntrashedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocUntrashedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocUntrashedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocUntrashedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocUntrashedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocUntrashedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocUntrashedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocUntrashedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocUntrashedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocUntrashedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocUntrashedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocUntrashedType:other];
}

- (BOOL)isEqualToPaperDocUntrashedType:(DBTEAMLOGPaperDocUntrashedType *)aPaperDocUntrashedType {
  if (self == aPaperDocUntrashedType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocUntrashedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocUntrashedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocUntrashedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocUntrashedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocUntrashedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocViewDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocViewDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocViewDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocViewDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocViewDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocViewDetails:other];
}

- (BOOL)isEqualToPaperDocViewDetails:(DBTEAMLOGPaperDocViewDetails *)aPaperDocViewDetails {
  if (self == aPaperDocViewDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocViewDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocViewDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocViewDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocViewDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocViewDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocViewType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocViewType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocViewTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocViewTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocViewTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocViewType:other];
}

- (BOOL)isEqualToPaperDocViewType:(DBTEAMLOGPaperDocViewType *)aPaperDocViewType {
  if (self == aPaperDocViewType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperDocViewType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocViewTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocViewType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocViewType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperDocViewType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocumentLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocumentLogInfo

#pragma mark - Constructors

- (instancetype)initWithDocId:(NSString *)docId docTitle:(NSString *)docTitle {
  [DBStoneValidators nonnullValidator:nil](docId);
  [DBStoneValidators nonnullValidator:nil](docTitle);

  self = [super init];
  if (self) {
    _docId = docId;
    _docTitle = docTitle;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocumentLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDocumentLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocumentLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.docId hash];
  result = prime * result + [self.docTitle hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocumentLogInfo:other];
}

- (BOOL)isEqualToPaperDocumentLogInfo:(DBTEAMLOGPaperDocumentLogInfo *)aPaperDocumentLogInfo {
  if (self == aPaperDocumentLogInfo) {
    return YES;
  }
  if (![self.docId isEqual:aPaperDocumentLogInfo.docId]) {
    return NO;
  }
  if (![self.docTitle isEqual:aPaperDocumentLogInfo.docTitle]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocumentLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDocumentLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"doc_id"] = valueObj.docId;
  jsonDict[@"doc_title"] = valueObj.docTitle;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDocumentLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *docId = valueDict[@"doc_id"];
  NSString *docTitle = valueDict[@"doc_title"];

  return [[DBTEAMLOGPaperDocumentLogInfo alloc] initWithDocId:docId docTitle:docTitle];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDownloadFormat.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDownloadFormat

#pragma mark - Constructors

- (instancetype)initWithDocx {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDownloadFormatDocx;
  }
  return self;
}

- (instancetype)initWithHtml {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDownloadFormatHtml;
  }
  return self;
}

- (instancetype)initWithMarkdown {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDownloadFormatMarkdown;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDownloadFormatOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDocx {
  return _tag == DBTEAMLOGPaperDownloadFormatDocx;
}

- (BOOL)isHtml {
  return _tag == DBTEAMLOGPaperDownloadFormatHtml;
}

- (BOOL)isMarkdown {
  return _tag == DBTEAMLOGPaperDownloadFormatMarkdown;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGPaperDownloadFormatOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGPaperDownloadFormatDocx:
    return @"DBTEAMLOGPaperDownloadFormatDocx";
  case DBTEAMLOGPaperDownloadFormatHtml:
    return @"DBTEAMLOGPaperDownloadFormatHtml";
  case DBTEAMLOGPaperDownloadFormatMarkdown:
    return @"DBTEAMLOGPaperDownloadFormatMarkdown";
  case DBTEAMLOGPaperDownloadFormatOther:
    return @"DBTEAMLOGPaperDownloadFormatOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperDownloadFormatSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperDownloadFormatSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDownloadFormatSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGPaperDownloadFormatDocx:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperDownloadFormatHtml:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperDownloadFormatMarkdown:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperDownloadFormatOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDownloadFormat:other];
}

- (BOOL)isEqualToPaperDownloadFormat:(DBTEAMLOGPaperDownloadFormat *)aPaperDownloadFormat {
  if (self == aPaperDownloadFormat) {
    return YES;
  }
  if (self.tag != aPaperDownloadFormat.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGPaperDownloadFormatDocx:
    return [[self tagName] isEqual:[aPaperDownloadFormat tagName]];
  case DBTEAMLOGPaperDownloadFormatHtml:
    return [[self tagName] isEqual:[aPaperDownloadFormat tagName]];
  case DBTEAMLOGPaperDownloadFormatMarkdown:
    return [[self tagName] isEqual:[aPaperDownloadFormat tagName]];
  case DBTEAMLOGPaperDownloadFormatOther:
    return [[self tagName] isEqual:[aPaperDownloadFormat tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDownloadFormatSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperDownloadFormat *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDocx]) {
    jsonDict[@".tag"] = @"docx";
  } else if ([valueObj isHtml]) {
    jsonDict[@".tag"] = @"html";
  } else if ([valueObj isMarkdown]) {
    jsonDict[@".tag"] = @"markdown";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperDownloadFormat *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"docx"]) {
    return [[DBTEAMLOGPaperDownloadFormat alloc] initWithDocx];
  } else if ([tag isEqualToString:@"html"]) {
    return [[DBTEAMLOGPaperDownloadFormat alloc] initWithHtml];
  } else if ([tag isEqualToString:@"markdown"]) {
    return [[DBTEAMLOGPaperDownloadFormat alloc] initWithMarkdown];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGPaperDownloadFormat alloc] initWithOther];
  } else {
    return [[DBTEAMLOGPaperDownloadFormat alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperEnabledUsersGroupAdditionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperEnabledUsersGroupAdditionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperEnabledUsersGroupAdditionDetails:other];
}

- (BOOL)isEqualToPaperEnabledUsersGroupAdditionDetails:
    (DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)aPaperEnabledUsersGroupAdditionDetails {
  if (self == aPaperEnabledUsersGroupAdditionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPaperEnabledUsersGroupAdditionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperEnabledUsersGroupAdditionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperEnabledUsersGroupAdditionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperEnabledUsersGroupAdditionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperEnabledUsersGroupAdditionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperEnabledUsersGroupAdditionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperEnabledUsersGroupAdditionType:other];
}

- (BOOL)isEqualToPaperEnabledUsersGroupAdditionType:
    (DBTEAMLOGPaperEnabledUsersGroupAdditionType *)aPaperEnabledUsersGroupAdditionType {
  if (self == aPaperEnabledUsersGroupAdditionType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperEnabledUsersGroupAdditionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperEnabledUsersGroupAdditionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperEnabledUsersGroupAdditionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperEnabledUsersGroupAdditionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperEnabledUsersGroupAdditionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperEnabledUsersGroupRemovalDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperEnabledUsersGroupRemovalDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperEnabledUsersGroupRemovalDetails:other];
}

- (BOOL)isEqualToPaperEnabledUsersGroupRemovalDetails:
    (DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)aPaperEnabledUsersGroupRemovalDetails {
  if (self == aPaperEnabledUsersGroupRemovalDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPaperEnabledUsersGroupRemovalDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperEnabledUsersGroupRemovalType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperEnabledUsersGroupRemovalType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperEnabledUsersGroupRemovalTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperEnabledUsersGroupRemovalTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperEnabledUsersGroupRemovalTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperEnabledUsersGroupRemovalType:other];
}

- (BOOL)isEqualToPaperEnabledUsersGroupRemovalType:
    (DBTEAMLOGPaperEnabledUsersGroupRemovalType *)aPaperEnabledUsersGroupRemovalType {
  if (self == aPaperEnabledUsersGroupRemovalType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperEnabledUsersGroupRemovalType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperEnabledUsersGroupRemovalTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperEnabledUsersGroupRemovalType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperEnabledUsersGroupRemovalType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperEnabledUsersGroupRemovalType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperExternalViewAllowDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperExternalViewAllowDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperExternalViewAllowDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperExternalViewAllowDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperExternalViewAllowDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperExternalViewAllowDetails:other];
}

- (BOOL)isEqualToPaperExternalViewAllowDetails:
    (DBTEAMLOGPaperExternalViewAllowDetails *)aPaperExternalViewAllowDetails {
  if (self == aPaperExternalViewAllowDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperExternalViewAllowDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperExternalViewAllowDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperExternalViewAllowDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperExternalViewAllowDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperExternalViewAllowDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperExternalViewAllowType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperExternalViewAllowType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperExternalViewAllowTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperExternalViewAllowTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperExternalViewAllowTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperExternalViewAllowType:other];
}

- (BOOL)isEqualToPaperExternalViewAllowType:(DBTEAMLOGPaperExternalViewAllowType *)aPaperExternalViewAllowType {
  if (self == aPaperExternalViewAllowType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperExternalViewAllowType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperExternalViewAllowTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperExternalViewAllowType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperExternalViewAllowType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperExternalViewAllowType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperExternalViewDefaultTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperExternalViewDefaultTeamDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperExternalViewDefaultTeamDetails:other];
}

- (BOOL)isEqualToPaperExternalViewDefaultTeamDetails:
    (DBTEAMLOGPaperExternalViewDefaultTeamDetails *)aPaperExternalViewDefaultTeamDetails {
  if (self == aPaperExternalViewDefaultTeamDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperExternalViewDefaultTeamDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperExternalViewDefaultTeamDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperExternalViewDefaultTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperExternalViewDefaultTeamDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperExternalViewDefaultTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperExternalViewDefaultTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperExternalViewDefaultTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperExternalViewDefaultTeamTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperExternalViewDefaultTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperExternalViewDefaultTeamType:other];
}

- (BOOL)isEqualToPaperExternalViewDefaultTeamType:
    (DBTEAMLOGPaperExternalViewDefaultTeamType *)aPaperExternalViewDefaultTeamType {
  if (self == aPaperExternalViewDefaultTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperExternalViewDefaultTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperExternalViewDefaultTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperExternalViewDefaultTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperExternalViewDefaultTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperExternalViewDefaultTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperExternalViewForbidDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperExternalViewForbidDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperExternalViewForbidDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperExternalViewForbidDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperExternalViewForbidDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperExternalViewForbidDetails:other];
}

- (BOOL)isEqualToPaperExternalViewForbidDetails:
    (DBTEAMLOGPaperExternalViewForbidDetails *)aPaperExternalViewForbidDetails {
  if (self == aPaperExternalViewForbidDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperExternalViewForbidDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperExternalViewForbidDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperExternalViewForbidDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperExternalViewForbidDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperExternalViewForbidDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperExternalViewForbidType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperExternalViewForbidType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperExternalViewForbidTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperExternalViewForbidTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperExternalViewForbidTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperExternalViewForbidType:other];
}

- (BOOL)isEqualToPaperExternalViewForbidType:(DBTEAMLOGPaperExternalViewForbidType *)aPaperExternalViewForbidType {
  if (self == aPaperExternalViewForbidType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperExternalViewForbidType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperExternalViewForbidTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperExternalViewForbidType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperExternalViewForbidType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperExternalViewForbidType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderChangeSubscriptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderChangeSubscriptionDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
            dNewSubscriptionLevel:(NSString *)dNewSubscriptionLevel
        previousSubscriptionLevel:(NSString *)previousSubscriptionLevel {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](dNewSubscriptionLevel);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _dNewSubscriptionLevel = dNewSubscriptionLevel;
    _previousSubscriptionLevel = previousSubscriptionLevel;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid dNewSubscriptionLevel:(NSString *)dNewSubscriptionLevel {
  return [self initWithEventUuid:eventUuid dNewSubscriptionLevel:dNewSubscriptionLevel previousSubscriptionLevel:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.dNewSubscriptionLevel hash];
  if (self.previousSubscriptionLevel != nil) {
    result = prime * result + [self.previousSubscriptionLevel hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderChangeSubscriptionDetails:other];
}

- (BOOL)isEqualToPaperFolderChangeSubscriptionDetails:
    (DBTEAMLOGPaperFolderChangeSubscriptionDetails *)aPaperFolderChangeSubscriptionDetails {
  if (self == aPaperFolderChangeSubscriptionDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperFolderChangeSubscriptionDetails.eventUuid]) {
    return NO;
  }
  if (![self.dNewSubscriptionLevel isEqual:aPaperFolderChangeSubscriptionDetails.dNewSubscriptionLevel]) {
    return NO;
  }
  if (self.previousSubscriptionLevel) {
    if (![self.previousSubscriptionLevel isEqual:aPaperFolderChangeSubscriptionDetails.previousSubscriptionLevel]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperFolderChangeSubscriptionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"new_subscription_level"] = valueObj.dNewSubscriptionLevel;
  if (valueObj.previousSubscriptionLevel) {
    jsonDict[@"previous_subscription_level"] = valueObj.previousSubscriptionLevel;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperFolderChangeSubscriptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *dNewSubscriptionLevel = valueDict[@"new_subscription_level"];
  NSString *previousSubscriptionLevel = valueDict[@"previous_subscription_level"] ?: nil;

  return [[DBTEAMLOGPaperFolderChangeSubscriptionDetails alloc] initWithEventUuid:eventUuid
                                                            dNewSubscriptionLevel:dNewSubscriptionLevel
                                                        previousSubscriptionLevel:previousSubscriptionLevel];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderChangeSubscriptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderChangeSubscriptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderChangeSubscriptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperFolderChangeSubscriptionTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderChangeSubscriptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderChangeSubscriptionType:other];
}

- (BOOL)isEqualToPaperFolderChangeSubscriptionType:
    (DBTEAMLOGPaperFolderChangeSubscriptionType *)aPaperFolderChangeSubscriptionType {
  if (self == aPaperFolderChangeSubscriptionType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperFolderChangeSubscriptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderChangeSubscriptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperFolderChangeSubscriptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperFolderChangeSubscriptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperFolderChangeSubscriptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderDeletedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderDeletedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderDeletedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperFolderDeletedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderDeletedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderDeletedDetails:other];
}

- (BOOL)isEqualToPaperFolderDeletedDetails:(DBTEAMLOGPaperFolderDeletedDetails *)aPaperFolderDeletedDetails {
  if (self == aPaperFolderDeletedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperFolderDeletedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderDeletedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperFolderDeletedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperFolderDeletedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperFolderDeletedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderDeletedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderDeletedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderDeletedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperFolderDeletedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderDeletedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderDeletedType:other];
}

- (BOOL)isEqualToPaperFolderDeletedType:(DBTEAMLOGPaperFolderDeletedType *)aPaperFolderDeletedType {
  if (self == aPaperFolderDeletedType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperFolderDeletedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderDeletedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperFolderDeletedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperFolderDeletedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperFolderDeletedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderFollowedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderFollowedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderFollowedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperFolderFollowedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderFollowedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderFollowedDetails:other];
}

- (BOOL)isEqualToPaperFolderFollowedDetails:(DBTEAMLOGPaperFolderFollowedDetails *)aPaperFolderFollowedDetails {
  if (self == aPaperFolderFollowedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperFolderFollowedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderFollowedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperFolderFollowedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperFolderFollowedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperFolderFollowedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderFollowedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderFollowedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderFollowedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperFolderFollowedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderFollowedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderFollowedType:other];
}

- (BOOL)isEqualToPaperFolderFollowedType:(DBTEAMLOGPaperFolderFollowedType *)aPaperFolderFollowedType {
  if (self == aPaperFolderFollowedType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperFolderFollowedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderFollowedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperFolderFollowedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperFolderFollowedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperFolderFollowedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderLogInfo

#pragma mark - Constructors

- (instancetype)initWithFolderId:(NSString *)folderId folderName:(NSString *)folderName {
  [DBStoneValidators nonnullValidator:nil](folderId);
  [DBStoneValidators nonnullValidator:nil](folderName);

  self = [super init];
  if (self) {
    _folderId = folderId;
    _folderName = folderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperFolderLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.folderId hash];
  result = prime * result + [self.folderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderLogInfo:other];
}

- (BOOL)isEqualToPaperFolderLogInfo:(DBTEAMLOGPaperFolderLogInfo *)aPaperFolderLogInfo {
  if (self == aPaperFolderLogInfo) {
    return YES;
  }
  if (![self.folderId isEqual:aPaperFolderLogInfo.folderId]) {
    return NO;
  }
  if (![self.folderName isEqual:aPaperFolderLogInfo.folderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperFolderLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"folder_id"] = valueObj.folderId;
  jsonDict[@"folder_name"] = valueObj.folderName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperFolderLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *folderId = valueDict[@"folder_id"];
  NSString *folderName = valueDict[@"folder_name"];

  return [[DBTEAMLOGPaperFolderLogInfo alloc] initWithFolderId:folderId folderName:folderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderTeamInviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderTeamInviteDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderTeamInviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperFolderTeamInviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderTeamInviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderTeamInviteDetails:other];
}

- (BOOL)isEqualToPaperFolderTeamInviteDetails:(DBTEAMLOGPaperFolderTeamInviteDetails *)aPaperFolderTeamInviteDetails {
  if (self == aPaperFolderTeamInviteDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperFolderTeamInviteDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderTeamInviteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperFolderTeamInviteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperFolderTeamInviteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperFolderTeamInviteDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderTeamInviteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderTeamInviteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderTeamInviteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperFolderTeamInviteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderTeamInviteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderTeamInviteType:other];
}

- (BOOL)isEqualToPaperFolderTeamInviteType:(DBTEAMLOGPaperFolderTeamInviteType *)aPaperFolderTeamInviteType {
  if (self == aPaperFolderTeamInviteType) {
    return YES;
  }
  if (![self.description_ isEqual:aPaperFolderTeamInviteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderTeamInviteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperFolderTeamInviteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperFolderTeamInviteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPaperFolderTeamInviteType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperMemberPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperMemberPolicy

#pragma mark - Constructors

- (instancetype)initWithAnyoneWithLink {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperMemberPolicyAnyoneWithLink;
  }
  return self;
}

- (instancetype)initWithOnlyTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperMemberPolicyOnlyTeam;
  }
  return self;
}

- (instancetype)initWithTeamAndExplicitlyShared {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperMemberPolicyTeamAndExplicitlyShared;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperMemberPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAnyoneWithLink {
  return _tag == DBTEAMLOGPaperMemberPolicyAnyoneWithLink;
}

- (BOOL)isOnlyTeam {
  return _tag == DBTEAMLOGPaperMemberPolicyOnlyTeam;
}

- (BOOL)isTeamAndExplicitlyShared {
  return _tag == DBTEAMLOGPaperMemberPolicyTeamAndExplicitlyShared;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGPaperMemberPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGPaperMemberPolicyAnyoneWithLink:
    return @"DBTEAMLOGPaperMemberPolicyAnyoneWithLink";
  case DBTEAMLOGPaperMemberPolicyOnlyTeam:
    return @"DBTEAMLOGPaperMemberPolicyOnlyTeam";
  case DBTEAMLOGPaperMemberPolicyTeamAndExplicitlyShared:
    return @"DBTEAMLOGPaperMemberPolicyTeamAndExplicitlyShared";
  case DBTEAMLOGPaperMemberPolicyOther:
    return @"DBTEAMLOGPaperMemberPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPaperMemberPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPaperMemberPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperMemberPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGPaperMemberPolicyAnyoneWithLink:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperMemberPolicyOnlyTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperMemberPolicyTeamAndExplicitlyShared:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperMemberPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperMemberPolicy:other];
}

- (BOOL)isEqualToPaperMemberPolicy:(DBTEAMLOGPaperMemberPolicy *)aPaperMemberPolicy {
  if (self == aPaperMemberPolicy) {
    return YES;
  }
  if (self.tag != aPaperMemberPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGPaperMemberPolicyAnyoneWithLink:
    return [[self tagName] isEqual:[aPaperMemberPolicy tagName]];
  case DBTEAMLOGPaperMemberPolicyOnlyTeam:
    return [[self tagName] isEqual:[aPaperMemberPolicy tagName]];
  case DBTEAMLOGPaperMemberPolicyTeamAndExplicitlyShared:
    return [[self tagName] isEqual:[aPaperMemberPolicy tagName]];
  case DBTEAMLOGPaperMemberPolicyOther:
    return [[self tagName] isEqual:[aPaperMemberPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperMemberPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPaperMemberPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAnyoneWithLink]) {
    jsonDict[@".tag"] = @"anyone_with_link";
  } else if ([valueObj isOnlyTeam]) {
    jsonDict[@".tag"] = @"only_team";
  } else if ([valueObj isTeamAndExplicitlyShared]) {
    jsonDict[@".tag"] = @"team_and_explicitly_shared";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPaperMemberPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"anyone_with_link"]) {
    return [[DBTEAMLOGPaperMemberPolicy alloc] initWithAnyoneWithLink];
  } else if ([tag isEqualToString:@"only_team"]) {
    return [[DBTEAMLOGPaperMemberPolicy alloc] initWithOnlyTeam];
  } else if ([tag isEqualToString:@"team_and_explicitly_shared"]) {
    return [[DBTEAMLOGPaperMemberPolicy alloc] initWithTeamAndExplicitlyShared];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGPaperMemberPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGPaperMemberPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupLogInfo.h"
#import "DBTEAMLOGParticipantLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGParticipantLogInfo

@synthesize user = _user;
@synthesize group = _group;

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMLOGUserLogInfo *)user {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGParticipantLogInfoUser;
    _user = user;
  }
  return self;
}

- (instancetype)initWithGroup:(DBTEAMLOGGroupLogInfo *)group {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGParticipantLogInfoGroup;
    _group = group;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGParticipantLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGUserLogInfo *)user {
  if (![self isUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGParticipantLogInfoUser, but was %@.", [self tagName]];
  }
  return _user;
}

- (DBTEAMLOGGroupLogInfo *)group {
  if (![self isGroup]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGParticipantLogInfoGroup, but was %@.", [self tagName]];
  }
  return _group;
}

#pragma mark - Tag state methods

- (BOOL)isUser {
  return _tag == DBTEAMLOGParticipantLogInfoUser;
}

- (BOOL)isGroup {
  return _tag == DBTEAMLOGParticipantLogInfoGroup;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGParticipantLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGParticipantLogInfoUser:
    return @"DBTEAMLOGParticipantLogInfoUser";
  case DBTEAMLOGParticipantLogInfoGroup:
    return @"DBTEAMLOGParticipantLogInfoGroup";
  case DBTEAMLOGParticipantLogInfoOther:
    return @"DBTEAMLOGParticipantLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGParticipantLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGParticipantLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGParticipantLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGParticipantLogInfoUser:
    result = prime * result + [self.user hash];
  case DBTEAMLOGParticipantLogInfoGroup:
    result = prime * result + [self.group hash];
  case DBTEAMLOGParticipantLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToParticipantLogInfo:other];
}

- (BOOL)isEqualToParticipantLogInfo:(DBTEAMLOGParticipantLogInfo *)aParticipantLogInfo {
  if (self == aParticipantLogInfo) {
    return YES;
  }
  if (self.tag != aParticipantLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGParticipantLogInfoUser:
    return [self.user isEqual:aParticipantLogInfo.user];
  case DBTEAMLOGParticipantLogInfoGroup:
    return [self.group isEqual:aParticipantLogInfo.group];
  case DBTEAMLOGParticipantLogInfoOther:
    return [[self tagName] isEqual:[aParticipantLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGParticipantLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGParticipantLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUser]) {
    jsonDict[@"user"] = [[DBTEAMLOGUserLogInfoSerializer serialize:valueObj.user] mutableCopy];
    jsonDict[@".tag"] = @"user";
  } else if ([valueObj isGroup]) {
    jsonDict = [[DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.group] mutableCopy];
    jsonDict[@".tag"] = @"group";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGParticipantLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user"]) {
    DBTEAMLOGUserLogInfo *user = [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"user"]];
    return [[DBTEAMLOGParticipantLogInfo alloc] initWithUser:user];
  } else if ([tag isEqualToString:@"group"]) {
    DBTEAMLOGGroupLogInfo *group = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGParticipantLogInfo alloc] initWithGroup:group];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGParticipantLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGParticipantLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordChangeDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordChangeDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPasswordChangeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPasswordChangeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordChangeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordChangeDetails:other];
}

- (BOOL)isEqualToPasswordChangeDetails:(DBTEAMLOGPasswordChangeDetails *)aPasswordChangeDetails {
  if (self == aPasswordChangeDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordChangeDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPasswordChangeDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPasswordChangeDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPasswordChangeDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordChangeType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordChangeType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPasswordChangeTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPasswordChangeTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordChangeTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordChangeType:other];
}

- (BOOL)isEqualToPasswordChangeType:(DBTEAMLOGPasswordChangeType *)aPasswordChangeType {
  if (self == aPasswordChangeType) {
    return YES;
  }
  if (![self.description_ isEqual:aPasswordChangeType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordChangeTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPasswordChangeType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPasswordChangeType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPasswordChangeType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordResetAllDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordResetAllDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPasswordResetAllDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPasswordResetAllDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordResetAllDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordResetAllDetails:other];
}

- (BOOL)isEqualToPasswordResetAllDetails:(DBTEAMLOGPasswordResetAllDetails *)aPasswordResetAllDetails {
  if (self == aPasswordResetAllDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordResetAllDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPasswordResetAllDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPasswordResetAllDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPasswordResetAllDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordResetAllType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordResetAllType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPasswordResetAllTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPasswordResetAllTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordResetAllTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordResetAllType:other];
}

- (BOOL)isEqualToPasswordResetAllType:(DBTEAMLOGPasswordResetAllType *)aPasswordResetAllType {
  if (self == aPasswordResetAllType) {
    return YES;
  }
  if (![self.description_ isEqual:aPasswordResetAllType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordResetAllTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPasswordResetAllType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPasswordResetAllType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPasswordResetAllType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordResetDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordResetDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPasswordResetDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPasswordResetDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordResetDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordResetDetails:other];
}

- (BOOL)isEqualToPasswordResetDetails:(DBTEAMLOGPasswordResetDetails *)aPasswordResetDetails {
  if (self == aPasswordResetDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordResetDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPasswordResetDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPasswordResetDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPasswordResetDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordResetType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordResetType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPasswordResetTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPasswordResetTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordResetTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordResetType:other];
}

- (BOOL)isEqualToPasswordResetType:(DBTEAMLOGPasswordResetType *)aPasswordResetType {
  if (self == aPasswordResetType) {
    return YES;
  }
  if (![self.description_ isEqual:aPasswordResetType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordResetTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPasswordResetType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPasswordResetType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPasswordResetType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNamespaceRelativePathLogInfo.h"
#import "DBTEAMLOGPathLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGPathLogInfo

#pragma mark - Constructors

- (instancetype)initWithNamespaceRelative:(DBTEAMLOGNamespaceRelativePathLogInfo *)namespaceRelative
                               contextual:(NSString *)contextual {
  [DBStoneValidators nonnullValidator:nil](namespaceRelative);

  self = [super init];
  if (self) {
    _contextual = contextual;
    _namespaceRelative = namespaceRelative;
  }
  return self;
}

- (instancetype)initWithNamespaceRelative:(DBTEAMLOGNamespaceRelativePathLogInfo *)namespaceRelative {
  return [self initWithNamespaceRelative:namespaceRelative contextual:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPathLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPathLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPathLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.namespaceRelative hash];
  if (self.contextual != nil) {
    result = prime * result + [self.contextual hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPathLogInfo:other];
}

- (BOOL)isEqualToPathLogInfo:(DBTEAMLOGPathLogInfo *)aPathLogInfo {
  if (self == aPathLogInfo) {
    return YES;
  }
  if (![self.namespaceRelative isEqual:aPathLogInfo.namespaceRelative]) {
    return NO;
  }
  if (self.contextual) {
    if (![self.contextual isEqual:aPathLogInfo.contextual]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPathLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPathLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"namespace_relative"] =
      [DBTEAMLOGNamespaceRelativePathLogInfoSerializer serialize:valueObj.namespaceRelative];
  if (valueObj.contextual) {
    jsonDict[@"contextual"] = valueObj.contextual;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPathLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGNamespaceRelativePathLogInfo *namespaceRelative =
      [DBTEAMLOGNamespaceRelativePathLogInfoSerializer deserialize:valueDict[@"namespace_relative"]];
  NSString *contextual = valueDict[@"contextual"] ?: nil;

  return [[DBTEAMLOGPathLogInfo alloc] initWithNamespaceRelative:namespaceRelative contextual:contextual];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGContentPermanentDeletePolicy.h"
#import "DBTEAMLOGPermanentDeleteChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPermanentDeleteChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGContentPermanentDeletePolicy *)dNewValue
                    previousValue:(DBTEAMLOGContentPermanentDeletePolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGContentPermanentDeletePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPermanentDeleteChangePolicyDetails:other];
}

- (BOOL)isEqualToPermanentDeleteChangePolicyDetails:
    (DBTEAMLOGPermanentDeleteChangePolicyDetails *)aPermanentDeleteChangePolicyDetails {
  if (self == aPermanentDeleteChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aPermanentDeleteChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aPermanentDeleteChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPermanentDeleteChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGContentPermanentDeletePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGContentPermanentDeletePolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPermanentDeleteChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGContentPermanentDeletePolicy *dNewValue =
      [DBTEAMLOGContentPermanentDeletePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGContentPermanentDeletePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGContentPermanentDeletePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGPermanentDeleteChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPermanentDeleteChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPermanentDeleteChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPermanentDeleteChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPermanentDeleteChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPermanentDeleteChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPermanentDeleteChangePolicyType:other];
}

- (BOOL)isEqualToPermanentDeleteChangePolicyType:
    (DBTEAMLOGPermanentDeleteChangePolicyType *)aPermanentDeleteChangePolicyType {
  if (self == aPermanentDeleteChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aPermanentDeleteChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPermanentDeleteChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPermanentDeleteChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPermanentDeleteChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGPermanentDeleteChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPlacementRestriction.h"

#pragma mark - API Object

@implementation DBTEAMLOGPlacementRestriction

#pragma mark - Constructors

- (instancetype)initWithEuropeOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPlacementRestrictionEuropeOnly;
  }
  return self;
}

- (instancetype)initWithNone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPlacementRestrictionNone;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPlacementRestrictionOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isEuropeOnly {
  return _tag == DBTEAMLOGPlacementRestrictionEuropeOnly;
}

- (BOOL)isNone {
  return _tag == DBTEAMLOGPlacementRestrictionNone;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGPlacementRestrictionOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGPlacementRestrictionEuropeOnly:
    return @"DBTEAMLOGPlacementRestrictionEuropeOnly";
  case DBTEAMLOGPlacementRestrictionNone:
    return @"DBTEAMLOGPlacementRestrictionNone";
  case DBTEAMLOGPlacementRestrictionOther:
    return @"DBTEAMLOGPlacementRestrictionOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGPlacementRestrictionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGPlacementRestrictionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPlacementRestrictionSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGPlacementRestrictionEuropeOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPlacementRestrictionNone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPlacementRestrictionOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPlacementRestriction:other];
}

- (BOOL)isEqualToPlacementRestriction:(DBTEAMLOGPlacementRestriction *)aPlacementRestriction {
  if (self == aPlacementRestriction) {
    return YES;
  }
  if (self.tag != aPlacementRestriction.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGPlacementRestrictionEuropeOnly:
    return [[self tagName] isEqual:[aPlacementRestriction tagName]];
  case DBTEAMLOGPlacementRestrictionNone:
    return [[self tagName] isEqual:[aPlacementRestriction tagName]];
  case DBTEAMLOGPlacementRestrictionOther:
    return [[self tagName] isEqual:[aPlacementRestriction tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPlacementRestrictionSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGPlacementRestriction *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEuropeOnly]) {
    jsonDict[@".tag"] = @"europe_only";
  } else if ([valueObj isNone]) {
    jsonDict[@".tag"] = @"none";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGPlacementRestriction *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"europe_only"]) {
    return [[DBTEAMLOGPlacementRestriction alloc] initWithEuropeOnly];
  } else if ([tag isEqualToString:@"none"]) {
    return [[DBTEAMLOGPlacementRestriction alloc] initWithNone];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGPlacementRestriction alloc] initWithOther];
  } else {
    return [[DBTEAMLOGPlacementRestriction alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGRelocateAssetReferencesLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGRelocateAssetReferencesLogInfo

#pragma mark - Constructors

- (instancetype)initWithSrcAssetIndex:(NSNumber *)srcAssetIndex destAssetIndex:(NSNumber *)destAssetIndex {
  [DBStoneValidators nonnullValidator:nil](srcAssetIndex);
  [DBStoneValidators nonnullValidator:nil](destAssetIndex);

  self = [super init];
  if (self) {
    _srcAssetIndex = srcAssetIndex;
    _destAssetIndex = destAssetIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGRelocateAssetReferencesLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGRelocateAssetReferencesLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGRelocateAssetReferencesLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.srcAssetIndex hash];
  result = prime * result + [self.destAssetIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRelocateAssetReferencesLogInfo:other];
}

- (BOOL)isEqualToRelocateAssetReferencesLogInfo:
    (DBTEAMLOGRelocateAssetReferencesLogInfo *)aRelocateAssetReferencesLogInfo {
  if (self == aRelocateAssetReferencesLogInfo) {
    return YES;
  }
  if (![self.srcAssetIndex isEqual:aRelocateAssetReferencesLogInfo.srcAssetIndex]) {
    return NO;
  }
  if (![self.destAssetIndex isEqual:aRelocateAssetReferencesLogInfo.destAssetIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGRelocateAssetReferencesLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGRelocateAssetReferencesLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"src_asset_index"] = valueObj.srcAssetIndex;
  jsonDict[@"dest_asset_index"] = valueObj.destAssetIndex;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGRelocateAssetReferencesLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *srcAssetIndex = valueDict[@"src_asset_index"];
  NSNumber *destAssetIndex = valueDict[@"dest_asset_index"];

  return [[DBTEAMLOGRelocateAssetReferencesLogInfo alloc] initWithSrcAssetIndex:srcAssetIndex
                                                                 destAssetIndex:destAssetIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGResellerLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGResellerLogInfo

#pragma mark - Constructors

- (instancetype)initWithResellerName:(NSString *)resellerName resellerEmail:(NSString *)resellerEmail {
  [DBStoneValidators nonnullValidator:nil](resellerName);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](resellerEmail);

  self = [super init];
  if (self) {
    _resellerName = resellerName;
    _resellerEmail = resellerEmail;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGResellerLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGResellerLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGResellerLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.resellerName hash];
  result = prime * result + [self.resellerEmail hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToResellerLogInfo:other];
}

- (BOOL)isEqualToResellerLogInfo:(DBTEAMLOGResellerLogInfo *)aResellerLogInfo {
  if (self == aResellerLogInfo) {
    return YES;
  }
  if (![self.resellerName isEqual:aResellerLogInfo.resellerName]) {
    return NO;
  }
  if (![self.resellerEmail isEqual:aResellerLogInfo.resellerEmail]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGResellerLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGResellerLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"reseller_name"] = valueObj.resellerName;
  jsonDict[@"reseller_email"] = valueObj.resellerEmail;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGResellerLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *resellerName = valueDict[@"reseller_name"];
  NSString *resellerEmail = valueDict[@"reseller_email"];

  return [[DBTEAMLOGResellerLogInfo alloc] initWithResellerName:resellerName resellerEmail:resellerEmail];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGResellerSupportSessionEndDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGResellerSupportSessionEndDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGResellerSupportSessionEndDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGResellerSupportSessionEndDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGResellerSupportSessionEndDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToResellerSupportSessionEndDetails:other];
}

- (BOOL)isEqualToResellerSupportSessionEndDetails:
    (DBTEAMLOGResellerSupportSessionEndDetails *)aResellerSupportSessionEndDetails {
  if (self == aResellerSupportSessionEndDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGResellerSupportSessionEndDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGResellerSupportSessionEndDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGResellerSupportSessionEndDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGResellerSupportSessionEndDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGResellerSupportSessionEndType.h"

#pragma mark - API Object

@implementation DBTEAMLOGResellerSupportSessionEndType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGResellerSupportSessionEndTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGResellerSupportSessionEndTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGResellerSupportSessionEndTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToResellerSupportSessionEndType:other];
}

- (BOOL)isEqualToResellerSupportSessionEndType:
    (DBTEAMLOGResellerSupportSessionEndType *)aResellerSupportSessionEndType {
  if (self == aResellerSupportSessionEndType) {
    return YES;
  }
  if (![self.description_ isEqual:aResellerSupportSessionEndType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGResellerSupportSessionEndTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGResellerSupportSessionEndType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGResellerSupportSessionEndType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGResellerSupportSessionEndType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGResellerSupportSessionStartDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGResellerSupportSessionStartDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGResellerSupportSessionStartDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGResellerSupportSessionStartDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGResellerSupportSessionStartDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToResellerSupportSessionStartDetails:other];
}

- (BOOL)isEqualToResellerSupportSessionStartDetails:
    (DBTEAMLOGResellerSupportSessionStartDetails *)aResellerSupportSessionStartDetails {
  if (self == aResellerSupportSessionStartDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGResellerSupportSessionStartDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGResellerSupportSessionStartDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGResellerSupportSessionStartDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGResellerSupportSessionStartDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGResellerSupportSessionStartType.h"

#pragma mark - API Object

@implementation DBTEAMLOGResellerSupportSessionStartType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGResellerSupportSessionStartTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGResellerSupportSessionStartTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGResellerSupportSessionStartTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToResellerSupportSessionStartType:other];
}

- (BOOL)isEqualToResellerSupportSessionStartType:
    (DBTEAMLOGResellerSupportSessionStartType *)aResellerSupportSessionStartType {
  if (self == aResellerSupportSessionStartType) {
    return YES;
  }
  if (![self.description_ isEqual:aResellerSupportSessionStartType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGResellerSupportSessionStartTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGResellerSupportSessionStartType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGResellerSupportSessionStartType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGResellerSupportSessionStartType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSecondaryMailsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSecondaryMailsPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSecondaryMailsPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSecondaryMailsPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSecondaryMailsPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGSecondaryMailsPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGSecondaryMailsPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSecondaryMailsPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSecondaryMailsPolicyDisabled:
    return @"DBTEAMLOGSecondaryMailsPolicyDisabled";
  case DBTEAMLOGSecondaryMailsPolicyEnabled:
    return @"DBTEAMLOGSecondaryMailsPolicyEnabled";
  case DBTEAMLOGSecondaryMailsPolicyOther:
    return @"DBTEAMLOGSecondaryMailsPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSecondaryMailsPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSecondaryMailsPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSecondaryMailsPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSecondaryMailsPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSecondaryMailsPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSecondaryMailsPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSecondaryMailsPolicy:other];
}

- (BOOL)isEqualToSecondaryMailsPolicy:(DBTEAMLOGSecondaryMailsPolicy *)aSecondaryMailsPolicy {
  if (self == aSecondaryMailsPolicy) {
    return YES;
  }
  if (self.tag != aSecondaryMailsPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSecondaryMailsPolicyDisabled:
    return [[self tagName] isEqual:[aSecondaryMailsPolicy tagName]];
  case DBTEAMLOGSecondaryMailsPolicyEnabled:
    return [[self tagName] isEqual:[aSecondaryMailsPolicy tagName]];
  case DBTEAMLOGSecondaryMailsPolicyOther:
    return [[self tagName] isEqual:[aSecondaryMailsPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSecondaryMailsPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSecondaryMailsPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSecondaryMailsPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGSecondaryMailsPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGSecondaryMailsPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSecondaryMailsPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSecondaryMailsPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSecondaryMailsPolicy.h"
#import "DBTEAMLOGSecondaryMailsPolicyChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSecondaryMailsPolicyChangedDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGSecondaryMailsPolicy *)previousValue
                            dNewValue:(DBTEAMLOGSecondaryMailsPolicy *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSecondaryMailsPolicyChangedDetails:other];
}

- (BOOL)isEqualToSecondaryMailsPolicyChangedDetails:
    (DBTEAMLOGSecondaryMailsPolicyChangedDetails *)aSecondaryMailsPolicyChangedDetails {
  if (self == aSecondaryMailsPolicyChangedDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aSecondaryMailsPolicyChangedDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSecondaryMailsPolicyChangedDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSecondaryMailsPolicyChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGSecondaryMailsPolicySerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGSecondaryMailsPolicySerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSecondaryMailsPolicyChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSecondaryMailsPolicy *previousValue =
      [DBTEAMLOGSecondaryMailsPolicySerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGSecondaryMailsPolicy *dNewValue =
      [DBTEAMLOGSecondaryMailsPolicySerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGSecondaryMailsPolicyChangedDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSecondaryMailsPolicyChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSecondaryMailsPolicyChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSecondaryMailsPolicyChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSecondaryMailsPolicyChangedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSecondaryMailsPolicyChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSecondaryMailsPolicyChangedType:other];
}

- (BOOL)isEqualToSecondaryMailsPolicyChangedType:
    (DBTEAMLOGSecondaryMailsPolicyChangedType *)aSecondaryMailsPolicyChangedType {
  if (self == aSecondaryMailsPolicyChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:aSecondaryMailsPolicyChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSecondaryMailsPolicyChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSecondaryMailsPolicyChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSecondaryMailsPolicyChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSecondaryMailsPolicyChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfAddGroupDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfAddGroupDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName
                                teamName:(NSString *)teamName
                       sharingPermission:(NSString *)sharingPermission {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);
  [DBStoneValidators nonnullValidator:nil](teamName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
    _sharingPermission = sharingPermission;
    _teamName = teamName;
  }
  return self;
}

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName
                                teamName:(NSString *)teamName {
  return [self initWithTargetAssetIndex:targetAssetIndex
                     originalFolderName:originalFolderName
                               teamName:teamName
                      sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfAddGroupDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfAddGroupDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfAddGroupDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  result = prime * result + [self.teamName hash];
  if (self.sharingPermission != nil) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfAddGroupDetails:other];
}

- (BOOL)isEqualToSfAddGroupDetails:(DBTEAMLOGSfAddGroupDetails *)aSfAddGroupDetails {
  if (self == aSfAddGroupDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfAddGroupDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfAddGroupDetails.originalFolderName]) {
    return NO;
  }
  if (![self.teamName isEqual:aSfAddGroupDetails.teamName]) {
    return NO;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSfAddGroupDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfAddGroupDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfAddGroupDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  jsonDict[@"team_name"] = valueObj.teamName;
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfAddGroupDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *teamName = valueDict[@"team_name"];
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfAddGroupDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                   originalFolderName:originalFolderName
                                                             teamName:teamName
                                                    sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfAddGroupType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfAddGroupType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfAddGroupTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfAddGroupTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfAddGroupTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfAddGroupType:other];
}

- (BOOL)isEqualToSfAddGroupType:(DBTEAMLOGSfAddGroupType *)aSfAddGroupType {
  if (self == aSfAddGroupType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfAddGroupType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfAddGroupTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfAddGroupType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfAddGroupType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfAddGroupType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName
                        sharedFolderType:(NSString *)sharedFolderType {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
  }
  return self;
}

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetAssetIndex:targetAssetIndex originalFolderName:originalFolderName sharedFolderType:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.sharedFolderType != nil) {
    result = prime * result + [self.sharedFolderType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfAllowNonMembersToViewSharedLinksDetails:other];
}

- (BOOL)isEqualToSfAllowNonMembersToViewSharedLinksDetails:
    (DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)aSfAllowNonMembersToViewSharedLinksDetails {
  if (self == aSfAllowNonMembersToViewSharedLinksDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfAllowNonMembersToViewSharedLinksDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfAllowNonMembersToViewSharedLinksDetails.originalFolderName]) {
    return NO;
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSfAllowNonMembersToViewSharedLinksDetails.sharedFolderType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;

  return [[DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                                           originalFolderName:originalFolderName
                                                                             sharedFolderType:sharedFolderType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfAllowNonMembersToViewSharedLinksType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfAllowNonMembersToViewSharedLinksType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfAllowNonMembersToViewSharedLinksType:other];
}

- (BOOL)isEqualToSfAllowNonMembersToViewSharedLinksType:
    (DBTEAMLOGSfAllowNonMembersToViewSharedLinksType *)aSfAllowNonMembersToViewSharedLinksType {
  if (self == aSfAllowNonMembersToViewSharedLinksType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfAllowNonMembersToViewSharedLinksType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfAllowNonMembersToViewSharedLinksType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfAllowNonMembersToViewSharedLinksType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfAllowNonMembersToViewSharedLinksType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfExternalInviteWarnDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfExternalInviteWarnDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName
                   dNewSharingPermission:(NSString *)dNewSharingPermission
               previousSharingPermission:(NSString *)previousSharingPermission {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
    _dNewSharingPermission = dNewSharingPermission;
    _previousSharingPermission = previousSharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetAssetIndex:targetAssetIndex
                     originalFolderName:originalFolderName
                  dNewSharingPermission:nil
              previousSharingPermission:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfExternalInviteWarnDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfExternalInviteWarnDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfExternalInviteWarnDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.dNewSharingPermission != nil) {
    result = prime * result + [self.dNewSharingPermission hash];
  }
  if (self.previousSharingPermission != nil) {
    result = prime * result + [self.previousSharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfExternalInviteWarnDetails:other];
}

- (BOOL)isEqualToSfExternalInviteWarnDetails:(DBTEAMLOGSfExternalInviteWarnDetails *)aSfExternalInviteWarnDetails {
  if (self == aSfExternalInviteWarnDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfExternalInviteWarnDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfExternalInviteWarnDetails.originalFolderName]) {
    return NO;
  }
  if (self.dNewSharingPermission) {
    if (![self.dNewSharingPermission isEqual:aSfExternalInviteWarnDetails.dNewSharingPermission]) {
      return NO;
    }
  }
  if (self.previousSharingPermission) {
    if (![self.previousSharingPermission isEqual:aSfExternalInviteWarnDetails.previousSharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfExternalInviteWarnDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfExternalInviteWarnDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.dNewSharingPermission) {
    jsonDict[@"new_sharing_permission"] = valueObj.dNewSharingPermission;
  }
  if (valueObj.previousSharingPermission) {
    jsonDict[@"previous_sharing_permission"] = valueObj.previousSharingPermission;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfExternalInviteWarnDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *dNewSharingPermission = valueDict[@"new_sharing_permission"] ?: nil;
  NSString *previousSharingPermission = valueDict[@"previous_sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfExternalInviteWarnDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                             originalFolderName:originalFolderName
                                                          dNewSharingPermission:dNewSharingPermission
                                                      previousSharingPermission:previousSharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfExternalInviteWarnType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfExternalInviteWarnType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfExternalInviteWarnTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfExternalInviteWarnTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfExternalInviteWarnTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfExternalInviteWarnType:other];
}

- (BOOL)isEqualToSfExternalInviteWarnType:(DBTEAMLOGSfExternalInviteWarnType *)aSfExternalInviteWarnType {
  if (self == aSfExternalInviteWarnType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfExternalInviteWarnType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfExternalInviteWarnTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfExternalInviteWarnType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfExternalInviteWarnType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfExternalInviteWarnType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfFbInviteChangeRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfFbInviteChangeRoleDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName
               previousSharingPermission:(NSString *)previousSharingPermission
                   dNewSharingPermission:(NSString *)dNewSharingPermission {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
    _previousSharingPermission = previousSharingPermission;
    _dNewSharingPermission = dNewSharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetAssetIndex:targetAssetIndex
                     originalFolderName:originalFolderName
              previousSharingPermission:nil
                  dNewSharingPermission:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.previousSharingPermission != nil) {
    result = prime * result + [self.previousSharingPermission hash];
  }
  if (self.dNewSharingPermission != nil) {
    result = prime * result + [self.dNewSharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfFbInviteChangeRoleDetails:other];
}

- (BOOL)isEqualToSfFbInviteChangeRoleDetails:(DBTEAMLOGSfFbInviteChangeRoleDetails *)aSfFbInviteChangeRoleDetails {
  if (self == aSfFbInviteChangeRoleDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfFbInviteChangeRoleDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfFbInviteChangeRoleDetails.originalFolderName]) {
    return NO;
  }
  if (self.previousSharingPermission) {
    if (![self.previousSharingPermission isEqual:aSfFbInviteChangeRoleDetails.previousSharingPermission]) {
      return NO;
    }
  }
  if (self.dNewSharingPermission) {
    if (![self.dNewSharingPermission isEqual:aSfFbInviteChangeRoleDetails.dNewSharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfFbInviteChangeRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.previousSharingPermission) {
    jsonDict[@"previous_sharing_permission"] = valueObj.previousSharingPermission;
  }
  if (valueObj.dNewSharingPermission) {
    jsonDict[@"new_sharing_permission"] = valueObj.dNewSharingPermission;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfFbInviteChangeRoleDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *previousSharingPermission = valueDict[@"previous_sharing_permission"] ?: nil;
  NSString *dNewSharingPermission = valueDict[@"new_sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfFbInviteChangeRoleDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                             originalFolderName:originalFolderName
                                                      previousSharingPermission:previousSharingPermission
                                                          dNewSharingPermission:dNewSharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfFbInviteChangeRoleType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfFbInviteChangeRoleType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfFbInviteChangeRoleTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfFbInviteChangeRoleTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfFbInviteChangeRoleTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfFbInviteChangeRoleType:other];
}

- (BOOL)isEqualToSfFbInviteChangeRoleType:(DBTEAMLOGSfFbInviteChangeRoleType *)aSfFbInviteChangeRoleType {
  if (self == aSfFbInviteChangeRoleType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfFbInviteChangeRoleType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfFbInviteChangeRoleTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfFbInviteChangeRoleType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfFbInviteChangeRoleType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfFbInviteChangeRoleType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfFbInviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfFbInviteDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName
                       sharingPermission:(NSString *)sharingPermission {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
    _sharingPermission = sharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetAssetIndex:targetAssetIndex originalFolderName:originalFolderName sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfFbInviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfFbInviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfFbInviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.sharingPermission != nil) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfFbInviteDetails:other];
}

- (BOOL)isEqualToSfFbInviteDetails:(DBTEAMLOGSfFbInviteDetails *)aSfFbInviteDetails {
  if (self == aSfFbInviteDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfFbInviteDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfFbInviteDetails.originalFolderName]) {
    return NO;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSfFbInviteDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfFbInviteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfFbInviteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfFbInviteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfFbInviteDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                   originalFolderName:originalFolderName
                                                    sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfFbInviteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfFbInviteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfFbInviteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfFbInviteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfFbInviteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfFbInviteType:other];
}

- (BOOL)isEqualToSfFbInviteType:(DBTEAMLOGSfFbInviteType *)aSfFbInviteType {
  if (self == aSfFbInviteType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfFbInviteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfFbInviteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfFbInviteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfFbInviteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfFbInviteType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfFbUninviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfFbUninviteDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfFbUninviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfFbUninviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfFbUninviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfFbUninviteDetails:other];
}

- (BOOL)isEqualToSfFbUninviteDetails:(DBTEAMLOGSfFbUninviteDetails *)aSfFbUninviteDetails {
  if (self == aSfFbUninviteDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfFbUninviteDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfFbUninviteDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfFbUninviteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfFbUninviteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfFbUninviteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSfFbUninviteDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                     originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfFbUninviteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfFbUninviteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfFbUninviteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfFbUninviteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfFbUninviteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfFbUninviteType:other];
}

- (BOOL)isEqualToSfFbUninviteType:(DBTEAMLOGSfFbUninviteType *)aSfFbUninviteType {
  if (self == aSfFbUninviteType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfFbUninviteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfFbUninviteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfFbUninviteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfFbUninviteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfFbUninviteType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfInviteGroupDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfInviteGroupDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfInviteGroupDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfInviteGroupDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfInviteGroupDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfInviteGroupDetails:other];
}

- (BOOL)isEqualToSfInviteGroupDetails:(DBTEAMLOGSfInviteGroupDetails *)aSfInviteGroupDetails {
  if (self == aSfInviteGroupDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfInviteGroupDetails.targetAssetIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfInviteGroupDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfInviteGroupDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfInviteGroupDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];

  return [[DBTEAMLOGSfInviteGroupDetails alloc] initWithTargetAssetIndex:targetAssetIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfInviteGroupType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfInviteGroupType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfInviteGroupTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfInviteGroupTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfInviteGroupTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfInviteGroupType:other];
}

- (BOOL)isEqualToSfInviteGroupType:(DBTEAMLOGSfInviteGroupType *)aSfInviteGroupType {
  if (self == aSfInviteGroupType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfInviteGroupType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfInviteGroupTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfInviteGroupType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfInviteGroupType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfInviteGroupType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamGrantAccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamGrantAccessDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamGrantAccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamGrantAccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamGrantAccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamGrantAccessDetails:other];
}

- (BOOL)isEqualToSfTeamGrantAccessDetails:(DBTEAMLOGSfTeamGrantAccessDetails *)aSfTeamGrantAccessDetails {
  if (self == aSfTeamGrantAccessDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfTeamGrantAccessDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamGrantAccessDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamGrantAccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamGrantAccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamGrantAccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSfTeamGrantAccessDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                          originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamGrantAccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamGrantAccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamGrantAccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamGrantAccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamGrantAccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamGrantAccessType:other];
}

- (BOOL)isEqualToSfTeamGrantAccessType:(DBTEAMLOGSfTeamGrantAccessType *)aSfTeamGrantAccessType {
  if (self == aSfTeamGrantAccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfTeamGrantAccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamGrantAccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamGrantAccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamGrantAccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfTeamGrantAccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamInviteChangeRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamInviteChangeRoleDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName
                   dNewSharingPermission:(NSString *)dNewSharingPermission
               previousSharingPermission:(NSString *)previousSharingPermission {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
    _dNewSharingPermission = dNewSharingPermission;
    _previousSharingPermission = previousSharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetAssetIndex:targetAssetIndex
                     originalFolderName:originalFolderName
                  dNewSharingPermission:nil
              previousSharingPermission:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.dNewSharingPermission != nil) {
    result = prime * result + [self.dNewSharingPermission hash];
  }
  if (self.previousSharingPermission != nil) {
    result = prime * result + [self.previousSharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamInviteChangeRoleDetails:other];
}

- (BOOL)isEqualToSfTeamInviteChangeRoleDetails:
    (DBTEAMLOGSfTeamInviteChangeRoleDetails *)aSfTeamInviteChangeRoleDetails {
  if (self == aSfTeamInviteChangeRoleDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfTeamInviteChangeRoleDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamInviteChangeRoleDetails.originalFolderName]) {
    return NO;
  }
  if (self.dNewSharingPermission) {
    if (![self.dNewSharingPermission isEqual:aSfTeamInviteChangeRoleDetails.dNewSharingPermission]) {
      return NO;
    }
  }
  if (self.previousSharingPermission) {
    if (![self.previousSharingPermission isEqual:aSfTeamInviteChangeRoleDetails.previousSharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamInviteChangeRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.dNewSharingPermission) {
    jsonDict[@"new_sharing_permission"] = valueObj.dNewSharingPermission;
  }
  if (valueObj.previousSharingPermission) {
    jsonDict[@"previous_sharing_permission"] = valueObj.previousSharingPermission;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamInviteChangeRoleDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *dNewSharingPermission = valueDict[@"new_sharing_permission"] ?: nil;
  NSString *previousSharingPermission = valueDict[@"previous_sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfTeamInviteChangeRoleDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                               originalFolderName:originalFolderName
                                                            dNewSharingPermission:dNewSharingPermission
                                                        previousSharingPermission:previousSharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamInviteChangeRoleType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamInviteChangeRoleType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamInviteChangeRoleTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamInviteChangeRoleTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamInviteChangeRoleTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamInviteChangeRoleType:other];
}

- (BOOL)isEqualToSfTeamInviteChangeRoleType:(DBTEAMLOGSfTeamInviteChangeRoleType *)aSfTeamInviteChangeRoleType {
  if (self == aSfTeamInviteChangeRoleType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfTeamInviteChangeRoleType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamInviteChangeRoleTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamInviteChangeRoleType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamInviteChangeRoleType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfTeamInviteChangeRoleType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamInviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamInviteDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName
                       sharingPermission:(NSString *)sharingPermission {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
    _sharingPermission = sharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetAssetIndex:targetAssetIndex originalFolderName:originalFolderName sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamInviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamInviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamInviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.sharingPermission != nil) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamInviteDetails:other];
}

- (BOOL)isEqualToSfTeamInviteDetails:(DBTEAMLOGSfTeamInviteDetails *)aSfTeamInviteDetails {
  if (self == aSfTeamInviteDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfTeamInviteDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamInviteDetails.originalFolderName]) {
    return NO;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSfTeamInviteDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamInviteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamInviteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamInviteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfTeamInviteDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                     originalFolderName:originalFolderName
                                                      sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamInviteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamInviteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamInviteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamInviteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamInviteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamInviteType:other];
}

- (BOOL)isEqualToSfTeamInviteType:(DBTEAMLOGSfTeamInviteType *)aSfTeamInviteType {
  if (self == aSfTeamInviteType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfTeamInviteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamInviteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamInviteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamInviteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfTeamInviteType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamJoinDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamJoinDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamJoinDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamJoinDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamJoinDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamJoinDetails:other];
}

- (BOOL)isEqualToSfTeamJoinDetails:(DBTEAMLOGSfTeamJoinDetails *)aSfTeamJoinDetails {
  if (self == aSfTeamJoinDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfTeamJoinDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamJoinDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamJoinDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamJoinDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamJoinDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSfTeamJoinDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                   originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamJoinFromOobLinkDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamJoinFromOobLinkDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName
                                tokenKey:(NSString *)tokenKey
                       sharingPermission:(NSString *)sharingPermission {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
    _tokenKey = tokenKey;
    _sharingPermission = sharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetAssetIndex:targetAssetIndex
                     originalFolderName:originalFolderName
                               tokenKey:nil
                      sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.tokenKey != nil) {
    result = prime * result + [self.tokenKey hash];
  }
  if (self.sharingPermission != nil) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamJoinFromOobLinkDetails:other];
}

- (BOOL)isEqualToSfTeamJoinFromOobLinkDetails:(DBTEAMLOGSfTeamJoinFromOobLinkDetails *)aSfTeamJoinFromOobLinkDetails {
  if (self == aSfTeamJoinFromOobLinkDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfTeamJoinFromOobLinkDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamJoinFromOobLinkDetails.originalFolderName]) {
    return NO;
  }
  if (self.tokenKey) {
    if (![self.tokenKey isEqual:aSfTeamJoinFromOobLinkDetails.tokenKey]) {
      return NO;
    }
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSfTeamJoinFromOobLinkDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamJoinFromOobLinkDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.tokenKey) {
    jsonDict[@"token_key"] = valueObj.tokenKey;
  }
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamJoinFromOobLinkDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *tokenKey = valueDict[@"token_key"] ?: nil;
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfTeamJoinFromOobLinkDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                              originalFolderName:originalFolderName
                                                                        tokenKey:tokenKey
                                                               sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamJoinFromOobLinkType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamJoinFromOobLinkType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamJoinFromOobLinkTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamJoinFromOobLinkTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamJoinFromOobLinkTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamJoinFromOobLinkType:other];
}

- (BOOL)isEqualToSfTeamJoinFromOobLinkType:(DBTEAMLOGSfTeamJoinFromOobLinkType *)aSfTeamJoinFromOobLinkType {
  if (self == aSfTeamJoinFromOobLinkType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfTeamJoinFromOobLinkType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamJoinFromOobLinkTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamJoinFromOobLinkType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamJoinFromOobLinkType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfTeamJoinFromOobLinkType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamJoinType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamJoinType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamJoinTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamJoinTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamJoinTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamJoinType:other];
}

- (BOOL)isEqualToSfTeamJoinType:(DBTEAMLOGSfTeamJoinType *)aSfTeamJoinType {
  if (self == aSfTeamJoinType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfTeamJoinType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamJoinTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamJoinType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamJoinType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfTeamJoinType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamUninviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamUninviteDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex
                      originalFolderName:(NSString *)originalFolderName {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);
  [DBStoneValidators nonnullValidator:nil](originalFolderName);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamUninviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamUninviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamUninviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamUninviteDetails:other];
}

- (BOOL)isEqualToSfTeamUninviteDetails:(DBTEAMLOGSfTeamUninviteDetails *)aSfTeamUninviteDetails {
  if (self == aSfTeamUninviteDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aSfTeamUninviteDetails.targetAssetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamUninviteDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamUninviteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamUninviteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamUninviteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSfTeamUninviteDetails alloc] initWithTargetAssetIndex:targetAssetIndex
                                                       originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamUninviteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamUninviteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamUninviteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSfTeamUninviteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamUninviteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamUninviteType:other];
}

- (BOOL)isEqualToSfTeamUninviteType:(DBTEAMLOGSfTeamUninviteType *)aSfTeamUninviteType {
  if (self == aSfTeamUninviteType) {
    return YES;
  }
  if (![self.description_ isEqual:aSfTeamUninviteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamUninviteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSfTeamUninviteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSfTeamUninviteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSfTeamUninviteType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddInviteesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddInviteesDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentAccessLevel:(DBSHARINGAccessLevel *)sharedContentAccessLevel
                                        invitees:(NSArray<NSString *> *)invitees {
  [DBStoneValidators nonnullValidator:nil](sharedContentAccessLevel);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators
                        arrayValidator:nil
                              maxItems:nil
                         itemValidator:[DBStoneValidators nonnullValidator:[DBStoneValidators stringValidator:nil
                                                                                                    maxLength:@(255)
                                                                                                      pattern:nil]]]](
      invitees);

  self = [super init];
  if (self) {
    _sharedContentAccessLevel = sharedContentAccessLevel;
    _invitees = invitees;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddInviteesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentAddInviteesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddInviteesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharedContentAccessLevel hash];
  result = prime * result + [self.invitees hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddInviteesDetails:other];
}

- (BOOL)isEqualToSharedContentAddInviteesDetails:
    (DBTEAMLOGSharedContentAddInviteesDetails *)aSharedContentAddInviteesDetails {
  if (self == aSharedContentAddInviteesDetails) {
    return YES;
  }
  if (![self.sharedContentAccessLevel isEqual:aSharedContentAddInviteesDetails.sharedContentAccessLevel]) {
    return NO;
  }
  if (![self.invitees isEqual:aSharedContentAddInviteesDetails.invitees]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddInviteesDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentAddInviteesDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_content_access_level"] =
      [DBSHARINGAccessLevelSerializer serialize:valueObj.sharedContentAccessLevel];
  jsonDict[@"invitees"] = [DBArraySerializer serialize:valueObj.invitees
                                             withBlock:^id(id elem0) {
                                               return elem0;
                                             }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentAddInviteesDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBSHARINGAccessLevel *sharedContentAccessLevel =
      [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"shared_content_access_level"]];
  NSArray<NSString *> *invitees = [DBArraySerializer deserialize:valueDict[@"invitees"]
                                                       withBlock:^id(id elem0) {
                                                         return elem0;
                                                       }];

  return [[DBTEAMLOGSharedContentAddInviteesDetails alloc] initWithSharedContentAccessLevel:sharedContentAccessLevel
                                                                                   invitees:invitees];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddInviteesType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddInviteesType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddInviteesTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentAddInviteesTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddInviteesTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddInviteesType:other];
}

- (BOOL)isEqualToSharedContentAddInviteesType:(DBTEAMLOGSharedContentAddInviteesType *)aSharedContentAddInviteesType {
  if (self == aSharedContentAddInviteesType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentAddInviteesType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddInviteesTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentAddInviteesType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentAddInviteesType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentAddInviteesType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddLinkExpiryDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddLinkExpiryDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSDate *)dNewValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddLinkExpiryDetails:other];
}

- (BOOL)isEqualToSharedContentAddLinkExpiryDetails:
    (DBTEAMLOGSharedContentAddLinkExpiryDetails *)aSharedContentAddLinkExpiryDetails {
  if (self == aSharedContentAddLinkExpiryDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aSharedContentAddLinkExpiryDetails.dNewValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentAddLinkExpiryDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBNSDateSerializer serialize:valueObj.dNewValue dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentAddLinkExpiryDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSDate *dNewValue = valueDict[@"new_value"]
                          ? [DBNSDateSerializer deserialize:valueDict[@"new_value"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                          : nil;

  return [[DBTEAMLOGSharedContentAddLinkExpiryDetails alloc] initWithDNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddLinkExpiryType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddLinkExpiryType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddLinkExpiryTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentAddLinkExpiryTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddLinkExpiryTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddLinkExpiryType:other];
}

- (BOOL)isEqualToSharedContentAddLinkExpiryType:
    (DBTEAMLOGSharedContentAddLinkExpiryType *)aSharedContentAddLinkExpiryType {
  if (self == aSharedContentAddLinkExpiryType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentAddLinkExpiryType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddLinkExpiryTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentAddLinkExpiryType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentAddLinkExpiryType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentAddLinkExpiryType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddLinkPasswordDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddLinkPasswordDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddLinkPasswordDetails:other];
}

- (BOOL)isEqualToSharedContentAddLinkPasswordDetails:
    (DBTEAMLOGSharedContentAddLinkPasswordDetails *)aSharedContentAddLinkPasswordDetails {
  if (self == aSharedContentAddLinkPasswordDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentAddLinkPasswordDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentAddLinkPasswordDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSharedContentAddLinkPasswordDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddLinkPasswordType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddLinkPasswordType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddLinkPasswordTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentAddLinkPasswordTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddLinkPasswordTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddLinkPasswordType:other];
}

- (BOOL)isEqualToSharedContentAddLinkPasswordType:
    (DBTEAMLOGSharedContentAddLinkPasswordType *)aSharedContentAddLinkPasswordType {
  if (self == aSharedContentAddLinkPasswordType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentAddLinkPasswordType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddLinkPasswordTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentAddLinkPasswordType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentAddLinkPasswordType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentAddLinkPasswordType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddMemberDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentAccessLevel:(DBSHARINGAccessLevel *)sharedContentAccessLevel {
  [DBStoneValidators nonnullValidator:nil](sharedContentAccessLevel);

  self = [super init];
  if (self) {
    _sharedContentAccessLevel = sharedContentAccessLevel;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentAddMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharedContentAccessLevel hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddMemberDetails:other];
}

- (BOOL)isEqualToSharedContentAddMemberDetails:
    (DBTEAMLOGSharedContentAddMemberDetails *)aSharedContentAddMemberDetails {
  if (self == aSharedContentAddMemberDetails) {
    return YES;
  }
  if (![self.sharedContentAccessLevel isEqual:aSharedContentAddMemberDetails.sharedContentAccessLevel]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddMemberDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentAddMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_content_access_level"] =
      [DBSHARINGAccessLevelSerializer serialize:valueObj.sharedContentAccessLevel];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentAddMemberDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBSHARINGAccessLevel *sharedContentAccessLevel =
      [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"shared_content_access_level"]];

  return [[DBTEAMLOGSharedContentAddMemberDetails alloc] initWithSharedContentAccessLevel:sharedContentAccessLevel];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddMemberType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddMemberType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddMemberTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentAddMemberTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddMemberTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddMemberType:other];
}

- (BOOL)isEqualToSharedContentAddMemberType:(DBTEAMLOGSharedContentAddMemberType *)aSharedContentAddMemberType {
  if (self == aSharedContentAddMemberType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentAddMemberType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddMemberTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentAddMemberType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentAddMemberType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentAddMemberType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDownloadPolicyType.h"
#import "DBTEAMLOGSharedContentChangeDownloadsPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeDownloadsPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDownloadPolicyType *)dNewValue
                    previousValue:(DBTEAMLOGDownloadPolicyType *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGDownloadPolicyType *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeDownloadsPolicyDetails:other];
}

- (BOOL)isEqualToSharedContentChangeDownloadsPolicyDetails:
    (DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)aSharedContentChangeDownloadsPolicyDetails {
  if (self == aSharedContentChangeDownloadsPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharedContentChangeDownloadsPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedContentChangeDownloadsPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGDownloadPolicyTypeSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDownloadPolicyTypeSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDownloadPolicyType *dNewValue = [DBTEAMLOGDownloadPolicyTypeSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGDownloadPolicyType *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGDownloadPolicyTypeSerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSharedContentChangeDownloadsPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeDownloadsPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeDownloadsPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeDownloadsPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeDownloadsPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeDownloadsPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeDownloadsPolicyType:other];
}

- (BOOL)isEqualToSharedContentChangeDownloadsPolicyType:
    (DBTEAMLOGSharedContentChangeDownloadsPolicyType *)aSharedContentChangeDownloadsPolicyType {
  if (self == aSharedContentChangeDownloadsPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentChangeDownloadsPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeDownloadsPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeDownloadsPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeDownloadsPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentChangeDownloadsPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeInviteeRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeInviteeRoleDetails

#pragma mark - Constructors

- (instancetype)initWithDNewAccessLevel:(DBSHARINGAccessLevel *)dNewAccessLevel
                                invitee:(NSString *)invitee
                    previousAccessLevel:(DBSHARINGAccessLevel *)previousAccessLevel {
  [DBStoneValidators nonnullValidator:nil](dNewAccessLevel);
  [DBStoneValidators nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](invitee);

  self = [super init];
  if (self) {
    _previousAccessLevel = previousAccessLevel;
    _dNewAccessLevel = dNewAccessLevel;
    _invitee = invitee;
  }
  return self;
}

- (instancetype)initWithDNewAccessLevel:(DBSHARINGAccessLevel *)dNewAccessLevel invitee:(NSString *)invitee {
  return [self initWithDNewAccessLevel:dNewAccessLevel invitee:invitee previousAccessLevel:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewAccessLevel hash];
  result = prime * result + [self.invitee hash];
  if (self.previousAccessLevel != nil) {
    result = prime * result + [self.previousAccessLevel hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeInviteeRoleDetails:other];
}

- (BOOL)isEqualToSharedContentChangeInviteeRoleDetails:
    (DBTEAMLOGSharedContentChangeInviteeRoleDetails *)aSharedContentChangeInviteeRoleDetails {
  if (self == aSharedContentChangeInviteeRoleDetails) {
    return YES;
  }
  if (![self.dNewAccessLevel isEqual:aSharedContentChangeInviteeRoleDetails.dNewAccessLevel]) {
    return NO;
  }
  if (![self.invitee isEqual:aSharedContentChangeInviteeRoleDetails.invitee]) {
    return NO;
  }
  if (self.previousAccessLevel) {
    if (![self.previousAccessLevel isEqual:aSharedContentChangeInviteeRoleDetails.previousAccessLevel]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeInviteeRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_access_level"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.dNewAccessLevel];
  jsonDict[@"invitee"] = valueObj.invitee;
  if (valueObj.previousAccessLevel) {
    jsonDict[@"previous_access_level"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.previousAccessLevel];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeInviteeRoleDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBSHARINGAccessLevel *dNewAccessLevel = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"new_access_level"]];
  NSString *invitee = valueDict[@"invitee"];
  DBSHARINGAccessLevel *previousAccessLevel =
      valueDict[@"previous_access_level"]
          ? [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"previous_access_level"]]
          : nil;

  return [[DBTEAMLOGSharedContentChangeInviteeRoleDetails alloc] initWithDNewAccessLevel:dNewAccessLevel
                                                                                 invitee:invitee
                                                                     previousAccessLevel:previousAccessLevel];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeInviteeRoleType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeInviteeRoleType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeInviteeRoleTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeInviteeRoleTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeInviteeRoleTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeInviteeRoleType:other];
}

- (BOOL)isEqualToSharedContentChangeInviteeRoleType:
    (DBTEAMLOGSharedContentChangeInviteeRoleType *)aSharedContentChangeInviteeRoleType {
  if (self == aSharedContentChangeInviteeRoleType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentChangeInviteeRoleType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeInviteeRoleTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeInviteeRoleType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeInviteeRoleType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentChangeInviteeRoleType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGLinkAudience.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeLinkAudienceDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeLinkAudienceDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBSHARINGLinkAudience *)dNewValue
                    previousValue:(DBSHARINGLinkAudience *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBSHARINGLinkAudience *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeLinkAudienceDetails:other];
}

- (BOOL)isEqualToSharedContentChangeLinkAudienceDetails:
    (DBTEAMLOGSharedContentChangeLinkAudienceDetails *)aSharedContentChangeLinkAudienceDetails {
  if (self == aSharedContentChangeLinkAudienceDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharedContentChangeLinkAudienceDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedContentChangeLinkAudienceDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeLinkAudienceDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBSHARINGLinkAudienceSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBSHARINGLinkAudienceSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeLinkAudienceDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBSHARINGLinkAudience *dNewValue = [DBSHARINGLinkAudienceSerializer deserialize:valueDict[@"new_value"]];
  DBSHARINGLinkAudience *previousValue =
      valueDict[@"previous_value"] ? [DBSHARINGLinkAudienceSerializer deserialize:valueDict[@"previous_value"]] : nil;

  return
      [[DBTEAMLOGSharedContentChangeLinkAudienceDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeLinkAudienceType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeLinkAudienceType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeLinkAudienceTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeLinkAudienceTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeLinkAudienceTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeLinkAudienceType:other];
}

- (BOOL)isEqualToSharedContentChangeLinkAudienceType:
    (DBTEAMLOGSharedContentChangeLinkAudienceType *)aSharedContentChangeLinkAudienceType {
  if (self == aSharedContentChangeLinkAudienceType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentChangeLinkAudienceType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeLinkAudienceTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeLinkAudienceType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeLinkAudienceType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentChangeLinkAudienceType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeLinkExpiryDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeLinkExpiryDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSDate *)dNewValue previousValue:(NSDate *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeLinkExpiryDetails:other];
}

- (BOOL)isEqualToSharedContentChangeLinkExpiryDetails:
    (DBTEAMLOGSharedContentChangeLinkExpiryDetails *)aSharedContentChangeLinkExpiryDetails {
  if (self == aSharedContentChangeLinkExpiryDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aSharedContentChangeLinkExpiryDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedContentChangeLinkExpiryDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeLinkExpiryDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBNSDateSerializer serialize:valueObj.dNewValue dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] =
        [DBNSDateSerializer serialize:valueObj.previousValue dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeLinkExpiryDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSDate *dNewValue = valueDict[@"new_value"]
                          ? [DBNSDateSerializer deserialize:valueDict[@"new_value"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                          : nil;
  NSDate *previousValue = valueDict[@"previous_value"] ? [DBNSDateSerializer deserialize:valueDict[@"previous_value"]
                                                                              dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                                                       : nil;

  return
      [[DBTEAMLOGSharedContentChangeLinkExpiryDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeLinkExpiryType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeLinkExpiryType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeLinkExpiryTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeLinkExpiryTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeLinkExpiryTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeLinkExpiryType:other];
}

- (BOOL)isEqualToSharedContentChangeLinkExpiryType:
    (DBTEAMLOGSharedContentChangeLinkExpiryType *)aSharedContentChangeLinkExpiryType {
  if (self == aSharedContentChangeLinkExpiryType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentChangeLinkExpiryType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeLinkExpiryTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeLinkExpiryType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeLinkExpiryType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentChangeLinkExpiryType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeLinkPasswordDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeLinkPasswordDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeLinkPasswordDetails:other];
}

- (BOOL)isEqualToSharedContentChangeLinkPasswordDetails:
    (DBTEAMLOGSharedContentChangeLinkPasswordDetails *)aSharedContentChangeLinkPasswordDetails {
  if (self == aSharedContentChangeLinkPasswordDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeLinkPasswordDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeLinkPasswordDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSharedContentChangeLinkPasswordDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeLinkPasswordType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeLinkPasswordType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeLinkPasswordTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeLinkPasswordTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeLinkPasswordTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeLinkPasswordType:other];
}

- (BOOL)isEqualToSharedContentChangeLinkPasswordType:
    (DBTEAMLOGSharedContentChangeLinkPasswordType *)aSharedContentChangeLinkPasswordType {
  if (self == aSharedContentChangeLinkPasswordType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentChangeLinkPasswordType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeLinkPasswordTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeLinkPasswordType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeLinkPasswordType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentChangeLinkPasswordType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeMemberRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeMemberRoleDetails

#pragma mark - Constructors

- (instancetype)initWithDNewAccessLevel:(DBSHARINGAccessLevel *)dNewAccessLevel
                    previousAccessLevel:(DBSHARINGAccessLevel *)previousAccessLevel {
  [DBStoneValidators nonnullValidator:nil](dNewAccessLevel);

  self = [super init];
  if (self) {
    _previousAccessLevel = previousAccessLevel;
    _dNewAccessLevel = dNewAccessLevel;
  }
  return self;
}

- (instancetype)initWithDNewAccessLevel:(DBSHARINGAccessLevel *)dNewAccessLevel {
  return [self initWithDNewAccessLevel:dNewAccessLevel previousAccessLevel:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewAccessLevel hash];
  if (self.previousAccessLevel != nil) {
    result = prime * result + [self.previousAccessLevel hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeMemberRoleDetails:other];
}

- (BOOL)isEqualToSharedContentChangeMemberRoleDetails:
    (DBTEAMLOGSharedContentChangeMemberRoleDetails *)aSharedContentChangeMemberRoleDetails {
  if (self == aSharedContentChangeMemberRoleDetails) {
    return YES;
  }
  if (![self.dNewAccessLevel isEqual:aSharedContentChangeMemberRoleDetails.dNewAccessLevel]) {
    return NO;
  }
  if (self.previousAccessLevel) {
    if (![self.previousAccessLevel isEqual:aSharedContentChangeMemberRoleDetails.previousAccessLevel]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeMemberRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_access_level"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.dNewAccessLevel];
  if (valueObj.previousAccessLevel) {
    jsonDict[@"previous_access_level"] = [DBSHARINGAccessLevelSerializer serialize:valueObj.previousAccessLevel];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeMemberRoleDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBSHARINGAccessLevel *dNewAccessLevel = [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"new_access_level"]];
  DBSHARINGAccessLevel *previousAccessLevel =
      valueDict[@"previous_access_level"]
          ? [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"previous_access_level"]]
          : nil;

  return [[DBTEAMLOGSharedContentChangeMemberRoleDetails alloc] initWithDNewAccessLevel:dNewAccessLevel
                                                                    previousAccessLevel:previousAccessLevel];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeMemberRoleType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeMemberRoleType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeMemberRoleTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeMemberRoleTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeMemberRoleTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeMemberRoleType:other];
}

- (BOOL)isEqualToSharedContentChangeMemberRoleType:
    (DBTEAMLOGSharedContentChangeMemberRoleType *)aSharedContentChangeMemberRoleType {
  if (self == aSharedContentChangeMemberRoleType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentChangeMemberRoleType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeMemberRoleTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeMemberRoleType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeMemberRoleType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentChangeMemberRoleType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGViewerInfoPolicy.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBSHARINGViewerInfoPolicy *)dNewValue
                    previousValue:(DBSHARINGViewerInfoPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBSHARINGViewerInfoPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeViewerInfoPolicyDetails:other];
}

- (BOOL)isEqualToSharedContentChangeViewerInfoPolicyDetails:
    (DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)aSharedContentChangeViewerInfoPolicyDetails {
  if (self == aSharedContentChangeViewerInfoPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharedContentChangeViewerInfoPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedContentChangeViewerInfoPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBSHARINGViewerInfoPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBSHARINGViewerInfoPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBSHARINGViewerInfoPolicy *dNewValue = [DBSHARINGViewerInfoPolicySerializer deserialize:valueDict[@"new_value"]];
  DBSHARINGViewerInfoPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBSHARINGViewerInfoPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                          previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeViewerInfoPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeViewerInfoPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeViewerInfoPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentChangeViewerInfoPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeViewerInfoPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeViewerInfoPolicyType:other];
}

- (BOOL)isEqualToSharedContentChangeViewerInfoPolicyType:
    (DBTEAMLOGSharedContentChangeViewerInfoPolicyType *)aSharedContentChangeViewerInfoPolicyType {
  if (self == aSharedContentChangeViewerInfoPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentChangeViewerInfoPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeViewerInfoPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentChangeViewerInfoPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentChangeViewerInfoPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentChangeViewerInfoPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentClaimInvitationDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentClaimInvitationDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink {

  self = [super init];
  if (self) {
    _sharedContentLink = sharedContentLink;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharedContentLink:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentClaimInvitationDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentClaimInvitationDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentClaimInvitationDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharedContentLink != nil) {
    result = prime * result + [self.sharedContentLink hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentClaimInvitationDetails:other];
}

- (BOOL)isEqualToSharedContentClaimInvitationDetails:
    (DBTEAMLOGSharedContentClaimInvitationDetails *)aSharedContentClaimInvitationDetails {
  if (self == aSharedContentClaimInvitationDetails) {
    return YES;
  }
  if (self.sharedContentLink) {
    if (![self.sharedContentLink isEqual:aSharedContentClaimInvitationDetails.sharedContentLink]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentClaimInvitationDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentClaimInvitationDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharedContentLink) {
    jsonDict[@"shared_content_link"] = valueObj.sharedContentLink;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentClaimInvitationDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sharedContentLink = valueDict[@"shared_content_link"] ?: nil;

  return [[DBTEAMLOGSharedContentClaimInvitationDetails alloc] initWithSharedContentLink:sharedContentLink];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentClaimInvitationType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentClaimInvitationType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentClaimInvitationTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentClaimInvitationTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentClaimInvitationTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentClaimInvitationType:other];
}

- (BOOL)isEqualToSharedContentClaimInvitationType:
    (DBTEAMLOGSharedContentClaimInvitationType *)aSharedContentClaimInvitationType {
  if (self == aSharedContentClaimInvitationType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentClaimInvitationType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentClaimInvitationTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentClaimInvitationType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentClaimInvitationType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentClaimInvitationType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentCopyDetails.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentCopyDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink
                 sharedContentAccessLevel:(DBSHARINGAccessLevel *)sharedContentAccessLevel
                          destinationPath:(NSString *)destinationPath
                       sharedContentOwner:(DBTEAMLOGUserLogInfo *)sharedContentOwner {
  [DBStoneValidators nonnullValidator:nil](sharedContentLink);
  [DBStoneValidators nonnullValidator:nil](sharedContentAccessLevel);
  [DBStoneValidators nonnullValidator:nil](destinationPath);

  self = [super init];
  if (self) {
    _sharedContentLink = sharedContentLink;
    _sharedContentOwner = sharedContentOwner;
    _sharedContentAccessLevel = sharedContentAccessLevel;
    _destinationPath = destinationPath;
  }
  return self;
}

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink
                 sharedContentAccessLevel:(DBSHARINGAccessLevel *)sharedContentAccessLevel
                          destinationPath:(NSString *)destinationPath {
  return [self initWithSharedContentLink:sharedContentLink
                sharedContentAccessLevel:sharedContentAccessLevel
                         destinationPath:destinationPath
                      sharedContentOwner:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentCopyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentCopyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentCopyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharedContentLink hash];
  result = prime * result + [self.sharedContentAccessLevel hash];
  result = prime * result + [self.destinationPath hash];
  if (self.sharedContentOwner != nil) {
    result = prime * result + [self.sharedContentOwner hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentCopyDetails:other];
}

- (BOOL)isEqualToSharedContentCopyDetails:(DBTEAMLOGSharedContentCopyDetails *)aSharedContentCopyDetails {
  if (self == aSharedContentCopyDetails) {
    return YES;
  }
  if (![self.sharedContentLink isEqual:aSharedContentCopyDetails.sharedContentLink]) {
    return NO;
  }
  if (![self.sharedContentAccessLevel isEqual:aSharedContentCopyDetails.sharedContentAccessLevel]) {
    return NO;
  }
  if (![self.destinationPath isEqual:aSharedContentCopyDetails.destinationPath]) {
    return NO;
  }
  if (self.sharedContentOwner) {
    if (![self.sharedContentOwner isEqual:aSharedContentCopyDetails.sharedContentOwner]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentCopyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentCopyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_content_link"] = valueObj.sharedContentLink;
  jsonDict[@"shared_content_access_level"] =
      [DBSHARINGAccessLevelSerializer serialize:valueObj.sharedContentAccessLevel];
  jsonDict[@"destination_path"] = valueObj.destinationPath;
  if (valueObj.sharedContentOwner) {
    jsonDict[@"shared_content_owner"] = [DBTEAMLOGUserLogInfoSerializer serialize:valueObj.sharedContentOwner];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentCopyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sharedContentLink = valueDict[@"shared_content_link"];
  DBSHARINGAccessLevel *sharedContentAccessLevel =
      [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"shared_content_access_level"]];
  NSString *destinationPath = valueDict[@"destination_path"];
  DBTEAMLOGUserLogInfo *sharedContentOwner =
      valueDict[@"shared_content_owner"]
          ? [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"shared_content_owner"]]
          : nil;

  return [[DBTEAMLOGSharedContentCopyDetails alloc] initWithSharedContentLink:sharedContentLink
                                                     sharedContentAccessLevel:sharedContentAccessLevel
                                                              destinationPath:destinationPath
                                                           sharedContentOwner:sharedContentOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentCopyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentCopyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentCopyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentCopyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentCopyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentCopyType:other];
}

- (BOOL)isEqualToSharedContentCopyType:(DBTEAMLOGSharedContentCopyType *)aSharedContentCopyType {
  if (self == aSharedContentCopyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentCopyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentCopyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentCopyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentCopyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentCopyType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentDownloadDetails.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentDownloadDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink
                 sharedContentAccessLevel:(DBSHARINGAccessLevel *)sharedContentAccessLevel
                       sharedContentOwner:(DBTEAMLOGUserLogInfo *)sharedContentOwner {
  [DBStoneValidators nonnullValidator:nil](sharedContentLink);
  [DBStoneValidators nonnullValidator:nil](sharedContentAccessLevel);

  self = [super init];
  if (self) {
    _sharedContentLink = sharedContentLink;
    _sharedContentOwner = sharedContentOwner;
    _sharedContentAccessLevel = sharedContentAccessLevel;
  }
  return self;
}

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink
                 sharedContentAccessLevel:(DBSHARINGAccessLevel *)sharedContentAccessLevel {
  return [self initWithSharedContentLink:sharedContentLink
                sharedContentAccessLevel:sharedContentAccessLevel
                      sharedContentOwner:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentDownloadDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentDownloadDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentDownloadDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharedContentLink hash];
  result = prime * result + [self.sharedContentAccessLevel hash];
  if (self.sharedContentOwner != nil) {
    result = prime * result + [self.sharedContentOwner hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentDownloadDetails:other];
}

- (BOOL)isEqualToSharedContentDownloadDetails:(DBTEAMLOGSharedContentDownloadDetails *)aSharedContentDownloadDetails {
  if (self == aSharedContentDownloadDetails) {
    return YES;
  }
  if (![self.sharedContentLink isEqual:aSharedContentDownloadDetails.sharedContentLink]) {
    return NO;
  }
  if (![self.sharedContentAccessLevel isEqual:aSharedContentDownloadDetails.sharedContentAccessLevel]) {
    return NO;
  }
  if (self.sharedContentOwner) {
    if (![self.sharedContentOwner isEqual:aSharedContentDownloadDetails.sharedContentOwner]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentDownloadDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentDownloadDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_content_link"] = valueObj.sharedContentLink;
  jsonDict[@"shared_content_access_level"] =
      [DBSHARINGAccessLevelSerializer serialize:valueObj.sharedContentAccessLevel];
  if (valueObj.sharedContentOwner) {
    jsonDict[@"shared_content_owner"] = [DBTEAMLOGUserLogInfoSerializer serialize:valueObj.sharedContentOwner];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentDownloadDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sharedContentLink = valueDict[@"shared_content_link"];
  DBSHARINGAccessLevel *sharedContentAccessLevel =
      [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"shared_content_access_level"]];
  DBTEAMLOGUserLogInfo *sharedContentOwner =
      valueDict[@"shared_content_owner"]
          ? [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"shared_content_owner"]]
          : nil;

  return [[DBTEAMLOGSharedContentDownloadDetails alloc] initWithSharedContentLink:sharedContentLink
                                                         sharedContentAccessLevel:sharedContentAccessLevel
                                                               sharedContentOwner:sharedContentOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentDownloadType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentDownloadType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentDownloadTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentDownloadTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentDownloadTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentDownloadType:other];
}

- (BOOL)isEqualToSharedContentDownloadType:(DBTEAMLOGSharedContentDownloadType *)aSharedContentDownloadType {
  if (self == aSharedContentDownloadType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentDownloadType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentDownloadTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentDownloadType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentDownloadType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentDownloadType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRelinquishMembershipDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRelinquishMembershipDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRelinquishMembershipDetails:other];
}

- (BOOL)isEqualToSharedContentRelinquishMembershipDetails:
    (DBTEAMLOGSharedContentRelinquishMembershipDetails *)aSharedContentRelinquishMembershipDetails {
  if (self == aSharedContentRelinquishMembershipDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRelinquishMembershipDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRelinquishMembershipDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSharedContentRelinquishMembershipDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRelinquishMembershipType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRelinquishMembershipType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRelinquishMembershipTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRelinquishMembershipTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRelinquishMembershipTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRelinquishMembershipType:other];
}

- (BOOL)isEqualToSharedContentRelinquishMembershipType:
    (DBTEAMLOGSharedContentRelinquishMembershipType *)aSharedContentRelinquishMembershipType {
  if (self == aSharedContentRelinquishMembershipType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentRelinquishMembershipType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRelinquishMembershipTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRelinquishMembershipType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRelinquishMembershipType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentRelinquishMembershipType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveInviteesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveInviteesDetails

#pragma mark - Constructors

- (instancetype)initWithInvitees:(NSArray<NSString *> *)invitees {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators
                        arrayValidator:nil
                              maxItems:nil
                         itemValidator:[DBStoneValidators nonnullValidator:[DBStoneValidators stringValidator:nil
                                                                                                    maxLength:@(255)
                                                                                                      pattern:nil]]]](
      invitees);

  self = [super init];
  if (self) {
    _invitees = invitees;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.invitees hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveInviteesDetails:other];
}

- (BOOL)isEqualToSharedContentRemoveInviteesDetails:
    (DBTEAMLOGSharedContentRemoveInviteesDetails *)aSharedContentRemoveInviteesDetails {
  if (self == aSharedContentRemoveInviteesDetails) {
    return YES;
  }
  if (![self.invitees isEqual:aSharedContentRemoveInviteesDetails.invitees]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRemoveInviteesDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"invitees"] = [DBArraySerializer serialize:valueObj.invitees
                                             withBlock:^id(id elem0) {
                                               return elem0;
                                             }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRemoveInviteesDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<NSString *> *invitees = [DBArraySerializer deserialize:valueDict[@"invitees"]
                                                       withBlock:^id(id elem0) {
                                                         return elem0;
                                                       }];

  return [[DBTEAMLOGSharedContentRemoveInviteesDetails alloc] initWithInvitees:invitees];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveInviteesType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveInviteesType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveInviteesTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRemoveInviteesTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveInviteesTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveInviteesType:other];
}

- (BOOL)isEqualToSharedContentRemoveInviteesType:
    (DBTEAMLOGSharedContentRemoveInviteesType *)aSharedContentRemoveInviteesType {
  if (self == aSharedContentRemoveInviteesType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentRemoveInviteesType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveInviteesTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRemoveInviteesType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRemoveInviteesType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentRemoveInviteesType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveLinkExpiryDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveLinkExpiryDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSDate *)previousValue {

  self = [super init];
  if (self) {
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithPreviousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveLinkExpiryDetails:other];
}

- (BOOL)isEqualToSharedContentRemoveLinkExpiryDetails:
    (DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)aSharedContentRemoveLinkExpiryDetails {
  if (self == aSharedContentRemoveLinkExpiryDetails) {
    return YES;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedContentRemoveLinkExpiryDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] =
        [DBNSDateSerializer serialize:valueObj.previousValue dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSDate *previousValue = valueDict[@"previous_value"] ? [DBNSDateSerializer deserialize:valueDict[@"previous_value"]
                                                                              dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                                                       : nil;

  return [[DBTEAMLOGSharedContentRemoveLinkExpiryDetails alloc] initWithPreviousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveLinkExpiryType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveLinkExpiryType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveLinkExpiryTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRemoveLinkExpiryTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveLinkExpiryTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveLinkExpiryType:other];
}

- (BOOL)isEqualToSharedContentRemoveLinkExpiryType:
    (DBTEAMLOGSharedContentRemoveLinkExpiryType *)aSharedContentRemoveLinkExpiryType {
  if (self == aSharedContentRemoveLinkExpiryType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentRemoveLinkExpiryType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveLinkExpiryTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRemoveLinkExpiryType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRemoveLinkExpiryType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentRemoveLinkExpiryType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveLinkPasswordDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveLinkPasswordDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveLinkPasswordDetails:other];
}

- (BOOL)isEqualToSharedContentRemoveLinkPasswordDetails:
    (DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)aSharedContentRemoveLinkPasswordDetails {
  if (self == aSharedContentRemoveLinkPasswordDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSharedContentRemoveLinkPasswordDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveLinkPasswordType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveLinkPasswordType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveLinkPasswordTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRemoveLinkPasswordTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveLinkPasswordTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveLinkPasswordType:other];
}

- (BOOL)isEqualToSharedContentRemoveLinkPasswordType:
    (DBTEAMLOGSharedContentRemoveLinkPasswordType *)aSharedContentRemoveLinkPasswordType {
  if (self == aSharedContentRemoveLinkPasswordType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentRemoveLinkPasswordType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveLinkPasswordTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRemoveLinkPasswordType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRemoveLinkPasswordType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentRemoveLinkPasswordType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveMemberDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentAccessLevel:(DBSHARINGAccessLevel *)sharedContentAccessLevel {

  self = [super init];
  if (self) {
    _sharedContentAccessLevel = sharedContentAccessLevel;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharedContentAccessLevel:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRemoveMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharedContentAccessLevel != nil) {
    result = prime * result + [self.sharedContentAccessLevel hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveMemberDetails:other];
}

- (BOOL)isEqualToSharedContentRemoveMemberDetails:
    (DBTEAMLOGSharedContentRemoveMemberDetails *)aSharedContentRemoveMemberDetails {
  if (self == aSharedContentRemoveMemberDetails) {
    return YES;
  }
  if (self.sharedContentAccessLevel) {
    if (![self.sharedContentAccessLevel isEqual:aSharedContentRemoveMemberDetails.sharedContentAccessLevel]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveMemberDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRemoveMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharedContentAccessLevel) {
    jsonDict[@"shared_content_access_level"] =
        [DBSHARINGAccessLevelSerializer serialize:valueObj.sharedContentAccessLevel];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRemoveMemberDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBSHARINGAccessLevel *sharedContentAccessLevel =
      valueDict[@"shared_content_access_level"]
          ? [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"shared_content_access_level"]]
          : nil;

  return [[DBTEAMLOGSharedContentRemoveMemberDetails alloc] initWithSharedContentAccessLevel:sharedContentAccessLevel];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveMemberType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveMemberType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveMemberTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRemoveMemberTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveMemberTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveMemberType:other];
}

- (BOOL)isEqualToSharedContentRemoveMemberType:
    (DBTEAMLOGSharedContentRemoveMemberType *)aSharedContentRemoveMemberType {
  if (self == aSharedContentRemoveMemberType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentRemoveMemberType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveMemberTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRemoveMemberType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRemoveMemberType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentRemoveMemberType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRequestAccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRequestAccessDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink {

  self = [super init];
  if (self) {
    _sharedContentLink = sharedContentLink;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharedContentLink:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRequestAccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRequestAccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRequestAccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharedContentLink != nil) {
    result = prime * result + [self.sharedContentLink hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRequestAccessDetails:other];
}

- (BOOL)isEqualToSharedContentRequestAccessDetails:
    (DBTEAMLOGSharedContentRequestAccessDetails *)aSharedContentRequestAccessDetails {
  if (self == aSharedContentRequestAccessDetails) {
    return YES;
  }
  if (self.sharedContentLink) {
    if (![self.sharedContentLink isEqual:aSharedContentRequestAccessDetails.sharedContentLink]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRequestAccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRequestAccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharedContentLink) {
    jsonDict[@"shared_content_link"] = valueObj.sharedContentLink;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRequestAccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sharedContentLink = valueDict[@"shared_content_link"] ?: nil;

  return [[DBTEAMLOGSharedContentRequestAccessDetails alloc] initWithSharedContentLink:sharedContentLink];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRequestAccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRequestAccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRequestAccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentRequestAccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRequestAccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRequestAccessType:other];
}

- (BOOL)isEqualToSharedContentRequestAccessType:
    (DBTEAMLOGSharedContentRequestAccessType *)aSharedContentRequestAccessType {
  if (self == aSharedContentRequestAccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentRequestAccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRequestAccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentRequestAccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentRequestAccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentRequestAccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentUnshareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentUnshareDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentUnshareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentUnshareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentUnshareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentUnshareDetails:other];
}

- (BOOL)isEqualToSharedContentUnshareDetails:(DBTEAMLOGSharedContentUnshareDetails *)aSharedContentUnshareDetails {
  if (self == aSharedContentUnshareDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentUnshareDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentUnshareDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentUnshareDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSharedContentUnshareDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentUnshareType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentUnshareType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentUnshareTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentUnshareTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentUnshareTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentUnshareType:other];
}

- (BOOL)isEqualToSharedContentUnshareType:(DBTEAMLOGSharedContentUnshareType *)aSharedContentUnshareType {
  if (self == aSharedContentUnshareType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentUnshareType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentUnshareTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentUnshareType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentUnshareType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentUnshareType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGAccessLevel.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentViewDetails.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentViewDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink
                 sharedContentAccessLevel:(DBSHARINGAccessLevel *)sharedContentAccessLevel
                       sharedContentOwner:(DBTEAMLOGUserLogInfo *)sharedContentOwner {
  [DBStoneValidators nonnullValidator:nil](sharedContentLink);
  [DBStoneValidators nonnullValidator:nil](sharedContentAccessLevel);

  self = [super init];
  if (self) {
    _sharedContentLink = sharedContentLink;
    _sharedContentOwner = sharedContentOwner;
    _sharedContentAccessLevel = sharedContentAccessLevel;
  }
  return self;
}

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink
                 sharedContentAccessLevel:(DBSHARINGAccessLevel *)sharedContentAccessLevel {
  return [self initWithSharedContentLink:sharedContentLink
                sharedContentAccessLevel:sharedContentAccessLevel
                      sharedContentOwner:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentViewDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentViewDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentViewDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharedContentLink hash];
  result = prime * result + [self.sharedContentAccessLevel hash];
  if (self.sharedContentOwner != nil) {
    result = prime * result + [self.sharedContentOwner hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentViewDetails:other];
}

- (BOOL)isEqualToSharedContentViewDetails:(DBTEAMLOGSharedContentViewDetails *)aSharedContentViewDetails {
  if (self == aSharedContentViewDetails) {
    return YES;
  }
  if (![self.sharedContentLink isEqual:aSharedContentViewDetails.sharedContentLink]) {
    return NO;
  }
  if (![self.sharedContentAccessLevel isEqual:aSharedContentViewDetails.sharedContentAccessLevel]) {
    return NO;
  }
  if (self.sharedContentOwner) {
    if (![self.sharedContentOwner isEqual:aSharedContentViewDetails.sharedContentOwner]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentViewDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentViewDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_content_link"] = valueObj.sharedContentLink;
  jsonDict[@"shared_content_access_level"] =
      [DBSHARINGAccessLevelSerializer serialize:valueObj.sharedContentAccessLevel];
  if (valueObj.sharedContentOwner) {
    jsonDict[@"shared_content_owner"] = [DBTEAMLOGUserLogInfoSerializer serialize:valueObj.sharedContentOwner];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentViewDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sharedContentLink = valueDict[@"shared_content_link"];
  DBSHARINGAccessLevel *sharedContentAccessLevel =
      [DBSHARINGAccessLevelSerializer deserialize:valueDict[@"shared_content_access_level"]];
  DBTEAMLOGUserLogInfo *sharedContentOwner =
      valueDict[@"shared_content_owner"]
          ? [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"shared_content_owner"]]
          : nil;

  return [[DBTEAMLOGSharedContentViewDetails alloc] initWithSharedContentLink:sharedContentLink
                                                     sharedContentAccessLevel:sharedContentAccessLevel
                                                           sharedContentOwner:sharedContentOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentViewType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentViewType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentViewTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedContentViewTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentViewTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentViewType:other];
}

- (BOOL)isEqualToSharedContentViewType:(DBTEAMLOGSharedContentViewType *)aSharedContentViewType {
  if (self == aSharedContentViewType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedContentViewType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentViewTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedContentViewType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedContentViewType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedContentViewType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGSharedLinkPolicy.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderChangeLinkPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeLinkPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBSHARINGSharedLinkPolicy *)dNewValue
                    previousValue:(DBSHARINGSharedLinkPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBSHARINGSharedLinkPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeLinkPolicyDetails:other];
}

- (BOOL)isEqualToSharedFolderChangeLinkPolicyDetails:
    (DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)aSharedFolderChangeLinkPolicyDetails {
  if (self == aSharedFolderChangeLinkPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharedFolderChangeLinkPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedFolderChangeLinkPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBSHARINGSharedLinkPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBSHARINGSharedLinkPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBSHARINGSharedLinkPolicy *dNewValue = [DBSHARINGSharedLinkPolicySerializer deserialize:valueDict[@"new_value"]];
  DBSHARINGSharedLinkPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBSHARINGSharedLinkPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSharedFolderChangeLinkPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderChangeLinkPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeLinkPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeLinkPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderChangeLinkPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeLinkPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeLinkPolicyType:other];
}

- (BOOL)isEqualToSharedFolderChangeLinkPolicyType:
    (DBTEAMLOGSharedFolderChangeLinkPolicyType *)aSharedFolderChangeLinkPolicyType {
  if (self == aSharedFolderChangeLinkPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedFolderChangeLinkPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeLinkPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderChangeLinkPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderChangeLinkPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedFolderChangeLinkPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails.h"
#import "DBTEAMLOGSharedFolderMembersInheritancePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGSharedFolderMembersInheritancePolicy *)dNewValue
                    previousValue:(DBTEAMLOGSharedFolderMembersInheritancePolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGSharedFolderMembersInheritancePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeMembersInheritancePolicyDetails:other];
}

- (BOOL)isEqualToSharedFolderChangeMembersInheritancePolicyDetails:
    (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails *)aSharedFolderChangeMembersInheritancePolicyDetails {
  if (self == aSharedFolderChangeMembersInheritancePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharedFolderChangeMembersInheritancePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedFolderChangeMembersInheritancePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGSharedFolderMembersInheritancePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] =
        [DBTEAMLOGSharedFolderMembersInheritancePolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSharedFolderMembersInheritancePolicy *dNewValue =
      [DBTEAMLOGSharedFolderMembersInheritancePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGSharedFolderMembersInheritancePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGSharedFolderMembersInheritancePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails alloc] initWithDNewValue:dNewValue
                                                                                 previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeMembersInheritancePolicyType:other];
}

- (BOOL)isEqualToSharedFolderChangeMembersInheritancePolicyType:
    (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType *)aSharedFolderChangeMembersInheritancePolicyType {
  if (self == aSharedFolderChangeMembersInheritancePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedFolderChangeMembersInheritancePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGAclUpdatePolicy.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBSHARINGAclUpdatePolicy *)dNewValue
                    previousValue:(DBSHARINGAclUpdatePolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBSHARINGAclUpdatePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeMembersManagementPolicyDetails:other];
}

- (BOOL)isEqualToSharedFolderChangeMembersManagementPolicyDetails:
    (DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails *)aSharedFolderChangeMembersManagementPolicyDetails {
  if (self == aSharedFolderChangeMembersManagementPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharedFolderChangeMembersManagementPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedFolderChangeMembersManagementPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBSHARINGAclUpdatePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBSHARINGAclUpdatePolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBSHARINGAclUpdatePolicy *dNewValue = [DBSHARINGAclUpdatePolicySerializer deserialize:valueDict[@"new_value"]];
  DBSHARINGAclUpdatePolicy *previousValue =
      valueDict[@"previous_value"] ? [DBSHARINGAclUpdatePolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                                previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderChangeMembersManagementPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeMembersManagementPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeMembersManagementPolicyType:other];
}

- (BOOL)isEqualToSharedFolderChangeMembersManagementPolicyType:
    (DBTEAMLOGSharedFolderChangeMembersManagementPolicyType *)aSharedFolderChangeMembersManagementPolicyType {
  if (self == aSharedFolderChangeMembersManagementPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedFolderChangeMembersManagementPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderChangeMembersManagementPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderChangeMembersManagementPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedFolderChangeMembersManagementPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBSHARINGMemberPolicy.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderChangeMembersPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeMembersPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBSHARINGMemberPolicy *)dNewValue
                    previousValue:(DBSHARINGMemberPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBSHARINGMemberPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeMembersPolicyDetails:other];
}

- (BOOL)isEqualToSharedFolderChangeMembersPolicyDetails:
    (DBTEAMLOGSharedFolderChangeMembersPolicyDetails *)aSharedFolderChangeMembersPolicyDetails {
  if (self == aSharedFolderChangeMembersPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharedFolderChangeMembersPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedFolderChangeMembersPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderChangeMembersPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBSHARINGMemberPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBSHARINGMemberPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderChangeMembersPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBSHARINGMemberPolicy *dNewValue = [DBSHARINGMemberPolicySerializer deserialize:valueDict[@"new_value"]];
  DBSHARINGMemberPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBSHARINGMemberPolicySerializer deserialize:valueDict[@"previous_value"]] : nil;

  return
      [[DBTEAMLOGSharedFolderChangeMembersPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderChangeMembersPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeMembersPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeMembersPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderChangeMembersPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeMembersPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeMembersPolicyType:other];
}

- (BOOL)isEqualToSharedFolderChangeMembersPolicyType:
    (DBTEAMLOGSharedFolderChangeMembersPolicyType *)aSharedFolderChangeMembersPolicyType {
  if (self == aSharedFolderChangeMembersPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedFolderChangeMembersPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeMembersPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderChangeMembersPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderChangeMembersPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedFolderChangeMembersPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderCreateDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderCreateDetails

#pragma mark - Constructors

- (instancetype)initWithTargetNsId:(NSString *)targetNsId {

  self = [super init];
  if (self) {
    _targetNsId = targetNsId;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithTargetNsId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.targetNsId != nil) {
    result = prime * result + [self.targetNsId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderCreateDetails:other];
}

- (BOOL)isEqualToSharedFolderCreateDetails:(DBTEAMLOGSharedFolderCreateDetails *)aSharedFolderCreateDetails {
  if (self == aSharedFolderCreateDetails) {
    return YES;
  }
  if (self.targetNsId) {
    if (![self.targetNsId isEqual:aSharedFolderCreateDetails.targetNsId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderCreateDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.targetNsId) {
    jsonDict[@"target_ns_id"] = valueObj.targetNsId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderCreateDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *targetNsId = valueDict[@"target_ns_id"] ?: nil;

  return [[DBTEAMLOGSharedFolderCreateDetails alloc] initWithTargetNsId:targetNsId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderCreateType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderCreateType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderCreateTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderCreateTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderCreateTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderCreateType:other];
}

- (BOOL)isEqualToSharedFolderCreateType:(DBTEAMLOGSharedFolderCreateType *)aSharedFolderCreateType {
  if (self == aSharedFolderCreateType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedFolderCreateType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderCreateTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderCreateType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderCreateType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedFolderCreateType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderDeclineInvitationDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderDeclineInvitationDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderDeclineInvitationDetails:other];
}

- (BOOL)isEqualToSharedFolderDeclineInvitationDetails:
    (DBTEAMLOGSharedFolderDeclineInvitationDetails *)aSharedFolderDeclineInvitationDetails {
  if (self == aSharedFolderDeclineInvitationDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderDeclineInvitationDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderDeclineInvitationDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSharedFolderDeclineInvitationDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderDeclineInvitationType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderDeclineInvitationType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderDeclineInvitationTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderDeclineInvitationTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderDeclineInvitationTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderDeclineInvitationType:other];
}

- (BOOL)isEqualToSharedFolderDeclineInvitationType:
    (DBTEAMLOGSharedFolderDeclineInvitationType *)aSharedFolderDeclineInvitationType {
  if (self == aSharedFolderDeclineInvitationType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedFolderDeclineInvitationType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderDeclineInvitationTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderDeclineInvitationType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderDeclineInvitationType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedFolderDeclineInvitationType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderMembersInheritancePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderMembersInheritancePolicy

#pragma mark - Constructors

- (instancetype)initWithInheritMembers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedFolderMembersInheritancePolicyInheritMembers;
  }
  return self;
}

- (instancetype)initWithDontInheritMembers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedFolderMembersInheritancePolicyDontInheritMembers;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedFolderMembersInheritancePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInheritMembers {
  return _tag == DBTEAMLOGSharedFolderMembersInheritancePolicyInheritMembers;
}

- (BOOL)isDontInheritMembers {
  return _tag == DBTEAMLOGSharedFolderMembersInheritancePolicyDontInheritMembers;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSharedFolderMembersInheritancePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSharedFolderMembersInheritancePolicyInheritMembers:
    return @"DBTEAMLOGSharedFolderMembersInheritancePolicyInheritMembers";
  case DBTEAMLOGSharedFolderMembersInheritancePolicyDontInheritMembers:
    return @"DBTEAMLOGSharedFolderMembersInheritancePolicyDontInheritMembers";
  case DBTEAMLOGSharedFolderMembersInheritancePolicyOther:
    return @"DBTEAMLOGSharedFolderMembersInheritancePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderMembersInheritancePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderMembersInheritancePolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderMembersInheritancePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSharedFolderMembersInheritancePolicyInheritMembers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedFolderMembersInheritancePolicyDontInheritMembers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedFolderMembersInheritancePolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderMembersInheritancePolicy:other];
}

- (BOOL)isEqualToSharedFolderMembersInheritancePolicy:
    (DBTEAMLOGSharedFolderMembersInheritancePolicy *)aSharedFolderMembersInheritancePolicy {
  if (self == aSharedFolderMembersInheritancePolicy) {
    return YES;
  }
  if (self.tag != aSharedFolderMembersInheritancePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSharedFolderMembersInheritancePolicyInheritMembers:
    return [[self tagName] isEqual:[aSharedFolderMembersInheritancePolicy tagName]];
  case DBTEAMLOGSharedFolderMembersInheritancePolicyDontInheritMembers:
    return [[self tagName] isEqual:[aSharedFolderMembersInheritancePolicy tagName]];
  case DBTEAMLOGSharedFolderMembersInheritancePolicyOther:
    return [[self tagName] isEqual:[aSharedFolderMembersInheritancePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderMembersInheritancePolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderMembersInheritancePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInheritMembers]) {
    jsonDict[@".tag"] = @"inherit_members";
  } else if ([valueObj isDontInheritMembers]) {
    jsonDict[@".tag"] = @"dont_inherit_members";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderMembersInheritancePolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"inherit_members"]) {
    return [[DBTEAMLOGSharedFolderMembersInheritancePolicy alloc] initWithInheritMembers];
  } else if ([tag isEqualToString:@"dont_inherit_members"]) {
    return [[DBTEAMLOGSharedFolderMembersInheritancePolicy alloc] initWithDontInheritMembers];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSharedFolderMembersInheritancePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSharedFolderMembersInheritancePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderMountDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderMountDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderMountDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderMountDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderMountDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderMountDetails:other];
}

- (BOOL)isEqualToSharedFolderMountDetails:(DBTEAMLOGSharedFolderMountDetails *)aSharedFolderMountDetails {
  if (self == aSharedFolderMountDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderMountDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderMountDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderMountDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSharedFolderMountDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderMountType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderMountType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderMountTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderMountTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderMountTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderMountType:other];
}

- (BOOL)isEqualToSharedFolderMountType:(DBTEAMLOGSharedFolderMountType *)aSharedFolderMountType {
  if (self == aSharedFolderMountType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedFolderMountType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderMountTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderMountType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderMountType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedFolderMountType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderNestDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderNestDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousParentNsId:(NSString *)previousParentNsId dNewParentNsId:(NSString *)dNewParentNsId {

  self = [super init];
  if (self) {
    _previousParentNsId = previousParentNsId;
    _dNewParentNsId = dNewParentNsId;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithPreviousParentNsId:nil dNewParentNsId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderNestDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderNestDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderNestDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.previousParentNsId != nil) {
    result = prime * result + [self.previousParentNsId hash];
  }
  if (self.dNewParentNsId != nil) {
    result = prime * result + [self.dNewParentNsId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderNestDetails:other];
}

- (BOOL)isEqualToSharedFolderNestDetails:(DBTEAMLOGSharedFolderNestDetails *)aSharedFolderNestDetails {
  if (self == aSharedFolderNestDetails) {
    return YES;
  }
  if (self.previousParentNsId) {
    if (![self.previousParentNsId isEqual:aSharedFolderNestDetails.previousParentNsId]) {
      return NO;
    }
  }
  if (self.dNewParentNsId) {
    if (![self.dNewParentNsId isEqual:aSharedFolderNestDetails.dNewParentNsId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderNestDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderNestDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.previousParentNsId) {
    jsonDict[@"previous_parent_ns_id"] = valueObj.previousParentNsId;
  }
  if (valueObj.dNewParentNsId) {
    jsonDict[@"new_parent_ns_id"] = valueObj.dNewParentNsId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderNestDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *previousParentNsId = valueDict[@"previous_parent_ns_id"] ?: nil;
  NSString *dNewParentNsId = valueDict[@"new_parent_ns_id"] ?: nil;

  return [[DBTEAMLOGSharedFolderNestDetails alloc] initWithPreviousParentNsId:previousParentNsId
                                                               dNewParentNsId:dNewParentNsId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderNestType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderNestType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderNestTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderNestTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderNestTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderNestType:other];
}

- (BOOL)isEqualToSharedFolderNestType:(DBTEAMLOGSharedFolderNestType *)aSharedFolderNestType {
  if (self == aSharedFolderNestType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedFolderNestType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderNestTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderNestType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderNestType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedFolderNestType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderTransferOwnershipDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderTransferOwnershipDetails

#pragma mark - Constructors

- (instancetype)initWithDNewOwnerEmail:(NSString *)dNewOwnerEmail previousOwnerEmail:(NSString *)previousOwnerEmail {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](dNewOwnerEmail);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](previousOwnerEmail);

  self = [super init];
  if (self) {
    _previousOwnerEmail = previousOwnerEmail;
    _dNewOwnerEmail = dNewOwnerEmail;
  }
  return self;
}

- (instancetype)initWithDNewOwnerEmail:(NSString *)dNewOwnerEmail {
  return [self initWithDNewOwnerEmail:dNewOwnerEmail previousOwnerEmail:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewOwnerEmail hash];
  if (self.previousOwnerEmail != nil) {
    result = prime * result + [self.previousOwnerEmail hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderTransferOwnershipDetails:other];
}

- (BOOL)isEqualToSharedFolderTransferOwnershipDetails:
    (DBTEAMLOGSharedFolderTransferOwnershipDetails *)aSharedFolderTransferOwnershipDetails {
  if (self == aSharedFolderTransferOwnershipDetails) {
    return YES;
  }
  if (![self.dNewOwnerEmail isEqual:aSharedFolderTransferOwnershipDetails.dNewOwnerEmail]) {
    return NO;
  }
  if (self.previousOwnerEmail) {
    if (![self.previousOwnerEmail isEqual:aSharedFolderTransferOwnershipDetails.previousOwnerEmail]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderTransferOwnershipDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_owner_email"] = valueObj.dNewOwnerEmail;
  if (valueObj.previousOwnerEmail) {
    jsonDict[@"previous_owner_email"] = valueObj.previousOwnerEmail;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderTransferOwnershipDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *dNewOwnerEmail = valueDict[@"new_owner_email"];
  NSString *previousOwnerEmail = valueDict[@"previous_owner_email"] ?: nil;

  return [[DBTEAMLOGSharedFolderTransferOwnershipDetails alloc] initWithDNewOwnerEmail:dNewOwnerEmail
                                                                    previousOwnerEmail:previousOwnerEmail];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderTransferOwnershipType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderTransferOwnershipType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderTransferOwnershipTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderTransferOwnershipTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderTransferOwnershipTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderTransferOwnershipType:other];
}

- (BOOL)isEqualToSharedFolderTransferOwnershipType:
    (DBTEAMLOGSharedFolderTransferOwnershipType *)aSharedFolderTransferOwnershipType {
  if (self == aSharedFolderTransferOwnershipType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedFolderTransferOwnershipType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderTransferOwnershipTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderTransferOwnershipType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderTransferOwnershipType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedFolderTransferOwnershipType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderUnmountDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderUnmountDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderUnmountDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderUnmountDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderUnmountDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderUnmountDetails:other];
}

- (BOOL)isEqualToSharedFolderUnmountDetails:(DBTEAMLOGSharedFolderUnmountDetails *)aSharedFolderUnmountDetails {
  if (self == aSharedFolderUnmountDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderUnmountDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderUnmountDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderUnmountDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSharedFolderUnmountDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderUnmountType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderUnmountType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderUnmountTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedFolderUnmountTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderUnmountTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderUnmountType:other];
}

- (BOOL)isEqualToSharedFolderUnmountType:(DBTEAMLOGSharedFolderUnmountType *)aSharedFolderUnmountType {
  if (self == aSharedFolderUnmountType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedFolderUnmountType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderUnmountTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedFolderUnmountType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedFolderUnmountType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedFolderUnmountType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkAccessLevel.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkAccessLevel

#pragma mark - Constructors

- (instancetype)initWithNone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedLinkAccessLevelNone;
  }
  return self;
}

- (instancetype)initWithReader {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedLinkAccessLevelReader;
  }
  return self;
}

- (instancetype)initWithWriter {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedLinkAccessLevelWriter;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedLinkAccessLevelOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isNone {
  return _tag == DBTEAMLOGSharedLinkAccessLevelNone;
}

- (BOOL)isReader {
  return _tag == DBTEAMLOGSharedLinkAccessLevelReader;
}

- (BOOL)isWriter {
  return _tag == DBTEAMLOGSharedLinkAccessLevelWriter;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSharedLinkAccessLevelOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSharedLinkAccessLevelNone:
    return @"DBTEAMLOGSharedLinkAccessLevelNone";
  case DBTEAMLOGSharedLinkAccessLevelReader:
    return @"DBTEAMLOGSharedLinkAccessLevelReader";
  case DBTEAMLOGSharedLinkAccessLevelWriter:
    return @"DBTEAMLOGSharedLinkAccessLevelWriter";
  case DBTEAMLOGSharedLinkAccessLevelOther:
    return @"DBTEAMLOGSharedLinkAccessLevelOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkAccessLevelSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkAccessLevelSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkAccessLevelSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSharedLinkAccessLevelNone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedLinkAccessLevelReader:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedLinkAccessLevelWriter:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedLinkAccessLevelOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkAccessLevel:other];
}

- (BOOL)isEqualToSharedLinkAccessLevel:(DBTEAMLOGSharedLinkAccessLevel *)aSharedLinkAccessLevel {
  if (self == aSharedLinkAccessLevel) {
    return YES;
  }
  if (self.tag != aSharedLinkAccessLevel.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSharedLinkAccessLevelNone:
    return [[self tagName] isEqual:[aSharedLinkAccessLevel tagName]];
  case DBTEAMLOGSharedLinkAccessLevelReader:
    return [[self tagName] isEqual:[aSharedLinkAccessLevel tagName]];
  case DBTEAMLOGSharedLinkAccessLevelWriter:
    return [[self tagName] isEqual:[aSharedLinkAccessLevel tagName]];
  case DBTEAMLOGSharedLinkAccessLevelOther:
    return [[self tagName] isEqual:[aSharedLinkAccessLevel tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkAccessLevelSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkAccessLevel *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isNone]) {
    jsonDict[@".tag"] = @"none";
  } else if ([valueObj isReader]) {
    jsonDict[@".tag"] = @"reader";
  } else if ([valueObj isWriter]) {
    jsonDict[@".tag"] = @"writer";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkAccessLevel *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"none"]) {
    return [[DBTEAMLOGSharedLinkAccessLevel alloc] initWithNone];
  } else if ([tag isEqualToString:@"reader"]) {
    return [[DBTEAMLOGSharedLinkAccessLevel alloc] initWithReader];
  } else if ([tag isEqualToString:@"writer"]) {
    return [[DBTEAMLOGSharedLinkAccessLevel alloc] initWithWriter];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSharedLinkAccessLevel alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSharedLinkAccessLevel alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkAddExpiryDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkAddExpiryDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSDate *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkAddExpiryDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkAddExpiryDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkAddExpiryDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkAddExpiryDetails:other];
}

- (BOOL)isEqualToSharedLinkAddExpiryDetails:(DBTEAMLOGSharedLinkAddExpiryDetails *)aSharedLinkAddExpiryDetails {
  if (self == aSharedLinkAddExpiryDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharedLinkAddExpiryDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkAddExpiryDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkAddExpiryDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBNSDateSerializer serialize:valueObj.dNewValue dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkAddExpiryDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSDate *dNewValue = [DBNSDateSerializer deserialize:valueDict[@"new_value"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];

  return [[DBTEAMLOGSharedLinkAddExpiryDetails alloc] initWithDNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkAddExpiryType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkAddExpiryType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkAddExpiryTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkAddExpiryTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkAddExpiryTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkAddExpiryType:other];
}

- (BOOL)isEqualToSharedLinkAddExpiryType:(DBTEAMLOGSharedLinkAddExpiryType *)aSharedLinkAddExpiryType {
  if (self == aSharedLinkAddExpiryType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedLinkAddExpiryType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkAddExpiryTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkAddExpiryType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkAddExpiryType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedLinkAddExpiryType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkChangeExpiryDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkChangeExpiryDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSDate *)dNewValue previousValue:(NSDate *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkChangeExpiryDetails:other];
}

- (BOOL)isEqualToSharedLinkChangeExpiryDetails:
    (DBTEAMLOGSharedLinkChangeExpiryDetails *)aSharedLinkChangeExpiryDetails {
  if (self == aSharedLinkChangeExpiryDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aSharedLinkChangeExpiryDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedLinkChangeExpiryDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkChangeExpiryDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBNSDateSerializer serialize:valueObj.dNewValue dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] =
        [DBNSDateSerializer serialize:valueObj.previousValue dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkChangeExpiryDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSDate *dNewValue = valueDict[@"new_value"]
                          ? [DBNSDateSerializer deserialize:valueDict[@"new_value"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                          : nil;
  NSDate *previousValue = valueDict[@"previous_value"] ? [DBNSDateSerializer deserialize:valueDict[@"previous_value"]
                                                                              dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                                                       : nil;

  return [[DBTEAMLOGSharedLinkChangeExpiryDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkChangeExpiryType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkChangeExpiryType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkChangeExpiryTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkChangeExpiryTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkChangeExpiryTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkChangeExpiryType:other];
}

- (BOOL)isEqualToSharedLinkChangeExpiryType:(DBTEAMLOGSharedLinkChangeExpiryType *)aSharedLinkChangeExpiryType {
  if (self == aSharedLinkChangeExpiryType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedLinkChangeExpiryType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkChangeExpiryTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkChangeExpiryType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkChangeExpiryType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedLinkChangeExpiryType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkChangeVisibilityDetails.h"
#import "DBTEAMLOGSharedLinkVisibility.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkChangeVisibilityDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGSharedLinkVisibility *)dNewValue
                    previousValue:(DBTEAMLOGSharedLinkVisibility *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGSharedLinkVisibility *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkChangeVisibilityDetails:other];
}

- (BOOL)isEqualToSharedLinkChangeVisibilityDetails:
    (DBTEAMLOGSharedLinkChangeVisibilityDetails *)aSharedLinkChangeVisibilityDetails {
  if (self == aSharedLinkChangeVisibilityDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharedLinkChangeVisibilityDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedLinkChangeVisibilityDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkChangeVisibilityDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGSharedLinkVisibilitySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGSharedLinkVisibilitySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkChangeVisibilityDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSharedLinkVisibility *dNewValue =
      [DBTEAMLOGSharedLinkVisibilitySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGSharedLinkVisibility *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGSharedLinkVisibilitySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSharedLinkChangeVisibilityDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkChangeVisibilityType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkChangeVisibilityType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkChangeVisibilityTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkChangeVisibilityTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkChangeVisibilityTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkChangeVisibilityType:other];
}

- (BOOL)isEqualToSharedLinkChangeVisibilityType:
    (DBTEAMLOGSharedLinkChangeVisibilityType *)aSharedLinkChangeVisibilityType {
  if (self == aSharedLinkChangeVisibilityType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedLinkChangeVisibilityType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkChangeVisibilityTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkChangeVisibilityType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkChangeVisibilityType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedLinkChangeVisibilityType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkCopyDetails.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkCopyDetails

#pragma mark - Constructors

- (instancetype)initWithSharedLinkOwner:(DBTEAMLOGUserLogInfo *)sharedLinkOwner {

  self = [super init];
  if (self) {
    _sharedLinkOwner = sharedLinkOwner;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharedLinkOwner:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkCopyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkCopyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkCopyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharedLinkOwner != nil) {
    result = prime * result + [self.sharedLinkOwner hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkCopyDetails:other];
}

- (BOOL)isEqualToSharedLinkCopyDetails:(DBTEAMLOGSharedLinkCopyDetails *)aSharedLinkCopyDetails {
  if (self == aSharedLinkCopyDetails) {
    return YES;
  }
  if (self.sharedLinkOwner) {
    if (![self.sharedLinkOwner isEqual:aSharedLinkCopyDetails.sharedLinkOwner]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkCopyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkCopyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharedLinkOwner) {
    jsonDict[@"shared_link_owner"] = [DBTEAMLOGUserLogInfoSerializer serialize:valueObj.sharedLinkOwner];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkCopyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGUserLogInfo *sharedLinkOwner =
      valueDict[@"shared_link_owner"] ? [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"shared_link_owner"]]
                                      : nil;

  return [[DBTEAMLOGSharedLinkCopyDetails alloc] initWithSharedLinkOwner:sharedLinkOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkCopyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkCopyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkCopyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkCopyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkCopyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkCopyType:other];
}

- (BOOL)isEqualToSharedLinkCopyType:(DBTEAMLOGSharedLinkCopyType *)aSharedLinkCopyType {
  if (self == aSharedLinkCopyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedLinkCopyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkCopyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkCopyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkCopyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedLinkCopyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkAccessLevel.h"
#import "DBTEAMLOGSharedLinkCreateDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkCreateDetails

#pragma mark - Constructors

- (instancetype)initWithSharedLinkAccessLevel:(DBTEAMLOGSharedLinkAccessLevel *)sharedLinkAccessLevel {

  self = [super init];
  if (self) {
    _sharedLinkAccessLevel = sharedLinkAccessLevel;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharedLinkAccessLevel:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharedLinkAccessLevel != nil) {
    result = prime * result + [self.sharedLinkAccessLevel hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkCreateDetails:other];
}

- (BOOL)isEqualToSharedLinkCreateDetails:(DBTEAMLOGSharedLinkCreateDetails *)aSharedLinkCreateDetails {
  if (self == aSharedLinkCreateDetails) {
    return YES;
  }
  if (self.sharedLinkAccessLevel) {
    if (![self.sharedLinkAccessLevel isEqual:aSharedLinkCreateDetails.sharedLinkAccessLevel]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkCreateDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharedLinkAccessLevel) {
    jsonDict[@"shared_link_access_level"] =
        [DBTEAMLOGSharedLinkAccessLevelSerializer serialize:valueObj.sharedLinkAccessLevel];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkCreateDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSharedLinkAccessLevel *sharedLinkAccessLevel =
      valueDict[@"shared_link_access_level"]
          ? [DBTEAMLOGSharedLinkAccessLevelSerializer deserialize:valueDict[@"shared_link_access_level"]]
          : nil;

  return [[DBTEAMLOGSharedLinkCreateDetails alloc] initWithSharedLinkAccessLevel:sharedLinkAccessLevel];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkCreateType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkCreateType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkCreateTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkCreateTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkCreateTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkCreateType:other];
}

- (BOOL)isEqualToSharedLinkCreateType:(DBTEAMLOGSharedLinkCreateType *)aSharedLinkCreateType {
  if (self == aSharedLinkCreateType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedLinkCreateType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkCreateTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkCreateType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkCreateType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedLinkCreateType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkDisableDetails.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkDisableDetails

#pragma mark - Constructors

- (instancetype)initWithSharedLinkOwner:(DBTEAMLOGUserLogInfo *)sharedLinkOwner {

  self = [super init];
  if (self) {
    _sharedLinkOwner = sharedLinkOwner;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharedLinkOwner:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkDisableDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkDisableDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkDisableDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharedLinkOwner != nil) {
    result = prime * result + [self.sharedLinkOwner hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkDisableDetails:other];
}

- (BOOL)isEqualToSharedLinkDisableDetails:(DBTEAMLOGSharedLinkDisableDetails *)aSharedLinkDisableDetails {
  if (self == aSharedLinkDisableDetails) {
    return YES;
  }
  if (self.sharedLinkOwner) {
    if (![self.sharedLinkOwner isEqual:aSharedLinkDisableDetails.sharedLinkOwner]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkDisableDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkDisableDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharedLinkOwner) {
    jsonDict[@"shared_link_owner"] = [DBTEAMLOGUserLogInfoSerializer serialize:valueObj.sharedLinkOwner];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkDisableDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGUserLogInfo *sharedLinkOwner =
      valueDict[@"shared_link_owner"] ? [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"shared_link_owner"]]
                                      : nil;

  return [[DBTEAMLOGSharedLinkDisableDetails alloc] initWithSharedLinkOwner:sharedLinkOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkDisableType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkDisableType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkDisableTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkDisableTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkDisableTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkDisableType:other];
}

- (BOOL)isEqualToSharedLinkDisableType:(DBTEAMLOGSharedLinkDisableType *)aSharedLinkDisableType {
  if (self == aSharedLinkDisableType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedLinkDisableType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkDisableTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkDisableType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkDisableType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedLinkDisableType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkDownloadDetails.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkDownloadDetails

#pragma mark - Constructors

- (instancetype)initWithSharedLinkOwner:(DBTEAMLOGUserLogInfo *)sharedLinkOwner {

  self = [super init];
  if (self) {
    _sharedLinkOwner = sharedLinkOwner;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharedLinkOwner:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkDownloadDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkDownloadDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkDownloadDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharedLinkOwner != nil) {
    result = prime * result + [self.sharedLinkOwner hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkDownloadDetails:other];
}

- (BOOL)isEqualToSharedLinkDownloadDetails:(DBTEAMLOGSharedLinkDownloadDetails *)aSharedLinkDownloadDetails {
  if (self == aSharedLinkDownloadDetails) {
    return YES;
  }
  if (self.sharedLinkOwner) {
    if (![self.sharedLinkOwner isEqual:aSharedLinkDownloadDetails.sharedLinkOwner]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkDownloadDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkDownloadDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharedLinkOwner) {
    jsonDict[@"shared_link_owner"] = [DBTEAMLOGUserLogInfoSerializer serialize:valueObj.sharedLinkOwner];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkDownloadDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGUserLogInfo *sharedLinkOwner =
      valueDict[@"shared_link_owner"] ? [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"shared_link_owner"]]
                                      : nil;

  return [[DBTEAMLOGSharedLinkDownloadDetails alloc] initWithSharedLinkOwner:sharedLinkOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkDownloadType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkDownloadType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkDownloadTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkDownloadTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkDownloadTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkDownloadType:other];
}

- (BOOL)isEqualToSharedLinkDownloadType:(DBTEAMLOGSharedLinkDownloadType *)aSharedLinkDownloadType {
  if (self == aSharedLinkDownloadType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedLinkDownloadType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkDownloadTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkDownloadType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkDownloadType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedLinkDownloadType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkRemoveExpiryDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkRemoveExpiryDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSDate *)previousValue {

  self = [super init];
  if (self) {
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithPreviousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkRemoveExpiryDetails:other];
}

- (BOOL)isEqualToSharedLinkRemoveExpiryDetails:
    (DBTEAMLOGSharedLinkRemoveExpiryDetails *)aSharedLinkRemoveExpiryDetails {
  if (self == aSharedLinkRemoveExpiryDetails) {
    return YES;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedLinkRemoveExpiryDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkRemoveExpiryDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] =
        [DBNSDateSerializer serialize:valueObj.previousValue dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkRemoveExpiryDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSDate *previousValue = valueDict[@"previous_value"] ? [DBNSDateSerializer deserialize:valueDict[@"previous_value"]
                                                                              dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                                                       : nil;

  return [[DBTEAMLOGSharedLinkRemoveExpiryDetails alloc] initWithPreviousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkRemoveExpiryType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkRemoveExpiryType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkRemoveExpiryTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkRemoveExpiryTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkRemoveExpiryTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkRemoveExpiryType:other];
}

- (BOOL)isEqualToSharedLinkRemoveExpiryType:(DBTEAMLOGSharedLinkRemoveExpiryType *)aSharedLinkRemoveExpiryType {
  if (self == aSharedLinkRemoveExpiryType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedLinkRemoveExpiryType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkRemoveExpiryTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkRemoveExpiryType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkRemoveExpiryType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedLinkRemoveExpiryType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExternalUserLogInfo.h"
#import "DBTEAMLOGSharedLinkShareDetails.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkShareDetails

#pragma mark - Constructors

- (instancetype)initWithSharedLinkOwner:(DBTEAMLOGUserLogInfo *)sharedLinkOwner
                          externalUsers:(NSArray<DBTEAMLOGExternalUserLogInfo *> *)externalUsers {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](externalUsers);

  self = [super init];
  if (self) {
    _sharedLinkOwner = sharedLinkOwner;
    _externalUsers = externalUsers;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharedLinkOwner:nil externalUsers:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkShareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkShareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkShareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharedLinkOwner != nil) {
    result = prime * result + [self.sharedLinkOwner hash];
  }
  if (self.externalUsers != nil) {
    result = prime * result + [self.externalUsers hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkShareDetails:other];
}

- (BOOL)isEqualToSharedLinkShareDetails:(DBTEAMLOGSharedLinkShareDetails *)aSharedLinkShareDetails {
  if (self == aSharedLinkShareDetails) {
    return YES;
  }
  if (self.sharedLinkOwner) {
    if (![self.sharedLinkOwner isEqual:aSharedLinkShareDetails.sharedLinkOwner]) {
      return NO;
    }
  }
  if (self.externalUsers) {
    if (![self.externalUsers isEqual:aSharedLinkShareDetails.externalUsers]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkShareDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkShareDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharedLinkOwner) {
    jsonDict[@"shared_link_owner"] = [DBTEAMLOGUserLogInfoSerializer serialize:valueObj.sharedLinkOwner];
  }
  if (valueObj.externalUsers) {
    jsonDict[@"external_users"] = [DBArraySerializer serialize:valueObj.externalUsers
                                                     withBlock:^id(id elem0) {
                                                       return [DBTEAMLOGExternalUserLogInfoSerializer serialize:elem0];
                                                     }];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkShareDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGUserLogInfo *sharedLinkOwner =
      valueDict[@"shared_link_owner"] ? [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"shared_link_owner"]]
                                      : nil;
  NSArray<DBTEAMLOGExternalUserLogInfo *> *externalUsers =
      valueDict[@"external_users"]
          ? [DBArraySerializer deserialize:valueDict[@"external_users"]
                                 withBlock:^id(id elem0) {
                                   return [DBTEAMLOGExternalUserLogInfoSerializer deserialize:elem0];
                                 }]
          : nil;

  return [[DBTEAMLOGSharedLinkShareDetails alloc] initWithSharedLinkOwner:sharedLinkOwner externalUsers:externalUsers];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkShareType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkShareType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkShareTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkShareTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkShareTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkShareType:other];
}

- (BOOL)isEqualToSharedLinkShareType:(DBTEAMLOGSharedLinkShareType *)aSharedLinkShareType {
  if (self == aSharedLinkShareType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedLinkShareType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkShareTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkShareType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkShareType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedLinkShareType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkViewDetails.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkViewDetails

#pragma mark - Constructors

- (instancetype)initWithSharedLinkOwner:(DBTEAMLOGUserLogInfo *)sharedLinkOwner {

  self = [super init];
  if (self) {
    _sharedLinkOwner = sharedLinkOwner;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharedLinkOwner:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkViewDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkViewDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkViewDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharedLinkOwner != nil) {
    result = prime * result + [self.sharedLinkOwner hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkViewDetails:other];
}

- (BOOL)isEqualToSharedLinkViewDetails:(DBTEAMLOGSharedLinkViewDetails *)aSharedLinkViewDetails {
  if (self == aSharedLinkViewDetails) {
    return YES;
  }
  if (self.sharedLinkOwner) {
    if (![self.sharedLinkOwner isEqual:aSharedLinkViewDetails.sharedLinkOwner]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkViewDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkViewDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharedLinkOwner) {
    jsonDict[@"shared_link_owner"] = [DBTEAMLOGUserLogInfoSerializer serialize:valueObj.sharedLinkOwner];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkViewDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGUserLogInfo *sharedLinkOwner =
      valueDict[@"shared_link_owner"] ? [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"shared_link_owner"]]
                                      : nil;

  return [[DBTEAMLOGSharedLinkViewDetails alloc] initWithSharedLinkOwner:sharedLinkOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkViewType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkViewType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkViewTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkViewTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkViewTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkViewType:other];
}

- (BOOL)isEqualToSharedLinkViewType:(DBTEAMLOGSharedLinkViewType *)aSharedLinkViewType {
  if (self == aSharedLinkViewType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedLinkViewType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkViewTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkViewType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkViewType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedLinkViewType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedLinkVisibility.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedLinkVisibility

#pragma mark - Constructors

- (instancetype)initWithPassword {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedLinkVisibilityPassword;
  }
  return self;
}

- (instancetype)initWithPublic {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedLinkVisibilityPublic;
  }
  return self;
}

- (instancetype)initWithTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedLinkVisibilityTeamOnly;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedLinkVisibilityOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isPassword {
  return _tag == DBTEAMLOGSharedLinkVisibilityPassword;
}

- (BOOL)isPublic {
  return _tag == DBTEAMLOGSharedLinkVisibilityPublic;
}

- (BOOL)isTeamOnly {
  return _tag == DBTEAMLOGSharedLinkVisibilityTeamOnly;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSharedLinkVisibilityOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSharedLinkVisibilityPassword:
    return @"DBTEAMLOGSharedLinkVisibilityPassword";
  case DBTEAMLOGSharedLinkVisibilityPublic:
    return @"DBTEAMLOGSharedLinkVisibilityPublic";
  case DBTEAMLOGSharedLinkVisibilityTeamOnly:
    return @"DBTEAMLOGSharedLinkVisibilityTeamOnly";
  case DBTEAMLOGSharedLinkVisibilityOther:
    return @"DBTEAMLOGSharedLinkVisibilityOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedLinkVisibilitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedLinkVisibilitySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedLinkVisibilitySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSharedLinkVisibilityPassword:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedLinkVisibilityPublic:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedLinkVisibilityTeamOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedLinkVisibilityOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkVisibility:other];
}

- (BOOL)isEqualToSharedLinkVisibility:(DBTEAMLOGSharedLinkVisibility *)aSharedLinkVisibility {
  if (self == aSharedLinkVisibility) {
    return YES;
  }
  if (self.tag != aSharedLinkVisibility.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSharedLinkVisibilityPassword:
    return [[self tagName] isEqual:[aSharedLinkVisibility tagName]];
  case DBTEAMLOGSharedLinkVisibilityPublic:
    return [[self tagName] isEqual:[aSharedLinkVisibility tagName]];
  case DBTEAMLOGSharedLinkVisibilityTeamOnly:
    return [[self tagName] isEqual:[aSharedLinkVisibility tagName]];
  case DBTEAMLOGSharedLinkVisibilityOther:
    return [[self tagName] isEqual:[aSharedLinkVisibility tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedLinkVisibilitySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedLinkVisibility *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPassword]) {
    jsonDict[@".tag"] = @"password";
  } else if ([valueObj isPublic]) {
    jsonDict[@".tag"] = @"public";
  } else if ([valueObj isTeamOnly]) {
    jsonDict[@".tag"] = @"team_only";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedLinkVisibility *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"password"]) {
    return [[DBTEAMLOGSharedLinkVisibility alloc] initWithPassword];
  } else if ([tag isEqualToString:@"public"]) {
    return [[DBTEAMLOGSharedLinkVisibility alloc] initWithPublic];
  } else if ([tag isEqualToString:@"team_only"]) {
    return [[DBTEAMLOGSharedLinkVisibility alloc] initWithTeamOnly];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSharedLinkVisibility alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSharedLinkVisibility alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedNoteOpenedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedNoteOpenedDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedNoteOpenedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedNoteOpenedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedNoteOpenedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedNoteOpenedDetails:other];
}

- (BOOL)isEqualToSharedNoteOpenedDetails:(DBTEAMLOGSharedNoteOpenedDetails *)aSharedNoteOpenedDetails {
  if (self == aSharedNoteOpenedDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedNoteOpenedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedNoteOpenedDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedNoteOpenedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSharedNoteOpenedDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedNoteOpenedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedNoteOpenedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharedNoteOpenedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharedNoteOpenedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedNoteOpenedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedNoteOpenedType:other];
}

- (BOOL)isEqualToSharedNoteOpenedType:(DBTEAMLOGSharedNoteOpenedType *)aSharedNoteOpenedType {
  if (self == aSharedNoteOpenedType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharedNoteOpenedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedNoteOpenedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharedNoteOpenedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharedNoteOpenedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharedNoteOpenedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharingChangeFolderJoinPolicyDetails.h"
#import "DBTEAMLOGSharingFolderJoinPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingChangeFolderJoinPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGSharingFolderJoinPolicy *)dNewValue
                    previousValue:(DBTEAMLOGSharingFolderJoinPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGSharingFolderJoinPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingChangeFolderJoinPolicyDetails:other];
}

- (BOOL)isEqualToSharingChangeFolderJoinPolicyDetails:
    (DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)aSharingChangeFolderJoinPolicyDetails {
  if (self == aSharingChangeFolderJoinPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharingChangeFolderJoinPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharingChangeFolderJoinPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGSharingFolderJoinPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGSharingFolderJoinPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSharingFolderJoinPolicy *dNewValue =
      [DBTEAMLOGSharingFolderJoinPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGSharingFolderJoinPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGSharingFolderJoinPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return
      [[DBTEAMLOGSharingChangeFolderJoinPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharingChangeFolderJoinPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingChangeFolderJoinPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharingChangeFolderJoinPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharingChangeFolderJoinPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingChangeFolderJoinPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingChangeFolderJoinPolicyType:other];
}

- (BOOL)isEqualToSharingChangeFolderJoinPolicyType:
    (DBTEAMLOGSharingChangeFolderJoinPolicyType *)aSharingChangeFolderJoinPolicyType {
  if (self == aSharingChangeFolderJoinPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharingChangeFolderJoinPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingChangeFolderJoinPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharingChangeFolderJoinPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharingChangeFolderJoinPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharingChangeFolderJoinPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharingChangeLinkPolicyDetails.h"
#import "DBTEAMLOGSharingLinkPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingChangeLinkPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGSharingLinkPolicy *)dNewValue
                    previousValue:(DBTEAMLOGSharingLinkPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGSharingLinkPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingChangeLinkPolicyDetails:other];
}

- (BOOL)isEqualToSharingChangeLinkPolicyDetails:
    (DBTEAMLOGSharingChangeLinkPolicyDetails *)aSharingChangeLinkPolicyDetails {
  if (self == aSharingChangeLinkPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharingChangeLinkPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharingChangeLinkPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharingChangeLinkPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGSharingLinkPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGSharingLinkPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharingChangeLinkPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSharingLinkPolicy *dNewValue = [DBTEAMLOGSharingLinkPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGSharingLinkPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGSharingLinkPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSharingChangeLinkPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharingChangeLinkPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingChangeLinkPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharingChangeLinkPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharingChangeLinkPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingChangeLinkPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingChangeLinkPolicyType:other];
}

- (BOOL)isEqualToSharingChangeLinkPolicyType:(DBTEAMLOGSharingChangeLinkPolicyType *)aSharingChangeLinkPolicyType {
  if (self == aSharingChangeLinkPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharingChangeLinkPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingChangeLinkPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharingChangeLinkPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharingChangeLinkPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharingChangeLinkPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharingChangeMemberPolicyDetails.h"
#import "DBTEAMLOGSharingMemberPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingChangeMemberPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGSharingMemberPolicy *)dNewValue
                    previousValue:(DBTEAMLOGSharingMemberPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGSharingMemberPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingChangeMemberPolicyDetails:other];
}

- (BOOL)isEqualToSharingChangeMemberPolicyDetails:
    (DBTEAMLOGSharingChangeMemberPolicyDetails *)aSharingChangeMemberPolicyDetails {
  if (self == aSharingChangeMemberPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharingChangeMemberPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharingChangeMemberPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharingChangeMemberPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGSharingMemberPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGSharingMemberPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharingChangeMemberPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSharingMemberPolicy *dNewValue =
      [DBTEAMLOGSharingMemberPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGSharingMemberPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGSharingMemberPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSharingChangeMemberPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharingChangeMemberPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingChangeMemberPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharingChangeMemberPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharingChangeMemberPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingChangeMemberPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingChangeMemberPolicyType:other];
}

- (BOOL)isEqualToSharingChangeMemberPolicyType:
    (DBTEAMLOGSharingChangeMemberPolicyType *)aSharingChangeMemberPolicyType {
  if (self == aSharingChangeMemberPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSharingChangeMemberPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingChangeMemberPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharingChangeMemberPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharingChangeMemberPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSharingChangeMemberPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharingFolderJoinPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingFolderJoinPolicy

#pragma mark - Constructors

- (instancetype)initWithFromAnyone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharingFolderJoinPolicyFromAnyone;
  }
  return self;
}

- (instancetype)initWithFromTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharingFolderJoinPolicyFromTeamOnly;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharingFolderJoinPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isFromAnyone {
  return _tag == DBTEAMLOGSharingFolderJoinPolicyFromAnyone;
}

- (BOOL)isFromTeamOnly {
  return _tag == DBTEAMLOGSharingFolderJoinPolicyFromTeamOnly;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSharingFolderJoinPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSharingFolderJoinPolicyFromAnyone:
    return @"DBTEAMLOGSharingFolderJoinPolicyFromAnyone";
  case DBTEAMLOGSharingFolderJoinPolicyFromTeamOnly:
    return @"DBTEAMLOGSharingFolderJoinPolicyFromTeamOnly";
  case DBTEAMLOGSharingFolderJoinPolicyOther:
    return @"DBTEAMLOGSharingFolderJoinPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharingFolderJoinPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharingFolderJoinPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingFolderJoinPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSharingFolderJoinPolicyFromAnyone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharingFolderJoinPolicyFromTeamOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharingFolderJoinPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingFolderJoinPolicy:other];
}

- (BOOL)isEqualToSharingFolderJoinPolicy:(DBTEAMLOGSharingFolderJoinPolicy *)aSharingFolderJoinPolicy {
  if (self == aSharingFolderJoinPolicy) {
    return YES;
  }
  if (self.tag != aSharingFolderJoinPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSharingFolderJoinPolicyFromAnyone:
    return [[self tagName] isEqual:[aSharingFolderJoinPolicy tagName]];
  case DBTEAMLOGSharingFolderJoinPolicyFromTeamOnly:
    return [[self tagName] isEqual:[aSharingFolderJoinPolicy tagName]];
  case DBTEAMLOGSharingFolderJoinPolicyOther:
    return [[self tagName] isEqual:[aSharingFolderJoinPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingFolderJoinPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharingFolderJoinPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isFromAnyone]) {
    jsonDict[@".tag"] = @"from_anyone";
  } else if ([valueObj isFromTeamOnly]) {
    jsonDict[@".tag"] = @"from_team_only";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharingFolderJoinPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"from_anyone"]) {
    return [[DBTEAMLOGSharingFolderJoinPolicy alloc] initWithFromAnyone];
  } else if ([tag isEqualToString:@"from_team_only"]) {
    return [[DBTEAMLOGSharingFolderJoinPolicy alloc] initWithFromTeamOnly];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSharingFolderJoinPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSharingFolderJoinPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharingLinkPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingLinkPolicy

#pragma mark - Constructors

- (instancetype)initWithDefaultPrivate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharingLinkPolicyDefaultPrivate;
  }
  return self;
}

- (instancetype)initWithDefaultPublic {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharingLinkPolicyDefaultPublic;
  }
  return self;
}

- (instancetype)initWithOnlyPrivate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharingLinkPolicyOnlyPrivate;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharingLinkPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDefaultPrivate {
  return _tag == DBTEAMLOGSharingLinkPolicyDefaultPrivate;
}

- (BOOL)isDefaultPublic {
  return _tag == DBTEAMLOGSharingLinkPolicyDefaultPublic;
}

- (BOOL)isOnlyPrivate {
  return _tag == DBTEAMLOGSharingLinkPolicyOnlyPrivate;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSharingLinkPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSharingLinkPolicyDefaultPrivate:
    return @"DBTEAMLOGSharingLinkPolicyDefaultPrivate";
  case DBTEAMLOGSharingLinkPolicyDefaultPublic:
    return @"DBTEAMLOGSharingLinkPolicyDefaultPublic";
  case DBTEAMLOGSharingLinkPolicyOnlyPrivate:
    return @"DBTEAMLOGSharingLinkPolicyOnlyPrivate";
  case DBTEAMLOGSharingLinkPolicyOther:
    return @"DBTEAMLOGSharingLinkPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharingLinkPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharingLinkPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingLinkPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSharingLinkPolicyDefaultPrivate:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharingLinkPolicyDefaultPublic:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharingLinkPolicyOnlyPrivate:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharingLinkPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingLinkPolicy:other];
}

- (BOOL)isEqualToSharingLinkPolicy:(DBTEAMLOGSharingLinkPolicy *)aSharingLinkPolicy {
  if (self == aSharingLinkPolicy) {
    return YES;
  }
  if (self.tag != aSharingLinkPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSharingLinkPolicyDefaultPrivate:
    return [[self tagName] isEqual:[aSharingLinkPolicy tagName]];
  case DBTEAMLOGSharingLinkPolicyDefaultPublic:
    return [[self tagName] isEqual:[aSharingLinkPolicy tagName]];
  case DBTEAMLOGSharingLinkPolicyOnlyPrivate:
    return [[self tagName] isEqual:[aSharingLinkPolicy tagName]];
  case DBTEAMLOGSharingLinkPolicyOther:
    return [[self tagName] isEqual:[aSharingLinkPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingLinkPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharingLinkPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDefaultPrivate]) {
    jsonDict[@".tag"] = @"default_private";
  } else if ([valueObj isDefaultPublic]) {
    jsonDict[@".tag"] = @"default_public";
  } else if ([valueObj isOnlyPrivate]) {
    jsonDict[@".tag"] = @"only_private";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharingLinkPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"default_private"]) {
    return [[DBTEAMLOGSharingLinkPolicy alloc] initWithDefaultPrivate];
  } else if ([tag isEqualToString:@"default_public"]) {
    return [[DBTEAMLOGSharingLinkPolicy alloc] initWithDefaultPublic];
  } else if ([tag isEqualToString:@"only_private"]) {
    return [[DBTEAMLOGSharingLinkPolicy alloc] initWithOnlyPrivate];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSharingLinkPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSharingLinkPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharingMemberPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingMemberPolicy

#pragma mark - Constructors

- (instancetype)initWithAllow {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharingMemberPolicyAllow;
  }
  return self;
}

- (instancetype)initWithForbid {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharingMemberPolicyForbid;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharingMemberPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAllow {
  return _tag == DBTEAMLOGSharingMemberPolicyAllow;
}

- (BOOL)isForbid {
  return _tag == DBTEAMLOGSharingMemberPolicyForbid;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSharingMemberPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSharingMemberPolicyAllow:
    return @"DBTEAMLOGSharingMemberPolicyAllow";
  case DBTEAMLOGSharingMemberPolicyForbid:
    return @"DBTEAMLOGSharingMemberPolicyForbid";
  case DBTEAMLOGSharingMemberPolicyOther:
    return @"DBTEAMLOGSharingMemberPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSharingMemberPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSharingMemberPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingMemberPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSharingMemberPolicyAllow:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharingMemberPolicyForbid:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharingMemberPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingMemberPolicy:other];
}

- (BOOL)isEqualToSharingMemberPolicy:(DBTEAMLOGSharingMemberPolicy *)aSharingMemberPolicy {
  if (self == aSharingMemberPolicy) {
    return YES;
  }
  if (self.tag != aSharingMemberPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSharingMemberPolicyAllow:
    return [[self tagName] isEqual:[aSharingMemberPolicy tagName]];
  case DBTEAMLOGSharingMemberPolicyForbid:
    return [[self tagName] isEqual:[aSharingMemberPolicy tagName]];
  case DBTEAMLOGSharingMemberPolicyOther:
    return [[self tagName] isEqual:[aSharingMemberPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingMemberPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSharingMemberPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAllow]) {
    jsonDict[@".tag"] = @"allow";
  } else if ([valueObj isForbid]) {
    jsonDict[@".tag"] = @"forbid";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSharingMemberPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"allow"]) {
    return [[DBTEAMLOGSharingMemberPolicy alloc] initWithAllow];
  } else if ([tag isEqualToString:@"forbid"]) {
    return [[DBTEAMLOGSharingMemberPolicy alloc] initWithForbid];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSharingMemberPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSharingMemberPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelGroupShareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelGroupShareDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShmodelGroupShareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShmodelGroupShareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelGroupShareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelGroupShareDetails:other];
}

- (BOOL)isEqualToShmodelGroupShareDetails:(DBTEAMLOGShmodelGroupShareDetails *)aShmodelGroupShareDetails {
  if (self == aShmodelGroupShareDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelGroupShareDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShmodelGroupShareDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShmodelGroupShareDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGShmodelGroupShareDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelGroupShareType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelGroupShareType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShmodelGroupShareTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShmodelGroupShareTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelGroupShareTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelGroupShareType:other];
}

- (BOOL)isEqualToShmodelGroupShareType:(DBTEAMLOGShmodelGroupShareType *)aShmodelGroupShareType {
  if (self == aShmodelGroupShareType) {
    return YES;
  }
  if (![self.description_ isEqual:aShmodelGroupShareType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelGroupShareTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShmodelGroupShareType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShmodelGroupShareType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShmodelGroupShareType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseAccessGrantedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseAccessGrantedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseAccessGrantedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseAccessGrantedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseAccessGrantedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseAccessGrantedDetails:other];
}

- (BOOL)isEqualToShowcaseAccessGrantedDetails:(DBTEAMLOGShowcaseAccessGrantedDetails *)aShowcaseAccessGrantedDetails {
  if (self == aShowcaseAccessGrantedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseAccessGrantedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseAccessGrantedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseAccessGrantedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseAccessGrantedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseAccessGrantedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseAccessGrantedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseAccessGrantedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseAccessGrantedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseAccessGrantedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseAccessGrantedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseAccessGrantedType:other];
}

- (BOOL)isEqualToShowcaseAccessGrantedType:(DBTEAMLOGShowcaseAccessGrantedType *)aShowcaseAccessGrantedType {
  if (self == aShowcaseAccessGrantedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseAccessGrantedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseAccessGrantedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseAccessGrantedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseAccessGrantedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseAccessGrantedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseAddMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseAddMemberDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseAddMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseAddMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseAddMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseAddMemberDetails:other];
}

- (BOOL)isEqualToShowcaseAddMemberDetails:(DBTEAMLOGShowcaseAddMemberDetails *)aShowcaseAddMemberDetails {
  if (self == aShowcaseAddMemberDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseAddMemberDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseAddMemberDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseAddMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseAddMemberDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseAddMemberDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseAddMemberType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseAddMemberType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseAddMemberTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseAddMemberTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseAddMemberTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseAddMemberType:other];
}

- (BOOL)isEqualToShowcaseAddMemberType:(DBTEAMLOGShowcaseAddMemberType *)aShowcaseAddMemberType {
  if (self == aShowcaseAddMemberType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseAddMemberType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseAddMemberTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseAddMemberType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseAddMemberType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseAddMemberType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseArchivedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseArchivedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseArchivedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseArchivedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseArchivedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseArchivedDetails:other];
}

- (BOOL)isEqualToShowcaseArchivedDetails:(DBTEAMLOGShowcaseArchivedDetails *)aShowcaseArchivedDetails {
  if (self == aShowcaseArchivedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseArchivedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseArchivedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseArchivedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseArchivedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseArchivedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseArchivedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseArchivedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseArchivedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseArchivedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseArchivedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseArchivedType:other];
}

- (BOOL)isEqualToShowcaseArchivedType:(DBTEAMLOGShowcaseArchivedType *)aShowcaseArchivedType {
  if (self == aShowcaseArchivedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseArchivedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseArchivedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseArchivedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseArchivedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseArchivedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseChangeDownloadPolicyDetails.h"
#import "DBTEAMLOGShowcaseDownloadPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseChangeDownloadPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGShowcaseDownloadPolicy *)dNewValue
                    previousValue:(DBTEAMLOGShowcaseDownloadPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseChangeDownloadPolicyDetails:other];
}

- (BOOL)isEqualToShowcaseChangeDownloadPolicyDetails:
    (DBTEAMLOGShowcaseChangeDownloadPolicyDetails *)aShowcaseChangeDownloadPolicyDetails {
  if (self == aShowcaseChangeDownloadPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aShowcaseChangeDownloadPolicyDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aShowcaseChangeDownloadPolicyDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseChangeDownloadPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGShowcaseDownloadPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] = [DBTEAMLOGShowcaseDownloadPolicySerializer serialize:valueObj.previousValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseChangeDownloadPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGShowcaseDownloadPolicy *dNewValue =
      [DBTEAMLOGShowcaseDownloadPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGShowcaseDownloadPolicy *previousValue =
      [DBTEAMLOGShowcaseDownloadPolicySerializer deserialize:valueDict[@"previous_value"]];

  return [[DBTEAMLOGShowcaseChangeDownloadPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseChangeDownloadPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseChangeDownloadPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseChangeDownloadPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseChangeDownloadPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseChangeDownloadPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseChangeDownloadPolicyType:other];
}

- (BOOL)isEqualToShowcaseChangeDownloadPolicyType:
    (DBTEAMLOGShowcaseChangeDownloadPolicyType *)aShowcaseChangeDownloadPolicyType {
  if (self == aShowcaseChangeDownloadPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseChangeDownloadPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseChangeDownloadPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseChangeDownloadPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseChangeDownloadPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseChangeDownloadPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseChangeEnabledPolicyDetails.h"
#import "DBTEAMLOGShowcaseEnabledPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseChangeEnabledPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGShowcaseEnabledPolicy *)dNewValue
                    previousValue:(DBTEAMLOGShowcaseEnabledPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseChangeEnabledPolicyDetails:other];
}

- (BOOL)isEqualToShowcaseChangeEnabledPolicyDetails:
    (DBTEAMLOGShowcaseChangeEnabledPolicyDetails *)aShowcaseChangeEnabledPolicyDetails {
  if (self == aShowcaseChangeEnabledPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aShowcaseChangeEnabledPolicyDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aShowcaseChangeEnabledPolicyDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseChangeEnabledPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGShowcaseEnabledPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] = [DBTEAMLOGShowcaseEnabledPolicySerializer serialize:valueObj.previousValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseChangeEnabledPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGShowcaseEnabledPolicy *dNewValue =
      [DBTEAMLOGShowcaseEnabledPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGShowcaseEnabledPolicy *previousValue =
      [DBTEAMLOGShowcaseEnabledPolicySerializer deserialize:valueDict[@"previous_value"]];

  return [[DBTEAMLOGShowcaseChangeEnabledPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseChangeEnabledPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseChangeEnabledPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseChangeEnabledPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseChangeEnabledPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseChangeEnabledPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseChangeEnabledPolicyType:other];
}

- (BOOL)isEqualToShowcaseChangeEnabledPolicyType:
    (DBTEAMLOGShowcaseChangeEnabledPolicyType *)aShowcaseChangeEnabledPolicyType {
  if (self == aShowcaseChangeEnabledPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseChangeEnabledPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseChangeEnabledPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseChangeEnabledPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseChangeEnabledPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseChangeEnabledPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails.h"
#import "DBTEAMLOGShowcaseExternalSharingPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGShowcaseExternalSharingPolicy *)dNewValue
                    previousValue:(DBTEAMLOGShowcaseExternalSharingPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseChangeExternalSharingPolicyDetails:other];
}

- (BOOL)isEqualToShowcaseChangeExternalSharingPolicyDetails:
    (DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails *)aShowcaseChangeExternalSharingPolicyDetails {
  if (self == aShowcaseChangeExternalSharingPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aShowcaseChangeExternalSharingPolicyDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aShowcaseChangeExternalSharingPolicyDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGShowcaseExternalSharingPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] = [DBTEAMLOGShowcaseExternalSharingPolicySerializer serialize:valueObj.previousValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGShowcaseExternalSharingPolicy *dNewValue =
      [DBTEAMLOGShowcaseExternalSharingPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGShowcaseExternalSharingPolicy *previousValue =
      [DBTEAMLOGShowcaseExternalSharingPolicySerializer deserialize:valueDict[@"previous_value"]];

  return [[DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                          previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseChangeExternalSharingPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseChangeExternalSharingPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseChangeExternalSharingPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseChangeExternalSharingPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseChangeExternalSharingPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseChangeExternalSharingPolicyType:other];
}

- (BOOL)isEqualToShowcaseChangeExternalSharingPolicyType:
    (DBTEAMLOGShowcaseChangeExternalSharingPolicyType *)aShowcaseChangeExternalSharingPolicyType {
  if (self == aShowcaseChangeExternalSharingPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseChangeExternalSharingPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseChangeExternalSharingPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseChangeExternalSharingPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseChangeExternalSharingPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseChangeExternalSharingPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseCreatedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseCreatedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseCreatedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseCreatedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseCreatedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseCreatedDetails:other];
}

- (BOOL)isEqualToShowcaseCreatedDetails:(DBTEAMLOGShowcaseCreatedDetails *)aShowcaseCreatedDetails {
  if (self == aShowcaseCreatedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseCreatedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseCreatedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseCreatedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseCreatedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseCreatedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseCreatedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseCreatedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseCreatedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseCreatedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseCreatedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseCreatedType:other];
}

- (BOOL)isEqualToShowcaseCreatedType:(DBTEAMLOGShowcaseCreatedType *)aShowcaseCreatedType {
  if (self == aShowcaseCreatedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseCreatedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseCreatedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseCreatedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseCreatedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseCreatedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseDeleteCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseDeleteCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseDeleteCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseDeleteCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseDeleteCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseDeleteCommentDetails:other];
}

- (BOOL)isEqualToShowcaseDeleteCommentDetails:(DBTEAMLOGShowcaseDeleteCommentDetails *)aShowcaseDeleteCommentDetails {
  if (self == aShowcaseDeleteCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseDeleteCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aShowcaseDeleteCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseDeleteCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseDeleteCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseDeleteCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGShowcaseDeleteCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseDeleteCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseDeleteCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseDeleteCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseDeleteCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseDeleteCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseDeleteCommentType:other];
}

- (BOOL)isEqualToShowcaseDeleteCommentType:(DBTEAMLOGShowcaseDeleteCommentType *)aShowcaseDeleteCommentType {
  if (self == aShowcaseDeleteCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseDeleteCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseDeleteCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseDeleteCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseDeleteCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseDeleteCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseDocumentLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseDocumentLogInfo

#pragma mark - Constructors

- (instancetype)initWithShowcaseId:(NSString *)showcaseId showcaseTitle:(NSString *)showcaseTitle {
  [DBStoneValidators nonnullValidator:nil](showcaseId);
  [DBStoneValidators nonnullValidator:nil](showcaseTitle);

  self = [super init];
  if (self) {
    _showcaseId = showcaseId;
    _showcaseTitle = showcaseTitle;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseDocumentLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseDocumentLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseDocumentLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.showcaseId hash];
  result = prime * result + [self.showcaseTitle hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseDocumentLogInfo:other];
}

- (BOOL)isEqualToShowcaseDocumentLogInfo:(DBTEAMLOGShowcaseDocumentLogInfo *)aShowcaseDocumentLogInfo {
  if (self == aShowcaseDocumentLogInfo) {
    return YES;
  }
  if (![self.showcaseId isEqual:aShowcaseDocumentLogInfo.showcaseId]) {
    return NO;
  }
  if (![self.showcaseTitle isEqual:aShowcaseDocumentLogInfo.showcaseTitle]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseDocumentLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseDocumentLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"showcase_id"] = valueObj.showcaseId;
  jsonDict[@"showcase_title"] = valueObj.showcaseTitle;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseDocumentLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *showcaseId = valueDict[@"showcase_id"];
  NSString *showcaseTitle = valueDict[@"showcase_title"];

  return [[DBTEAMLOGShowcaseDocumentLogInfo alloc] initWithShowcaseId:showcaseId showcaseTitle:showcaseTitle];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseDownloadPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseDownloadPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGShowcaseDownloadPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGShowcaseDownloadPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGShowcaseDownloadPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGShowcaseDownloadPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGShowcaseDownloadPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGShowcaseDownloadPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGShowcaseDownloadPolicyDisabled:
    return @"DBTEAMLOGShowcaseDownloadPolicyDisabled";
  case DBTEAMLOGShowcaseDownloadPolicyEnabled:
    return @"DBTEAMLOGShowcaseDownloadPolicyEnabled";
  case DBTEAMLOGShowcaseDownloadPolicyOther:
    return @"DBTEAMLOGShowcaseDownloadPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseDownloadPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseDownloadPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseDownloadPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGShowcaseDownloadPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGShowcaseDownloadPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGShowcaseDownloadPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseDownloadPolicy:other];
}

- (BOOL)isEqualToShowcaseDownloadPolicy:(DBTEAMLOGShowcaseDownloadPolicy *)aShowcaseDownloadPolicy {
  if (self == aShowcaseDownloadPolicy) {
    return YES;
  }
  if (self.tag != aShowcaseDownloadPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGShowcaseDownloadPolicyDisabled:
    return [[self tagName] isEqual:[aShowcaseDownloadPolicy tagName]];
  case DBTEAMLOGShowcaseDownloadPolicyEnabled:
    return [[self tagName] isEqual:[aShowcaseDownloadPolicy tagName]];
  case DBTEAMLOGShowcaseDownloadPolicyOther:
    return [[self tagName] isEqual:[aShowcaseDownloadPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseDownloadPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseDownloadPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseDownloadPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGShowcaseDownloadPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGShowcaseDownloadPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGShowcaseDownloadPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGShowcaseDownloadPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseEditCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseEditCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseEditCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseEditCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseEditCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseEditCommentDetails:other];
}

- (BOOL)isEqualToShowcaseEditCommentDetails:(DBTEAMLOGShowcaseEditCommentDetails *)aShowcaseEditCommentDetails {
  if (self == aShowcaseEditCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseEditCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aShowcaseEditCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseEditCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseEditCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseEditCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGShowcaseEditCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseEditCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseEditCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseEditCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseEditCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseEditCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseEditCommentType:other];
}

- (BOOL)isEqualToShowcaseEditCommentType:(DBTEAMLOGShowcaseEditCommentType *)aShowcaseEditCommentType {
  if (self == aShowcaseEditCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseEditCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseEditCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseEditCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseEditCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseEditCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseEditedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseEditedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseEditedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseEditedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseEditedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseEditedDetails:other];
}

- (BOOL)isEqualToShowcaseEditedDetails:(DBTEAMLOGShowcaseEditedDetails *)aShowcaseEditedDetails {
  if (self == aShowcaseEditedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseEditedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseEditedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseEditedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseEditedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseEditedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseEditedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseEditedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseEditedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseEditedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseEditedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseEditedType:other];
}

- (BOOL)isEqualToShowcaseEditedType:(DBTEAMLOGShowcaseEditedType *)aShowcaseEditedType {
  if (self == aShowcaseEditedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseEditedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseEditedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseEditedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseEditedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseEditedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseEnabledPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseEnabledPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGShowcaseEnabledPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGShowcaseEnabledPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGShowcaseEnabledPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGShowcaseEnabledPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGShowcaseEnabledPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGShowcaseEnabledPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGShowcaseEnabledPolicyDisabled:
    return @"DBTEAMLOGShowcaseEnabledPolicyDisabled";
  case DBTEAMLOGShowcaseEnabledPolicyEnabled:
    return @"DBTEAMLOGShowcaseEnabledPolicyEnabled";
  case DBTEAMLOGShowcaseEnabledPolicyOther:
    return @"DBTEAMLOGShowcaseEnabledPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseEnabledPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseEnabledPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseEnabledPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGShowcaseEnabledPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGShowcaseEnabledPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGShowcaseEnabledPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseEnabledPolicy:other];
}

- (BOOL)isEqualToShowcaseEnabledPolicy:(DBTEAMLOGShowcaseEnabledPolicy *)aShowcaseEnabledPolicy {
  if (self == aShowcaseEnabledPolicy) {
    return YES;
  }
  if (self.tag != aShowcaseEnabledPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGShowcaseEnabledPolicyDisabled:
    return [[self tagName] isEqual:[aShowcaseEnabledPolicy tagName]];
  case DBTEAMLOGShowcaseEnabledPolicyEnabled:
    return [[self tagName] isEqual:[aShowcaseEnabledPolicy tagName]];
  case DBTEAMLOGShowcaseEnabledPolicyOther:
    return [[self tagName] isEqual:[aShowcaseEnabledPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseEnabledPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseEnabledPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseEnabledPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGShowcaseEnabledPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGShowcaseEnabledPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGShowcaseEnabledPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGShowcaseEnabledPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseExternalSharingPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseExternalSharingPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGShowcaseExternalSharingPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGShowcaseExternalSharingPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGShowcaseExternalSharingPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGShowcaseExternalSharingPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGShowcaseExternalSharingPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGShowcaseExternalSharingPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGShowcaseExternalSharingPolicyDisabled:
    return @"DBTEAMLOGShowcaseExternalSharingPolicyDisabled";
  case DBTEAMLOGShowcaseExternalSharingPolicyEnabled:
    return @"DBTEAMLOGShowcaseExternalSharingPolicyEnabled";
  case DBTEAMLOGShowcaseExternalSharingPolicyOther:
    return @"DBTEAMLOGShowcaseExternalSharingPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseExternalSharingPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseExternalSharingPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseExternalSharingPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGShowcaseExternalSharingPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGShowcaseExternalSharingPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGShowcaseExternalSharingPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseExternalSharingPolicy:other];
}

- (BOOL)isEqualToShowcaseExternalSharingPolicy:
    (DBTEAMLOGShowcaseExternalSharingPolicy *)aShowcaseExternalSharingPolicy {
  if (self == aShowcaseExternalSharingPolicy) {
    return YES;
  }
  if (self.tag != aShowcaseExternalSharingPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGShowcaseExternalSharingPolicyDisabled:
    return [[self tagName] isEqual:[aShowcaseExternalSharingPolicy tagName]];
  case DBTEAMLOGShowcaseExternalSharingPolicyEnabled:
    return [[self tagName] isEqual:[aShowcaseExternalSharingPolicy tagName]];
  case DBTEAMLOGShowcaseExternalSharingPolicyOther:
    return [[self tagName] isEqual:[aShowcaseExternalSharingPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseExternalSharingPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseExternalSharingPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseExternalSharingPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGShowcaseExternalSharingPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGShowcaseExternalSharingPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGShowcaseExternalSharingPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGShowcaseExternalSharingPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseFileAddedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseFileAddedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseFileAddedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseFileAddedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseFileAddedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseFileAddedDetails:other];
}

- (BOOL)isEqualToShowcaseFileAddedDetails:(DBTEAMLOGShowcaseFileAddedDetails *)aShowcaseFileAddedDetails {
  if (self == aShowcaseFileAddedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseFileAddedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseFileAddedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseFileAddedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseFileAddedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseFileAddedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseFileAddedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseFileAddedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseFileAddedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseFileAddedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseFileAddedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseFileAddedType:other];
}

- (BOOL)isEqualToShowcaseFileAddedType:(DBTEAMLOGShowcaseFileAddedType *)aShowcaseFileAddedType {
  if (self == aShowcaseFileAddedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseFileAddedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseFileAddedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseFileAddedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseFileAddedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseFileAddedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseFileDownloadDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseFileDownloadDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid downloadType:(NSString *)downloadType {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](downloadType);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _downloadType = downloadType;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseFileDownloadDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseFileDownloadDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseFileDownloadDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.downloadType hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseFileDownloadDetails:other];
}

- (BOOL)isEqualToShowcaseFileDownloadDetails:(DBTEAMLOGShowcaseFileDownloadDetails *)aShowcaseFileDownloadDetails {
  if (self == aShowcaseFileDownloadDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseFileDownloadDetails.eventUuid]) {
    return NO;
  }
  if (![self.downloadType isEqual:aShowcaseFileDownloadDetails.downloadType]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseFileDownloadDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseFileDownloadDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"download_type"] = valueObj.downloadType;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseFileDownloadDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *downloadType = valueDict[@"download_type"];

  return [[DBTEAMLOGShowcaseFileDownloadDetails alloc] initWithEventUuid:eventUuid downloadType:downloadType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseFileDownloadType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseFileDownloadType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseFileDownloadTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseFileDownloadTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseFileDownloadTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseFileDownloadType:other];
}

- (BOOL)isEqualToShowcaseFileDownloadType:(DBTEAMLOGShowcaseFileDownloadType *)aShowcaseFileDownloadType {
  if (self == aShowcaseFileDownloadType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseFileDownloadType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseFileDownloadTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseFileDownloadType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseFileDownloadType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseFileDownloadType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseFileRemovedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseFileRemovedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseFileRemovedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseFileRemovedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseFileRemovedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseFileRemovedDetails:other];
}

- (BOOL)isEqualToShowcaseFileRemovedDetails:(DBTEAMLOGShowcaseFileRemovedDetails *)aShowcaseFileRemovedDetails {
  if (self == aShowcaseFileRemovedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseFileRemovedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseFileRemovedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseFileRemovedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseFileRemovedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseFileRemovedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseFileRemovedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseFileRemovedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseFileRemovedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseFileRemovedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseFileRemovedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseFileRemovedType:other];
}

- (BOOL)isEqualToShowcaseFileRemovedType:(DBTEAMLOGShowcaseFileRemovedType *)aShowcaseFileRemovedType {
  if (self == aShowcaseFileRemovedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseFileRemovedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseFileRemovedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseFileRemovedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseFileRemovedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseFileRemovedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseFileViewDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseFileViewDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseFileViewDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseFileViewDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseFileViewDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseFileViewDetails:other];
}

- (BOOL)isEqualToShowcaseFileViewDetails:(DBTEAMLOGShowcaseFileViewDetails *)aShowcaseFileViewDetails {
  if (self == aShowcaseFileViewDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseFileViewDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseFileViewDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseFileViewDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseFileViewDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseFileViewDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseFileViewType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseFileViewType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseFileViewTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseFileViewTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseFileViewTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseFileViewType:other];
}

- (BOOL)isEqualToShowcaseFileViewType:(DBTEAMLOGShowcaseFileViewType *)aShowcaseFileViewType {
  if (self == aShowcaseFileViewType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseFileViewType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseFileViewTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseFileViewType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseFileViewType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseFileViewType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcasePermanentlyDeletedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcasePermanentlyDeletedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcasePermanentlyDeletedDetails:other];
}

- (BOOL)isEqualToShowcasePermanentlyDeletedDetails:
    (DBTEAMLOGShowcasePermanentlyDeletedDetails *)aShowcasePermanentlyDeletedDetails {
  if (self == aShowcasePermanentlyDeletedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcasePermanentlyDeletedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcasePermanentlyDeletedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcasePermanentlyDeletedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcasePermanentlyDeletedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcasePermanentlyDeletedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcasePermanentlyDeletedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcasePermanentlyDeletedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcasePermanentlyDeletedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcasePermanentlyDeletedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcasePermanentlyDeletedType:other];
}

- (BOOL)isEqualToShowcasePermanentlyDeletedType:
    (DBTEAMLOGShowcasePermanentlyDeletedType *)aShowcasePermanentlyDeletedType {
  if (self == aShowcasePermanentlyDeletedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcasePermanentlyDeletedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcasePermanentlyDeletedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcasePermanentlyDeletedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcasePermanentlyDeletedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcasePermanentlyDeletedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcasePostCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcasePostCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcasePostCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcasePostCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcasePostCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcasePostCommentDetails:other];
}

- (BOOL)isEqualToShowcasePostCommentDetails:(DBTEAMLOGShowcasePostCommentDetails *)aShowcasePostCommentDetails {
  if (self == aShowcasePostCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcasePostCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aShowcasePostCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcasePostCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcasePostCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcasePostCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGShowcasePostCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcasePostCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcasePostCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcasePostCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcasePostCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcasePostCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcasePostCommentType:other];
}

- (BOOL)isEqualToShowcasePostCommentType:(DBTEAMLOGShowcasePostCommentType *)aShowcasePostCommentType {
  if (self == aShowcasePostCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcasePostCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcasePostCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcasePostCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcasePostCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcasePostCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseRemoveMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseRemoveMemberDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseRemoveMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseRemoveMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseRemoveMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseRemoveMemberDetails:other];
}

- (BOOL)isEqualToShowcaseRemoveMemberDetails:(DBTEAMLOGShowcaseRemoveMemberDetails *)aShowcaseRemoveMemberDetails {
  if (self == aShowcaseRemoveMemberDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseRemoveMemberDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseRemoveMemberDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseRemoveMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseRemoveMemberDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseRemoveMemberDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseRemoveMemberType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseRemoveMemberType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseRemoveMemberTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseRemoveMemberTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseRemoveMemberTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseRemoveMemberType:other];
}

- (BOOL)isEqualToShowcaseRemoveMemberType:(DBTEAMLOGShowcaseRemoveMemberType *)aShowcaseRemoveMemberType {
  if (self == aShowcaseRemoveMemberType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseRemoveMemberType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseRemoveMemberTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseRemoveMemberType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseRemoveMemberType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseRemoveMemberType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseRenamedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseRenamedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseRenamedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseRenamedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseRenamedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseRenamedDetails:other];
}

- (BOOL)isEqualToShowcaseRenamedDetails:(DBTEAMLOGShowcaseRenamedDetails *)aShowcaseRenamedDetails {
  if (self == aShowcaseRenamedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseRenamedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseRenamedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseRenamedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseRenamedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseRenamedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseRenamedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseRenamedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseRenamedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseRenamedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseRenamedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseRenamedType:other];
}

- (BOOL)isEqualToShowcaseRenamedType:(DBTEAMLOGShowcaseRenamedType *)aShowcaseRenamedType {
  if (self == aShowcaseRenamedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseRenamedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseRenamedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseRenamedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseRenamedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseRenamedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseRequestAccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseRequestAccessDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseRequestAccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseRequestAccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseRequestAccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseRequestAccessDetails:other];
}

- (BOOL)isEqualToShowcaseRequestAccessDetails:(DBTEAMLOGShowcaseRequestAccessDetails *)aShowcaseRequestAccessDetails {
  if (self == aShowcaseRequestAccessDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseRequestAccessDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseRequestAccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseRequestAccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseRequestAccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseRequestAccessDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseRequestAccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseRequestAccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseRequestAccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseRequestAccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseRequestAccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseRequestAccessType:other];
}

- (BOOL)isEqualToShowcaseRequestAccessType:(DBTEAMLOGShowcaseRequestAccessType *)aShowcaseRequestAccessType {
  if (self == aShowcaseRequestAccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseRequestAccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseRequestAccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseRequestAccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseRequestAccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseRequestAccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseResolveCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseResolveCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseResolveCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseResolveCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseResolveCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseResolveCommentDetails:other];
}

- (BOOL)isEqualToShowcaseResolveCommentDetails:
    (DBTEAMLOGShowcaseResolveCommentDetails *)aShowcaseResolveCommentDetails {
  if (self == aShowcaseResolveCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseResolveCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aShowcaseResolveCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseResolveCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseResolveCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseResolveCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGShowcaseResolveCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseResolveCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseResolveCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseResolveCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseResolveCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseResolveCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseResolveCommentType:other];
}

- (BOOL)isEqualToShowcaseResolveCommentType:(DBTEAMLOGShowcaseResolveCommentType *)aShowcaseResolveCommentType {
  if (self == aShowcaseResolveCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseResolveCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseResolveCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseResolveCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseResolveCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseResolveCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseRestoredDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseRestoredDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseRestoredDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseRestoredDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseRestoredDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseRestoredDetails:other];
}

- (BOOL)isEqualToShowcaseRestoredDetails:(DBTEAMLOGShowcaseRestoredDetails *)aShowcaseRestoredDetails {
  if (self == aShowcaseRestoredDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseRestoredDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseRestoredDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseRestoredDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseRestoredDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseRestoredDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseRestoredType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseRestoredType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseRestoredTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseRestoredTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseRestoredTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseRestoredType:other];
}

- (BOOL)isEqualToShowcaseRestoredType:(DBTEAMLOGShowcaseRestoredType *)aShowcaseRestoredType {
  if (self == aShowcaseRestoredType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseRestoredType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseRestoredTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseRestoredType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseRestoredType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseRestoredType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseTrashedDeprecatedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseTrashedDeprecatedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseTrashedDeprecatedDetails:other];
}

- (BOOL)isEqualToShowcaseTrashedDeprecatedDetails:
    (DBTEAMLOGShowcaseTrashedDeprecatedDetails *)aShowcaseTrashedDeprecatedDetails {
  if (self == aShowcaseTrashedDeprecatedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseTrashedDeprecatedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseTrashedDeprecatedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseTrashedDeprecatedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseTrashedDeprecatedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseTrashedDeprecatedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseTrashedDeprecatedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseTrashedDeprecatedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseTrashedDeprecatedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseTrashedDeprecatedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseTrashedDeprecatedType:other];
}

- (BOOL)isEqualToShowcaseTrashedDeprecatedType:
    (DBTEAMLOGShowcaseTrashedDeprecatedType *)aShowcaseTrashedDeprecatedType {
  if (self == aShowcaseTrashedDeprecatedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseTrashedDeprecatedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseTrashedDeprecatedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseTrashedDeprecatedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseTrashedDeprecatedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseTrashedDeprecatedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseTrashedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseTrashedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseTrashedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseTrashedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseTrashedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseTrashedDetails:other];
}

- (BOOL)isEqualToShowcaseTrashedDetails:(DBTEAMLOGShowcaseTrashedDetails *)aShowcaseTrashedDetails {
  if (self == aShowcaseTrashedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseTrashedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseTrashedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseTrashedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseTrashedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseTrashedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseTrashedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseTrashedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseTrashedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseTrashedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseTrashedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseTrashedType:other];
}

- (BOOL)isEqualToShowcaseTrashedType:(DBTEAMLOGShowcaseTrashedType *)aShowcaseTrashedType {
  if (self == aShowcaseTrashedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseTrashedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseTrashedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseTrashedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseTrashedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseTrashedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseUnresolveCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseUnresolveCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText != nil) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseUnresolveCommentDetails:other];
}

- (BOOL)isEqualToShowcaseUnresolveCommentDetails:
    (DBTEAMLOGShowcaseUnresolveCommentDetails *)aShowcaseUnresolveCommentDetails {
  if (self == aShowcaseUnresolveCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseUnresolveCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aShowcaseUnresolveCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseUnresolveCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseUnresolveCommentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGShowcaseUnresolveCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseUnresolveCommentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseUnresolveCommentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseUnresolveCommentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseUnresolveCommentTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseUnresolveCommentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseUnresolveCommentType:other];
}

- (BOOL)isEqualToShowcaseUnresolveCommentType:(DBTEAMLOGShowcaseUnresolveCommentType *)aShowcaseUnresolveCommentType {
  if (self == aShowcaseUnresolveCommentType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseUnresolveCommentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseUnresolveCommentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseUnresolveCommentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseUnresolveCommentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseUnresolveCommentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseUntrashedDeprecatedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseUntrashedDeprecatedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseUntrashedDeprecatedDetails:other];
}

- (BOOL)isEqualToShowcaseUntrashedDeprecatedDetails:
    (DBTEAMLOGShowcaseUntrashedDeprecatedDetails *)aShowcaseUntrashedDeprecatedDetails {
  if (self == aShowcaseUntrashedDeprecatedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseUntrashedDeprecatedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseUntrashedDeprecatedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseUntrashedDeprecatedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseUntrashedDeprecatedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseUntrashedDeprecatedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseUntrashedDeprecatedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseUntrashedDeprecatedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseUntrashedDeprecatedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseUntrashedDeprecatedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseUntrashedDeprecatedType:other];
}

- (BOOL)isEqualToShowcaseUntrashedDeprecatedType:
    (DBTEAMLOGShowcaseUntrashedDeprecatedType *)aShowcaseUntrashedDeprecatedType {
  if (self == aShowcaseUntrashedDeprecatedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseUntrashedDeprecatedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseUntrashedDeprecatedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseUntrashedDeprecatedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseUntrashedDeprecatedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseUntrashedDeprecatedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseUntrashedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseUntrashedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseUntrashedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseUntrashedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseUntrashedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseUntrashedDetails:other];
}

- (BOOL)isEqualToShowcaseUntrashedDetails:(DBTEAMLOGShowcaseUntrashedDetails *)aShowcaseUntrashedDetails {
  if (self == aShowcaseUntrashedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseUntrashedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseUntrashedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseUntrashedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseUntrashedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseUntrashedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseUntrashedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseUntrashedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseUntrashedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseUntrashedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseUntrashedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseUntrashedType:other];
}

- (BOOL)isEqualToShowcaseUntrashedType:(DBTEAMLOGShowcaseUntrashedType *)aShowcaseUntrashedType {
  if (self == aShowcaseUntrashedType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseUntrashedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseUntrashedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseUntrashedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseUntrashedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseUntrashedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseViewDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseViewDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  [DBStoneValidators nonnullValidator:nil](eventUuid);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseViewDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseViewDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseViewDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseViewDetails:other];
}

- (BOOL)isEqualToShowcaseViewDetails:(DBTEAMLOGShowcaseViewDetails *)aShowcaseViewDetails {
  if (self == aShowcaseViewDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aShowcaseViewDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseViewDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseViewDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseViewDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGShowcaseViewDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShowcaseViewType.h"

#pragma mark - API Object

@implementation DBTEAMLOGShowcaseViewType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGShowcaseViewTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGShowcaseViewTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShowcaseViewTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShowcaseViewType:other];
}

- (BOOL)isEqualToShowcaseViewType:(DBTEAMLOGShowcaseViewType *)aShowcaseViewType {
  if (self == aShowcaseViewType) {
    return YES;
  }
  if (![self.description_ isEqual:aShowcaseViewType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShowcaseViewTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGShowcaseViewType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGShowcaseViewType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGShowcaseViewType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSignInAsSessionEndDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSignInAsSessionEndDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSignInAsSessionEndDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSignInAsSessionEndDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSignInAsSessionEndDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSignInAsSessionEndDetails:other];
}

- (BOOL)isEqualToSignInAsSessionEndDetails:(DBTEAMLOGSignInAsSessionEndDetails *)aSignInAsSessionEndDetails {
  if (self == aSignInAsSessionEndDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSignInAsSessionEndDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSignInAsSessionEndDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSignInAsSessionEndDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSignInAsSessionEndDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSignInAsSessionEndType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSignInAsSessionEndType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSignInAsSessionEndTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSignInAsSessionEndTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSignInAsSessionEndTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSignInAsSessionEndType:other];
}

- (BOOL)isEqualToSignInAsSessionEndType:(DBTEAMLOGSignInAsSessionEndType *)aSignInAsSessionEndType {
  if (self == aSignInAsSessionEndType) {
    return YES;
  }
  if (![self.description_ isEqual:aSignInAsSessionEndType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSignInAsSessionEndTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSignInAsSessionEndType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSignInAsSessionEndType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSignInAsSessionEndType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSignInAsSessionStartDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSignInAsSessionStartDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSignInAsSessionStartDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSignInAsSessionStartDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSignInAsSessionStartDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSignInAsSessionStartDetails:other];
}

- (BOOL)isEqualToSignInAsSessionStartDetails:(DBTEAMLOGSignInAsSessionStartDetails *)aSignInAsSessionStartDetails {
  if (self == aSignInAsSessionStartDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSignInAsSessionStartDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSignInAsSessionStartDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSignInAsSessionStartDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSignInAsSessionStartDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSignInAsSessionStartType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSignInAsSessionStartType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSignInAsSessionStartTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSignInAsSessionStartTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSignInAsSessionStartTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSignInAsSessionStartType:other];
}

- (BOOL)isEqualToSignInAsSessionStartType:(DBTEAMLOGSignInAsSessionStartType *)aSignInAsSessionStartType {
  if (self == aSignInAsSessionStartType) {
    return YES;
  }
  if (![self.description_ isEqual:aSignInAsSessionStartType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSignInAsSessionStartTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSignInAsSessionStartType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSignInAsSessionStartType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSignInAsSessionStartType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncChangePolicyDetails.h"
#import "DBTEAMPOLICIESSmartSyncPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESSmartSyncPolicy *)dNewValue
                    previousValue:(DBTEAMPOLICIESSmartSyncPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSmartSyncChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncChangePolicyDetails:other];
}

- (BOOL)isEqualToSmartSyncChangePolicyDetails:(DBTEAMLOGSmartSyncChangePolicyDetails *)aSmartSyncChangePolicyDetails {
  if (self == aSmartSyncChangePolicyDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aSmartSyncChangePolicyDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSmartSyncChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSmartSyncChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMPOLICIESSmartSyncPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMPOLICIESSmartSyncPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSmartSyncChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMPOLICIESSmartSyncPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMPOLICIESSmartSyncPolicySerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMPOLICIESSmartSyncPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMPOLICIESSmartSyncPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSmartSyncChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSmartSyncChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncChangePolicyType:other];
}

- (BOOL)isEqualToSmartSyncChangePolicyType:(DBTEAMLOGSmartSyncChangePolicyType *)aSmartSyncChangePolicyType {
  if (self == aSmartSyncChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSmartSyncChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSmartSyncChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSmartSyncChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSmartSyncChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncCreateAdminPrivilegeReportDetails:other];
}

- (BOOL)isEqualToSmartSyncCreateAdminPrivilegeReportDetails:
    (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)aSmartSyncCreateAdminPrivilegeReportDetails {
  if (self == aSmartSyncCreateAdminPrivilegeReportDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncCreateAdminPrivilegeReportType:other];
}

- (BOOL)isEqualToSmartSyncCreateAdminPrivilegeReportType:
    (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType *)aSmartSyncCreateAdminPrivilegeReportType {
  if (self == aSmartSyncCreateAdminPrivilegeReportType) {
    return YES;
  }
  if (![self.description_ isEqual:aSmartSyncCreateAdminPrivilegeReportType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncNotOptOutDetails.h"
#import "DBTEAMLOGSmartSyncOptOutPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncNotOptOutDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGSmartSyncOptOutPolicy *)previousValue
                            dNewValue:(DBTEAMLOGSmartSyncOptOutPolicy *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncNotOptOutDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSmartSyncNotOptOutDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncNotOptOutDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncNotOptOutDetails:other];
}

- (BOOL)isEqualToSmartSyncNotOptOutDetails:(DBTEAMLOGSmartSyncNotOptOutDetails *)aSmartSyncNotOptOutDetails {
  if (self == aSmartSyncNotOptOutDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aSmartSyncNotOptOutDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSmartSyncNotOptOutDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncNotOptOutDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSmartSyncNotOptOutDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGSmartSyncOptOutPolicySerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGSmartSyncOptOutPolicySerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSmartSyncNotOptOutDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSmartSyncOptOutPolicy *previousValue =
      [DBTEAMLOGSmartSyncOptOutPolicySerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGSmartSyncOptOutPolicy *dNewValue =
      [DBTEAMLOGSmartSyncOptOutPolicySerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGSmartSyncNotOptOutDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncNotOptOutType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncNotOptOutType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncNotOptOutTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSmartSyncNotOptOutTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncNotOptOutTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncNotOptOutType:other];
}

- (BOOL)isEqualToSmartSyncNotOptOutType:(DBTEAMLOGSmartSyncNotOptOutType *)aSmartSyncNotOptOutType {
  if (self == aSmartSyncNotOptOutType) {
    return YES;
  }
  if (![self.description_ isEqual:aSmartSyncNotOptOutType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncNotOptOutTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSmartSyncNotOptOutType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSmartSyncNotOptOutType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSmartSyncNotOptOutType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncOptOutDetails.h"
#import "DBTEAMLOGSmartSyncOptOutPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncOptOutDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGSmartSyncOptOutPolicy *)previousValue
                            dNewValue:(DBTEAMLOGSmartSyncOptOutPolicy *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncOptOutDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSmartSyncOptOutDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncOptOutDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncOptOutDetails:other];
}

- (BOOL)isEqualToSmartSyncOptOutDetails:(DBTEAMLOGSmartSyncOptOutDetails *)aSmartSyncOptOutDetails {
  if (self == aSmartSyncOptOutDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aSmartSyncOptOutDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSmartSyncOptOutDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncOptOutDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSmartSyncOptOutDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGSmartSyncOptOutPolicySerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGSmartSyncOptOutPolicySerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSmartSyncOptOutDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSmartSyncOptOutPolicy *previousValue =
      [DBTEAMLOGSmartSyncOptOutPolicySerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGSmartSyncOptOutPolicy *dNewValue =
      [DBTEAMLOGSmartSyncOptOutPolicySerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGSmartSyncOptOutDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncOptOutPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncOptOutPolicy

#pragma mark - Constructors

- (instancetype)initWithDefault_ {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSmartSyncOptOutPolicyDefault_;
  }
  return self;
}

- (instancetype)initWithOptedOut {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSmartSyncOptOutPolicyOptedOut;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSmartSyncOptOutPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDefault_ {
  return _tag == DBTEAMLOGSmartSyncOptOutPolicyDefault_;
}

- (BOOL)isOptedOut {
  return _tag == DBTEAMLOGSmartSyncOptOutPolicyOptedOut;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSmartSyncOptOutPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSmartSyncOptOutPolicyDefault_:
    return @"DBTEAMLOGSmartSyncOptOutPolicyDefault_";
  case DBTEAMLOGSmartSyncOptOutPolicyOptedOut:
    return @"DBTEAMLOGSmartSyncOptOutPolicyOptedOut";
  case DBTEAMLOGSmartSyncOptOutPolicyOther:
    return @"DBTEAMLOGSmartSyncOptOutPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncOptOutPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSmartSyncOptOutPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncOptOutPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSmartSyncOptOutPolicyDefault_:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSmartSyncOptOutPolicyOptedOut:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSmartSyncOptOutPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncOptOutPolicy:other];
}

- (BOOL)isEqualToSmartSyncOptOutPolicy:(DBTEAMLOGSmartSyncOptOutPolicy *)aSmartSyncOptOutPolicy {
  if (self == aSmartSyncOptOutPolicy) {
    return YES;
  }
  if (self.tag != aSmartSyncOptOutPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSmartSyncOptOutPolicyDefault_:
    return [[self tagName] isEqual:[aSmartSyncOptOutPolicy tagName]];
  case DBTEAMLOGSmartSyncOptOutPolicyOptedOut:
    return [[self tagName] isEqual:[aSmartSyncOptOutPolicy tagName]];
  case DBTEAMLOGSmartSyncOptOutPolicyOther:
    return [[self tagName] isEqual:[aSmartSyncOptOutPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncOptOutPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSmartSyncOptOutPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDefault_]) {
    jsonDict[@".tag"] = @"default";
  } else if ([valueObj isOptedOut]) {
    jsonDict[@".tag"] = @"opted_out";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSmartSyncOptOutPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"default"]) {
    return [[DBTEAMLOGSmartSyncOptOutPolicy alloc] initWithDefault_];
  } else if ([tag isEqualToString:@"opted_out"]) {
    return [[DBTEAMLOGSmartSyncOptOutPolicy alloc] initWithOptedOut];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSmartSyncOptOutPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSmartSyncOptOutPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncOptOutType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncOptOutType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncOptOutTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSmartSyncOptOutTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncOptOutTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncOptOutType:other];
}

- (BOOL)isEqualToSmartSyncOptOutType:(DBTEAMLOGSmartSyncOptOutType *)aSmartSyncOptOutType {
  if (self == aSmartSyncOptOutType) {
    return YES;
  }
  if (![self.description_ isEqual:aSmartSyncOptOutType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncOptOutTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSmartSyncOptOutType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSmartSyncOptOutType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSmartSyncOptOutType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSpaceCapsType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSpaceCapsType

#pragma mark - Constructors

- (instancetype)initWithHard {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceCapsTypeHard;
  }
  return self;
}

- (instancetype)initWithOff {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceCapsTypeOff;
  }
  return self;
}

- (instancetype)initWithSoft {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceCapsTypeSoft;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceCapsTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isHard {
  return _tag == DBTEAMLOGSpaceCapsTypeHard;
}

- (BOOL)isOff {
  return _tag == DBTEAMLOGSpaceCapsTypeOff;
}

- (BOOL)isSoft {
  return _tag == DBTEAMLOGSpaceCapsTypeSoft;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSpaceCapsTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSpaceCapsTypeHard:
    return @"DBTEAMLOGSpaceCapsTypeHard";
  case DBTEAMLOGSpaceCapsTypeOff:
    return @"DBTEAMLOGSpaceCapsTypeOff";
  case DBTEAMLOGSpaceCapsTypeSoft:
    return @"DBTEAMLOGSpaceCapsTypeSoft";
  case DBTEAMLOGSpaceCapsTypeOther:
    return @"DBTEAMLOGSpaceCapsTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSpaceCapsTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSpaceCapsTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSpaceCapsTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSpaceCapsTypeHard:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceCapsTypeOff:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceCapsTypeSoft:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceCapsTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSpaceCapsType:other];
}

- (BOOL)isEqualToSpaceCapsType:(DBTEAMLOGSpaceCapsType *)aSpaceCapsType {
  if (self == aSpaceCapsType) {
    return YES;
  }
  if (self.tag != aSpaceCapsType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSpaceCapsTypeHard:
    return [[self tagName] isEqual:[aSpaceCapsType tagName]];
  case DBTEAMLOGSpaceCapsTypeOff:
    return [[self tagName] isEqual:[aSpaceCapsType tagName]];
  case DBTEAMLOGSpaceCapsTypeSoft:
    return [[self tagName] isEqual:[aSpaceCapsType tagName]];
  case DBTEAMLOGSpaceCapsTypeOther:
    return [[self tagName] isEqual:[aSpaceCapsType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSpaceCapsTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSpaceCapsType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isHard]) {
    jsonDict[@".tag"] = @"hard";
  } else if ([valueObj isOff]) {
    jsonDict[@".tag"] = @"off";
  } else if ([valueObj isSoft]) {
    jsonDict[@".tag"] = @"soft";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSpaceCapsType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"hard"]) {
    return [[DBTEAMLOGSpaceCapsType alloc] initWithHard];
  } else if ([tag isEqualToString:@"off"]) {
    return [[DBTEAMLOGSpaceCapsType alloc] initWithOff];
  } else if ([tag isEqualToString:@"soft"]) {
    return [[DBTEAMLOGSpaceCapsType alloc] initWithSoft];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSpaceCapsType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSpaceCapsType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSpaceLimitsStatus.h"

#pragma mark - API Object

@implementation DBTEAMLOGSpaceLimitsStatus

#pragma mark - Constructors

- (instancetype)initWithWithinQuota {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsStatusWithinQuota;
  }
  return self;
}

- (instancetype)initWithNearQuota {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsStatusNearQuota;
  }
  return self;
}

- (instancetype)initWithOverQuota {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsStatusOverQuota;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsStatusOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isWithinQuota {
  return _tag == DBTEAMLOGSpaceLimitsStatusWithinQuota;
}

- (BOOL)isNearQuota {
  return _tag == DBTEAMLOGSpaceLimitsStatusNearQuota;
}

- (BOOL)isOverQuota {
  return _tag == DBTEAMLOGSpaceLimitsStatusOverQuota;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSpaceLimitsStatusOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSpaceLimitsStatusWithinQuota:
    return @"DBTEAMLOGSpaceLimitsStatusWithinQuota";
  case DBTEAMLOGSpaceLimitsStatusNearQuota:
    return @"DBTEAMLOGSpaceLimitsStatusNearQuota";
  case DBTEAMLOGSpaceLimitsStatusOverQuota:
    return @"DBTEAMLOGSpaceLimitsStatusOverQuota";
  case DBTEAMLOGSpaceLimitsStatusOther:
    return @"DBTEAMLOGSpaceLimitsStatusOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSpaceLimitsStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSpaceLimitsStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSpaceLimitsStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSpaceLimitsStatusWithinQuota:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceLimitsStatusNearQuota:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceLimitsStatusOverQuota:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceLimitsStatusOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSpaceLimitsStatus:other];
}

- (BOOL)isEqualToSpaceLimitsStatus:(DBTEAMLOGSpaceLimitsStatus *)aSpaceLimitsStatus {
  if (self == aSpaceLimitsStatus) {
    return YES;
  }
  if (self.tag != aSpaceLimitsStatus.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSpaceLimitsStatusWithinQuota:
    return [[self tagName] isEqual:[aSpaceLimitsStatus tagName]];
  case DBTEAMLOGSpaceLimitsStatusNearQuota:
    return [[self tagName] isEqual:[aSpaceLimitsStatus tagName]];
  case DBTEAMLOGSpaceLimitsStatusOverQuota:
    return [[self tagName] isEqual:[aSpaceLimitsStatus tagName]];
  case DBTEAMLOGSpaceLimitsStatusOther:
    return [[self tagName] isEqual:[aSpaceLimitsStatus tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSpaceLimitsStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSpaceLimitsStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isWithinQuota]) {
    jsonDict[@".tag"] = @"within_quota";
  } else if ([valueObj isNearQuota]) {
    jsonDict[@".tag"] = @"near_quota";
  } else if ([valueObj isOverQuota]) {
    jsonDict[@".tag"] = @"over_quota";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSpaceLimitsStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"within_quota"]) {
    return [[DBTEAMLOGSpaceLimitsStatus alloc] initWithWithinQuota];
  } else if ([tag isEqualToString:@"near_quota"]) {
    return [[DBTEAMLOGSpaceLimitsStatus alloc] initWithNearQuota];
  } else if ([tag isEqualToString:@"over_quota"]) {
    return [[DBTEAMLOGSpaceLimitsStatus alloc] initWithOverQuota];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSpaceLimitsStatus alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSpaceLimitsStatus alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCertificate.h"
#import "DBTEAMLOGSsoAddCertDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoAddCertDetails

#pragma mark - Constructors

- (instancetype)initWithCertificateDetails:(DBTEAMLOGCertificate *)certificateDetails {
  [DBStoneValidators nonnullValidator:nil](certificateDetails);

  self = [super init];
  if (self) {
    _certificateDetails = certificateDetails;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoAddCertDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoAddCertDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoAddCertDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.certificateDetails hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoAddCertDetails:other];
}

- (BOOL)isEqualToSsoAddCertDetails:(DBTEAMLOGSsoAddCertDetails *)aSsoAddCertDetails {
  if (self == aSsoAddCertDetails) {
    return YES;
  }
  if (![self.certificateDetails isEqual:aSsoAddCertDetails.certificateDetails]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoAddCertDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoAddCertDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"certificate_details"] = [DBTEAMLOGCertificateSerializer serialize:valueObj.certificateDetails];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoAddCertDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGCertificate *certificateDetails =
      [DBTEAMLOGCertificateSerializer deserialize:valueDict[@"certificate_details"]];

  return [[DBTEAMLOGSsoAddCertDetails alloc] initWithCertificateDetails:certificateDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoAddCertType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoAddCertType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoAddCertTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoAddCertTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoAddCertTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoAddCertType:other];
}

- (BOOL)isEqualToSsoAddCertType:(DBTEAMLOGSsoAddCertType *)aSsoAddCertType {
  if (self == aSsoAddCertType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoAddCertType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoAddCertTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoAddCertType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoAddCertType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoAddCertType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoAddLoginUrlDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoAddLoginUrlDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSString *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoAddLoginUrlDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoAddLoginUrlDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoAddLoginUrlDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoAddLoginUrlDetails:other];
}

- (BOOL)isEqualToSsoAddLoginUrlDetails:(DBTEAMLOGSsoAddLoginUrlDetails *)aSsoAddLoginUrlDetails {
  if (self == aSsoAddLoginUrlDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSsoAddLoginUrlDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoAddLoginUrlDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoAddLoginUrlDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = valueObj.dNewValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoAddLoginUrlDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *dNewValue = valueDict[@"new_value"];

  return [[DBTEAMLOGSsoAddLoginUrlDetails alloc] initWithDNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoAddLoginUrlType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoAddLoginUrlType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoAddLoginUrlTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoAddLoginUrlTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoAddLoginUrlTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoAddLoginUrlType:other];
}

- (BOOL)isEqualToSsoAddLoginUrlType:(DBTEAMLOGSsoAddLoginUrlType *)aSsoAddLoginUrlType {
  if (self == aSsoAddLoginUrlType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoAddLoginUrlType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoAddLoginUrlTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoAddLoginUrlType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoAddLoginUrlType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoAddLoginUrlType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoAddLogoutUrlDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoAddLogoutUrlDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSString *)dNewValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoAddLogoutUrlDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoAddLogoutUrlDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoAddLogoutUrlDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoAddLogoutUrlDetails:other];
}

- (BOOL)isEqualToSsoAddLogoutUrlDetails:(DBTEAMLOGSsoAddLogoutUrlDetails *)aSsoAddLogoutUrlDetails {
  if (self == aSsoAddLogoutUrlDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aSsoAddLogoutUrlDetails.dNewValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoAddLogoutUrlDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoAddLogoutUrlDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = valueObj.dNewValue;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoAddLogoutUrlDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *dNewValue = valueDict[@"new_value"] ?: nil;

  return [[DBTEAMLOGSsoAddLogoutUrlDetails alloc] initWithDNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoAddLogoutUrlType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoAddLogoutUrlType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoAddLogoutUrlTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoAddLogoutUrlTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoAddLogoutUrlTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoAddLogoutUrlType:other];
}

- (BOOL)isEqualToSsoAddLogoutUrlType:(DBTEAMLOGSsoAddLogoutUrlType *)aSsoAddLogoutUrlType {
  if (self == aSsoAddLogoutUrlType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoAddLogoutUrlType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoAddLogoutUrlTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoAddLogoutUrlType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoAddLogoutUrlType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoAddLogoutUrlType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCertificate.h"
#import "DBTEAMLOGSsoChangeCertDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeCertDetails

#pragma mark - Constructors

- (instancetype)initWithDNewCertificateDetails:(DBTEAMLOGCertificate *)dNewCertificateDetails
                    previousCertificateDetails:(DBTEAMLOGCertificate *)previousCertificateDetails {
  [DBStoneValidators nonnullValidator:nil](dNewCertificateDetails);

  self = [super init];
  if (self) {
    _previousCertificateDetails = previousCertificateDetails;
    _dNewCertificateDetails = dNewCertificateDetails;
  }
  return self;
}

- (instancetype)initWithDNewCertificateDetails:(DBTEAMLOGCertificate *)dNewCertificateDetails {
  return [self initWithDNewCertificateDetails:dNewCertificateDetails previousCertificateDetails:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeCertDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoChangeCertDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeCertDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewCertificateDetails hash];
  if (self.previousCertificateDetails != nil) {
    result = prime * result + [self.previousCertificateDetails hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeCertDetails:other];
}

- (BOOL)isEqualToSsoChangeCertDetails:(DBTEAMLOGSsoChangeCertDetails *)aSsoChangeCertDetails {
  if (self == aSsoChangeCertDetails) {
    return YES;
  }
  if (![self.dNewCertificateDetails isEqual:aSsoChangeCertDetails.dNewCertificateDetails]) {
    return NO;
  }
  if (self.previousCertificateDetails) {
    if (![self.previousCertificateDetails isEqual:aSsoChangeCertDetails.previousCertificateDetails]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeCertDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoChangeCertDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_certificate_details"] = [DBTEAMLOGCertificateSerializer serialize:valueObj.dNewCertificateDetails];
  if (valueObj.previousCertificateDetails) {
    jsonDict[@"previous_certificate_details"] =
        [DBTEAMLOGCertificateSerializer serialize:valueObj.previousCertificateDetails];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoChangeCertDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGCertificate *dNewCertificateDetails =
      [DBTEAMLOGCertificateSerializer deserialize:valueDict[@"new_certificate_details"]];
  DBTEAMLOGCertificate *previousCertificateDetails =
      valueDict[@"previous_certificate_details"]
          ? [DBTEAMLOGCertificateSerializer deserialize:valueDict[@"previous_certificate_details"]]
          : nil;

  return [[DBTEAMLOGSsoChangeCertDetails alloc] initWithDNewCertificateDetails:dNewCertificateDetails
                                                    previousCertificateDetails:previousCertificateDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeCertType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeCertType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeCertTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoChangeCertTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeCertTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeCertType:other];
}

- (BOOL)isEqualToSsoChangeCertType:(DBTEAMLOGSsoChangeCertType *)aSsoChangeCertType {
  if (self == aSsoChangeCertType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoChangeCertType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeCertTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoChangeCertType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoChangeCertType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoChangeCertType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeLoginUrlDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeLoginUrlDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSString *)previousValue dNewValue:(NSString *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeLoginUrlDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoChangeLoginUrlDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeLoginUrlDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeLoginUrlDetails:other];
}

- (BOOL)isEqualToSsoChangeLoginUrlDetails:(DBTEAMLOGSsoChangeLoginUrlDetails *)aSsoChangeLoginUrlDetails {
  if (self == aSsoChangeLoginUrlDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aSsoChangeLoginUrlDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSsoChangeLoginUrlDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeLoginUrlDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoChangeLoginUrlDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = valueObj.previousValue;
  jsonDict[@"new_value"] = valueObj.dNewValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoChangeLoginUrlDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *previousValue = valueDict[@"previous_value"];
  NSString *dNewValue = valueDict[@"new_value"];

  return [[DBTEAMLOGSsoChangeLoginUrlDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeLoginUrlType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeLoginUrlType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeLoginUrlTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoChangeLoginUrlTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeLoginUrlTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeLoginUrlType:other];
}

- (BOOL)isEqualToSsoChangeLoginUrlType:(DBTEAMLOGSsoChangeLoginUrlType *)aSsoChangeLoginUrlType {
  if (self == aSsoChangeLoginUrlType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoChangeLoginUrlType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeLoginUrlTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoChangeLoginUrlType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoChangeLoginUrlType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoChangeLoginUrlType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeLogoutUrlDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeLogoutUrlDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSString *)previousValue dNewValue:(NSString *)dNewValue {

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithPreviousValue:nil dNewValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }
  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeLogoutUrlDetails:other];
}

- (BOOL)isEqualToSsoChangeLogoutUrlDetails:(DBTEAMLOGSsoChangeLogoutUrlDetails *)aSsoChangeLogoutUrlDetails {
  if (self == aSsoChangeLogoutUrlDetails) {
    return YES;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSsoChangeLogoutUrlDetails.previousValue]) {
      return NO;
    }
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aSsoChangeLogoutUrlDetails.dNewValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoChangeLogoutUrlDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = valueObj.previousValue;
  }
  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = valueObj.dNewValue;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoChangeLogoutUrlDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *previousValue = valueDict[@"previous_value"] ?: nil;
  NSString *dNewValue = valueDict[@"new_value"] ?: nil;

  return [[DBTEAMLOGSsoChangeLogoutUrlDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeLogoutUrlType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeLogoutUrlType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeLogoutUrlTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoChangeLogoutUrlTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeLogoutUrlTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeLogoutUrlType:other];
}

- (BOOL)isEqualToSsoChangeLogoutUrlType:(DBTEAMLOGSsoChangeLogoutUrlType *)aSsoChangeLogoutUrlType {
  if (self == aSsoChangeLogoutUrlType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoChangeLogoutUrlType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeLogoutUrlTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoChangeLogoutUrlType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoChangeLogoutUrlType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoChangeLogoutUrlType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangePolicyDetails.h"
#import "DBTEAMPOLICIESSsoPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESSsoPolicy *)dNewValue
                    previousValue:(DBTEAMPOLICIESSsoPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESSsoPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangePolicyDetails:other];
}

- (BOOL)isEqualToSsoChangePolicyDetails:(DBTEAMLOGSsoChangePolicyDetails *)aSsoChangePolicyDetails {
  if (self == aSsoChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSsoChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSsoChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMPOLICIESSsoPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMPOLICIESSsoPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMPOLICIESSsoPolicy *dNewValue = [DBTEAMPOLICIESSsoPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMPOLICIESSsoPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMPOLICIESSsoPolicySerializer deserialize:valueDict[@"previous_value"]] : nil;

  return [[DBTEAMLOGSsoChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangePolicyType:other];
}

- (BOOL)isEqualToSsoChangePolicyType:(DBTEAMLOGSsoChangePolicyType *)aSsoChangePolicyType {
  if (self == aSsoChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeSamlIdentityModeDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeSamlIdentityModeDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSNumber *)previousValue dNewValue:(NSNumber *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeSamlIdentityModeDetails:other];
}

- (BOOL)isEqualToSsoChangeSamlIdentityModeDetails:
    (DBTEAMLOGSsoChangeSamlIdentityModeDetails *)aSsoChangeSamlIdentityModeDetails {
  if (self == aSsoChangeSamlIdentityModeDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aSsoChangeSamlIdentityModeDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSsoChangeSamlIdentityModeDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoChangeSamlIdentityModeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = valueObj.previousValue;
  jsonDict[@"new_value"] = valueObj.dNewValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoChangeSamlIdentityModeDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *previousValue = valueDict[@"previous_value"];
  NSNumber *dNewValue = valueDict[@"new_value"];

  return [[DBTEAMLOGSsoChangeSamlIdentityModeDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeSamlIdentityModeType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeSamlIdentityModeType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeSamlIdentityModeTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoChangeSamlIdentityModeTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeSamlIdentityModeTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeSamlIdentityModeType:other];
}

- (BOOL)isEqualToSsoChangeSamlIdentityModeType:
    (DBTEAMLOGSsoChangeSamlIdentityModeType *)aSsoChangeSamlIdentityModeType {
  if (self == aSsoChangeSamlIdentityModeType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoChangeSamlIdentityModeType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeSamlIdentityModeTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoChangeSamlIdentityModeType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoChangeSamlIdentityModeType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoChangeSamlIdentityModeType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFailureDetailsLogInfo.h"
#import "DBTEAMLOGSsoErrorDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoErrorDetails

#pragma mark - Constructors

- (instancetype)initWithErrorDetails:(DBTEAMLOGFailureDetailsLogInfo *)errorDetails {
  [DBStoneValidators nonnullValidator:nil](errorDetails);

  self = [super init];
  if (self) {
    _errorDetails = errorDetails;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoErrorDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoErrorDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoErrorDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.errorDetails hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoErrorDetails:other];
}

- (BOOL)isEqualToSsoErrorDetails:(DBTEAMLOGSsoErrorDetails *)aSsoErrorDetails {
  if (self == aSsoErrorDetails) {
    return YES;
  }
  if (![self.errorDetails isEqual:aSsoErrorDetails.errorDetails]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoErrorDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoErrorDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"error_details"] = [DBTEAMLOGFailureDetailsLogInfoSerializer serialize:valueObj.errorDetails];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoErrorDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGFailureDetailsLogInfo *errorDetails =
      [DBTEAMLOGFailureDetailsLogInfoSerializer deserialize:valueDict[@"error_details"]];

  return [[DBTEAMLOGSsoErrorDetails alloc] initWithErrorDetails:errorDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoErrorType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoErrorType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoErrorTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoErrorTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoErrorTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoErrorType:other];
}

- (BOOL)isEqualToSsoErrorType:(DBTEAMLOGSsoErrorType *)aSsoErrorType {
  if (self == aSsoErrorType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoErrorType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoErrorTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoErrorType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoErrorType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoErrorType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoRemoveCertDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoRemoveCertDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoRemoveCertDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoRemoveCertDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoRemoveCertDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoRemoveCertDetails:other];
}

- (BOOL)isEqualToSsoRemoveCertDetails:(DBTEAMLOGSsoRemoveCertDetails *)aSsoRemoveCertDetails {
  if (self == aSsoRemoveCertDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoRemoveCertDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoRemoveCertDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoRemoveCertDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSsoRemoveCertDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoRemoveCertType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoRemoveCertType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoRemoveCertTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoRemoveCertTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoRemoveCertTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoRemoveCertType:other];
}

- (BOOL)isEqualToSsoRemoveCertType:(DBTEAMLOGSsoRemoveCertType *)aSsoRemoveCertType {
  if (self == aSsoRemoveCertType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoRemoveCertType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoRemoveCertTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoRemoveCertType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoRemoveCertType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoRemoveCertType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoRemoveLoginUrlDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoRemoveLoginUrlDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSString *)previousValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoRemoveLoginUrlDetails:other];
}

- (BOOL)isEqualToSsoRemoveLoginUrlDetails:(DBTEAMLOGSsoRemoveLoginUrlDetails *)aSsoRemoveLoginUrlDetails {
  if (self == aSsoRemoveLoginUrlDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aSsoRemoveLoginUrlDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoRemoveLoginUrlDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = valueObj.previousValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoRemoveLoginUrlDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *previousValue = valueDict[@"previous_value"];

  return [[DBTEAMLOGSsoRemoveLoginUrlDetails alloc] initWithPreviousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoRemoveLoginUrlType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoRemoveLoginUrlType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoRemoveLoginUrlTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoRemoveLoginUrlTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoRemoveLoginUrlTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoRemoveLoginUrlType:other];
}

- (BOOL)isEqualToSsoRemoveLoginUrlType:(DBTEAMLOGSsoRemoveLoginUrlType *)aSsoRemoveLoginUrlType {
  if (self == aSsoRemoveLoginUrlType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoRemoveLoginUrlType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoRemoveLoginUrlTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoRemoveLoginUrlType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoRemoveLoginUrlType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoRemoveLoginUrlType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoRemoveLogoutUrlDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoRemoveLogoutUrlDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(NSString *)previousValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoRemoveLogoutUrlDetails:other];
}

- (BOOL)isEqualToSsoRemoveLogoutUrlDetails:(DBTEAMLOGSsoRemoveLogoutUrlDetails *)aSsoRemoveLogoutUrlDetails {
  if (self == aSsoRemoveLogoutUrlDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aSsoRemoveLogoutUrlDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoRemoveLogoutUrlDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = valueObj.previousValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoRemoveLogoutUrlDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *previousValue = valueDict[@"previous_value"];

  return [[DBTEAMLOGSsoRemoveLogoutUrlDetails alloc] initWithPreviousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoRemoveLogoutUrlType.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoRemoveLogoutUrlType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSsoRemoveLogoutUrlTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSsoRemoveLogoutUrlTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoRemoveLogoutUrlTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoRemoveLogoutUrlType:other];
}

- (BOOL)isEqualToSsoRemoveLogoutUrlType:(DBTEAMLOGSsoRemoveLogoutUrlType *)aSsoRemoveLogoutUrlType {
  if (self == aSsoRemoveLogoutUrlType) {
    return YES;
  }
  if (![self.description_ isEqual:aSsoRemoveLogoutUrlType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoRemoveLogoutUrlTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSsoRemoveLogoutUrlType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSsoRemoveLogoutUrlType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGSsoRemoveLogoutUrlType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamActivityCreateReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamActivityCreateReportDetails

#pragma mark - Constructors

- (instancetype)initWithStartDate:(NSDate *)startDate endDate:(NSDate *)endDate {
  [DBStoneValidators nonnullValidator:nil](startDate);
  [DBStoneValidators nonnullValidator:nil](endDate);

  self = [super init];
  if (self) {
    _startDate = startDate;
    _endDate = endDate;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamActivityCreateReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamActivityCreateReportDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamActivityCreateReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.startDate hash];
  result = prime * result + [self.endDate hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamActivityCreateReportDetails:other];
}

- (BOOL)isEqualToTeamActivityCreateReportDetails:
    (DBTEAMLOGTeamActivityCreateReportDetails *)aTeamActivityCreateReportDetails {
  if (self == aTeamActivityCreateReportDetails) {
    return YES;
  }
  if (![self.startDate isEqual:aTeamActivityCreateReportDetails.startDate]) {
    return NO;
  }
  if (![self.endDate isEqual:aTeamActivityCreateReportDetails.endDate]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamActivityCreateReportDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamActivityCreateReportDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"start_date"] = [DBNSDateSerializer serialize:valueObj.startDate dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  jsonDict[@"end_date"] = [DBNSDateSerializer serialize:valueObj.endDate dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamActivityCreateReportDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSDate *startDate = [DBNSDateSerializer deserialize:valueDict[@"start_date"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  NSDate *endDate = [DBNSDateSerializer deserialize:valueDict[@"end_date"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];

  return [[DBTEAMLOGTeamActivityCreateReportDetails alloc] initWithStartDate:startDate endDate:endDate];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamActivityCreateReportType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamActivityCreateReportType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamActivityCreateReportTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamActivityCreateReportTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamActivityCreateReportTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamActivityCreateReportType:other];
}

- (BOOL)isEqualToTeamActivityCreateReportType:(DBTEAMLOGTeamActivityCreateReportType *)aTeamActivityCreateReportType {
  if (self == aTeamActivityCreateReportType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamActivityCreateReportType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamActivityCreateReportTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamActivityCreateReportType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamActivityCreateReportType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamActivityCreateReportType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGActorLogInfo.h"
#import "DBTEAMLOGAssetLogInfo.h"
#import "DBTEAMLOGContextLogInfo.h"
#import "DBTEAMLOGEventCategory.h"
#import "DBTEAMLOGEventDetails.h"
#import "DBTEAMLOGEventType.h"
#import "DBTEAMLOGOriginLogInfo.h"
#import "DBTEAMLOGParticipantLogInfo.h"
#import "DBTEAMLOGTeamEvent.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamEvent

#pragma mark - Constructors

- (instancetype)initWithTimestamp:(NSDate *)timestamp
                    eventCategory:(DBTEAMLOGEventCategory *)eventCategory
                        eventType:(DBTEAMLOGEventType *)eventType
                          details:(DBTEAMLOGEventDetails *)details
                            actor:(DBTEAMLOGActorLogInfo *)actor
                           origin:(DBTEAMLOGOriginLogInfo *)origin
             involveNonTeamMember:(NSNumber *)involveNonTeamMember
                          context:(DBTEAMLOGContextLogInfo *)context
                     participants:(NSArray<DBTEAMLOGParticipantLogInfo *> *)participants
                           assets:(NSArray<DBTEAMLOGAssetLogInfo *> *)assets {
  [DBStoneValidators nonnullValidator:nil](timestamp);
  [DBStoneValidators nonnullValidator:nil](eventCategory);
  [DBStoneValidators nonnullValidator:nil](eventType);
  [DBStoneValidators nonnullValidator:nil](details);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](participants);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](assets);

  self = [super init];
  if (self) {
    _timestamp = timestamp;
    _eventCategory = eventCategory;
    _actor = actor;
    _origin = origin;
    _involveNonTeamMember = involveNonTeamMember;
    _context = context;
    _participants = participants;
    _assets = assets;
    _eventType = eventType;
    _details = details;
  }
  return self;
}

- (instancetype)initWithTimestamp:(NSDate *)timestamp
                    eventCategory:(DBTEAMLOGEventCategory *)eventCategory
                        eventType:(DBTEAMLOGEventType *)eventType
                          details:(DBTEAMLOGEventDetails *)details {
  return [self initWithTimestamp:timestamp
                   eventCategory:eventCategory
                       eventType:eventType
                         details:details
                           actor:nil
                          origin:nil
            involveNonTeamMember:nil
                         context:nil
                    participants:nil
                          assets:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamEventSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamEventSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamEventSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.timestamp hash];
  result = prime * result + [self.eventCategory hash];
  result = prime * result + [self.eventType hash];
  result = prime * result + [self.details hash];
  if (self.actor != nil) {
    result = prime * result + [self.actor hash];
  }
  if (self.origin != nil) {
    result = prime * result + [self.origin hash];
  }
  if (self.involveNonTeamMember != nil) {
    result = prime * result + [self.involveNonTeamMember hash];
  }
  if (self.context != nil) {
    result = prime * result + [self.context hash];
  }
  if (self.participants != nil) {
    result = prime * result + [self.participants hash];
  }
  if (self.assets != nil) {
    result = prime * result + [self.assets hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamEvent:other];
}

- (BOOL)isEqualToTeamEvent:(DBTEAMLOGTeamEvent *)aTeamEvent {
  if (self == aTeamEvent) {
    return YES;
  }
  if (![self.timestamp isEqual:aTeamEvent.timestamp]) {
    return NO;
  }
  if (![self.eventCategory isEqual:aTeamEvent.eventCategory]) {
    return NO;
  }
  if (![self.eventType isEqual:aTeamEvent.eventType]) {
    return NO;
  }
  if (![self.details isEqual:aTeamEvent.details]) {
    return NO;
  }
  if (self.actor) {
    if (![self.actor isEqual:aTeamEvent.actor]) {
      return NO;
    }
  }
  if (self.origin) {
    if (![self.origin isEqual:aTeamEvent.origin]) {
      return NO;
    }
  }
  if (self.involveNonTeamMember) {
    if (![self.involveNonTeamMember isEqual:aTeamEvent.involveNonTeamMember]) {
      return NO;
    }
  }
  if (self.context) {
    if (![self.context isEqual:aTeamEvent.context]) {
      return NO;
    }
  }
  if (self.participants) {
    if (![self.participants isEqual:aTeamEvent.participants]) {
      return NO;
    }
  }
  if (self.assets) {
    if (![self.assets isEqual:aTeamEvent.assets]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamEventSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamEvent *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"timestamp"] = [DBNSDateSerializer serialize:valueObj.timestamp dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  jsonDict[@"event_category"] = [DBTEAMLOGEventCategorySerializer serialize:valueObj.eventCategory];
  jsonDict[@"event_type"] = [DBTEAMLOGEventTypeSerializer serialize:valueObj.eventType];
  jsonDict[@"details"] = [DBTEAMLOGEventDetailsSerializer serialize:valueObj.details];
  if (valueObj.actor) {
    jsonDict[@"actor"] = [DBTEAMLOGActorLogInfoSerializer serialize:valueObj.actor];
  }
  if (valueObj.origin) {
    jsonDict[@"origin"] = [DBTEAMLOGOriginLogInfoSerializer serialize:valueObj.origin];
  }
  if (valueObj.involveNonTeamMember) {
    jsonDict[@"involve_non_team_member"] = valueObj.involveNonTeamMember;
  }
  if (valueObj.context) {
    jsonDict[@"context"] = [DBTEAMLOGContextLogInfoSerializer serialize:valueObj.context];
  }
  if (valueObj.participants) {
    jsonDict[@"participants"] = [DBArraySerializer serialize:valueObj.participants
                                                   withBlock:^id(id elem0) {
                                                     return [DBTEAMLOGParticipantLogInfoSerializer serialize:elem0];
                                                   }];
  }
  if (valueObj.assets) {
    jsonDict[@"assets"] = [DBArraySerializer serialize:valueObj.assets
                                             withBlock:^id(id elem0) {
                                               return [DBTEAMLOGAssetLogInfoSerializer serialize:elem0];
                                             }];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamEvent *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSDate *timestamp = [DBNSDateSerializer deserialize:valueDict[@"timestamp"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  DBTEAMLOGEventCategory *eventCategory = [DBTEAMLOGEventCategorySerializer deserialize:valueDict[@"event_category"]];
  DBTEAMLOGEventType *eventType = [DBTEAMLOGEventTypeSerializer deserialize:valueDict[@"event_type"]];
  DBTEAMLOGEventDetails *details = [DBTEAMLOGEventDetailsSerializer deserialize:valueDict[@"details"]];
  DBTEAMLOGActorLogInfo *actor =
      valueDict[@"actor"] ? [DBTEAMLOGActorLogInfoSerializer deserialize:valueDict[@"actor"]] : nil;
  DBTEAMLOGOriginLogInfo *origin =
      valueDict[@"origin"] ? [DBTEAMLOGOriginLogInfoSerializer deserialize:valueDict[@"origin"]] : nil;
  NSNumber *involveNonTeamMember = valueDict[@"involve_non_team_member"] ?: nil;
  DBTEAMLOGContextLogInfo *context =
      valueDict[@"context"] ? [DBTEAMLOGContextLogInfoSerializer deserialize:valueDict[@"context"]] : nil;
  NSArray<DBTEAMLOGParticipantLogInfo *> *participants =
      valueDict[@"participants"]
          ? [DBArraySerializer deserialize:valueDict[@"participants"]
                                 withBlock:^id(id elem0) {
                                   return [DBTEAMLOGParticipantLogInfoSerializer deserialize:elem0];
                                 }]
          : nil;
  NSArray<DBTEAMLOGAssetLogInfo *> *assets =
      valueDict[@"assets"] ? [DBArraySerializer deserialize:valueDict[@"assets"]
                                                  withBlock:^id(id elem0) {
                                                    return [DBTEAMLOGAssetLogInfoSerializer deserialize:elem0];
                                                  }]
                           : nil;

  return [[DBTEAMLOGTeamEvent alloc] initWithTimestamp:timestamp
                                         eventCategory:eventCategory
                                             eventType:eventType
                                               details:details
                                                 actor:actor
                                                origin:origin
                                  involveNonTeamMember:involveNonTeamMember
                                               context:context
                                          participants:participants
                                                assets:assets];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderChangeStatusDetails.h"
#import "DBTEAMTeamFolderStatus.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderChangeStatusDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMTeamFolderStatus *)dNewValue
                    previousValue:(DBTEAMTeamFolderStatus *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMTeamFolderStatus *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderChangeStatusDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamFolderChangeStatusDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderChangeStatusDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderChangeStatusDetails:other];
}

- (BOOL)isEqualToTeamFolderChangeStatusDetails:
    (DBTEAMLOGTeamFolderChangeStatusDetails *)aTeamFolderChangeStatusDetails {
  if (self == aTeamFolderChangeStatusDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aTeamFolderChangeStatusDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aTeamFolderChangeStatusDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderChangeStatusDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamFolderChangeStatusDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMTeamFolderStatusSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMTeamFolderStatusSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamFolderChangeStatusDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMTeamFolderStatus *dNewValue = [DBTEAMTeamFolderStatusSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMTeamFolderStatus *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMTeamFolderStatusSerializer deserialize:valueDict[@"previous_value"]] : nil;

  return [[DBTEAMLOGTeamFolderChangeStatusDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderChangeStatusType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderChangeStatusType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderChangeStatusTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamFolderChangeStatusTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderChangeStatusTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderChangeStatusType:other];
}

- (BOOL)isEqualToTeamFolderChangeStatusType:(DBTEAMLOGTeamFolderChangeStatusType *)aTeamFolderChangeStatusType {
  if (self == aTeamFolderChangeStatusType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamFolderChangeStatusType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderChangeStatusTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamFolderChangeStatusType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamFolderChangeStatusType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamFolderChangeStatusType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderCreateDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderCreateDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamFolderCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderCreateDetails:other];
}

- (BOOL)isEqualToTeamFolderCreateDetails:(DBTEAMLOGTeamFolderCreateDetails *)aTeamFolderCreateDetails {
  if (self == aTeamFolderCreateDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderCreateDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamFolderCreateDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamFolderCreateDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTeamFolderCreateDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderCreateType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderCreateType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderCreateTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamFolderCreateTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderCreateTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderCreateType:other];
}

- (BOOL)isEqualToTeamFolderCreateType:(DBTEAMLOGTeamFolderCreateType *)aTeamFolderCreateType {
  if (self == aTeamFolderCreateType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamFolderCreateType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderCreateTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamFolderCreateType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamFolderCreateType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamFolderCreateType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderDowngradeDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderDowngradeDetails

#pragma mark - Constructors

- (instancetype)initWithTargetAssetIndex:(NSNumber *)targetAssetIndex {
  [DBStoneValidators nonnullValidator:nil](targetAssetIndex);

  self = [super init];
  if (self) {
    _targetAssetIndex = targetAssetIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderDowngradeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamFolderDowngradeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderDowngradeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetAssetIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderDowngradeDetails:other];
}

- (BOOL)isEqualToTeamFolderDowngradeDetails:(DBTEAMLOGTeamFolderDowngradeDetails *)aTeamFolderDowngradeDetails {
  if (self == aTeamFolderDowngradeDetails) {
    return YES;
  }
  if (![self.targetAssetIndex isEqual:aTeamFolderDowngradeDetails.targetAssetIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderDowngradeDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamFolderDowngradeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_asset_index"] = valueObj.targetAssetIndex;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamFolderDowngradeDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *targetAssetIndex = valueDict[@"target_asset_index"];

  return [[DBTEAMLOGTeamFolderDowngradeDetails alloc] initWithTargetAssetIndex:targetAssetIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderDowngradeType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderDowngradeType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderDowngradeTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamFolderDowngradeTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderDowngradeTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderDowngradeType:other];
}

- (BOOL)isEqualToTeamFolderDowngradeType:(DBTEAMLOGTeamFolderDowngradeType *)aTeamFolderDowngradeType {
  if (self == aTeamFolderDowngradeType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamFolderDowngradeType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderDowngradeTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamFolderDowngradeType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamFolderDowngradeType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamFolderDowngradeType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderPermanentlyDeleteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderPermanentlyDeleteDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderPermanentlyDeleteDetails:other];
}

- (BOOL)isEqualToTeamFolderPermanentlyDeleteDetails:
    (DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)aTeamFolderPermanentlyDeleteDetails {
  if (self == aTeamFolderPermanentlyDeleteDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTeamFolderPermanentlyDeleteDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderPermanentlyDeleteType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderPermanentlyDeleteType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderPermanentlyDeleteTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamFolderPermanentlyDeleteTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderPermanentlyDeleteTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderPermanentlyDeleteType:other];
}

- (BOOL)isEqualToTeamFolderPermanentlyDeleteType:
    (DBTEAMLOGTeamFolderPermanentlyDeleteType *)aTeamFolderPermanentlyDeleteType {
  if (self == aTeamFolderPermanentlyDeleteType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamFolderPermanentlyDeleteType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderPermanentlyDeleteTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamFolderPermanentlyDeleteType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamFolderPermanentlyDeleteType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamFolderPermanentlyDeleteType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderRenameDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderRenameDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousFolderName:(NSString *)previousFolderName dNewFolderName:(NSString *)dNewFolderName {
  [DBStoneValidators nonnullValidator:nil](previousFolderName);
  [DBStoneValidators nonnullValidator:nil](dNewFolderName);

  self = [super init];
  if (self) {
    _previousFolderName = previousFolderName;
    _dNewFolderName = dNewFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderRenameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamFolderRenameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderRenameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousFolderName hash];
  result = prime * result + [self.dNewFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderRenameDetails:other];
}

- (BOOL)isEqualToTeamFolderRenameDetails:(DBTEAMLOGTeamFolderRenameDetails *)aTeamFolderRenameDetails {
  if (self == aTeamFolderRenameDetails) {
    return YES;
  }
  if (![self.previousFolderName isEqual:aTeamFolderRenameDetails.previousFolderName]) {
    return NO;
  }
  if (![self.dNewFolderName isEqual:aTeamFolderRenameDetails.dNewFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderRenameDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamFolderRenameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_folder_name"] = valueObj.previousFolderName;
  jsonDict[@"new_folder_name"] = valueObj.dNewFolderName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamFolderRenameDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *previousFolderName = valueDict[@"previous_folder_name"];
  NSString *dNewFolderName = valueDict[@"new_folder_name"];

  return [[DBTEAMLOGTeamFolderRenameDetails alloc] initWithPreviousFolderName:previousFolderName
                                                               dNewFolderName:dNewFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderRenameType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderRenameType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderRenameTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamFolderRenameTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderRenameTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderRenameType:other];
}

- (BOOL)isEqualToTeamFolderRenameType:(DBTEAMLOGTeamFolderRenameType *)aTeamFolderRenameType {
  if (self == aTeamFolderRenameType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamFolderRenameType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderRenameTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamFolderRenameType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamFolderRenameType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamFolderRenameType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGTeamLinkedAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamLinkedAppLogInfo

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId displayName:(NSString *)displayName {

  self = [super initWithAppId:appId displayName:displayName];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAppId:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamLinkedAppLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamLinkedAppLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamLinkedAppLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.appId != nil) {
    result = prime * result + [self.appId hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamLinkedAppLogInfo:other];
}

- (BOOL)isEqualToTeamLinkedAppLogInfo:(DBTEAMLOGTeamLinkedAppLogInfo *)aTeamLinkedAppLogInfo {
  if (self == aTeamLinkedAppLogInfo) {
    return YES;
  }
  if (self.appId) {
    if (![self.appId isEqual:aTeamLinkedAppLogInfo.appId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aTeamLinkedAppLogInfo.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamLinkedAppLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamLinkedAppLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.appId) {
    jsonDict[@"app_id"] = valueObj.appId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamLinkedAppLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *appId = valueDict[@"app_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGTeamLinkedAppLogInfo alloc] initWithAppId:appId displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamMemberLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamMemberLogInfo

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId
                      displayName:(NSString *)displayName
                            email:(NSString *)email
                     teamMemberId:(NSString *)teamMemberId
                 memberExternalId:(NSString *)memberExternalId {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:nil]](displayName);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](email);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(64) pattern:nil]](memberExternalId);

  self = [super initWithAccountId:accountId displayName:displayName email:email];
  if (self) {
    _teamMemberId = teamMemberId;
    _memberExternalId = memberExternalId;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAccountId:nil displayName:nil email:nil teamMemberId:nil memberExternalId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamMemberLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamMemberLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamMemberLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.accountId != nil) {
    result = prime * result + [self.accountId hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }
  if (self.email != nil) {
    result = prime * result + [self.email hash];
  }
  if (self.teamMemberId != nil) {
    result = prime * result + [self.teamMemberId hash];
  }
  if (self.memberExternalId != nil) {
    result = prime * result + [self.memberExternalId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMemberLogInfo:other];
}

- (BOOL)isEqualToTeamMemberLogInfo:(DBTEAMLOGTeamMemberLogInfo *)aTeamMemberLogInfo {
  if (self == aTeamMemberLogInfo) {
    return YES;
  }
  if (self.accountId) {
    if (![self.accountId isEqual:aTeamMemberLogInfo.accountId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aTeamMemberLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.email) {
    if (![self.email isEqual:aTeamMemberLogInfo.email]) {
      return NO;
    }
  }
  if (self.teamMemberId) {
    if (![self.teamMemberId isEqual:aTeamMemberLogInfo.teamMemberId]) {
      return NO;
    }
  }
  if (self.memberExternalId) {
    if (![self.memberExternalId isEqual:aTeamMemberLogInfo.memberExternalId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamMemberLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamMemberLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.accountId) {
    jsonDict[@"account_id"] = valueObj.accountId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.email) {
    jsonDict[@"email"] = valueObj.email;
  }
  if (valueObj.teamMemberId) {
    jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  }
  if (valueObj.memberExternalId) {
    jsonDict[@"member_external_id"] = valueObj.memberExternalId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamMemberLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *accountId = valueDict[@"account_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *email = valueDict[@"email"] ?: nil;
  NSString *teamMemberId = valueDict[@"team_member_id"] ?: nil;
  NSString *memberExternalId = valueDict[@"member_external_id"] ?: nil;

  return [[DBTEAMLOGTeamMemberLogInfo alloc] initWithAccountId:accountId
                                                   displayName:displayName
                                                         email:email
                                                  teamMemberId:teamMemberId
                                              memberExternalId:memberExternalId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamMembershipType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamMembershipType

#pragma mark - Constructors

- (instancetype)initWithFree {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTeamMembershipTypeFree;
  }
  return self;
}

- (instancetype)initWithFull {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTeamMembershipTypeFull;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTeamMembershipTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isFree {
  return _tag == DBTEAMLOGTeamMembershipTypeFree;
}

- (BOOL)isFull {
  return _tag == DBTEAMLOGTeamMembershipTypeFull;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGTeamMembershipTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGTeamMembershipTypeFree:
    return @"DBTEAMLOGTeamMembershipTypeFree";
  case DBTEAMLOGTeamMembershipTypeFull:
    return @"DBTEAMLOGTeamMembershipTypeFull";
  case DBTEAMLOGTeamMembershipTypeOther:
    return @"DBTEAMLOGTeamMembershipTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamMembershipTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamMembershipTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamMembershipTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGTeamMembershipTypeFree:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTeamMembershipTypeFull:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTeamMembershipTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMembershipType:other];
}

- (BOOL)isEqualToTeamMembershipType:(DBTEAMLOGTeamMembershipType *)aTeamMembershipType {
  if (self == aTeamMembershipType) {
    return YES;
  }
  if (self.tag != aTeamMembershipType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGTeamMembershipTypeFree:
    return [[self tagName] isEqual:[aTeamMembershipType tagName]];
  case DBTEAMLOGTeamMembershipTypeFull:
    return [[self tagName] isEqual:[aTeamMembershipType tagName]];
  case DBTEAMLOGTeamMembershipTypeOther:
    return [[self tagName] isEqual:[aTeamMembershipType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamMembershipTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamMembershipType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isFree]) {
    jsonDict[@".tag"] = @"free";
  } else if ([valueObj isFull]) {
    jsonDict[@".tag"] = @"full";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamMembershipType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"free"]) {
    return [[DBTEAMLOGTeamMembershipType alloc] initWithFree];
  } else if ([tag isEqualToString:@"full"]) {
    return [[DBTEAMLOGTeamMembershipType alloc] initWithFull];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGTeamMembershipType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGTeamMembershipType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamMergeFromDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamMergeFromDetails

#pragma mark - Constructors

- (instancetype)initWithTeamName:(NSString *)teamName {
  [DBStoneValidators nonnullValidator:nil](teamName);

  self = [super init];
  if (self) {
    _teamName = teamName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamMergeFromDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamMergeFromDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamMergeFromDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMergeFromDetails:other];
}

- (BOOL)isEqualToTeamMergeFromDetails:(DBTEAMLOGTeamMergeFromDetails *)aTeamMergeFromDetails {
  if (self == aTeamMergeFromDetails) {
    return YES;
  }
  if (![self.teamName isEqual:aTeamMergeFromDetails.teamName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamMergeFromDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamMergeFromDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_name"] = valueObj.teamName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamMergeFromDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamName = valueDict[@"team_name"];

  return [[DBTEAMLOGTeamMergeFromDetails alloc] initWithTeamName:teamName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamMergeFromType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamMergeFromType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamMergeFromTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamMergeFromTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamMergeFromTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMergeFromType:other];
}

- (BOOL)isEqualToTeamMergeFromType:(DBTEAMLOGTeamMergeFromType *)aTeamMergeFromType {
  if (self == aTeamMergeFromType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamMergeFromType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamMergeFromTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamMergeFromType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamMergeFromType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamMergeFromType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamMergeToDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamMergeToDetails

#pragma mark - Constructors

- (instancetype)initWithTeamName:(NSString *)teamName {
  [DBStoneValidators nonnullValidator:nil](teamName);

  self = [super init];
  if (self) {
    _teamName = teamName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamMergeToDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamMergeToDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamMergeToDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMergeToDetails:other];
}

- (BOOL)isEqualToTeamMergeToDetails:(DBTEAMLOGTeamMergeToDetails *)aTeamMergeToDetails {
  if (self == aTeamMergeToDetails) {
    return YES;
  }
  if (![self.teamName isEqual:aTeamMergeToDetails.teamName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamMergeToDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamMergeToDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_name"] = valueObj.teamName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamMergeToDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamName = valueDict[@"team_name"];

  return [[DBTEAMLOGTeamMergeToDetails alloc] initWithTeamName:teamName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamMergeToType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamMergeToType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamMergeToTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamMergeToTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamMergeToTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMergeToType:other];
}

- (BOOL)isEqualToTeamMergeToType:(DBTEAMLOGTeamMergeToType *)aTeamMergeToType {
  if (self == aTeamMergeToType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamMergeToType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamMergeToTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamMergeToType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamMergeToType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamMergeToType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamName.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamName

#pragma mark - Constructors

- (instancetype)initWithTeamDisplayName:(NSString *)teamDisplayName teamLegalName:(NSString *)teamLegalName {
  [DBStoneValidators nonnullValidator:nil](teamDisplayName);
  [DBStoneValidators nonnullValidator:nil](teamLegalName);

  self = [super init];
  if (self) {
    _teamDisplayName = teamDisplayName;
    _teamLegalName = teamLegalName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamNameSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamNameSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamNameSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamDisplayName hash];
  result = prime * result + [self.teamLegalName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamName:other];
}

- (BOOL)isEqualToTeamName:(DBTEAMLOGTeamName *)aTeamName {
  if (self == aTeamName) {
    return YES;
  }
  if (![self.teamDisplayName isEqual:aTeamName.teamDisplayName]) {
    return NO;
  }
  if (![self.teamLegalName isEqual:aTeamName.teamLegalName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamNameSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamName *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_display_name"] = valueObj.teamDisplayName;
  jsonDict[@"team_legal_name"] = valueObj.teamLegalName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamName *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamDisplayName = valueDict[@"team_display_name"];
  NSString *teamLegalName = valueDict[@"team_legal_name"];

  return [[DBTEAMLOGTeamName alloc] initWithTeamDisplayName:teamDisplayName teamLegalName:teamLegalName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileAddLogoDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileAddLogoDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileAddLogoDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamProfileAddLogoDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileAddLogoDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileAddLogoDetails:other];
}

- (BOOL)isEqualToTeamProfileAddLogoDetails:(DBTEAMLOGTeamProfileAddLogoDetails *)aTeamProfileAddLogoDetails {
  if (self == aTeamProfileAddLogoDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileAddLogoDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamProfileAddLogoDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamProfileAddLogoDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTeamProfileAddLogoDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileAddLogoType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileAddLogoType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileAddLogoTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamProfileAddLogoTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileAddLogoTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileAddLogoType:other];
}

- (BOOL)isEqualToTeamProfileAddLogoType:(DBTEAMLOGTeamProfileAddLogoType *)aTeamProfileAddLogoType {
  if (self == aTeamProfileAddLogoType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamProfileAddLogoType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileAddLogoTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamProfileAddLogoType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamProfileAddLogoType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamProfileAddLogoType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileChangeDefaultLanguageDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileChangeDefaultLanguageDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSString *)dNewValue previousValue:(NSString *)previousValue {
  [DBStoneValidators nonnullValidator:[DBStoneValidators stringValidator:@(2) maxLength:nil pattern:nil]](dNewValue);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators stringValidator:@(2) maxLength:nil pattern:nil]](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileChangeDefaultLanguageDetails:other];
}

- (BOOL)isEqualToTeamProfileChangeDefaultLanguageDetails:
    (DBTEAMLOGTeamProfileChangeDefaultLanguageDetails *)aTeamProfileChangeDefaultLanguageDetails {
  if (self == aTeamProfileChangeDefaultLanguageDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aTeamProfileChangeDefaultLanguageDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aTeamProfileChangeDefaultLanguageDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamProfileChangeDefaultLanguageDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = valueObj.dNewValue;
  jsonDict[@"previous_value"] = valueObj.previousValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamProfileChangeDefaultLanguageDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *dNewValue = valueDict[@"new_value"];
  NSString *previousValue = valueDict[@"previous_value"];

  return [[DBTEAMLOGTeamProfileChangeDefaultLanguageDetails alloc] initWithDNewValue:dNewValue
                                                                       previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileChangeDefaultLanguageType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileChangeDefaultLanguageType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileChangeDefaultLanguageTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamProfileChangeDefaultLanguageTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileChangeDefaultLanguageTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileChangeDefaultLanguageType:other];
}

- (BOOL)isEqualToTeamProfileChangeDefaultLanguageType:
    (DBTEAMLOGTeamProfileChangeDefaultLanguageType *)aTeamProfileChangeDefaultLanguageType {
  if (self == aTeamProfileChangeDefaultLanguageType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamProfileChangeDefaultLanguageType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileChangeDefaultLanguageTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamProfileChangeDefaultLanguageType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamProfileChangeDefaultLanguageType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamProfileChangeDefaultLanguageType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileChangeLogoDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileChangeLogoDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileChangeLogoDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamProfileChangeLogoDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileChangeLogoDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileChangeLogoDetails:other];
}

- (BOOL)isEqualToTeamProfileChangeLogoDetails:(DBTEAMLOGTeamProfileChangeLogoDetails *)aTeamProfileChangeLogoDetails {
  if (self == aTeamProfileChangeLogoDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileChangeLogoDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamProfileChangeLogoDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamProfileChangeLogoDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTeamProfileChangeLogoDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileChangeLogoType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileChangeLogoType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileChangeLogoTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamProfileChangeLogoTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileChangeLogoTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileChangeLogoType:other];
}

- (BOOL)isEqualToTeamProfileChangeLogoType:(DBTEAMLOGTeamProfileChangeLogoType *)aTeamProfileChangeLogoType {
  if (self == aTeamProfileChangeLogoType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamProfileChangeLogoType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileChangeLogoTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamProfileChangeLogoType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamProfileChangeLogoType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamProfileChangeLogoType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamName.h"
#import "DBTEAMLOGTeamProfileChangeNameDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileChangeNameDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGTeamName *)dNewValue previousValue:(DBTEAMLOGTeamName *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGTeamName *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileChangeNameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamProfileChangeNameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileChangeNameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileChangeNameDetails:other];
}

- (BOOL)isEqualToTeamProfileChangeNameDetails:(DBTEAMLOGTeamProfileChangeNameDetails *)aTeamProfileChangeNameDetails {
  if (self == aTeamProfileChangeNameDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aTeamProfileChangeNameDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aTeamProfileChangeNameDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileChangeNameDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamProfileChangeNameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGTeamNameSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGTeamNameSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamProfileChangeNameDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGTeamName *dNewValue = [DBTEAMLOGTeamNameSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGTeamName *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGTeamNameSerializer deserialize:valueDict[@"previous_value"]] : nil;

  return [[DBTEAMLOGTeamProfileChangeNameDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileChangeNameType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileChangeNameType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileChangeNameTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamProfileChangeNameTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileChangeNameTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileChangeNameType:other];
}

- (BOOL)isEqualToTeamProfileChangeNameType:(DBTEAMLOGTeamProfileChangeNameType *)aTeamProfileChangeNameType {
  if (self == aTeamProfileChangeNameType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamProfileChangeNameType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileChangeNameTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamProfileChangeNameType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamProfileChangeNameType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamProfileChangeNameType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileRemoveLogoDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileRemoveLogoDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileRemoveLogoDetails:other];
}

- (BOOL)isEqualToTeamProfileRemoveLogoDetails:(DBTEAMLOGTeamProfileRemoveLogoDetails *)aTeamProfileRemoveLogoDetails {
  if (self == aTeamProfileRemoveLogoDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamProfileRemoveLogoDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamProfileRemoveLogoDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTeamProfileRemoveLogoDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileRemoveLogoType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileRemoveLogoType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileRemoveLogoTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamProfileRemoveLogoTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileRemoveLogoTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileRemoveLogoType:other];
}

- (BOOL)isEqualToTeamProfileRemoveLogoType:(DBTEAMLOGTeamProfileRemoveLogoType *)aTeamProfileRemoveLogoType {
  if (self == aTeamProfileRemoveLogoType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamProfileRemoveLogoType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileRemoveLogoTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamProfileRemoveLogoType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamProfileRemoveLogoType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamProfileRemoveLogoType alloc] initWithDescription_:description_];
}

@end

#import "DBFILESSyncSetting.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBFILESSyncSetting *)previousValue dNewValue:(DBFILESSyncSetting *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamSelectiveSyncSettingsChangedDetails:other];
}

- (BOOL)isEqualToTeamSelectiveSyncSettingsChangedDetails:
    (DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails *)aTeamSelectiveSyncSettingsChangedDetails {
  if (self == aTeamSelectiveSyncSettingsChangedDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aTeamSelectiveSyncSettingsChangedDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aTeamSelectiveSyncSettingsChangedDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBFILESSyncSettingSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBFILESSyncSettingSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBFILESSyncSetting *previousValue = [DBFILESSyncSettingSerializer deserialize:valueDict[@"previous_value"]];
  DBFILESSyncSetting *dNewValue = [DBFILESSyncSettingSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails alloc] initWithPreviousValue:previousValue
                                                                               dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamSelectiveSyncSettingsChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamSelectiveSyncSettingsChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTeamSelectiveSyncSettingsChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTeamSelectiveSyncSettingsChangedTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamSelectiveSyncSettingsChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamSelectiveSyncSettingsChangedType:other];
}

- (BOOL)isEqualToTeamSelectiveSyncSettingsChangedType:
    (DBTEAMLOGTeamSelectiveSyncSettingsChangedType *)aTeamSelectiveSyncSettingsChangedType {
  if (self == aTeamSelectiveSyncSettingsChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:aTeamSelectiveSyncSettingsChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamSelectiveSyncSettingsChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTeamSelectiveSyncSettingsChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTeamSelectiveSyncSettingsChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTeamSelectiveSyncSettingsChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaAddBackupPhoneDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaAddBackupPhoneDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaAddBackupPhoneDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaAddBackupPhoneDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaAddBackupPhoneDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaAddBackupPhoneDetails:other];
}

- (BOOL)isEqualToTfaAddBackupPhoneDetails:(DBTEAMLOGTfaAddBackupPhoneDetails *)aTfaAddBackupPhoneDetails {
  if (self == aTfaAddBackupPhoneDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaAddBackupPhoneDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaAddBackupPhoneDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaAddBackupPhoneDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaAddBackupPhoneDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaAddBackupPhoneType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaAddBackupPhoneType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaAddBackupPhoneTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaAddBackupPhoneTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaAddBackupPhoneTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaAddBackupPhoneType:other];
}

- (BOOL)isEqualToTfaAddBackupPhoneType:(DBTEAMLOGTfaAddBackupPhoneType *)aTfaAddBackupPhoneType {
  if (self == aTfaAddBackupPhoneType) {
    return YES;
  }
  if (![self.description_ isEqual:aTfaAddBackupPhoneType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaAddBackupPhoneTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaAddBackupPhoneType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaAddBackupPhoneType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTfaAddBackupPhoneType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaAddSecurityKeyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaAddSecurityKeyDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaAddSecurityKeyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaAddSecurityKeyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaAddSecurityKeyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaAddSecurityKeyDetails:other];
}

- (BOOL)isEqualToTfaAddSecurityKeyDetails:(DBTEAMLOGTfaAddSecurityKeyDetails *)aTfaAddSecurityKeyDetails {
  if (self == aTfaAddSecurityKeyDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaAddSecurityKeyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaAddSecurityKeyDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaAddSecurityKeyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaAddSecurityKeyDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaAddSecurityKeyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaAddSecurityKeyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaAddSecurityKeyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaAddSecurityKeyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaAddSecurityKeyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaAddSecurityKeyType:other];
}

- (BOOL)isEqualToTfaAddSecurityKeyType:(DBTEAMLOGTfaAddSecurityKeyType *)aTfaAddSecurityKeyType {
  if (self == aTfaAddSecurityKeyType) {
    return YES;
  }
  if (![self.description_ isEqual:aTfaAddSecurityKeyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaAddSecurityKeyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaAddSecurityKeyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaAddSecurityKeyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTfaAddSecurityKeyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaChangeBackupPhoneDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaChangeBackupPhoneDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaChangeBackupPhoneDetails:other];
}

- (BOOL)isEqualToTfaChangeBackupPhoneDetails:(DBTEAMLOGTfaChangeBackupPhoneDetails *)aTfaChangeBackupPhoneDetails {
  if (self == aTfaChangeBackupPhoneDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaChangeBackupPhoneDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaChangeBackupPhoneDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaChangeBackupPhoneDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaChangeBackupPhoneType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaChangeBackupPhoneType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaChangeBackupPhoneTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaChangeBackupPhoneTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaChangeBackupPhoneTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaChangeBackupPhoneType:other];
}

- (BOOL)isEqualToTfaChangeBackupPhoneType:(DBTEAMLOGTfaChangeBackupPhoneType *)aTfaChangeBackupPhoneType {
  if (self == aTfaChangeBackupPhoneType) {
    return YES;
  }
  if (![self.description_ isEqual:aTfaChangeBackupPhoneType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaChangeBackupPhoneTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaChangeBackupPhoneType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaChangeBackupPhoneType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTfaChangeBackupPhoneType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaChangePolicyDetails.h"
#import "DBTEAMPOLICIESTwoStepVerificationPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESTwoStepVerificationPolicy *)dNewValue
                    previousValue:(DBTEAMPOLICIESTwoStepVerificationPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESTwoStepVerificationPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaChangePolicyDetails:other];
}

- (BOOL)isEqualToTfaChangePolicyDetails:(DBTEAMLOGTfaChangePolicyDetails *)aTfaChangePolicyDetails {
  if (self == aTfaChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aTfaChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aTfaChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMPOLICIESTwoStepVerificationPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMPOLICIESTwoStepVerificationPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMPOLICIESTwoStepVerificationPolicy *dNewValue =
      [DBTEAMPOLICIESTwoStepVerificationPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMPOLICIESTwoStepVerificationPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMPOLICIESTwoStepVerificationPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGTfaChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaChangePolicyType:other];
}

- (BOOL)isEqualToTfaChangePolicyType:(DBTEAMLOGTfaChangePolicyType *)aTfaChangePolicyType {
  if (self == aTfaChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aTfaChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTfaChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaChangeStatusDetails.h"
#import "DBTEAMLOGTfaConfiguration.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaChangeStatusDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGTfaConfiguration *)dNewValue
                    previousValue:(DBTEAMLOGTfaConfiguration *)previousValue
                   usedRescueCode:(NSNumber *)usedRescueCode {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
    _usedRescueCode = usedRescueCode;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGTfaConfiguration *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil usedRescueCode:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaChangeStatusDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaChangeStatusDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaChangeStatusDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }
  if (self.usedRescueCode != nil) {
    result = prime * result + [self.usedRescueCode hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaChangeStatusDetails:other];
}

- (BOOL)isEqualToTfaChangeStatusDetails:(DBTEAMLOGTfaChangeStatusDetails *)aTfaChangeStatusDetails {
  if (self == aTfaChangeStatusDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aTfaChangeStatusDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aTfaChangeStatusDetails.previousValue]) {
      return NO;
    }
  }
  if (self.usedRescueCode) {
    if (![self.usedRescueCode isEqual:aTfaChangeStatusDetails.usedRescueCode]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaChangeStatusDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaChangeStatusDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGTfaConfigurationSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGTfaConfigurationSerializer serialize:valueObj.previousValue];
  }
  if (valueObj.usedRescueCode) {
    jsonDict[@"used_rescue_code"] = valueObj.usedRescueCode;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaChangeStatusDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGTfaConfiguration *dNewValue = [DBTEAMLOGTfaConfigurationSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGTfaConfiguration *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGTfaConfigurationSerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;
  NSNumber *usedRescueCode = valueDict[@"used_rescue_code"] ?: nil;

  return [[DBTEAMLOGTfaChangeStatusDetails alloc] initWithDNewValue:dNewValue
                                                      previousValue:previousValue
                                                     usedRescueCode:usedRescueCode];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaChangeStatusType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaChangeStatusType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaChangeStatusTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaChangeStatusTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaChangeStatusTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaChangeStatusType:other];
}

- (BOOL)isEqualToTfaChangeStatusType:(DBTEAMLOGTfaChangeStatusType *)aTfaChangeStatusType {
  if (self == aTfaChangeStatusType) {
    return YES;
  }
  if (![self.description_ isEqual:aTfaChangeStatusType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaChangeStatusTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaChangeStatusType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaChangeStatusType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTfaChangeStatusType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaConfiguration.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaConfiguration

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTfaConfigurationDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTfaConfigurationEnabled;
  }
  return self;
}

- (instancetype)initWithSms {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTfaConfigurationSms;
  }
  return self;
}

- (instancetype)initWithAuthenticator {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTfaConfigurationAuthenticator;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTfaConfigurationOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGTfaConfigurationDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGTfaConfigurationEnabled;
}

- (BOOL)isSms {
  return _tag == DBTEAMLOGTfaConfigurationSms;
}

- (BOOL)isAuthenticator {
  return _tag == DBTEAMLOGTfaConfigurationAuthenticator;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGTfaConfigurationOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGTfaConfigurationDisabled:
    return @"DBTEAMLOGTfaConfigurationDisabled";
  case DBTEAMLOGTfaConfigurationEnabled:
    return @"DBTEAMLOGTfaConfigurationEnabled";
  case DBTEAMLOGTfaConfigurationSms:
    return @"DBTEAMLOGTfaConfigurationSms";
  case DBTEAMLOGTfaConfigurationAuthenticator:
    return @"DBTEAMLOGTfaConfigurationAuthenticator";
  case DBTEAMLOGTfaConfigurationOther:
    return @"DBTEAMLOGTfaConfigurationOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaConfigurationSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaConfigurationSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaConfigurationSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGTfaConfigurationDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTfaConfigurationEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTfaConfigurationSms:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTfaConfigurationAuthenticator:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTfaConfigurationOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaConfiguration:other];
}

- (BOOL)isEqualToTfaConfiguration:(DBTEAMLOGTfaConfiguration *)aTfaConfiguration {
  if (self == aTfaConfiguration) {
    return YES;
  }
  if (self.tag != aTfaConfiguration.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGTfaConfigurationDisabled:
    return [[self tagName] isEqual:[aTfaConfiguration tagName]];
  case DBTEAMLOGTfaConfigurationEnabled:
    return [[self tagName] isEqual:[aTfaConfiguration tagName]];
  case DBTEAMLOGTfaConfigurationSms:
    return [[self tagName] isEqual:[aTfaConfiguration tagName]];
  case DBTEAMLOGTfaConfigurationAuthenticator:
    return [[self tagName] isEqual:[aTfaConfiguration tagName]];
  case DBTEAMLOGTfaConfigurationOther:
    return [[self tagName] isEqual:[aTfaConfiguration tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaConfigurationSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaConfiguration *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isSms]) {
    jsonDict[@".tag"] = @"sms";
  } else if ([valueObj isAuthenticator]) {
    jsonDict[@".tag"] = @"authenticator";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaConfiguration *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"sms"]) {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithSms];
  } else if ([tag isEqualToString:@"authenticator"]) {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithAuthenticator];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithOther];
  } else {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaRemoveBackupPhoneDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaRemoveBackupPhoneDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaRemoveBackupPhoneDetails:other];
}

- (BOOL)isEqualToTfaRemoveBackupPhoneDetails:(DBTEAMLOGTfaRemoveBackupPhoneDetails *)aTfaRemoveBackupPhoneDetails {
  if (self == aTfaRemoveBackupPhoneDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaRemoveBackupPhoneDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaRemoveBackupPhoneDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaRemoveBackupPhoneDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaRemoveBackupPhoneType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaRemoveBackupPhoneType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaRemoveBackupPhoneTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaRemoveBackupPhoneTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaRemoveBackupPhoneTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaRemoveBackupPhoneType:other];
}

- (BOOL)isEqualToTfaRemoveBackupPhoneType:(DBTEAMLOGTfaRemoveBackupPhoneType *)aTfaRemoveBackupPhoneType {
  if (self == aTfaRemoveBackupPhoneType) {
    return YES;
  }
  if (![self.description_ isEqual:aTfaRemoveBackupPhoneType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaRemoveBackupPhoneTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaRemoveBackupPhoneType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaRemoveBackupPhoneType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTfaRemoveBackupPhoneType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaRemoveSecurityKeyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaRemoveSecurityKeyDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaRemoveSecurityKeyDetails:other];
}

- (BOOL)isEqualToTfaRemoveSecurityKeyDetails:(DBTEAMLOGTfaRemoveSecurityKeyDetails *)aTfaRemoveSecurityKeyDetails {
  if (self == aTfaRemoveSecurityKeyDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaRemoveSecurityKeyDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaRemoveSecurityKeyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaRemoveSecurityKeyDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaRemoveSecurityKeyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaRemoveSecurityKeyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaRemoveSecurityKeyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaRemoveSecurityKeyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaRemoveSecurityKeyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaRemoveSecurityKeyType:other];
}

- (BOOL)isEqualToTfaRemoveSecurityKeyType:(DBTEAMLOGTfaRemoveSecurityKeyType *)aTfaRemoveSecurityKeyType {
  if (self == aTfaRemoveSecurityKeyType) {
    return YES;
  }
  if (![self.description_ isEqual:aTfaRemoveSecurityKeyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaRemoveSecurityKeyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaRemoveSecurityKeyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaRemoveSecurityKeyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTfaRemoveSecurityKeyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaResetDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaResetDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaResetDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaResetDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaResetDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaResetDetails:other];
}

- (BOOL)isEqualToTfaResetDetails:(DBTEAMLOGTfaResetDetails *)aTfaResetDetails {
  if (self == aTfaResetDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaResetDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaResetDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaResetDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaResetDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaResetType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaResetType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTfaResetTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTfaResetTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaResetTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaResetType:other];
}

- (BOOL)isEqualToTfaResetType:(DBTEAMLOGTfaResetType *)aTfaResetType {
  if (self == aTfaResetType) {
    return YES;
  }
  if (![self.description_ isEqual:aTfaResetType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaResetTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTfaResetType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTfaResetType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTfaResetType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTimeUnit.h"

#pragma mark - API Object

@implementation DBTEAMLOGTimeUnit

#pragma mark - Constructors

- (instancetype)initWithMilliseconds {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTimeUnitMilliseconds;
  }
  return self;
}

- (instancetype)initWithSeconds {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTimeUnitSeconds;
  }
  return self;
}

- (instancetype)initWithMinutes {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTimeUnitMinutes;
  }
  return self;
}

- (instancetype)initWithHours {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTimeUnitHours;
  }
  return self;
}

- (instancetype)initWithDays {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTimeUnitDays;
  }
  return self;
}

- (instancetype)initWithWeeks {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTimeUnitWeeks;
  }
  return self;
}

- (instancetype)initWithMonths {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTimeUnitMonths;
  }
  return self;
}

- (instancetype)initWithYears {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTimeUnitYears;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTimeUnitOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isMilliseconds {
  return _tag == DBTEAMLOGTimeUnitMilliseconds;
}

- (BOOL)isSeconds {
  return _tag == DBTEAMLOGTimeUnitSeconds;
}

- (BOOL)isMinutes {
  return _tag == DBTEAMLOGTimeUnitMinutes;
}

- (BOOL)isHours {
  return _tag == DBTEAMLOGTimeUnitHours;
}

- (BOOL)isDays {
  return _tag == DBTEAMLOGTimeUnitDays;
}

- (BOOL)isWeeks {
  return _tag == DBTEAMLOGTimeUnitWeeks;
}

- (BOOL)isMonths {
  return _tag == DBTEAMLOGTimeUnitMonths;
}

- (BOOL)isYears {
  return _tag == DBTEAMLOGTimeUnitYears;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGTimeUnitOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGTimeUnitMilliseconds:
    return @"DBTEAMLOGTimeUnitMilliseconds";
  case DBTEAMLOGTimeUnitSeconds:
    return @"DBTEAMLOGTimeUnitSeconds";
  case DBTEAMLOGTimeUnitMinutes:
    return @"DBTEAMLOGTimeUnitMinutes";
  case DBTEAMLOGTimeUnitHours:
    return @"DBTEAMLOGTimeUnitHours";
  case DBTEAMLOGTimeUnitDays:
    return @"DBTEAMLOGTimeUnitDays";
  case DBTEAMLOGTimeUnitWeeks:
    return @"DBTEAMLOGTimeUnitWeeks";
  case DBTEAMLOGTimeUnitMonths:
    return @"DBTEAMLOGTimeUnitMonths";
  case DBTEAMLOGTimeUnitYears:
    return @"DBTEAMLOGTimeUnitYears";
  case DBTEAMLOGTimeUnitOther:
    return @"DBTEAMLOGTimeUnitOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTimeUnitSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTimeUnitSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTimeUnitSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGTimeUnitMilliseconds:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTimeUnitSeconds:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTimeUnitMinutes:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTimeUnitHours:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTimeUnitDays:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTimeUnitWeeks:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTimeUnitMonths:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTimeUnitYears:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTimeUnitOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTimeUnit:other];
}

- (BOOL)isEqualToTimeUnit:(DBTEAMLOGTimeUnit *)aTimeUnit {
  if (self == aTimeUnit) {
    return YES;
  }
  if (self.tag != aTimeUnit.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGTimeUnitMilliseconds:
    return [[self tagName] isEqual:[aTimeUnit tagName]];
  case DBTEAMLOGTimeUnitSeconds:
    return [[self tagName] isEqual:[aTimeUnit tagName]];
  case DBTEAMLOGTimeUnitMinutes:
    return [[self tagName] isEqual:[aTimeUnit tagName]];
  case DBTEAMLOGTimeUnitHours:
    return [[self tagName] isEqual:[aTimeUnit tagName]];
  case DBTEAMLOGTimeUnitDays:
    return [[self tagName] isEqual:[aTimeUnit tagName]];
  case DBTEAMLOGTimeUnitWeeks:
    return [[self tagName] isEqual:[aTimeUnit tagName]];
  case DBTEAMLOGTimeUnitMonths:
    return [[self tagName] isEqual:[aTimeUnit tagName]];
  case DBTEAMLOGTimeUnitYears:
    return [[self tagName] isEqual:[aTimeUnit tagName]];
  case DBTEAMLOGTimeUnitOther:
    return [[self tagName] isEqual:[aTimeUnit tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTimeUnitSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTimeUnit *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMilliseconds]) {
    jsonDict[@".tag"] = @"milliseconds";
  } else if ([valueObj isSeconds]) {
    jsonDict[@".tag"] = @"seconds";
  } else if ([valueObj isMinutes]) {
    jsonDict[@".tag"] = @"minutes";
  } else if ([valueObj isHours]) {
    jsonDict[@".tag"] = @"hours";
  } else if ([valueObj isDays]) {
    jsonDict[@".tag"] = @"days";
  } else if ([valueObj isWeeks]) {
    jsonDict[@".tag"] = @"weeks";
  } else if ([valueObj isMonths]) {
    jsonDict[@".tag"] = @"months";
  } else if ([valueObj isYears]) {
    jsonDict[@".tag"] = @"years";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTimeUnit *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"milliseconds"]) {
    return [[DBTEAMLOGTimeUnit alloc] initWithMilliseconds];
  } else if ([tag isEqualToString:@"seconds"]) {
    return [[DBTEAMLOGTimeUnit alloc] initWithSeconds];
  } else if ([tag isEqualToString:@"minutes"]) {
    return [[DBTEAMLOGTimeUnit alloc] initWithMinutes];
  } else if ([tag isEqualToString:@"hours"]) {
    return [[DBTEAMLOGTimeUnit alloc] initWithHours];
  } else if ([tag isEqualToString:@"days"]) {
    return [[DBTEAMLOGTimeUnit alloc] initWithDays];
  } else if ([tag isEqualToString:@"weeks"]) {
    return [[DBTEAMLOGTimeUnit alloc] initWithWeeks];
  } else if ([tag isEqualToString:@"months"]) {
    return [[DBTEAMLOGTimeUnit alloc] initWithMonths];
  } else if ([tag isEqualToString:@"years"]) {
    return [[DBTEAMLOGTimeUnit alloc] initWithYears];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGTimeUnit alloc] initWithOther];
  } else {
    return [[DBTEAMLOGTimeUnit alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTwoAccountChangePolicyDetails.h"
#import "DBTEAMLOGTwoAccountPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGTwoAccountChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGTwoAccountPolicy *)dNewValue
                    previousValue:(DBTEAMLOGTwoAccountPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGTwoAccountPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTwoAccountChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTwoAccountChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTwoAccountChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTwoAccountChangePolicyDetails:other];
}

- (BOOL)isEqualToTwoAccountChangePolicyDetails:
    (DBTEAMLOGTwoAccountChangePolicyDetails *)aTwoAccountChangePolicyDetails {
  if (self == aTwoAccountChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aTwoAccountChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aTwoAccountChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTwoAccountChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTwoAccountChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGTwoAccountPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGTwoAccountPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTwoAccountChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGTwoAccountPolicy *dNewValue = [DBTEAMLOGTwoAccountPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGTwoAccountPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGTwoAccountPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGTwoAccountChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTwoAccountChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGTwoAccountChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTwoAccountChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTwoAccountChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTwoAccountChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTwoAccountChangePolicyType:other];
}

- (BOOL)isEqualToTwoAccountChangePolicyType:(DBTEAMLOGTwoAccountChangePolicyType *)aTwoAccountChangePolicyType {
  if (self == aTwoAccountChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aTwoAccountChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTwoAccountChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTwoAccountChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTwoAccountChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGTwoAccountChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTwoAccountPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGTwoAccountPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTwoAccountPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTwoAccountPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTwoAccountPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGTwoAccountPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGTwoAccountPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGTwoAccountPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGTwoAccountPolicyDisabled:
    return @"DBTEAMLOGTwoAccountPolicyDisabled";
  case DBTEAMLOGTwoAccountPolicyEnabled:
    return @"DBTEAMLOGTwoAccountPolicyEnabled";
  case DBTEAMLOGTwoAccountPolicyOther:
    return @"DBTEAMLOGTwoAccountPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGTwoAccountPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGTwoAccountPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTwoAccountPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGTwoAccountPolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTwoAccountPolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTwoAccountPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTwoAccountPolicy:other];
}

- (BOOL)isEqualToTwoAccountPolicy:(DBTEAMLOGTwoAccountPolicy *)aTwoAccountPolicy {
  if (self == aTwoAccountPolicy) {
    return YES;
  }
  if (self.tag != aTwoAccountPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGTwoAccountPolicyDisabled:
    return [[self tagName] isEqual:[aTwoAccountPolicy tagName]];
  case DBTEAMLOGTwoAccountPolicyEnabled:
    return [[self tagName] isEqual:[aTwoAccountPolicy tagName]];
  case DBTEAMLOGTwoAccountPolicyOther:
    return [[self tagName] isEqual:[aTwoAccountPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTwoAccountPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGTwoAccountPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGTwoAccountPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGTwoAccountPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGTwoAccountPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGTwoAccountPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGTwoAccountPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGUserLinkedAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGUserLinkedAppLogInfo

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId displayName:(NSString *)displayName {

  self = [super initWithAppId:appId displayName:displayName];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAppId:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGUserLinkedAppLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGUserLinkedAppLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGUserLinkedAppLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.appId != nil) {
    result = prime * result + [self.appId hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserLinkedAppLogInfo:other];
}

- (BOOL)isEqualToUserLinkedAppLogInfo:(DBTEAMLOGUserLinkedAppLogInfo *)anUserLinkedAppLogInfo {
  if (self == anUserLinkedAppLogInfo) {
    return YES;
  }
  if (self.appId) {
    if (![self.appId isEqual:anUserLinkedAppLogInfo.appId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:anUserLinkedAppLogInfo.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGUserLinkedAppLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGUserLinkedAppLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.appId) {
    jsonDict[@"app_id"] = valueObj.appId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGUserLinkedAppLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *appId = valueDict[@"app_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGUserLinkedAppLogInfo alloc] initWithAppId:appId displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGUserNameLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGUserNameLogInfo

#pragma mark - Constructors

- (instancetype)initWithGivenName:(NSString *)givenName surname:(NSString *)surname locale:(NSString *)locale {
  [DBStoneValidators nonnullValidator:nil](givenName);
  [DBStoneValidators nonnullValidator:nil](surname);

  self = [super init];
  if (self) {
    _givenName = givenName;
    _surname = surname;
    _locale = locale;
  }
  return self;
}

- (instancetype)initWithGivenName:(NSString *)givenName surname:(NSString *)surname {
  return [self initWithGivenName:givenName surname:surname locale:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGUserNameLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGUserNameLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGUserNameLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.givenName hash];
  result = prime * result + [self.surname hash];
  if (self.locale != nil) {
    result = prime * result + [self.locale hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserNameLogInfo:other];
}

- (BOOL)isEqualToUserNameLogInfo:(DBTEAMLOGUserNameLogInfo *)anUserNameLogInfo {
  if (self == anUserNameLogInfo) {
    return YES;
  }
  if (![self.givenName isEqual:anUserNameLogInfo.givenName]) {
    return NO;
  }
  if (![self.surname isEqual:anUserNameLogInfo.surname]) {
    return NO;
  }
  if (self.locale) {
    if (![self.locale isEqual:anUserNameLogInfo.locale]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGUserNameLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGUserNameLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"given_name"] = valueObj.givenName;
  jsonDict[@"surname"] = valueObj.surname;
  if (valueObj.locale) {
    jsonDict[@"locale"] = valueObj.locale;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGUserNameLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *givenName = valueDict[@"given_name"];
  NSString *surname = valueDict[@"surname"];
  NSString *locale = valueDict[@"locale"] ?: nil;

  return [[DBTEAMLOGUserNameLogInfo alloc] initWithGivenName:givenName surname:surname locale:locale];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGUserOrTeamLinkedAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGUserOrTeamLinkedAppLogInfo

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId displayName:(NSString *)displayName {

  self = [super initWithAppId:appId displayName:displayName];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAppId:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.appId != nil) {
    result = prime * result + [self.appId hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserOrTeamLinkedAppLogInfo:other];
}

- (BOOL)isEqualToUserOrTeamLinkedAppLogInfo:(DBTEAMLOGUserOrTeamLinkedAppLogInfo *)anUserOrTeamLinkedAppLogInfo {
  if (self == anUserOrTeamLinkedAppLogInfo) {
    return YES;
  }
  if (self.appId) {
    if (![self.appId isEqual:anUserOrTeamLinkedAppLogInfo.appId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:anUserOrTeamLinkedAppLogInfo.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGUserOrTeamLinkedAppLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.appId) {
    jsonDict[@"app_id"] = valueObj.appId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGUserOrTeamLinkedAppLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *appId = valueDict[@"app_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGUserOrTeamLinkedAppLogInfo alloc] initWithAppId:appId displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"
#import "DBTEAMLOGWebDeviceSessionLogInfo.h"
#import "DBTEAMLOGWebSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebDeviceSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithUserAgent:(NSString *)userAgent
                               os:(NSString *)os
                          browser:(NSString *)browser
                        ipAddress:(NSString *)ipAddress
                          created:(NSDate *)created
                          updated:(NSDate *)updated
                      sessionInfo:(DBTEAMLOGWebSessionLogInfo *)sessionInfo {
  [DBStoneValidators nonnullValidator:nil](userAgent);
  [DBStoneValidators nonnullValidator:nil](os);
  [DBStoneValidators nonnullValidator:nil](browser);

  self = [super initWithIpAddress:ipAddress created:created updated:updated];
  if (self) {
    _sessionInfo = sessionInfo;
    _userAgent = userAgent;
    _os = os;
    _browser = browser;
  }
  return self;
}

- (instancetype)initWithUserAgent:(NSString *)userAgent os:(NSString *)os browser:(NSString *)browser {
  return [self initWithUserAgent:userAgent os:os browser:browser ipAddress:nil created:nil updated:nil sessionInfo:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGWebDeviceSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGWebDeviceSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebDeviceSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.userAgent hash];
  result = prime * result + [self.os hash];
  result = prime * result + [self.browser hash];
  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }
  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebDeviceSessionLogInfo:other];
}

- (BOOL)isEqualToWebDeviceSessionLogInfo:(DBTEAMLOGWebDeviceSessionLogInfo *)aWebDeviceSessionLogInfo {
  if (self == aWebDeviceSessionLogInfo) {
    return YES;
  }
  if (![self.userAgent isEqual:aWebDeviceSessionLogInfo.userAgent]) {
    return NO;
  }
  if (![self.os isEqual:aWebDeviceSessionLogInfo.os]) {
    return NO;
  }
  if (![self.browser isEqual:aWebDeviceSessionLogInfo.browser]) {
    return NO;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aWebDeviceSessionLogInfo.ipAddress]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:aWebDeviceSessionLogInfo.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:aWebDeviceSessionLogInfo.updated]) {
      return NO;
    }
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aWebDeviceSessionLogInfo.sessionInfo]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebDeviceSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGWebDeviceSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user_agent"] = valueObj.userAgent;
  jsonDict[@"os"] = valueObj.os;
  jsonDict[@"browser"] = valueObj.browser;
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGWebDeviceSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *userAgent = valueDict[@"user_agent"];
  NSString *os = valueDict[@"os"];
  NSString *browser = valueDict[@"browser"];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  DBTEAMLOGWebSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict[@"session_info"]] : nil;

  return [[DBTEAMLOGWebDeviceSessionLogInfo alloc] initWithUserAgent:userAgent
                                                                  os:os
                                                             browser:browser
                                                           ipAddress:ipAddress
                                                             created:created
                                                             updated:updated
                                                         sessionInfo:sessionInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSessionLogInfo.h"
#import "DBTEAMLOGWebSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId {

  self = [super initWithSessionId:sessionId];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGWebSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGWebSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionId != nil) {
    result = prime * result + [self.sessionId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebSessionLogInfo:other];
}

- (BOOL)isEqualToWebSessionLogInfo:(DBTEAMLOGWebSessionLogInfo *)aWebSessionLogInfo {
  if (self == aWebSessionLogInfo) {
    return YES;
  }
  if (self.sessionId) {
    if (![self.sessionId isEqual:aWebSessionLogInfo.sessionId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGWebSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionId) {
    jsonDict[@"session_id"] = valueObj.sessionId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGWebSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sessionId = valueDict[@"session_id"] ?: nil;

  return [[DBTEAMLOGWebSessionLogInfo alloc] initWithSessionId:sessionId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails.h"
#import "DBTEAMLOGWebSessionsFixedLengthPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGWebSessionsFixedLengthPolicy *)dNewValue
                    previousValue:(DBTEAMLOGWebSessionsFixedLengthPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebSessionsChangeFixedLengthPolicyDetails:other];
}

- (BOOL)isEqualToWebSessionsChangeFixedLengthPolicyDetails:
    (DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)aWebSessionsChangeFixedLengthPolicyDetails {
  if (self == aWebSessionsChangeFixedLengthPolicyDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aWebSessionsChangeFixedLengthPolicyDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aWebSessionsChangeFixedLengthPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGWebSessionsFixedLengthPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGWebSessionsFixedLengthPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGWebSessionsFixedLengthPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGWebSessionsFixedLengthPolicySerializer deserialize:valueDict[@"new_value"]]
                              : nil;
  DBTEAMLOGWebSessionsFixedLengthPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGWebSessionsFixedLengthPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGWebSessionsChangeFixedLengthPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebSessionsChangeFixedLengthPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebSessionsChangeFixedLengthPolicyType:other];
}

- (BOOL)isEqualToWebSessionsChangeFixedLengthPolicyType:
    (DBTEAMLOGWebSessionsChangeFixedLengthPolicyType *)aWebSessionsChangeFixedLengthPolicyType {
  if (self == aWebSessionsChangeFixedLengthPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aWebSessionsChangeFixedLengthPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGWebSessionsChangeFixedLengthPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGWebSessionsChangeFixedLengthPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGWebSessionsChangeFixedLengthPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails.h"
#import "DBTEAMLOGWebSessionsIdleLengthPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGWebSessionsIdleLengthPolicy *)dNewValue
                    previousValue:(DBTEAMLOGWebSessionsIdleLengthPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebSessionsChangeIdleLengthPolicyDetails:other];
}

- (BOOL)isEqualToWebSessionsChangeIdleLengthPolicyDetails:
    (DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)aWebSessionsChangeIdleLengthPolicyDetails {
  if (self == aWebSessionsChangeIdleLengthPolicyDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aWebSessionsChangeIdleLengthPolicyDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aWebSessionsChangeIdleLengthPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGWebSessionsIdleLengthPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGWebSessionsIdleLengthPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGWebSessionsIdleLengthPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGWebSessionsIdleLengthPolicySerializer deserialize:valueDict[@"new_value"]]
                              : nil;
  DBTEAMLOGWebSessionsIdleLengthPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGWebSessionsIdleLengthPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                        previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGWebSessionsChangeIdleLengthPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebSessionsChangeIdleLengthPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebSessionsChangeIdleLengthPolicyType:other];
}

- (BOOL)isEqualToWebSessionsChangeIdleLengthPolicyType:
    (DBTEAMLOGWebSessionsChangeIdleLengthPolicyType *)aWebSessionsChangeIdleLengthPolicyType {
  if (self == aWebSessionsChangeIdleLengthPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aWebSessionsChangeIdleLengthPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGWebSessionsChangeIdleLengthPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGWebSessionsChangeIdleLengthPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGWebSessionsChangeIdleLengthPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDurationLogInfo.h"
#import "DBTEAMLOGWebSessionsFixedLengthPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebSessionsFixedLengthPolicy

@synthesize defined = _defined;

#pragma mark - Constructors

- (instancetype)initWithDefined:(DBTEAMLOGDurationLogInfo *)defined {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGWebSessionsFixedLengthPolicyDefined;
    _defined = defined;
  }
  return self;
}

- (instancetype)initWithUndefined {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGWebSessionsFixedLengthPolicyUndefined;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGWebSessionsFixedLengthPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGDurationLogInfo *)defined {
  if (![self isDefined]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGWebSessionsFixedLengthPolicyDefined, but was %@.", [self tagName]];
  }
  return _defined;
}

#pragma mark - Tag state methods

- (BOOL)isDefined {
  return _tag == DBTEAMLOGWebSessionsFixedLengthPolicyDefined;
}

- (BOOL)isUndefined {
  return _tag == DBTEAMLOGWebSessionsFixedLengthPolicyUndefined;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGWebSessionsFixedLengthPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGWebSessionsFixedLengthPolicyDefined:
    return @"DBTEAMLOGWebSessionsFixedLengthPolicyDefined";
  case DBTEAMLOGWebSessionsFixedLengthPolicyUndefined:
    return @"DBTEAMLOGWebSessionsFixedLengthPolicyUndefined";
  case DBTEAMLOGWebSessionsFixedLengthPolicyOther:
    return @"DBTEAMLOGWebSessionsFixedLengthPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGWebSessionsFixedLengthPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGWebSessionsFixedLengthPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebSessionsFixedLengthPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGWebSessionsFixedLengthPolicyDefined:
    result = prime * result + [self.defined hash];
  case DBTEAMLOGWebSessionsFixedLengthPolicyUndefined:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGWebSessionsFixedLengthPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebSessionsFixedLengthPolicy:other];
}

- (BOOL)isEqualToWebSessionsFixedLengthPolicy:(DBTEAMLOGWebSessionsFixedLengthPolicy *)aWebSessionsFixedLengthPolicy {
  if (self == aWebSessionsFixedLengthPolicy) {
    return YES;
  }
  if (self.tag != aWebSessionsFixedLengthPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGWebSessionsFixedLengthPolicyDefined:
    return [self.defined isEqual:aWebSessionsFixedLengthPolicy.defined];
  case DBTEAMLOGWebSessionsFixedLengthPolicyUndefined:
    return [[self tagName] isEqual:[aWebSessionsFixedLengthPolicy tagName]];
  case DBTEAMLOGWebSessionsFixedLengthPolicyOther:
    return [[self tagName] isEqual:[aWebSessionsFixedLengthPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebSessionsFixedLengthPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGWebSessionsFixedLengthPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDefined]) {
    jsonDict = [[DBTEAMLOGDurationLogInfoSerializer serialize:valueObj.defined] mutableCopy];
    jsonDict[@".tag"] = @"defined";
  } else if ([valueObj isUndefined]) {
    jsonDict[@".tag"] = @"undefined";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGWebSessionsFixedLengthPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"defined"]) {
    DBTEAMLOGDurationLogInfo *defined = [DBTEAMLOGDurationLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGWebSessionsFixedLengthPolicy alloc] initWithDefined:defined];
  } else if ([tag isEqualToString:@"undefined"]) {
    return [[DBTEAMLOGWebSessionsFixedLengthPolicy alloc] initWithUndefined];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGWebSessionsFixedLengthPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGWebSessionsFixedLengthPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDurationLogInfo.h"
#import "DBTEAMLOGWebSessionsIdleLengthPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebSessionsIdleLengthPolicy

@synthesize defined = _defined;

#pragma mark - Constructors

- (instancetype)initWithDefined:(DBTEAMLOGDurationLogInfo *)defined {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGWebSessionsIdleLengthPolicyDefined;
    _defined = defined;
  }
  return self;
}

- (instancetype)initWithUndefined {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGWebSessionsIdleLengthPolicyUndefined;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGWebSessionsIdleLengthPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGDurationLogInfo *)defined {
  if (![self isDefined]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGWebSessionsIdleLengthPolicyDefined, but was %@.", [self tagName]];
  }
  return _defined;
}

#pragma mark - Tag state methods

- (BOOL)isDefined {
  return _tag == DBTEAMLOGWebSessionsIdleLengthPolicyDefined;
}

- (BOOL)isUndefined {
  return _tag == DBTEAMLOGWebSessionsIdleLengthPolicyUndefined;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGWebSessionsIdleLengthPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGWebSessionsIdleLengthPolicyDefined:
    return @"DBTEAMLOGWebSessionsIdleLengthPolicyDefined";
  case DBTEAMLOGWebSessionsIdleLengthPolicyUndefined:
    return @"DBTEAMLOGWebSessionsIdleLengthPolicyUndefined";
  case DBTEAMLOGWebSessionsIdleLengthPolicyOther:
    return @"DBTEAMLOGWebSessionsIdleLengthPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGWebSessionsIdleLengthPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGWebSessionsIdleLengthPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebSessionsIdleLengthPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGWebSessionsIdleLengthPolicyDefined:
    result = prime * result + [self.defined hash];
  case DBTEAMLOGWebSessionsIdleLengthPolicyUndefined:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGWebSessionsIdleLengthPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebSessionsIdleLengthPolicy:other];
}

- (BOOL)isEqualToWebSessionsIdleLengthPolicy:(DBTEAMLOGWebSessionsIdleLengthPolicy *)aWebSessionsIdleLengthPolicy {
  if (self == aWebSessionsIdleLengthPolicy) {
    return YES;
  }
  if (self.tag != aWebSessionsIdleLengthPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGWebSessionsIdleLengthPolicyDefined:
    return [self.defined isEqual:aWebSessionsIdleLengthPolicy.defined];
  case DBTEAMLOGWebSessionsIdleLengthPolicyUndefined:
    return [[self tagName] isEqual:[aWebSessionsIdleLengthPolicy tagName]];
  case DBTEAMLOGWebSessionsIdleLengthPolicyOther:
    return [[self tagName] isEqual:[aWebSessionsIdleLengthPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebSessionsIdleLengthPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGWebSessionsIdleLengthPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDefined]) {
    jsonDict = [[DBTEAMLOGDurationLogInfoSerializer serialize:valueObj.defined] mutableCopy];
    jsonDict[@".tag"] = @"defined";
  } else if ([valueObj isUndefined]) {
    jsonDict[@".tag"] = @"undefined";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGWebSessionsIdleLengthPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"defined"]) {
    DBTEAMLOGDurationLogInfo *defined = [DBTEAMLOGDurationLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGWebSessionsIdleLengthPolicy alloc] initWithDefined:defined];
  } else if ([tag isEqualToString:@"undefined"]) {
    return [[DBTEAMLOGWebSessionsIdleLengthPolicy alloc] initWithUndefined];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGWebSessionsIdleLengthPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGWebSessionsIdleLengthPolicy alloc] initWithOther];
  }
}

@end
