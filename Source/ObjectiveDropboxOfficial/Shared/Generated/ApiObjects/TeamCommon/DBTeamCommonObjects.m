///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `TeamCommon` namespace.

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONGroupManagementType.h"

#pragma mark - API Object

@implementation DBTEAMCOMMONGroupManagementType

#pragma mark - Constructors

- (instancetype)initWithCompanyManaged {
  self = [super init];
  if (self) {
    _tag = DBTEAMCOMMONGroupManagementTypeCompanyManaged;
  }
  return self;
}

- (instancetype)initWithUserManaged {
  self = [super init];
  if (self) {
    _tag = DBTEAMCOMMONGroupManagementTypeUserManaged;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMCOMMONGroupManagementTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isCompanyManaged {
  return _tag == DBTEAMCOMMONGroupManagementTypeCompanyManaged;
}

- (BOOL)isUserManaged {
  return _tag == DBTEAMCOMMONGroupManagementTypeUserManaged;
}

- (BOOL)isOther {
  return _tag == DBTEAMCOMMONGroupManagementTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMCOMMONGroupManagementTypeCompanyManaged:
    return @"DBTEAMCOMMONGroupManagementTypeCompanyManaged";
  case DBTEAMCOMMONGroupManagementTypeUserManaged:
    return @"DBTEAMCOMMONGroupManagementTypeUserManaged";
  case DBTEAMCOMMONGroupManagementTypeOther:
    return @"DBTEAMCOMMONGroupManagementTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMCOMMONGroupManagementTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMCOMMONGroupManagementTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMCOMMONGroupManagementTypeSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMCOMMONGroupManagementTypeSerializer

+ (NSDictionary *)serialize:(DBTEAMCOMMONGroupManagementType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isCompanyManaged]) {
    jsonDict[@".tag"] = @"company_managed";
  } else if ([valueObj isUserManaged]) {
    jsonDict[@".tag"] = @"user_managed";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMCOMMONGroupManagementType *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"company_managed"]) {
    return [[DBTEAMCOMMONGroupManagementType alloc] initWithCompanyManaged];
  } else if ([tag isEqualToString:@"user_managed"]) {
    return [[DBTEAMCOMMONGroupManagementType alloc] initWithUserManaged];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMCOMMONGroupManagementType alloc] initWithOther];
  } else {
    return [[DBTEAMCOMMONGroupManagementType alloc] initWithOther];
  }
}
@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONGroupManagementType.h"
#import "DBTEAMCOMMONGroupSummary.h"

#pragma mark - API Object

@implementation DBTEAMCOMMONGroupSummary

#pragma mark - Constructors

- (instancetype)initWithGroupName:(NSString *)groupName
                          groupId:(NSString *)groupId
              groupManagementType:(DBTEAMCOMMONGroupManagementType *)groupManagementType
                  groupExternalId:(NSString *)groupExternalId
                      memberCount:(NSNumber *)memberCount {

  self = [super init];
  if (self) {
    _groupName = groupName;
    _groupId = groupId;
    _groupExternalId = groupExternalId;
    _memberCount = memberCount;
    _groupManagementType = groupManagementType;
  }
  return self;
}

- (instancetype)initWithGroupName:(NSString *)groupName
                          groupId:(NSString *)groupId
              groupManagementType:(DBTEAMCOMMONGroupManagementType *)groupManagementType {
  return [self initWithGroupName:groupName
                         groupId:groupId
             groupManagementType:groupManagementType
                 groupExternalId:nil
                     memberCount:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMCOMMONGroupSummarySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMCOMMONGroupSummarySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMCOMMONGroupSummarySerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMCOMMONGroupSummarySerializer

+ (NSDictionary *)serialize:(DBTEAMCOMMONGroupSummary *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_name"] = valueObj.groupName;
  jsonDict[@"group_id"] = valueObj.groupId;
  jsonDict[@"group_management_type"] =
      [DBTEAMCOMMONGroupManagementTypeSerializer serialize:valueObj.groupManagementType];
  if (valueObj.groupExternalId) {
    jsonDict[@"group_external_id"] = valueObj.groupExternalId;
  }
  if (valueObj.memberCount) {
    jsonDict[@"member_count"] = valueObj.memberCount;
  }

  return jsonDict;
}

+ (DBTEAMCOMMONGroupSummary *)deserialize:(NSDictionary *)valueDict {
  NSString *groupName = valueDict[@"group_name"];
  NSString *groupId = valueDict[@"group_id"];
  DBTEAMCOMMONGroupManagementType *groupManagementType =
      [DBTEAMCOMMONGroupManagementTypeSerializer deserialize:valueDict[@"group_management_type"]];
  NSString *groupExternalId = valueDict[@"group_external_id"] ?: nil;
  NSNumber *memberCount = valueDict[@"member_count"] ?: nil;

  return [[DBTEAMCOMMONGroupSummary alloc] initWithGroupName:groupName
                                                     groupId:groupId
                                         groupManagementType:groupManagementType
                                             groupExternalId:groupExternalId
                                                 memberCount:memberCount];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONGroupType.h"

#pragma mark - API Object

@implementation DBTEAMCOMMONGroupType

#pragma mark - Constructors

- (instancetype)initWithTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMCOMMONGroupTypeTeam;
  }
  return self;
}

- (instancetype)initWithUserManaged {
  self = [super init];
  if (self) {
    _tag = DBTEAMCOMMONGroupTypeUserManaged;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMCOMMONGroupTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isTeam {
  return _tag == DBTEAMCOMMONGroupTypeTeam;
}

- (BOOL)isUserManaged {
  return _tag == DBTEAMCOMMONGroupTypeUserManaged;
}

- (BOOL)isOther {
  return _tag == DBTEAMCOMMONGroupTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMCOMMONGroupTypeTeam:
    return @"DBTEAMCOMMONGroupTypeTeam";
  case DBTEAMCOMMONGroupTypeUserManaged:
    return @"DBTEAMCOMMONGroupTypeUserManaged";
  case DBTEAMCOMMONGroupTypeOther:
    return @"DBTEAMCOMMONGroupTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMCOMMONGroupTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMCOMMONGroupTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMCOMMONGroupTypeSerializer serialize:self] description];
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMCOMMONGroupTypeSerializer

+ (NSDictionary *)serialize:(DBTEAMCOMMONGroupType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeam]) {
    jsonDict[@".tag"] = @"team";
  } else if ([valueObj isUserManaged]) {
    jsonDict[@".tag"] = @"user_managed";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMCOMMONGroupType *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team"]) {
    return [[DBTEAMCOMMONGroupType alloc] initWithTeam];
  } else if ([tag isEqualToString:@"user_managed"]) {
    return [[DBTEAMCOMMONGroupType alloc] initWithUserManaged];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMCOMMONGroupType alloc] initWithOther];
  } else {
    return [[DBTEAMCOMMONGroupType alloc] initWithOther];
  }
}
@end
