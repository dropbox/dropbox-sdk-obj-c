///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `Team` namespace.

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDeviceSession.h"

#pragma mark - API Object

@implementation DBTEAMDeviceSession

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId
                        ipAddress:(NSString *)ipAddress
                          country:(NSString *)country
                          created:(NSDate *)created
                          updated:(NSDate *)updated {
  [DBStoneValidators nonnullValidator:nil](sessionId);

  self = [super init];
  if (self) {
    _sessionId = sessionId;
    _ipAddress = ipAddress;
    _country = country;
    _created = created;
    _updated = updated;
  }
  return self;
}

- (instancetype)initWithSessionId:(NSString *)sessionId {
  return [self initWithSessionId:sessionId ipAddress:nil country:nil created:nil updated:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMDeviceSessionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMDeviceSessionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMDeviceSessionSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sessionId hash];
  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.country != nil) {
    result = prime * result + [self.country hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceSession:other];
}

- (BOOL)isEqualToDeviceSession:(DBTEAMDeviceSession *)aDeviceSession {
  if (self == aDeviceSession) {
    return YES;
  }
  if (![self.sessionId isEqual:aDeviceSession.sessionId]) {
    return NO;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aDeviceSession.ipAddress]) {
      return NO;
    }
  }
  if (self.country) {
    if (![self.country isEqual:aDeviceSession.country]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:aDeviceSession.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:aDeviceSession.updated]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMDeviceSessionSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMDeviceSession *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"session_id"] = valueObj.sessionId;
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.country) {
    jsonDict[@"country"] = valueObj.country;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMDeviceSession *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sessionId = valueDict[@"session_id"];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSString *country = valueDict[@"country"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;

  return [[DBTEAMDeviceSession alloc] initWithSessionId:sessionId
                                              ipAddress:ipAddress
                                                country:country
                                                created:created
                                                updated:updated];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMActiveWebSession.h"
#import "DBTEAMDeviceSession.h"

#pragma mark - API Object

@implementation DBTEAMActiveWebSession

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId
                        userAgent:(NSString *)userAgent
                               os:(NSString *)os
                          browser:(NSString *)browser
                        ipAddress:(NSString *)ipAddress
                          country:(NSString *)country
                          created:(NSDate *)created
                          updated:(NSDate *)updated
                          expires:(NSDate *)expires {
  [DBStoneValidators nonnullValidator:nil](sessionId);
  [DBStoneValidators nonnullValidator:nil](userAgent);
  [DBStoneValidators nonnullValidator:nil](os);
  [DBStoneValidators nonnullValidator:nil](browser);

  self = [super initWithSessionId:sessionId ipAddress:ipAddress country:country created:created updated:updated];
  if (self) {
    _userAgent = userAgent;
    _os = os;
    _browser = browser;
    _expires = expires;
  }
  return self;
}

- (instancetype)initWithSessionId:(NSString *)sessionId
                        userAgent:(NSString *)userAgent
                               os:(NSString *)os
                          browser:(NSString *)browser {
  return [self initWithSessionId:sessionId
                       userAgent:userAgent
                              os:os
                         browser:browser
                       ipAddress:nil
                         country:nil
                         created:nil
                         updated:nil
                         expires:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMActiveWebSessionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMActiveWebSessionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMActiveWebSessionSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sessionId hash];
  result = prime * result + [self.userAgent hash];
  result = prime * result + [self.os hash];
  result = prime * result + [self.browser hash];
  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.country != nil) {
    result = prime * result + [self.country hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }
  if (self.expires != nil) {
    result = prime * result + [self.expires hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToActiveWebSession:other];
}

- (BOOL)isEqualToActiveWebSession:(DBTEAMActiveWebSession *)anActiveWebSession {
  if (self == anActiveWebSession) {
    return YES;
  }
  if (![self.sessionId isEqual:anActiveWebSession.sessionId]) {
    return NO;
  }
  if (![self.userAgent isEqual:anActiveWebSession.userAgent]) {
    return NO;
  }
  if (![self.os isEqual:anActiveWebSession.os]) {
    return NO;
  }
  if (![self.browser isEqual:anActiveWebSession.browser]) {
    return NO;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:anActiveWebSession.ipAddress]) {
      return NO;
    }
  }
  if (self.country) {
    if (![self.country isEqual:anActiveWebSession.country]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:anActiveWebSession.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:anActiveWebSession.updated]) {
      return NO;
    }
  }
  if (self.expires) {
    if (![self.expires isEqual:anActiveWebSession.expires]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMActiveWebSessionSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMActiveWebSession *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"session_id"] = valueObj.sessionId;
  jsonDict[@"user_agent"] = valueObj.userAgent;
  jsonDict[@"os"] = valueObj.os;
  jsonDict[@"browser"] = valueObj.browser;
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.country) {
    jsonDict[@"country"] = valueObj.country;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.expires) {
    jsonDict[@"expires"] = [DBNSDateSerializer serialize:valueObj.expires dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMActiveWebSession *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sessionId = valueDict[@"session_id"];
  NSString *userAgent = valueDict[@"user_agent"];
  NSString *os = valueDict[@"os"];
  NSString *browser = valueDict[@"browser"];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSString *country = valueDict[@"country"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *expires = valueDict[@"expires"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"expires"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;

  return [[DBTEAMActiveWebSession alloc] initWithSessionId:sessionId
                                                 userAgent:userAgent
                                                        os:os
                                                   browser:browser
                                                 ipAddress:ipAddress
                                                   country:country
                                                   created:created
                                                   updated:updated
                                                   expires:expires];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMAdminTier.h"

#pragma mark - API Object

@implementation DBTEAMAdminTier

#pragma mark - Constructors

- (instancetype)initWithTeamAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMAdminTierTeamAdmin;
  }
  return self;
}

- (instancetype)initWithUserManagementAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMAdminTierUserManagementAdmin;
  }
  return self;
}

- (instancetype)initWithSupportAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMAdminTierSupportAdmin;
  }
  return self;
}

- (instancetype)initWithMemberOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMAdminTierMemberOnly;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isTeamAdmin {
  return _tag == DBTEAMAdminTierTeamAdmin;
}

- (BOOL)isUserManagementAdmin {
  return _tag == DBTEAMAdminTierUserManagementAdmin;
}

- (BOOL)isSupportAdmin {
  return _tag == DBTEAMAdminTierSupportAdmin;
}

- (BOOL)isMemberOnly {
  return _tag == DBTEAMAdminTierMemberOnly;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMAdminTierTeamAdmin:
    return @"DBTEAMAdminTierTeamAdmin";
  case DBTEAMAdminTierUserManagementAdmin:
    return @"DBTEAMAdminTierUserManagementAdmin";
  case DBTEAMAdminTierSupportAdmin:
    return @"DBTEAMAdminTierSupportAdmin";
  case DBTEAMAdminTierMemberOnly:
    return @"DBTEAMAdminTierMemberOnly";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMAdminTierSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMAdminTierSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMAdminTierSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMAdminTierTeamAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMAdminTierUserManagementAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMAdminTierSupportAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMAdminTierMemberOnly:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminTier:other];
}

- (BOOL)isEqualToAdminTier:(DBTEAMAdminTier *)anAdminTier {
  if (self == anAdminTier) {
    return YES;
  }
  if (self.tag != anAdminTier.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMAdminTierTeamAdmin:
    return [[self tagName] isEqual:[anAdminTier tagName]];
  case DBTEAMAdminTierUserManagementAdmin:
    return [[self tagName] isEqual:[anAdminTier tagName]];
  case DBTEAMAdminTierSupportAdmin:
    return [[self tagName] isEqual:[anAdminTier tagName]];
  case DBTEAMAdminTierMemberOnly:
    return [[self tagName] isEqual:[anAdminTier tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMAdminTierSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMAdminTier *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamAdmin]) {
    jsonDict[@".tag"] = @"team_admin";
  } else if ([valueObj isUserManagementAdmin]) {
    jsonDict[@".tag"] = @"user_management_admin";
  } else if ([valueObj isSupportAdmin]) {
    jsonDict[@".tag"] = @"support_admin";
  } else if ([valueObj isMemberOnly]) {
    jsonDict[@".tag"] = @"member_only";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMAdminTier *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_admin"]) {
    return [[DBTEAMAdminTier alloc] initWithTeamAdmin];
  } else if ([tag isEqualToString:@"user_management_admin"]) {
    return [[DBTEAMAdminTier alloc] initWithUserManagementAdmin];
  } else if ([tag isEqualToString:@"support_admin"]) {
    return [[DBTEAMAdminTier alloc] initWithSupportAdmin];
  } else if ([tag isEqualToString:@"member_only"]) {
    return [[DBTEAMAdminTier alloc] initWithMemberOnly];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMApiApp.h"

#pragma mark - API Object

@implementation DBTEAMApiApp

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId
                      appName:(NSString *)appName
                  isAppFolder:(NSNumber *)isAppFolder
                    publisher:(NSString *)publisher
                 publisherUrl:(NSString *)publisherUrl
                       linked:(NSDate *)linked {
  [DBStoneValidators nonnullValidator:nil](appId);
  [DBStoneValidators nonnullValidator:nil](appName);
  [DBStoneValidators nonnullValidator:nil](isAppFolder);

  self = [super init];
  if (self) {
    _appId = appId;
    _appName = appName;
    _publisher = publisher;
    _publisherUrl = publisherUrl;
    _linked = linked;
    _isAppFolder = isAppFolder;
  }
  return self;
}

- (instancetype)initWithAppId:(NSString *)appId appName:(NSString *)appName isAppFolder:(NSNumber *)isAppFolder {
  return [self initWithAppId:appId appName:appName isAppFolder:isAppFolder publisher:nil publisherUrl:nil linked:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMApiAppSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMApiAppSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMApiAppSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appId hash];
  result = prime * result + [self.appName hash];
  result = prime * result + [self.isAppFolder hash];
  if (self.publisher != nil) {
    result = prime * result + [self.publisher hash];
  }
  if (self.publisherUrl != nil) {
    result = prime * result + [self.publisherUrl hash];
  }
  if (self.linked != nil) {
    result = prime * result + [self.linked hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToApiApp:other];
}

- (BOOL)isEqualToApiApp:(DBTEAMApiApp *)anApiApp {
  if (self == anApiApp) {
    return YES;
  }
  if (![self.appId isEqual:anApiApp.appId]) {
    return NO;
  }
  if (![self.appName isEqual:anApiApp.appName]) {
    return NO;
  }
  if (![self.isAppFolder isEqual:anApiApp.isAppFolder]) {
    return NO;
  }
  if (self.publisher) {
    if (![self.publisher isEqual:anApiApp.publisher]) {
      return NO;
    }
  }
  if (self.publisherUrl) {
    if (![self.publisherUrl isEqual:anApiApp.publisherUrl]) {
      return NO;
    }
  }
  if (self.linked) {
    if (![self.linked isEqual:anApiApp.linked]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMApiAppSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMApiApp *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_id"] = valueObj.appId;
  jsonDict[@"app_name"] = valueObj.appName;
  jsonDict[@"is_app_folder"] = valueObj.isAppFolder;
  if (valueObj.publisher) {
    jsonDict[@"publisher"] = valueObj.publisher;
  }
  if (valueObj.publisherUrl) {
    jsonDict[@"publisher_url"] = valueObj.publisherUrl;
  }
  if (valueObj.linked) {
    jsonDict[@"linked"] = [DBNSDateSerializer serialize:valueObj.linked dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMApiApp *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *appId = valueDict[@"app_id"];
  NSString *appName = valueDict[@"app_name"];
  NSNumber *isAppFolder = valueDict[@"is_app_folder"];
  NSString *publisher = valueDict[@"publisher"] ?: nil;
  NSString *publisherUrl = valueDict[@"publisher_url"] ?: nil;
  NSDate *linked = valueDict[@"linked"]
                       ? [DBNSDateSerializer deserialize:valueDict[@"linked"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                       : nil;

  return [[DBTEAMApiApp alloc] initWithAppId:appId
                                     appName:appName
                                 isAppFolder:isAppFolder
                                   publisher:publisher
                                publisherUrl:publisherUrl
                                      linked:linked];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseDfbReport.h"

#pragma mark - API Object

@implementation DBTEAMBaseDfbReport

#pragma mark - Constructors

- (instancetype)initWithStartDate:(NSString *)startDate {
  [DBStoneValidators nonnullValidator:nil](startDate);

  self = [super init];
  if (self) {
    _startDate = startDate;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMBaseDfbReportSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMBaseDfbReportSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMBaseDfbReportSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.startDate hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBaseDfbReport:other];
}

- (BOOL)isEqualToBaseDfbReport:(DBTEAMBaseDfbReport *)aBaseDfbReport {
  if (self == aBaseDfbReport) {
    return YES;
  }
  if (![self.startDate isEqual:aBaseDfbReport.startDate]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMBaseDfbReportSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMBaseDfbReport *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"start_date"] = valueObj.startDate;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMBaseDfbReport *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *startDate = valueDict[@"start_date"];

  return [[DBTEAMBaseDfbReport alloc] initWithStartDate:startDate];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseTeamFolderError.h"
#import "DBTEAMTeamFolderAccessError.h"
#import "DBTEAMTeamFolderInvalidStatusError.h"
#import "DBTEAMTeamFolderTeamSharedDropboxError.h"

#pragma mark - API Object

@implementation DBTEAMBaseTeamFolderError

@synthesize accessError = _accessError;
@synthesize statusError = _statusError;
@synthesize teamSharedDropboxError = _teamSharedDropboxError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBTEAMTeamFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBTEAMBaseTeamFolderErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithStatusError:(DBTEAMTeamFolderInvalidStatusError *)statusError {
  self = [super init];
  if (self) {
    _tag = DBTEAMBaseTeamFolderErrorStatusError;
    _statusError = statusError;
  }
  return self;
}

- (instancetype)initWithTeamSharedDropboxError:(DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  self = [super init];
  if (self) {
    _tag = DBTEAMBaseTeamFolderErrorTeamSharedDropboxError;
    _teamSharedDropboxError = teamSharedDropboxError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMBaseTeamFolderErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMTeamFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMBaseTeamFolderErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBTEAMTeamFolderInvalidStatusError *)statusError {
  if (![self isStatusError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMBaseTeamFolderErrorStatusError, but was %@.", [self tagName]];
  }
  return _statusError;
}

- (DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  if (![self isTeamSharedDropboxError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMBaseTeamFolderErrorTeamSharedDropboxError, but was %@.", [self tagName]];
  }
  return _teamSharedDropboxError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBTEAMBaseTeamFolderErrorAccessError;
}

- (BOOL)isStatusError {
  return _tag == DBTEAMBaseTeamFolderErrorStatusError;
}

- (BOOL)isTeamSharedDropboxError {
  return _tag == DBTEAMBaseTeamFolderErrorTeamSharedDropboxError;
}

- (BOOL)isOther {
  return _tag == DBTEAMBaseTeamFolderErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMBaseTeamFolderErrorAccessError:
    return @"DBTEAMBaseTeamFolderErrorAccessError";
  case DBTEAMBaseTeamFolderErrorStatusError:
    return @"DBTEAMBaseTeamFolderErrorStatusError";
  case DBTEAMBaseTeamFolderErrorTeamSharedDropboxError:
    return @"DBTEAMBaseTeamFolderErrorTeamSharedDropboxError";
  case DBTEAMBaseTeamFolderErrorOther:
    return @"DBTEAMBaseTeamFolderErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMBaseTeamFolderErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMBaseTeamFolderErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMBaseTeamFolderErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMBaseTeamFolderErrorAccessError:
    result = prime * result + [self.accessError hash];
  case DBTEAMBaseTeamFolderErrorStatusError:
    result = prime * result + [self.statusError hash];
  case DBTEAMBaseTeamFolderErrorTeamSharedDropboxError:
    result = prime * result + [self.teamSharedDropboxError hash];
  case DBTEAMBaseTeamFolderErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBaseTeamFolderError:other];
}

- (BOOL)isEqualToBaseTeamFolderError:(DBTEAMBaseTeamFolderError *)aBaseTeamFolderError {
  if (self == aBaseTeamFolderError) {
    return YES;
  }
  if (self.tag != aBaseTeamFolderError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMBaseTeamFolderErrorAccessError:
    return [self.accessError isEqual:aBaseTeamFolderError.accessError];
  case DBTEAMBaseTeamFolderErrorStatusError:
    return [self.statusError isEqual:aBaseTeamFolderError.statusError];
  case DBTEAMBaseTeamFolderErrorTeamSharedDropboxError:
    return [self.teamSharedDropboxError isEqual:aBaseTeamFolderError.teamSharedDropboxError];
  case DBTEAMBaseTeamFolderErrorOther:
    return [[self tagName] isEqual:[aBaseTeamFolderError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMBaseTeamFolderErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMBaseTeamFolderError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] = [[DBTEAMTeamFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isStatusError]) {
    jsonDict[@"status_error"] =
        [[DBTEAMTeamFolderInvalidStatusErrorSerializer serialize:valueObj.statusError] mutableCopy];
    jsonDict[@".tag"] = @"status_error";
  } else if ([valueObj isTeamSharedDropboxError]) {
    jsonDict[@"team_shared_dropbox_error"] =
        [[DBTEAMTeamFolderTeamSharedDropboxErrorSerializer serialize:valueObj.teamSharedDropboxError] mutableCopy];
    jsonDict[@".tag"] = @"team_shared_dropbox_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMBaseTeamFolderError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBTEAMTeamFolderAccessError *accessError =
        [DBTEAMTeamFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBTEAMBaseTeamFolderError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"status_error"]) {
    DBTEAMTeamFolderInvalidStatusError *statusError =
        [DBTEAMTeamFolderInvalidStatusErrorSerializer deserialize:valueDict[@"status_error"]];
    return [[DBTEAMBaseTeamFolderError alloc] initWithStatusError:statusError];
  } else if ([tag isEqualToString:@"team_shared_dropbox_error"]) {
    DBTEAMTeamFolderTeamSharedDropboxError *teamSharedDropboxError =
        [DBTEAMTeamFolderTeamSharedDropboxErrorSerializer deserialize:valueDict[@"team_shared_dropbox_error"]];
    return [[DBTEAMBaseTeamFolderError alloc] initWithTeamSharedDropboxError:teamSharedDropboxError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMBaseTeamFolderError alloc] initWithOther];
  } else {
    return [[DBTEAMBaseTeamFolderError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCustomQuotaError.h"

#pragma mark - API Object

@implementation DBTEAMCustomQuotaError

#pragma mark - Constructors

- (instancetype)initWithTooManyUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMCustomQuotaErrorTooManyUsers;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMCustomQuotaErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isTooManyUsers {
  return _tag == DBTEAMCustomQuotaErrorTooManyUsers;
}

- (BOOL)isOther {
  return _tag == DBTEAMCustomQuotaErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMCustomQuotaErrorTooManyUsers:
    return @"DBTEAMCustomQuotaErrorTooManyUsers";
  case DBTEAMCustomQuotaErrorOther:
    return @"DBTEAMCustomQuotaErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMCustomQuotaErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMCustomQuotaErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMCustomQuotaErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMCustomQuotaErrorTooManyUsers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMCustomQuotaErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCustomQuotaError:other];
}

- (BOOL)isEqualToCustomQuotaError:(DBTEAMCustomQuotaError *)aCustomQuotaError {
  if (self == aCustomQuotaError) {
    return YES;
  }
  if (self.tag != aCustomQuotaError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMCustomQuotaErrorTooManyUsers:
    return [[self tagName] isEqual:[aCustomQuotaError tagName]];
  case DBTEAMCustomQuotaErrorOther:
    return [[self tagName] isEqual:[aCustomQuotaError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMCustomQuotaErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMCustomQuotaError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTooManyUsers]) {
    jsonDict[@".tag"] = @"too_many_users";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMCustomQuotaError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"too_many_users"]) {
    return [[DBTEAMCustomQuotaError alloc] initWithTooManyUsers];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMCustomQuotaError alloc] initWithOther];
  } else {
    return [[DBTEAMCustomQuotaError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCustomQuotaResult.h"
#import "DBTEAMUserCustomQuotaResult.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMCustomQuotaResult

@synthesize success = _success;
@synthesize invalidUser = _invalidUser;

#pragma mark - Constructors

- (instancetype)initWithSuccess:(DBTEAMUserCustomQuotaResult *)success {
  self = [super init];
  if (self) {
    _tag = DBTEAMCustomQuotaResultSuccess;
    _success = success;
  }
  return self;
}

- (instancetype)initWithInvalidUser:(DBTEAMUserSelectorArg *)invalidUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMCustomQuotaResultInvalidUser;
    _invalidUser = invalidUser;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMCustomQuotaResultOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMUserCustomQuotaResult *)success {
  if (![self isSuccess]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMCustomQuotaResultSuccess, but was %@.", [self tagName]];
  }
  return _success;
}

- (DBTEAMUserSelectorArg *)invalidUser {
  if (![self isInvalidUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMCustomQuotaResultInvalidUser, but was %@.", [self tagName]];
  }
  return _invalidUser;
}

#pragma mark - Tag state methods

- (BOOL)isSuccess {
  return _tag == DBTEAMCustomQuotaResultSuccess;
}

- (BOOL)isInvalidUser {
  return _tag == DBTEAMCustomQuotaResultInvalidUser;
}

- (BOOL)isOther {
  return _tag == DBTEAMCustomQuotaResultOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMCustomQuotaResultSuccess:
    return @"DBTEAMCustomQuotaResultSuccess";
  case DBTEAMCustomQuotaResultInvalidUser:
    return @"DBTEAMCustomQuotaResultInvalidUser";
  case DBTEAMCustomQuotaResultOther:
    return @"DBTEAMCustomQuotaResultOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMCustomQuotaResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMCustomQuotaResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMCustomQuotaResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMCustomQuotaResultSuccess:
    result = prime * result + [self.success hash];
  case DBTEAMCustomQuotaResultInvalidUser:
    result = prime * result + [self.invalidUser hash];
  case DBTEAMCustomQuotaResultOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCustomQuotaResult:other];
}

- (BOOL)isEqualToCustomQuotaResult:(DBTEAMCustomQuotaResult *)aCustomQuotaResult {
  if (self == aCustomQuotaResult) {
    return YES;
  }
  if (self.tag != aCustomQuotaResult.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMCustomQuotaResultSuccess:
    return [self.success isEqual:aCustomQuotaResult.success];
  case DBTEAMCustomQuotaResultInvalidUser:
    return [self.invalidUser isEqual:aCustomQuotaResult.invalidUser];
  case DBTEAMCustomQuotaResultOther:
    return [[self tagName] isEqual:[aCustomQuotaResult tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMCustomQuotaResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMCustomQuotaResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSuccess]) {
    jsonDict = [[DBTEAMUserCustomQuotaResultSerializer serialize:valueObj.success] mutableCopy];
    jsonDict[@".tag"] = @"success";
  } else if ([valueObj isInvalidUser]) {
    jsonDict[@"invalid_user"] = [[DBTEAMUserSelectorArgSerializer serialize:valueObj.invalidUser] mutableCopy];
    jsonDict[@".tag"] = @"invalid_user";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMCustomQuotaResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"success"]) {
    DBTEAMUserCustomQuotaResult *success = [DBTEAMUserCustomQuotaResultSerializer deserialize:valueDict];
    return [[DBTEAMCustomQuotaResult alloc] initWithSuccess:success];
  } else if ([tag isEqualToString:@"invalid_user"]) {
    DBTEAMUserSelectorArg *invalidUser = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"invalid_user"]];
    return [[DBTEAMCustomQuotaResult alloc] initWithInvalidUser:invalidUser];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMCustomQuotaResult alloc] initWithOther];
  } else {
    return [[DBTEAMCustomQuotaResult alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCustomQuotaUsersArg.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMCustomQuotaUsersArg

#pragma mark - Constructors

- (instancetype)initWithUsers:(NSArray<DBTEAMUserSelectorArg *> *)users {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](users);

  self = [super init];
  if (self) {
    _users = users;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMCustomQuotaUsersArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMCustomQuotaUsersArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMCustomQuotaUsersArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.users hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCustomQuotaUsersArg:other];
}

- (BOOL)isEqualToCustomQuotaUsersArg:(DBTEAMCustomQuotaUsersArg *)aCustomQuotaUsersArg {
  if (self == aCustomQuotaUsersArg) {
    return YES;
  }
  if (![self.users isEqual:aCustomQuotaUsersArg.users]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMCustomQuotaUsersArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMCustomQuotaUsersArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"users"] = [DBArraySerializer serialize:valueObj.users
                                          withBlock:^id(id elem0) {
                                            return [DBTEAMUserSelectorArgSerializer serialize:elem0];
                                          }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMCustomQuotaUsersArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMUserSelectorArg *> *users =
      [DBArraySerializer deserialize:valueDict[@"users"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMUserSelectorArgSerializer deserialize:elem0];
                           }];

  return [[DBTEAMCustomQuotaUsersArg alloc] initWithUsers:users];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDateRange.h"

#pragma mark - API Object

@implementation DBTEAMDateRange

#pragma mark - Constructors

- (instancetype)initWithStartDate:(NSDate *)startDate endDate:(NSDate *)endDate {

  self = [super init];
  if (self) {
    _startDate = startDate;
    _endDate = endDate;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithStartDate:nil endDate:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMDateRangeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMDateRangeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMDateRangeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.startDate != nil) {
    result = prime * result + [self.startDate hash];
  }
  if (self.endDate != nil) {
    result = prime * result + [self.endDate hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDateRange:other];
}

- (BOOL)isEqualToDateRange:(DBTEAMDateRange *)aDateRange {
  if (self == aDateRange) {
    return YES;
  }
  if (self.startDate) {
    if (![self.startDate isEqual:aDateRange.startDate]) {
      return NO;
    }
  }
  if (self.endDate) {
    if (![self.endDate isEqual:aDateRange.endDate]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMDateRangeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMDateRange *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.startDate) {
    jsonDict[@"start_date"] = [DBNSDateSerializer serialize:valueObj.startDate dateFormat:@"%Y-%m-%d"];
  }
  if (valueObj.endDate) {
    jsonDict[@"end_date"] = [DBNSDateSerializer serialize:valueObj.endDate dateFormat:@"%Y-%m-%d"];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMDateRange *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSDate *startDate =
      valueDict[@"start_date"] ? [DBNSDateSerializer deserialize:valueDict[@"start_date"] dateFormat:@"%Y-%m-%d"] : nil;
  NSDate *endDate =
      valueDict[@"end_date"] ? [DBNSDateSerializer deserialize:valueDict[@"end_date"] dateFormat:@"%Y-%m-%d"] : nil;

  return [[DBTEAMDateRange alloc] initWithStartDate:startDate endDate:endDate];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDateRangeError.h"

#pragma mark - API Object

@implementation DBTEAMDateRangeError

#pragma mark - Constructors

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMDateRangeErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOther {
  return _tag == DBTEAMDateRangeErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMDateRangeErrorOther:
    return @"DBTEAMDateRangeErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMDateRangeErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMDateRangeErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMDateRangeErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMDateRangeErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDateRangeError:other];
}

- (BOOL)isEqualToDateRangeError:(DBTEAMDateRangeError *)aDateRangeError {
  if (self == aDateRangeError) {
    return YES;
  }
  if (self.tag != aDateRangeError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMDateRangeErrorOther:
    return [[self tagName] isEqual:[aDateRangeError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMDateRangeErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMDateRangeError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMDateRangeError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMDateRangeError alloc] initWithOther];
  } else {
    return [[DBTEAMDateRangeError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDesktopClientSession.h"
#import "DBTEAMDesktopPlatform.h"
#import "DBTEAMDeviceSession.h"

#pragma mark - API Object

@implementation DBTEAMDesktopClientSession

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId
                         hostName:(NSString *)hostName
                       clientType:(DBTEAMDesktopPlatform *)clientType
                    clientVersion:(NSString *)clientVersion
                         platform:(NSString *)platform
        isDeleteOnUnlinkSupported:(NSNumber *)isDeleteOnUnlinkSupported
                        ipAddress:(NSString *)ipAddress
                          country:(NSString *)country
                          created:(NSDate *)created
                          updated:(NSDate *)updated {
  [DBStoneValidators nonnullValidator:nil](sessionId);
  [DBStoneValidators nonnullValidator:nil](hostName);
  [DBStoneValidators nonnullValidator:nil](clientType);
  [DBStoneValidators nonnullValidator:nil](clientVersion);
  [DBStoneValidators nonnullValidator:nil](platform);
  [DBStoneValidators nonnullValidator:nil](isDeleteOnUnlinkSupported);

  self = [super initWithSessionId:sessionId ipAddress:ipAddress country:country created:created updated:updated];
  if (self) {
    _hostName = hostName;
    _clientType = clientType;
    _clientVersion = clientVersion;
    _platform = platform;
    _isDeleteOnUnlinkSupported = isDeleteOnUnlinkSupported;
  }
  return self;
}

- (instancetype)initWithSessionId:(NSString *)sessionId
                         hostName:(NSString *)hostName
                       clientType:(DBTEAMDesktopPlatform *)clientType
                    clientVersion:(NSString *)clientVersion
                         platform:(NSString *)platform
        isDeleteOnUnlinkSupported:(NSNumber *)isDeleteOnUnlinkSupported {
  return [self initWithSessionId:sessionId
                        hostName:hostName
                      clientType:clientType
                   clientVersion:clientVersion
                        platform:platform
       isDeleteOnUnlinkSupported:isDeleteOnUnlinkSupported
                       ipAddress:nil
                         country:nil
                         created:nil
                         updated:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMDesktopClientSessionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMDesktopClientSessionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMDesktopClientSessionSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sessionId hash];
  result = prime * result + [self.hostName hash];
  result = prime * result + [self.clientType hash];
  result = prime * result + [self.clientVersion hash];
  result = prime * result + [self.platform hash];
  result = prime * result + [self.isDeleteOnUnlinkSupported hash];
  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.country != nil) {
    result = prime * result + [self.country hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDesktopClientSession:other];
}

- (BOOL)isEqualToDesktopClientSession:(DBTEAMDesktopClientSession *)aDesktopClientSession {
  if (self == aDesktopClientSession) {
    return YES;
  }
  if (![self.sessionId isEqual:aDesktopClientSession.sessionId]) {
    return NO;
  }
  if (![self.hostName isEqual:aDesktopClientSession.hostName]) {
    return NO;
  }
  if (![self.clientType isEqual:aDesktopClientSession.clientType]) {
    return NO;
  }
  if (![self.clientVersion isEqual:aDesktopClientSession.clientVersion]) {
    return NO;
  }
  if (![self.platform isEqual:aDesktopClientSession.platform]) {
    return NO;
  }
  if (![self.isDeleteOnUnlinkSupported isEqual:aDesktopClientSession.isDeleteOnUnlinkSupported]) {
    return NO;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aDesktopClientSession.ipAddress]) {
      return NO;
    }
  }
  if (self.country) {
    if (![self.country isEqual:aDesktopClientSession.country]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:aDesktopClientSession.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:aDesktopClientSession.updated]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMDesktopClientSessionSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMDesktopClientSession *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"session_id"] = valueObj.sessionId;
  jsonDict[@"host_name"] = valueObj.hostName;
  jsonDict[@"client_type"] = [DBTEAMDesktopPlatformSerializer serialize:valueObj.clientType];
  jsonDict[@"client_version"] = valueObj.clientVersion;
  jsonDict[@"platform"] = valueObj.platform;
  jsonDict[@"is_delete_on_unlink_supported"] = valueObj.isDeleteOnUnlinkSupported;
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.country) {
    jsonDict[@"country"] = valueObj.country;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMDesktopClientSession *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sessionId = valueDict[@"session_id"];
  NSString *hostName = valueDict[@"host_name"];
  DBTEAMDesktopPlatform *clientType = [DBTEAMDesktopPlatformSerializer deserialize:valueDict[@"client_type"]];
  NSString *clientVersion = valueDict[@"client_version"];
  NSString *platform = valueDict[@"platform"];
  NSNumber *isDeleteOnUnlinkSupported = valueDict[@"is_delete_on_unlink_supported"];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSString *country = valueDict[@"country"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;

  return [[DBTEAMDesktopClientSession alloc] initWithSessionId:sessionId
                                                      hostName:hostName
                                                    clientType:clientType
                                                 clientVersion:clientVersion
                                                      platform:platform
                                     isDeleteOnUnlinkSupported:isDeleteOnUnlinkSupported
                                                     ipAddress:ipAddress
                                                       country:country
                                                       created:created
                                                       updated:updated];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDesktopPlatform.h"

#pragma mark - API Object

@implementation DBTEAMDesktopPlatform

#pragma mark - Constructors

- (instancetype)initWithWindows {
  self = [super init];
  if (self) {
    _tag = DBTEAMDesktopPlatformWindows;
  }
  return self;
}

- (instancetype)initWithMac {
  self = [super init];
  if (self) {
    _tag = DBTEAMDesktopPlatformMac;
  }
  return self;
}

- (instancetype)initWithLinux {
  self = [super init];
  if (self) {
    _tag = DBTEAMDesktopPlatformLinux;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMDesktopPlatformOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isWindows {
  return _tag == DBTEAMDesktopPlatformWindows;
}

- (BOOL)isMac {
  return _tag == DBTEAMDesktopPlatformMac;
}

- (BOOL)isLinux {
  return _tag == DBTEAMDesktopPlatformLinux;
}

- (BOOL)isOther {
  return _tag == DBTEAMDesktopPlatformOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMDesktopPlatformWindows:
    return @"DBTEAMDesktopPlatformWindows";
  case DBTEAMDesktopPlatformMac:
    return @"DBTEAMDesktopPlatformMac";
  case DBTEAMDesktopPlatformLinux:
    return @"DBTEAMDesktopPlatformLinux";
  case DBTEAMDesktopPlatformOther:
    return @"DBTEAMDesktopPlatformOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMDesktopPlatformSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMDesktopPlatformSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMDesktopPlatformSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMDesktopPlatformWindows:
    result = prime * result + [[self tagName] hash];
  case DBTEAMDesktopPlatformMac:
    result = prime * result + [[self tagName] hash];
  case DBTEAMDesktopPlatformLinux:
    result = prime * result + [[self tagName] hash];
  case DBTEAMDesktopPlatformOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDesktopPlatform:other];
}

- (BOOL)isEqualToDesktopPlatform:(DBTEAMDesktopPlatform *)aDesktopPlatform {
  if (self == aDesktopPlatform) {
    return YES;
  }
  if (self.tag != aDesktopPlatform.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMDesktopPlatformWindows:
    return [[self tagName] isEqual:[aDesktopPlatform tagName]];
  case DBTEAMDesktopPlatformMac:
    return [[self tagName] isEqual:[aDesktopPlatform tagName]];
  case DBTEAMDesktopPlatformLinux:
    return [[self tagName] isEqual:[aDesktopPlatform tagName]];
  case DBTEAMDesktopPlatformOther:
    return [[self tagName] isEqual:[aDesktopPlatform tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMDesktopPlatformSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMDesktopPlatform *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isWindows]) {
    jsonDict[@".tag"] = @"windows";
  } else if ([valueObj isMac]) {
    jsonDict[@".tag"] = @"mac";
  } else if ([valueObj isLinux]) {
    jsonDict[@".tag"] = @"linux";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMDesktopPlatform *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"windows"]) {
    return [[DBTEAMDesktopPlatform alloc] initWithWindows];
  } else if ([tag isEqualToString:@"mac"]) {
    return [[DBTEAMDesktopPlatform alloc] initWithMac];
  } else if ([tag isEqualToString:@"linux"]) {
    return [[DBTEAMDesktopPlatform alloc] initWithLinux];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMDesktopPlatform alloc] initWithOther];
  } else {
    return [[DBTEAMDesktopPlatform alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDeviceSessionArg.h"

#pragma mark - API Object

@implementation DBTEAMDeviceSessionArg

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId teamMemberId:(NSString *)teamMemberId {
  [DBStoneValidators nonnullValidator:nil](sessionId);
  [DBStoneValidators nonnullValidator:nil](teamMemberId);

  self = [super init];
  if (self) {
    _sessionId = sessionId;
    _teamMemberId = teamMemberId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMDeviceSessionArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMDeviceSessionArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMDeviceSessionArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sessionId hash];
  result = prime * result + [self.teamMemberId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceSessionArg:other];
}

- (BOOL)isEqualToDeviceSessionArg:(DBTEAMDeviceSessionArg *)aDeviceSessionArg {
  if (self == aDeviceSessionArg) {
    return YES;
  }
  if (![self.sessionId isEqual:aDeviceSessionArg.sessionId]) {
    return NO;
  }
  if (![self.teamMemberId isEqual:aDeviceSessionArg.teamMemberId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMDeviceSessionArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMDeviceSessionArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"session_id"] = valueObj.sessionId;
  jsonDict[@"team_member_id"] = valueObj.teamMemberId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMDeviceSessionArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sessionId = valueDict[@"session_id"];
  NSString *teamMemberId = valueDict[@"team_member_id"];

  return [[DBTEAMDeviceSessionArg alloc] initWithSessionId:sessionId teamMemberId:teamMemberId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDevicesActive.h"

#pragma mark - API Object

@implementation DBTEAMDevicesActive

#pragma mark - Constructors

- (instancetype)initWithWindows:(NSArray<NSNumber *> *)windows
                          macos:(NSArray<NSNumber *> *)macos
                          linux:(NSArray<NSNumber *> *)linux
                            ios:(NSArray<NSNumber *> *)ios
                        android:(NSArray<NSNumber *> *)android
                          other:(NSArray<NSNumber *> *)other
                          total:(NSArray<NSNumber *> *)total {
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](windows);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](macos);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](linux);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](ios);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](android);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](other);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](total);

  self = [super init];
  if (self) {
    _windows = windows;
    _macos = macos;
    _linux = linux;
    _ios = ios;
    _android = android;
    _other = other;
    _total = total;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMDevicesActiveSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMDevicesActiveSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMDevicesActiveSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.windows hash];
  result = prime * result + [self.macos hash];
  result = prime * result + [self.linux hash];
  result = prime * result + [self.ios hash];
  result = prime * result + [self.android hash];
  result = prime * result + [self.other hash];
  result = prime * result + [self.total hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDevicesActive:other];
}

- (BOOL)isEqualToDevicesActive:(DBTEAMDevicesActive *)aDevicesActive {
  if (self == aDevicesActive) {
    return YES;
  }
  if (![self.windows isEqual:aDevicesActive.windows]) {
    return NO;
  }
  if (![self.macos isEqual:aDevicesActive.macos]) {
    return NO;
  }
  if (![self.linux isEqual:aDevicesActive.linux]) {
    return NO;
  }
  if (![self.ios isEqual:aDevicesActive.ios]) {
    return NO;
  }
  if (![self.android isEqual:aDevicesActive.android]) {
    return NO;
  }
  if (![self.other isEqual:aDevicesActive.other]) {
    return NO;
  }
  if (![self.total isEqual:aDevicesActive.total]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMDevicesActiveSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMDevicesActive *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"windows"] = [DBArraySerializer serialize:valueObj.windows
                                            withBlock:^id(id elem0) {
                                              return elem0;
                                            }];
  jsonDict[@"macos"] = [DBArraySerializer serialize:valueObj.macos
                                          withBlock:^id(id elem0) {
                                            return elem0;
                                          }];
  jsonDict[@"linux"] = [DBArraySerializer serialize:valueObj.linux
                                          withBlock:^id(id elem0) {
                                            return elem0;
                                          }];
  jsonDict[@"ios"] = [DBArraySerializer serialize:valueObj.ios
                                        withBlock:^id(id elem0) {
                                          return elem0;
                                        }];
  jsonDict[@"android"] = [DBArraySerializer serialize:valueObj.android
                                            withBlock:^id(id elem0) {
                                              return elem0;
                                            }];
  jsonDict[@"other"] = [DBArraySerializer serialize:valueObj.other
                                          withBlock:^id(id elem0) {
                                            return elem0;
                                          }];
  jsonDict[@"total"] = [DBArraySerializer serialize:valueObj.total
                                          withBlock:^id(id elem0) {
                                            return elem0;
                                          }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMDevicesActive *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<NSNumber *> *windows = [DBArraySerializer deserialize:valueDict[@"windows"]
                                                      withBlock:^id(id elem0) {
                                                        return elem0;
                                                      }];
  NSArray<NSNumber *> *macos = [DBArraySerializer deserialize:valueDict[@"macos"]
                                                    withBlock:^id(id elem0) {
                                                      return elem0;
                                                    }];
  NSArray<NSNumber *> *linux = [DBArraySerializer deserialize:valueDict[@"linux"]
                                                    withBlock:^id(id elem0) {
                                                      return elem0;
                                                    }];
  NSArray<NSNumber *> *ios = [DBArraySerializer deserialize:valueDict[@"ios"]
                                                  withBlock:^id(id elem0) {
                                                    return elem0;
                                                  }];
  NSArray<NSNumber *> *android = [DBArraySerializer deserialize:valueDict[@"android"]
                                                      withBlock:^id(id elem0) {
                                                        return elem0;
                                                      }];
  NSArray<NSNumber *> *other = [DBArraySerializer deserialize:valueDict[@"other"]
                                                    withBlock:^id(id elem0) {
                                                      return elem0;
                                                    }];
  NSArray<NSNumber *> *total = [DBArraySerializer deserialize:valueDict[@"total"]
                                                    withBlock:^id(id elem0) {
                                                      return elem0;
                                                    }];

  return [[DBTEAMDevicesActive alloc] initWithWindows:windows
                                                macos:macos
                                                linux:linux
                                                  ios:ios
                                              android:android
                                                other:other
                                                total:total];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMExcludedUsersListArg.h"

#pragma mark - API Object

@implementation DBTEAMExcludedUsersListArg

#pragma mark - Constructors

- (instancetype)initWithLimit:(NSNumber *)limit {

  self = [super init];
  if (self) {
    _limit = limit ?: @(1000);
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithLimit:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMExcludedUsersListArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMExcludedUsersListArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMExcludedUsersListArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.limit hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExcludedUsersListArg:other];
}

- (BOOL)isEqualToExcludedUsersListArg:(DBTEAMExcludedUsersListArg *)anExcludedUsersListArg {
  if (self == anExcludedUsersListArg) {
    return YES;
  }
  if (![self.limit isEqual:anExcludedUsersListArg.limit]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMExcludedUsersListArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMExcludedUsersListArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"limit"] = valueObj.limit;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMExcludedUsersListArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);

  return [[DBTEAMExcludedUsersListArg alloc] initWithLimit:limit];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMExcludedUsersListContinueArg.h"

#pragma mark - API Object

@implementation DBTEAMExcludedUsersListContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {
  [DBStoneValidators nonnullValidator:nil](cursor);

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMExcludedUsersListContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMExcludedUsersListContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMExcludedUsersListContinueArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.cursor hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExcludedUsersListContinueArg:other];
}

- (BOOL)isEqualToExcludedUsersListContinueArg:(DBTEAMExcludedUsersListContinueArg *)anExcludedUsersListContinueArg {
  if (self == anExcludedUsersListContinueArg) {
    return YES;
  }
  if (![self.cursor isEqual:anExcludedUsersListContinueArg.cursor]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMExcludedUsersListContinueArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMExcludedUsersListContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMExcludedUsersListContinueArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBTEAMExcludedUsersListContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMExcludedUsersListContinueError.h"

#pragma mark - API Object

@implementation DBTEAMExcludedUsersListContinueError

#pragma mark - Constructors

- (instancetype)initWithInvalidCursor {
  self = [super init];
  if (self) {
    _tag = DBTEAMExcludedUsersListContinueErrorInvalidCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMExcludedUsersListContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidCursor {
  return _tag == DBTEAMExcludedUsersListContinueErrorInvalidCursor;
}

- (BOOL)isOther {
  return _tag == DBTEAMExcludedUsersListContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMExcludedUsersListContinueErrorInvalidCursor:
    return @"DBTEAMExcludedUsersListContinueErrorInvalidCursor";
  case DBTEAMExcludedUsersListContinueErrorOther:
    return @"DBTEAMExcludedUsersListContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMExcludedUsersListContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMExcludedUsersListContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMExcludedUsersListContinueErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMExcludedUsersListContinueErrorInvalidCursor:
    result = prime * result + [[self tagName] hash];
  case DBTEAMExcludedUsersListContinueErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExcludedUsersListContinueError:other];
}

- (BOOL)isEqualToExcludedUsersListContinueError:
    (DBTEAMExcludedUsersListContinueError *)anExcludedUsersListContinueError {
  if (self == anExcludedUsersListContinueError) {
    return YES;
  }
  if (self.tag != anExcludedUsersListContinueError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMExcludedUsersListContinueErrorInvalidCursor:
    return [[self tagName] isEqual:[anExcludedUsersListContinueError tagName]];
  case DBTEAMExcludedUsersListContinueErrorOther:
    return [[self tagName] isEqual:[anExcludedUsersListContinueError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMExcludedUsersListContinueErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMExcludedUsersListContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidCursor]) {
    jsonDict[@".tag"] = @"invalid_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMExcludedUsersListContinueError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_cursor"]) {
    return [[DBTEAMExcludedUsersListContinueError alloc] initWithInvalidCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMExcludedUsersListContinueError alloc] initWithOther];
  } else {
    return [[DBTEAMExcludedUsersListContinueError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMExcludedUsersListError.h"

#pragma mark - API Object

@implementation DBTEAMExcludedUsersListError

#pragma mark - Constructors

- (instancetype)initWithListError {
  self = [super init];
  if (self) {
    _tag = DBTEAMExcludedUsersListErrorListError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMExcludedUsersListErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isListError {
  return _tag == DBTEAMExcludedUsersListErrorListError;
}

- (BOOL)isOther {
  return _tag == DBTEAMExcludedUsersListErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMExcludedUsersListErrorListError:
    return @"DBTEAMExcludedUsersListErrorListError";
  case DBTEAMExcludedUsersListErrorOther:
    return @"DBTEAMExcludedUsersListErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMExcludedUsersListErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMExcludedUsersListErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMExcludedUsersListErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMExcludedUsersListErrorListError:
    result = prime * result + [[self tagName] hash];
  case DBTEAMExcludedUsersListErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExcludedUsersListError:other];
}

- (BOOL)isEqualToExcludedUsersListError:(DBTEAMExcludedUsersListError *)anExcludedUsersListError {
  if (self == anExcludedUsersListError) {
    return YES;
  }
  if (self.tag != anExcludedUsersListError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMExcludedUsersListErrorListError:
    return [[self tagName] isEqual:[anExcludedUsersListError tagName]];
  case DBTEAMExcludedUsersListErrorOther:
    return [[self tagName] isEqual:[anExcludedUsersListError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMExcludedUsersListErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMExcludedUsersListError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isListError]) {
    jsonDict[@".tag"] = @"list_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMExcludedUsersListError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"list_error"]) {
    return [[DBTEAMExcludedUsersListError alloc] initWithListError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMExcludedUsersListError alloc] initWithOther];
  } else {
    return [[DBTEAMExcludedUsersListError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMExcludedUsersListResult.h"
#import "DBTEAMMemberProfile.h"

#pragma mark - API Object

@implementation DBTEAMExcludedUsersListResult

#pragma mark - Constructors

- (instancetype)initWithUsers:(NSArray<DBTEAMMemberProfile *> *)users
                      hasMore:(NSNumber *)hasMore
                       cursor:(NSString *)cursor {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](users);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _users = users;
    _cursor = cursor;
    _hasMore = hasMore;
  }
  return self;
}

- (instancetype)initWithUsers:(NSArray<DBTEAMMemberProfile *> *)users hasMore:(NSNumber *)hasMore {
  return [self initWithUsers:users hasMore:hasMore cursor:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMExcludedUsersListResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMExcludedUsersListResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMExcludedUsersListResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.users hash];
  result = prime * result + [self.hasMore hash];
  if (self.cursor != nil) {
    result = prime * result + [self.cursor hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExcludedUsersListResult:other];
}

- (BOOL)isEqualToExcludedUsersListResult:(DBTEAMExcludedUsersListResult *)anExcludedUsersListResult {
  if (self == anExcludedUsersListResult) {
    return YES;
  }
  if (![self.users isEqual:anExcludedUsersListResult.users]) {
    return NO;
  }
  if (![self.hasMore isEqual:anExcludedUsersListResult.hasMore]) {
    return NO;
  }
  if (self.cursor) {
    if (![self.cursor isEqual:anExcludedUsersListResult.cursor]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMExcludedUsersListResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMExcludedUsersListResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"users"] = [DBArraySerializer serialize:valueObj.users
                                          withBlock:^id(id elem0) {
                                            return [DBTEAMMemberProfileSerializer serialize:elem0];
                                          }];
  jsonDict[@"has_more"] = valueObj.hasMore;
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMExcludedUsersListResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMMemberProfile *> *users =
      [DBArraySerializer deserialize:valueDict[@"users"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMMemberProfileSerializer deserialize:elem0];
                           }];
  NSNumber *hasMore = valueDict[@"has_more"];
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBTEAMExcludedUsersListResult alloc] initWithUsers:users hasMore:hasMore cursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMExcludedUsersUpdateArg.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMExcludedUsersUpdateArg

#pragma mark - Constructors

- (instancetype)initWithUsers:(NSArray<DBTEAMUserSelectorArg *> *)users {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](users);

  self = [super init];
  if (self) {
    _users = users;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithUsers:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMExcludedUsersUpdateArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMExcludedUsersUpdateArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMExcludedUsersUpdateArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.users != nil) {
    result = prime * result + [self.users hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExcludedUsersUpdateArg:other];
}

- (BOOL)isEqualToExcludedUsersUpdateArg:(DBTEAMExcludedUsersUpdateArg *)anExcludedUsersUpdateArg {
  if (self == anExcludedUsersUpdateArg) {
    return YES;
  }
  if (self.users) {
    if (![self.users isEqual:anExcludedUsersUpdateArg.users]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMExcludedUsersUpdateArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMExcludedUsersUpdateArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.users) {
    jsonDict[@"users"] = [DBArraySerializer serialize:valueObj.users
                                            withBlock:^id(id elem0) {
                                              return [DBTEAMUserSelectorArgSerializer serialize:elem0];
                                            }];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMExcludedUsersUpdateArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMUserSelectorArg *> *users =
      valueDict[@"users"] ? [DBArraySerializer deserialize:valueDict[@"users"]
                                                 withBlock:^id(id elem0) {
                                                   return [DBTEAMUserSelectorArgSerializer deserialize:elem0];
                                                 }]
                          : nil;

  return [[DBTEAMExcludedUsersUpdateArg alloc] initWithUsers:users];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMExcludedUsersUpdateError.h"

#pragma mark - API Object

@implementation DBTEAMExcludedUsersUpdateError

#pragma mark - Constructors

- (instancetype)initWithUsersNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMExcludedUsersUpdateErrorUsersNotInTeam;
  }
  return self;
}

- (instancetype)initWithTooManyUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMExcludedUsersUpdateErrorTooManyUsers;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMExcludedUsersUpdateErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUsersNotInTeam {
  return _tag == DBTEAMExcludedUsersUpdateErrorUsersNotInTeam;
}

- (BOOL)isTooManyUsers {
  return _tag == DBTEAMExcludedUsersUpdateErrorTooManyUsers;
}

- (BOOL)isOther {
  return _tag == DBTEAMExcludedUsersUpdateErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMExcludedUsersUpdateErrorUsersNotInTeam:
    return @"DBTEAMExcludedUsersUpdateErrorUsersNotInTeam";
  case DBTEAMExcludedUsersUpdateErrorTooManyUsers:
    return @"DBTEAMExcludedUsersUpdateErrorTooManyUsers";
  case DBTEAMExcludedUsersUpdateErrorOther:
    return @"DBTEAMExcludedUsersUpdateErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMExcludedUsersUpdateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMExcludedUsersUpdateErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMExcludedUsersUpdateErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMExcludedUsersUpdateErrorUsersNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMExcludedUsersUpdateErrorTooManyUsers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMExcludedUsersUpdateErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExcludedUsersUpdateError:other];
}

- (BOOL)isEqualToExcludedUsersUpdateError:(DBTEAMExcludedUsersUpdateError *)anExcludedUsersUpdateError {
  if (self == anExcludedUsersUpdateError) {
    return YES;
  }
  if (self.tag != anExcludedUsersUpdateError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMExcludedUsersUpdateErrorUsersNotInTeam:
    return [[self tagName] isEqual:[anExcludedUsersUpdateError tagName]];
  case DBTEAMExcludedUsersUpdateErrorTooManyUsers:
    return [[self tagName] isEqual:[anExcludedUsersUpdateError tagName]];
  case DBTEAMExcludedUsersUpdateErrorOther:
    return [[self tagName] isEqual:[anExcludedUsersUpdateError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMExcludedUsersUpdateErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMExcludedUsersUpdateError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUsersNotInTeam]) {
    jsonDict[@".tag"] = @"users_not_in_team";
  } else if ([valueObj isTooManyUsers]) {
    jsonDict[@".tag"] = @"too_many_users";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMExcludedUsersUpdateError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"users_not_in_team"]) {
    return [[DBTEAMExcludedUsersUpdateError alloc] initWithUsersNotInTeam];
  } else if ([tag isEqualToString:@"too_many_users"]) {
    return [[DBTEAMExcludedUsersUpdateError alloc] initWithTooManyUsers];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMExcludedUsersUpdateError alloc] initWithOther];
  } else {
    return [[DBTEAMExcludedUsersUpdateError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMExcludedUsersUpdateResult.h"
#import "DBTEAMExcludedUsersUpdateStatus.h"

#pragma mark - API Object

@implementation DBTEAMExcludedUsersUpdateResult

#pragma mark - Constructors

- (instancetype)initWithStatus:(DBTEAMExcludedUsersUpdateStatus *)status {
  [DBStoneValidators nonnullValidator:nil](status);

  self = [super init];
  if (self) {
    _status = status;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMExcludedUsersUpdateResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMExcludedUsersUpdateResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMExcludedUsersUpdateResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.status hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExcludedUsersUpdateResult:other];
}

- (BOOL)isEqualToExcludedUsersUpdateResult:(DBTEAMExcludedUsersUpdateResult *)anExcludedUsersUpdateResult {
  if (self == anExcludedUsersUpdateResult) {
    return YES;
  }
  if (![self.status isEqual:anExcludedUsersUpdateResult.status]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMExcludedUsersUpdateResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMExcludedUsersUpdateResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"status"] = [DBTEAMExcludedUsersUpdateStatusSerializer serialize:valueObj.status];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMExcludedUsersUpdateResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMExcludedUsersUpdateStatus *status =
      [DBTEAMExcludedUsersUpdateStatusSerializer deserialize:valueDict[@"status"]];

  return [[DBTEAMExcludedUsersUpdateResult alloc] initWithStatus:status];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMExcludedUsersUpdateStatus.h"

#pragma mark - API Object

@implementation DBTEAMExcludedUsersUpdateStatus

#pragma mark - Constructors

- (instancetype)initWithSuccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMExcludedUsersUpdateStatusSuccess;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMExcludedUsersUpdateStatusOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isSuccess {
  return _tag == DBTEAMExcludedUsersUpdateStatusSuccess;
}

- (BOOL)isOther {
  return _tag == DBTEAMExcludedUsersUpdateStatusOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMExcludedUsersUpdateStatusSuccess:
    return @"DBTEAMExcludedUsersUpdateStatusSuccess";
  case DBTEAMExcludedUsersUpdateStatusOther:
    return @"DBTEAMExcludedUsersUpdateStatusOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMExcludedUsersUpdateStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMExcludedUsersUpdateStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMExcludedUsersUpdateStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMExcludedUsersUpdateStatusSuccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMExcludedUsersUpdateStatusOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExcludedUsersUpdateStatus:other];
}

- (BOOL)isEqualToExcludedUsersUpdateStatus:(DBTEAMExcludedUsersUpdateStatus *)anExcludedUsersUpdateStatus {
  if (self == anExcludedUsersUpdateStatus) {
    return YES;
  }
  if (self.tag != anExcludedUsersUpdateStatus.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMExcludedUsersUpdateStatusSuccess:
    return [[self tagName] isEqual:[anExcludedUsersUpdateStatus tagName]];
  case DBTEAMExcludedUsersUpdateStatusOther:
    return [[self tagName] isEqual:[anExcludedUsersUpdateStatus tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMExcludedUsersUpdateStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMExcludedUsersUpdateStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSuccess]) {
    jsonDict[@".tag"] = @"success";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMExcludedUsersUpdateStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"success"]) {
    return [[DBTEAMExcludedUsersUpdateStatus alloc] initWithSuccess];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMExcludedUsersUpdateStatus alloc] initWithOther];
  } else {
    return [[DBTEAMExcludedUsersUpdateStatus alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMFeature.h"

#pragma mark - API Object

@implementation DBTEAMFeature

#pragma mark - Constructors

- (instancetype)initWithUploadApiRateLimit {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeatureUploadApiRateLimit;
  }
  return self;
}

- (instancetype)initWithHasTeamSharedDropbox {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeatureHasTeamSharedDropbox;
  }
  return self;
}

- (instancetype)initWithHasTeamFileEvents {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeatureHasTeamFileEvents;
  }
  return self;
}

- (instancetype)initWithHasTeamSelectiveSync {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeatureHasTeamSelectiveSync;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeatureOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUploadApiRateLimit {
  return _tag == DBTEAMFeatureUploadApiRateLimit;
}

- (BOOL)isHasTeamSharedDropbox {
  return _tag == DBTEAMFeatureHasTeamSharedDropbox;
}

- (BOOL)isHasTeamFileEvents {
  return _tag == DBTEAMFeatureHasTeamFileEvents;
}

- (BOOL)isHasTeamSelectiveSync {
  return _tag == DBTEAMFeatureHasTeamSelectiveSync;
}

- (BOOL)isOther {
  return _tag == DBTEAMFeatureOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMFeatureUploadApiRateLimit:
    return @"DBTEAMFeatureUploadApiRateLimit";
  case DBTEAMFeatureHasTeamSharedDropbox:
    return @"DBTEAMFeatureHasTeamSharedDropbox";
  case DBTEAMFeatureHasTeamFileEvents:
    return @"DBTEAMFeatureHasTeamFileEvents";
  case DBTEAMFeatureHasTeamSelectiveSync:
    return @"DBTEAMFeatureHasTeamSelectiveSync";
  case DBTEAMFeatureOther:
    return @"DBTEAMFeatureOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMFeatureSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMFeatureSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMFeatureSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMFeatureUploadApiRateLimit:
    result = prime * result + [[self tagName] hash];
  case DBTEAMFeatureHasTeamSharedDropbox:
    result = prime * result + [[self tagName] hash];
  case DBTEAMFeatureHasTeamFileEvents:
    result = prime * result + [[self tagName] hash];
  case DBTEAMFeatureHasTeamSelectiveSync:
    result = prime * result + [[self tagName] hash];
  case DBTEAMFeatureOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFeature:other];
}

- (BOOL)isEqualToFeature:(DBTEAMFeature *)aFeature {
  if (self == aFeature) {
    return YES;
  }
  if (self.tag != aFeature.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMFeatureUploadApiRateLimit:
    return [[self tagName] isEqual:[aFeature tagName]];
  case DBTEAMFeatureHasTeamSharedDropbox:
    return [[self tagName] isEqual:[aFeature tagName]];
  case DBTEAMFeatureHasTeamFileEvents:
    return [[self tagName] isEqual:[aFeature tagName]];
  case DBTEAMFeatureHasTeamSelectiveSync:
    return [[self tagName] isEqual:[aFeature tagName]];
  case DBTEAMFeatureOther:
    return [[self tagName] isEqual:[aFeature tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMFeatureSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMFeature *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUploadApiRateLimit]) {
    jsonDict[@".tag"] = @"upload_api_rate_limit";
  } else if ([valueObj isHasTeamSharedDropbox]) {
    jsonDict[@".tag"] = @"has_team_shared_dropbox";
  } else if ([valueObj isHasTeamFileEvents]) {
    jsonDict[@".tag"] = @"has_team_file_events";
  } else if ([valueObj isHasTeamSelectiveSync]) {
    jsonDict[@".tag"] = @"has_team_selective_sync";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMFeature *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"upload_api_rate_limit"]) {
    return [[DBTEAMFeature alloc] initWithUploadApiRateLimit];
  } else if ([tag isEqualToString:@"has_team_shared_dropbox"]) {
    return [[DBTEAMFeature alloc] initWithHasTeamSharedDropbox];
  } else if ([tag isEqualToString:@"has_team_file_events"]) {
    return [[DBTEAMFeature alloc] initWithHasTeamFileEvents];
  } else if ([tag isEqualToString:@"has_team_selective_sync"]) {
    return [[DBTEAMFeature alloc] initWithHasTeamSelectiveSync];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMFeature alloc] initWithOther];
  } else {
    return [[DBTEAMFeature alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMFeatureValue.h"
#import "DBTEAMHasTeamFileEventsValue.h"
#import "DBTEAMHasTeamSelectiveSyncValue.h"
#import "DBTEAMHasTeamSharedDropboxValue.h"
#import "DBTEAMUploadApiRateLimitValue.h"

#pragma mark - API Object

@implementation DBTEAMFeatureValue

@synthesize uploadApiRateLimit = _uploadApiRateLimit;
@synthesize hasTeamSharedDropbox = _hasTeamSharedDropbox;
@synthesize hasTeamFileEvents = _hasTeamFileEvents;
@synthesize hasTeamSelectiveSync = _hasTeamSelectiveSync;

#pragma mark - Constructors

- (instancetype)initWithUploadApiRateLimit:(DBTEAMUploadApiRateLimitValue *)uploadApiRateLimit {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeatureValueUploadApiRateLimit;
    _uploadApiRateLimit = uploadApiRateLimit;
  }
  return self;
}

- (instancetype)initWithHasTeamSharedDropbox:(DBTEAMHasTeamSharedDropboxValue *)hasTeamSharedDropbox {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeatureValueHasTeamSharedDropbox;
    _hasTeamSharedDropbox = hasTeamSharedDropbox;
  }
  return self;
}

- (instancetype)initWithHasTeamFileEvents:(DBTEAMHasTeamFileEventsValue *)hasTeamFileEvents {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeatureValueHasTeamFileEvents;
    _hasTeamFileEvents = hasTeamFileEvents;
  }
  return self;
}

- (instancetype)initWithHasTeamSelectiveSync:(DBTEAMHasTeamSelectiveSyncValue *)hasTeamSelectiveSync {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeatureValueHasTeamSelectiveSync;
    _hasTeamSelectiveSync = hasTeamSelectiveSync;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeatureValueOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMUploadApiRateLimitValue *)uploadApiRateLimit {
  if (![self isUploadApiRateLimit]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMFeatureValueUploadApiRateLimit, but was %@.", [self tagName]];
  }
  return _uploadApiRateLimit;
}

- (DBTEAMHasTeamSharedDropboxValue *)hasTeamSharedDropbox {
  if (![self isHasTeamSharedDropbox]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMFeatureValueHasTeamSharedDropbox, but was %@.", [self tagName]];
  }
  return _hasTeamSharedDropbox;
}

- (DBTEAMHasTeamFileEventsValue *)hasTeamFileEvents {
  if (![self isHasTeamFileEvents]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMFeatureValueHasTeamFileEvents, but was %@.", [self tagName]];
  }
  return _hasTeamFileEvents;
}

- (DBTEAMHasTeamSelectiveSyncValue *)hasTeamSelectiveSync {
  if (![self isHasTeamSelectiveSync]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMFeatureValueHasTeamSelectiveSync, but was %@.", [self tagName]];
  }
  return _hasTeamSelectiveSync;
}

#pragma mark - Tag state methods

- (BOOL)isUploadApiRateLimit {
  return _tag == DBTEAMFeatureValueUploadApiRateLimit;
}

- (BOOL)isHasTeamSharedDropbox {
  return _tag == DBTEAMFeatureValueHasTeamSharedDropbox;
}

- (BOOL)isHasTeamFileEvents {
  return _tag == DBTEAMFeatureValueHasTeamFileEvents;
}

- (BOOL)isHasTeamSelectiveSync {
  return _tag == DBTEAMFeatureValueHasTeamSelectiveSync;
}

- (BOOL)isOther {
  return _tag == DBTEAMFeatureValueOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMFeatureValueUploadApiRateLimit:
    return @"DBTEAMFeatureValueUploadApiRateLimit";
  case DBTEAMFeatureValueHasTeamSharedDropbox:
    return @"DBTEAMFeatureValueHasTeamSharedDropbox";
  case DBTEAMFeatureValueHasTeamFileEvents:
    return @"DBTEAMFeatureValueHasTeamFileEvents";
  case DBTEAMFeatureValueHasTeamSelectiveSync:
    return @"DBTEAMFeatureValueHasTeamSelectiveSync";
  case DBTEAMFeatureValueOther:
    return @"DBTEAMFeatureValueOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMFeatureValueSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMFeatureValueSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMFeatureValueSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMFeatureValueUploadApiRateLimit:
    result = prime * result + [self.uploadApiRateLimit hash];
  case DBTEAMFeatureValueHasTeamSharedDropbox:
    result = prime * result + [self.hasTeamSharedDropbox hash];
  case DBTEAMFeatureValueHasTeamFileEvents:
    result = prime * result + [self.hasTeamFileEvents hash];
  case DBTEAMFeatureValueHasTeamSelectiveSync:
    result = prime * result + [self.hasTeamSelectiveSync hash];
  case DBTEAMFeatureValueOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFeatureValue:other];
}

- (BOOL)isEqualToFeatureValue:(DBTEAMFeatureValue *)aFeatureValue {
  if (self == aFeatureValue) {
    return YES;
  }
  if (self.tag != aFeatureValue.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMFeatureValueUploadApiRateLimit:
    return [self.uploadApiRateLimit isEqual:aFeatureValue.uploadApiRateLimit];
  case DBTEAMFeatureValueHasTeamSharedDropbox:
    return [self.hasTeamSharedDropbox isEqual:aFeatureValue.hasTeamSharedDropbox];
  case DBTEAMFeatureValueHasTeamFileEvents:
    return [self.hasTeamFileEvents isEqual:aFeatureValue.hasTeamFileEvents];
  case DBTEAMFeatureValueHasTeamSelectiveSync:
    return [self.hasTeamSelectiveSync isEqual:aFeatureValue.hasTeamSelectiveSync];
  case DBTEAMFeatureValueOther:
    return [[self tagName] isEqual:[aFeatureValue tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMFeatureValueSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMFeatureValue *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUploadApiRateLimit]) {
    jsonDict[@"upload_api_rate_limit"] =
        [[DBTEAMUploadApiRateLimitValueSerializer serialize:valueObj.uploadApiRateLimit] mutableCopy];
    jsonDict[@".tag"] = @"upload_api_rate_limit";
  } else if ([valueObj isHasTeamSharedDropbox]) {
    jsonDict[@"has_team_shared_dropbox"] =
        [[DBTEAMHasTeamSharedDropboxValueSerializer serialize:valueObj.hasTeamSharedDropbox] mutableCopy];
    jsonDict[@".tag"] = @"has_team_shared_dropbox";
  } else if ([valueObj isHasTeamFileEvents]) {
    jsonDict[@"has_team_file_events"] =
        [[DBTEAMHasTeamFileEventsValueSerializer serialize:valueObj.hasTeamFileEvents] mutableCopy];
    jsonDict[@".tag"] = @"has_team_file_events";
  } else if ([valueObj isHasTeamSelectiveSync]) {
    jsonDict[@"has_team_selective_sync"] =
        [[DBTEAMHasTeamSelectiveSyncValueSerializer serialize:valueObj.hasTeamSelectiveSync] mutableCopy];
    jsonDict[@".tag"] = @"has_team_selective_sync";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMFeatureValue *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"upload_api_rate_limit"]) {
    DBTEAMUploadApiRateLimitValue *uploadApiRateLimit =
        [DBTEAMUploadApiRateLimitValueSerializer deserialize:valueDict[@"upload_api_rate_limit"]];
    return [[DBTEAMFeatureValue alloc] initWithUploadApiRateLimit:uploadApiRateLimit];
  } else if ([tag isEqualToString:@"has_team_shared_dropbox"]) {
    DBTEAMHasTeamSharedDropboxValue *hasTeamSharedDropbox =
        [DBTEAMHasTeamSharedDropboxValueSerializer deserialize:valueDict[@"has_team_shared_dropbox"]];
    return [[DBTEAMFeatureValue alloc] initWithHasTeamSharedDropbox:hasTeamSharedDropbox];
  } else if ([tag isEqualToString:@"has_team_file_events"]) {
    DBTEAMHasTeamFileEventsValue *hasTeamFileEvents =
        [DBTEAMHasTeamFileEventsValueSerializer deserialize:valueDict[@"has_team_file_events"]];
    return [[DBTEAMFeatureValue alloc] initWithHasTeamFileEvents:hasTeamFileEvents];
  } else if ([tag isEqualToString:@"has_team_selective_sync"]) {
    DBTEAMHasTeamSelectiveSyncValue *hasTeamSelectiveSync =
        [DBTEAMHasTeamSelectiveSyncValueSerializer deserialize:valueDict[@"has_team_selective_sync"]];
    return [[DBTEAMFeatureValue alloc] initWithHasTeamSelectiveSync:hasTeamSelectiveSync];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMFeatureValue alloc] initWithOther];
  } else {
    return [[DBTEAMFeatureValue alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMFeature.h"
#import "DBTEAMFeaturesGetValuesBatchArg.h"

#pragma mark - API Object

@implementation DBTEAMFeaturesGetValuesBatchArg

#pragma mark - Constructors

- (instancetype)initWithFeatures:(NSArray<DBTEAMFeature *> *)features {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](features);

  self = [super init];
  if (self) {
    _features = features;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMFeaturesGetValuesBatchArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMFeaturesGetValuesBatchArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMFeaturesGetValuesBatchArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.features hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFeaturesGetValuesBatchArg:other];
}

- (BOOL)isEqualToFeaturesGetValuesBatchArg:(DBTEAMFeaturesGetValuesBatchArg *)aFeaturesGetValuesBatchArg {
  if (self == aFeaturesGetValuesBatchArg) {
    return YES;
  }
  if (![self.features isEqual:aFeaturesGetValuesBatchArg.features]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMFeaturesGetValuesBatchArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMFeaturesGetValuesBatchArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"features"] = [DBArraySerializer serialize:valueObj.features
                                             withBlock:^id(id elem0) {
                                               return [DBTEAMFeatureSerializer serialize:elem0];
                                             }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMFeaturesGetValuesBatchArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMFeature *> *features = [DBArraySerializer deserialize:valueDict[@"features"]
                                                            withBlock:^id(id elem0) {
                                                              return [DBTEAMFeatureSerializer deserialize:elem0];
                                                            }];

  return [[DBTEAMFeaturesGetValuesBatchArg alloc] initWithFeatures:features];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMFeaturesGetValuesBatchError.h"

#pragma mark - API Object

@implementation DBTEAMFeaturesGetValuesBatchError

#pragma mark - Constructors

- (instancetype)initWithEmptyFeaturesList {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeaturesGetValuesBatchErrorEmptyFeaturesList;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMFeaturesGetValuesBatchErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isEmptyFeaturesList {
  return _tag == DBTEAMFeaturesGetValuesBatchErrorEmptyFeaturesList;
}

- (BOOL)isOther {
  return _tag == DBTEAMFeaturesGetValuesBatchErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMFeaturesGetValuesBatchErrorEmptyFeaturesList:
    return @"DBTEAMFeaturesGetValuesBatchErrorEmptyFeaturesList";
  case DBTEAMFeaturesGetValuesBatchErrorOther:
    return @"DBTEAMFeaturesGetValuesBatchErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMFeaturesGetValuesBatchErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMFeaturesGetValuesBatchErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMFeaturesGetValuesBatchErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMFeaturesGetValuesBatchErrorEmptyFeaturesList:
    result = prime * result + [[self tagName] hash];
  case DBTEAMFeaturesGetValuesBatchErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFeaturesGetValuesBatchError:other];
}

- (BOOL)isEqualToFeaturesGetValuesBatchError:(DBTEAMFeaturesGetValuesBatchError *)aFeaturesGetValuesBatchError {
  if (self == aFeaturesGetValuesBatchError) {
    return YES;
  }
  if (self.tag != aFeaturesGetValuesBatchError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMFeaturesGetValuesBatchErrorEmptyFeaturesList:
    return [[self tagName] isEqual:[aFeaturesGetValuesBatchError tagName]];
  case DBTEAMFeaturesGetValuesBatchErrorOther:
    return [[self tagName] isEqual:[aFeaturesGetValuesBatchError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMFeaturesGetValuesBatchErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMFeaturesGetValuesBatchError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEmptyFeaturesList]) {
    jsonDict[@".tag"] = @"empty_features_list";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMFeaturesGetValuesBatchError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"empty_features_list"]) {
    return [[DBTEAMFeaturesGetValuesBatchError alloc] initWithEmptyFeaturesList];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMFeaturesGetValuesBatchError alloc] initWithOther];
  } else {
    return [[DBTEAMFeaturesGetValuesBatchError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMFeatureValue.h"
#import "DBTEAMFeaturesGetValuesBatchResult.h"

#pragma mark - API Object

@implementation DBTEAMFeaturesGetValuesBatchResult

#pragma mark - Constructors

- (instancetype)initWithValues:(NSArray<DBTEAMFeatureValue *> *)values {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](values);

  self = [super init];
  if (self) {
    _values = values;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMFeaturesGetValuesBatchResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMFeaturesGetValuesBatchResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMFeaturesGetValuesBatchResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.values hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFeaturesGetValuesBatchResult:other];
}

- (BOOL)isEqualToFeaturesGetValuesBatchResult:(DBTEAMFeaturesGetValuesBatchResult *)aFeaturesGetValuesBatchResult {
  if (self == aFeaturesGetValuesBatchResult) {
    return YES;
  }
  if (![self.values isEqual:aFeaturesGetValuesBatchResult.values]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMFeaturesGetValuesBatchResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMFeaturesGetValuesBatchResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"values"] = [DBArraySerializer serialize:valueObj.values
                                           withBlock:^id(id elem0) {
                                             return [DBTEAMFeatureValueSerializer serialize:elem0];
                                           }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMFeaturesGetValuesBatchResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMFeatureValue *> *values =
      [DBArraySerializer deserialize:valueDict[@"values"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMFeatureValueSerializer deserialize:elem0];
                           }];

  return [[DBTEAMFeaturesGetValuesBatchResult alloc] initWithValues:values];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseDfbReport.h"
#import "DBTEAMGetActivityReport.h"

#pragma mark - API Object

@implementation DBTEAMGetActivityReport

#pragma mark - Constructors

- (instancetype)initWithStartDate:(NSString *)startDate
                              adds:(NSArray<NSNumber *> *)adds
                             edits:(NSArray<NSNumber *> *)edits
                           deletes:(NSArray<NSNumber *> *)deletes
                  activeUsers28Day:(NSArray<NSNumber *> *)activeUsers28Day
                   activeUsers7Day:(NSArray<NSNumber *> *)activeUsers7Day
                   activeUsers1Day:(NSArray<NSNumber *> *)activeUsers1Day
          activeSharedFolders28Day:(NSArray<NSNumber *> *)activeSharedFolders28Day
           activeSharedFolders7Day:(NSArray<NSNumber *> *)activeSharedFolders7Day
           activeSharedFolders1Day:(NSArray<NSNumber *> *)activeSharedFolders1Day
                sharedLinksCreated:(NSArray<NSNumber *> *)sharedLinksCreated
           sharedLinksViewedByTeam:(NSArray<NSNumber *> *)sharedLinksViewedByTeam
    sharedLinksViewedByOutsideUser:(NSArray<NSNumber *> *)sharedLinksViewedByOutsideUser
    sharedLinksViewedByNotLoggedIn:(NSArray<NSNumber *> *)sharedLinksViewedByNotLoggedIn
            sharedLinksViewedTotal:(NSArray<NSNumber *> *)sharedLinksViewedTotal {
  [DBStoneValidators nonnullValidator:nil](startDate);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](adds);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](edits);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](deletes);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](activeUsers28Day);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](activeUsers7Day);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](activeUsers1Day);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](activeSharedFolders28Day);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](activeSharedFolders7Day);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](activeSharedFolders1Day);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](sharedLinksCreated);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](sharedLinksViewedByTeam);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](
      sharedLinksViewedByOutsideUser);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](
      sharedLinksViewedByNotLoggedIn);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](sharedLinksViewedTotal);

  self = [super initWithStartDate:startDate];
  if (self) {
    _adds = adds;
    _edits = edits;
    _deletes = deletes;
    _activeUsers28Day = activeUsers28Day;
    _activeUsers7Day = activeUsers7Day;
    _activeUsers1Day = activeUsers1Day;
    _activeSharedFolders28Day = activeSharedFolders28Day;
    _activeSharedFolders7Day = activeSharedFolders7Day;
    _activeSharedFolders1Day = activeSharedFolders1Day;
    _sharedLinksCreated = sharedLinksCreated;
    _sharedLinksViewedByTeam = sharedLinksViewedByTeam;
    _sharedLinksViewedByOutsideUser = sharedLinksViewedByOutsideUser;
    _sharedLinksViewedByNotLoggedIn = sharedLinksViewedByNotLoggedIn;
    _sharedLinksViewedTotal = sharedLinksViewedTotal;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGetActivityReportSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGetActivityReportSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGetActivityReportSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.startDate hash];
  result = prime * result + [self.adds hash];
  result = prime * result + [self.edits hash];
  result = prime * result + [self.deletes hash];
  result = prime * result + [self.activeUsers28Day hash];
  result = prime * result + [self.activeUsers7Day hash];
  result = prime * result + [self.activeUsers1Day hash];
  result = prime * result + [self.activeSharedFolders28Day hash];
  result = prime * result + [self.activeSharedFolders7Day hash];
  result = prime * result + [self.activeSharedFolders1Day hash];
  result = prime * result + [self.sharedLinksCreated hash];
  result = prime * result + [self.sharedLinksViewedByTeam hash];
  result = prime * result + [self.sharedLinksViewedByOutsideUser hash];
  result = prime * result + [self.sharedLinksViewedByNotLoggedIn hash];
  result = prime * result + [self.sharedLinksViewedTotal hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetActivityReport:other];
}

- (BOOL)isEqualToGetActivityReport:(DBTEAMGetActivityReport *)aGetActivityReport {
  if (self == aGetActivityReport) {
    return YES;
  }
  if (![self.startDate isEqual:aGetActivityReport.startDate]) {
    return NO;
  }
  if (![self.adds isEqual:aGetActivityReport.adds]) {
    return NO;
  }
  if (![self.edits isEqual:aGetActivityReport.edits]) {
    return NO;
  }
  if (![self.deletes isEqual:aGetActivityReport.deletes]) {
    return NO;
  }
  if (![self.activeUsers28Day isEqual:aGetActivityReport.activeUsers28Day]) {
    return NO;
  }
  if (![self.activeUsers7Day isEqual:aGetActivityReport.activeUsers7Day]) {
    return NO;
  }
  if (![self.activeUsers1Day isEqual:aGetActivityReport.activeUsers1Day]) {
    return NO;
  }
  if (![self.activeSharedFolders28Day isEqual:aGetActivityReport.activeSharedFolders28Day]) {
    return NO;
  }
  if (![self.activeSharedFolders7Day isEqual:aGetActivityReport.activeSharedFolders7Day]) {
    return NO;
  }
  if (![self.activeSharedFolders1Day isEqual:aGetActivityReport.activeSharedFolders1Day]) {
    return NO;
  }
  if (![self.sharedLinksCreated isEqual:aGetActivityReport.sharedLinksCreated]) {
    return NO;
  }
  if (![self.sharedLinksViewedByTeam isEqual:aGetActivityReport.sharedLinksViewedByTeam]) {
    return NO;
  }
  if (![self.sharedLinksViewedByOutsideUser isEqual:aGetActivityReport.sharedLinksViewedByOutsideUser]) {
    return NO;
  }
  if (![self.sharedLinksViewedByNotLoggedIn isEqual:aGetActivityReport.sharedLinksViewedByNotLoggedIn]) {
    return NO;
  }
  if (![self.sharedLinksViewedTotal isEqual:aGetActivityReport.sharedLinksViewedTotal]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGetActivityReportSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGetActivityReport *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"start_date"] = valueObj.startDate;
  jsonDict[@"adds"] = [DBArraySerializer serialize:valueObj.adds
                                         withBlock:^id(id elem0) {
                                           return elem0;
                                         }];
  jsonDict[@"edits"] = [DBArraySerializer serialize:valueObj.edits
                                          withBlock:^id(id elem0) {
                                            return elem0;
                                          }];
  jsonDict[@"deletes"] = [DBArraySerializer serialize:valueObj.deletes
                                            withBlock:^id(id elem0) {
                                              return elem0;
                                            }];
  jsonDict[@"active_users_28_day"] = [DBArraySerializer serialize:valueObj.activeUsers28Day
                                                        withBlock:^id(id elem0) {
                                                          return elem0;
                                                        }];
  jsonDict[@"active_users_7_day"] = [DBArraySerializer serialize:valueObj.activeUsers7Day
                                                       withBlock:^id(id elem0) {
                                                         return elem0;
                                                       }];
  jsonDict[@"active_users_1_day"] = [DBArraySerializer serialize:valueObj.activeUsers1Day
                                                       withBlock:^id(id elem0) {
                                                         return elem0;
                                                       }];
  jsonDict[@"active_shared_folders_28_day"] = [DBArraySerializer serialize:valueObj.activeSharedFolders28Day
                                                                 withBlock:^id(id elem0) {
                                                                   return elem0;
                                                                 }];
  jsonDict[@"active_shared_folders_7_day"] = [DBArraySerializer serialize:valueObj.activeSharedFolders7Day
                                                                withBlock:^id(id elem0) {
                                                                  return elem0;
                                                                }];
  jsonDict[@"active_shared_folders_1_day"] = [DBArraySerializer serialize:valueObj.activeSharedFolders1Day
                                                                withBlock:^id(id elem0) {
                                                                  return elem0;
                                                                }];
  jsonDict[@"shared_links_created"] = [DBArraySerializer serialize:valueObj.sharedLinksCreated
                                                         withBlock:^id(id elem0) {
                                                           return elem0;
                                                         }];
  jsonDict[@"shared_links_viewed_by_team"] = [DBArraySerializer serialize:valueObj.sharedLinksViewedByTeam
                                                                withBlock:^id(id elem0) {
                                                                  return elem0;
                                                                }];
  jsonDict[@"shared_links_viewed_by_outside_user"] =
      [DBArraySerializer serialize:valueObj.sharedLinksViewedByOutsideUser
                         withBlock:^id(id elem0) {
                           return elem0;
                         }];
  jsonDict[@"shared_links_viewed_by_not_logged_in"] =
      [DBArraySerializer serialize:valueObj.sharedLinksViewedByNotLoggedIn
                         withBlock:^id(id elem0) {
                           return elem0;
                         }];
  jsonDict[@"shared_links_viewed_total"] = [DBArraySerializer serialize:valueObj.sharedLinksViewedTotal
                                                              withBlock:^id(id elem0) {
                                                                return elem0;
                                                              }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGetActivityReport *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *startDate = valueDict[@"start_date"];
  NSArray<NSNumber *> *adds = [DBArraySerializer deserialize:valueDict[@"adds"]
                                                   withBlock:^id(id elem0) {
                                                     return elem0;
                                                   }];
  NSArray<NSNumber *> *edits = [DBArraySerializer deserialize:valueDict[@"edits"]
                                                    withBlock:^id(id elem0) {
                                                      return elem0;
                                                    }];
  NSArray<NSNumber *> *deletes = [DBArraySerializer deserialize:valueDict[@"deletes"]
                                                      withBlock:^id(id elem0) {
                                                        return elem0;
                                                      }];
  NSArray<NSNumber *> *activeUsers28Day = [DBArraySerializer deserialize:valueDict[@"active_users_28_day"]
                                                               withBlock:^id(id elem0) {
                                                                 return elem0;
                                                               }];
  NSArray<NSNumber *> *activeUsers7Day = [DBArraySerializer deserialize:valueDict[@"active_users_7_day"]
                                                              withBlock:^id(id elem0) {
                                                                return elem0;
                                                              }];
  NSArray<NSNumber *> *activeUsers1Day = [DBArraySerializer deserialize:valueDict[@"active_users_1_day"]
                                                              withBlock:^id(id elem0) {
                                                                return elem0;
                                                              }];
  NSArray<NSNumber *> *activeSharedFolders28Day =
      [DBArraySerializer deserialize:valueDict[@"active_shared_folders_28_day"]
                           withBlock:^id(id elem0) {
                             return elem0;
                           }];
  NSArray<NSNumber *> *activeSharedFolders7Day =
      [DBArraySerializer deserialize:valueDict[@"active_shared_folders_7_day"]
                           withBlock:^id(id elem0) {
                             return elem0;
                           }];
  NSArray<NSNumber *> *activeSharedFolders1Day =
      [DBArraySerializer deserialize:valueDict[@"active_shared_folders_1_day"]
                           withBlock:^id(id elem0) {
                             return elem0;
                           }];
  NSArray<NSNumber *> *sharedLinksCreated = [DBArraySerializer deserialize:valueDict[@"shared_links_created"]
                                                                 withBlock:^id(id elem0) {
                                                                   return elem0;
                                                                 }];
  NSArray<NSNumber *> *sharedLinksViewedByTeam =
      [DBArraySerializer deserialize:valueDict[@"shared_links_viewed_by_team"]
                           withBlock:^id(id elem0) {
                             return elem0;
                           }];
  NSArray<NSNumber *> *sharedLinksViewedByOutsideUser =
      [DBArraySerializer deserialize:valueDict[@"shared_links_viewed_by_outside_user"]
                           withBlock:^id(id elem0) {
                             return elem0;
                           }];
  NSArray<NSNumber *> *sharedLinksViewedByNotLoggedIn =
      [DBArraySerializer deserialize:valueDict[@"shared_links_viewed_by_not_logged_in"]
                           withBlock:^id(id elem0) {
                             return elem0;
                           }];
  NSArray<NSNumber *> *sharedLinksViewedTotal = [DBArraySerializer deserialize:valueDict[@"shared_links_viewed_total"]
                                                                     withBlock:^id(id elem0) {
                                                                       return elem0;
                                                                     }];

  return [[DBTEAMGetActivityReport alloc] initWithStartDate:startDate
                                                       adds:adds
                                                      edits:edits
                                                    deletes:deletes
                                           activeUsers28Day:activeUsers28Day
                                            activeUsers7Day:activeUsers7Day
                                            activeUsers1Day:activeUsers1Day
                                   activeSharedFolders28Day:activeSharedFolders28Day
                                    activeSharedFolders7Day:activeSharedFolders7Day
                                    activeSharedFolders1Day:activeSharedFolders1Day
                                         sharedLinksCreated:sharedLinksCreated
                                    sharedLinksViewedByTeam:sharedLinksViewedByTeam
                             sharedLinksViewedByOutsideUser:sharedLinksViewedByOutsideUser
                             sharedLinksViewedByNotLoggedIn:sharedLinksViewedByNotLoggedIn
                                     sharedLinksViewedTotal:sharedLinksViewedTotal];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseDfbReport.h"
#import "DBTEAMDevicesActive.h"
#import "DBTEAMGetDevicesReport.h"

#pragma mark - API Object

@implementation DBTEAMGetDevicesReport

#pragma mark - Constructors

- (instancetype)initWithStartDate:(NSString *)startDate
                       active1Day:(DBTEAMDevicesActive *)active1Day
                       active7Day:(DBTEAMDevicesActive *)active7Day
                      active28Day:(DBTEAMDevicesActive *)active28Day {
  [DBStoneValidators nonnullValidator:nil](startDate);
  [DBStoneValidators nonnullValidator:nil](active1Day);
  [DBStoneValidators nonnullValidator:nil](active7Day);
  [DBStoneValidators nonnullValidator:nil](active28Day);

  self = [super initWithStartDate:startDate];
  if (self) {
    _active1Day = active1Day;
    _active7Day = active7Day;
    _active28Day = active28Day;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGetDevicesReportSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGetDevicesReportSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGetDevicesReportSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.startDate hash];
  result = prime * result + [self.active1Day hash];
  result = prime * result + [self.active7Day hash];
  result = prime * result + [self.active28Day hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetDevicesReport:other];
}

- (BOOL)isEqualToGetDevicesReport:(DBTEAMGetDevicesReport *)aGetDevicesReport {
  if (self == aGetDevicesReport) {
    return YES;
  }
  if (![self.startDate isEqual:aGetDevicesReport.startDate]) {
    return NO;
  }
  if (![self.active1Day isEqual:aGetDevicesReport.active1Day]) {
    return NO;
  }
  if (![self.active7Day isEqual:aGetDevicesReport.active7Day]) {
    return NO;
  }
  if (![self.active28Day isEqual:aGetDevicesReport.active28Day]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGetDevicesReportSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGetDevicesReport *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"start_date"] = valueObj.startDate;
  jsonDict[@"active_1_day"] = [DBTEAMDevicesActiveSerializer serialize:valueObj.active1Day];
  jsonDict[@"active_7_day"] = [DBTEAMDevicesActiveSerializer serialize:valueObj.active7Day];
  jsonDict[@"active_28_day"] = [DBTEAMDevicesActiveSerializer serialize:valueObj.active28Day];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGetDevicesReport *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *startDate = valueDict[@"start_date"];
  DBTEAMDevicesActive *active1Day = [DBTEAMDevicesActiveSerializer deserialize:valueDict[@"active_1_day"]];
  DBTEAMDevicesActive *active7Day = [DBTEAMDevicesActiveSerializer deserialize:valueDict[@"active_7_day"]];
  DBTEAMDevicesActive *active28Day = [DBTEAMDevicesActiveSerializer deserialize:valueDict[@"active_28_day"]];

  return [[DBTEAMGetDevicesReport alloc] initWithStartDate:startDate
                                                active1Day:active1Day
                                                active7Day:active7Day
                                               active28Day:active28Day];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseDfbReport.h"
#import "DBTEAMGetMembershipReport.h"

#pragma mark - API Object

@implementation DBTEAMGetMembershipReport

#pragma mark - Constructors

- (instancetype)initWithStartDate:(NSString *)startDate
                         teamSize:(NSArray<NSNumber *> *)teamSize
                   pendingInvites:(NSArray<NSNumber *> *)pendingInvites
                    membersJoined:(NSArray<NSNumber *> *)membersJoined
                 suspendedMembers:(NSArray<NSNumber *> *)suspendedMembers
                         licenses:(NSArray<NSNumber *> *)licenses {
  [DBStoneValidators nonnullValidator:nil](startDate);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](teamSize);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](pendingInvites);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](membersJoined);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](suspendedMembers);
  [DBStoneValidators nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](licenses);

  self = [super initWithStartDate:startDate];
  if (self) {
    _teamSize = teamSize;
    _pendingInvites = pendingInvites;
    _membersJoined = membersJoined;
    _suspendedMembers = suspendedMembers;
    _licenses = licenses;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGetMembershipReportSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGetMembershipReportSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGetMembershipReportSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.startDate hash];
  result = prime * result + [self.teamSize hash];
  result = prime * result + [self.pendingInvites hash];
  result = prime * result + [self.membersJoined hash];
  result = prime * result + [self.suspendedMembers hash];
  result = prime * result + [self.licenses hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetMembershipReport:other];
}

- (BOOL)isEqualToGetMembershipReport:(DBTEAMGetMembershipReport *)aGetMembershipReport {
  if (self == aGetMembershipReport) {
    return YES;
  }
  if (![self.startDate isEqual:aGetMembershipReport.startDate]) {
    return NO;
  }
  if (![self.teamSize isEqual:aGetMembershipReport.teamSize]) {
    return NO;
  }
  if (![self.pendingInvites isEqual:aGetMembershipReport.pendingInvites]) {
    return NO;
  }
  if (![self.membersJoined isEqual:aGetMembershipReport.membersJoined]) {
    return NO;
  }
  if (![self.suspendedMembers isEqual:aGetMembershipReport.suspendedMembers]) {
    return NO;
  }
  if (![self.licenses isEqual:aGetMembershipReport.licenses]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGetMembershipReportSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGetMembershipReport *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"start_date"] = valueObj.startDate;
  jsonDict[@"team_size"] = [DBArraySerializer serialize:valueObj.teamSize
                                              withBlock:^id(id elem0) {
                                                return elem0;
                                              }];
  jsonDict[@"pending_invites"] = [DBArraySerializer serialize:valueObj.pendingInvites
                                                    withBlock:^id(id elem0) {
                                                      return elem0;
                                                    }];
  jsonDict[@"members_joined"] = [DBArraySerializer serialize:valueObj.membersJoined
                                                   withBlock:^id(id elem0) {
                                                     return elem0;
                                                   }];
  jsonDict[@"suspended_members"] = [DBArraySerializer serialize:valueObj.suspendedMembers
                                                      withBlock:^id(id elem0) {
                                                        return elem0;
                                                      }];
  jsonDict[@"licenses"] = [DBArraySerializer serialize:valueObj.licenses
                                             withBlock:^id(id elem0) {
                                               return elem0;
                                             }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGetMembershipReport *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *startDate = valueDict[@"start_date"];
  NSArray<NSNumber *> *teamSize = [DBArraySerializer deserialize:valueDict[@"team_size"]
                                                       withBlock:^id(id elem0) {
                                                         return elem0;
                                                       }];
  NSArray<NSNumber *> *pendingInvites = [DBArraySerializer deserialize:valueDict[@"pending_invites"]
                                                             withBlock:^id(id elem0) {
                                                               return elem0;
                                                             }];
  NSArray<NSNumber *> *membersJoined = [DBArraySerializer deserialize:valueDict[@"members_joined"]
                                                            withBlock:^id(id elem0) {
                                                              return elem0;
                                                            }];
  NSArray<NSNumber *> *suspendedMembers = [DBArraySerializer deserialize:valueDict[@"suspended_members"]
                                                               withBlock:^id(id elem0) {
                                                                 return elem0;
                                                               }];
  NSArray<NSNumber *> *licenses = [DBArraySerializer deserialize:valueDict[@"licenses"]
                                                       withBlock:^id(id elem0) {
                                                         return elem0;
                                                       }];

  return [[DBTEAMGetMembershipReport alloc] initWithStartDate:startDate
                                                     teamSize:teamSize
                                               pendingInvites:pendingInvites
                                                membersJoined:membersJoined
                                             suspendedMembers:suspendedMembers
                                                     licenses:licenses];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseDfbReport.h"
#import "DBTEAMGetStorageReport.h"
#import "DBTEAMStorageBucket.h"

#pragma mark - API Object

@implementation DBTEAMGetStorageReport

#pragma mark - Constructors

- (instancetype)initWithStartDate:(NSString *)startDate
                       totalUsage:(NSArray<NSNumber *> *)totalUsage
                      sharedUsage:(NSArray<NSNumber *> *)sharedUsage
                    unsharedUsage:(NSArray<NSNumber *> *)unsharedUsage
                    sharedFolders:(NSArray<NSNumber *> *)sharedFolders
                 memberStorageMap:(NSArray<NSArray<DBTEAMStorageBucket *> *> *)memberStorageMap {
  [DBStoneValidators nonnullValidator:nil](startDate);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](totalUsage);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](sharedUsage);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](unsharedUsage);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](sharedFolders);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators
                        arrayValidator:nil
                              maxItems:nil
                         itemValidator:[DBStoneValidators
                                           nonnullValidator:[DBStoneValidators
                                                                arrayValidator:nil
                                                                      maxItems:nil
                                                                 itemValidator:[DBStoneValidators
                                                                                   nonnullValidator:nil]]]]](
      memberStorageMap);

  self = [super initWithStartDate:startDate];
  if (self) {
    _totalUsage = totalUsage;
    _sharedUsage = sharedUsage;
    _unsharedUsage = unsharedUsage;
    _sharedFolders = sharedFolders;
    _memberStorageMap = memberStorageMap;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGetStorageReportSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGetStorageReportSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGetStorageReportSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.startDate hash];
  result = prime * result + [self.totalUsage hash];
  result = prime * result + [self.sharedUsage hash];
  result = prime * result + [self.unsharedUsage hash];
  result = prime * result + [self.sharedFolders hash];
  result = prime * result + [self.memberStorageMap hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetStorageReport:other];
}

- (BOOL)isEqualToGetStorageReport:(DBTEAMGetStorageReport *)aGetStorageReport {
  if (self == aGetStorageReport) {
    return YES;
  }
  if (![self.startDate isEqual:aGetStorageReport.startDate]) {
    return NO;
  }
  if (![self.totalUsage isEqual:aGetStorageReport.totalUsage]) {
    return NO;
  }
  if (![self.sharedUsage isEqual:aGetStorageReport.sharedUsage]) {
    return NO;
  }
  if (![self.unsharedUsage isEqual:aGetStorageReport.unsharedUsage]) {
    return NO;
  }
  if (![self.sharedFolders isEqual:aGetStorageReport.sharedFolders]) {
    return NO;
  }
  if (![self.memberStorageMap isEqual:aGetStorageReport.memberStorageMap]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGetStorageReportSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGetStorageReport *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"start_date"] = valueObj.startDate;
  jsonDict[@"total_usage"] = [DBArraySerializer serialize:valueObj.totalUsage
                                                withBlock:^id(id elem0) {
                                                  return elem0;
                                                }];
  jsonDict[@"shared_usage"] = [DBArraySerializer serialize:valueObj.sharedUsage
                                                 withBlock:^id(id elem0) {
                                                   return elem0;
                                                 }];
  jsonDict[@"unshared_usage"] = [DBArraySerializer serialize:valueObj.unsharedUsage
                                                   withBlock:^id(id elem0) {
                                                     return elem0;
                                                   }];
  jsonDict[@"shared_folders"] = [DBArraySerializer serialize:valueObj.sharedFolders
                                                   withBlock:^id(id elem0) {
                                                     return elem0;
                                                   }];
  jsonDict[@"member_storage_map"] =
      [DBArraySerializer serialize:valueObj.memberStorageMap
                         withBlock:^id(id elem0) {
                           return [DBArraySerializer serialize:elem0
                                                     withBlock:^id(id elem1) {
                                                       return [DBTEAMStorageBucketSerializer serialize:elem1];
                                                     }];
                         }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGetStorageReport *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *startDate = valueDict[@"start_date"];
  NSArray<NSNumber *> *totalUsage = [DBArraySerializer deserialize:valueDict[@"total_usage"]
                                                         withBlock:^id(id elem0) {
                                                           return elem0;
                                                         }];
  NSArray<NSNumber *> *sharedUsage = [DBArraySerializer deserialize:valueDict[@"shared_usage"]
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];
  NSArray<NSNumber *> *unsharedUsage = [DBArraySerializer deserialize:valueDict[@"unshared_usage"]
                                                            withBlock:^id(id elem0) {
                                                              return elem0;
                                                            }];
  NSArray<NSNumber *> *sharedFolders = [DBArraySerializer deserialize:valueDict[@"shared_folders"]
                                                            withBlock:^id(id elem0) {
                                                              return elem0;
                                                            }];
  NSArray<NSArray<DBTEAMStorageBucket *> *> *memberStorageMap =
      [DBArraySerializer deserialize:valueDict[@"member_storage_map"]
                           withBlock:^id(id elem0) {
                             return [DBArraySerializer deserialize:elem0
                                                         withBlock:^id(id elem1) {
                                                           return [DBTEAMStorageBucketSerializer deserialize:elem1];
                                                         }];
                           }];

  return [[DBTEAMGetStorageReport alloc] initWithStartDate:startDate
                                                totalUsage:totalUsage
                                               sharedUsage:sharedUsage
                                             unsharedUsage:unsharedUsage
                                             sharedFolders:sharedFolders
                                          memberStorageMap:memberStorageMap];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupAccessType.h"

#pragma mark - API Object

@implementation DBTEAMGroupAccessType

#pragma mark - Constructors

- (instancetype)initWithMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupAccessTypeMember;
  }
  return self;
}

- (instancetype)initWithOwner {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupAccessTypeOwner;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isMember {
  return _tag == DBTEAMGroupAccessTypeMember;
}

- (BOOL)isOwner {
  return _tag == DBTEAMGroupAccessTypeOwner;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupAccessTypeMember:
    return @"DBTEAMGroupAccessTypeMember";
  case DBTEAMGroupAccessTypeOwner:
    return @"DBTEAMGroupAccessTypeOwner";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupAccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupAccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupAccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupAccessTypeMember:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupAccessTypeOwner:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupAccessType:other];
}

- (BOOL)isEqualToGroupAccessType:(DBTEAMGroupAccessType *)aGroupAccessType {
  if (self == aGroupAccessType) {
    return YES;
  }
  if (self.tag != aGroupAccessType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupAccessTypeMember:
    return [[self tagName] isEqual:[aGroupAccessType tagName]];
  case DBTEAMGroupAccessTypeOwner:
    return [[self tagName] isEqual:[aGroupAccessType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupAccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupAccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMember]) {
    jsonDict[@".tag"] = @"member";
  } else if ([valueObj isOwner]) {
    jsonDict[@".tag"] = @"owner";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupAccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"member"]) {
    return [[DBTEAMGroupAccessType alloc] initWithMember];
  } else if ([tag isEqualToString:@"owner"]) {
    return [[DBTEAMGroupAccessType alloc] initWithOwner];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONGroupManagementType.h"
#import "DBTEAMGroupCreateArg.h"

#pragma mark - API Object

@implementation DBTEAMGroupCreateArg

#pragma mark - Constructors

- (instancetype)initWithGroupName:(NSString *)groupName
                  groupExternalId:(NSString *)groupExternalId
              groupManagementType:(DBTEAMCOMMONGroupManagementType *)groupManagementType {
  [DBStoneValidators nonnullValidator:nil](groupName);

  self = [super init];
  if (self) {
    _groupName = groupName;
    _groupExternalId = groupExternalId;
    _groupManagementType = groupManagementType;
  }
  return self;
}

- (instancetype)initWithGroupName:(NSString *)groupName {
  return [self initWithGroupName:groupName groupExternalId:nil groupManagementType:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupCreateArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupCreateArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupCreateArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupName hash];
  if (self.groupExternalId != nil) {
    result = prime * result + [self.groupExternalId hash];
  }
  if (self.groupManagementType != nil) {
    result = prime * result + [self.groupManagementType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupCreateArg:other];
}

- (BOOL)isEqualToGroupCreateArg:(DBTEAMGroupCreateArg *)aGroupCreateArg {
  if (self == aGroupCreateArg) {
    return YES;
  }
  if (![self.groupName isEqual:aGroupCreateArg.groupName]) {
    return NO;
  }
  if (self.groupExternalId) {
    if (![self.groupExternalId isEqual:aGroupCreateArg.groupExternalId]) {
      return NO;
    }
  }
  if (self.groupManagementType) {
    if (![self.groupManagementType isEqual:aGroupCreateArg.groupManagementType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupCreateArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupCreateArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_name"] = valueObj.groupName;
  if (valueObj.groupExternalId) {
    jsonDict[@"group_external_id"] = valueObj.groupExternalId;
  }
  if (valueObj.groupManagementType) {
    jsonDict[@"group_management_type"] =
        [DBTEAMCOMMONGroupManagementTypeSerializer serialize:valueObj.groupManagementType];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupCreateArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *groupName = valueDict[@"group_name"];
  NSString *groupExternalId = valueDict[@"group_external_id"] ?: nil;
  DBTEAMCOMMONGroupManagementType *groupManagementType =
      valueDict[@"group_management_type"]
          ? [DBTEAMCOMMONGroupManagementTypeSerializer deserialize:valueDict[@"group_management_type"]]
          : nil;

  return [[DBTEAMGroupCreateArg alloc] initWithGroupName:groupName
                                         groupExternalId:groupExternalId
                                     groupManagementType:groupManagementType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupCreateError.h"

#pragma mark - API Object

@implementation DBTEAMGroupCreateError

#pragma mark - Constructors

- (instancetype)initWithGroupNameAlreadyUsed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupCreateErrorGroupNameAlreadyUsed;
  }
  return self;
}

- (instancetype)initWithGroupNameInvalid {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupCreateErrorGroupNameInvalid;
  }
  return self;
}

- (instancetype)initWithExternalIdAlreadyInUse {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupCreateErrorExternalIdAlreadyInUse;
  }
  return self;
}

- (instancetype)initWithSystemManagedGroupDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupCreateErrorSystemManagedGroupDisallowed;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupCreateErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGroupNameAlreadyUsed {
  return _tag == DBTEAMGroupCreateErrorGroupNameAlreadyUsed;
}

- (BOOL)isGroupNameInvalid {
  return _tag == DBTEAMGroupCreateErrorGroupNameInvalid;
}

- (BOOL)isExternalIdAlreadyInUse {
  return _tag == DBTEAMGroupCreateErrorExternalIdAlreadyInUse;
}

- (BOOL)isSystemManagedGroupDisallowed {
  return _tag == DBTEAMGroupCreateErrorSystemManagedGroupDisallowed;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupCreateErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupCreateErrorGroupNameAlreadyUsed:
    return @"DBTEAMGroupCreateErrorGroupNameAlreadyUsed";
  case DBTEAMGroupCreateErrorGroupNameInvalid:
    return @"DBTEAMGroupCreateErrorGroupNameInvalid";
  case DBTEAMGroupCreateErrorExternalIdAlreadyInUse:
    return @"DBTEAMGroupCreateErrorExternalIdAlreadyInUse";
  case DBTEAMGroupCreateErrorSystemManagedGroupDisallowed:
    return @"DBTEAMGroupCreateErrorSystemManagedGroupDisallowed";
  case DBTEAMGroupCreateErrorOther:
    return @"DBTEAMGroupCreateErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupCreateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupCreateErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupCreateErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupCreateErrorGroupNameAlreadyUsed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupCreateErrorGroupNameInvalid:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupCreateErrorExternalIdAlreadyInUse:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupCreateErrorSystemManagedGroupDisallowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupCreateErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupCreateError:other];
}

- (BOOL)isEqualToGroupCreateError:(DBTEAMGroupCreateError *)aGroupCreateError {
  if (self == aGroupCreateError) {
    return YES;
  }
  if (self.tag != aGroupCreateError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupCreateErrorGroupNameAlreadyUsed:
    return [[self tagName] isEqual:[aGroupCreateError tagName]];
  case DBTEAMGroupCreateErrorGroupNameInvalid:
    return [[self tagName] isEqual:[aGroupCreateError tagName]];
  case DBTEAMGroupCreateErrorExternalIdAlreadyInUse:
    return [[self tagName] isEqual:[aGroupCreateError tagName]];
  case DBTEAMGroupCreateErrorSystemManagedGroupDisallowed:
    return [[self tagName] isEqual:[aGroupCreateError tagName]];
  case DBTEAMGroupCreateErrorOther:
    return [[self tagName] isEqual:[aGroupCreateError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupCreateErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupCreateError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNameAlreadyUsed]) {
    jsonDict[@".tag"] = @"group_name_already_used";
  } else if ([valueObj isGroupNameInvalid]) {
    jsonDict[@".tag"] = @"group_name_invalid";
  } else if ([valueObj isExternalIdAlreadyInUse]) {
    jsonDict[@".tag"] = @"external_id_already_in_use";
  } else if ([valueObj isSystemManagedGroupDisallowed]) {
    jsonDict[@".tag"] = @"system_managed_group_disallowed";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupCreateError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_name_already_used"]) {
    return [[DBTEAMGroupCreateError alloc] initWithGroupNameAlreadyUsed];
  } else if ([tag isEqualToString:@"group_name_invalid"]) {
    return [[DBTEAMGroupCreateError alloc] initWithGroupNameInvalid];
  } else if ([tag isEqualToString:@"external_id_already_in_use"]) {
    return [[DBTEAMGroupCreateError alloc] initWithExternalIdAlreadyInUse];
  } else if ([tag isEqualToString:@"system_managed_group_disallowed"]) {
    return [[DBTEAMGroupCreateError alloc] initWithSystemManagedGroupDisallowed];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupCreateError alloc] initWithOther];
  } else {
    return [[DBTEAMGroupCreateError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupSelectorError.h"

#pragma mark - API Object

@implementation DBTEAMGroupSelectorError

#pragma mark - Constructors

- (instancetype)initWithGroupNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupSelectorErrorGroupNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupSelectorErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGroupNotFound {
  return _tag == DBTEAMGroupSelectorErrorGroupNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupSelectorErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupSelectorErrorGroupNotFound:
    return @"DBTEAMGroupSelectorErrorGroupNotFound";
  case DBTEAMGroupSelectorErrorOther:
    return @"DBTEAMGroupSelectorErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupSelectorErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupSelectorErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupSelectorErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupSelectorErrorGroupNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupSelectorErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupSelectorError:other];
}

- (BOOL)isEqualToGroupSelectorError:(DBTEAMGroupSelectorError *)aGroupSelectorError {
  if (self == aGroupSelectorError) {
    return YES;
  }
  if (self.tag != aGroupSelectorError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupSelectorErrorGroupNotFound:
    return [[self tagName] isEqual:[aGroupSelectorError tagName]];
  case DBTEAMGroupSelectorErrorOther:
    return [[self tagName] isEqual:[aGroupSelectorError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupSelectorErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupSelectorError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotFound]) {
    jsonDict[@".tag"] = @"group_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupSelectorError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_found"]) {
    return [[DBTEAMGroupSelectorError alloc] initWithGroupNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupSelectorError alloc] initWithOther];
  } else {
    return [[DBTEAMGroupSelectorError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupSelectorError.h"
#import "DBTEAMGroupSelectorWithTeamGroupError.h"

#pragma mark - API Object

@implementation DBTEAMGroupSelectorWithTeamGroupError

#pragma mark - Constructors

- (instancetype)initWithGroupNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupSelectorWithTeamGroupErrorGroupNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupSelectorWithTeamGroupErrorOther;
  }
  return self;
}

- (instancetype)initWithSystemManagedGroupDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupSelectorWithTeamGroupErrorSystemManagedGroupDisallowed;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGroupNotFound {
  return _tag == DBTEAMGroupSelectorWithTeamGroupErrorGroupNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupSelectorWithTeamGroupErrorOther;
}

- (BOOL)isSystemManagedGroupDisallowed {
  return _tag == DBTEAMGroupSelectorWithTeamGroupErrorSystemManagedGroupDisallowed;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupSelectorWithTeamGroupErrorGroupNotFound:
    return @"DBTEAMGroupSelectorWithTeamGroupErrorGroupNotFound";
  case DBTEAMGroupSelectorWithTeamGroupErrorOther:
    return @"DBTEAMGroupSelectorWithTeamGroupErrorOther";
  case DBTEAMGroupSelectorWithTeamGroupErrorSystemManagedGroupDisallowed:
    return @"DBTEAMGroupSelectorWithTeamGroupErrorSystemManagedGroupDisallowed";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupSelectorWithTeamGroupErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupSelectorWithTeamGroupErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupSelectorWithTeamGroupErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupSelectorWithTeamGroupErrorGroupNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupSelectorWithTeamGroupErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupSelectorWithTeamGroupErrorSystemManagedGroupDisallowed:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupSelectorWithTeamGroupError:other];
}

- (BOOL)isEqualToGroupSelectorWithTeamGroupError:
    (DBTEAMGroupSelectorWithTeamGroupError *)aGroupSelectorWithTeamGroupError {
  if (self == aGroupSelectorWithTeamGroupError) {
    return YES;
  }
  if (self.tag != aGroupSelectorWithTeamGroupError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupSelectorWithTeamGroupErrorGroupNotFound:
    return [[self tagName] isEqual:[aGroupSelectorWithTeamGroupError tagName]];
  case DBTEAMGroupSelectorWithTeamGroupErrorOther:
    return [[self tagName] isEqual:[aGroupSelectorWithTeamGroupError tagName]];
  case DBTEAMGroupSelectorWithTeamGroupErrorSystemManagedGroupDisallowed:
    return [[self tagName] isEqual:[aGroupSelectorWithTeamGroupError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupSelectorWithTeamGroupErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupSelectorWithTeamGroupError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotFound]) {
    jsonDict[@".tag"] = @"group_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSystemManagedGroupDisallowed]) {
    jsonDict[@".tag"] = @"system_managed_group_disallowed";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupSelectorWithTeamGroupError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_found"]) {
    return [[DBTEAMGroupSelectorWithTeamGroupError alloc] initWithGroupNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupSelectorWithTeamGroupError alloc] initWithOther];
  } else if ([tag isEqualToString:@"system_managed_group_disallowed"]) {
    return [[DBTEAMGroupSelectorWithTeamGroupError alloc] initWithSystemManagedGroupDisallowed];
  } else {
    return [[DBTEAMGroupSelectorWithTeamGroupError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupDeleteError.h"
#import "DBTEAMGroupSelectorWithTeamGroupError.h"

#pragma mark - API Object

@implementation DBTEAMGroupDeleteError

#pragma mark - Constructors

- (instancetype)initWithGroupNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupDeleteErrorGroupNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupDeleteErrorOther;
  }
  return self;
}

- (instancetype)initWithSystemManagedGroupDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupDeleteErrorSystemManagedGroupDisallowed;
  }
  return self;
}

- (instancetype)initWithGroupAlreadyDeleted {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupDeleteErrorGroupAlreadyDeleted;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGroupNotFound {
  return _tag == DBTEAMGroupDeleteErrorGroupNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupDeleteErrorOther;
}

- (BOOL)isSystemManagedGroupDisallowed {
  return _tag == DBTEAMGroupDeleteErrorSystemManagedGroupDisallowed;
}

- (BOOL)isGroupAlreadyDeleted {
  return _tag == DBTEAMGroupDeleteErrorGroupAlreadyDeleted;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupDeleteErrorGroupNotFound:
    return @"DBTEAMGroupDeleteErrorGroupNotFound";
  case DBTEAMGroupDeleteErrorOther:
    return @"DBTEAMGroupDeleteErrorOther";
  case DBTEAMGroupDeleteErrorSystemManagedGroupDisallowed:
    return @"DBTEAMGroupDeleteErrorSystemManagedGroupDisallowed";
  case DBTEAMGroupDeleteErrorGroupAlreadyDeleted:
    return @"DBTEAMGroupDeleteErrorGroupAlreadyDeleted";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupDeleteErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupDeleteErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupDeleteErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupDeleteErrorGroupNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupDeleteErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupDeleteErrorSystemManagedGroupDisallowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupDeleteErrorGroupAlreadyDeleted:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupDeleteError:other];
}

- (BOOL)isEqualToGroupDeleteError:(DBTEAMGroupDeleteError *)aGroupDeleteError {
  if (self == aGroupDeleteError) {
    return YES;
  }
  if (self.tag != aGroupDeleteError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupDeleteErrorGroupNotFound:
    return [[self tagName] isEqual:[aGroupDeleteError tagName]];
  case DBTEAMGroupDeleteErrorOther:
    return [[self tagName] isEqual:[aGroupDeleteError tagName]];
  case DBTEAMGroupDeleteErrorSystemManagedGroupDisallowed:
    return [[self tagName] isEqual:[aGroupDeleteError tagName]];
  case DBTEAMGroupDeleteErrorGroupAlreadyDeleted:
    return [[self tagName] isEqual:[aGroupDeleteError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupDeleteErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupDeleteError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotFound]) {
    jsonDict[@".tag"] = @"group_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSystemManagedGroupDisallowed]) {
    jsonDict[@".tag"] = @"system_managed_group_disallowed";
  } else if ([valueObj isGroupAlreadyDeleted]) {
    jsonDict[@".tag"] = @"group_already_deleted";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupDeleteError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_found"]) {
    return [[DBTEAMGroupDeleteError alloc] initWithGroupNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupDeleteError alloc] initWithOther];
  } else if ([tag isEqualToString:@"system_managed_group_disallowed"]) {
    return [[DBTEAMGroupDeleteError alloc] initWithSystemManagedGroupDisallowed];
  } else if ([tag isEqualToString:@"group_already_deleted"]) {
    return [[DBTEAMGroupDeleteError alloc] initWithGroupAlreadyDeleted];
  } else {
    return [[DBTEAMGroupDeleteError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONGroupManagementType.h"
#import "DBTEAMCOMMONGroupSummary.h"
#import "DBTEAMGroupFullInfo.h"
#import "DBTEAMGroupMemberInfo.h"

#pragma mark - API Object

@implementation DBTEAMGroupFullInfo

#pragma mark - Constructors

- (instancetype)initWithGroupName:(NSString *)groupName
                          groupId:(NSString *)groupId
              groupManagementType:(DBTEAMCOMMONGroupManagementType *)groupManagementType
                          created:(NSNumber *)created
                  groupExternalId:(NSString *)groupExternalId
                      memberCount:(NSNumber *)memberCount
                          members:(NSArray<DBTEAMGroupMemberInfo *> *)members {
  [DBStoneValidators nonnullValidator:nil](groupName);
  [DBStoneValidators nonnullValidator:nil](groupId);
  [DBStoneValidators nonnullValidator:nil](groupManagementType);
  [DBStoneValidators nonnullValidator:nil](created);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](members);

  self = [super initWithGroupName:groupName
                          groupId:groupId
              groupManagementType:groupManagementType
                  groupExternalId:groupExternalId
                      memberCount:memberCount];
  if (self) {
    _members = members;
    _created = created;
  }
  return self;
}

- (instancetype)initWithGroupName:(NSString *)groupName
                          groupId:(NSString *)groupId
              groupManagementType:(DBTEAMCOMMONGroupManagementType *)groupManagementType
                          created:(NSNumber *)created {
  return [self initWithGroupName:groupName
                         groupId:groupId
             groupManagementType:groupManagementType
                         created:created
                 groupExternalId:nil
                     memberCount:nil
                         members:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupFullInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupFullInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupFullInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupName hash];
  result = prime * result + [self.groupId hash];
  result = prime * result + [self.groupManagementType hash];
  result = prime * result + [self.created hash];
  if (self.groupExternalId != nil) {
    result = prime * result + [self.groupExternalId hash];
  }
  if (self.memberCount != nil) {
    result = prime * result + [self.memberCount hash];
  }
  if (self.members != nil) {
    result = prime * result + [self.members hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupFullInfo:other];
}

- (BOOL)isEqualToGroupFullInfo:(DBTEAMGroupFullInfo *)aGroupFullInfo {
  if (self == aGroupFullInfo) {
    return YES;
  }
  if (![self.groupName isEqual:aGroupFullInfo.groupName]) {
    return NO;
  }
  if (![self.groupId isEqual:aGroupFullInfo.groupId]) {
    return NO;
  }
  if (![self.groupManagementType isEqual:aGroupFullInfo.groupManagementType]) {
    return NO;
  }
  if (![self.created isEqual:aGroupFullInfo.created]) {
    return NO;
  }
  if (self.groupExternalId) {
    if (![self.groupExternalId isEqual:aGroupFullInfo.groupExternalId]) {
      return NO;
    }
  }
  if (self.memberCount) {
    if (![self.memberCount isEqual:aGroupFullInfo.memberCount]) {
      return NO;
    }
  }
  if (self.members) {
    if (![self.members isEqual:aGroupFullInfo.members]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupFullInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupFullInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_name"] = valueObj.groupName;
  jsonDict[@"group_id"] = valueObj.groupId;
  jsonDict[@"group_management_type"] =
      [DBTEAMCOMMONGroupManagementTypeSerializer serialize:valueObj.groupManagementType];
  jsonDict[@"created"] = valueObj.created;
  if (valueObj.groupExternalId) {
    jsonDict[@"group_external_id"] = valueObj.groupExternalId;
  }
  if (valueObj.memberCount) {
    jsonDict[@"member_count"] = valueObj.memberCount;
  }
  if (valueObj.members) {
    jsonDict[@"members"] = [DBArraySerializer serialize:valueObj.members
                                              withBlock:^id(id elem0) {
                                                return [DBTEAMGroupMemberInfoSerializer serialize:elem0];
                                              }];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupFullInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *groupName = valueDict[@"group_name"];
  NSString *groupId = valueDict[@"group_id"];
  DBTEAMCOMMONGroupManagementType *groupManagementType =
      [DBTEAMCOMMONGroupManagementTypeSerializer deserialize:valueDict[@"group_management_type"]];
  NSNumber *created = valueDict[@"created"];
  NSString *groupExternalId = valueDict[@"group_external_id"] ?: nil;
  NSNumber *memberCount = valueDict[@"member_count"] ?: nil;
  NSArray<DBTEAMGroupMemberInfo *> *members =
      valueDict[@"members"] ? [DBArraySerializer deserialize:valueDict[@"members"]
                                                   withBlock:^id(id elem0) {
                                                     return [DBTEAMGroupMemberInfoSerializer deserialize:elem0];
                                                   }]
                            : nil;

  return [[DBTEAMGroupFullInfo alloc] initWithGroupName:groupName
                                                groupId:groupId
                                    groupManagementType:groupManagementType
                                                created:created
                                        groupExternalId:groupExternalId
                                            memberCount:memberCount
                                                members:members];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupAccessType.h"
#import "DBTEAMGroupMemberInfo.h"
#import "DBTEAMMemberProfile.h"

#pragma mark - API Object

@implementation DBTEAMGroupMemberInfo

#pragma mark - Constructors

- (instancetype)initWithProfile:(DBTEAMMemberProfile *)profile accessType:(DBTEAMGroupAccessType *)accessType {
  [DBStoneValidators nonnullValidator:nil](profile);
  [DBStoneValidators nonnullValidator:nil](accessType);

  self = [super init];
  if (self) {
    _profile = profile;
    _accessType = accessType;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMemberInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMemberInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMemberInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.profile hash];
  result = prime * result + [self.accessType hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMemberInfo:other];
}

- (BOOL)isEqualToGroupMemberInfo:(DBTEAMGroupMemberInfo *)aGroupMemberInfo {
  if (self == aGroupMemberInfo) {
    return YES;
  }
  if (![self.profile isEqual:aGroupMemberInfo.profile]) {
    return NO;
  }
  if (![self.accessType isEqual:aGroupMemberInfo.accessType]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMemberInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMemberInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"profile"] = [DBTEAMMemberProfileSerializer serialize:valueObj.profile];
  jsonDict[@"access_type"] = [DBTEAMGroupAccessTypeSerializer serialize:valueObj.accessType];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMemberInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMMemberProfile *profile = [DBTEAMMemberProfileSerializer deserialize:valueDict[@"profile"]];
  DBTEAMGroupAccessType *accessType = [DBTEAMGroupAccessTypeSerializer deserialize:valueDict[@"access_type"]];

  return [[DBTEAMGroupMemberInfo alloc] initWithProfile:profile accessType:accessType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMemberSelector.h"
#import "DBTEAMGroupSelector.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMGroupMemberSelector

#pragma mark - Constructors

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group user:(DBTEAMUserSelectorArg *)user {
  [DBStoneValidators nonnullValidator:nil](group);
  [DBStoneValidators nonnullValidator:nil](user);

  self = [super init];
  if (self) {
    _group = group;
    _user = user;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMemberSelectorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMemberSelectorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMemberSelectorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.group hash];
  result = prime * result + [self.user hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMemberSelector:other];
}

- (BOOL)isEqualToGroupMemberSelector:(DBTEAMGroupMemberSelector *)aGroupMemberSelector {
  if (self == aGroupMemberSelector) {
    return YES;
  }
  if (![self.group isEqual:aGroupMemberSelector.group]) {
    return NO;
  }
  if (![self.user isEqual:aGroupMemberSelector.user]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMemberSelectorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMemberSelector *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group"] = [DBTEAMGroupSelectorSerializer serialize:valueObj.group];
  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMemberSelector *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMGroupSelector *group = [DBTEAMGroupSelectorSerializer deserialize:valueDict[@"group"]];
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];

  return [[DBTEAMGroupMemberSelector alloc] initWithGroup:group user:user];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMemberSelectorError.h"
#import "DBTEAMGroupSelectorWithTeamGroupError.h"

#pragma mark - API Object

@implementation DBTEAMGroupMemberSelectorError

#pragma mark - Constructors

- (instancetype)initWithGroupNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSelectorErrorGroupNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSelectorErrorOther;
  }
  return self;
}

- (instancetype)initWithSystemManagedGroupDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSelectorErrorSystemManagedGroupDisallowed;
  }
  return self;
}

- (instancetype)initWithMemberNotInGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSelectorErrorMemberNotInGroup;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGroupNotFound {
  return _tag == DBTEAMGroupMemberSelectorErrorGroupNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupMemberSelectorErrorOther;
}

- (BOOL)isSystemManagedGroupDisallowed {
  return _tag == DBTEAMGroupMemberSelectorErrorSystemManagedGroupDisallowed;
}

- (BOOL)isMemberNotInGroup {
  return _tag == DBTEAMGroupMemberSelectorErrorMemberNotInGroup;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupMemberSelectorErrorGroupNotFound:
    return @"DBTEAMGroupMemberSelectorErrorGroupNotFound";
  case DBTEAMGroupMemberSelectorErrorOther:
    return @"DBTEAMGroupMemberSelectorErrorOther";
  case DBTEAMGroupMemberSelectorErrorSystemManagedGroupDisallowed:
    return @"DBTEAMGroupMemberSelectorErrorSystemManagedGroupDisallowed";
  case DBTEAMGroupMemberSelectorErrorMemberNotInGroup:
    return @"DBTEAMGroupMemberSelectorErrorMemberNotInGroup";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMemberSelectorErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMemberSelectorErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMemberSelectorErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupMemberSelectorErrorGroupNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMemberSelectorErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMemberSelectorErrorSystemManagedGroupDisallowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMemberSelectorErrorMemberNotInGroup:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMemberSelectorError:other];
}

- (BOOL)isEqualToGroupMemberSelectorError:(DBTEAMGroupMemberSelectorError *)aGroupMemberSelectorError {
  if (self == aGroupMemberSelectorError) {
    return YES;
  }
  if (self.tag != aGroupMemberSelectorError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupMemberSelectorErrorGroupNotFound:
    return [[self tagName] isEqual:[aGroupMemberSelectorError tagName]];
  case DBTEAMGroupMemberSelectorErrorOther:
    return [[self tagName] isEqual:[aGroupMemberSelectorError tagName]];
  case DBTEAMGroupMemberSelectorErrorSystemManagedGroupDisallowed:
    return [[self tagName] isEqual:[aGroupMemberSelectorError tagName]];
  case DBTEAMGroupMemberSelectorErrorMemberNotInGroup:
    return [[self tagName] isEqual:[aGroupMemberSelectorError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMemberSelectorErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMemberSelectorError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotFound]) {
    jsonDict[@".tag"] = @"group_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSystemManagedGroupDisallowed]) {
    jsonDict[@".tag"] = @"system_managed_group_disallowed";
  } else if ([valueObj isMemberNotInGroup]) {
    jsonDict[@".tag"] = @"member_not_in_group";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMemberSelectorError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_found"]) {
    return [[DBTEAMGroupMemberSelectorError alloc] initWithGroupNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupMemberSelectorError alloc] initWithOther];
  } else if ([tag isEqualToString:@"system_managed_group_disallowed"]) {
    return [[DBTEAMGroupMemberSelectorError alloc] initWithSystemManagedGroupDisallowed];
  } else if ([tag isEqualToString:@"member_not_in_group"]) {
    return [[DBTEAMGroupMemberSelectorError alloc] initWithMemberNotInGroup];
  } else {
    return [[DBTEAMGroupMemberSelectorError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMemberSelectorError.h"
#import "DBTEAMGroupMemberSetAccessTypeError.h"

#pragma mark - API Object

@implementation DBTEAMGroupMemberSetAccessTypeError

#pragma mark - Constructors

- (instancetype)initWithGroupNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSetAccessTypeErrorGroupNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSetAccessTypeErrorOther;
  }
  return self;
}

- (instancetype)initWithSystemManagedGroupDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSetAccessTypeErrorSystemManagedGroupDisallowed;
  }
  return self;
}

- (instancetype)initWithMemberNotInGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup;
  }
  return self;
}

- (instancetype)initWithUserCannotBeManagerOfCompanyManagedGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGroupNotFound {
  return _tag == DBTEAMGroupMemberSetAccessTypeErrorGroupNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupMemberSetAccessTypeErrorOther;
}

- (BOOL)isSystemManagedGroupDisallowed {
  return _tag == DBTEAMGroupMemberSetAccessTypeErrorSystemManagedGroupDisallowed;
}

- (BOOL)isMemberNotInGroup {
  return _tag == DBTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup;
}

- (BOOL)isUserCannotBeManagerOfCompanyManagedGroup {
  return _tag == DBTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupMemberSetAccessTypeErrorGroupNotFound:
    return @"DBTEAMGroupMemberSetAccessTypeErrorGroupNotFound";
  case DBTEAMGroupMemberSetAccessTypeErrorOther:
    return @"DBTEAMGroupMemberSetAccessTypeErrorOther";
  case DBTEAMGroupMemberSetAccessTypeErrorSystemManagedGroupDisallowed:
    return @"DBTEAMGroupMemberSetAccessTypeErrorSystemManagedGroupDisallowed";
  case DBTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup:
    return @"DBTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup";
  case DBTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup:
    return @"DBTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMemberSetAccessTypeErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMemberSetAccessTypeErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMemberSetAccessTypeErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupMemberSetAccessTypeErrorGroupNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMemberSetAccessTypeErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMemberSetAccessTypeErrorSystemManagedGroupDisallowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMemberSetAccessTypeError:other];
}

- (BOOL)isEqualToGroupMemberSetAccessTypeError:(DBTEAMGroupMemberSetAccessTypeError *)aGroupMemberSetAccessTypeError {
  if (self == aGroupMemberSetAccessTypeError) {
    return YES;
  }
  if (self.tag != aGroupMemberSetAccessTypeError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupMemberSetAccessTypeErrorGroupNotFound:
    return [[self tagName] isEqual:[aGroupMemberSetAccessTypeError tagName]];
  case DBTEAMGroupMemberSetAccessTypeErrorOther:
    return [[self tagName] isEqual:[aGroupMemberSetAccessTypeError tagName]];
  case DBTEAMGroupMemberSetAccessTypeErrorSystemManagedGroupDisallowed:
    return [[self tagName] isEqual:[aGroupMemberSetAccessTypeError tagName]];
  case DBTEAMGroupMemberSetAccessTypeErrorMemberNotInGroup:
    return [[self tagName] isEqual:[aGroupMemberSetAccessTypeError tagName]];
  case DBTEAMGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup:
    return [[self tagName] isEqual:[aGroupMemberSetAccessTypeError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMemberSetAccessTypeErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMemberSetAccessTypeError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotFound]) {
    jsonDict[@".tag"] = @"group_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSystemManagedGroupDisallowed]) {
    jsonDict[@".tag"] = @"system_managed_group_disallowed";
  } else if ([valueObj isMemberNotInGroup]) {
    jsonDict[@".tag"] = @"member_not_in_group";
  } else if ([valueObj isUserCannotBeManagerOfCompanyManagedGroup]) {
    jsonDict[@".tag"] = @"user_cannot_be_manager_of_company_managed_group";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMemberSetAccessTypeError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_found"]) {
    return [[DBTEAMGroupMemberSetAccessTypeError alloc] initWithGroupNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupMemberSetAccessTypeError alloc] initWithOther];
  } else if ([tag isEqualToString:@"system_managed_group_disallowed"]) {
    return [[DBTEAMGroupMemberSetAccessTypeError alloc] initWithSystemManagedGroupDisallowed];
  } else if ([tag isEqualToString:@"member_not_in_group"]) {
    return [[DBTEAMGroupMemberSetAccessTypeError alloc] initWithMemberNotInGroup];
  } else if ([tag isEqualToString:@"user_cannot_be_manager_of_company_managed_group"]) {
    return [[DBTEAMGroupMemberSetAccessTypeError alloc] initWithUserCannotBeManagerOfCompanyManagedGroup];
  } else {
    return [[DBTEAMGroupMemberSetAccessTypeError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMIncludeMembersArg.h"

#pragma mark - API Object

@implementation DBTEAMIncludeMembersArg

#pragma mark - Constructors

- (instancetype)initWithReturnMembers:(NSNumber *)returnMembers {

  self = [super init];
  if (self) {
    _returnMembers = returnMembers ?: @YES;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithReturnMembers:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMIncludeMembersArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMIncludeMembersArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMIncludeMembersArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.returnMembers hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToIncludeMembersArg:other];
}

- (BOOL)isEqualToIncludeMembersArg:(DBTEAMIncludeMembersArg *)anIncludeMembersArg {
  if (self == anIncludeMembersArg) {
    return YES;
  }
  if (![self.returnMembers isEqual:anIncludeMembersArg.returnMembers]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMIncludeMembersArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMIncludeMembersArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"return_members"] = valueObj.returnMembers;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMIncludeMembersArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *returnMembers = valueDict[@"return_members"] ?: @YES;

  return [[DBTEAMIncludeMembersArg alloc] initWithReturnMembers:returnMembers];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMembersAddArg.h"
#import "DBTEAMGroupSelector.h"
#import "DBTEAMIncludeMembersArg.h"
#import "DBTEAMMemberAccess.h"

#pragma mark - API Object

@implementation DBTEAMGroupMembersAddArg

#pragma mark - Constructors

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group
                      members:(NSArray<DBTEAMMemberAccess *> *)members
                returnMembers:(NSNumber *)returnMembers {
  [DBStoneValidators nonnullValidator:nil](group);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](members);

  self = [super initWithReturnMembers:returnMembers];
  if (self) {
    _group = group;
    _members = members;
  }
  return self;
}

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group members:(NSArray<DBTEAMMemberAccess *> *)members {
  return [self initWithGroup:group members:members returnMembers:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMembersAddArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMembersAddArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMembersAddArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.group hash];
  result = prime * result + [self.members hash];
  result = prime * result + [self.returnMembers hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMembersAddArg:other];
}

- (BOOL)isEqualToGroupMembersAddArg:(DBTEAMGroupMembersAddArg *)aGroupMembersAddArg {
  if (self == aGroupMembersAddArg) {
    return YES;
  }
  if (![self.group isEqual:aGroupMembersAddArg.group]) {
    return NO;
  }
  if (![self.members isEqual:aGroupMembersAddArg.members]) {
    return NO;
  }
  if (![self.returnMembers isEqual:aGroupMembersAddArg.returnMembers]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMembersAddArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMembersAddArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group"] = [DBTEAMGroupSelectorSerializer serialize:valueObj.group];
  jsonDict[@"members"] = [DBArraySerializer serialize:valueObj.members
                                            withBlock:^id(id elem0) {
                                              return [DBTEAMMemberAccessSerializer serialize:elem0];
                                            }];
  jsonDict[@"return_members"] = valueObj.returnMembers;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMembersAddArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMGroupSelector *group = [DBTEAMGroupSelectorSerializer deserialize:valueDict[@"group"]];
  NSArray<DBTEAMMemberAccess *> *members =
      [DBArraySerializer deserialize:valueDict[@"members"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMMemberAccessSerializer deserialize:elem0];
                           }];
  NSNumber *returnMembers = valueDict[@"return_members"] ?: @YES;

  return [[DBTEAMGroupMembersAddArg alloc] initWithGroup:group members:members returnMembers:returnMembers];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMembersAddError.h"
#import "DBTEAMGroupSelectorWithTeamGroupError.h"

#pragma mark - API Object

@implementation DBTEAMGroupMembersAddError

@synthesize membersNotInTeam = _membersNotInTeam;
@synthesize usersNotFound = _usersNotFound;
@synthesize userCannotBeManagerOfCompanyManagedGroup = _userCannotBeManagerOfCompanyManagedGroup;

#pragma mark - Constructors

- (instancetype)initWithGroupNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersAddErrorGroupNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersAddErrorOther;
  }
  return self;
}

- (instancetype)initWithSystemManagedGroupDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersAddErrorSystemManagedGroupDisallowed;
  }
  return self;
}

- (instancetype)initWithDuplicateUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersAddErrorDuplicateUser;
  }
  return self;
}

- (instancetype)initWithGroupNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersAddErrorGroupNotInTeam;
  }
  return self;
}

- (instancetype)initWithMembersNotInTeam:(NSArray<NSString *> *)membersNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersAddErrorMembersNotInTeam;
    _membersNotInTeam = membersNotInTeam;
  }
  return self;
}

- (instancetype)initWithUsersNotFound:(NSArray<NSString *> *)usersNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersAddErrorUsersNotFound;
    _usersNotFound = usersNotFound;
  }
  return self;
}

- (instancetype)initWithUserMustBeActiveToBeOwner {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersAddErrorUserMustBeActiveToBeOwner;
  }
  return self;
}

- (instancetype)initWithUserCannotBeManagerOfCompanyManagedGroup:
    (NSArray<NSString *> *)userCannotBeManagerOfCompanyManagedGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup;
    _userCannotBeManagerOfCompanyManagedGroup = userCannotBeManagerOfCompanyManagedGroup;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSArray<NSString *> *)membersNotInTeam {
  if (![self isMembersNotInTeam]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMGroupMembersAddErrorMembersNotInTeam, but was %@.", [self tagName]];
  }
  return _membersNotInTeam;
}

- (NSArray<NSString *> *)usersNotFound {
  if (![self isUsersNotFound]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMGroupMembersAddErrorUsersNotFound, but was %@.", [self tagName]];
  }
  return _usersNotFound;
}

- (NSArray<NSString *> *)userCannotBeManagerOfCompanyManagedGroup {
  if (![self isUserCannotBeManagerOfCompanyManagedGroup]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup, but was %@.",
               [self tagName]];
  }
  return _userCannotBeManagerOfCompanyManagedGroup;
}

#pragma mark - Tag state methods

- (BOOL)isGroupNotFound {
  return _tag == DBTEAMGroupMembersAddErrorGroupNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupMembersAddErrorOther;
}

- (BOOL)isSystemManagedGroupDisallowed {
  return _tag == DBTEAMGroupMembersAddErrorSystemManagedGroupDisallowed;
}

- (BOOL)isDuplicateUser {
  return _tag == DBTEAMGroupMembersAddErrorDuplicateUser;
}

- (BOOL)isGroupNotInTeam {
  return _tag == DBTEAMGroupMembersAddErrorGroupNotInTeam;
}

- (BOOL)isMembersNotInTeam {
  return _tag == DBTEAMGroupMembersAddErrorMembersNotInTeam;
}

- (BOOL)isUsersNotFound {
  return _tag == DBTEAMGroupMembersAddErrorUsersNotFound;
}

- (BOOL)isUserMustBeActiveToBeOwner {
  return _tag == DBTEAMGroupMembersAddErrorUserMustBeActiveToBeOwner;
}

- (BOOL)isUserCannotBeManagerOfCompanyManagedGroup {
  return _tag == DBTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupMembersAddErrorGroupNotFound:
    return @"DBTEAMGroupMembersAddErrorGroupNotFound";
  case DBTEAMGroupMembersAddErrorOther:
    return @"DBTEAMGroupMembersAddErrorOther";
  case DBTEAMGroupMembersAddErrorSystemManagedGroupDisallowed:
    return @"DBTEAMGroupMembersAddErrorSystemManagedGroupDisallowed";
  case DBTEAMGroupMembersAddErrorDuplicateUser:
    return @"DBTEAMGroupMembersAddErrorDuplicateUser";
  case DBTEAMGroupMembersAddErrorGroupNotInTeam:
    return @"DBTEAMGroupMembersAddErrorGroupNotInTeam";
  case DBTEAMGroupMembersAddErrorMembersNotInTeam:
    return @"DBTEAMGroupMembersAddErrorMembersNotInTeam";
  case DBTEAMGroupMembersAddErrorUsersNotFound:
    return @"DBTEAMGroupMembersAddErrorUsersNotFound";
  case DBTEAMGroupMembersAddErrorUserMustBeActiveToBeOwner:
    return @"DBTEAMGroupMembersAddErrorUserMustBeActiveToBeOwner";
  case DBTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup:
    return @"DBTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMembersAddErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMembersAddErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMembersAddErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupMembersAddErrorGroupNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersAddErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersAddErrorSystemManagedGroupDisallowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersAddErrorDuplicateUser:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersAddErrorGroupNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersAddErrorMembersNotInTeam:
    result = prime * result + [self.membersNotInTeam hash];
  case DBTEAMGroupMembersAddErrorUsersNotFound:
    result = prime * result + [self.usersNotFound hash];
  case DBTEAMGroupMembersAddErrorUserMustBeActiveToBeOwner:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup:
    result = prime * result + [self.userCannotBeManagerOfCompanyManagedGroup hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMembersAddError:other];
}

- (BOOL)isEqualToGroupMembersAddError:(DBTEAMGroupMembersAddError *)aGroupMembersAddError {
  if (self == aGroupMembersAddError) {
    return YES;
  }
  if (self.tag != aGroupMembersAddError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupMembersAddErrorGroupNotFound:
    return [[self tagName] isEqual:[aGroupMembersAddError tagName]];
  case DBTEAMGroupMembersAddErrorOther:
    return [[self tagName] isEqual:[aGroupMembersAddError tagName]];
  case DBTEAMGroupMembersAddErrorSystemManagedGroupDisallowed:
    return [[self tagName] isEqual:[aGroupMembersAddError tagName]];
  case DBTEAMGroupMembersAddErrorDuplicateUser:
    return [[self tagName] isEqual:[aGroupMembersAddError tagName]];
  case DBTEAMGroupMembersAddErrorGroupNotInTeam:
    return [[self tagName] isEqual:[aGroupMembersAddError tagName]];
  case DBTEAMGroupMembersAddErrorMembersNotInTeam:
    return [self.membersNotInTeam isEqual:aGroupMembersAddError.membersNotInTeam];
  case DBTEAMGroupMembersAddErrorUsersNotFound:
    return [self.usersNotFound isEqual:aGroupMembersAddError.usersNotFound];
  case DBTEAMGroupMembersAddErrorUserMustBeActiveToBeOwner:
    return [[self tagName] isEqual:[aGroupMembersAddError tagName]];
  case DBTEAMGroupMembersAddErrorUserCannotBeManagerOfCompanyManagedGroup:
    return [self.userCannotBeManagerOfCompanyManagedGroup
        isEqual:aGroupMembersAddError.userCannotBeManagerOfCompanyManagedGroup];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMembersAddErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMembersAddError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotFound]) {
    jsonDict[@".tag"] = @"group_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSystemManagedGroupDisallowed]) {
    jsonDict[@".tag"] = @"system_managed_group_disallowed";
  } else if ([valueObj isDuplicateUser]) {
    jsonDict[@".tag"] = @"duplicate_user";
  } else if ([valueObj isGroupNotInTeam]) {
    jsonDict[@".tag"] = @"group_not_in_team";
  } else if ([valueObj isMembersNotInTeam]) {
    jsonDict[@"members_not_in_team"] = [DBArraySerializer serialize:valueObj.membersNotInTeam
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];
    jsonDict[@".tag"] = @"members_not_in_team";
  } else if ([valueObj isUsersNotFound]) {
    jsonDict[@"users_not_found"] = [DBArraySerializer serialize:valueObj.usersNotFound
                                                      withBlock:^id(id elem0) {
                                                        return elem0;
                                                      }];
    jsonDict[@".tag"] = @"users_not_found";
  } else if ([valueObj isUserMustBeActiveToBeOwner]) {
    jsonDict[@".tag"] = @"user_must_be_active_to_be_owner";
  } else if ([valueObj isUserCannotBeManagerOfCompanyManagedGroup]) {
    jsonDict[@"user_cannot_be_manager_of_company_managed_group"] =
        [DBArraySerializer serialize:valueObj.userCannotBeManagerOfCompanyManagedGroup
                           withBlock:^id(id elem0) {
                             return elem0;
                           }];
    jsonDict[@".tag"] = @"user_cannot_be_manager_of_company_managed_group";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMembersAddError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_found"]) {
    return [[DBTEAMGroupMembersAddError alloc] initWithGroupNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupMembersAddError alloc] initWithOther];
  } else if ([tag isEqualToString:@"system_managed_group_disallowed"]) {
    return [[DBTEAMGroupMembersAddError alloc] initWithSystemManagedGroupDisallowed];
  } else if ([tag isEqualToString:@"duplicate_user"]) {
    return [[DBTEAMGroupMembersAddError alloc] initWithDuplicateUser];
  } else if ([tag isEqualToString:@"group_not_in_team"]) {
    return [[DBTEAMGroupMembersAddError alloc] initWithGroupNotInTeam];
  } else if ([tag isEqualToString:@"members_not_in_team"]) {
    NSArray<NSString *> *membersNotInTeam = [DBArraySerializer deserialize:valueDict[@"members_not_in_team"]
                                                                 withBlock:^id(id elem0) {
                                                                   return elem0;
                                                                 }];
    return [[DBTEAMGroupMembersAddError alloc] initWithMembersNotInTeam:membersNotInTeam];
  } else if ([tag isEqualToString:@"users_not_found"]) {
    NSArray<NSString *> *usersNotFound = [DBArraySerializer deserialize:valueDict[@"users_not_found"]
                                                              withBlock:^id(id elem0) {
                                                                return elem0;
                                                              }];
    return [[DBTEAMGroupMembersAddError alloc] initWithUsersNotFound:usersNotFound];
  } else if ([tag isEqualToString:@"user_must_be_active_to_be_owner"]) {
    return [[DBTEAMGroupMembersAddError alloc] initWithUserMustBeActiveToBeOwner];
  } else if ([tag isEqualToString:@"user_cannot_be_manager_of_company_managed_group"]) {
    NSArray<NSString *> *userCannotBeManagerOfCompanyManagedGroup =
        [DBArraySerializer deserialize:valueDict[@"user_cannot_be_manager_of_company_managed_group"]
                             withBlock:^id(id elem0) {
                               return elem0;
                             }];
    return [[DBTEAMGroupMembersAddError alloc]
        initWithUserCannotBeManagerOfCompanyManagedGroup:userCannotBeManagerOfCompanyManagedGroup];
  } else {
    return [[DBTEAMGroupMembersAddError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupFullInfo.h"
#import "DBTEAMGroupMembersChangeResult.h"

#pragma mark - API Object

@implementation DBTEAMGroupMembersChangeResult

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMGroupFullInfo *)groupInfo asyncJobId:(NSString *)asyncJobId {
  [DBStoneValidators nonnullValidator:nil](groupInfo);
  [DBStoneValidators nonnullValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:nil]](asyncJobId);

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _asyncJobId = asyncJobId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMembersChangeResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMembersChangeResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMembersChangeResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  result = prime * result + [self.asyncJobId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMembersChangeResult:other];
}

- (BOOL)isEqualToGroupMembersChangeResult:(DBTEAMGroupMembersChangeResult *)aGroupMembersChangeResult {
  if (self == aGroupMembersChangeResult) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupMembersChangeResult.groupInfo]) {
    return NO;
  }
  if (![self.asyncJobId isEqual:aGroupMembersChangeResult.asyncJobId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMembersChangeResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMembersChangeResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMGroupFullInfoSerializer serialize:valueObj.groupInfo];
  jsonDict[@"async_job_id"] = valueObj.asyncJobId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMembersChangeResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMGroupFullInfo *groupInfo = [DBTEAMGroupFullInfoSerializer deserialize:valueDict[@"group_info"]];
  NSString *asyncJobId = valueDict[@"async_job_id"];

  return [[DBTEAMGroupMembersChangeResult alloc] initWithGroupInfo:groupInfo asyncJobId:asyncJobId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMembersRemoveArg.h"
#import "DBTEAMGroupSelector.h"
#import "DBTEAMIncludeMembersArg.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMGroupMembersRemoveArg

#pragma mark - Constructors

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group
                        users:(NSArray<DBTEAMUserSelectorArg *> *)users
                returnMembers:(NSNumber *)returnMembers {
  [DBStoneValidators nonnullValidator:nil](group);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](users);

  self = [super initWithReturnMembers:returnMembers];
  if (self) {
    _group = group;
    _users = users;
  }
  return self;
}

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group users:(NSArray<DBTEAMUserSelectorArg *> *)users {
  return [self initWithGroup:group users:users returnMembers:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMembersRemoveArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMembersRemoveArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMembersRemoveArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.group hash];
  result = prime * result + [self.users hash];
  result = prime * result + [self.returnMembers hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMembersRemoveArg:other];
}

- (BOOL)isEqualToGroupMembersRemoveArg:(DBTEAMGroupMembersRemoveArg *)aGroupMembersRemoveArg {
  if (self == aGroupMembersRemoveArg) {
    return YES;
  }
  if (![self.group isEqual:aGroupMembersRemoveArg.group]) {
    return NO;
  }
  if (![self.users isEqual:aGroupMembersRemoveArg.users]) {
    return NO;
  }
  if (![self.returnMembers isEqual:aGroupMembersRemoveArg.returnMembers]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMembersRemoveArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMembersRemoveArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group"] = [DBTEAMGroupSelectorSerializer serialize:valueObj.group];
  jsonDict[@"users"] = [DBArraySerializer serialize:valueObj.users
                                          withBlock:^id(id elem0) {
                                            return [DBTEAMUserSelectorArgSerializer serialize:elem0];
                                          }];
  jsonDict[@"return_members"] = valueObj.returnMembers;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMembersRemoveArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMGroupSelector *group = [DBTEAMGroupSelectorSerializer deserialize:valueDict[@"group"]];
  NSArray<DBTEAMUserSelectorArg *> *users =
      [DBArraySerializer deserialize:valueDict[@"users"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMUserSelectorArgSerializer deserialize:elem0];
                           }];
  NSNumber *returnMembers = valueDict[@"return_members"] ?: @YES;

  return [[DBTEAMGroupMembersRemoveArg alloc] initWithGroup:group users:users returnMembers:returnMembers];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMembersSelectorError.h"
#import "DBTEAMGroupSelectorWithTeamGroupError.h"

#pragma mark - API Object

@implementation DBTEAMGroupMembersSelectorError

#pragma mark - Constructors

- (instancetype)initWithGroupNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersSelectorErrorGroupNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersSelectorErrorOther;
  }
  return self;
}

- (instancetype)initWithSystemManagedGroupDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersSelectorErrorSystemManagedGroupDisallowed;
  }
  return self;
}

- (instancetype)initWithMemberNotInGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersSelectorErrorMemberNotInGroup;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGroupNotFound {
  return _tag == DBTEAMGroupMembersSelectorErrorGroupNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupMembersSelectorErrorOther;
}

- (BOOL)isSystemManagedGroupDisallowed {
  return _tag == DBTEAMGroupMembersSelectorErrorSystemManagedGroupDisallowed;
}

- (BOOL)isMemberNotInGroup {
  return _tag == DBTEAMGroupMembersSelectorErrorMemberNotInGroup;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupMembersSelectorErrorGroupNotFound:
    return @"DBTEAMGroupMembersSelectorErrorGroupNotFound";
  case DBTEAMGroupMembersSelectorErrorOther:
    return @"DBTEAMGroupMembersSelectorErrorOther";
  case DBTEAMGroupMembersSelectorErrorSystemManagedGroupDisallowed:
    return @"DBTEAMGroupMembersSelectorErrorSystemManagedGroupDisallowed";
  case DBTEAMGroupMembersSelectorErrorMemberNotInGroup:
    return @"DBTEAMGroupMembersSelectorErrorMemberNotInGroup";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMembersSelectorErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMembersSelectorErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMembersSelectorErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupMembersSelectorErrorGroupNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersSelectorErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersSelectorErrorSystemManagedGroupDisallowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersSelectorErrorMemberNotInGroup:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMembersSelectorError:other];
}

- (BOOL)isEqualToGroupMembersSelectorError:(DBTEAMGroupMembersSelectorError *)aGroupMembersSelectorError {
  if (self == aGroupMembersSelectorError) {
    return YES;
  }
  if (self.tag != aGroupMembersSelectorError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupMembersSelectorErrorGroupNotFound:
    return [[self tagName] isEqual:[aGroupMembersSelectorError tagName]];
  case DBTEAMGroupMembersSelectorErrorOther:
    return [[self tagName] isEqual:[aGroupMembersSelectorError tagName]];
  case DBTEAMGroupMembersSelectorErrorSystemManagedGroupDisallowed:
    return [[self tagName] isEqual:[aGroupMembersSelectorError tagName]];
  case DBTEAMGroupMembersSelectorErrorMemberNotInGroup:
    return [[self tagName] isEqual:[aGroupMembersSelectorError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMembersSelectorErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMembersSelectorError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotFound]) {
    jsonDict[@".tag"] = @"group_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSystemManagedGroupDisallowed]) {
    jsonDict[@".tag"] = @"system_managed_group_disallowed";
  } else if ([valueObj isMemberNotInGroup]) {
    jsonDict[@".tag"] = @"member_not_in_group";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMembersSelectorError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_found"]) {
    return [[DBTEAMGroupMembersSelectorError alloc] initWithGroupNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupMembersSelectorError alloc] initWithOther];
  } else if ([tag isEqualToString:@"system_managed_group_disallowed"]) {
    return [[DBTEAMGroupMembersSelectorError alloc] initWithSystemManagedGroupDisallowed];
  } else if ([tag isEqualToString:@"member_not_in_group"]) {
    return [[DBTEAMGroupMembersSelectorError alloc] initWithMemberNotInGroup];
  } else {
    return [[DBTEAMGroupMembersSelectorError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMembersRemoveError.h"
#import "DBTEAMGroupMembersSelectorError.h"

#pragma mark - API Object

@implementation DBTEAMGroupMembersRemoveError

@synthesize membersNotInTeam = _membersNotInTeam;
@synthesize usersNotFound = _usersNotFound;

#pragma mark - Constructors

- (instancetype)initWithGroupNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersRemoveErrorGroupNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersRemoveErrorOther;
  }
  return self;
}

- (instancetype)initWithSystemManagedGroupDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersRemoveErrorSystemManagedGroupDisallowed;
  }
  return self;
}

- (instancetype)initWithMemberNotInGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersRemoveErrorMemberNotInGroup;
  }
  return self;
}

- (instancetype)initWithGroupNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersRemoveErrorGroupNotInTeam;
  }
  return self;
}

- (instancetype)initWithMembersNotInTeam:(NSArray<NSString *> *)membersNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersRemoveErrorMembersNotInTeam;
    _membersNotInTeam = membersNotInTeam;
  }
  return self;
}

- (instancetype)initWithUsersNotFound:(NSArray<NSString *> *)usersNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupMembersRemoveErrorUsersNotFound;
    _usersNotFound = usersNotFound;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSArray<NSString *> *)membersNotInTeam {
  if (![self isMembersNotInTeam]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMGroupMembersRemoveErrorMembersNotInTeam, but was %@.", [self tagName]];
  }
  return _membersNotInTeam;
}

- (NSArray<NSString *> *)usersNotFound {
  if (![self isUsersNotFound]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMGroupMembersRemoveErrorUsersNotFound, but was %@.", [self tagName]];
  }
  return _usersNotFound;
}

#pragma mark - Tag state methods

- (BOOL)isGroupNotFound {
  return _tag == DBTEAMGroupMembersRemoveErrorGroupNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupMembersRemoveErrorOther;
}

- (BOOL)isSystemManagedGroupDisallowed {
  return _tag == DBTEAMGroupMembersRemoveErrorSystemManagedGroupDisallowed;
}

- (BOOL)isMemberNotInGroup {
  return _tag == DBTEAMGroupMembersRemoveErrorMemberNotInGroup;
}

- (BOOL)isGroupNotInTeam {
  return _tag == DBTEAMGroupMembersRemoveErrorGroupNotInTeam;
}

- (BOOL)isMembersNotInTeam {
  return _tag == DBTEAMGroupMembersRemoveErrorMembersNotInTeam;
}

- (BOOL)isUsersNotFound {
  return _tag == DBTEAMGroupMembersRemoveErrorUsersNotFound;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupMembersRemoveErrorGroupNotFound:
    return @"DBTEAMGroupMembersRemoveErrorGroupNotFound";
  case DBTEAMGroupMembersRemoveErrorOther:
    return @"DBTEAMGroupMembersRemoveErrorOther";
  case DBTEAMGroupMembersRemoveErrorSystemManagedGroupDisallowed:
    return @"DBTEAMGroupMembersRemoveErrorSystemManagedGroupDisallowed";
  case DBTEAMGroupMembersRemoveErrorMemberNotInGroup:
    return @"DBTEAMGroupMembersRemoveErrorMemberNotInGroup";
  case DBTEAMGroupMembersRemoveErrorGroupNotInTeam:
    return @"DBTEAMGroupMembersRemoveErrorGroupNotInTeam";
  case DBTEAMGroupMembersRemoveErrorMembersNotInTeam:
    return @"DBTEAMGroupMembersRemoveErrorMembersNotInTeam";
  case DBTEAMGroupMembersRemoveErrorUsersNotFound:
    return @"DBTEAMGroupMembersRemoveErrorUsersNotFound";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMembersRemoveErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMembersRemoveErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMembersRemoveErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupMembersRemoveErrorGroupNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersRemoveErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersRemoveErrorSystemManagedGroupDisallowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersRemoveErrorMemberNotInGroup:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersRemoveErrorGroupNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupMembersRemoveErrorMembersNotInTeam:
    result = prime * result + [self.membersNotInTeam hash];
  case DBTEAMGroupMembersRemoveErrorUsersNotFound:
    result = prime * result + [self.usersNotFound hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMembersRemoveError:other];
}

- (BOOL)isEqualToGroupMembersRemoveError:(DBTEAMGroupMembersRemoveError *)aGroupMembersRemoveError {
  if (self == aGroupMembersRemoveError) {
    return YES;
  }
  if (self.tag != aGroupMembersRemoveError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupMembersRemoveErrorGroupNotFound:
    return [[self tagName] isEqual:[aGroupMembersRemoveError tagName]];
  case DBTEAMGroupMembersRemoveErrorOther:
    return [[self tagName] isEqual:[aGroupMembersRemoveError tagName]];
  case DBTEAMGroupMembersRemoveErrorSystemManagedGroupDisallowed:
    return [[self tagName] isEqual:[aGroupMembersRemoveError tagName]];
  case DBTEAMGroupMembersRemoveErrorMemberNotInGroup:
    return [[self tagName] isEqual:[aGroupMembersRemoveError tagName]];
  case DBTEAMGroupMembersRemoveErrorGroupNotInTeam:
    return [[self tagName] isEqual:[aGroupMembersRemoveError tagName]];
  case DBTEAMGroupMembersRemoveErrorMembersNotInTeam:
    return [self.membersNotInTeam isEqual:aGroupMembersRemoveError.membersNotInTeam];
  case DBTEAMGroupMembersRemoveErrorUsersNotFound:
    return [self.usersNotFound isEqual:aGroupMembersRemoveError.usersNotFound];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMembersRemoveErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMembersRemoveError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotFound]) {
    jsonDict[@".tag"] = @"group_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSystemManagedGroupDisallowed]) {
    jsonDict[@".tag"] = @"system_managed_group_disallowed";
  } else if ([valueObj isMemberNotInGroup]) {
    jsonDict[@".tag"] = @"member_not_in_group";
  } else if ([valueObj isGroupNotInTeam]) {
    jsonDict[@".tag"] = @"group_not_in_team";
  } else if ([valueObj isMembersNotInTeam]) {
    jsonDict[@"members_not_in_team"] = [DBArraySerializer serialize:valueObj.membersNotInTeam
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];
    jsonDict[@".tag"] = @"members_not_in_team";
  } else if ([valueObj isUsersNotFound]) {
    jsonDict[@"users_not_found"] = [DBArraySerializer serialize:valueObj.usersNotFound
                                                      withBlock:^id(id elem0) {
                                                        return elem0;
                                                      }];
    jsonDict[@".tag"] = @"users_not_found";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMembersRemoveError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_found"]) {
    return [[DBTEAMGroupMembersRemoveError alloc] initWithGroupNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupMembersRemoveError alloc] initWithOther];
  } else if ([tag isEqualToString:@"system_managed_group_disallowed"]) {
    return [[DBTEAMGroupMembersRemoveError alloc] initWithSystemManagedGroupDisallowed];
  } else if ([tag isEqualToString:@"member_not_in_group"]) {
    return [[DBTEAMGroupMembersRemoveError alloc] initWithMemberNotInGroup];
  } else if ([tag isEqualToString:@"group_not_in_team"]) {
    return [[DBTEAMGroupMembersRemoveError alloc] initWithGroupNotInTeam];
  } else if ([tag isEqualToString:@"members_not_in_team"]) {
    NSArray<NSString *> *membersNotInTeam = [DBArraySerializer deserialize:valueDict[@"members_not_in_team"]
                                                                 withBlock:^id(id elem0) {
                                                                   return elem0;
                                                                 }];
    return [[DBTEAMGroupMembersRemoveError alloc] initWithMembersNotInTeam:membersNotInTeam];
  } else if ([tag isEqualToString:@"users_not_found"]) {
    NSArray<NSString *> *usersNotFound = [DBArraySerializer deserialize:valueDict[@"users_not_found"]
                                                              withBlock:^id(id elem0) {
                                                                return elem0;
                                                              }];
    return [[DBTEAMGroupMembersRemoveError alloc] initWithUsersNotFound:usersNotFound];
  } else {
    return [[DBTEAMGroupMembersRemoveError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMembersSelector.h"
#import "DBTEAMGroupSelector.h"
#import "DBTEAMUsersSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMGroupMembersSelector

#pragma mark - Constructors

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group users:(DBTEAMUsersSelectorArg *)users {
  [DBStoneValidators nonnullValidator:nil](group);
  [DBStoneValidators nonnullValidator:nil](users);

  self = [super init];
  if (self) {
    _group = group;
    _users = users;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMembersSelectorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMembersSelectorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMembersSelectorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.group hash];
  result = prime * result + [self.users hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMembersSelector:other];
}

- (BOOL)isEqualToGroupMembersSelector:(DBTEAMGroupMembersSelector *)aGroupMembersSelector {
  if (self == aGroupMembersSelector) {
    return YES;
  }
  if (![self.group isEqual:aGroupMembersSelector.group]) {
    return NO;
  }
  if (![self.users isEqual:aGroupMembersSelector.users]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMembersSelectorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMembersSelector *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group"] = [DBTEAMGroupSelectorSerializer serialize:valueObj.group];
  jsonDict[@"users"] = [DBTEAMUsersSelectorArgSerializer serialize:valueObj.users];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMembersSelector *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMGroupSelector *group = [DBTEAMGroupSelectorSerializer deserialize:valueDict[@"group"]];
  DBTEAMUsersSelectorArg *users = [DBTEAMUsersSelectorArgSerializer deserialize:valueDict[@"users"]];

  return [[DBTEAMGroupMembersSelector alloc] initWithGroup:group users:users];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupAccessType.h"
#import "DBTEAMGroupMemberSelector.h"
#import "DBTEAMGroupMembersSetAccessTypeArg.h"
#import "DBTEAMGroupSelector.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMGroupMembersSetAccessTypeArg

#pragma mark - Constructors

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group
                         user:(DBTEAMUserSelectorArg *)user
                   accessType:(DBTEAMGroupAccessType *)accessType
                returnMembers:(NSNumber *)returnMembers {
  [DBStoneValidators nonnullValidator:nil](group);
  [DBStoneValidators nonnullValidator:nil](user);
  [DBStoneValidators nonnullValidator:nil](accessType);

  self = [super initWithGroup:group user:user];
  if (self) {
    _accessType = accessType;
    _returnMembers = returnMembers ?: @YES;
  }
  return self;
}

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group
                         user:(DBTEAMUserSelectorArg *)user
                   accessType:(DBTEAMGroupAccessType *)accessType {
  return [self initWithGroup:group user:user accessType:accessType returnMembers:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupMembersSetAccessTypeArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupMembersSetAccessTypeArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupMembersSetAccessTypeArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.group hash];
  result = prime * result + [self.user hash];
  result = prime * result + [self.accessType hash];
  result = prime * result + [self.returnMembers hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMembersSetAccessTypeArg:other];
}

- (BOOL)isEqualToGroupMembersSetAccessTypeArg:(DBTEAMGroupMembersSetAccessTypeArg *)aGroupMembersSetAccessTypeArg {
  if (self == aGroupMembersSetAccessTypeArg) {
    return YES;
  }
  if (![self.group isEqual:aGroupMembersSetAccessTypeArg.group]) {
    return NO;
  }
  if (![self.user isEqual:aGroupMembersSetAccessTypeArg.user]) {
    return NO;
  }
  if (![self.accessType isEqual:aGroupMembersSetAccessTypeArg.accessType]) {
    return NO;
  }
  if (![self.returnMembers isEqual:aGroupMembersSetAccessTypeArg.returnMembers]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupMembersSetAccessTypeArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupMembersSetAccessTypeArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group"] = [DBTEAMGroupSelectorSerializer serialize:valueObj.group];
  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];
  jsonDict[@"access_type"] = [DBTEAMGroupAccessTypeSerializer serialize:valueObj.accessType];
  jsonDict[@"return_members"] = valueObj.returnMembers;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupMembersSetAccessTypeArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMGroupSelector *group = [DBTEAMGroupSelectorSerializer deserialize:valueDict[@"group"]];
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];
  DBTEAMGroupAccessType *accessType = [DBTEAMGroupAccessTypeSerializer deserialize:valueDict[@"access_type"]];
  NSNumber *returnMembers = valueDict[@"return_members"] ?: @YES;

  return [[DBTEAMGroupMembersSetAccessTypeArg alloc] initWithGroup:group
                                                              user:user
                                                        accessType:accessType
                                                     returnMembers:returnMembers];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupSelector.h"

#pragma mark - API Object

@implementation DBTEAMGroupSelector

@synthesize groupId = _groupId;
@synthesize groupExternalId = _groupExternalId;

#pragma mark - Constructors

- (instancetype)initWithGroupId:(NSString *)groupId {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupSelectorGroupId;
    _groupId = groupId;
  }
  return self;
}

- (instancetype)initWithGroupExternalId:(NSString *)groupExternalId {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupSelectorGroupExternalId;
    _groupExternalId = groupExternalId;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)groupId {
  if (![self isGroupId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMGroupSelectorGroupId, but was %@.", [self tagName]];
  }
  return _groupId;
}

- (NSString *)groupExternalId {
  if (![self isGroupExternalId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMGroupSelectorGroupExternalId, but was %@.", [self tagName]];
  }
  return _groupExternalId;
}

#pragma mark - Tag state methods

- (BOOL)isGroupId {
  return _tag == DBTEAMGroupSelectorGroupId;
}

- (BOOL)isGroupExternalId {
  return _tag == DBTEAMGroupSelectorGroupExternalId;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupSelectorGroupId:
    return @"DBTEAMGroupSelectorGroupId";
  case DBTEAMGroupSelectorGroupExternalId:
    return @"DBTEAMGroupSelectorGroupExternalId";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupSelectorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupSelectorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupSelectorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupSelectorGroupId:
    result = prime * result + [self.groupId hash];
  case DBTEAMGroupSelectorGroupExternalId:
    result = prime * result + [self.groupExternalId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupSelector:other];
}

- (BOOL)isEqualToGroupSelector:(DBTEAMGroupSelector *)aGroupSelector {
  if (self == aGroupSelector) {
    return YES;
  }
  if (self.tag != aGroupSelector.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupSelectorGroupId:
    return [self.groupId isEqual:aGroupSelector.groupId];
  case DBTEAMGroupSelectorGroupExternalId:
    return [self.groupExternalId isEqual:aGroupSelector.groupExternalId];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupSelectorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupSelector *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupId]) {
    jsonDict[@"group_id"] = valueObj.groupId;
    jsonDict[@".tag"] = @"group_id";
  } else if ([valueObj isGroupExternalId]) {
    jsonDict[@"group_external_id"] = valueObj.groupExternalId;
    jsonDict[@".tag"] = @"group_external_id";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupSelector *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_id"]) {
    NSString *groupId = valueDict[@"group_id"];
    return [[DBTEAMGroupSelector alloc] initWithGroupId:groupId];
  } else if ([tag isEqualToString:@"group_external_id"]) {
    NSString *groupExternalId = valueDict[@"group_external_id"];
    return [[DBTEAMGroupSelector alloc] initWithGroupExternalId:groupExternalId];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONGroupManagementType.h"
#import "DBTEAMGroupSelector.h"
#import "DBTEAMGroupUpdateArgs.h"
#import "DBTEAMIncludeMembersArg.h"

#pragma mark - API Object

@implementation DBTEAMGroupUpdateArgs

#pragma mark - Constructors

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group
                returnMembers:(NSNumber *)returnMembers
                dNewGroupName:(NSString *)dNewGroupName
          dNewGroupExternalId:(NSString *)dNewGroupExternalId
      dNewGroupManagementType:(DBTEAMCOMMONGroupManagementType *)dNewGroupManagementType {
  [DBStoneValidators nonnullValidator:nil](group);

  self = [super initWithReturnMembers:returnMembers];
  if (self) {
    _group = group;
    _dNewGroupName = dNewGroupName;
    _dNewGroupExternalId = dNewGroupExternalId;
    _dNewGroupManagementType = dNewGroupManagementType;
  }
  return self;
}

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group {
  return [self initWithGroup:group
                returnMembers:nil
                dNewGroupName:nil
          dNewGroupExternalId:nil
      dNewGroupManagementType:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupUpdateArgsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupUpdateArgsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupUpdateArgsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.group hash];
  result = prime * result + [self.returnMembers hash];
  if (self.dNewGroupName != nil) {
    result = prime * result + [self.dNewGroupName hash];
  }
  if (self.dNewGroupExternalId != nil) {
    result = prime * result + [self.dNewGroupExternalId hash];
  }
  if (self.dNewGroupManagementType != nil) {
    result = prime * result + [self.dNewGroupManagementType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupUpdateArgs:other];
}

- (BOOL)isEqualToGroupUpdateArgs:(DBTEAMGroupUpdateArgs *)aGroupUpdateArgs {
  if (self == aGroupUpdateArgs) {
    return YES;
  }
  if (![self.group isEqual:aGroupUpdateArgs.group]) {
    return NO;
  }
  if (![self.returnMembers isEqual:aGroupUpdateArgs.returnMembers]) {
    return NO;
  }
  if (self.dNewGroupName) {
    if (![self.dNewGroupName isEqual:aGroupUpdateArgs.dNewGroupName]) {
      return NO;
    }
  }
  if (self.dNewGroupExternalId) {
    if (![self.dNewGroupExternalId isEqual:aGroupUpdateArgs.dNewGroupExternalId]) {
      return NO;
    }
  }
  if (self.dNewGroupManagementType) {
    if (![self.dNewGroupManagementType isEqual:aGroupUpdateArgs.dNewGroupManagementType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupUpdateArgsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupUpdateArgs *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group"] = [DBTEAMGroupSelectorSerializer serialize:valueObj.group];
  jsonDict[@"return_members"] = valueObj.returnMembers;
  if (valueObj.dNewGroupName) {
    jsonDict[@"new_group_name"] = valueObj.dNewGroupName;
  }
  if (valueObj.dNewGroupExternalId) {
    jsonDict[@"new_group_external_id"] = valueObj.dNewGroupExternalId;
  }
  if (valueObj.dNewGroupManagementType) {
    jsonDict[@"new_group_management_type"] =
        [DBTEAMCOMMONGroupManagementTypeSerializer serialize:valueObj.dNewGroupManagementType];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupUpdateArgs *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMGroupSelector *group = [DBTEAMGroupSelectorSerializer deserialize:valueDict[@"group"]];
  NSNumber *returnMembers = valueDict[@"return_members"] ?: @YES;
  NSString *dNewGroupName = valueDict[@"new_group_name"] ?: nil;
  NSString *dNewGroupExternalId = valueDict[@"new_group_external_id"] ?: nil;
  DBTEAMCOMMONGroupManagementType *dNewGroupManagementType =
      valueDict[@"new_group_management_type"]
          ? [DBTEAMCOMMONGroupManagementTypeSerializer deserialize:valueDict[@"new_group_management_type"]]
          : nil;

  return [[DBTEAMGroupUpdateArgs alloc] initWithGroup:group
                                        returnMembers:returnMembers
                                        dNewGroupName:dNewGroupName
                                  dNewGroupExternalId:dNewGroupExternalId
                              dNewGroupManagementType:dNewGroupManagementType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupSelectorWithTeamGroupError.h"
#import "DBTEAMGroupUpdateError.h"

#pragma mark - API Object

@implementation DBTEAMGroupUpdateError

#pragma mark - Constructors

- (instancetype)initWithGroupNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupUpdateErrorGroupNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupUpdateErrorOther;
  }
  return self;
}

- (instancetype)initWithSystemManagedGroupDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupUpdateErrorSystemManagedGroupDisallowed;
  }
  return self;
}

- (instancetype)initWithGroupNameAlreadyUsed {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupUpdateErrorGroupNameAlreadyUsed;
  }
  return self;
}

- (instancetype)initWithGroupNameInvalid {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupUpdateErrorGroupNameInvalid;
  }
  return self;
}

- (instancetype)initWithExternalIdAlreadyInUse {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupUpdateErrorExternalIdAlreadyInUse;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGroupNotFound {
  return _tag == DBTEAMGroupUpdateErrorGroupNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupUpdateErrorOther;
}

- (BOOL)isSystemManagedGroupDisallowed {
  return _tag == DBTEAMGroupUpdateErrorSystemManagedGroupDisallowed;
}

- (BOOL)isGroupNameAlreadyUsed {
  return _tag == DBTEAMGroupUpdateErrorGroupNameAlreadyUsed;
}

- (BOOL)isGroupNameInvalid {
  return _tag == DBTEAMGroupUpdateErrorGroupNameInvalid;
}

- (BOOL)isExternalIdAlreadyInUse {
  return _tag == DBTEAMGroupUpdateErrorExternalIdAlreadyInUse;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupUpdateErrorGroupNotFound:
    return @"DBTEAMGroupUpdateErrorGroupNotFound";
  case DBTEAMGroupUpdateErrorOther:
    return @"DBTEAMGroupUpdateErrorOther";
  case DBTEAMGroupUpdateErrorSystemManagedGroupDisallowed:
    return @"DBTEAMGroupUpdateErrorSystemManagedGroupDisallowed";
  case DBTEAMGroupUpdateErrorGroupNameAlreadyUsed:
    return @"DBTEAMGroupUpdateErrorGroupNameAlreadyUsed";
  case DBTEAMGroupUpdateErrorGroupNameInvalid:
    return @"DBTEAMGroupUpdateErrorGroupNameInvalid";
  case DBTEAMGroupUpdateErrorExternalIdAlreadyInUse:
    return @"DBTEAMGroupUpdateErrorExternalIdAlreadyInUse";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupUpdateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupUpdateErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupUpdateErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupUpdateErrorGroupNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupUpdateErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupUpdateErrorSystemManagedGroupDisallowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupUpdateErrorGroupNameAlreadyUsed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupUpdateErrorGroupNameInvalid:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupUpdateErrorExternalIdAlreadyInUse:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupUpdateError:other];
}

- (BOOL)isEqualToGroupUpdateError:(DBTEAMGroupUpdateError *)aGroupUpdateError {
  if (self == aGroupUpdateError) {
    return YES;
  }
  if (self.tag != aGroupUpdateError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupUpdateErrorGroupNotFound:
    return [[self tagName] isEqual:[aGroupUpdateError tagName]];
  case DBTEAMGroupUpdateErrorOther:
    return [[self tagName] isEqual:[aGroupUpdateError tagName]];
  case DBTEAMGroupUpdateErrorSystemManagedGroupDisallowed:
    return [[self tagName] isEqual:[aGroupUpdateError tagName]];
  case DBTEAMGroupUpdateErrorGroupNameAlreadyUsed:
    return [[self tagName] isEqual:[aGroupUpdateError tagName]];
  case DBTEAMGroupUpdateErrorGroupNameInvalid:
    return [[self tagName] isEqual:[aGroupUpdateError tagName]];
  case DBTEAMGroupUpdateErrorExternalIdAlreadyInUse:
    return [[self tagName] isEqual:[aGroupUpdateError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupUpdateErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupUpdateError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotFound]) {
    jsonDict[@".tag"] = @"group_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSystemManagedGroupDisallowed]) {
    jsonDict[@".tag"] = @"system_managed_group_disallowed";
  } else if ([valueObj isGroupNameAlreadyUsed]) {
    jsonDict[@".tag"] = @"group_name_already_used";
  } else if ([valueObj isGroupNameInvalid]) {
    jsonDict[@".tag"] = @"group_name_invalid";
  } else if ([valueObj isExternalIdAlreadyInUse]) {
    jsonDict[@".tag"] = @"external_id_already_in_use";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupUpdateError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_found"]) {
    return [[DBTEAMGroupUpdateError alloc] initWithGroupNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupUpdateError alloc] initWithOther];
  } else if ([tag isEqualToString:@"system_managed_group_disallowed"]) {
    return [[DBTEAMGroupUpdateError alloc] initWithSystemManagedGroupDisallowed];
  } else if ([tag isEqualToString:@"group_name_already_used"]) {
    return [[DBTEAMGroupUpdateError alloc] initWithGroupNameAlreadyUsed];
  } else if ([tag isEqualToString:@"group_name_invalid"]) {
    return [[DBTEAMGroupUpdateError alloc] initWithGroupNameInvalid];
  } else if ([tag isEqualToString:@"external_id_already_in_use"]) {
    return [[DBTEAMGroupUpdateError alloc] initWithExternalIdAlreadyInUse];
  } else {
    return [[DBTEAMGroupUpdateError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupsGetInfoError.h"

#pragma mark - API Object

@implementation DBTEAMGroupsGetInfoError

#pragma mark - Constructors

- (instancetype)initWithGroupNotOnTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsGetInfoErrorGroupNotOnTeam;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsGetInfoErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGroupNotOnTeam {
  return _tag == DBTEAMGroupsGetInfoErrorGroupNotOnTeam;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupsGetInfoErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupsGetInfoErrorGroupNotOnTeam:
    return @"DBTEAMGroupsGetInfoErrorGroupNotOnTeam";
  case DBTEAMGroupsGetInfoErrorOther:
    return @"DBTEAMGroupsGetInfoErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsGetInfoErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsGetInfoErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsGetInfoErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupsGetInfoErrorGroupNotOnTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupsGetInfoErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsGetInfoError:other];
}

- (BOOL)isEqualToGroupsGetInfoError:(DBTEAMGroupsGetInfoError *)aGroupsGetInfoError {
  if (self == aGroupsGetInfoError) {
    return YES;
  }
  if (self.tag != aGroupsGetInfoError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupsGetInfoErrorGroupNotOnTeam:
    return [[self tagName] isEqual:[aGroupsGetInfoError tagName]];
  case DBTEAMGroupsGetInfoErrorOther:
    return [[self tagName] isEqual:[aGroupsGetInfoError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsGetInfoErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsGetInfoError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupNotOnTeam]) {
    jsonDict[@".tag"] = @"group_not_on_team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsGetInfoError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_not_on_team"]) {
    return [[DBTEAMGroupsGetInfoError alloc] initWithGroupNotOnTeam];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupsGetInfoError alloc] initWithOther];
  } else {
    return [[DBTEAMGroupsGetInfoError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupFullInfo.h"
#import "DBTEAMGroupsGetInfoItem.h"

#pragma mark - API Object

@implementation DBTEAMGroupsGetInfoItem

@synthesize idNotFound = _idNotFound;
@synthesize groupInfo = _groupInfo;

#pragma mark - Constructors

- (instancetype)initWithIdNotFound:(NSString *)idNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsGetInfoItemIdNotFound;
    _idNotFound = idNotFound;
  }
  return self;
}

- (instancetype)initWithGroupInfo:(DBTEAMGroupFullInfo *)groupInfo {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsGetInfoItemGroupInfo;
    _groupInfo = groupInfo;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)idNotFound {
  if (![self isIdNotFound]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMGroupsGetInfoItemIdNotFound, but was %@.", [self tagName]];
  }
  return _idNotFound;
}

- (DBTEAMGroupFullInfo *)groupInfo {
  if (![self isGroupInfo]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMGroupsGetInfoItemGroupInfo, but was %@.", [self tagName]];
  }
  return _groupInfo;
}

#pragma mark - Tag state methods

- (BOOL)isIdNotFound {
  return _tag == DBTEAMGroupsGetInfoItemIdNotFound;
}

- (BOOL)isGroupInfo {
  return _tag == DBTEAMGroupsGetInfoItemGroupInfo;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupsGetInfoItemIdNotFound:
    return @"DBTEAMGroupsGetInfoItemIdNotFound";
  case DBTEAMGroupsGetInfoItemGroupInfo:
    return @"DBTEAMGroupsGetInfoItemGroupInfo";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsGetInfoItemSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsGetInfoItemSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsGetInfoItemSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupsGetInfoItemIdNotFound:
    result = prime * result + [self.idNotFound hash];
  case DBTEAMGroupsGetInfoItemGroupInfo:
    result = prime * result + [self.groupInfo hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsGetInfoItem:other];
}

- (BOOL)isEqualToGroupsGetInfoItem:(DBTEAMGroupsGetInfoItem *)aGroupsGetInfoItem {
  if (self == aGroupsGetInfoItem) {
    return YES;
  }
  if (self.tag != aGroupsGetInfoItem.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupsGetInfoItemIdNotFound:
    return [self.idNotFound isEqual:aGroupsGetInfoItem.idNotFound];
  case DBTEAMGroupsGetInfoItemGroupInfo:
    return [self.groupInfo isEqual:aGroupsGetInfoItem.groupInfo];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsGetInfoItemSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsGetInfoItem *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isIdNotFound]) {
    jsonDict[@"id_not_found"] = valueObj.idNotFound;
    jsonDict[@".tag"] = @"id_not_found";
  } else if ([valueObj isGroupInfo]) {
    jsonDict = [[DBTEAMGroupFullInfoSerializer serialize:valueObj.groupInfo] mutableCopy];
    jsonDict[@".tag"] = @"group_info";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsGetInfoItem *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"id_not_found"]) {
    NSString *idNotFound = valueDict[@"id_not_found"];
    return [[DBTEAMGroupsGetInfoItem alloc] initWithIdNotFound:idNotFound];
  } else if ([tag isEqualToString:@"group_info"]) {
    DBTEAMGroupFullInfo *groupInfo = [DBTEAMGroupFullInfoSerializer deserialize:valueDict];
    return [[DBTEAMGroupsGetInfoItem alloc] initWithGroupInfo:groupInfo];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupsListArg.h"

#pragma mark - API Object

@implementation DBTEAMGroupsListArg

#pragma mark - Constructors

- (instancetype)initWithLimit:(NSNumber *)limit {

  self = [super init];
  if (self) {
    _limit = limit ?: @(1000);
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithLimit:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsListArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsListArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsListArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.limit hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsListArg:other];
}

- (BOOL)isEqualToGroupsListArg:(DBTEAMGroupsListArg *)aGroupsListArg {
  if (self == aGroupsListArg) {
    return YES;
  }
  if (![self.limit isEqual:aGroupsListArg.limit]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsListArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsListArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"limit"] = valueObj.limit;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsListArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);

  return [[DBTEAMGroupsListArg alloc] initWithLimit:limit];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupsListContinueArg.h"

#pragma mark - API Object

@implementation DBTEAMGroupsListContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {
  [DBStoneValidators nonnullValidator:nil](cursor);

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsListContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsListContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsListContinueArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.cursor hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsListContinueArg:other];
}

- (BOOL)isEqualToGroupsListContinueArg:(DBTEAMGroupsListContinueArg *)aGroupsListContinueArg {
  if (self == aGroupsListContinueArg) {
    return YES;
  }
  if (![self.cursor isEqual:aGroupsListContinueArg.cursor]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsListContinueArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsListContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsListContinueArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBTEAMGroupsListContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupsListContinueError.h"

#pragma mark - API Object

@implementation DBTEAMGroupsListContinueError

#pragma mark - Constructors

- (instancetype)initWithInvalidCursor {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsListContinueErrorInvalidCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsListContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidCursor {
  return _tag == DBTEAMGroupsListContinueErrorInvalidCursor;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupsListContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupsListContinueErrorInvalidCursor:
    return @"DBTEAMGroupsListContinueErrorInvalidCursor";
  case DBTEAMGroupsListContinueErrorOther:
    return @"DBTEAMGroupsListContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsListContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsListContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsListContinueErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupsListContinueErrorInvalidCursor:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupsListContinueErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsListContinueError:other];
}

- (BOOL)isEqualToGroupsListContinueError:(DBTEAMGroupsListContinueError *)aGroupsListContinueError {
  if (self == aGroupsListContinueError) {
    return YES;
  }
  if (self.tag != aGroupsListContinueError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupsListContinueErrorInvalidCursor:
    return [[self tagName] isEqual:[aGroupsListContinueError tagName]];
  case DBTEAMGroupsListContinueErrorOther:
    return [[self tagName] isEqual:[aGroupsListContinueError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsListContinueErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsListContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidCursor]) {
    jsonDict[@".tag"] = @"invalid_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsListContinueError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_cursor"]) {
    return [[DBTEAMGroupsListContinueError alloc] initWithInvalidCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupsListContinueError alloc] initWithOther];
  } else {
    return [[DBTEAMGroupsListContinueError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONGroupSummary.h"
#import "DBTEAMGroupsListResult.h"

#pragma mark - API Object

@implementation DBTEAMGroupsListResult

#pragma mark - Constructors

- (instancetype)initWithGroups:(NSArray<DBTEAMCOMMONGroupSummary *> *)groups
                        cursor:(NSString *)cursor
                       hasMore:(NSNumber *)hasMore {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](groups);
  [DBStoneValidators nonnullValidator:nil](cursor);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _groups = groups;
    _cursor = cursor;
    _hasMore = hasMore;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsListResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsListResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsListResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groups hash];
  result = prime * result + [self.cursor hash];
  result = prime * result + [self.hasMore hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsListResult:other];
}

- (BOOL)isEqualToGroupsListResult:(DBTEAMGroupsListResult *)aGroupsListResult {
  if (self == aGroupsListResult) {
    return YES;
  }
  if (![self.groups isEqual:aGroupsListResult.groups]) {
    return NO;
  }
  if (![self.cursor isEqual:aGroupsListResult.cursor]) {
    return NO;
  }
  if (![self.hasMore isEqual:aGroupsListResult.hasMore]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsListResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsListResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"groups"] = [DBArraySerializer serialize:valueObj.groups
                                           withBlock:^id(id elem0) {
                                             return [DBTEAMCOMMONGroupSummarySerializer serialize:elem0];
                                           }];
  jsonDict[@"cursor"] = valueObj.cursor;
  jsonDict[@"has_more"] = valueObj.hasMore;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsListResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMCOMMONGroupSummary *> *groups =
      [DBArraySerializer deserialize:valueDict[@"groups"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMCOMMONGroupSummarySerializer deserialize:elem0];
                           }];
  NSString *cursor = valueDict[@"cursor"];
  NSNumber *hasMore = valueDict[@"has_more"];

  return [[DBTEAMGroupsListResult alloc] initWithGroups:groups cursor:cursor hasMore:hasMore];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupSelector.h"
#import "DBTEAMGroupsMembersListArg.h"

#pragma mark - API Object

@implementation DBTEAMGroupsMembersListArg

#pragma mark - Constructors

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group limit:(NSNumber *)limit {
  [DBStoneValidators nonnullValidator:nil](group);

  self = [super init];
  if (self) {
    _group = group;
    _limit = limit ?: @(1000);
  }
  return self;
}

- (instancetype)initWithGroup:(DBTEAMGroupSelector *)group {
  return [self initWithGroup:group limit:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsMembersListArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsMembersListArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsMembersListArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.group hash];
  result = prime * result + [self.limit hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsMembersListArg:other];
}

- (BOOL)isEqualToGroupsMembersListArg:(DBTEAMGroupsMembersListArg *)aGroupsMembersListArg {
  if (self == aGroupsMembersListArg) {
    return YES;
  }
  if (![self.group isEqual:aGroupsMembersListArg.group]) {
    return NO;
  }
  if (![self.limit isEqual:aGroupsMembersListArg.limit]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsMembersListArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsMembersListArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group"] = [DBTEAMGroupSelectorSerializer serialize:valueObj.group];
  jsonDict[@"limit"] = valueObj.limit;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsMembersListArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMGroupSelector *group = [DBTEAMGroupSelectorSerializer deserialize:valueDict[@"group"]];
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);

  return [[DBTEAMGroupsMembersListArg alloc] initWithGroup:group limit:limit];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupsMembersListContinueArg.h"

#pragma mark - API Object

@implementation DBTEAMGroupsMembersListContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {
  [DBStoneValidators nonnullValidator:nil](cursor);

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsMembersListContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsMembersListContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsMembersListContinueArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.cursor hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsMembersListContinueArg:other];
}

- (BOOL)isEqualToGroupsMembersListContinueArg:(DBTEAMGroupsMembersListContinueArg *)aGroupsMembersListContinueArg {
  if (self == aGroupsMembersListContinueArg) {
    return YES;
  }
  if (![self.cursor isEqual:aGroupsMembersListContinueArg.cursor]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsMembersListContinueArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsMembersListContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsMembersListContinueArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBTEAMGroupsMembersListContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupsMembersListContinueError.h"

#pragma mark - API Object

@implementation DBTEAMGroupsMembersListContinueError

#pragma mark - Constructors

- (instancetype)initWithInvalidCursor {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsMembersListContinueErrorInvalidCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsMembersListContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidCursor {
  return _tag == DBTEAMGroupsMembersListContinueErrorInvalidCursor;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupsMembersListContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupsMembersListContinueErrorInvalidCursor:
    return @"DBTEAMGroupsMembersListContinueErrorInvalidCursor";
  case DBTEAMGroupsMembersListContinueErrorOther:
    return @"DBTEAMGroupsMembersListContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsMembersListContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsMembersListContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsMembersListContinueErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupsMembersListContinueErrorInvalidCursor:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupsMembersListContinueErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsMembersListContinueError:other];
}

- (BOOL)isEqualToGroupsMembersListContinueError:
    (DBTEAMGroupsMembersListContinueError *)aGroupsMembersListContinueError {
  if (self == aGroupsMembersListContinueError) {
    return YES;
  }
  if (self.tag != aGroupsMembersListContinueError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupsMembersListContinueErrorInvalidCursor:
    return [[self tagName] isEqual:[aGroupsMembersListContinueError tagName]];
  case DBTEAMGroupsMembersListContinueErrorOther:
    return [[self tagName] isEqual:[aGroupsMembersListContinueError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsMembersListContinueErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsMembersListContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidCursor]) {
    jsonDict[@".tag"] = @"invalid_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsMembersListContinueError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_cursor"]) {
    return [[DBTEAMGroupsMembersListContinueError alloc] initWithInvalidCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupsMembersListContinueError alloc] initWithOther];
  } else {
    return [[DBTEAMGroupsMembersListContinueError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupMemberInfo.h"
#import "DBTEAMGroupsMembersListResult.h"

#pragma mark - API Object

@implementation DBTEAMGroupsMembersListResult

#pragma mark - Constructors

- (instancetype)initWithMembers:(NSArray<DBTEAMGroupMemberInfo *> *)members
                         cursor:(NSString *)cursor
                        hasMore:(NSNumber *)hasMore {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](members);
  [DBStoneValidators nonnullValidator:nil](cursor);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _members = members;
    _cursor = cursor;
    _hasMore = hasMore;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsMembersListResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsMembersListResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsMembersListResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.members hash];
  result = prime * result + [self.cursor hash];
  result = prime * result + [self.hasMore hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsMembersListResult:other];
}

- (BOOL)isEqualToGroupsMembersListResult:(DBTEAMGroupsMembersListResult *)aGroupsMembersListResult {
  if (self == aGroupsMembersListResult) {
    return YES;
  }
  if (![self.members isEqual:aGroupsMembersListResult.members]) {
    return NO;
  }
  if (![self.cursor isEqual:aGroupsMembersListResult.cursor]) {
    return NO;
  }
  if (![self.hasMore isEqual:aGroupsMembersListResult.hasMore]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsMembersListResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsMembersListResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"members"] = [DBArraySerializer serialize:valueObj.members
                                            withBlock:^id(id elem0) {
                                              return [DBTEAMGroupMemberInfoSerializer serialize:elem0];
                                            }];
  jsonDict[@"cursor"] = valueObj.cursor;
  jsonDict[@"has_more"] = valueObj.hasMore;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsMembersListResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMGroupMemberInfo *> *members =
      [DBArraySerializer deserialize:valueDict[@"members"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMGroupMemberInfoSerializer deserialize:elem0];
                           }];
  NSString *cursor = valueDict[@"cursor"];
  NSNumber *hasMore = valueDict[@"has_more"];

  return [[DBTEAMGroupsMembersListResult alloc] initWithMembers:members cursor:cursor hasMore:hasMore];
}

@end

#import "DBASYNCPollError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupsPollError.h"

#pragma mark - API Object

@implementation DBTEAMGroupsPollError

#pragma mark - Constructors

- (instancetype)initWithInvalidAsyncJobId {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsPollErrorInvalidAsyncJobId;
  }
  return self;
}

- (instancetype)initWithInternalError {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsPollErrorInternalError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsPollErrorOther;
  }
  return self;
}

- (instancetype)initWithAccessDenied {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsPollErrorAccessDenied;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidAsyncJobId {
  return _tag == DBTEAMGroupsPollErrorInvalidAsyncJobId;
}

- (BOOL)isInternalError {
  return _tag == DBTEAMGroupsPollErrorInternalError;
}

- (BOOL)isOther {
  return _tag == DBTEAMGroupsPollErrorOther;
}

- (BOOL)isAccessDenied {
  return _tag == DBTEAMGroupsPollErrorAccessDenied;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupsPollErrorInvalidAsyncJobId:
    return @"DBTEAMGroupsPollErrorInvalidAsyncJobId";
  case DBTEAMGroupsPollErrorInternalError:
    return @"DBTEAMGroupsPollErrorInternalError";
  case DBTEAMGroupsPollErrorOther:
    return @"DBTEAMGroupsPollErrorOther";
  case DBTEAMGroupsPollErrorAccessDenied:
    return @"DBTEAMGroupsPollErrorAccessDenied";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsPollErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsPollErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsPollErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupsPollErrorInvalidAsyncJobId:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupsPollErrorInternalError:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupsPollErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMGroupsPollErrorAccessDenied:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsPollError:other];
}

- (BOOL)isEqualToGroupsPollError:(DBTEAMGroupsPollError *)aGroupsPollError {
  if (self == aGroupsPollError) {
    return YES;
  }
  if (self.tag != aGroupsPollError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupsPollErrorInvalidAsyncJobId:
    return [[self tagName] isEqual:[aGroupsPollError tagName]];
  case DBTEAMGroupsPollErrorInternalError:
    return [[self tagName] isEqual:[aGroupsPollError tagName]];
  case DBTEAMGroupsPollErrorOther:
    return [[self tagName] isEqual:[aGroupsPollError tagName]];
  case DBTEAMGroupsPollErrorAccessDenied:
    return [[self tagName] isEqual:[aGroupsPollError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsPollErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsPollError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidAsyncJobId]) {
    jsonDict[@".tag"] = @"invalid_async_job_id";
  } else if ([valueObj isInternalError]) {
    jsonDict[@".tag"] = @"internal_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isAccessDenied]) {
    jsonDict[@".tag"] = @"access_denied";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsPollError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_async_job_id"]) {
    return [[DBTEAMGroupsPollError alloc] initWithInvalidAsyncJobId];
  } else if ([tag isEqualToString:@"internal_error"]) {
    return [[DBTEAMGroupsPollError alloc] initWithInternalError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMGroupsPollError alloc] initWithOther];
  } else if ([tag isEqualToString:@"access_denied"]) {
    return [[DBTEAMGroupsPollError alloc] initWithAccessDenied];
  } else {
    return [[DBTEAMGroupsPollError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupsSelector.h"

#pragma mark - API Object

@implementation DBTEAMGroupsSelector

@synthesize groupIds = _groupIds;
@synthesize groupExternalIds = _groupExternalIds;

#pragma mark - Constructors

- (instancetype)initWithGroupIds:(NSArray<NSString *> *)groupIds {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsSelectorGroupIds;
    _groupIds = groupIds;
  }
  return self;
}

- (instancetype)initWithGroupExternalIds:(NSArray<NSString *> *)groupExternalIds {
  self = [super init];
  if (self) {
    _tag = DBTEAMGroupsSelectorGroupExternalIds;
    _groupExternalIds = groupExternalIds;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSArray<NSString *> *)groupIds {
  if (![self isGroupIds]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMGroupsSelectorGroupIds, but was %@.", [self tagName]];
  }
  return _groupIds;
}

- (NSArray<NSString *> *)groupExternalIds {
  if (![self isGroupExternalIds]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMGroupsSelectorGroupExternalIds, but was %@.", [self tagName]];
  }
  return _groupExternalIds;
}

#pragma mark - Tag state methods

- (BOOL)isGroupIds {
  return _tag == DBTEAMGroupsSelectorGroupIds;
}

- (BOOL)isGroupExternalIds {
  return _tag == DBTEAMGroupsSelectorGroupExternalIds;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMGroupsSelectorGroupIds:
    return @"DBTEAMGroupsSelectorGroupIds";
  case DBTEAMGroupsSelectorGroupExternalIds:
    return @"DBTEAMGroupsSelectorGroupExternalIds";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMGroupsSelectorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMGroupsSelectorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMGroupsSelectorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMGroupsSelectorGroupIds:
    result = prime * result + [self.groupIds hash];
  case DBTEAMGroupsSelectorGroupExternalIds:
    result = prime * result + [self.groupExternalIds hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsSelector:other];
}

- (BOOL)isEqualToGroupsSelector:(DBTEAMGroupsSelector *)aGroupsSelector {
  if (self == aGroupsSelector) {
    return YES;
  }
  if (self.tag != aGroupsSelector.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMGroupsSelectorGroupIds:
    return [self.groupIds isEqual:aGroupsSelector.groupIds];
  case DBTEAMGroupsSelectorGroupExternalIds:
    return [self.groupExternalIds isEqual:aGroupsSelector.groupExternalIds];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMGroupsSelectorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMGroupsSelector *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGroupIds]) {
    jsonDict[@"group_ids"] = [DBArraySerializer serialize:valueObj.groupIds
                                                withBlock:^id(id elem0) {
                                                  return elem0;
                                                }];
    jsonDict[@".tag"] = @"group_ids";
  } else if ([valueObj isGroupExternalIds]) {
    jsonDict[@"group_external_ids"] = [DBArraySerializer serialize:valueObj.groupExternalIds
                                                         withBlock:^id(id elem0) {
                                                           return elem0;
                                                         }];
    jsonDict[@".tag"] = @"group_external_ids";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMGroupsSelector *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"group_ids"]) {
    NSArray<NSString *> *groupIds = [DBArraySerializer deserialize:valueDict[@"group_ids"]
                                                         withBlock:^id(id elem0) {
                                                           return elem0;
                                                         }];
    return [[DBTEAMGroupsSelector alloc] initWithGroupIds:groupIds];
  } else if ([tag isEqualToString:@"group_external_ids"]) {
    NSArray<NSString *> *groupExternalIds = [DBArraySerializer deserialize:valueDict[@"group_external_ids"]
                                                                 withBlock:^id(id elem0) {
                                                                   return elem0;
                                                                 }];
    return [[DBTEAMGroupsSelector alloc] initWithGroupExternalIds:groupExternalIds];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMHasTeamFileEventsValue.h"

#pragma mark - API Object

@implementation DBTEAMHasTeamFileEventsValue

@synthesize enabled = _enabled;

#pragma mark - Constructors

- (instancetype)initWithEnabled:(NSNumber *)enabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMHasTeamFileEventsValueEnabled;
    _enabled = enabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMHasTeamFileEventsValueOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSNumber *)enabled {
  if (![self isEnabled]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMHasTeamFileEventsValueEnabled, but was %@.", [self tagName]];
  }
  return _enabled;
}

#pragma mark - Tag state methods

- (BOOL)isEnabled {
  return _tag == DBTEAMHasTeamFileEventsValueEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMHasTeamFileEventsValueOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMHasTeamFileEventsValueEnabled:
    return @"DBTEAMHasTeamFileEventsValueEnabled";
  case DBTEAMHasTeamFileEventsValueOther:
    return @"DBTEAMHasTeamFileEventsValueOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMHasTeamFileEventsValueSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMHasTeamFileEventsValueSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMHasTeamFileEventsValueSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMHasTeamFileEventsValueEnabled:
    result = prime * result + [self.enabled hash];
  case DBTEAMHasTeamFileEventsValueOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToHasTeamFileEventsValue:other];
}

- (BOOL)isEqualToHasTeamFileEventsValue:(DBTEAMHasTeamFileEventsValue *)aHasTeamFileEventsValue {
  if (self == aHasTeamFileEventsValue) {
    return YES;
  }
  if (self.tag != aHasTeamFileEventsValue.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMHasTeamFileEventsValueEnabled:
    return [self.enabled isEqual:aHasTeamFileEventsValue.enabled];
  case DBTEAMHasTeamFileEventsValueOther:
    return [[self tagName] isEqual:[aHasTeamFileEventsValue tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMHasTeamFileEventsValueSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMHasTeamFileEventsValue *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEnabled]) {
    jsonDict[@"enabled"] = valueObj.enabled;
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMHasTeamFileEventsValue *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"enabled"]) {
    NSNumber *enabled = valueDict[@"enabled"];
    return [[DBTEAMHasTeamFileEventsValue alloc] initWithEnabled:enabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMHasTeamFileEventsValue alloc] initWithOther];
  } else {
    return [[DBTEAMHasTeamFileEventsValue alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMHasTeamSelectiveSyncValue.h"

#pragma mark - API Object

@implementation DBTEAMHasTeamSelectiveSyncValue

@synthesize hasTeamSelectiveSync = _hasTeamSelectiveSync;

#pragma mark - Constructors

- (instancetype)initWithHasTeamSelectiveSync:(NSNumber *)hasTeamSelectiveSync {
  self = [super init];
  if (self) {
    _tag = DBTEAMHasTeamSelectiveSyncValueHasTeamSelectiveSync;
    _hasTeamSelectiveSync = hasTeamSelectiveSync;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMHasTeamSelectiveSyncValueOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSNumber *)hasTeamSelectiveSync {
  if (![self isHasTeamSelectiveSync]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMHasTeamSelectiveSyncValueHasTeamSelectiveSync, but was %@.",
                       [self tagName]];
  }
  return _hasTeamSelectiveSync;
}

#pragma mark - Tag state methods

- (BOOL)isHasTeamSelectiveSync {
  return _tag == DBTEAMHasTeamSelectiveSyncValueHasTeamSelectiveSync;
}

- (BOOL)isOther {
  return _tag == DBTEAMHasTeamSelectiveSyncValueOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMHasTeamSelectiveSyncValueHasTeamSelectiveSync:
    return @"DBTEAMHasTeamSelectiveSyncValueHasTeamSelectiveSync";
  case DBTEAMHasTeamSelectiveSyncValueOther:
    return @"DBTEAMHasTeamSelectiveSyncValueOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMHasTeamSelectiveSyncValueSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMHasTeamSelectiveSyncValueSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMHasTeamSelectiveSyncValueSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMHasTeamSelectiveSyncValueHasTeamSelectiveSync:
    result = prime * result + [self.hasTeamSelectiveSync hash];
  case DBTEAMHasTeamSelectiveSyncValueOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToHasTeamSelectiveSyncValue:other];
}

- (BOOL)isEqualToHasTeamSelectiveSyncValue:(DBTEAMHasTeamSelectiveSyncValue *)aHasTeamSelectiveSyncValue {
  if (self == aHasTeamSelectiveSyncValue) {
    return YES;
  }
  if (self.tag != aHasTeamSelectiveSyncValue.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMHasTeamSelectiveSyncValueHasTeamSelectiveSync:
    return [self.hasTeamSelectiveSync isEqual:aHasTeamSelectiveSyncValue.hasTeamSelectiveSync];
  case DBTEAMHasTeamSelectiveSyncValueOther:
    return [[self tagName] isEqual:[aHasTeamSelectiveSyncValue tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMHasTeamSelectiveSyncValueSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMHasTeamSelectiveSyncValue *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isHasTeamSelectiveSync]) {
    jsonDict[@"has_team_selective_sync"] = valueObj.hasTeamSelectiveSync;
    jsonDict[@".tag"] = @"has_team_selective_sync";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMHasTeamSelectiveSyncValue *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"has_team_selective_sync"]) {
    NSNumber *hasTeamSelectiveSync = valueDict[@"has_team_selective_sync"];
    return [[DBTEAMHasTeamSelectiveSyncValue alloc] initWithHasTeamSelectiveSync:hasTeamSelectiveSync];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMHasTeamSelectiveSyncValue alloc] initWithOther];
  } else {
    return [[DBTEAMHasTeamSelectiveSyncValue alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMHasTeamSharedDropboxValue.h"

#pragma mark - API Object

@implementation DBTEAMHasTeamSharedDropboxValue

@synthesize hasTeamSharedDropbox = _hasTeamSharedDropbox;

#pragma mark - Constructors

- (instancetype)initWithHasTeamSharedDropbox:(NSNumber *)hasTeamSharedDropbox {
  self = [super init];
  if (self) {
    _tag = DBTEAMHasTeamSharedDropboxValueHasTeamSharedDropbox;
    _hasTeamSharedDropbox = hasTeamSharedDropbox;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMHasTeamSharedDropboxValueOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSNumber *)hasTeamSharedDropbox {
  if (![self isHasTeamSharedDropbox]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMHasTeamSharedDropboxValueHasTeamSharedDropbox, but was %@.",
                       [self tagName]];
  }
  return _hasTeamSharedDropbox;
}

#pragma mark - Tag state methods

- (BOOL)isHasTeamSharedDropbox {
  return _tag == DBTEAMHasTeamSharedDropboxValueHasTeamSharedDropbox;
}

- (BOOL)isOther {
  return _tag == DBTEAMHasTeamSharedDropboxValueOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMHasTeamSharedDropboxValueHasTeamSharedDropbox:
    return @"DBTEAMHasTeamSharedDropboxValueHasTeamSharedDropbox";
  case DBTEAMHasTeamSharedDropboxValueOther:
    return @"DBTEAMHasTeamSharedDropboxValueOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMHasTeamSharedDropboxValueSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMHasTeamSharedDropboxValueSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMHasTeamSharedDropboxValueSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMHasTeamSharedDropboxValueHasTeamSharedDropbox:
    result = prime * result + [self.hasTeamSharedDropbox hash];
  case DBTEAMHasTeamSharedDropboxValueOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToHasTeamSharedDropboxValue:other];
}

- (BOOL)isEqualToHasTeamSharedDropboxValue:(DBTEAMHasTeamSharedDropboxValue *)aHasTeamSharedDropboxValue {
  if (self == aHasTeamSharedDropboxValue) {
    return YES;
  }
  if (self.tag != aHasTeamSharedDropboxValue.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMHasTeamSharedDropboxValueHasTeamSharedDropbox:
    return [self.hasTeamSharedDropbox isEqual:aHasTeamSharedDropboxValue.hasTeamSharedDropbox];
  case DBTEAMHasTeamSharedDropboxValueOther:
    return [[self tagName] isEqual:[aHasTeamSharedDropboxValue tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMHasTeamSharedDropboxValueSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMHasTeamSharedDropboxValue *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isHasTeamSharedDropbox]) {
    jsonDict[@"has_team_shared_dropbox"] = valueObj.hasTeamSharedDropbox;
    jsonDict[@".tag"] = @"has_team_shared_dropbox";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMHasTeamSharedDropboxValue *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"has_team_shared_dropbox"]) {
    NSNumber *hasTeamSharedDropbox = valueDict[@"has_team_shared_dropbox"];
    return [[DBTEAMHasTeamSharedDropboxValue alloc] initWithHasTeamSharedDropbox:hasTeamSharedDropbox];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMHasTeamSharedDropboxValue alloc] initWithOther];
  } else {
    return [[DBTEAMHasTeamSharedDropboxValue alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListMemberAppsArg.h"

#pragma mark - API Object

@implementation DBTEAMListMemberAppsArg

#pragma mark - Constructors

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId {
  [DBStoneValidators nonnullValidator:nil](teamMemberId);

  self = [super init];
  if (self) {
    _teamMemberId = teamMemberId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMemberAppsArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMemberAppsArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMemberAppsArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamMemberId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMemberAppsArg:other];
}

- (BOOL)isEqualToListMemberAppsArg:(DBTEAMListMemberAppsArg *)aListMemberAppsArg {
  if (self == aListMemberAppsArg) {
    return YES;
  }
  if (![self.teamMemberId isEqual:aListMemberAppsArg.teamMemberId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMemberAppsArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMemberAppsArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_member_id"] = valueObj.teamMemberId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMemberAppsArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamMemberId = valueDict[@"team_member_id"];

  return [[DBTEAMListMemberAppsArg alloc] initWithTeamMemberId:teamMemberId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListMemberAppsError.h"

#pragma mark - API Object

@implementation DBTEAMListMemberAppsError

#pragma mark - Constructors

- (instancetype)initWithMemberNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMListMemberAppsErrorMemberNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMListMemberAppsErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isMemberNotFound {
  return _tag == DBTEAMListMemberAppsErrorMemberNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMListMemberAppsErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMListMemberAppsErrorMemberNotFound:
    return @"DBTEAMListMemberAppsErrorMemberNotFound";
  case DBTEAMListMemberAppsErrorOther:
    return @"DBTEAMListMemberAppsErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMemberAppsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMemberAppsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMemberAppsErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMListMemberAppsErrorMemberNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMListMemberAppsErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMemberAppsError:other];
}

- (BOOL)isEqualToListMemberAppsError:(DBTEAMListMemberAppsError *)aListMemberAppsError {
  if (self == aListMemberAppsError) {
    return YES;
  }
  if (self.tag != aListMemberAppsError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMListMemberAppsErrorMemberNotFound:
    return [[self tagName] isEqual:[aListMemberAppsError tagName]];
  case DBTEAMListMemberAppsErrorOther:
    return [[self tagName] isEqual:[aListMemberAppsError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMemberAppsErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMemberAppsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMemberNotFound]) {
    jsonDict[@".tag"] = @"member_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMemberAppsError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"member_not_found"]) {
    return [[DBTEAMListMemberAppsError alloc] initWithMemberNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMListMemberAppsError alloc] initWithOther];
  } else {
    return [[DBTEAMListMemberAppsError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMApiApp.h"
#import "DBTEAMListMemberAppsResult.h"

#pragma mark - API Object

@implementation DBTEAMListMemberAppsResult

#pragma mark - Constructors

- (instancetype)initWithLinkedApiApps:(NSArray<DBTEAMApiApp *> *)linkedApiApps {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](linkedApiApps);

  self = [super init];
  if (self) {
    _linkedApiApps = linkedApiApps;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMemberAppsResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMemberAppsResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMemberAppsResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.linkedApiApps hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMemberAppsResult:other];
}

- (BOOL)isEqualToListMemberAppsResult:(DBTEAMListMemberAppsResult *)aListMemberAppsResult {
  if (self == aListMemberAppsResult) {
    return YES;
  }
  if (![self.linkedApiApps isEqual:aListMemberAppsResult.linkedApiApps]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMemberAppsResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMemberAppsResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"linked_api_apps"] = [DBArraySerializer serialize:valueObj.linkedApiApps
                                                    withBlock:^id(id elem0) {
                                                      return [DBTEAMApiAppSerializer serialize:elem0];
                                                    }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMemberAppsResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMApiApp *> *linkedApiApps = [DBArraySerializer deserialize:valueDict[@"linked_api_apps"]
                                                                withBlock:^id(id elem0) {
                                                                  return [DBTEAMApiAppSerializer deserialize:elem0];
                                                                }];

  return [[DBTEAMListMemberAppsResult alloc] initWithLinkedApiApps:linkedApiApps];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListMemberDevicesArg.h"

#pragma mark - API Object

@implementation DBTEAMListMemberDevicesArg

#pragma mark - Constructors

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId
                  includeWebSessions:(NSNumber *)includeWebSessions
               includeDesktopClients:(NSNumber *)includeDesktopClients
                includeMobileClients:(NSNumber *)includeMobileClients {
  [DBStoneValidators nonnullValidator:nil](teamMemberId);

  self = [super init];
  if (self) {
    _teamMemberId = teamMemberId;
    _includeWebSessions = includeWebSessions ?: @YES;
    _includeDesktopClients = includeDesktopClients ?: @YES;
    _includeMobileClients = includeMobileClients ?: @YES;
  }
  return self;
}

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId {
  return [self initWithTeamMemberId:teamMemberId
                 includeWebSessions:nil
              includeDesktopClients:nil
               includeMobileClients:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMemberDevicesArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMemberDevicesArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMemberDevicesArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamMemberId hash];
  result = prime * result + [self.includeWebSessions hash];
  result = prime * result + [self.includeDesktopClients hash];
  result = prime * result + [self.includeMobileClients hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMemberDevicesArg:other];
}

- (BOOL)isEqualToListMemberDevicesArg:(DBTEAMListMemberDevicesArg *)aListMemberDevicesArg {
  if (self == aListMemberDevicesArg) {
    return YES;
  }
  if (![self.teamMemberId isEqual:aListMemberDevicesArg.teamMemberId]) {
    return NO;
  }
  if (![self.includeWebSessions isEqual:aListMemberDevicesArg.includeWebSessions]) {
    return NO;
  }
  if (![self.includeDesktopClients isEqual:aListMemberDevicesArg.includeDesktopClients]) {
    return NO;
  }
  if (![self.includeMobileClients isEqual:aListMemberDevicesArg.includeMobileClients]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMemberDevicesArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMemberDevicesArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  jsonDict[@"include_web_sessions"] = valueObj.includeWebSessions;
  jsonDict[@"include_desktop_clients"] = valueObj.includeDesktopClients;
  jsonDict[@"include_mobile_clients"] = valueObj.includeMobileClients;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMemberDevicesArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamMemberId = valueDict[@"team_member_id"];
  NSNumber *includeWebSessions = valueDict[@"include_web_sessions"] ?: @YES;
  NSNumber *includeDesktopClients = valueDict[@"include_desktop_clients"] ?: @YES;
  NSNumber *includeMobileClients = valueDict[@"include_mobile_clients"] ?: @YES;

  return [[DBTEAMListMemberDevicesArg alloc] initWithTeamMemberId:teamMemberId
                                               includeWebSessions:includeWebSessions
                                            includeDesktopClients:includeDesktopClients
                                             includeMobileClients:includeMobileClients];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListMemberDevicesError.h"

#pragma mark - API Object

@implementation DBTEAMListMemberDevicesError

#pragma mark - Constructors

- (instancetype)initWithMemberNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMListMemberDevicesErrorMemberNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMListMemberDevicesErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isMemberNotFound {
  return _tag == DBTEAMListMemberDevicesErrorMemberNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMListMemberDevicesErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMListMemberDevicesErrorMemberNotFound:
    return @"DBTEAMListMemberDevicesErrorMemberNotFound";
  case DBTEAMListMemberDevicesErrorOther:
    return @"DBTEAMListMemberDevicesErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMemberDevicesErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMemberDevicesErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMemberDevicesErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMListMemberDevicesErrorMemberNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMListMemberDevicesErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMemberDevicesError:other];
}

- (BOOL)isEqualToListMemberDevicesError:(DBTEAMListMemberDevicesError *)aListMemberDevicesError {
  if (self == aListMemberDevicesError) {
    return YES;
  }
  if (self.tag != aListMemberDevicesError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMListMemberDevicesErrorMemberNotFound:
    return [[self tagName] isEqual:[aListMemberDevicesError tagName]];
  case DBTEAMListMemberDevicesErrorOther:
    return [[self tagName] isEqual:[aListMemberDevicesError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMemberDevicesErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMemberDevicesError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMemberNotFound]) {
    jsonDict[@".tag"] = @"member_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMemberDevicesError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"member_not_found"]) {
    return [[DBTEAMListMemberDevicesError alloc] initWithMemberNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMListMemberDevicesError alloc] initWithOther];
  } else {
    return [[DBTEAMListMemberDevicesError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMActiveWebSession.h"
#import "DBTEAMDesktopClientSession.h"
#import "DBTEAMListMemberDevicesResult.h"
#import "DBTEAMMobileClientSession.h"

#pragma mark - API Object

@implementation DBTEAMListMemberDevicesResult

#pragma mark - Constructors

- (instancetype)initWithActiveWebSessions:(NSArray<DBTEAMActiveWebSession *> *)activeWebSessions
                    desktopClientSessions:(NSArray<DBTEAMDesktopClientSession *> *)desktopClientSessions
                     mobileClientSessions:(NSArray<DBTEAMMobileClientSession *> *)mobileClientSessions {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](activeWebSessions);
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil
                                                                maxItems:nil
                                                           itemValidator:[DBStoneValidators nonnullValidator:nil]]](
      desktopClientSessions);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](mobileClientSessions);

  self = [super init];
  if (self) {
    _activeWebSessions = activeWebSessions;
    _desktopClientSessions = desktopClientSessions;
    _mobileClientSessions = mobileClientSessions;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithActiveWebSessions:nil desktopClientSessions:nil mobileClientSessions:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMemberDevicesResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMemberDevicesResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMemberDevicesResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.activeWebSessions != nil) {
    result = prime * result + [self.activeWebSessions hash];
  }
  if (self.desktopClientSessions != nil) {
    result = prime * result + [self.desktopClientSessions hash];
  }
  if (self.mobileClientSessions != nil) {
    result = prime * result + [self.mobileClientSessions hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMemberDevicesResult:other];
}

- (BOOL)isEqualToListMemberDevicesResult:(DBTEAMListMemberDevicesResult *)aListMemberDevicesResult {
  if (self == aListMemberDevicesResult) {
    return YES;
  }
  if (self.activeWebSessions) {
    if (![self.activeWebSessions isEqual:aListMemberDevicesResult.activeWebSessions]) {
      return NO;
    }
  }
  if (self.desktopClientSessions) {
    if (![self.desktopClientSessions isEqual:aListMemberDevicesResult.desktopClientSessions]) {
      return NO;
    }
  }
  if (self.mobileClientSessions) {
    if (![self.mobileClientSessions isEqual:aListMemberDevicesResult.mobileClientSessions]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMemberDevicesResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMemberDevicesResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.activeWebSessions) {
    jsonDict[@"active_web_sessions"] = [DBArraySerializer serialize:valueObj.activeWebSessions
                                                          withBlock:^id(id elem0) {
                                                            return [DBTEAMActiveWebSessionSerializer serialize:elem0];
                                                          }];
  }
  if (valueObj.desktopClientSessions) {
    jsonDict[@"desktop_client_sessions"] =
        [DBArraySerializer serialize:valueObj.desktopClientSessions
                           withBlock:^id(id elem0) {
                             return [DBTEAMDesktopClientSessionSerializer serialize:elem0];
                           }];
  }
  if (valueObj.mobileClientSessions) {
    jsonDict[@"mobile_client_sessions"] =
        [DBArraySerializer serialize:valueObj.mobileClientSessions
                           withBlock:^id(id elem0) {
                             return [DBTEAMMobileClientSessionSerializer serialize:elem0];
                           }];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMemberDevicesResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMActiveWebSession *> *activeWebSessions =
      valueDict[@"active_web_sessions"]
          ? [DBArraySerializer deserialize:valueDict[@"active_web_sessions"]
                                 withBlock:^id(id elem0) {
                                   return [DBTEAMActiveWebSessionSerializer deserialize:elem0];
                                 }]
          : nil;
  NSArray<DBTEAMDesktopClientSession *> *desktopClientSessions =
      valueDict[@"desktop_client_sessions"]
          ? [DBArraySerializer deserialize:valueDict[@"desktop_client_sessions"]
                                 withBlock:^id(id elem0) {
                                   return [DBTEAMDesktopClientSessionSerializer deserialize:elem0];
                                 }]
          : nil;
  NSArray<DBTEAMMobileClientSession *> *mobileClientSessions =
      valueDict[@"mobile_client_sessions"]
          ? [DBArraySerializer deserialize:valueDict[@"mobile_client_sessions"]
                                 withBlock:^id(id elem0) {
                                   return [DBTEAMMobileClientSessionSerializer deserialize:elem0];
                                 }]
          : nil;

  return [[DBTEAMListMemberDevicesResult alloc] initWithActiveWebSessions:activeWebSessions
                                                    desktopClientSessions:desktopClientSessions
                                                     mobileClientSessions:mobileClientSessions];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListMembersAppsArg.h"

#pragma mark - API Object

@implementation DBTEAMListMembersAppsArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCursor:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMembersAppsArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMembersAppsArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMembersAppsArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.cursor != nil) {
    result = prime * result + [self.cursor hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMembersAppsArg:other];
}

- (BOOL)isEqualToListMembersAppsArg:(DBTEAMListMembersAppsArg *)aListMembersAppsArg {
  if (self == aListMembersAppsArg) {
    return YES;
  }
  if (self.cursor) {
    if (![self.cursor isEqual:aListMembersAppsArg.cursor]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMembersAppsArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMembersAppsArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMembersAppsArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBTEAMListMembersAppsArg alloc] initWithCursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListMembersAppsError.h"

#pragma mark - API Object

@implementation DBTEAMListMembersAppsError

#pragma mark - Constructors

- (instancetype)initWithReset {
  self = [super init];
  if (self) {
    _tag = DBTEAMListMembersAppsErrorReset;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMListMembersAppsErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isReset {
  return _tag == DBTEAMListMembersAppsErrorReset;
}

- (BOOL)isOther {
  return _tag == DBTEAMListMembersAppsErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMListMembersAppsErrorReset:
    return @"DBTEAMListMembersAppsErrorReset";
  case DBTEAMListMembersAppsErrorOther:
    return @"DBTEAMListMembersAppsErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMembersAppsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMembersAppsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMembersAppsErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMListMembersAppsErrorReset:
    result = prime * result + [[self tagName] hash];
  case DBTEAMListMembersAppsErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMembersAppsError:other];
}

- (BOOL)isEqualToListMembersAppsError:(DBTEAMListMembersAppsError *)aListMembersAppsError {
  if (self == aListMembersAppsError) {
    return YES;
  }
  if (self.tag != aListMembersAppsError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMListMembersAppsErrorReset:
    return [[self tagName] isEqual:[aListMembersAppsError tagName]];
  case DBTEAMListMembersAppsErrorOther:
    return [[self tagName] isEqual:[aListMembersAppsError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMembersAppsErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMembersAppsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isReset]) {
    jsonDict[@".tag"] = @"reset";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMembersAppsError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"reset"]) {
    return [[DBTEAMListMembersAppsError alloc] initWithReset];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMListMembersAppsError alloc] initWithOther];
  } else {
    return [[DBTEAMListMembersAppsError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListMembersAppsResult.h"
#import "DBTEAMMemberLinkedApps.h"

#pragma mark - API Object

@implementation DBTEAMListMembersAppsResult

#pragma mark - Constructors

- (instancetype)initWithApps:(NSArray<DBTEAMMemberLinkedApps *> *)apps
                     hasMore:(NSNumber *)hasMore
                      cursor:(NSString *)cursor {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](apps);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _apps = apps;
    _hasMore = hasMore;
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initWithApps:(NSArray<DBTEAMMemberLinkedApps *> *)apps hasMore:(NSNumber *)hasMore {
  return [self initWithApps:apps hasMore:hasMore cursor:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMembersAppsResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMembersAppsResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMembersAppsResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.apps hash];
  result = prime * result + [self.hasMore hash];
  if (self.cursor != nil) {
    result = prime * result + [self.cursor hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMembersAppsResult:other];
}

- (BOOL)isEqualToListMembersAppsResult:(DBTEAMListMembersAppsResult *)aListMembersAppsResult {
  if (self == aListMembersAppsResult) {
    return YES;
  }
  if (![self.apps isEqual:aListMembersAppsResult.apps]) {
    return NO;
  }
  if (![self.hasMore isEqual:aListMembersAppsResult.hasMore]) {
    return NO;
  }
  if (self.cursor) {
    if (![self.cursor isEqual:aListMembersAppsResult.cursor]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMembersAppsResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMembersAppsResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"apps"] = [DBArraySerializer serialize:valueObj.apps
                                         withBlock:^id(id elem0) {
                                           return [DBTEAMMemberLinkedAppsSerializer serialize:elem0];
                                         }];
  jsonDict[@"has_more"] = valueObj.hasMore;
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMembersAppsResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMMemberLinkedApps *> *apps =
      [DBArraySerializer deserialize:valueDict[@"apps"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMMemberLinkedAppsSerializer deserialize:elem0];
                           }];
  NSNumber *hasMore = valueDict[@"has_more"];
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBTEAMListMembersAppsResult alloc] initWithApps:apps hasMore:hasMore cursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListMembersDevicesArg.h"

#pragma mark - API Object

@implementation DBTEAMListMembersDevicesArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor
            includeWebSessions:(NSNumber *)includeWebSessions
         includeDesktopClients:(NSNumber *)includeDesktopClients
          includeMobileClients:(NSNumber *)includeMobileClients {

  self = [super init];
  if (self) {
    _cursor = cursor;
    _includeWebSessions = includeWebSessions ?: @YES;
    _includeDesktopClients = includeDesktopClients ?: @YES;
    _includeMobileClients = includeMobileClients ?: @YES;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCursor:nil includeWebSessions:nil includeDesktopClients:nil includeMobileClients:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMembersDevicesArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMembersDevicesArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMembersDevicesArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.cursor != nil) {
    result = prime * result + [self.cursor hash];
  }
  result = prime * result + [self.includeWebSessions hash];
  result = prime * result + [self.includeDesktopClients hash];
  result = prime * result + [self.includeMobileClients hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMembersDevicesArg:other];
}

- (BOOL)isEqualToListMembersDevicesArg:(DBTEAMListMembersDevicesArg *)aListMembersDevicesArg {
  if (self == aListMembersDevicesArg) {
    return YES;
  }
  if (self.cursor) {
    if (![self.cursor isEqual:aListMembersDevicesArg.cursor]) {
      return NO;
    }
  }
  if (![self.includeWebSessions isEqual:aListMembersDevicesArg.includeWebSessions]) {
    return NO;
  }
  if (![self.includeDesktopClients isEqual:aListMembersDevicesArg.includeDesktopClients]) {
    return NO;
  }
  if (![self.includeMobileClients isEqual:aListMembersDevicesArg.includeMobileClients]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMembersDevicesArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMembersDevicesArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }
  jsonDict[@"include_web_sessions"] = valueObj.includeWebSessions;
  jsonDict[@"include_desktop_clients"] = valueObj.includeDesktopClients;
  jsonDict[@"include_mobile_clients"] = valueObj.includeMobileClients;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMembersDevicesArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"] ?: nil;
  NSNumber *includeWebSessions = valueDict[@"include_web_sessions"] ?: @YES;
  NSNumber *includeDesktopClients = valueDict[@"include_desktop_clients"] ?: @YES;
  NSNumber *includeMobileClients = valueDict[@"include_mobile_clients"] ?: @YES;

  return [[DBTEAMListMembersDevicesArg alloc] initWithCursor:cursor
                                          includeWebSessions:includeWebSessions
                                       includeDesktopClients:includeDesktopClients
                                        includeMobileClients:includeMobileClients];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListMembersDevicesError.h"

#pragma mark - API Object

@implementation DBTEAMListMembersDevicesError

#pragma mark - Constructors

- (instancetype)initWithReset {
  self = [super init];
  if (self) {
    _tag = DBTEAMListMembersDevicesErrorReset;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMListMembersDevicesErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isReset {
  return _tag == DBTEAMListMembersDevicesErrorReset;
}

- (BOOL)isOther {
  return _tag == DBTEAMListMembersDevicesErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMListMembersDevicesErrorReset:
    return @"DBTEAMListMembersDevicesErrorReset";
  case DBTEAMListMembersDevicesErrorOther:
    return @"DBTEAMListMembersDevicesErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMembersDevicesErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMembersDevicesErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMembersDevicesErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMListMembersDevicesErrorReset:
    result = prime * result + [[self tagName] hash];
  case DBTEAMListMembersDevicesErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMembersDevicesError:other];
}

- (BOOL)isEqualToListMembersDevicesError:(DBTEAMListMembersDevicesError *)aListMembersDevicesError {
  if (self == aListMembersDevicesError) {
    return YES;
  }
  if (self.tag != aListMembersDevicesError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMListMembersDevicesErrorReset:
    return [[self tagName] isEqual:[aListMembersDevicesError tagName]];
  case DBTEAMListMembersDevicesErrorOther:
    return [[self tagName] isEqual:[aListMembersDevicesError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMembersDevicesErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMembersDevicesError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isReset]) {
    jsonDict[@".tag"] = @"reset";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMembersDevicesError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"reset"]) {
    return [[DBTEAMListMembersDevicesError alloc] initWithReset];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMListMembersDevicesError alloc] initWithOther];
  } else {
    return [[DBTEAMListMembersDevicesError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListMembersDevicesResult.h"
#import "DBTEAMMemberDevices.h"

#pragma mark - API Object

@implementation DBTEAMListMembersDevicesResult

#pragma mark - Constructors

- (instancetype)initWithDevices:(NSArray<DBTEAMMemberDevices *> *)devices
                        hasMore:(NSNumber *)hasMore
                         cursor:(NSString *)cursor {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](devices);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _devices = devices;
    _hasMore = hasMore;
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initWithDevices:(NSArray<DBTEAMMemberDevices *> *)devices hasMore:(NSNumber *)hasMore {
  return [self initWithDevices:devices hasMore:hasMore cursor:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListMembersDevicesResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListMembersDevicesResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListMembersDevicesResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.devices hash];
  result = prime * result + [self.hasMore hash];
  if (self.cursor != nil) {
    result = prime * result + [self.cursor hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListMembersDevicesResult:other];
}

- (BOOL)isEqualToListMembersDevicesResult:(DBTEAMListMembersDevicesResult *)aListMembersDevicesResult {
  if (self == aListMembersDevicesResult) {
    return YES;
  }
  if (![self.devices isEqual:aListMembersDevicesResult.devices]) {
    return NO;
  }
  if (![self.hasMore isEqual:aListMembersDevicesResult.hasMore]) {
    return NO;
  }
  if (self.cursor) {
    if (![self.cursor isEqual:aListMembersDevicesResult.cursor]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListMembersDevicesResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListMembersDevicesResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"devices"] = [DBArraySerializer serialize:valueObj.devices
                                            withBlock:^id(id elem0) {
                                              return [DBTEAMMemberDevicesSerializer serialize:elem0];
                                            }];
  jsonDict[@"has_more"] = valueObj.hasMore;
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListMembersDevicesResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMMemberDevices *> *devices =
      [DBArraySerializer deserialize:valueDict[@"devices"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMMemberDevicesSerializer deserialize:elem0];
                           }];
  NSNumber *hasMore = valueDict[@"has_more"];
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBTEAMListMembersDevicesResult alloc] initWithDevices:devices hasMore:hasMore cursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListTeamAppsArg.h"

#pragma mark - API Object

@implementation DBTEAMListTeamAppsArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCursor:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListTeamAppsArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListTeamAppsArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListTeamAppsArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.cursor != nil) {
    result = prime * result + [self.cursor hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListTeamAppsArg:other];
}

- (BOOL)isEqualToListTeamAppsArg:(DBTEAMListTeamAppsArg *)aListTeamAppsArg {
  if (self == aListTeamAppsArg) {
    return YES;
  }
  if (self.cursor) {
    if (![self.cursor isEqual:aListTeamAppsArg.cursor]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListTeamAppsArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListTeamAppsArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListTeamAppsArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBTEAMListTeamAppsArg alloc] initWithCursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListTeamAppsError.h"

#pragma mark - API Object

@implementation DBTEAMListTeamAppsError

#pragma mark - Constructors

- (instancetype)initWithReset {
  self = [super init];
  if (self) {
    _tag = DBTEAMListTeamAppsErrorReset;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMListTeamAppsErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isReset {
  return _tag == DBTEAMListTeamAppsErrorReset;
}

- (BOOL)isOther {
  return _tag == DBTEAMListTeamAppsErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMListTeamAppsErrorReset:
    return @"DBTEAMListTeamAppsErrorReset";
  case DBTEAMListTeamAppsErrorOther:
    return @"DBTEAMListTeamAppsErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListTeamAppsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListTeamAppsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListTeamAppsErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMListTeamAppsErrorReset:
    result = prime * result + [[self tagName] hash];
  case DBTEAMListTeamAppsErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListTeamAppsError:other];
}

- (BOOL)isEqualToListTeamAppsError:(DBTEAMListTeamAppsError *)aListTeamAppsError {
  if (self == aListTeamAppsError) {
    return YES;
  }
  if (self.tag != aListTeamAppsError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMListTeamAppsErrorReset:
    return [[self tagName] isEqual:[aListTeamAppsError tagName]];
  case DBTEAMListTeamAppsErrorOther:
    return [[self tagName] isEqual:[aListTeamAppsError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListTeamAppsErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListTeamAppsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isReset]) {
    jsonDict[@".tag"] = @"reset";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListTeamAppsError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"reset"]) {
    return [[DBTEAMListTeamAppsError alloc] initWithReset];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMListTeamAppsError alloc] initWithOther];
  } else {
    return [[DBTEAMListTeamAppsError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListTeamAppsResult.h"
#import "DBTEAMMemberLinkedApps.h"

#pragma mark - API Object

@implementation DBTEAMListTeamAppsResult

#pragma mark - Constructors

- (instancetype)initWithApps:(NSArray<DBTEAMMemberLinkedApps *> *)apps
                     hasMore:(NSNumber *)hasMore
                      cursor:(NSString *)cursor {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](apps);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _apps = apps;
    _hasMore = hasMore;
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initWithApps:(NSArray<DBTEAMMemberLinkedApps *> *)apps hasMore:(NSNumber *)hasMore {
  return [self initWithApps:apps hasMore:hasMore cursor:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListTeamAppsResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListTeamAppsResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListTeamAppsResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.apps hash];
  result = prime * result + [self.hasMore hash];
  if (self.cursor != nil) {
    result = prime * result + [self.cursor hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListTeamAppsResult:other];
}

- (BOOL)isEqualToListTeamAppsResult:(DBTEAMListTeamAppsResult *)aListTeamAppsResult {
  if (self == aListTeamAppsResult) {
    return YES;
  }
  if (![self.apps isEqual:aListTeamAppsResult.apps]) {
    return NO;
  }
  if (![self.hasMore isEqual:aListTeamAppsResult.hasMore]) {
    return NO;
  }
  if (self.cursor) {
    if (![self.cursor isEqual:aListTeamAppsResult.cursor]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListTeamAppsResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListTeamAppsResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"apps"] = [DBArraySerializer serialize:valueObj.apps
                                         withBlock:^id(id elem0) {
                                           return [DBTEAMMemberLinkedAppsSerializer serialize:elem0];
                                         }];
  jsonDict[@"has_more"] = valueObj.hasMore;
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListTeamAppsResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMMemberLinkedApps *> *apps =
      [DBArraySerializer deserialize:valueDict[@"apps"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMMemberLinkedAppsSerializer deserialize:elem0];
                           }];
  NSNumber *hasMore = valueDict[@"has_more"];
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBTEAMListTeamAppsResult alloc] initWithApps:apps hasMore:hasMore cursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListTeamDevicesArg.h"

#pragma mark - API Object

@implementation DBTEAMListTeamDevicesArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor
            includeWebSessions:(NSNumber *)includeWebSessions
         includeDesktopClients:(NSNumber *)includeDesktopClients
          includeMobileClients:(NSNumber *)includeMobileClients {

  self = [super init];
  if (self) {
    _cursor = cursor;
    _includeWebSessions = includeWebSessions ?: @YES;
    _includeDesktopClients = includeDesktopClients ?: @YES;
    _includeMobileClients = includeMobileClients ?: @YES;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithCursor:nil includeWebSessions:nil includeDesktopClients:nil includeMobileClients:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListTeamDevicesArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListTeamDevicesArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListTeamDevicesArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.cursor != nil) {
    result = prime * result + [self.cursor hash];
  }
  result = prime * result + [self.includeWebSessions hash];
  result = prime * result + [self.includeDesktopClients hash];
  result = prime * result + [self.includeMobileClients hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListTeamDevicesArg:other];
}

- (BOOL)isEqualToListTeamDevicesArg:(DBTEAMListTeamDevicesArg *)aListTeamDevicesArg {
  if (self == aListTeamDevicesArg) {
    return YES;
  }
  if (self.cursor) {
    if (![self.cursor isEqual:aListTeamDevicesArg.cursor]) {
      return NO;
    }
  }
  if (![self.includeWebSessions isEqual:aListTeamDevicesArg.includeWebSessions]) {
    return NO;
  }
  if (![self.includeDesktopClients isEqual:aListTeamDevicesArg.includeDesktopClients]) {
    return NO;
  }
  if (![self.includeMobileClients isEqual:aListTeamDevicesArg.includeMobileClients]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListTeamDevicesArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListTeamDevicesArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }
  jsonDict[@"include_web_sessions"] = valueObj.includeWebSessions;
  jsonDict[@"include_desktop_clients"] = valueObj.includeDesktopClients;
  jsonDict[@"include_mobile_clients"] = valueObj.includeMobileClients;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListTeamDevicesArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"] ?: nil;
  NSNumber *includeWebSessions = valueDict[@"include_web_sessions"] ?: @YES;
  NSNumber *includeDesktopClients = valueDict[@"include_desktop_clients"] ?: @YES;
  NSNumber *includeMobileClients = valueDict[@"include_mobile_clients"] ?: @YES;

  return [[DBTEAMListTeamDevicesArg alloc] initWithCursor:cursor
                                       includeWebSessions:includeWebSessions
                                    includeDesktopClients:includeDesktopClients
                                     includeMobileClients:includeMobileClients];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListTeamDevicesError.h"

#pragma mark - API Object

@implementation DBTEAMListTeamDevicesError

#pragma mark - Constructors

- (instancetype)initWithReset {
  self = [super init];
  if (self) {
    _tag = DBTEAMListTeamDevicesErrorReset;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMListTeamDevicesErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isReset {
  return _tag == DBTEAMListTeamDevicesErrorReset;
}

- (BOOL)isOther {
  return _tag == DBTEAMListTeamDevicesErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMListTeamDevicesErrorReset:
    return @"DBTEAMListTeamDevicesErrorReset";
  case DBTEAMListTeamDevicesErrorOther:
    return @"DBTEAMListTeamDevicesErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListTeamDevicesErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListTeamDevicesErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListTeamDevicesErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMListTeamDevicesErrorReset:
    result = prime * result + [[self tagName] hash];
  case DBTEAMListTeamDevicesErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListTeamDevicesError:other];
}

- (BOOL)isEqualToListTeamDevicesError:(DBTEAMListTeamDevicesError *)aListTeamDevicesError {
  if (self == aListTeamDevicesError) {
    return YES;
  }
  if (self.tag != aListTeamDevicesError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMListTeamDevicesErrorReset:
    return [[self tagName] isEqual:[aListTeamDevicesError tagName]];
  case DBTEAMListTeamDevicesErrorOther:
    return [[self tagName] isEqual:[aListTeamDevicesError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListTeamDevicesErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListTeamDevicesError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isReset]) {
    jsonDict[@".tag"] = @"reset";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListTeamDevicesError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"reset"]) {
    return [[DBTEAMListTeamDevicesError alloc] initWithReset];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMListTeamDevicesError alloc] initWithOther];
  } else {
    return [[DBTEAMListTeamDevicesError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMListTeamDevicesResult.h"
#import "DBTEAMMemberDevices.h"

#pragma mark - API Object

@implementation DBTEAMListTeamDevicesResult

#pragma mark - Constructors

- (instancetype)initWithDevices:(NSArray<DBTEAMMemberDevices *> *)devices
                        hasMore:(NSNumber *)hasMore
                         cursor:(NSString *)cursor {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](devices);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _devices = devices;
    _hasMore = hasMore;
    _cursor = cursor;
  }
  return self;
}

- (instancetype)initWithDevices:(NSArray<DBTEAMMemberDevices *> *)devices hasMore:(NSNumber *)hasMore {
  return [self initWithDevices:devices hasMore:hasMore cursor:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMListTeamDevicesResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMListTeamDevicesResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMListTeamDevicesResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.devices hash];
  result = prime * result + [self.hasMore hash];
  if (self.cursor != nil) {
    result = prime * result + [self.cursor hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToListTeamDevicesResult:other];
}

- (BOOL)isEqualToListTeamDevicesResult:(DBTEAMListTeamDevicesResult *)aListTeamDevicesResult {
  if (self == aListTeamDevicesResult) {
    return YES;
  }
  if (![self.devices isEqual:aListTeamDevicesResult.devices]) {
    return NO;
  }
  if (![self.hasMore isEqual:aListTeamDevicesResult.hasMore]) {
    return NO;
  }
  if (self.cursor) {
    if (![self.cursor isEqual:aListTeamDevicesResult.cursor]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMListTeamDevicesResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMListTeamDevicesResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"devices"] = [DBArraySerializer serialize:valueObj.devices
                                            withBlock:^id(id elem0) {
                                              return [DBTEAMMemberDevicesSerializer serialize:elem0];
                                            }];
  jsonDict[@"has_more"] = valueObj.hasMore;
  if (valueObj.cursor) {
    jsonDict[@"cursor"] = valueObj.cursor;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMListTeamDevicesResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMMemberDevices *> *devices =
      [DBArraySerializer deserialize:valueDict[@"devices"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMMemberDevicesSerializer deserialize:elem0];
                           }];
  NSNumber *hasMore = valueDict[@"has_more"];
  NSString *cursor = valueDict[@"cursor"] ?: nil;

  return [[DBTEAMListTeamDevicesResult alloc] initWithDevices:devices hasMore:hasMore cursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMGroupAccessType.h"
#import "DBTEAMMemberAccess.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMMemberAccess

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user accessType:(DBTEAMGroupAccessType *)accessType {
  [DBStoneValidators nonnullValidator:nil](user);
  [DBStoneValidators nonnullValidator:nil](accessType);

  self = [super init];
  if (self) {
    _user = user;
    _accessType = accessType;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMemberAccessSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMemberAccessSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMemberAccessSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.user hash];
  result = prime * result + [self.accessType hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberAccess:other];
}

- (BOOL)isEqualToMemberAccess:(DBTEAMMemberAccess *)aMemberAccess {
  if (self == aMemberAccess) {
    return YES;
  }
  if (![self.user isEqual:aMemberAccess.user]) {
    return NO;
  }
  if (![self.accessType isEqual:aMemberAccess.accessType]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMemberAccessSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMemberAccess *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];
  jsonDict[@"access_type"] = [DBTEAMGroupAccessTypeSerializer serialize:valueObj.accessType];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMemberAccess *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];
  DBTEAMGroupAccessType *accessType = [DBTEAMGroupAccessTypeSerializer deserialize:valueDict[@"access_type"]];

  return [[DBTEAMMemberAccess alloc] initWithUser:user accessType:accessType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMAdminTier.h"
#import "DBTEAMMemberAddArg.h"

#pragma mark - API Object

@implementation DBTEAMMemberAddArg

#pragma mark - Constructors

- (instancetype)initWithMemberEmail:(NSString *)memberEmail
                    memberGivenName:(NSString *)memberGivenName
                      memberSurname:(NSString *)memberSurname
                   memberExternalId:(NSString *)memberExternalId
                 memberPersistentId:(NSString *)memberPersistentId
                   sendWelcomeEmail:(NSNumber *)sendWelcomeEmail
                               role:(DBTEAMAdminTier *)role
              isDirectoryRestricted:(NSNumber *)isDirectoryRestricted {
  [DBStoneValidators nonnullValidator:[DBStoneValidators stringValidator:nil
                                                               maxLength:@(255)
                                                                 pattern:@"^['&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9."
                                                                         @"-]*.[A-Za-z]{2,15}$"]](memberEmail);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(100) pattern:@"[^/:?*<>\"|]*"]](
      memberGivenName);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(100) pattern:@"[^/:?*<>\"|]*"]](memberSurname);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(64) pattern:nil]](memberExternalId);

  self = [super init];
  if (self) {
    _memberEmail = memberEmail;
    _memberGivenName = memberGivenName;
    _memberSurname = memberSurname;
    _memberExternalId = memberExternalId;
    _memberPersistentId = memberPersistentId;
    _sendWelcomeEmail = sendWelcomeEmail ?: @YES;
    _role = role ?: [[DBTEAMAdminTier alloc] initWithMemberOnly];
    _isDirectoryRestricted = isDirectoryRestricted;
  }
  return self;
}

- (instancetype)initWithMemberEmail:(NSString *)memberEmail {
  return [self initWithMemberEmail:memberEmail
                   memberGivenName:nil
                     memberSurname:nil
                  memberExternalId:nil
                memberPersistentId:nil
                  sendWelcomeEmail:nil
                              role:nil
             isDirectoryRestricted:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMemberAddArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMemberAddArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMemberAddArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.memberEmail hash];
  if (self.memberGivenName != nil) {
    result = prime * result + [self.memberGivenName hash];
  }
  if (self.memberSurname != nil) {
    result = prime * result + [self.memberSurname hash];
  }
  if (self.memberExternalId != nil) {
    result = prime * result + [self.memberExternalId hash];
  }
  if (self.memberPersistentId != nil) {
    result = prime * result + [self.memberPersistentId hash];
  }
  result = prime * result + [self.sendWelcomeEmail hash];
  result = prime * result + [self.role hash];
  if (self.isDirectoryRestricted != nil) {
    result = prime * result + [self.isDirectoryRestricted hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberAddArg:other];
}

- (BOOL)isEqualToMemberAddArg:(DBTEAMMemberAddArg *)aMemberAddArg {
  if (self == aMemberAddArg) {
    return YES;
  }
  if (![self.memberEmail isEqual:aMemberAddArg.memberEmail]) {
    return NO;
  }
  if (self.memberGivenName) {
    if (![self.memberGivenName isEqual:aMemberAddArg.memberGivenName]) {
      return NO;
    }
  }
  if (self.memberSurname) {
    if (![self.memberSurname isEqual:aMemberAddArg.memberSurname]) {
      return NO;
    }
  }
  if (self.memberExternalId) {
    if (![self.memberExternalId isEqual:aMemberAddArg.memberExternalId]) {
      return NO;
    }
  }
  if (self.memberPersistentId) {
    if (![self.memberPersistentId isEqual:aMemberAddArg.memberPersistentId]) {
      return NO;
    }
  }
  if (![self.sendWelcomeEmail isEqual:aMemberAddArg.sendWelcomeEmail]) {
    return NO;
  }
  if (![self.role isEqual:aMemberAddArg.role]) {
    return NO;
  }
  if (self.isDirectoryRestricted) {
    if (![self.isDirectoryRestricted isEqual:aMemberAddArg.isDirectoryRestricted]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMemberAddArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMemberAddArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"member_email"] = valueObj.memberEmail;
  if (valueObj.memberGivenName) {
    jsonDict[@"member_given_name"] = valueObj.memberGivenName;
  }
  if (valueObj.memberSurname) {
    jsonDict[@"member_surname"] = valueObj.memberSurname;
  }
  if (valueObj.memberExternalId) {
    jsonDict[@"member_external_id"] = valueObj.memberExternalId;
  }
  if (valueObj.memberPersistentId) {
    jsonDict[@"member_persistent_id"] = valueObj.memberPersistentId;
  }
  jsonDict[@"send_welcome_email"] = valueObj.sendWelcomeEmail;
  jsonDict[@"role"] = [DBTEAMAdminTierSerializer serialize:valueObj.role];
  if (valueObj.isDirectoryRestricted) {
    jsonDict[@"is_directory_restricted"] = valueObj.isDirectoryRestricted;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMemberAddArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *memberEmail = valueDict[@"member_email"];
  NSString *memberGivenName = valueDict[@"member_given_name"] ?: nil;
  NSString *memberSurname = valueDict[@"member_surname"] ?: nil;
  NSString *memberExternalId = valueDict[@"member_external_id"] ?: nil;
  NSString *memberPersistentId = valueDict[@"member_persistent_id"] ?: nil;
  NSNumber *sendWelcomeEmail = valueDict[@"send_welcome_email"] ?: @YES;
  DBTEAMAdminTier *role = valueDict[@"role"] ? [DBTEAMAdminTierSerializer deserialize:valueDict[@"role"]]
                                             : [[DBTEAMAdminTier alloc] initWithMemberOnly];
  NSNumber *isDirectoryRestricted = valueDict[@"is_directory_restricted"] ?: nil;

  return [[DBTEAMMemberAddArg alloc] initWithMemberEmail:memberEmail
                                         memberGivenName:memberGivenName
                                           memberSurname:memberSurname
                                        memberExternalId:memberExternalId
                                      memberPersistentId:memberPersistentId
                                        sendWelcomeEmail:sendWelcomeEmail
                                                    role:role
                                   isDirectoryRestricted:isDirectoryRestricted];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberAddResult.h"
#import "DBTEAMTeamMemberInfo.h"

#pragma mark - API Object

@implementation DBTEAMMemberAddResult

@synthesize success = _success;
@synthesize teamLicenseLimit = _teamLicenseLimit;
@synthesize freeTeamMemberLimitReached = _freeTeamMemberLimitReached;
@synthesize userAlreadyOnTeam = _userAlreadyOnTeam;
@synthesize userOnAnotherTeam = _userOnAnotherTeam;
@synthesize userAlreadyPaired = _userAlreadyPaired;
@synthesize userMigrationFailed = _userMigrationFailed;
@synthesize duplicateExternalMemberId = _duplicateExternalMemberId;
@synthesize duplicateMemberPersistentId = _duplicateMemberPersistentId;
@synthesize persistentIdDisabled = _persistentIdDisabled;
@synthesize userCreationFailed = _userCreationFailed;

#pragma mark - Constructors

- (instancetype)initWithSuccess:(DBTEAMTeamMemberInfo *)success {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultSuccess;
    _success = success;
  }
  return self;
}

- (instancetype)initWithTeamLicenseLimit:(NSString *)teamLicenseLimit {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultTeamLicenseLimit;
    _teamLicenseLimit = teamLicenseLimit;
  }
  return self;
}

- (instancetype)initWithFreeTeamMemberLimitReached:(NSString *)freeTeamMemberLimitReached {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultFreeTeamMemberLimitReached;
    _freeTeamMemberLimitReached = freeTeamMemberLimitReached;
  }
  return self;
}

- (instancetype)initWithUserAlreadyOnTeam:(NSString *)userAlreadyOnTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultUserAlreadyOnTeam;
    _userAlreadyOnTeam = userAlreadyOnTeam;
  }
  return self;
}

- (instancetype)initWithUserOnAnotherTeam:(NSString *)userOnAnotherTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultUserOnAnotherTeam;
    _userOnAnotherTeam = userOnAnotherTeam;
  }
  return self;
}

- (instancetype)initWithUserAlreadyPaired:(NSString *)userAlreadyPaired {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultUserAlreadyPaired;
    _userAlreadyPaired = userAlreadyPaired;
  }
  return self;
}

- (instancetype)initWithUserMigrationFailed:(NSString *)userMigrationFailed {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultUserMigrationFailed;
    _userMigrationFailed = userMigrationFailed;
  }
  return self;
}

- (instancetype)initWithDuplicateExternalMemberId:(NSString *)duplicateExternalMemberId {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultDuplicateExternalMemberId;
    _duplicateExternalMemberId = duplicateExternalMemberId;
  }
  return self;
}

- (instancetype)initWithDuplicateMemberPersistentId:(NSString *)duplicateMemberPersistentId {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultDuplicateMemberPersistentId;
    _duplicateMemberPersistentId = duplicateMemberPersistentId;
  }
  return self;
}

- (instancetype)initWithPersistentIdDisabled:(NSString *)persistentIdDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultPersistentIdDisabled;
    _persistentIdDisabled = persistentIdDisabled;
  }
  return self;
}

- (instancetype)initWithUserCreationFailed:(NSString *)userCreationFailed {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberAddResultUserCreationFailed;
    _userCreationFailed = userCreationFailed;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMTeamMemberInfo *)success {
  if (![self isSuccess]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultSuccess, but was %@.", [self tagName]];
  }
  return _success;
}

- (NSString *)teamLicenseLimit {
  if (![self isTeamLicenseLimit]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultTeamLicenseLimit, but was %@.", [self tagName]];
  }
  return _teamLicenseLimit;
}

- (NSString *)freeTeamMemberLimitReached {
  if (![self isFreeTeamMemberLimitReached]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMMemberAddResultFreeTeamMemberLimitReached, but was %@.", [self tagName]];
  }
  return _freeTeamMemberLimitReached;
}

- (NSString *)userAlreadyOnTeam {
  if (![self isUserAlreadyOnTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultUserAlreadyOnTeam, but was %@.", [self tagName]];
  }
  return _userAlreadyOnTeam;
}

- (NSString *)userOnAnotherTeam {
  if (![self isUserOnAnotherTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultUserOnAnotherTeam, but was %@.", [self tagName]];
  }
  return _userOnAnotherTeam;
}

- (NSString *)userAlreadyPaired {
  if (![self isUserAlreadyPaired]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultUserAlreadyPaired, but was %@.", [self tagName]];
  }
  return _userAlreadyPaired;
}

- (NSString *)userMigrationFailed {
  if (![self isUserMigrationFailed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultUserMigrationFailed, but was %@.", [self tagName]];
  }
  return _userMigrationFailed;
}

- (NSString *)duplicateExternalMemberId {
  if (![self isDuplicateExternalMemberId]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMMemberAddResultDuplicateExternalMemberId, but was %@.", [self tagName]];
  }
  return _duplicateExternalMemberId;
}

- (NSString *)duplicateMemberPersistentId {
  if (![self isDuplicateMemberPersistentId]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMMemberAddResultDuplicateMemberPersistentId, but was %@.", [self tagName]];
  }
  return _duplicateMemberPersistentId;
}

- (NSString *)persistentIdDisabled {
  if (![self isPersistentIdDisabled]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultPersistentIdDisabled, but was %@.", [self tagName]];
  }
  return _persistentIdDisabled;
}

- (NSString *)userCreationFailed {
  if (![self isUserCreationFailed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMemberAddResultUserCreationFailed, but was %@.", [self tagName]];
  }
  return _userCreationFailed;
}

#pragma mark - Tag state methods

- (BOOL)isSuccess {
  return _tag == DBTEAMMemberAddResultSuccess;
}

- (BOOL)isTeamLicenseLimit {
  return _tag == DBTEAMMemberAddResultTeamLicenseLimit;
}

- (BOOL)isFreeTeamMemberLimitReached {
  return _tag == DBTEAMMemberAddResultFreeTeamMemberLimitReached;
}

- (BOOL)isUserAlreadyOnTeam {
  return _tag == DBTEAMMemberAddResultUserAlreadyOnTeam;
}

- (BOOL)isUserOnAnotherTeam {
  return _tag == DBTEAMMemberAddResultUserOnAnotherTeam;
}

- (BOOL)isUserAlreadyPaired {
  return _tag == DBTEAMMemberAddResultUserAlreadyPaired;
}

- (BOOL)isUserMigrationFailed {
  return _tag == DBTEAMMemberAddResultUserMigrationFailed;
}

- (BOOL)isDuplicateExternalMemberId {
  return _tag == DBTEAMMemberAddResultDuplicateExternalMemberId;
}

- (BOOL)isDuplicateMemberPersistentId {
  return _tag == DBTEAMMemberAddResultDuplicateMemberPersistentId;
}

- (BOOL)isPersistentIdDisabled {
  return _tag == DBTEAMMemberAddResultPersistentIdDisabled;
}

- (BOOL)isUserCreationFailed {
  return _tag == DBTEAMMemberAddResultUserCreationFailed;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMemberAddResultSuccess:
    return @"DBTEAMMemberAddResultSuccess";
  case DBTEAMMemberAddResultTeamLicenseLimit:
    return @"DBTEAMMemberAddResultTeamLicenseLimit";
  case DBTEAMMemberAddResultFreeTeamMemberLimitReached:
    return @"DBTEAMMemberAddResultFreeTeamMemberLimitReached";
  case DBTEAMMemberAddResultUserAlreadyOnTeam:
    return @"DBTEAMMemberAddResultUserAlreadyOnTeam";
  case DBTEAMMemberAddResultUserOnAnotherTeam:
    return @"DBTEAMMemberAddResultUserOnAnotherTeam";
  case DBTEAMMemberAddResultUserAlreadyPaired:
    return @"DBTEAMMemberAddResultUserAlreadyPaired";
  case DBTEAMMemberAddResultUserMigrationFailed:
    return @"DBTEAMMemberAddResultUserMigrationFailed";
  case DBTEAMMemberAddResultDuplicateExternalMemberId:
    return @"DBTEAMMemberAddResultDuplicateExternalMemberId";
  case DBTEAMMemberAddResultDuplicateMemberPersistentId:
    return @"DBTEAMMemberAddResultDuplicateMemberPersistentId";
  case DBTEAMMemberAddResultPersistentIdDisabled:
    return @"DBTEAMMemberAddResultPersistentIdDisabled";
  case DBTEAMMemberAddResultUserCreationFailed:
    return @"DBTEAMMemberAddResultUserCreationFailed";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMemberAddResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMemberAddResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMemberAddResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMemberAddResultSuccess:
    result = prime * result + [self.success hash];
  case DBTEAMMemberAddResultTeamLicenseLimit:
    result = prime * result + [self.teamLicenseLimit hash];
  case DBTEAMMemberAddResultFreeTeamMemberLimitReached:
    result = prime * result + [self.freeTeamMemberLimitReached hash];
  case DBTEAMMemberAddResultUserAlreadyOnTeam:
    result = prime * result + [self.userAlreadyOnTeam hash];
  case DBTEAMMemberAddResultUserOnAnotherTeam:
    result = prime * result + [self.userOnAnotherTeam hash];
  case DBTEAMMemberAddResultUserAlreadyPaired:
    result = prime * result + [self.userAlreadyPaired hash];
  case DBTEAMMemberAddResultUserMigrationFailed:
    result = prime * result + [self.userMigrationFailed hash];
  case DBTEAMMemberAddResultDuplicateExternalMemberId:
    result = prime * result + [self.duplicateExternalMemberId hash];
  case DBTEAMMemberAddResultDuplicateMemberPersistentId:
    result = prime * result + [self.duplicateMemberPersistentId hash];
  case DBTEAMMemberAddResultPersistentIdDisabled:
    result = prime * result + [self.persistentIdDisabled hash];
  case DBTEAMMemberAddResultUserCreationFailed:
    result = prime * result + [self.userCreationFailed hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberAddResult:other];
}

- (BOOL)isEqualToMemberAddResult:(DBTEAMMemberAddResult *)aMemberAddResult {
  if (self == aMemberAddResult) {
    return YES;
  }
  if (self.tag != aMemberAddResult.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMemberAddResultSuccess:
    return [self.success isEqual:aMemberAddResult.success];
  case DBTEAMMemberAddResultTeamLicenseLimit:
    return [self.teamLicenseLimit isEqual:aMemberAddResult.teamLicenseLimit];
  case DBTEAMMemberAddResultFreeTeamMemberLimitReached:
    return [self.freeTeamMemberLimitReached isEqual:aMemberAddResult.freeTeamMemberLimitReached];
  case DBTEAMMemberAddResultUserAlreadyOnTeam:
    return [self.userAlreadyOnTeam isEqual:aMemberAddResult.userAlreadyOnTeam];
  case DBTEAMMemberAddResultUserOnAnotherTeam:
    return [self.userOnAnotherTeam isEqual:aMemberAddResult.userOnAnotherTeam];
  case DBTEAMMemberAddResultUserAlreadyPaired:
    return [self.userAlreadyPaired isEqual:aMemberAddResult.userAlreadyPaired];
  case DBTEAMMemberAddResultUserMigrationFailed:
    return [self.userMigrationFailed isEqual:aMemberAddResult.userMigrationFailed];
  case DBTEAMMemberAddResultDuplicateExternalMemberId:
    return [self.duplicateExternalMemberId isEqual:aMemberAddResult.duplicateExternalMemberId];
  case DBTEAMMemberAddResultDuplicateMemberPersistentId:
    return [self.duplicateMemberPersistentId isEqual:aMemberAddResult.duplicateMemberPersistentId];
  case DBTEAMMemberAddResultPersistentIdDisabled:
    return [self.persistentIdDisabled isEqual:aMemberAddResult.persistentIdDisabled];
  case DBTEAMMemberAddResultUserCreationFailed:
    return [self.userCreationFailed isEqual:aMemberAddResult.userCreationFailed];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMemberAddResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMemberAddResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSuccess]) {
    jsonDict = [[DBTEAMTeamMemberInfoSerializer serialize:valueObj.success] mutableCopy];
    jsonDict[@".tag"] = @"success";
  } else if ([valueObj isTeamLicenseLimit]) {
    jsonDict[@"team_license_limit"] = valueObj.teamLicenseLimit;
    jsonDict[@".tag"] = @"team_license_limit";
  } else if ([valueObj isFreeTeamMemberLimitReached]) {
    jsonDict[@"free_team_member_limit_reached"] = valueObj.freeTeamMemberLimitReached;
    jsonDict[@".tag"] = @"free_team_member_limit_reached";
  } else if ([valueObj isUserAlreadyOnTeam]) {
    jsonDict[@"user_already_on_team"] = valueObj.userAlreadyOnTeam;
    jsonDict[@".tag"] = @"user_already_on_team";
  } else if ([valueObj isUserOnAnotherTeam]) {
    jsonDict[@"user_on_another_team"] = valueObj.userOnAnotherTeam;
    jsonDict[@".tag"] = @"user_on_another_team";
  } else if ([valueObj isUserAlreadyPaired]) {
    jsonDict[@"user_already_paired"] = valueObj.userAlreadyPaired;
    jsonDict[@".tag"] = @"user_already_paired";
  } else if ([valueObj isUserMigrationFailed]) {
    jsonDict[@"user_migration_failed"] = valueObj.userMigrationFailed;
    jsonDict[@".tag"] = @"user_migration_failed";
  } else if ([valueObj isDuplicateExternalMemberId]) {
    jsonDict[@"duplicate_external_member_id"] = valueObj.duplicateExternalMemberId;
    jsonDict[@".tag"] = @"duplicate_external_member_id";
  } else if ([valueObj isDuplicateMemberPersistentId]) {
    jsonDict[@"duplicate_member_persistent_id"] = valueObj.duplicateMemberPersistentId;
    jsonDict[@".tag"] = @"duplicate_member_persistent_id";
  } else if ([valueObj isPersistentIdDisabled]) {
    jsonDict[@"persistent_id_disabled"] = valueObj.persistentIdDisabled;
    jsonDict[@".tag"] = @"persistent_id_disabled";
  } else if ([valueObj isUserCreationFailed]) {
    jsonDict[@"user_creation_failed"] = valueObj.userCreationFailed;
    jsonDict[@".tag"] = @"user_creation_failed";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMemberAddResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"success"]) {
    DBTEAMTeamMemberInfo *success = [DBTEAMTeamMemberInfoSerializer deserialize:valueDict];
    return [[DBTEAMMemberAddResult alloc] initWithSuccess:success];
  } else if ([tag isEqualToString:@"team_license_limit"]) {
    NSString *teamLicenseLimit = valueDict[@"team_license_limit"];
    return [[DBTEAMMemberAddResult alloc] initWithTeamLicenseLimit:teamLicenseLimit];
  } else if ([tag isEqualToString:@"free_team_member_limit_reached"]) {
    NSString *freeTeamMemberLimitReached = valueDict[@"free_team_member_limit_reached"];
    return [[DBTEAMMemberAddResult alloc] initWithFreeTeamMemberLimitReached:freeTeamMemberLimitReached];
  } else if ([tag isEqualToString:@"user_already_on_team"]) {
    NSString *userAlreadyOnTeam = valueDict[@"user_already_on_team"];
    return [[DBTEAMMemberAddResult alloc] initWithUserAlreadyOnTeam:userAlreadyOnTeam];
  } else if ([tag isEqualToString:@"user_on_another_team"]) {
    NSString *userOnAnotherTeam = valueDict[@"user_on_another_team"];
    return [[DBTEAMMemberAddResult alloc] initWithUserOnAnotherTeam:userOnAnotherTeam];
  } else if ([tag isEqualToString:@"user_already_paired"]) {
    NSString *userAlreadyPaired = valueDict[@"user_already_paired"];
    return [[DBTEAMMemberAddResult alloc] initWithUserAlreadyPaired:userAlreadyPaired];
  } else if ([tag isEqualToString:@"user_migration_failed"]) {
    NSString *userMigrationFailed = valueDict[@"user_migration_failed"];
    return [[DBTEAMMemberAddResult alloc] initWithUserMigrationFailed:userMigrationFailed];
  } else if ([tag isEqualToString:@"duplicate_external_member_id"]) {
    NSString *duplicateExternalMemberId = valueDict[@"duplicate_external_member_id"];
    return [[DBTEAMMemberAddResult alloc] initWithDuplicateExternalMemberId:duplicateExternalMemberId];
  } else if ([tag isEqualToString:@"duplicate_member_persistent_id"]) {
    NSString *duplicateMemberPersistentId = valueDict[@"duplicate_member_persistent_id"];
    return [[DBTEAMMemberAddResult alloc] initWithDuplicateMemberPersistentId:duplicateMemberPersistentId];
  } else if ([tag isEqualToString:@"persistent_id_disabled"]) {
    NSString *persistentIdDisabled = valueDict[@"persistent_id_disabled"];
    return [[DBTEAMMemberAddResult alloc] initWithPersistentIdDisabled:persistentIdDisabled];
  } else if ([tag isEqualToString:@"user_creation_failed"]) {
    NSString *userCreationFailed = valueDict[@"user_creation_failed"];
    return [[DBTEAMMemberAddResult alloc] initWithUserCreationFailed:userCreationFailed];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMActiveWebSession.h"
#import "DBTEAMDesktopClientSession.h"
#import "DBTEAMMemberDevices.h"
#import "DBTEAMMobileClientSession.h"

#pragma mark - API Object

@implementation DBTEAMMemberDevices

#pragma mark - Constructors

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId
                         webSessions:(NSArray<DBTEAMActiveWebSession *> *)webSessions
                      desktopClients:(NSArray<DBTEAMDesktopClientSession *> *)desktopClients
                       mobileClients:(NSArray<DBTEAMMobileClientSession *> *)mobileClients {
  [DBStoneValidators nonnullValidator:nil](teamMemberId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](webSessions);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](desktopClients);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](mobileClients);

  self = [super init];
  if (self) {
    _teamMemberId = teamMemberId;
    _webSessions = webSessions;
    _desktopClients = desktopClients;
    _mobileClients = mobileClients;
  }
  return self;
}

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId {
  return [self initWithTeamMemberId:teamMemberId webSessions:nil desktopClients:nil mobileClients:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMemberDevicesSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMemberDevicesSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMemberDevicesSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamMemberId hash];
  if (self.webSessions != nil) {
    result = prime * result + [self.webSessions hash];
  }
  if (self.desktopClients != nil) {
    result = prime * result + [self.desktopClients hash];
  }
  if (self.mobileClients != nil) {
    result = prime * result + [self.mobileClients hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberDevices:other];
}

- (BOOL)isEqualToMemberDevices:(DBTEAMMemberDevices *)aMemberDevices {
  if (self == aMemberDevices) {
    return YES;
  }
  if (![self.teamMemberId isEqual:aMemberDevices.teamMemberId]) {
    return NO;
  }
  if (self.webSessions) {
    if (![self.webSessions isEqual:aMemberDevices.webSessions]) {
      return NO;
    }
  }
  if (self.desktopClients) {
    if (![self.desktopClients isEqual:aMemberDevices.desktopClients]) {
      return NO;
    }
  }
  if (self.mobileClients) {
    if (![self.mobileClients isEqual:aMemberDevices.mobileClients]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMemberDevicesSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMemberDevices *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  if (valueObj.webSessions) {
    jsonDict[@"web_sessions"] = [DBArraySerializer serialize:valueObj.webSessions
                                                   withBlock:^id(id elem0) {
                                                     return [DBTEAMActiveWebSessionSerializer serialize:elem0];
                                                   }];
  }
  if (valueObj.desktopClients) {
    jsonDict[@"desktop_clients"] = [DBArraySerializer serialize:valueObj.desktopClients
                                                      withBlock:^id(id elem0) {
                                                        return [DBTEAMDesktopClientSessionSerializer serialize:elem0];
                                                      }];
  }
  if (valueObj.mobileClients) {
    jsonDict[@"mobile_clients"] = [DBArraySerializer serialize:valueObj.mobileClients
                                                     withBlock:^id(id elem0) {
                                                       return [DBTEAMMobileClientSessionSerializer serialize:elem0];
                                                     }];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMemberDevices *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamMemberId = valueDict[@"team_member_id"];
  NSArray<DBTEAMActiveWebSession *> *webSessions =
      valueDict[@"web_sessions"] ? [DBArraySerializer deserialize:valueDict[@"web_sessions"]
                                                        withBlock:^id(id elem0) {
                                                          return [DBTEAMActiveWebSessionSerializer deserialize:elem0];
                                                        }]
                                 : nil;
  NSArray<DBTEAMDesktopClientSession *> *desktopClients =
      valueDict[@"desktop_clients"]
          ? [DBArraySerializer deserialize:valueDict[@"desktop_clients"]
                                 withBlock:^id(id elem0) {
                                   return [DBTEAMDesktopClientSessionSerializer deserialize:elem0];
                                 }]
          : nil;
  NSArray<DBTEAMMobileClientSession *> *mobileClients =
      valueDict[@"mobile_clients"]
          ? [DBArraySerializer deserialize:valueDict[@"mobile_clients"]
                                 withBlock:^id(id elem0) {
                                   return [DBTEAMMobileClientSessionSerializer deserialize:elem0];
                                 }]
          : nil;

  return [[DBTEAMMemberDevices alloc] initWithTeamMemberId:teamMemberId
                                               webSessions:webSessions
                                            desktopClients:desktopClients
                                             mobileClients:mobileClients];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMApiApp.h"
#import "DBTEAMMemberLinkedApps.h"

#pragma mark - API Object

@implementation DBTEAMMemberLinkedApps

#pragma mark - Constructors

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId linkedApiApps:(NSArray<DBTEAMApiApp *> *)linkedApiApps {
  [DBStoneValidators nonnullValidator:nil](teamMemberId);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](linkedApiApps);

  self = [super init];
  if (self) {
    _teamMemberId = teamMemberId;
    _linkedApiApps = linkedApiApps;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMemberLinkedAppsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMemberLinkedAppsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMemberLinkedAppsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamMemberId hash];
  result = prime * result + [self.linkedApiApps hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberLinkedApps:other];
}

- (BOOL)isEqualToMemberLinkedApps:(DBTEAMMemberLinkedApps *)aMemberLinkedApps {
  if (self == aMemberLinkedApps) {
    return YES;
  }
  if (![self.teamMemberId isEqual:aMemberLinkedApps.teamMemberId]) {
    return NO;
  }
  if (![self.linkedApiApps isEqual:aMemberLinkedApps.linkedApiApps]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMemberLinkedAppsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMemberLinkedApps *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  jsonDict[@"linked_api_apps"] = [DBArraySerializer serialize:valueObj.linkedApiApps
                                                    withBlock:^id(id elem0) {
                                                      return [DBTEAMApiAppSerializer serialize:elem0];
                                                    }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMemberLinkedApps *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamMemberId = valueDict[@"team_member_id"];
  NSArray<DBTEAMApiApp *> *linkedApiApps = [DBArraySerializer deserialize:valueDict[@"linked_api_apps"]
                                                                withBlock:^id(id elem0) {
                                                                  return [DBTEAMApiAppSerializer deserialize:elem0];
                                                                }];

  return [[DBTEAMMemberLinkedApps alloc] initWithTeamMemberId:teamMemberId linkedApiApps:linkedApiApps];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberProfile.h"
#import "DBTEAMTeamMemberStatus.h"
#import "DBTEAMTeamMembershipType.h"
#import "DBUSERSName.h"

#pragma mark - API Object

@implementation DBTEAMMemberProfile

#pragma mark - Constructors

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId
                               email:(NSString *)email
                       emailVerified:(NSNumber *)emailVerified
                              status:(DBTEAMTeamMemberStatus *)status
                                name:(DBUSERSName *)name
                      membershipType:(DBTEAMTeamMembershipType *)membershipType
                          externalId:(NSString *)externalId
                           accountId:(NSString *)accountId
                            joinedOn:(NSDate *)joinedOn
                        persistentId:(NSString *)persistentId
               isDirectoryRestricted:(NSNumber *)isDirectoryRestricted {
  [DBStoneValidators nonnullValidator:nil](teamMemberId);
  [DBStoneValidators nonnullValidator:nil](email);
  [DBStoneValidators nonnullValidator:nil](emailVerified);
  [DBStoneValidators nonnullValidator:nil](status);
  [DBStoneValidators nonnullValidator:nil](name);
  [DBStoneValidators nonnullValidator:nil](membershipType);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);

  self = [super init];
  if (self) {
    _teamMemberId = teamMemberId;
    _externalId = externalId;
    _accountId = accountId;
    _email = email;
    _emailVerified = emailVerified;
    _status = status;
    _name = name;
    _membershipType = membershipType;
    _joinedOn = joinedOn;
    _persistentId = persistentId;
    _isDirectoryRestricted = isDirectoryRestricted;
  }
  return self;
}

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId
                               email:(NSString *)email
                       emailVerified:(NSNumber *)emailVerified
                              status:(DBTEAMTeamMemberStatus *)status
                                name:(DBUSERSName *)name
                      membershipType:(DBTEAMTeamMembershipType *)membershipType {
  return [self initWithTeamMemberId:teamMemberId
                              email:email
                      emailVerified:emailVerified
                             status:status
                               name:name
                     membershipType:membershipType
                         externalId:nil
                          accountId:nil
                           joinedOn:nil
                       persistentId:nil
              isDirectoryRestricted:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMemberProfileSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMemberProfileSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMemberProfileSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamMemberId hash];
  result = prime * result + [self.email hash];
  result = prime * result + [self.emailVerified hash];
  result = prime * result + [self.status hash];
  result = prime * result + [self.name hash];
  result = prime * result + [self.membershipType hash];
  if (self.externalId != nil) {
    result = prime * result + [self.externalId hash];
  }
  if (self.accountId != nil) {
    result = prime * result + [self.accountId hash];
  }
  if (self.joinedOn != nil) {
    result = prime * result + [self.joinedOn hash];
  }
  if (self.persistentId != nil) {
    result = prime * result + [self.persistentId hash];
  }
  if (self.isDirectoryRestricted != nil) {
    result = prime * result + [self.isDirectoryRestricted hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberProfile:other];
}

- (BOOL)isEqualToMemberProfile:(DBTEAMMemberProfile *)aMemberProfile {
  if (self == aMemberProfile) {
    return YES;
  }
  if (![self.teamMemberId isEqual:aMemberProfile.teamMemberId]) {
    return NO;
  }
  if (![self.email isEqual:aMemberProfile.email]) {
    return NO;
  }
  if (![self.emailVerified isEqual:aMemberProfile.emailVerified]) {
    return NO;
  }
  if (![self.status isEqual:aMemberProfile.status]) {
    return NO;
  }
  if (![self.name isEqual:aMemberProfile.name]) {
    return NO;
  }
  if (![self.membershipType isEqual:aMemberProfile.membershipType]) {
    return NO;
  }
  if (self.externalId) {
    if (![self.externalId isEqual:aMemberProfile.externalId]) {
      return NO;
    }
  }
  if (self.accountId) {
    if (![self.accountId isEqual:aMemberProfile.accountId]) {
      return NO;
    }
  }
  if (self.joinedOn) {
    if (![self.joinedOn isEqual:aMemberProfile.joinedOn]) {
      return NO;
    }
  }
  if (self.persistentId) {
    if (![self.persistentId isEqual:aMemberProfile.persistentId]) {
      return NO;
    }
  }
  if (self.isDirectoryRestricted) {
    if (![self.isDirectoryRestricted isEqual:aMemberProfile.isDirectoryRestricted]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMemberProfileSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMemberProfile *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  jsonDict[@"email"] = valueObj.email;
  jsonDict[@"email_verified"] = valueObj.emailVerified;
  jsonDict[@"status"] = [DBTEAMTeamMemberStatusSerializer serialize:valueObj.status];
  jsonDict[@"name"] = [DBUSERSNameSerializer serialize:valueObj.name];
  jsonDict[@"membership_type"] = [DBTEAMTeamMembershipTypeSerializer serialize:valueObj.membershipType];
  if (valueObj.externalId) {
    jsonDict[@"external_id"] = valueObj.externalId;
  }
  if (valueObj.accountId) {
    jsonDict[@"account_id"] = valueObj.accountId;
  }
  if (valueObj.joinedOn) {
    jsonDict[@"joined_on"] = [DBNSDateSerializer serialize:valueObj.joinedOn dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.persistentId) {
    jsonDict[@"persistent_id"] = valueObj.persistentId;
  }
  if (valueObj.isDirectoryRestricted) {
    jsonDict[@"is_directory_restricted"] = valueObj.isDirectoryRestricted;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMemberProfile *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamMemberId = valueDict[@"team_member_id"];
  NSString *email = valueDict[@"email"];
  NSNumber *emailVerified = valueDict[@"email_verified"];
  DBTEAMTeamMemberStatus *status = [DBTEAMTeamMemberStatusSerializer deserialize:valueDict[@"status"]];
  DBUSERSName *name = [DBUSERSNameSerializer deserialize:valueDict[@"name"]];
  DBTEAMTeamMembershipType *membershipType =
      [DBTEAMTeamMembershipTypeSerializer deserialize:valueDict[@"membership_type"]];
  NSString *externalId = valueDict[@"external_id"] ?: nil;
  NSString *accountId = valueDict[@"account_id"] ?: nil;
  NSDate *joinedOn = valueDict[@"joined_on"]
                         ? [DBNSDateSerializer deserialize:valueDict[@"joined_on"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                         : nil;
  NSString *persistentId = valueDict[@"persistent_id"] ?: nil;
  NSNumber *isDirectoryRestricted = valueDict[@"is_directory_restricted"] ?: nil;

  return [[DBTEAMMemberProfile alloc] initWithTeamMemberId:teamMemberId
                                                     email:email
                                             emailVerified:emailVerified
                                                    status:status
                                                      name:name
                                            membershipType:membershipType
                                                externalId:externalId
                                                 accountId:accountId
                                                  joinedOn:joinedOn
                                              persistentId:persistentId
                                     isDirectoryRestricted:isDirectoryRestricted];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMUserSelectorError.h"

#pragma mark - API Object

@implementation DBTEAMUserSelectorError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMUserSelectorErrorUserNotFound;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMUserSelectorErrorUserNotFound;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMUserSelectorErrorUserNotFound:
    return @"DBTEAMUserSelectorErrorUserNotFound";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMUserSelectorErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMUserSelectorErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMUserSelectorErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMUserSelectorErrorUserNotFound:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserSelectorError:other];
}

- (BOOL)isEqualToUserSelectorError:(DBTEAMUserSelectorError *)anUserSelectorError {
  if (self == anUserSelectorError) {
    return YES;
  }
  if (self.tag != anUserSelectorError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMUserSelectorErrorUserNotFound:
    return [[self tagName] isEqual:[anUserSelectorError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMUserSelectorErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMUserSelectorError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMUserSelectorError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMUserSelectorError alloc] initWithUserNotFound];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberSelectorError.h"
#import "DBTEAMUserSelectorError.h"

#pragma mark - API Object

@implementation DBTEAMMemberSelectorError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberSelectorErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMemberSelectorErrorUserNotInTeam;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMemberSelectorErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMemberSelectorErrorUserNotInTeam;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMemberSelectorErrorUserNotFound:
    return @"DBTEAMMemberSelectorErrorUserNotFound";
  case DBTEAMMemberSelectorErrorUserNotInTeam:
    return @"DBTEAMMemberSelectorErrorUserNotInTeam";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMemberSelectorErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMemberSelectorErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMemberSelectorErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMemberSelectorErrorUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMemberSelectorErrorUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSelectorError:other];
}

- (BOOL)isEqualToMemberSelectorError:(DBTEAMMemberSelectorError *)aMemberSelectorError {
  if (self == aMemberSelectorError) {
    return YES;
  }
  if (self.tag != aMemberSelectorError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMemberSelectorErrorUserNotFound:
    return [[self tagName] isEqual:[aMemberSelectorError tagName]];
  case DBTEAMMemberSelectorErrorUserNotInTeam:
    return [[self tagName] isEqual:[aMemberSelectorError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMemberSelectorErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMemberSelectorError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMemberSelectorError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMemberSelectorError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMemberSelectorError alloc] initWithUserNotInTeam];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberAddArg.h"
#import "DBTEAMMembersAddArg.h"

#pragma mark - API Object

@implementation DBTEAMMembersAddArg

#pragma mark - Constructors

- (instancetype)initWithDNewMembers:(NSArray<DBTEAMMemberAddArg *> *)dNewMembers forceAsync:(NSNumber *)forceAsync {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](dNewMembers);

  self = [super init];
  if (self) {
    _dNewMembers = dNewMembers;
    _forceAsync = forceAsync ?: @NO;
  }
  return self;
}

- (instancetype)initWithDNewMembers:(NSArray<DBTEAMMemberAddArg *> *)dNewMembers {
  return [self initWithDNewMembers:dNewMembers forceAsync:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersAddArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersAddArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersAddArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewMembers hash];
  result = prime * result + [self.forceAsync hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersAddArg:other];
}

- (BOOL)isEqualToMembersAddArg:(DBTEAMMembersAddArg *)aMembersAddArg {
  if (self == aMembersAddArg) {
    return YES;
  }
  if (![self.dNewMembers isEqual:aMembersAddArg.dNewMembers]) {
    return NO;
  }
  if (![self.forceAsync isEqual:aMembersAddArg.forceAsync]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersAddArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersAddArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_members"] = [DBArraySerializer serialize:valueObj.dNewMembers
                                                withBlock:^id(id elem0) {
                                                  return [DBTEAMMemberAddArgSerializer serialize:elem0];
                                                }];
  jsonDict[@"force_async"] = valueObj.forceAsync;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersAddArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMMemberAddArg *> *dNewMembers =
      [DBArraySerializer deserialize:valueDict[@"new_members"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMMemberAddArgSerializer deserialize:elem0];
                           }];
  NSNumber *forceAsync = valueDict[@"force_async"] ?: @NO;

  return [[DBTEAMMembersAddArg alloc] initWithDNewMembers:dNewMembers forceAsync:forceAsync];
}

@end

#import "DBASYNCPollResultBase.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberAddResult.h"
#import "DBTEAMMembersAddJobStatus.h"

#pragma mark - API Object

@implementation DBTEAMMembersAddJobStatus

@synthesize complete = _complete;
@synthesize failed = _failed;

#pragma mark - Constructors

- (instancetype)initWithInProgress {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersAddJobStatusInProgress;
  }
  return self;
}

- (instancetype)initWithComplete:(NSArray<DBTEAMMemberAddResult *> *)complete {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersAddJobStatusComplete;
    _complete = complete;
  }
  return self;
}

- (instancetype)initWithFailed:(NSString *)failed {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersAddJobStatusFailed;
    _failed = failed;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSArray<DBTEAMMemberAddResult *> *)complete {
  if (![self isComplete]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMembersAddJobStatusComplete, but was %@.", [self tagName]];
  }
  return _complete;
}

- (NSString *)failed {
  if (![self isFailed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMembersAddJobStatusFailed, but was %@.", [self tagName]];
  }
  return _failed;
}

#pragma mark - Tag state methods

- (BOOL)isInProgress {
  return _tag == DBTEAMMembersAddJobStatusInProgress;
}

- (BOOL)isComplete {
  return _tag == DBTEAMMembersAddJobStatusComplete;
}

- (BOOL)isFailed {
  return _tag == DBTEAMMembersAddJobStatusFailed;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersAddJobStatusInProgress:
    return @"DBTEAMMembersAddJobStatusInProgress";
  case DBTEAMMembersAddJobStatusComplete:
    return @"DBTEAMMembersAddJobStatusComplete";
  case DBTEAMMembersAddJobStatusFailed:
    return @"DBTEAMMembersAddJobStatusFailed";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersAddJobStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersAddJobStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersAddJobStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersAddJobStatusInProgress:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersAddJobStatusComplete:
    result = prime * result + [self.complete hash];
  case DBTEAMMembersAddJobStatusFailed:
    result = prime * result + [self.failed hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersAddJobStatus:other];
}

- (BOOL)isEqualToMembersAddJobStatus:(DBTEAMMembersAddJobStatus *)aMembersAddJobStatus {
  if (self == aMembersAddJobStatus) {
    return YES;
  }
  if (self.tag != aMembersAddJobStatus.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersAddJobStatusInProgress:
    return [[self tagName] isEqual:[aMembersAddJobStatus tagName]];
  case DBTEAMMembersAddJobStatusComplete:
    return [self.complete isEqual:aMembersAddJobStatus.complete];
  case DBTEAMMembersAddJobStatusFailed:
    return [self.failed isEqual:aMembersAddJobStatus.failed];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersAddJobStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersAddJobStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInProgress]) {
    jsonDict[@".tag"] = @"in_progress";
  } else if ([valueObj isComplete]) {
    jsonDict[@"complete"] = [DBArraySerializer serialize:valueObj.complete
                                               withBlock:^id(id elem0) {
                                                 return [DBTEAMMemberAddResultSerializer serialize:elem0];
                                               }];
    jsonDict[@".tag"] = @"complete";
  } else if ([valueObj isFailed]) {
    jsonDict[@"failed"] = valueObj.failed;
    jsonDict[@".tag"] = @"failed";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersAddJobStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"in_progress"]) {
    return [[DBTEAMMembersAddJobStatus alloc] initWithInProgress];
  } else if ([tag isEqualToString:@"complete"]) {
    NSArray<DBTEAMMemberAddResult *> *complete =
        [DBArraySerializer deserialize:valueDict[@"complete"]
                             withBlock:^id(id elem0) {
                               return [DBTEAMMemberAddResultSerializer deserialize:elem0];
                             }];
    return [[DBTEAMMembersAddJobStatus alloc] initWithComplete:complete];
  } else if ([tag isEqualToString:@"failed"]) {
    NSString *failed = valueDict[@"failed"];
    return [[DBTEAMMembersAddJobStatus alloc] initWithFailed:failed];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBASYNCLaunchResultBase.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberAddResult.h"
#import "DBTEAMMembersAddLaunch.h"

#pragma mark - API Object

@implementation DBTEAMMembersAddLaunch

@synthesize asyncJobId = _asyncJobId;
@synthesize complete = _complete;

#pragma mark - Constructors

- (instancetype)initWithAsyncJobId:(NSString *)asyncJobId {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersAddLaunchAsyncJobId;
    _asyncJobId = asyncJobId;
  }
  return self;
}

- (instancetype)initWithComplete:(NSArray<DBTEAMMemberAddResult *> *)complete {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersAddLaunchComplete;
    _complete = complete;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)asyncJobId {
  if (![self isAsyncJobId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMembersAddLaunchAsyncJobId, but was %@.", [self tagName]];
  }
  return _asyncJobId;
}

- (NSArray<DBTEAMMemberAddResult *> *)complete {
  if (![self isComplete]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMembersAddLaunchComplete, but was %@.", [self tagName]];
  }
  return _complete;
}

#pragma mark - Tag state methods

- (BOOL)isAsyncJobId {
  return _tag == DBTEAMMembersAddLaunchAsyncJobId;
}

- (BOOL)isComplete {
  return _tag == DBTEAMMembersAddLaunchComplete;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersAddLaunchAsyncJobId:
    return @"DBTEAMMembersAddLaunchAsyncJobId";
  case DBTEAMMembersAddLaunchComplete:
    return @"DBTEAMMembersAddLaunchComplete";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersAddLaunchSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersAddLaunchSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersAddLaunchSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersAddLaunchAsyncJobId:
    result = prime * result + [self.asyncJobId hash];
  case DBTEAMMembersAddLaunchComplete:
    result = prime * result + [self.complete hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersAddLaunch:other];
}

- (BOOL)isEqualToMembersAddLaunch:(DBTEAMMembersAddLaunch *)aMembersAddLaunch {
  if (self == aMembersAddLaunch) {
    return YES;
  }
  if (self.tag != aMembersAddLaunch.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersAddLaunchAsyncJobId:
    return [self.asyncJobId isEqual:aMembersAddLaunch.asyncJobId];
  case DBTEAMMembersAddLaunchComplete:
    return [self.complete isEqual:aMembersAddLaunch.complete];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersAddLaunchSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersAddLaunch *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAsyncJobId]) {
    jsonDict[@"async_job_id"] = valueObj.asyncJobId;
    jsonDict[@".tag"] = @"async_job_id";
  } else if ([valueObj isComplete]) {
    jsonDict[@"complete"] = [DBArraySerializer serialize:valueObj.complete
                                               withBlock:^id(id elem0) {
                                                 return [DBTEAMMemberAddResultSerializer serialize:elem0];
                                               }];
    jsonDict[@".tag"] = @"complete";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersAddLaunch *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"async_job_id"]) {
    NSString *asyncJobId = valueDict[@"async_job_id"];
    return [[DBTEAMMembersAddLaunch alloc] initWithAsyncJobId:asyncJobId];
  } else if ([tag isEqualToString:@"complete"]) {
    NSArray<DBTEAMMemberAddResult *> *complete =
        [DBArraySerializer deserialize:valueDict[@"complete"]
                             withBlock:^id(id elem0) {
                               return [DBTEAMMemberAddResultSerializer deserialize:elem0];
                             }];
    return [[DBTEAMMembersAddLaunch alloc] initWithComplete:complete];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersDeactivateArg.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMMembersDeactivateArg

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user wipeData:(NSNumber *)wipeData {
  [DBStoneValidators nonnullValidator:nil](user);

  self = [super init];
  if (self) {
    _user = user;
    _wipeData = wipeData ?: @YES;
  }
  return self;
}

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user {
  return [self initWithUser:user wipeData:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersDeactivateArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersDeactivateArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersDeactivateArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.user hash];
  result = prime * result + [self.wipeData hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersDeactivateArg:other];
}

- (BOOL)isEqualToMembersDeactivateArg:(DBTEAMMembersDeactivateArg *)aMembersDeactivateArg {
  if (self == aMembersDeactivateArg) {
    return YES;
  }
  if (![self.user isEqual:aMembersDeactivateArg.user]) {
    return NO;
  }
  if (![self.wipeData isEqual:aMembersDeactivateArg.wipeData]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersDeactivateArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersDeactivateArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];
  jsonDict[@"wipe_data"] = valueObj.wipeData;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersDeactivateArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];
  NSNumber *wipeData = valueDict[@"wipe_data"] ?: @YES;

  return [[DBTEAMMembersDeactivateArg alloc] initWithUser:user wipeData:wipeData];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersDeactivateError.h"
#import "DBTEAMUserSelectorError.h"

#pragma mark - API Object

@implementation DBTEAMMembersDeactivateError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersDeactivateErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersDeactivateErrorUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersDeactivateErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMembersDeactivateErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMembersDeactivateErrorUserNotInTeam;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersDeactivateErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersDeactivateErrorUserNotFound:
    return @"DBTEAMMembersDeactivateErrorUserNotFound";
  case DBTEAMMembersDeactivateErrorUserNotInTeam:
    return @"DBTEAMMembersDeactivateErrorUserNotInTeam";
  case DBTEAMMembersDeactivateErrorOther:
    return @"DBTEAMMembersDeactivateErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersDeactivateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersDeactivateErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersDeactivateErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersDeactivateErrorUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersDeactivateErrorUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersDeactivateErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersDeactivateError:other];
}

- (BOOL)isEqualToMembersDeactivateError:(DBTEAMMembersDeactivateError *)aMembersDeactivateError {
  if (self == aMembersDeactivateError) {
    return YES;
  }
  if (self.tag != aMembersDeactivateError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersDeactivateErrorUserNotFound:
    return [[self tagName] isEqual:[aMembersDeactivateError tagName]];
  case DBTEAMMembersDeactivateErrorUserNotInTeam:
    return [[self tagName] isEqual:[aMembersDeactivateError tagName]];
  case DBTEAMMembersDeactivateErrorOther:
    return [[self tagName] isEqual:[aMembersDeactivateError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersDeactivateErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersDeactivateError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersDeactivateError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMembersDeactivateError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMembersDeactivateError alloc] initWithUserNotInTeam];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersDeactivateError alloc] initWithOther];
  } else {
    return [[DBTEAMMembersDeactivateError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersGetInfoArgs.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMMembersGetInfoArgs

#pragma mark - Constructors

- (instancetype)initWithMembers:(NSArray<DBTEAMUserSelectorArg *> *)members {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](members);

  self = [super init];
  if (self) {
    _members = members;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersGetInfoArgsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersGetInfoArgsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersGetInfoArgsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.members hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersGetInfoArgs:other];
}

- (BOOL)isEqualToMembersGetInfoArgs:(DBTEAMMembersGetInfoArgs *)aMembersGetInfoArgs {
  if (self == aMembersGetInfoArgs) {
    return YES;
  }
  if (![self.members isEqual:aMembersGetInfoArgs.members]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersGetInfoArgsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersGetInfoArgs *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"members"] = [DBArraySerializer serialize:valueObj.members
                                            withBlock:^id(id elem0) {
                                              return [DBTEAMUserSelectorArgSerializer serialize:elem0];
                                            }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersGetInfoArgs *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMUserSelectorArg *> *members =
      [DBArraySerializer deserialize:valueDict[@"members"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMUserSelectorArgSerializer deserialize:elem0];
                           }];

  return [[DBTEAMMembersGetInfoArgs alloc] initWithMembers:members];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersGetInfoError.h"

#pragma mark - API Object

@implementation DBTEAMMembersGetInfoError

#pragma mark - Constructors

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersGetInfoErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOther {
  return _tag == DBTEAMMembersGetInfoErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersGetInfoErrorOther:
    return @"DBTEAMMembersGetInfoErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersGetInfoErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersGetInfoErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersGetInfoErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersGetInfoErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersGetInfoError:other];
}

- (BOOL)isEqualToMembersGetInfoError:(DBTEAMMembersGetInfoError *)aMembersGetInfoError {
  if (self == aMembersGetInfoError) {
    return YES;
  }
  if (self.tag != aMembersGetInfoError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersGetInfoErrorOther:
    return [[self tagName] isEqual:[aMembersGetInfoError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersGetInfoErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersGetInfoError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersGetInfoError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersGetInfoError alloc] initWithOther];
  } else {
    return [[DBTEAMMembersGetInfoError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersGetInfoItem.h"
#import "DBTEAMTeamMemberInfo.h"

#pragma mark - API Object

@implementation DBTEAMMembersGetInfoItem

@synthesize idNotFound = _idNotFound;
@synthesize memberInfo = _memberInfo;

#pragma mark - Constructors

- (instancetype)initWithIdNotFound:(NSString *)idNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersGetInfoItemIdNotFound;
    _idNotFound = idNotFound;
  }
  return self;
}

- (instancetype)initWithMemberInfo:(DBTEAMTeamMemberInfo *)memberInfo {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersGetInfoItemMemberInfo;
    _memberInfo = memberInfo;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)idNotFound {
  if (![self isIdNotFound]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMembersGetInfoItemIdNotFound, but was %@.", [self tagName]];
  }
  return _idNotFound;
}

- (DBTEAMTeamMemberInfo *)memberInfo {
  if (![self isMemberInfo]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMMembersGetInfoItemMemberInfo, but was %@.", [self tagName]];
  }
  return _memberInfo;
}

#pragma mark - Tag state methods

- (BOOL)isIdNotFound {
  return _tag == DBTEAMMembersGetInfoItemIdNotFound;
}

- (BOOL)isMemberInfo {
  return _tag == DBTEAMMembersGetInfoItemMemberInfo;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersGetInfoItemIdNotFound:
    return @"DBTEAMMembersGetInfoItemIdNotFound";
  case DBTEAMMembersGetInfoItemMemberInfo:
    return @"DBTEAMMembersGetInfoItemMemberInfo";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersGetInfoItemSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersGetInfoItemSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersGetInfoItemSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersGetInfoItemIdNotFound:
    result = prime * result + [self.idNotFound hash];
  case DBTEAMMembersGetInfoItemMemberInfo:
    result = prime * result + [self.memberInfo hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersGetInfoItem:other];
}

- (BOOL)isEqualToMembersGetInfoItem:(DBTEAMMembersGetInfoItem *)aMembersGetInfoItem {
  if (self == aMembersGetInfoItem) {
    return YES;
  }
  if (self.tag != aMembersGetInfoItem.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersGetInfoItemIdNotFound:
    return [self.idNotFound isEqual:aMembersGetInfoItem.idNotFound];
  case DBTEAMMembersGetInfoItemMemberInfo:
    return [self.memberInfo isEqual:aMembersGetInfoItem.memberInfo];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersGetInfoItemSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersGetInfoItem *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isIdNotFound]) {
    jsonDict[@"id_not_found"] = valueObj.idNotFound;
    jsonDict[@".tag"] = @"id_not_found";
  } else if ([valueObj isMemberInfo]) {
    jsonDict = [[DBTEAMTeamMemberInfoSerializer serialize:valueObj.memberInfo] mutableCopy];
    jsonDict[@".tag"] = @"member_info";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersGetInfoItem *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"id_not_found"]) {
    NSString *idNotFound = valueDict[@"id_not_found"];
    return [[DBTEAMMembersGetInfoItem alloc] initWithIdNotFound:idNotFound];
  } else if ([tag isEqualToString:@"member_info"]) {
    DBTEAMTeamMemberInfo *memberInfo = [DBTEAMTeamMemberInfoSerializer deserialize:valueDict];
    return [[DBTEAMMembersGetInfoItem alloc] initWithMemberInfo:memberInfo];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersListArg.h"

#pragma mark - API Object

@implementation DBTEAMMembersListArg

#pragma mark - Constructors

- (instancetype)initWithLimit:(NSNumber *)limit includeRemoved:(NSNumber *)includeRemoved {

  self = [super init];
  if (self) {
    _limit = limit ?: @(1000);
    _includeRemoved = includeRemoved ?: @NO;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithLimit:nil includeRemoved:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersListArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersListArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersListArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.limit hash];
  result = prime * result + [self.includeRemoved hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersListArg:other];
}

- (BOOL)isEqualToMembersListArg:(DBTEAMMembersListArg *)aMembersListArg {
  if (self == aMembersListArg) {
    return YES;
  }
  if (![self.limit isEqual:aMembersListArg.limit]) {
    return NO;
  }
  if (![self.includeRemoved isEqual:aMembersListArg.includeRemoved]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersListArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersListArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"limit"] = valueObj.limit;
  jsonDict[@"include_removed"] = valueObj.includeRemoved;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersListArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);
  NSNumber *includeRemoved = valueDict[@"include_removed"] ?: @NO;

  return [[DBTEAMMembersListArg alloc] initWithLimit:limit includeRemoved:includeRemoved];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersListContinueArg.h"

#pragma mark - API Object

@implementation DBTEAMMembersListContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {
  [DBStoneValidators nonnullValidator:nil](cursor);

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersListContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersListContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersListContinueArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.cursor hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersListContinueArg:other];
}

- (BOOL)isEqualToMembersListContinueArg:(DBTEAMMembersListContinueArg *)aMembersListContinueArg {
  if (self == aMembersListContinueArg) {
    return YES;
  }
  if (![self.cursor isEqual:aMembersListContinueArg.cursor]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersListContinueArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersListContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersListContinueArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBTEAMMembersListContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersListContinueError.h"

#pragma mark - API Object

@implementation DBTEAMMembersListContinueError

#pragma mark - Constructors

- (instancetype)initWithInvalidCursor {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersListContinueErrorInvalidCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersListContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidCursor {
  return _tag == DBTEAMMembersListContinueErrorInvalidCursor;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersListContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersListContinueErrorInvalidCursor:
    return @"DBTEAMMembersListContinueErrorInvalidCursor";
  case DBTEAMMembersListContinueErrorOther:
    return @"DBTEAMMembersListContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersListContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersListContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersListContinueErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersListContinueErrorInvalidCursor:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersListContinueErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersListContinueError:other];
}

- (BOOL)isEqualToMembersListContinueError:(DBTEAMMembersListContinueError *)aMembersListContinueError {
  if (self == aMembersListContinueError) {
    return YES;
  }
  if (self.tag != aMembersListContinueError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersListContinueErrorInvalidCursor:
    return [[self tagName] isEqual:[aMembersListContinueError tagName]];
  case DBTEAMMembersListContinueErrorOther:
    return [[self tagName] isEqual:[aMembersListContinueError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersListContinueErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersListContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidCursor]) {
    jsonDict[@".tag"] = @"invalid_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersListContinueError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_cursor"]) {
    return [[DBTEAMMembersListContinueError alloc] initWithInvalidCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersListContinueError alloc] initWithOther];
  } else {
    return [[DBTEAMMembersListContinueError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersListError.h"

#pragma mark - API Object

@implementation DBTEAMMembersListError

#pragma mark - Constructors

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersListErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOther {
  return _tag == DBTEAMMembersListErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersListErrorOther:
    return @"DBTEAMMembersListErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersListErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersListErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersListErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersListErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersListError:other];
}

- (BOOL)isEqualToMembersListError:(DBTEAMMembersListError *)aMembersListError {
  if (self == aMembersListError) {
    return YES;
  }
  if (self.tag != aMembersListError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersListErrorOther:
    return [[self tagName] isEqual:[aMembersListError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersListErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersListError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersListError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersListError alloc] initWithOther];
  } else {
    return [[DBTEAMMembersListError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersListResult.h"
#import "DBTEAMTeamMemberInfo.h"

#pragma mark - API Object

@implementation DBTEAMMembersListResult

#pragma mark - Constructors

- (instancetype)initWithMembers:(NSArray<DBTEAMTeamMemberInfo *> *)members
                         cursor:(NSString *)cursor
                        hasMore:(NSNumber *)hasMore {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](members);
  [DBStoneValidators nonnullValidator:nil](cursor);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _members = members;
    _cursor = cursor;
    _hasMore = hasMore;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersListResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersListResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersListResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.members hash];
  result = prime * result + [self.cursor hash];
  result = prime * result + [self.hasMore hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersListResult:other];
}

- (BOOL)isEqualToMembersListResult:(DBTEAMMembersListResult *)aMembersListResult {
  if (self == aMembersListResult) {
    return YES;
  }
  if (![self.members isEqual:aMembersListResult.members]) {
    return NO;
  }
  if (![self.cursor isEqual:aMembersListResult.cursor]) {
    return NO;
  }
  if (![self.hasMore isEqual:aMembersListResult.hasMore]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersListResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersListResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"members"] = [DBArraySerializer serialize:valueObj.members
                                            withBlock:^id(id elem0) {
                                              return [DBTEAMTeamMemberInfoSerializer serialize:elem0];
                                            }];
  jsonDict[@"cursor"] = valueObj.cursor;
  jsonDict[@"has_more"] = valueObj.hasMore;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersListResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMTeamMemberInfo *> *members =
      [DBArraySerializer deserialize:valueDict[@"members"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMTeamMemberInfoSerializer deserialize:elem0];
                           }];
  NSString *cursor = valueDict[@"cursor"];
  NSNumber *hasMore = valueDict[@"has_more"];

  return [[DBTEAMMembersListResult alloc] initWithMembers:members cursor:cursor hasMore:hasMore];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersRecoverArg.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMMembersRecoverArg

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user {
  [DBStoneValidators nonnullValidator:nil](user);

  self = [super init];
  if (self) {
    _user = user;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersRecoverArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersRecoverArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersRecoverArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.user hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersRecoverArg:other];
}

- (BOOL)isEqualToMembersRecoverArg:(DBTEAMMembersRecoverArg *)aMembersRecoverArg {
  if (self == aMembersRecoverArg) {
    return YES;
  }
  if (![self.user isEqual:aMembersRecoverArg.user]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersRecoverArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersRecoverArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersRecoverArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];

  return [[DBTEAMMembersRecoverArg alloc] initWithUser:user];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersRecoverError.h"
#import "DBTEAMUserSelectorError.h"

#pragma mark - API Object

@implementation DBTEAMMembersRecoverError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRecoverErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithUserUnrecoverable {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRecoverErrorUserUnrecoverable;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRecoverErrorUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithTeamLicenseLimit {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRecoverErrorTeamLicenseLimit;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRecoverErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMembersRecoverErrorUserNotFound;
}

- (BOOL)isUserUnrecoverable {
  return _tag == DBTEAMMembersRecoverErrorUserUnrecoverable;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMembersRecoverErrorUserNotInTeam;
}

- (BOOL)isTeamLicenseLimit {
  return _tag == DBTEAMMembersRecoverErrorTeamLicenseLimit;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersRecoverErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersRecoverErrorUserNotFound:
    return @"DBTEAMMembersRecoverErrorUserNotFound";
  case DBTEAMMembersRecoverErrorUserUnrecoverable:
    return @"DBTEAMMembersRecoverErrorUserUnrecoverable";
  case DBTEAMMembersRecoverErrorUserNotInTeam:
    return @"DBTEAMMembersRecoverErrorUserNotInTeam";
  case DBTEAMMembersRecoverErrorTeamLicenseLimit:
    return @"DBTEAMMembersRecoverErrorTeamLicenseLimit";
  case DBTEAMMembersRecoverErrorOther:
    return @"DBTEAMMembersRecoverErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersRecoverErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersRecoverErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersRecoverErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersRecoverErrorUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRecoverErrorUserUnrecoverable:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRecoverErrorUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRecoverErrorTeamLicenseLimit:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRecoverErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersRecoverError:other];
}

- (BOOL)isEqualToMembersRecoverError:(DBTEAMMembersRecoverError *)aMembersRecoverError {
  if (self == aMembersRecoverError) {
    return YES;
  }
  if (self.tag != aMembersRecoverError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersRecoverErrorUserNotFound:
    return [[self tagName] isEqual:[aMembersRecoverError tagName]];
  case DBTEAMMembersRecoverErrorUserUnrecoverable:
    return [[self tagName] isEqual:[aMembersRecoverError tagName]];
  case DBTEAMMembersRecoverErrorUserNotInTeam:
    return [[self tagName] isEqual:[aMembersRecoverError tagName]];
  case DBTEAMMembersRecoverErrorTeamLicenseLimit:
    return [[self tagName] isEqual:[aMembersRecoverError tagName]];
  case DBTEAMMembersRecoverErrorOther:
    return [[self tagName] isEqual:[aMembersRecoverError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersRecoverErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersRecoverError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isUserUnrecoverable]) {
    jsonDict[@".tag"] = @"user_unrecoverable";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else if ([valueObj isTeamLicenseLimit]) {
    jsonDict[@".tag"] = @"team_license_limit";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersRecoverError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMembersRecoverError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"user_unrecoverable"]) {
    return [[DBTEAMMembersRecoverError alloc] initWithUserUnrecoverable];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMembersRecoverError alloc] initWithUserNotInTeam];
  } else if ([tag isEqualToString:@"team_license_limit"]) {
    return [[DBTEAMMembersRecoverError alloc] initWithTeamLicenseLimit];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersRecoverError alloc] initWithOther];
  } else {
    return [[DBTEAMMembersRecoverError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersDeactivateArg.h"
#import "DBTEAMMembersRemoveArg.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMMembersRemoveArg

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user
                    wipeData:(NSNumber *)wipeData
              transferDestId:(DBTEAMUserSelectorArg *)transferDestId
             transferAdminId:(DBTEAMUserSelectorArg *)transferAdminId
                 keepAccount:(NSNumber *)keepAccount {
  [DBStoneValidators nonnullValidator:nil](user);

  self = [super initWithUser:user wipeData:wipeData];
  if (self) {
    _transferDestId = transferDestId;
    _transferAdminId = transferAdminId;
    _keepAccount = keepAccount ?: @NO;
  }
  return self;
}

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user {
  return [self initWithUser:user wipeData:nil transferDestId:nil transferAdminId:nil keepAccount:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersRemoveArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersRemoveArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersRemoveArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.user hash];
  result = prime * result + [self.wipeData hash];
  if (self.transferDestId != nil) {
    result = prime * result + [self.transferDestId hash];
  }
  if (self.transferAdminId != nil) {
    result = prime * result + [self.transferAdminId hash];
  }
  result = prime * result + [self.keepAccount hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersRemoveArg:other];
}

- (BOOL)isEqualToMembersRemoveArg:(DBTEAMMembersRemoveArg *)aMembersRemoveArg {
  if (self == aMembersRemoveArg) {
    return YES;
  }
  if (![self.user isEqual:aMembersRemoveArg.user]) {
    return NO;
  }
  if (![self.wipeData isEqual:aMembersRemoveArg.wipeData]) {
    return NO;
  }
  if (self.transferDestId) {
    if (![self.transferDestId isEqual:aMembersRemoveArg.transferDestId]) {
      return NO;
    }
  }
  if (self.transferAdminId) {
    if (![self.transferAdminId isEqual:aMembersRemoveArg.transferAdminId]) {
      return NO;
    }
  }
  if (![self.keepAccount isEqual:aMembersRemoveArg.keepAccount]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersRemoveArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersRemoveArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];
  jsonDict[@"wipe_data"] = valueObj.wipeData;
  if (valueObj.transferDestId) {
    jsonDict[@"transfer_dest_id"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.transferDestId];
  }
  if (valueObj.transferAdminId) {
    jsonDict[@"transfer_admin_id"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.transferAdminId];
  }
  jsonDict[@"keep_account"] = valueObj.keepAccount;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersRemoveArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];
  NSNumber *wipeData = valueDict[@"wipe_data"] ?: @YES;
  DBTEAMUserSelectorArg *transferDestId =
      valueDict[@"transfer_dest_id"] ? [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"transfer_dest_id"]]
                                     : nil;
  DBTEAMUserSelectorArg *transferAdminId =
      valueDict[@"transfer_admin_id"] ? [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"transfer_admin_id"]]
                                      : nil;
  NSNumber *keepAccount = valueDict[@"keep_account"] ?: @NO;

  return [[DBTEAMMembersRemoveArg alloc] initWithUser:user
                                             wipeData:wipeData
                                       transferDestId:transferDestId
                                      transferAdminId:transferAdminId
                                          keepAccount:keepAccount];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersDeactivateError.h"
#import "DBTEAMMembersRemoveError.h"

#pragma mark - API Object

@implementation DBTEAMMembersRemoveError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorOther;
  }
  return self;
}

- (instancetype)initWithRemoveLastAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorRemoveLastAdmin;
  }
  return self;
}

- (instancetype)initWithRemovedAndTransferDestShouldDiffer {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer;
  }
  return self;
}

- (instancetype)initWithRemovedAndTransferAdminShouldDiffer {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer;
  }
  return self;
}

- (instancetype)initWithTransferDestUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorTransferDestUserNotFound;
  }
  return self;
}

- (instancetype)initWithTransferDestUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorTransferDestUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithTransferAdminUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorTransferAdminUserNotFound;
  }
  return self;
}

- (instancetype)initWithTransferAdminUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithUnspecifiedTransferAdminId {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId;
  }
  return self;
}

- (instancetype)initWithTransferAdminIsNotAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin;
  }
  return self;
}

- (instancetype)initWithCannotKeepAccountAndTransfer {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer;
  }
  return self;
}

- (instancetype)initWithCannotKeepAccountAndDeleteData {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData;
  }
  return self;
}

- (instancetype)initWithEmailAddressTooLongToBeDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled;
  }
  return self;
}

- (instancetype)initWithCannotKeepInvitedUserAccount {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersRemoveErrorCannotKeepInvitedUserAccount;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMembersRemoveErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMembersRemoveErrorUserNotInTeam;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersRemoveErrorOther;
}

- (BOOL)isRemoveLastAdmin {
  return _tag == DBTEAMMembersRemoveErrorRemoveLastAdmin;
}

- (BOOL)isRemovedAndTransferDestShouldDiffer {
  return _tag == DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer;
}

- (BOOL)isRemovedAndTransferAdminShouldDiffer {
  return _tag == DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer;
}

- (BOOL)isTransferDestUserNotFound {
  return _tag == DBTEAMMembersRemoveErrorTransferDestUserNotFound;
}

- (BOOL)isTransferDestUserNotInTeam {
  return _tag == DBTEAMMembersRemoveErrorTransferDestUserNotInTeam;
}

- (BOOL)isTransferAdminUserNotFound {
  return _tag == DBTEAMMembersRemoveErrorTransferAdminUserNotFound;
}

- (BOOL)isTransferAdminUserNotInTeam {
  return _tag == DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam;
}

- (BOOL)isUnspecifiedTransferAdminId {
  return _tag == DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId;
}

- (BOOL)isTransferAdminIsNotAdmin {
  return _tag == DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin;
}

- (BOOL)isCannotKeepAccountAndTransfer {
  return _tag == DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer;
}

- (BOOL)isCannotKeepAccountAndDeleteData {
  return _tag == DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData;
}

- (BOOL)isEmailAddressTooLongToBeDisabled {
  return _tag == DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled;
}

- (BOOL)isCannotKeepInvitedUserAccount {
  return _tag == DBTEAMMembersRemoveErrorCannotKeepInvitedUserAccount;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersRemoveErrorUserNotFound:
    return @"DBTEAMMembersRemoveErrorUserNotFound";
  case DBTEAMMembersRemoveErrorUserNotInTeam:
    return @"DBTEAMMembersRemoveErrorUserNotInTeam";
  case DBTEAMMembersRemoveErrorOther:
    return @"DBTEAMMembersRemoveErrorOther";
  case DBTEAMMembersRemoveErrorRemoveLastAdmin:
    return @"DBTEAMMembersRemoveErrorRemoveLastAdmin";
  case DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer:
    return @"DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer";
  case DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer:
    return @"DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer";
  case DBTEAMMembersRemoveErrorTransferDestUserNotFound:
    return @"DBTEAMMembersRemoveErrorTransferDestUserNotFound";
  case DBTEAMMembersRemoveErrorTransferDestUserNotInTeam:
    return @"DBTEAMMembersRemoveErrorTransferDestUserNotInTeam";
  case DBTEAMMembersRemoveErrorTransferAdminUserNotFound:
    return @"DBTEAMMembersRemoveErrorTransferAdminUserNotFound";
  case DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam:
    return @"DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam";
  case DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId:
    return @"DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId";
  case DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin:
    return @"DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin";
  case DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer:
    return @"DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer";
  case DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData:
    return @"DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData";
  case DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled:
    return @"DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled";
  case DBTEAMMembersRemoveErrorCannotKeepInvitedUserAccount:
    return @"DBTEAMMembersRemoveErrorCannotKeepInvitedUserAccount";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersRemoveErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersRemoveErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersRemoveErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersRemoveErrorUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorRemoveLastAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorTransferDestUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorTransferDestUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorTransferAdminUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersRemoveErrorCannotKeepInvitedUserAccount:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersRemoveError:other];
}

- (BOOL)isEqualToMembersRemoveError:(DBTEAMMembersRemoveError *)aMembersRemoveError {
  if (self == aMembersRemoveError) {
    return YES;
  }
  if (self.tag != aMembersRemoveError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersRemoveErrorUserNotFound:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorUserNotInTeam:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorOther:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorRemoveLastAdmin:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorRemovedAndTransferDestShouldDiffer:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorRemovedAndTransferAdminShouldDiffer:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorTransferDestUserNotFound:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorTransferDestUserNotInTeam:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorTransferAdminUserNotFound:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorTransferAdminUserNotInTeam:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorUnspecifiedTransferAdminId:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorTransferAdminIsNotAdmin:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorCannotKeepAccountAndTransfer:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorCannotKeepAccountAndDeleteData:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorEmailAddressTooLongToBeDisabled:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  case DBTEAMMembersRemoveErrorCannotKeepInvitedUserAccount:
    return [[self tagName] isEqual:[aMembersRemoveError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersRemoveErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersRemoveError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isRemoveLastAdmin]) {
    jsonDict[@".tag"] = @"remove_last_admin";
  } else if ([valueObj isRemovedAndTransferDestShouldDiffer]) {
    jsonDict[@".tag"] = @"removed_and_transfer_dest_should_differ";
  } else if ([valueObj isRemovedAndTransferAdminShouldDiffer]) {
    jsonDict[@".tag"] = @"removed_and_transfer_admin_should_differ";
  } else if ([valueObj isTransferDestUserNotFound]) {
    jsonDict[@".tag"] = @"transfer_dest_user_not_found";
  } else if ([valueObj isTransferDestUserNotInTeam]) {
    jsonDict[@".tag"] = @"transfer_dest_user_not_in_team";
  } else if ([valueObj isTransferAdminUserNotFound]) {
    jsonDict[@".tag"] = @"transfer_admin_user_not_found";
  } else if ([valueObj isTransferAdminUserNotInTeam]) {
    jsonDict[@".tag"] = @"transfer_admin_user_not_in_team";
  } else if ([valueObj isUnspecifiedTransferAdminId]) {
    jsonDict[@".tag"] = @"unspecified_transfer_admin_id";
  } else if ([valueObj isTransferAdminIsNotAdmin]) {
    jsonDict[@".tag"] = @"transfer_admin_is_not_admin";
  } else if ([valueObj isCannotKeepAccountAndTransfer]) {
    jsonDict[@".tag"] = @"cannot_keep_account_and_transfer";
  } else if ([valueObj isCannotKeepAccountAndDeleteData]) {
    jsonDict[@".tag"] = @"cannot_keep_account_and_delete_data";
  } else if ([valueObj isEmailAddressTooLongToBeDisabled]) {
    jsonDict[@".tag"] = @"email_address_too_long_to_be_disabled";
  } else if ([valueObj isCannotKeepInvitedUserAccount]) {
    jsonDict[@".tag"] = @"cannot_keep_invited_user_account";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersRemoveError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithUserNotInTeam];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithOther];
  } else if ([tag isEqualToString:@"remove_last_admin"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithRemoveLastAdmin];
  } else if ([tag isEqualToString:@"removed_and_transfer_dest_should_differ"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithRemovedAndTransferDestShouldDiffer];
  } else if ([tag isEqualToString:@"removed_and_transfer_admin_should_differ"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithRemovedAndTransferAdminShouldDiffer];
  } else if ([tag isEqualToString:@"transfer_dest_user_not_found"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithTransferDestUserNotFound];
  } else if ([tag isEqualToString:@"transfer_dest_user_not_in_team"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithTransferDestUserNotInTeam];
  } else if ([tag isEqualToString:@"transfer_admin_user_not_found"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithTransferAdminUserNotFound];
  } else if ([tag isEqualToString:@"transfer_admin_user_not_in_team"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithTransferAdminUserNotInTeam];
  } else if ([tag isEqualToString:@"unspecified_transfer_admin_id"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithUnspecifiedTransferAdminId];
  } else if ([tag isEqualToString:@"transfer_admin_is_not_admin"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithTransferAdminIsNotAdmin];
  } else if ([tag isEqualToString:@"cannot_keep_account_and_transfer"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithCannotKeepAccountAndTransfer];
  } else if ([tag isEqualToString:@"cannot_keep_account_and_delete_data"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithCannotKeepAccountAndDeleteData];
  } else if ([tag isEqualToString:@"email_address_too_long_to_be_disabled"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithEmailAddressTooLongToBeDisabled];
  } else if ([tag isEqualToString:@"cannot_keep_invited_user_account"]) {
    return [[DBTEAMMembersRemoveError alloc] initWithCannotKeepInvitedUserAccount];
  } else {
    return [[DBTEAMMembersRemoveError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberSelectorError.h"
#import "DBTEAMMembersSendWelcomeError.h"

#pragma mark - API Object

@implementation DBTEAMMembersSendWelcomeError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSendWelcomeErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSendWelcomeErrorUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSendWelcomeErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMembersSendWelcomeErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMembersSendWelcomeErrorUserNotInTeam;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersSendWelcomeErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersSendWelcomeErrorUserNotFound:
    return @"DBTEAMMembersSendWelcomeErrorUserNotFound";
  case DBTEAMMembersSendWelcomeErrorUserNotInTeam:
    return @"DBTEAMMembersSendWelcomeErrorUserNotInTeam";
  case DBTEAMMembersSendWelcomeErrorOther:
    return @"DBTEAMMembersSendWelcomeErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersSendWelcomeErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersSendWelcomeErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersSendWelcomeErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersSendWelcomeErrorUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSendWelcomeErrorUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSendWelcomeErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersSendWelcomeError:other];
}

- (BOOL)isEqualToMembersSendWelcomeError:(DBTEAMMembersSendWelcomeError *)aMembersSendWelcomeError {
  if (self == aMembersSendWelcomeError) {
    return YES;
  }
  if (self.tag != aMembersSendWelcomeError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersSendWelcomeErrorUserNotFound:
    return [[self tagName] isEqual:[aMembersSendWelcomeError tagName]];
  case DBTEAMMembersSendWelcomeErrorUserNotInTeam:
    return [[self tagName] isEqual:[aMembersSendWelcomeError tagName]];
  case DBTEAMMembersSendWelcomeErrorOther:
    return [[self tagName] isEqual:[aMembersSendWelcomeError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersSendWelcomeErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersSendWelcomeError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersSendWelcomeError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMembersSendWelcomeError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMembersSendWelcomeError alloc] initWithUserNotInTeam];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersSendWelcomeError alloc] initWithOther];
  } else {
    return [[DBTEAMMembersSendWelcomeError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMAdminTier.h"
#import "DBTEAMMembersSetPermissionsArg.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMMembersSetPermissionsArg

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user dNewRole:(DBTEAMAdminTier *)dNewRole {
  [DBStoneValidators nonnullValidator:nil](user);
  [DBStoneValidators nonnullValidator:nil](dNewRole);

  self = [super init];
  if (self) {
    _user = user;
    _dNewRole = dNewRole;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersSetPermissionsArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersSetPermissionsArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersSetPermissionsArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.user hash];
  result = prime * result + [self.dNewRole hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersSetPermissionsArg:other];
}

- (BOOL)isEqualToMembersSetPermissionsArg:(DBTEAMMembersSetPermissionsArg *)aMembersSetPermissionsArg {
  if (self == aMembersSetPermissionsArg) {
    return YES;
  }
  if (![self.user isEqual:aMembersSetPermissionsArg.user]) {
    return NO;
  }
  if (![self.dNewRole isEqual:aMembersSetPermissionsArg.dNewRole]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersSetPermissionsArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersSetPermissionsArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];
  jsonDict[@"new_role"] = [DBTEAMAdminTierSerializer serialize:valueObj.dNewRole];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersSetPermissionsArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];
  DBTEAMAdminTier *dNewRole = [DBTEAMAdminTierSerializer deserialize:valueDict[@"new_role"]];

  return [[DBTEAMMembersSetPermissionsArg alloc] initWithUser:user dNewRole:dNewRole];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersSetPermissionsError.h"
#import "DBTEAMUserSelectorError.h"

#pragma mark - API Object

@implementation DBTEAMMembersSetPermissionsError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetPermissionsErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithLastAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetPermissionsErrorLastAdmin;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetPermissionsErrorUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithCannotSetPermissions {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetPermissionsErrorCannotSetPermissions;
  }
  return self;
}

- (instancetype)initWithTeamLicenseLimit {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetPermissionsErrorTeamLicenseLimit;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetPermissionsErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMembersSetPermissionsErrorUserNotFound;
}

- (BOOL)isLastAdmin {
  return _tag == DBTEAMMembersSetPermissionsErrorLastAdmin;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMembersSetPermissionsErrorUserNotInTeam;
}

- (BOOL)isCannotSetPermissions {
  return _tag == DBTEAMMembersSetPermissionsErrorCannotSetPermissions;
}

- (BOOL)isTeamLicenseLimit {
  return _tag == DBTEAMMembersSetPermissionsErrorTeamLicenseLimit;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersSetPermissionsErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersSetPermissionsErrorUserNotFound:
    return @"DBTEAMMembersSetPermissionsErrorUserNotFound";
  case DBTEAMMembersSetPermissionsErrorLastAdmin:
    return @"DBTEAMMembersSetPermissionsErrorLastAdmin";
  case DBTEAMMembersSetPermissionsErrorUserNotInTeam:
    return @"DBTEAMMembersSetPermissionsErrorUserNotInTeam";
  case DBTEAMMembersSetPermissionsErrorCannotSetPermissions:
    return @"DBTEAMMembersSetPermissionsErrorCannotSetPermissions";
  case DBTEAMMembersSetPermissionsErrorTeamLicenseLimit:
    return @"DBTEAMMembersSetPermissionsErrorTeamLicenseLimit";
  case DBTEAMMembersSetPermissionsErrorOther:
    return @"DBTEAMMembersSetPermissionsErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersSetPermissionsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersSetPermissionsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersSetPermissionsErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersSetPermissionsErrorUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetPermissionsErrorLastAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetPermissionsErrorUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetPermissionsErrorCannotSetPermissions:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetPermissionsErrorTeamLicenseLimit:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetPermissionsErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersSetPermissionsError:other];
}

- (BOOL)isEqualToMembersSetPermissionsError:(DBTEAMMembersSetPermissionsError *)aMembersSetPermissionsError {
  if (self == aMembersSetPermissionsError) {
    return YES;
  }
  if (self.tag != aMembersSetPermissionsError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersSetPermissionsErrorUserNotFound:
    return [[self tagName] isEqual:[aMembersSetPermissionsError tagName]];
  case DBTEAMMembersSetPermissionsErrorLastAdmin:
    return [[self tagName] isEqual:[aMembersSetPermissionsError tagName]];
  case DBTEAMMembersSetPermissionsErrorUserNotInTeam:
    return [[self tagName] isEqual:[aMembersSetPermissionsError tagName]];
  case DBTEAMMembersSetPermissionsErrorCannotSetPermissions:
    return [[self tagName] isEqual:[aMembersSetPermissionsError tagName]];
  case DBTEAMMembersSetPermissionsErrorTeamLicenseLimit:
    return [[self tagName] isEqual:[aMembersSetPermissionsError tagName]];
  case DBTEAMMembersSetPermissionsErrorOther:
    return [[self tagName] isEqual:[aMembersSetPermissionsError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersSetPermissionsErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersSetPermissionsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isLastAdmin]) {
    jsonDict[@".tag"] = @"last_admin";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else if ([valueObj isCannotSetPermissions]) {
    jsonDict[@".tag"] = @"cannot_set_permissions";
  } else if ([valueObj isTeamLicenseLimit]) {
    jsonDict[@".tag"] = @"team_license_limit";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersSetPermissionsError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMembersSetPermissionsError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"last_admin"]) {
    return [[DBTEAMMembersSetPermissionsError alloc] initWithLastAdmin];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMembersSetPermissionsError alloc] initWithUserNotInTeam];
  } else if ([tag isEqualToString:@"cannot_set_permissions"]) {
    return [[DBTEAMMembersSetPermissionsError alloc] initWithCannotSetPermissions];
  } else if ([tag isEqualToString:@"team_license_limit"]) {
    return [[DBTEAMMembersSetPermissionsError alloc] initWithTeamLicenseLimit];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersSetPermissionsError alloc] initWithOther];
  } else {
    return [[DBTEAMMembersSetPermissionsError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMAdminTier.h"
#import "DBTEAMMembersSetPermissionsResult.h"

#pragma mark - API Object

@implementation DBTEAMMembersSetPermissionsResult

#pragma mark - Constructors

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId role:(DBTEAMAdminTier *)role {
  [DBStoneValidators nonnullValidator:nil](teamMemberId);
  [DBStoneValidators nonnullValidator:nil](role);

  self = [super init];
  if (self) {
    _teamMemberId = teamMemberId;
    _role = role;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersSetPermissionsResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersSetPermissionsResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersSetPermissionsResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamMemberId hash];
  result = prime * result + [self.role hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersSetPermissionsResult:other];
}

- (BOOL)isEqualToMembersSetPermissionsResult:(DBTEAMMembersSetPermissionsResult *)aMembersSetPermissionsResult {
  if (self == aMembersSetPermissionsResult) {
    return YES;
  }
  if (![self.teamMemberId isEqual:aMembersSetPermissionsResult.teamMemberId]) {
    return NO;
  }
  if (![self.role isEqual:aMembersSetPermissionsResult.role]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersSetPermissionsResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersSetPermissionsResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  jsonDict[@"role"] = [DBTEAMAdminTierSerializer serialize:valueObj.role];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersSetPermissionsResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamMemberId = valueDict[@"team_member_id"];
  DBTEAMAdminTier *role = [DBTEAMAdminTierSerializer deserialize:valueDict[@"role"]];

  return [[DBTEAMMembersSetPermissionsResult alloc] initWithTeamMemberId:teamMemberId role:role];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersSetProfileArg.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMMembersSetProfileArg

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user
                    dNewEmail:(NSString *)dNewEmail
               dNewExternalId:(NSString *)dNewExternalId
                dNewGivenName:(NSString *)dNewGivenName
                  dNewSurname:(NSString *)dNewSurname
             dNewPersistentId:(NSString *)dNewPersistentId
    dNewIsDirectoryRestricted:(NSNumber *)dNewIsDirectoryRestricted {
  [DBStoneValidators nonnullValidator:nil](user);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:nil
                                                                maxLength:@(255)
                                                                  pattern:@"^['&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-"
                                                                          @"9.-]*.[A-Za-z]{2,15}$"]](dNewEmail);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(64) pattern:nil]](dNewExternalId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(100) pattern:@"[^/:?*<>\"|]*"]](dNewGivenName);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(100) pattern:@"[^/:?*<>\"|]*"]](dNewSurname);

  self = [super init];
  if (self) {
    _user = user;
    _dNewEmail = dNewEmail;
    _dNewExternalId = dNewExternalId;
    _dNewGivenName = dNewGivenName;
    _dNewSurname = dNewSurname;
    _dNewPersistentId = dNewPersistentId;
    _dNewIsDirectoryRestricted = dNewIsDirectoryRestricted;
  }
  return self;
}

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user {
  return [self initWithUser:user
                      dNewEmail:nil
                 dNewExternalId:nil
                  dNewGivenName:nil
                    dNewSurname:nil
               dNewPersistentId:nil
      dNewIsDirectoryRestricted:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersSetProfileArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersSetProfileArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersSetProfileArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.user hash];
  if (self.dNewEmail != nil) {
    result = prime * result + [self.dNewEmail hash];
  }
  if (self.dNewExternalId != nil) {
    result = prime * result + [self.dNewExternalId hash];
  }
  if (self.dNewGivenName != nil) {
    result = prime * result + [self.dNewGivenName hash];
  }
  if (self.dNewSurname != nil) {
    result = prime * result + [self.dNewSurname hash];
  }
  if (self.dNewPersistentId != nil) {
    result = prime * result + [self.dNewPersistentId hash];
  }
  if (self.dNewIsDirectoryRestricted != nil) {
    result = prime * result + [self.dNewIsDirectoryRestricted hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersSetProfileArg:other];
}

- (BOOL)isEqualToMembersSetProfileArg:(DBTEAMMembersSetProfileArg *)aMembersSetProfileArg {
  if (self == aMembersSetProfileArg) {
    return YES;
  }
  if (![self.user isEqual:aMembersSetProfileArg.user]) {
    return NO;
  }
  if (self.dNewEmail) {
    if (![self.dNewEmail isEqual:aMembersSetProfileArg.dNewEmail]) {
      return NO;
    }
  }
  if (self.dNewExternalId) {
    if (![self.dNewExternalId isEqual:aMembersSetProfileArg.dNewExternalId]) {
      return NO;
    }
  }
  if (self.dNewGivenName) {
    if (![self.dNewGivenName isEqual:aMembersSetProfileArg.dNewGivenName]) {
      return NO;
    }
  }
  if (self.dNewSurname) {
    if (![self.dNewSurname isEqual:aMembersSetProfileArg.dNewSurname]) {
      return NO;
    }
  }
  if (self.dNewPersistentId) {
    if (![self.dNewPersistentId isEqual:aMembersSetProfileArg.dNewPersistentId]) {
      return NO;
    }
  }
  if (self.dNewIsDirectoryRestricted) {
    if (![self.dNewIsDirectoryRestricted isEqual:aMembersSetProfileArg.dNewIsDirectoryRestricted]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersSetProfileArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersSetProfileArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];
  if (valueObj.dNewEmail) {
    jsonDict[@"new_email"] = valueObj.dNewEmail;
  }
  if (valueObj.dNewExternalId) {
    jsonDict[@"new_external_id"] = valueObj.dNewExternalId;
  }
  if (valueObj.dNewGivenName) {
    jsonDict[@"new_given_name"] = valueObj.dNewGivenName;
  }
  if (valueObj.dNewSurname) {
    jsonDict[@"new_surname"] = valueObj.dNewSurname;
  }
  if (valueObj.dNewPersistentId) {
    jsonDict[@"new_persistent_id"] = valueObj.dNewPersistentId;
  }
  if (valueObj.dNewIsDirectoryRestricted) {
    jsonDict[@"new_is_directory_restricted"] = valueObj.dNewIsDirectoryRestricted;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersSetProfileArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];
  NSString *dNewEmail = valueDict[@"new_email"] ?: nil;
  NSString *dNewExternalId = valueDict[@"new_external_id"] ?: nil;
  NSString *dNewGivenName = valueDict[@"new_given_name"] ?: nil;
  NSString *dNewSurname = valueDict[@"new_surname"] ?: nil;
  NSString *dNewPersistentId = valueDict[@"new_persistent_id"] ?: nil;
  NSNumber *dNewIsDirectoryRestricted = valueDict[@"new_is_directory_restricted"] ?: nil;

  return [[DBTEAMMembersSetProfileArg alloc] initWithUser:user
                                                dNewEmail:dNewEmail
                                           dNewExternalId:dNewExternalId
                                            dNewGivenName:dNewGivenName
                                              dNewSurname:dNewSurname
                                         dNewPersistentId:dNewPersistentId
                                dNewIsDirectoryRestricted:dNewIsDirectoryRestricted];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberSelectorError.h"
#import "DBTEAMMembersSetProfileError.h"

#pragma mark - API Object

@implementation DBTEAMMembersSetProfileError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithExternalIdAndNewExternalIdUnsafe {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe;
  }
  return self;
}

- (instancetype)initWithNoNewDataSpecified {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorNoNewDataSpecified;
  }
  return self;
}

- (instancetype)initWithEmailReservedForOtherUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorEmailReservedForOtherUser;
  }
  return self;
}

- (instancetype)initWithExternalIdUsedByOtherUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorExternalIdUsedByOtherUser;
  }
  return self;
}

- (instancetype)initWithSetProfileDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorSetProfileDisallowed;
  }
  return self;
}

- (instancetype)initWithParamCannotBeEmpty {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorParamCannotBeEmpty;
  }
  return self;
}

- (instancetype)initWithPersistentIdDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorPersistentIdDisabled;
  }
  return self;
}

- (instancetype)initWithPersistentIdUsedByOtherUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorPersistentIdUsedByOtherUser;
  }
  return self;
}

- (instancetype)initWithDirectoryRestrictedOff {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorDirectoryRestrictedOff;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSetProfileErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMembersSetProfileErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMembersSetProfileErrorUserNotInTeam;
}

- (BOOL)isExternalIdAndNewExternalIdUnsafe {
  return _tag == DBTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe;
}

- (BOOL)isNoNewDataSpecified {
  return _tag == DBTEAMMembersSetProfileErrorNoNewDataSpecified;
}

- (BOOL)isEmailReservedForOtherUser {
  return _tag == DBTEAMMembersSetProfileErrorEmailReservedForOtherUser;
}

- (BOOL)isExternalIdUsedByOtherUser {
  return _tag == DBTEAMMembersSetProfileErrorExternalIdUsedByOtherUser;
}

- (BOOL)isSetProfileDisallowed {
  return _tag == DBTEAMMembersSetProfileErrorSetProfileDisallowed;
}

- (BOOL)isParamCannotBeEmpty {
  return _tag == DBTEAMMembersSetProfileErrorParamCannotBeEmpty;
}

- (BOOL)isPersistentIdDisabled {
  return _tag == DBTEAMMembersSetProfileErrorPersistentIdDisabled;
}

- (BOOL)isPersistentIdUsedByOtherUser {
  return _tag == DBTEAMMembersSetProfileErrorPersistentIdUsedByOtherUser;
}

- (BOOL)isDirectoryRestrictedOff {
  return _tag == DBTEAMMembersSetProfileErrorDirectoryRestrictedOff;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersSetProfileErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersSetProfileErrorUserNotFound:
    return @"DBTEAMMembersSetProfileErrorUserNotFound";
  case DBTEAMMembersSetProfileErrorUserNotInTeam:
    return @"DBTEAMMembersSetProfileErrorUserNotInTeam";
  case DBTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe:
    return @"DBTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe";
  case DBTEAMMembersSetProfileErrorNoNewDataSpecified:
    return @"DBTEAMMembersSetProfileErrorNoNewDataSpecified";
  case DBTEAMMembersSetProfileErrorEmailReservedForOtherUser:
    return @"DBTEAMMembersSetProfileErrorEmailReservedForOtherUser";
  case DBTEAMMembersSetProfileErrorExternalIdUsedByOtherUser:
    return @"DBTEAMMembersSetProfileErrorExternalIdUsedByOtherUser";
  case DBTEAMMembersSetProfileErrorSetProfileDisallowed:
    return @"DBTEAMMembersSetProfileErrorSetProfileDisallowed";
  case DBTEAMMembersSetProfileErrorParamCannotBeEmpty:
    return @"DBTEAMMembersSetProfileErrorParamCannotBeEmpty";
  case DBTEAMMembersSetProfileErrorPersistentIdDisabled:
    return @"DBTEAMMembersSetProfileErrorPersistentIdDisabled";
  case DBTEAMMembersSetProfileErrorPersistentIdUsedByOtherUser:
    return @"DBTEAMMembersSetProfileErrorPersistentIdUsedByOtherUser";
  case DBTEAMMembersSetProfileErrorDirectoryRestrictedOff:
    return @"DBTEAMMembersSetProfileErrorDirectoryRestrictedOff";
  case DBTEAMMembersSetProfileErrorOther:
    return @"DBTEAMMembersSetProfileErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersSetProfileErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersSetProfileErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersSetProfileErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersSetProfileErrorUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorNoNewDataSpecified:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorEmailReservedForOtherUser:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorExternalIdUsedByOtherUser:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorSetProfileDisallowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorParamCannotBeEmpty:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorPersistentIdDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorPersistentIdUsedByOtherUser:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorDirectoryRestrictedOff:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSetProfileErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersSetProfileError:other];
}

- (BOOL)isEqualToMembersSetProfileError:(DBTEAMMembersSetProfileError *)aMembersSetProfileError {
  if (self == aMembersSetProfileError) {
    return YES;
  }
  if (self.tag != aMembersSetProfileError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersSetProfileErrorUserNotFound:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorUserNotInTeam:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorNoNewDataSpecified:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorEmailReservedForOtherUser:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorExternalIdUsedByOtherUser:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorSetProfileDisallowed:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorParamCannotBeEmpty:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorPersistentIdDisabled:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorPersistentIdUsedByOtherUser:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorDirectoryRestrictedOff:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  case DBTEAMMembersSetProfileErrorOther:
    return [[self tagName] isEqual:[aMembersSetProfileError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersSetProfileErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersSetProfileError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else if ([valueObj isExternalIdAndNewExternalIdUnsafe]) {
    jsonDict[@".tag"] = @"external_id_and_new_external_id_unsafe";
  } else if ([valueObj isNoNewDataSpecified]) {
    jsonDict[@".tag"] = @"no_new_data_specified";
  } else if ([valueObj isEmailReservedForOtherUser]) {
    jsonDict[@".tag"] = @"email_reserved_for_other_user";
  } else if ([valueObj isExternalIdUsedByOtherUser]) {
    jsonDict[@".tag"] = @"external_id_used_by_other_user";
  } else if ([valueObj isSetProfileDisallowed]) {
    jsonDict[@".tag"] = @"set_profile_disallowed";
  } else if ([valueObj isParamCannotBeEmpty]) {
    jsonDict[@".tag"] = @"param_cannot_be_empty";
  } else if ([valueObj isPersistentIdDisabled]) {
    jsonDict[@".tag"] = @"persistent_id_disabled";
  } else if ([valueObj isPersistentIdUsedByOtherUser]) {
    jsonDict[@".tag"] = @"persistent_id_used_by_other_user";
  } else if ([valueObj isDirectoryRestrictedOff]) {
    jsonDict[@".tag"] = @"directory_restricted_off";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersSetProfileError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithUserNotInTeam];
  } else if ([tag isEqualToString:@"external_id_and_new_external_id_unsafe"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithExternalIdAndNewExternalIdUnsafe];
  } else if ([tag isEqualToString:@"no_new_data_specified"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithNoNewDataSpecified];
  } else if ([tag isEqualToString:@"email_reserved_for_other_user"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithEmailReservedForOtherUser];
  } else if ([tag isEqualToString:@"external_id_used_by_other_user"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithExternalIdUsedByOtherUser];
  } else if ([tag isEqualToString:@"set_profile_disallowed"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithSetProfileDisallowed];
  } else if ([tag isEqualToString:@"param_cannot_be_empty"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithParamCannotBeEmpty];
  } else if ([tag isEqualToString:@"persistent_id_disabled"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithPersistentIdDisabled];
  } else if ([tag isEqualToString:@"persistent_id_used_by_other_user"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithPersistentIdUsedByOtherUser];
  } else if ([tag isEqualToString:@"directory_restricted_off"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithDirectoryRestrictedOff];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersSetProfileError alloc] initWithOther];
  } else {
    return [[DBTEAMMembersSetProfileError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersDeactivateError.h"
#import "DBTEAMMembersSuspendError.h"

#pragma mark - API Object

@implementation DBTEAMMembersSuspendError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSuspendErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSuspendErrorUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSuspendErrorOther;
  }
  return self;
}

- (instancetype)initWithSuspendInactiveUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSuspendErrorSuspendInactiveUser;
  }
  return self;
}

- (instancetype)initWithSuspendLastAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSuspendErrorSuspendLastAdmin;
  }
  return self;
}

- (instancetype)initWithTeamLicenseLimit {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersSuspendErrorTeamLicenseLimit;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMembersSuspendErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMembersSuspendErrorUserNotInTeam;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersSuspendErrorOther;
}

- (BOOL)isSuspendInactiveUser {
  return _tag == DBTEAMMembersSuspendErrorSuspendInactiveUser;
}

- (BOOL)isSuspendLastAdmin {
  return _tag == DBTEAMMembersSuspendErrorSuspendLastAdmin;
}

- (BOOL)isTeamLicenseLimit {
  return _tag == DBTEAMMembersSuspendErrorTeamLicenseLimit;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersSuspendErrorUserNotFound:
    return @"DBTEAMMembersSuspendErrorUserNotFound";
  case DBTEAMMembersSuspendErrorUserNotInTeam:
    return @"DBTEAMMembersSuspendErrorUserNotInTeam";
  case DBTEAMMembersSuspendErrorOther:
    return @"DBTEAMMembersSuspendErrorOther";
  case DBTEAMMembersSuspendErrorSuspendInactiveUser:
    return @"DBTEAMMembersSuspendErrorSuspendInactiveUser";
  case DBTEAMMembersSuspendErrorSuspendLastAdmin:
    return @"DBTEAMMembersSuspendErrorSuspendLastAdmin";
  case DBTEAMMembersSuspendErrorTeamLicenseLimit:
    return @"DBTEAMMembersSuspendErrorTeamLicenseLimit";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersSuspendErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersSuspendErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersSuspendErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersSuspendErrorUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSuspendErrorUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSuspendErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSuspendErrorSuspendInactiveUser:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSuspendErrorSuspendLastAdmin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersSuspendErrorTeamLicenseLimit:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersSuspendError:other];
}

- (BOOL)isEqualToMembersSuspendError:(DBTEAMMembersSuspendError *)aMembersSuspendError {
  if (self == aMembersSuspendError) {
    return YES;
  }
  if (self.tag != aMembersSuspendError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersSuspendErrorUserNotFound:
    return [[self tagName] isEqual:[aMembersSuspendError tagName]];
  case DBTEAMMembersSuspendErrorUserNotInTeam:
    return [[self tagName] isEqual:[aMembersSuspendError tagName]];
  case DBTEAMMembersSuspendErrorOther:
    return [[self tagName] isEqual:[aMembersSuspendError tagName]];
  case DBTEAMMembersSuspendErrorSuspendInactiveUser:
    return [[self tagName] isEqual:[aMembersSuspendError tagName]];
  case DBTEAMMembersSuspendErrorSuspendLastAdmin:
    return [[self tagName] isEqual:[aMembersSuspendError tagName]];
  case DBTEAMMembersSuspendErrorTeamLicenseLimit:
    return [[self tagName] isEqual:[aMembersSuspendError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersSuspendErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersSuspendError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSuspendInactiveUser]) {
    jsonDict[@".tag"] = @"suspend_inactive_user";
  } else if ([valueObj isSuspendLastAdmin]) {
    jsonDict[@".tag"] = @"suspend_last_admin";
  } else if ([valueObj isTeamLicenseLimit]) {
    jsonDict[@".tag"] = @"team_license_limit";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersSuspendError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMembersSuspendError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMembersSuspendError alloc] initWithUserNotInTeam];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersSuspendError alloc] initWithOther];
  } else if ([tag isEqualToString:@"suspend_inactive_user"]) {
    return [[DBTEAMMembersSuspendError alloc] initWithSuspendInactiveUser];
  } else if ([tag isEqualToString:@"suspend_last_admin"]) {
    return [[DBTEAMMembersSuspendError alloc] initWithSuspendLastAdmin];
  } else if ([tag isEqualToString:@"team_license_limit"]) {
    return [[DBTEAMMembersSuspendError alloc] initWithTeamLicenseLimit];
  } else {
    return [[DBTEAMMembersSuspendError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersUnsuspendArg.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMMembersUnsuspendArg

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user {
  [DBStoneValidators nonnullValidator:nil](user);

  self = [super init];
  if (self) {
    _user = user;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersUnsuspendArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersUnsuspendArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersUnsuspendArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.user hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersUnsuspendArg:other];
}

- (BOOL)isEqualToMembersUnsuspendArg:(DBTEAMMembersUnsuspendArg *)aMembersUnsuspendArg {
  if (self == aMembersUnsuspendArg) {
    return YES;
  }
  if (![self.user isEqual:aMembersUnsuspendArg.user]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersUnsuspendArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersUnsuspendArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersUnsuspendArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];

  return [[DBTEAMMembersUnsuspendArg alloc] initWithUser:user];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMembersDeactivateError.h"
#import "DBTEAMMembersUnsuspendError.h"

#pragma mark - API Object

@implementation DBTEAMMembersUnsuspendError

#pragma mark - Constructors

- (instancetype)initWithUserNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersUnsuspendErrorUserNotFound;
  }
  return self;
}

- (instancetype)initWithUserNotInTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersUnsuspendErrorUserNotInTeam;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersUnsuspendErrorOther;
  }
  return self;
}

- (instancetype)initWithUnsuspendNonSuspendedMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersUnsuspendErrorUnsuspendNonSuspendedMember;
  }
  return self;
}

- (instancetype)initWithTeamLicenseLimit {
  self = [super init];
  if (self) {
    _tag = DBTEAMMembersUnsuspendErrorTeamLicenseLimit;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUserNotFound {
  return _tag == DBTEAMMembersUnsuspendErrorUserNotFound;
}

- (BOOL)isUserNotInTeam {
  return _tag == DBTEAMMembersUnsuspendErrorUserNotInTeam;
}

- (BOOL)isOther {
  return _tag == DBTEAMMembersUnsuspendErrorOther;
}

- (BOOL)isUnsuspendNonSuspendedMember {
  return _tag == DBTEAMMembersUnsuspendErrorUnsuspendNonSuspendedMember;
}

- (BOOL)isTeamLicenseLimit {
  return _tag == DBTEAMMembersUnsuspendErrorTeamLicenseLimit;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMembersUnsuspendErrorUserNotFound:
    return @"DBTEAMMembersUnsuspendErrorUserNotFound";
  case DBTEAMMembersUnsuspendErrorUserNotInTeam:
    return @"DBTEAMMembersUnsuspendErrorUserNotInTeam";
  case DBTEAMMembersUnsuspendErrorOther:
    return @"DBTEAMMembersUnsuspendErrorOther";
  case DBTEAMMembersUnsuspendErrorUnsuspendNonSuspendedMember:
    return @"DBTEAMMembersUnsuspendErrorUnsuspendNonSuspendedMember";
  case DBTEAMMembersUnsuspendErrorTeamLicenseLimit:
    return @"DBTEAMMembersUnsuspendErrorTeamLicenseLimit";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMembersUnsuspendErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMembersUnsuspendErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMembersUnsuspendErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMembersUnsuspendErrorUserNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersUnsuspendErrorUserNotInTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersUnsuspendErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersUnsuspendErrorUnsuspendNonSuspendedMember:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMembersUnsuspendErrorTeamLicenseLimit:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMembersUnsuspendError:other];
}

- (BOOL)isEqualToMembersUnsuspendError:(DBTEAMMembersUnsuspendError *)aMembersUnsuspendError {
  if (self == aMembersUnsuspendError) {
    return YES;
  }
  if (self.tag != aMembersUnsuspendError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMembersUnsuspendErrorUserNotFound:
    return [[self tagName] isEqual:[aMembersUnsuspendError tagName]];
  case DBTEAMMembersUnsuspendErrorUserNotInTeam:
    return [[self tagName] isEqual:[aMembersUnsuspendError tagName]];
  case DBTEAMMembersUnsuspendErrorOther:
    return [[self tagName] isEqual:[aMembersUnsuspendError tagName]];
  case DBTEAMMembersUnsuspendErrorUnsuspendNonSuspendedMember:
    return [[self tagName] isEqual:[aMembersUnsuspendError tagName]];
  case DBTEAMMembersUnsuspendErrorTeamLicenseLimit:
    return [[self tagName] isEqual:[aMembersUnsuspendError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMembersUnsuspendErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMembersUnsuspendError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUserNotFound]) {
    jsonDict[@".tag"] = @"user_not_found";
  } else if ([valueObj isUserNotInTeam]) {
    jsonDict[@".tag"] = @"user_not_in_team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isUnsuspendNonSuspendedMember]) {
    jsonDict[@".tag"] = @"unsuspend_non_suspended_member";
  } else if ([valueObj isTeamLicenseLimit]) {
    jsonDict[@".tag"] = @"team_license_limit";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMembersUnsuspendError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user_not_found"]) {
    return [[DBTEAMMembersUnsuspendError alloc] initWithUserNotFound];
  } else if ([tag isEqualToString:@"user_not_in_team"]) {
    return [[DBTEAMMembersUnsuspendError alloc] initWithUserNotInTeam];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMembersUnsuspendError alloc] initWithOther];
  } else if ([tag isEqualToString:@"unsuspend_non_suspended_member"]) {
    return [[DBTEAMMembersUnsuspendError alloc] initWithUnsuspendNonSuspendedMember];
  } else if ([tag isEqualToString:@"team_license_limit"]) {
    return [[DBTEAMMembersUnsuspendError alloc] initWithTeamLicenseLimit];
  } else {
    return [[DBTEAMMembersUnsuspendError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMobileClientPlatform.h"

#pragma mark - API Object

@implementation DBTEAMMobileClientPlatform

#pragma mark - Constructors

- (instancetype)initWithIphone {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformIphone;
  }
  return self;
}

- (instancetype)initWithIpad {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformIpad;
  }
  return self;
}

- (instancetype)initWithAndroid {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformAndroid;
  }
  return self;
}

- (instancetype)initWithWindowsPhone {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformWindowsPhone;
  }
  return self;
}

- (instancetype)initWithBlackberry {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformBlackberry;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMMobileClientPlatformOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isIphone {
  return _tag == DBTEAMMobileClientPlatformIphone;
}

- (BOOL)isIpad {
  return _tag == DBTEAMMobileClientPlatformIpad;
}

- (BOOL)isAndroid {
  return _tag == DBTEAMMobileClientPlatformAndroid;
}

- (BOOL)isWindowsPhone {
  return _tag == DBTEAMMobileClientPlatformWindowsPhone;
}

- (BOOL)isBlackberry {
  return _tag == DBTEAMMobileClientPlatformBlackberry;
}

- (BOOL)isOther {
  return _tag == DBTEAMMobileClientPlatformOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMMobileClientPlatformIphone:
    return @"DBTEAMMobileClientPlatformIphone";
  case DBTEAMMobileClientPlatformIpad:
    return @"DBTEAMMobileClientPlatformIpad";
  case DBTEAMMobileClientPlatformAndroid:
    return @"DBTEAMMobileClientPlatformAndroid";
  case DBTEAMMobileClientPlatformWindowsPhone:
    return @"DBTEAMMobileClientPlatformWindowsPhone";
  case DBTEAMMobileClientPlatformBlackberry:
    return @"DBTEAMMobileClientPlatformBlackberry";
  case DBTEAMMobileClientPlatformOther:
    return @"DBTEAMMobileClientPlatformOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMobileClientPlatformSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMobileClientPlatformSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMobileClientPlatformSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMMobileClientPlatformIphone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMobileClientPlatformIpad:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMobileClientPlatformAndroid:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMobileClientPlatformWindowsPhone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMobileClientPlatformBlackberry:
    result = prime * result + [[self tagName] hash];
  case DBTEAMMobileClientPlatformOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMobileClientPlatform:other];
}

- (BOOL)isEqualToMobileClientPlatform:(DBTEAMMobileClientPlatform *)aMobileClientPlatform {
  if (self == aMobileClientPlatform) {
    return YES;
  }
  if (self.tag != aMobileClientPlatform.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMMobileClientPlatformIphone:
    return [[self tagName] isEqual:[aMobileClientPlatform tagName]];
  case DBTEAMMobileClientPlatformIpad:
    return [[self tagName] isEqual:[aMobileClientPlatform tagName]];
  case DBTEAMMobileClientPlatformAndroid:
    return [[self tagName] isEqual:[aMobileClientPlatform tagName]];
  case DBTEAMMobileClientPlatformWindowsPhone:
    return [[self tagName] isEqual:[aMobileClientPlatform tagName]];
  case DBTEAMMobileClientPlatformBlackberry:
    return [[self tagName] isEqual:[aMobileClientPlatform tagName]];
  case DBTEAMMobileClientPlatformOther:
    return [[self tagName] isEqual:[aMobileClientPlatform tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMobileClientPlatformSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMobileClientPlatform *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isIphone]) {
    jsonDict[@".tag"] = @"iphone";
  } else if ([valueObj isIpad]) {
    jsonDict[@".tag"] = @"ipad";
  } else if ([valueObj isAndroid]) {
    jsonDict[@".tag"] = @"android";
  } else if ([valueObj isWindowsPhone]) {
    jsonDict[@".tag"] = @"windows_phone";
  } else if ([valueObj isBlackberry]) {
    jsonDict[@".tag"] = @"blackberry";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMobileClientPlatform *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"iphone"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithIphone];
  } else if ([tag isEqualToString:@"ipad"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithIpad];
  } else if ([tag isEqualToString:@"android"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithAndroid];
  } else if ([tag isEqualToString:@"windows_phone"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithWindowsPhone];
  } else if ([tag isEqualToString:@"blackberry"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithBlackberry];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMMobileClientPlatform alloc] initWithOther];
  } else {
    return [[DBTEAMMobileClientPlatform alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDeviceSession.h"
#import "DBTEAMMobileClientPlatform.h"
#import "DBTEAMMobileClientSession.h"

#pragma mark - API Object

@implementation DBTEAMMobileClientSession

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId
                       deviceName:(NSString *)deviceName
                       clientType:(DBTEAMMobileClientPlatform *)clientType
                        ipAddress:(NSString *)ipAddress
                          country:(NSString *)country
                          created:(NSDate *)created
                          updated:(NSDate *)updated
                    clientVersion:(NSString *)clientVersion
                        osVersion:(NSString *)osVersion
                      lastCarrier:(NSString *)lastCarrier {
  [DBStoneValidators nonnullValidator:nil](sessionId);
  [DBStoneValidators nonnullValidator:nil](deviceName);
  [DBStoneValidators nonnullValidator:nil](clientType);

  self = [super initWithSessionId:sessionId ipAddress:ipAddress country:country created:created updated:updated];
  if (self) {
    _deviceName = deviceName;
    _clientType = clientType;
    _clientVersion = clientVersion;
    _osVersion = osVersion;
    _lastCarrier = lastCarrier;
  }
  return self;
}

- (instancetype)initWithSessionId:(NSString *)sessionId
                       deviceName:(NSString *)deviceName
                       clientType:(DBTEAMMobileClientPlatform *)clientType {
  return [self initWithSessionId:sessionId
                      deviceName:deviceName
                      clientType:clientType
                       ipAddress:nil
                         country:nil
                         created:nil
                         updated:nil
                   clientVersion:nil
                       osVersion:nil
                     lastCarrier:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMMobileClientSessionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMMobileClientSessionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMMobileClientSessionSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sessionId hash];
  result = prime * result + [self.deviceName hash];
  result = prime * result + [self.clientType hash];
  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.country != nil) {
    result = prime * result + [self.country hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }
  if (self.clientVersion != nil) {
    result = prime * result + [self.clientVersion hash];
  }
  if (self.osVersion != nil) {
    result = prime * result + [self.osVersion hash];
  }
  if (self.lastCarrier != nil) {
    result = prime * result + [self.lastCarrier hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMobileClientSession:other];
}

- (BOOL)isEqualToMobileClientSession:(DBTEAMMobileClientSession *)aMobileClientSession {
  if (self == aMobileClientSession) {
    return YES;
  }
  if (![self.sessionId isEqual:aMobileClientSession.sessionId]) {
    return NO;
  }
  if (![self.deviceName isEqual:aMobileClientSession.deviceName]) {
    return NO;
  }
  if (![self.clientType isEqual:aMobileClientSession.clientType]) {
    return NO;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aMobileClientSession.ipAddress]) {
      return NO;
    }
  }
  if (self.country) {
    if (![self.country isEqual:aMobileClientSession.country]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:aMobileClientSession.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:aMobileClientSession.updated]) {
      return NO;
    }
  }
  if (self.clientVersion) {
    if (![self.clientVersion isEqual:aMobileClientSession.clientVersion]) {
      return NO;
    }
  }
  if (self.osVersion) {
    if (![self.osVersion isEqual:aMobileClientSession.osVersion]) {
      return NO;
    }
  }
  if (self.lastCarrier) {
    if (![self.lastCarrier isEqual:aMobileClientSession.lastCarrier]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMMobileClientSessionSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMMobileClientSession *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"session_id"] = valueObj.sessionId;
  jsonDict[@"device_name"] = valueObj.deviceName;
  jsonDict[@"client_type"] = [DBTEAMMobileClientPlatformSerializer serialize:valueObj.clientType];
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.country) {
    jsonDict[@"country"] = valueObj.country;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.clientVersion) {
    jsonDict[@"client_version"] = valueObj.clientVersion;
  }
  if (valueObj.osVersion) {
    jsonDict[@"os_version"] = valueObj.osVersion;
  }
  if (valueObj.lastCarrier) {
    jsonDict[@"last_carrier"] = valueObj.lastCarrier;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMMobileClientSession *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sessionId = valueDict[@"session_id"];
  NSString *deviceName = valueDict[@"device_name"];
  DBTEAMMobileClientPlatform *clientType = [DBTEAMMobileClientPlatformSerializer deserialize:valueDict[@"client_type"]];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSString *country = valueDict[@"country"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSString *clientVersion = valueDict[@"client_version"] ?: nil;
  NSString *osVersion = valueDict[@"os_version"] ?: nil;
  NSString *lastCarrier = valueDict[@"last_carrier"] ?: nil;

  return [[DBTEAMMobileClientSession alloc] initWithSessionId:sessionId
                                                   deviceName:deviceName
                                                   clientType:clientType
                                                    ipAddress:ipAddress
                                                      country:country
                                                      created:created
                                                      updated:updated
                                                clientVersion:clientVersion
                                                    osVersion:osVersion
                                                  lastCarrier:lastCarrier];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMNamespaceMetadata.h"
#import "DBTEAMNamespaceType.h"

#pragma mark - API Object

@implementation DBTEAMNamespaceMetadata

#pragma mark - Constructors

- (instancetype)initWithName:(NSString *)name
                 namespaceId:(NSString *)namespaceId
               namespaceType:(DBTEAMNamespaceType *)namespaceType
                teamMemberId:(NSString *)teamMemberId {
  [DBStoneValidators nonnullValidator:nil](name);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](namespaceId);
  [DBStoneValidators nonnullValidator:nil](namespaceType);

  self = [super init];
  if (self) {
    _name = name;
    _namespaceId = namespaceId;
    _namespaceType = namespaceType;
    _teamMemberId = teamMemberId;
  }
  return self;
}

- (instancetype)initWithName:(NSString *)name
                 namespaceId:(NSString *)namespaceId
               namespaceType:(DBTEAMNamespaceType *)namespaceType {
  return [self initWithName:name namespaceId:namespaceId namespaceType:namespaceType teamMemberId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMNamespaceMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMNamespaceMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMNamespaceMetadataSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.name hash];
  result = prime * result + [self.namespaceId hash];
  result = prime * result + [self.namespaceType hash];
  if (self.teamMemberId != nil) {
    result = prime * result + [self.teamMemberId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNamespaceMetadata:other];
}

- (BOOL)isEqualToNamespaceMetadata:(DBTEAMNamespaceMetadata *)aNamespaceMetadata {
  if (self == aNamespaceMetadata) {
    return YES;
  }
  if (![self.name isEqual:aNamespaceMetadata.name]) {
    return NO;
  }
  if (![self.namespaceId isEqual:aNamespaceMetadata.namespaceId]) {
    return NO;
  }
  if (![self.namespaceType isEqual:aNamespaceMetadata.namespaceType]) {
    return NO;
  }
  if (self.teamMemberId) {
    if (![self.teamMemberId isEqual:aNamespaceMetadata.teamMemberId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMNamespaceMetadataSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMNamespaceMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"namespace_id"] = valueObj.namespaceId;
  jsonDict[@"namespace_type"] = [DBTEAMNamespaceTypeSerializer serialize:valueObj.namespaceType];
  if (valueObj.teamMemberId) {
    jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMNamespaceMetadata *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *name = valueDict[@"name"];
  NSString *namespaceId = valueDict[@"namespace_id"];
  DBTEAMNamespaceType *namespaceType = [DBTEAMNamespaceTypeSerializer deserialize:valueDict[@"namespace_type"]];
  NSString *teamMemberId = valueDict[@"team_member_id"] ?: nil;

  return [[DBTEAMNamespaceMetadata alloc] initWithName:name
                                           namespaceId:namespaceId
                                         namespaceType:namespaceType
                                          teamMemberId:teamMemberId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMNamespaceType.h"

#pragma mark - API Object

@implementation DBTEAMNamespaceType

#pragma mark - Constructors

- (instancetype)initWithAppFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMNamespaceTypeAppFolder;
  }
  return self;
}

- (instancetype)initWithSharedFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMNamespaceTypeSharedFolder;
  }
  return self;
}

- (instancetype)initWithTeamFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMNamespaceTypeTeamFolder;
  }
  return self;
}

- (instancetype)initWithTeamMemberFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMNamespaceTypeTeamMemberFolder;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMNamespaceTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAppFolder {
  return _tag == DBTEAMNamespaceTypeAppFolder;
}

- (BOOL)isSharedFolder {
  return _tag == DBTEAMNamespaceTypeSharedFolder;
}

- (BOOL)isTeamFolder {
  return _tag == DBTEAMNamespaceTypeTeamFolder;
}

- (BOOL)isTeamMemberFolder {
  return _tag == DBTEAMNamespaceTypeTeamMemberFolder;
}

- (BOOL)isOther {
  return _tag == DBTEAMNamespaceTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMNamespaceTypeAppFolder:
    return @"DBTEAMNamespaceTypeAppFolder";
  case DBTEAMNamespaceTypeSharedFolder:
    return @"DBTEAMNamespaceTypeSharedFolder";
  case DBTEAMNamespaceTypeTeamFolder:
    return @"DBTEAMNamespaceTypeTeamFolder";
  case DBTEAMNamespaceTypeTeamMemberFolder:
    return @"DBTEAMNamespaceTypeTeamMemberFolder";
  case DBTEAMNamespaceTypeOther:
    return @"DBTEAMNamespaceTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMNamespaceTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMNamespaceTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMNamespaceTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMNamespaceTypeAppFolder:
    result = prime * result + [[self tagName] hash];
  case DBTEAMNamespaceTypeSharedFolder:
    result = prime * result + [[self tagName] hash];
  case DBTEAMNamespaceTypeTeamFolder:
    result = prime * result + [[self tagName] hash];
  case DBTEAMNamespaceTypeTeamMemberFolder:
    result = prime * result + [[self tagName] hash];
  case DBTEAMNamespaceTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNamespaceType:other];
}

- (BOOL)isEqualToNamespaceType:(DBTEAMNamespaceType *)aNamespaceType {
  if (self == aNamespaceType) {
    return YES;
  }
  if (self.tag != aNamespaceType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMNamespaceTypeAppFolder:
    return [[self tagName] isEqual:[aNamespaceType tagName]];
  case DBTEAMNamespaceTypeSharedFolder:
    return [[self tagName] isEqual:[aNamespaceType tagName]];
  case DBTEAMNamespaceTypeTeamFolder:
    return [[self tagName] isEqual:[aNamespaceType tagName]];
  case DBTEAMNamespaceTypeTeamMemberFolder:
    return [[self tagName] isEqual:[aNamespaceType tagName]];
  case DBTEAMNamespaceTypeOther:
    return [[self tagName] isEqual:[aNamespaceType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMNamespaceTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMNamespaceType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAppFolder]) {
    jsonDict[@".tag"] = @"app_folder";
  } else if ([valueObj isSharedFolder]) {
    jsonDict[@".tag"] = @"shared_folder";
  } else if ([valueObj isTeamFolder]) {
    jsonDict[@".tag"] = @"team_folder";
  } else if ([valueObj isTeamMemberFolder]) {
    jsonDict[@".tag"] = @"team_member_folder";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMNamespaceType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"app_folder"]) {
    return [[DBTEAMNamespaceType alloc] initWithAppFolder];
  } else if ([tag isEqualToString:@"shared_folder"]) {
    return [[DBTEAMNamespaceType alloc] initWithSharedFolder];
  } else if ([tag isEqualToString:@"team_folder"]) {
    return [[DBTEAMNamespaceType alloc] initWithTeamFolder];
  } else if ([tag isEqualToString:@"team_member_folder"]) {
    return [[DBTEAMNamespaceType alloc] initWithTeamMemberFolder];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMNamespaceType alloc] initWithOther];
  } else {
    return [[DBTEAMNamespaceType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRemoveCustomQuotaResult.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMRemoveCustomQuotaResult

@synthesize success = _success;
@synthesize invalidUser = _invalidUser;

#pragma mark - Constructors

- (instancetype)initWithSuccess:(DBTEAMUserSelectorArg *)success {
  self = [super init];
  if (self) {
    _tag = DBTEAMRemoveCustomQuotaResultSuccess;
    _success = success;
  }
  return self;
}

- (instancetype)initWithInvalidUser:(DBTEAMUserSelectorArg *)invalidUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMRemoveCustomQuotaResultInvalidUser;
    _invalidUser = invalidUser;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMRemoveCustomQuotaResultOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMUserSelectorArg *)success {
  if (![self isSuccess]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMRemoveCustomQuotaResultSuccess, but was %@.", [self tagName]];
  }
  return _success;
}

- (DBTEAMUserSelectorArg *)invalidUser {
  if (![self isInvalidUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMRemoveCustomQuotaResultInvalidUser, but was %@.", [self tagName]];
  }
  return _invalidUser;
}

#pragma mark - Tag state methods

- (BOOL)isSuccess {
  return _tag == DBTEAMRemoveCustomQuotaResultSuccess;
}

- (BOOL)isInvalidUser {
  return _tag == DBTEAMRemoveCustomQuotaResultInvalidUser;
}

- (BOOL)isOther {
  return _tag == DBTEAMRemoveCustomQuotaResultOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMRemoveCustomQuotaResultSuccess:
    return @"DBTEAMRemoveCustomQuotaResultSuccess";
  case DBTEAMRemoveCustomQuotaResultInvalidUser:
    return @"DBTEAMRemoveCustomQuotaResultInvalidUser";
  case DBTEAMRemoveCustomQuotaResultOther:
    return @"DBTEAMRemoveCustomQuotaResultOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRemoveCustomQuotaResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRemoveCustomQuotaResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRemoveCustomQuotaResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMRemoveCustomQuotaResultSuccess:
    result = prime * result + [self.success hash];
  case DBTEAMRemoveCustomQuotaResultInvalidUser:
    result = prime * result + [self.invalidUser hash];
  case DBTEAMRemoveCustomQuotaResultOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRemoveCustomQuotaResult:other];
}

- (BOOL)isEqualToRemoveCustomQuotaResult:(DBTEAMRemoveCustomQuotaResult *)aRemoveCustomQuotaResult {
  if (self == aRemoveCustomQuotaResult) {
    return YES;
  }
  if (self.tag != aRemoveCustomQuotaResult.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMRemoveCustomQuotaResultSuccess:
    return [self.success isEqual:aRemoveCustomQuotaResult.success];
  case DBTEAMRemoveCustomQuotaResultInvalidUser:
    return [self.invalidUser isEqual:aRemoveCustomQuotaResult.invalidUser];
  case DBTEAMRemoveCustomQuotaResultOther:
    return [[self tagName] isEqual:[aRemoveCustomQuotaResult tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRemoveCustomQuotaResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRemoveCustomQuotaResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isSuccess]) {
    jsonDict[@"success"] = [[DBTEAMUserSelectorArgSerializer serialize:valueObj.success] mutableCopy];
    jsonDict[@".tag"] = @"success";
  } else if ([valueObj isInvalidUser]) {
    jsonDict[@"invalid_user"] = [[DBTEAMUserSelectorArgSerializer serialize:valueObj.invalidUser] mutableCopy];
    jsonDict[@".tag"] = @"invalid_user";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRemoveCustomQuotaResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"success"]) {
    DBTEAMUserSelectorArg *success = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"success"]];
    return [[DBTEAMRemoveCustomQuotaResult alloc] initWithSuccess:success];
  } else if ([tag isEqualToString:@"invalid_user"]) {
    DBTEAMUserSelectorArg *invalidUser = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"invalid_user"]];
    return [[DBTEAMRemoveCustomQuotaResult alloc] initWithInvalidUser:invalidUser];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMRemoveCustomQuotaResult alloc] initWithOther];
  } else {
    return [[DBTEAMRemoveCustomQuotaResult alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRemovedStatus.h"

#pragma mark - API Object

@implementation DBTEAMRemovedStatus

#pragma mark - Constructors

- (instancetype)initWithIsRecoverable:(NSNumber *)isRecoverable {
  [DBStoneValidators nonnullValidator:nil](isRecoverable);

  self = [super init];
  if (self) {
    _isRecoverable = isRecoverable;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRemovedStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRemovedStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRemovedStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.isRecoverable hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRemovedStatus:other];
}

- (BOOL)isEqualToRemovedStatus:(DBTEAMRemovedStatus *)aRemovedStatus {
  if (self == aRemovedStatus) {
    return YES;
  }
  if (![self.isRecoverable isEqual:aRemovedStatus.isRecoverable]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRemovedStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRemovedStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"is_recoverable"] = valueObj.isRecoverable;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRemovedStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *isRecoverable = valueDict[@"is_recoverable"];

  return [[DBTEAMRemovedStatus alloc] initWithIsRecoverable:isRecoverable];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDeviceSessionArg.h"
#import "DBTEAMRevokeDesktopClientArg.h"

#pragma mark - API Object

@implementation DBTEAMRevokeDesktopClientArg

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId
                     teamMemberId:(NSString *)teamMemberId
                   deleteOnUnlink:(NSNumber *)deleteOnUnlink {
  [DBStoneValidators nonnullValidator:nil](sessionId);
  [DBStoneValidators nonnullValidator:nil](teamMemberId);

  self = [super initWithSessionId:sessionId teamMemberId:teamMemberId];
  if (self) {
    _deleteOnUnlink = deleteOnUnlink ?: @NO;
  }
  return self;
}

- (instancetype)initWithSessionId:(NSString *)sessionId teamMemberId:(NSString *)teamMemberId {
  return [self initWithSessionId:sessionId teamMemberId:teamMemberId deleteOnUnlink:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeDesktopClientArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeDesktopClientArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeDesktopClientArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sessionId hash];
  result = prime * result + [self.teamMemberId hash];
  result = prime * result + [self.deleteOnUnlink hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeDesktopClientArg:other];
}

- (BOOL)isEqualToRevokeDesktopClientArg:(DBTEAMRevokeDesktopClientArg *)aRevokeDesktopClientArg {
  if (self == aRevokeDesktopClientArg) {
    return YES;
  }
  if (![self.sessionId isEqual:aRevokeDesktopClientArg.sessionId]) {
    return NO;
  }
  if (![self.teamMemberId isEqual:aRevokeDesktopClientArg.teamMemberId]) {
    return NO;
  }
  if (![self.deleteOnUnlink isEqual:aRevokeDesktopClientArg.deleteOnUnlink]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeDesktopClientArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeDesktopClientArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"session_id"] = valueObj.sessionId;
  jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  jsonDict[@"delete_on_unlink"] = valueObj.deleteOnUnlink;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeDesktopClientArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sessionId = valueDict[@"session_id"];
  NSString *teamMemberId = valueDict[@"team_member_id"];
  NSNumber *deleteOnUnlink = valueDict[@"delete_on_unlink"] ?: @NO;

  return [[DBTEAMRevokeDesktopClientArg alloc] initWithSessionId:sessionId
                                                    teamMemberId:teamMemberId
                                                  deleteOnUnlink:deleteOnUnlink];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDeviceSessionArg.h"
#import "DBTEAMRevokeDesktopClientArg.h"
#import "DBTEAMRevokeDeviceSessionArg.h"

#pragma mark - API Object

@implementation DBTEAMRevokeDeviceSessionArg

@synthesize webSession = _webSession;
@synthesize desktopClient = _desktopClient;
@synthesize mobileClient = _mobileClient;

#pragma mark - Constructors

- (instancetype)initWithWebSession:(DBTEAMDeviceSessionArg *)webSession {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeDeviceSessionArgWebSession;
    _webSession = webSession;
  }
  return self;
}

- (instancetype)initWithDesktopClient:(DBTEAMRevokeDesktopClientArg *)desktopClient {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeDeviceSessionArgDesktopClient;
    _desktopClient = desktopClient;
  }
  return self;
}

- (instancetype)initWithMobileClient:(DBTEAMDeviceSessionArg *)mobileClient {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeDeviceSessionArgMobileClient;
    _mobileClient = mobileClient;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMDeviceSessionArg *)webSession {
  if (![self isWebSession]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMRevokeDeviceSessionArgWebSession, but was %@.", [self tagName]];
  }
  return _webSession;
}

- (DBTEAMRevokeDesktopClientArg *)desktopClient {
  if (![self isDesktopClient]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMRevokeDeviceSessionArgDesktopClient, but was %@.", [self tagName]];
  }
  return _desktopClient;
}

- (DBTEAMDeviceSessionArg *)mobileClient {
  if (![self isMobileClient]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMRevokeDeviceSessionArgMobileClient, but was %@.", [self tagName]];
  }
  return _mobileClient;
}

#pragma mark - Tag state methods

- (BOOL)isWebSession {
  return _tag == DBTEAMRevokeDeviceSessionArgWebSession;
}

- (BOOL)isDesktopClient {
  return _tag == DBTEAMRevokeDeviceSessionArgDesktopClient;
}

- (BOOL)isMobileClient {
  return _tag == DBTEAMRevokeDeviceSessionArgMobileClient;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMRevokeDeviceSessionArgWebSession:
    return @"DBTEAMRevokeDeviceSessionArgWebSession";
  case DBTEAMRevokeDeviceSessionArgDesktopClient:
    return @"DBTEAMRevokeDeviceSessionArgDesktopClient";
  case DBTEAMRevokeDeviceSessionArgMobileClient:
    return @"DBTEAMRevokeDeviceSessionArgMobileClient";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeDeviceSessionArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeDeviceSessionArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeDeviceSessionArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMRevokeDeviceSessionArgWebSession:
    result = prime * result + [self.webSession hash];
  case DBTEAMRevokeDeviceSessionArgDesktopClient:
    result = prime * result + [self.desktopClient hash];
  case DBTEAMRevokeDeviceSessionArgMobileClient:
    result = prime * result + [self.mobileClient hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeDeviceSessionArg:other];
}

- (BOOL)isEqualToRevokeDeviceSessionArg:(DBTEAMRevokeDeviceSessionArg *)aRevokeDeviceSessionArg {
  if (self == aRevokeDeviceSessionArg) {
    return YES;
  }
  if (self.tag != aRevokeDeviceSessionArg.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMRevokeDeviceSessionArgWebSession:
    return [self.webSession isEqual:aRevokeDeviceSessionArg.webSession];
  case DBTEAMRevokeDeviceSessionArgDesktopClient:
    return [self.desktopClient isEqual:aRevokeDeviceSessionArg.desktopClient];
  case DBTEAMRevokeDeviceSessionArgMobileClient:
    return [self.mobileClient isEqual:aRevokeDeviceSessionArg.mobileClient];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeDeviceSessionArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeDeviceSessionArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isWebSession]) {
    jsonDict = [[DBTEAMDeviceSessionArgSerializer serialize:valueObj.webSession] mutableCopy];
    jsonDict[@".tag"] = @"web_session";
  } else if ([valueObj isDesktopClient]) {
    jsonDict = [[DBTEAMRevokeDesktopClientArgSerializer serialize:valueObj.desktopClient] mutableCopy];
    jsonDict[@".tag"] = @"desktop_client";
  } else if ([valueObj isMobileClient]) {
    jsonDict = [[DBTEAMDeviceSessionArgSerializer serialize:valueObj.mobileClient] mutableCopy];
    jsonDict[@".tag"] = @"mobile_client";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeDeviceSessionArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"web_session"]) {
    DBTEAMDeviceSessionArg *webSession = [DBTEAMDeviceSessionArgSerializer deserialize:valueDict];
    return [[DBTEAMRevokeDeviceSessionArg alloc] initWithWebSession:webSession];
  } else if ([tag isEqualToString:@"desktop_client"]) {
    DBTEAMRevokeDesktopClientArg *desktopClient = [DBTEAMRevokeDesktopClientArgSerializer deserialize:valueDict];
    return [[DBTEAMRevokeDeviceSessionArg alloc] initWithDesktopClient:desktopClient];
  } else if ([tag isEqualToString:@"mobile_client"]) {
    DBTEAMDeviceSessionArg *mobileClient = [DBTEAMDeviceSessionArgSerializer deserialize:valueDict];
    return [[DBTEAMRevokeDeviceSessionArg alloc] initWithMobileClient:mobileClient];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeDeviceSessionArg.h"
#import "DBTEAMRevokeDeviceSessionBatchArg.h"

#pragma mark - API Object

@implementation DBTEAMRevokeDeviceSessionBatchArg

#pragma mark - Constructors

- (instancetype)initWithRevokeDevices:(NSArray<DBTEAMRevokeDeviceSessionArg *> *)revokeDevices {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](revokeDevices);

  self = [super init];
  if (self) {
    _revokeDevices = revokeDevices;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeDeviceSessionBatchArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeDeviceSessionBatchArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeDeviceSessionBatchArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.revokeDevices hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeDeviceSessionBatchArg:other];
}

- (BOOL)isEqualToRevokeDeviceSessionBatchArg:(DBTEAMRevokeDeviceSessionBatchArg *)aRevokeDeviceSessionBatchArg {
  if (self == aRevokeDeviceSessionBatchArg) {
    return YES;
  }
  if (![self.revokeDevices isEqual:aRevokeDeviceSessionBatchArg.revokeDevices]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeDeviceSessionBatchArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeDeviceSessionBatchArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"revoke_devices"] = [DBArraySerializer serialize:valueObj.revokeDevices
                                                   withBlock:^id(id elem0) {
                                                     return [DBTEAMRevokeDeviceSessionArgSerializer serialize:elem0];
                                                   }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeDeviceSessionBatchArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMRevokeDeviceSessionArg *> *revokeDevices =
      [DBArraySerializer deserialize:valueDict[@"revoke_devices"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMRevokeDeviceSessionArgSerializer deserialize:elem0];
                           }];

  return [[DBTEAMRevokeDeviceSessionBatchArg alloc] initWithRevokeDevices:revokeDevices];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeDeviceSessionBatchError.h"

#pragma mark - API Object

@implementation DBTEAMRevokeDeviceSessionBatchError

#pragma mark - Constructors

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeDeviceSessionBatchErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOther {
  return _tag == DBTEAMRevokeDeviceSessionBatchErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMRevokeDeviceSessionBatchErrorOther:
    return @"DBTEAMRevokeDeviceSessionBatchErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeDeviceSessionBatchErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeDeviceSessionBatchErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeDeviceSessionBatchErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMRevokeDeviceSessionBatchErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeDeviceSessionBatchError:other];
}

- (BOOL)isEqualToRevokeDeviceSessionBatchError:(DBTEAMRevokeDeviceSessionBatchError *)aRevokeDeviceSessionBatchError {
  if (self == aRevokeDeviceSessionBatchError) {
    return YES;
  }
  if (self.tag != aRevokeDeviceSessionBatchError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMRevokeDeviceSessionBatchErrorOther:
    return [[self tagName] isEqual:[aRevokeDeviceSessionBatchError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeDeviceSessionBatchErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeDeviceSessionBatchError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeDeviceSessionBatchError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMRevokeDeviceSessionBatchError alloc] initWithOther];
  } else {
    return [[DBTEAMRevokeDeviceSessionBatchError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeDeviceSessionBatchResult.h"
#import "DBTEAMRevokeDeviceSessionStatus.h"

#pragma mark - API Object

@implementation DBTEAMRevokeDeviceSessionBatchResult

#pragma mark - Constructors

- (instancetype)initWithRevokeDevicesStatus:(NSArray<DBTEAMRevokeDeviceSessionStatus *> *)revokeDevicesStatus {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](revokeDevicesStatus);

  self = [super init];
  if (self) {
    _revokeDevicesStatus = revokeDevicesStatus;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeDeviceSessionBatchResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeDeviceSessionBatchResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeDeviceSessionBatchResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.revokeDevicesStatus hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeDeviceSessionBatchResult:other];
}

- (BOOL)isEqualToRevokeDeviceSessionBatchResult:
    (DBTEAMRevokeDeviceSessionBatchResult *)aRevokeDeviceSessionBatchResult {
  if (self == aRevokeDeviceSessionBatchResult) {
    return YES;
  }
  if (![self.revokeDevicesStatus isEqual:aRevokeDeviceSessionBatchResult.revokeDevicesStatus]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeDeviceSessionBatchResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeDeviceSessionBatchResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"revoke_devices_status"] =
      [DBArraySerializer serialize:valueObj.revokeDevicesStatus
                         withBlock:^id(id elem0) {
                           return [DBTEAMRevokeDeviceSessionStatusSerializer serialize:elem0];
                         }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeDeviceSessionBatchResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMRevokeDeviceSessionStatus *> *revokeDevicesStatus =
      [DBArraySerializer deserialize:valueDict[@"revoke_devices_status"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMRevokeDeviceSessionStatusSerializer deserialize:elem0];
                           }];

  return [[DBTEAMRevokeDeviceSessionBatchResult alloc] initWithRevokeDevicesStatus:revokeDevicesStatus];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeDeviceSessionError.h"

#pragma mark - API Object

@implementation DBTEAMRevokeDeviceSessionError

#pragma mark - Constructors

- (instancetype)initWithDeviceSessionNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeDeviceSessionErrorDeviceSessionNotFound;
  }
  return self;
}

- (instancetype)initWithMemberNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeDeviceSessionErrorMemberNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeDeviceSessionErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDeviceSessionNotFound {
  return _tag == DBTEAMRevokeDeviceSessionErrorDeviceSessionNotFound;
}

- (BOOL)isMemberNotFound {
  return _tag == DBTEAMRevokeDeviceSessionErrorMemberNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMRevokeDeviceSessionErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMRevokeDeviceSessionErrorDeviceSessionNotFound:
    return @"DBTEAMRevokeDeviceSessionErrorDeviceSessionNotFound";
  case DBTEAMRevokeDeviceSessionErrorMemberNotFound:
    return @"DBTEAMRevokeDeviceSessionErrorMemberNotFound";
  case DBTEAMRevokeDeviceSessionErrorOther:
    return @"DBTEAMRevokeDeviceSessionErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeDeviceSessionErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeDeviceSessionErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeDeviceSessionErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMRevokeDeviceSessionErrorDeviceSessionNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMRevokeDeviceSessionErrorMemberNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMRevokeDeviceSessionErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeDeviceSessionError:other];
}

- (BOOL)isEqualToRevokeDeviceSessionError:(DBTEAMRevokeDeviceSessionError *)aRevokeDeviceSessionError {
  if (self == aRevokeDeviceSessionError) {
    return YES;
  }
  if (self.tag != aRevokeDeviceSessionError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMRevokeDeviceSessionErrorDeviceSessionNotFound:
    return [[self tagName] isEqual:[aRevokeDeviceSessionError tagName]];
  case DBTEAMRevokeDeviceSessionErrorMemberNotFound:
    return [[self tagName] isEqual:[aRevokeDeviceSessionError tagName]];
  case DBTEAMRevokeDeviceSessionErrorOther:
    return [[self tagName] isEqual:[aRevokeDeviceSessionError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeDeviceSessionErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeDeviceSessionError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDeviceSessionNotFound]) {
    jsonDict[@".tag"] = @"device_session_not_found";
  } else if ([valueObj isMemberNotFound]) {
    jsonDict[@".tag"] = @"member_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeDeviceSessionError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"device_session_not_found"]) {
    return [[DBTEAMRevokeDeviceSessionError alloc] initWithDeviceSessionNotFound];
  } else if ([tag isEqualToString:@"member_not_found"]) {
    return [[DBTEAMRevokeDeviceSessionError alloc] initWithMemberNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMRevokeDeviceSessionError alloc] initWithOther];
  } else {
    return [[DBTEAMRevokeDeviceSessionError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeDeviceSessionError.h"
#import "DBTEAMRevokeDeviceSessionStatus.h"

#pragma mark - API Object

@implementation DBTEAMRevokeDeviceSessionStatus

#pragma mark - Constructors

- (instancetype)initWithSuccess:(NSNumber *)success errorType:(DBTEAMRevokeDeviceSessionError *)errorType {
  [DBStoneValidators nonnullValidator:nil](success);

  self = [super init];
  if (self) {
    _success = success;
    _errorType = errorType;
  }
  return self;
}

- (instancetype)initWithSuccess:(NSNumber *)success {
  return [self initWithSuccess:success errorType:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeDeviceSessionStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeDeviceSessionStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeDeviceSessionStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.success hash];
  if (self.errorType != nil) {
    result = prime * result + [self.errorType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeDeviceSessionStatus:other];
}

- (BOOL)isEqualToRevokeDeviceSessionStatus:(DBTEAMRevokeDeviceSessionStatus *)aRevokeDeviceSessionStatus {
  if (self == aRevokeDeviceSessionStatus) {
    return YES;
  }
  if (![self.success isEqual:aRevokeDeviceSessionStatus.success]) {
    return NO;
  }
  if (self.errorType) {
    if (![self.errorType isEqual:aRevokeDeviceSessionStatus.errorType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeDeviceSessionStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeDeviceSessionStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"success"] = valueObj.success;
  if (valueObj.errorType) {
    jsonDict[@"error_type"] = [DBTEAMRevokeDeviceSessionErrorSerializer serialize:valueObj.errorType];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeDeviceSessionStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *success = valueDict[@"success"];
  DBTEAMRevokeDeviceSessionError *errorType =
      valueDict[@"error_type"] ? [DBTEAMRevokeDeviceSessionErrorSerializer deserialize:valueDict[@"error_type"]] : nil;

  return [[DBTEAMRevokeDeviceSessionStatus alloc] initWithSuccess:success errorType:errorType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeLinkedApiAppArg.h"

#pragma mark - API Object

@implementation DBTEAMRevokeLinkedApiAppArg

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId
                 teamMemberId:(NSString *)teamMemberId
                keepAppFolder:(NSNumber *)keepAppFolder {
  [DBStoneValidators nonnullValidator:nil](appId);
  [DBStoneValidators nonnullValidator:nil](teamMemberId);

  self = [super init];
  if (self) {
    _appId = appId;
    _teamMemberId = teamMemberId;
    _keepAppFolder = keepAppFolder ?: @YES;
  }
  return self;
}

- (instancetype)initWithAppId:(NSString *)appId teamMemberId:(NSString *)teamMemberId {
  return [self initWithAppId:appId teamMemberId:teamMemberId keepAppFolder:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeLinkedApiAppArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeLinkedApiAppArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeLinkedApiAppArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appId hash];
  result = prime * result + [self.teamMemberId hash];
  result = prime * result + [self.keepAppFolder hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeLinkedApiAppArg:other];
}

- (BOOL)isEqualToRevokeLinkedApiAppArg:(DBTEAMRevokeLinkedApiAppArg *)aRevokeLinkedApiAppArg {
  if (self == aRevokeLinkedApiAppArg) {
    return YES;
  }
  if (![self.appId isEqual:aRevokeLinkedApiAppArg.appId]) {
    return NO;
  }
  if (![self.teamMemberId isEqual:aRevokeLinkedApiAppArg.teamMemberId]) {
    return NO;
  }
  if (![self.keepAppFolder isEqual:aRevokeLinkedApiAppArg.keepAppFolder]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeLinkedApiAppArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeLinkedApiAppArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_id"] = valueObj.appId;
  jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  jsonDict[@"keep_app_folder"] = valueObj.keepAppFolder;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeLinkedApiAppArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *appId = valueDict[@"app_id"];
  NSString *teamMemberId = valueDict[@"team_member_id"];
  NSNumber *keepAppFolder = valueDict[@"keep_app_folder"] ?: @YES;

  return
      [[DBTEAMRevokeLinkedApiAppArg alloc] initWithAppId:appId teamMemberId:teamMemberId keepAppFolder:keepAppFolder];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeLinkedApiAppArg.h"
#import "DBTEAMRevokeLinkedApiAppBatchArg.h"

#pragma mark - API Object

@implementation DBTEAMRevokeLinkedApiAppBatchArg

#pragma mark - Constructors

- (instancetype)initWithRevokeLinkedApp:(NSArray<DBTEAMRevokeLinkedApiAppArg *> *)revokeLinkedApp {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](revokeLinkedApp);

  self = [super init];
  if (self) {
    _revokeLinkedApp = revokeLinkedApp;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeLinkedApiAppBatchArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeLinkedApiAppBatchArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeLinkedApiAppBatchArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.revokeLinkedApp hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeLinkedApiAppBatchArg:other];
}

- (BOOL)isEqualToRevokeLinkedApiAppBatchArg:(DBTEAMRevokeLinkedApiAppBatchArg *)aRevokeLinkedApiAppBatchArg {
  if (self == aRevokeLinkedApiAppBatchArg) {
    return YES;
  }
  if (![self.revokeLinkedApp isEqual:aRevokeLinkedApiAppBatchArg.revokeLinkedApp]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeLinkedApiAppBatchArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeLinkedApiAppBatchArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"revoke_linked_app"] = [DBArraySerializer serialize:valueObj.revokeLinkedApp
                                                      withBlock:^id(id elem0) {
                                                        return [DBTEAMRevokeLinkedApiAppArgSerializer serialize:elem0];
                                                      }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeLinkedApiAppBatchArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMRevokeLinkedApiAppArg *> *revokeLinkedApp =
      [DBArraySerializer deserialize:valueDict[@"revoke_linked_app"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMRevokeLinkedApiAppArgSerializer deserialize:elem0];
                           }];

  return [[DBTEAMRevokeLinkedApiAppBatchArg alloc] initWithRevokeLinkedApp:revokeLinkedApp];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeLinkedAppBatchError.h"

#pragma mark - API Object

@implementation DBTEAMRevokeLinkedAppBatchError

#pragma mark - Constructors

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeLinkedAppBatchErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOther {
  return _tag == DBTEAMRevokeLinkedAppBatchErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMRevokeLinkedAppBatchErrorOther:
    return @"DBTEAMRevokeLinkedAppBatchErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeLinkedAppBatchErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeLinkedAppBatchErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeLinkedAppBatchErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMRevokeLinkedAppBatchErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeLinkedAppBatchError:other];
}

- (BOOL)isEqualToRevokeLinkedAppBatchError:(DBTEAMRevokeLinkedAppBatchError *)aRevokeLinkedAppBatchError {
  if (self == aRevokeLinkedAppBatchError) {
    return YES;
  }
  if (self.tag != aRevokeLinkedAppBatchError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMRevokeLinkedAppBatchErrorOther:
    return [[self tagName] isEqual:[aRevokeLinkedAppBatchError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeLinkedAppBatchErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeLinkedAppBatchError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeLinkedAppBatchError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMRevokeLinkedAppBatchError alloc] initWithOther];
  } else {
    return [[DBTEAMRevokeLinkedAppBatchError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeLinkedAppBatchResult.h"
#import "DBTEAMRevokeLinkedAppStatus.h"

#pragma mark - API Object

@implementation DBTEAMRevokeLinkedAppBatchResult

#pragma mark - Constructors

- (instancetype)initWithRevokeLinkedAppStatus:(NSArray<DBTEAMRevokeLinkedAppStatus *> *)revokeLinkedAppStatus {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](revokeLinkedAppStatus);

  self = [super init];
  if (self) {
    _revokeLinkedAppStatus = revokeLinkedAppStatus;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeLinkedAppBatchResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeLinkedAppBatchResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeLinkedAppBatchResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.revokeLinkedAppStatus hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeLinkedAppBatchResult:other];
}

- (BOOL)isEqualToRevokeLinkedAppBatchResult:(DBTEAMRevokeLinkedAppBatchResult *)aRevokeLinkedAppBatchResult {
  if (self == aRevokeLinkedAppBatchResult) {
    return YES;
  }
  if (![self.revokeLinkedAppStatus isEqual:aRevokeLinkedAppBatchResult.revokeLinkedAppStatus]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeLinkedAppBatchResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeLinkedAppBatchResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"revoke_linked_app_status"] =
      [DBArraySerializer serialize:valueObj.revokeLinkedAppStatus
                         withBlock:^id(id elem0) {
                           return [DBTEAMRevokeLinkedAppStatusSerializer serialize:elem0];
                         }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeLinkedAppBatchResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMRevokeLinkedAppStatus *> *revokeLinkedAppStatus =
      [DBArraySerializer deserialize:valueDict[@"revoke_linked_app_status"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMRevokeLinkedAppStatusSerializer deserialize:elem0];
                           }];

  return [[DBTEAMRevokeLinkedAppBatchResult alloc] initWithRevokeLinkedAppStatus:revokeLinkedAppStatus];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeLinkedAppError.h"

#pragma mark - API Object

@implementation DBTEAMRevokeLinkedAppError

#pragma mark - Constructors

- (instancetype)initWithAppNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeLinkedAppErrorAppNotFound;
  }
  return self;
}

- (instancetype)initWithMemberNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeLinkedAppErrorMemberNotFound;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMRevokeLinkedAppErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAppNotFound {
  return _tag == DBTEAMRevokeLinkedAppErrorAppNotFound;
}

- (BOOL)isMemberNotFound {
  return _tag == DBTEAMRevokeLinkedAppErrorMemberNotFound;
}

- (BOOL)isOther {
  return _tag == DBTEAMRevokeLinkedAppErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMRevokeLinkedAppErrorAppNotFound:
    return @"DBTEAMRevokeLinkedAppErrorAppNotFound";
  case DBTEAMRevokeLinkedAppErrorMemberNotFound:
    return @"DBTEAMRevokeLinkedAppErrorMemberNotFound";
  case DBTEAMRevokeLinkedAppErrorOther:
    return @"DBTEAMRevokeLinkedAppErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeLinkedAppErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeLinkedAppErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeLinkedAppErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMRevokeLinkedAppErrorAppNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMRevokeLinkedAppErrorMemberNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMRevokeLinkedAppErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeLinkedAppError:other];
}

- (BOOL)isEqualToRevokeLinkedAppError:(DBTEAMRevokeLinkedAppError *)aRevokeLinkedAppError {
  if (self == aRevokeLinkedAppError) {
    return YES;
  }
  if (self.tag != aRevokeLinkedAppError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMRevokeLinkedAppErrorAppNotFound:
    return [[self tagName] isEqual:[aRevokeLinkedAppError tagName]];
  case DBTEAMRevokeLinkedAppErrorMemberNotFound:
    return [[self tagName] isEqual:[aRevokeLinkedAppError tagName]];
  case DBTEAMRevokeLinkedAppErrorOther:
    return [[self tagName] isEqual:[aRevokeLinkedAppError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeLinkedAppErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeLinkedAppError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAppNotFound]) {
    jsonDict[@".tag"] = @"app_not_found";
  } else if ([valueObj isMemberNotFound]) {
    jsonDict[@".tag"] = @"member_not_found";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeLinkedAppError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"app_not_found"]) {
    return [[DBTEAMRevokeLinkedAppError alloc] initWithAppNotFound];
  } else if ([tag isEqualToString:@"member_not_found"]) {
    return [[DBTEAMRevokeLinkedAppError alloc] initWithMemberNotFound];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMRevokeLinkedAppError alloc] initWithOther];
  } else {
    return [[DBTEAMRevokeLinkedAppError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRevokeLinkedAppError.h"
#import "DBTEAMRevokeLinkedAppStatus.h"

#pragma mark - API Object

@implementation DBTEAMRevokeLinkedAppStatus

#pragma mark - Constructors

- (instancetype)initWithSuccess:(NSNumber *)success errorType:(DBTEAMRevokeLinkedAppError *)errorType {
  [DBStoneValidators nonnullValidator:nil](success);

  self = [super init];
  if (self) {
    _success = success;
    _errorType = errorType;
  }
  return self;
}

- (instancetype)initWithSuccess:(NSNumber *)success {
  return [self initWithSuccess:success errorType:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMRevokeLinkedAppStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMRevokeLinkedAppStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMRevokeLinkedAppStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.success hash];
  if (self.errorType != nil) {
    result = prime * result + [self.errorType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRevokeLinkedAppStatus:other];
}

- (BOOL)isEqualToRevokeLinkedAppStatus:(DBTEAMRevokeLinkedAppStatus *)aRevokeLinkedAppStatus {
  if (self == aRevokeLinkedAppStatus) {
    return YES;
  }
  if (![self.success isEqual:aRevokeLinkedAppStatus.success]) {
    return NO;
  }
  if (self.errorType) {
    if (![self.errorType isEqual:aRevokeLinkedAppStatus.errorType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMRevokeLinkedAppStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMRevokeLinkedAppStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"success"] = valueObj.success;
  if (valueObj.errorType) {
    jsonDict[@"error_type"] = [DBTEAMRevokeLinkedAppErrorSerializer serialize:valueObj.errorType];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMRevokeLinkedAppStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *success = valueDict[@"success"];
  DBTEAMRevokeLinkedAppError *errorType =
      valueDict[@"error_type"] ? [DBTEAMRevokeLinkedAppErrorSerializer deserialize:valueDict[@"error_type"]] : nil;

  return [[DBTEAMRevokeLinkedAppStatus alloc] initWithSuccess:success errorType:errorType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMSetCustomQuotaArg.h"
#import "DBTEAMUserCustomQuotaArg.h"

#pragma mark - API Object

@implementation DBTEAMSetCustomQuotaArg

#pragma mark - Constructors

- (instancetype)initWithUsersAndQuotas:(NSArray<DBTEAMUserCustomQuotaArg *> *)usersAndQuotas {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](usersAndQuotas);

  self = [super init];
  if (self) {
    _usersAndQuotas = usersAndQuotas;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMSetCustomQuotaArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMSetCustomQuotaArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMSetCustomQuotaArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.usersAndQuotas hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSetCustomQuotaArg:other];
}

- (BOOL)isEqualToSetCustomQuotaArg:(DBTEAMSetCustomQuotaArg *)aSetCustomQuotaArg {
  if (self == aSetCustomQuotaArg) {
    return YES;
  }
  if (![self.usersAndQuotas isEqual:aSetCustomQuotaArg.usersAndQuotas]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMSetCustomQuotaArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMSetCustomQuotaArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"users_and_quotas"] = [DBArraySerializer serialize:valueObj.usersAndQuotas
                                                     withBlock:^id(id elem0) {
                                                       return [DBTEAMUserCustomQuotaArgSerializer serialize:elem0];
                                                     }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMSetCustomQuotaArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMUserCustomQuotaArg *> *usersAndQuotas =
      [DBArraySerializer deserialize:valueDict[@"users_and_quotas"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMUserCustomQuotaArgSerializer deserialize:elem0];
                           }];

  return [[DBTEAMSetCustomQuotaArg alloc] initWithUsersAndQuotas:usersAndQuotas];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCustomQuotaError.h"
#import "DBTEAMSetCustomQuotaError.h"

#pragma mark - API Object

@implementation DBTEAMSetCustomQuotaError

#pragma mark - Constructors

- (instancetype)initWithTooManyUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMSetCustomQuotaErrorTooManyUsers;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMSetCustomQuotaErrorOther;
  }
  return self;
}

- (instancetype)initWithSomeUsersAreExcluded {
  self = [super init];
  if (self) {
    _tag = DBTEAMSetCustomQuotaErrorSomeUsersAreExcluded;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isTooManyUsers {
  return _tag == DBTEAMSetCustomQuotaErrorTooManyUsers;
}

- (BOOL)isOther {
  return _tag == DBTEAMSetCustomQuotaErrorOther;
}

- (BOOL)isSomeUsersAreExcluded {
  return _tag == DBTEAMSetCustomQuotaErrorSomeUsersAreExcluded;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMSetCustomQuotaErrorTooManyUsers:
    return @"DBTEAMSetCustomQuotaErrorTooManyUsers";
  case DBTEAMSetCustomQuotaErrorOther:
    return @"DBTEAMSetCustomQuotaErrorOther";
  case DBTEAMSetCustomQuotaErrorSomeUsersAreExcluded:
    return @"DBTEAMSetCustomQuotaErrorSomeUsersAreExcluded";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMSetCustomQuotaErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMSetCustomQuotaErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMSetCustomQuotaErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMSetCustomQuotaErrorTooManyUsers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMSetCustomQuotaErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMSetCustomQuotaErrorSomeUsersAreExcluded:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSetCustomQuotaError:other];
}

- (BOOL)isEqualToSetCustomQuotaError:(DBTEAMSetCustomQuotaError *)aSetCustomQuotaError {
  if (self == aSetCustomQuotaError) {
    return YES;
  }
  if (self.tag != aSetCustomQuotaError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMSetCustomQuotaErrorTooManyUsers:
    return [[self tagName] isEqual:[aSetCustomQuotaError tagName]];
  case DBTEAMSetCustomQuotaErrorOther:
    return [[self tagName] isEqual:[aSetCustomQuotaError tagName]];
  case DBTEAMSetCustomQuotaErrorSomeUsersAreExcluded:
    return [[self tagName] isEqual:[aSetCustomQuotaError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMSetCustomQuotaErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMSetCustomQuotaError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTooManyUsers]) {
    jsonDict[@".tag"] = @"too_many_users";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSomeUsersAreExcluded]) {
    jsonDict[@".tag"] = @"some_users_are_excluded";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMSetCustomQuotaError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"too_many_users"]) {
    return [[DBTEAMSetCustomQuotaError alloc] initWithTooManyUsers];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMSetCustomQuotaError alloc] initWithOther];
  } else if ([tag isEqualToString:@"some_users_are_excluded"]) {
    return [[DBTEAMSetCustomQuotaError alloc] initWithSomeUsersAreExcluded];
  } else {
    return [[DBTEAMSetCustomQuotaError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMStorageBucket.h"

#pragma mark - API Object

@implementation DBTEAMStorageBucket

#pragma mark - Constructors

- (instancetype)initWithBucket:(NSString *)bucket users:(NSNumber *)users {
  [DBStoneValidators nonnullValidator:nil](bucket);
  [DBStoneValidators nonnullValidator:nil](users);

  self = [super init];
  if (self) {
    _bucket = bucket;
    _users = users;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMStorageBucketSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMStorageBucketSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMStorageBucketSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.bucket hash];
  result = prime * result + [self.users hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToStorageBucket:other];
}

- (BOOL)isEqualToStorageBucket:(DBTEAMStorageBucket *)aStorageBucket {
  if (self == aStorageBucket) {
    return YES;
  }
  if (![self.bucket isEqual:aStorageBucket.bucket]) {
    return NO;
  }
  if (![self.users isEqual:aStorageBucket.users]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMStorageBucketSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMStorageBucket *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"bucket"] = valueObj.bucket;
  jsonDict[@"users"] = valueObj.users;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMStorageBucket *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *bucket = valueDict[@"bucket"];
  NSNumber *users = valueDict[@"users"];

  return [[DBTEAMStorageBucket alloc] initWithBucket:bucket users:users];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderAccessError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderAccessError

#pragma mark - Constructors

- (instancetype)initWithInvalidTeamFolderId {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderAccessErrorInvalidTeamFolderId;
  }
  return self;
}

- (instancetype)initWithNoAccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderAccessErrorNoAccess;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderAccessErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidTeamFolderId {
  return _tag == DBTEAMTeamFolderAccessErrorInvalidTeamFolderId;
}

- (BOOL)isNoAccess {
  return _tag == DBTEAMTeamFolderAccessErrorNoAccess;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderAccessErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderAccessErrorInvalidTeamFolderId:
    return @"DBTEAMTeamFolderAccessErrorInvalidTeamFolderId";
  case DBTEAMTeamFolderAccessErrorNoAccess:
    return @"DBTEAMTeamFolderAccessErrorNoAccess";
  case DBTEAMTeamFolderAccessErrorOther:
    return @"DBTEAMTeamFolderAccessErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderAccessErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderAccessErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderAccessErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderAccessErrorInvalidTeamFolderId:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderAccessErrorNoAccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderAccessErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderAccessError:other];
}

- (BOOL)isEqualToTeamFolderAccessError:(DBTEAMTeamFolderAccessError *)aTeamFolderAccessError {
  if (self == aTeamFolderAccessError) {
    return YES;
  }
  if (self.tag != aTeamFolderAccessError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderAccessErrorInvalidTeamFolderId:
    return [[self tagName] isEqual:[aTeamFolderAccessError tagName]];
  case DBTEAMTeamFolderAccessErrorNoAccess:
    return [[self tagName] isEqual:[aTeamFolderAccessError tagName]];
  case DBTEAMTeamFolderAccessErrorOther:
    return [[self tagName] isEqual:[aTeamFolderAccessError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderAccessErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderAccessError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidTeamFolderId]) {
    jsonDict[@".tag"] = @"invalid_team_folder_id";
  } else if ([valueObj isNoAccess]) {
    jsonDict[@".tag"] = @"no_access";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderAccessError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_team_folder_id"]) {
    return [[DBTEAMTeamFolderAccessError alloc] initWithInvalidTeamFolderId];
  } else if ([tag isEqualToString:@"no_access"]) {
    return [[DBTEAMTeamFolderAccessError alloc] initWithNoAccess];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderAccessError alloc] initWithOther];
  } else {
    return [[DBTEAMTeamFolderAccessError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseTeamFolderError.h"
#import "DBTEAMTeamFolderAccessError.h"
#import "DBTEAMTeamFolderActivateError.h"
#import "DBTEAMTeamFolderInvalidStatusError.h"
#import "DBTEAMTeamFolderTeamSharedDropboxError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderActivateError

@synthesize accessError = _accessError;
@synthesize statusError = _statusError;
@synthesize teamSharedDropboxError = _teamSharedDropboxError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBTEAMTeamFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderActivateErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithStatusError:(DBTEAMTeamFolderInvalidStatusError *)statusError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderActivateErrorStatusError;
    _statusError = statusError;
  }
  return self;
}

- (instancetype)initWithTeamSharedDropboxError:(DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderActivateErrorTeamSharedDropboxError;
    _teamSharedDropboxError = teamSharedDropboxError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderActivateErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMTeamFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderActivateErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBTEAMTeamFolderInvalidStatusError *)statusError {
  if (![self isStatusError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderActivateErrorStatusError, but was %@.", [self tagName]];
  }
  return _statusError;
}

- (DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  if (![self isTeamSharedDropboxError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderActivateErrorTeamSharedDropboxError, but was %@.",
                       [self tagName]];
  }
  return _teamSharedDropboxError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBTEAMTeamFolderActivateErrorAccessError;
}

- (BOOL)isStatusError {
  return _tag == DBTEAMTeamFolderActivateErrorStatusError;
}

- (BOOL)isTeamSharedDropboxError {
  return _tag == DBTEAMTeamFolderActivateErrorTeamSharedDropboxError;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderActivateErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderActivateErrorAccessError:
    return @"DBTEAMTeamFolderActivateErrorAccessError";
  case DBTEAMTeamFolderActivateErrorStatusError:
    return @"DBTEAMTeamFolderActivateErrorStatusError";
  case DBTEAMTeamFolderActivateErrorTeamSharedDropboxError:
    return @"DBTEAMTeamFolderActivateErrorTeamSharedDropboxError";
  case DBTEAMTeamFolderActivateErrorOther:
    return @"DBTEAMTeamFolderActivateErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderActivateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderActivateErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderActivateErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderActivateErrorAccessError:
    result = prime * result + [self.accessError hash];
  case DBTEAMTeamFolderActivateErrorStatusError:
    result = prime * result + [self.statusError hash];
  case DBTEAMTeamFolderActivateErrorTeamSharedDropboxError:
    result = prime * result + [self.teamSharedDropboxError hash];
  case DBTEAMTeamFolderActivateErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderActivateError:other];
}

- (BOOL)isEqualToTeamFolderActivateError:(DBTEAMTeamFolderActivateError *)aTeamFolderActivateError {
  if (self == aTeamFolderActivateError) {
    return YES;
  }
  if (self.tag != aTeamFolderActivateError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderActivateErrorAccessError:
    return [self.accessError isEqual:aTeamFolderActivateError.accessError];
  case DBTEAMTeamFolderActivateErrorStatusError:
    return [self.statusError isEqual:aTeamFolderActivateError.statusError];
  case DBTEAMTeamFolderActivateErrorTeamSharedDropboxError:
    return [self.teamSharedDropboxError isEqual:aTeamFolderActivateError.teamSharedDropboxError];
  case DBTEAMTeamFolderActivateErrorOther:
    return [[self tagName] isEqual:[aTeamFolderActivateError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderActivateErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderActivateError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] = [[DBTEAMTeamFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isStatusError]) {
    jsonDict[@"status_error"] =
        [[DBTEAMTeamFolderInvalidStatusErrorSerializer serialize:valueObj.statusError] mutableCopy];
    jsonDict[@".tag"] = @"status_error";
  } else if ([valueObj isTeamSharedDropboxError]) {
    jsonDict[@"team_shared_dropbox_error"] =
        [[DBTEAMTeamFolderTeamSharedDropboxErrorSerializer serialize:valueObj.teamSharedDropboxError] mutableCopy];
    jsonDict[@".tag"] = @"team_shared_dropbox_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderActivateError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBTEAMTeamFolderAccessError *accessError =
        [DBTEAMTeamFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBTEAMTeamFolderActivateError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"status_error"]) {
    DBTEAMTeamFolderInvalidStatusError *statusError =
        [DBTEAMTeamFolderInvalidStatusErrorSerializer deserialize:valueDict[@"status_error"]];
    return [[DBTEAMTeamFolderActivateError alloc] initWithStatusError:statusError];
  } else if ([tag isEqualToString:@"team_shared_dropbox_error"]) {
    DBTEAMTeamFolderTeamSharedDropboxError *teamSharedDropboxError =
        [DBTEAMTeamFolderTeamSharedDropboxErrorSerializer deserialize:valueDict[@"team_shared_dropbox_error"]];
    return [[DBTEAMTeamFolderActivateError alloc] initWithTeamSharedDropboxError:teamSharedDropboxError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderActivateError alloc] initWithOther];
  } else {
    return [[DBTEAMTeamFolderActivateError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderIdArg.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderIdArg

#pragma mark - Constructors

- (instancetype)initWithTeamFolderId:(NSString *)teamFolderId {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](teamFolderId);

  self = [super init];
  if (self) {
    _teamFolderId = teamFolderId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderIdArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderIdArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderIdArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamFolderId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderIdArg:other];
}

- (BOOL)isEqualToTeamFolderIdArg:(DBTEAMTeamFolderIdArg *)aTeamFolderIdArg {
  if (self == aTeamFolderIdArg) {
    return YES;
  }
  if (![self.teamFolderId isEqual:aTeamFolderIdArg.teamFolderId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderIdArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderIdArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_folder_id"] = valueObj.teamFolderId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderIdArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamFolderId = valueDict[@"team_folder_id"];

  return [[DBTEAMTeamFolderIdArg alloc] initWithTeamFolderId:teamFolderId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderArchiveArg.h"
#import "DBTEAMTeamFolderIdArg.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderArchiveArg

#pragma mark - Constructors

- (instancetype)initWithTeamFolderId:(NSString *)teamFolderId forceAsyncOff:(NSNumber *)forceAsyncOff {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](teamFolderId);

  self = [super initWithTeamFolderId:teamFolderId];
  if (self) {
    _forceAsyncOff = forceAsyncOff ?: @NO;
  }
  return self;
}

- (instancetype)initWithTeamFolderId:(NSString *)teamFolderId {
  return [self initWithTeamFolderId:teamFolderId forceAsyncOff:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderArchiveArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderArchiveArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderArchiveArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamFolderId hash];
  result = prime * result + [self.forceAsyncOff hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderArchiveArg:other];
}

- (BOOL)isEqualToTeamFolderArchiveArg:(DBTEAMTeamFolderArchiveArg *)aTeamFolderArchiveArg {
  if (self == aTeamFolderArchiveArg) {
    return YES;
  }
  if (![self.teamFolderId isEqual:aTeamFolderArchiveArg.teamFolderId]) {
    return NO;
  }
  if (![self.forceAsyncOff isEqual:aTeamFolderArchiveArg.forceAsyncOff]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderArchiveArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderArchiveArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_folder_id"] = valueObj.teamFolderId;
  jsonDict[@"force_async_off"] = valueObj.forceAsyncOff;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderArchiveArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamFolderId = valueDict[@"team_folder_id"];
  NSNumber *forceAsyncOff = valueDict[@"force_async_off"] ?: @NO;

  return [[DBTEAMTeamFolderArchiveArg alloc] initWithTeamFolderId:teamFolderId forceAsyncOff:forceAsyncOff];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseTeamFolderError.h"
#import "DBTEAMTeamFolderAccessError.h"
#import "DBTEAMTeamFolderArchiveError.h"
#import "DBTEAMTeamFolderInvalidStatusError.h"
#import "DBTEAMTeamFolderTeamSharedDropboxError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderArchiveError

@synthesize accessError = _accessError;
@synthesize statusError = _statusError;
@synthesize teamSharedDropboxError = _teamSharedDropboxError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBTEAMTeamFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderArchiveErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithStatusError:(DBTEAMTeamFolderInvalidStatusError *)statusError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderArchiveErrorStatusError;
    _statusError = statusError;
  }
  return self;
}

- (instancetype)initWithTeamSharedDropboxError:(DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderArchiveErrorTeamSharedDropboxError;
    _teamSharedDropboxError = teamSharedDropboxError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderArchiveErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMTeamFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderArchiveErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBTEAMTeamFolderInvalidStatusError *)statusError {
  if (![self isStatusError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderArchiveErrorStatusError, but was %@.", [self tagName]];
  }
  return _statusError;
}

- (DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  if (![self isTeamSharedDropboxError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderArchiveErrorTeamSharedDropboxError, but was %@.",
                       [self tagName]];
  }
  return _teamSharedDropboxError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBTEAMTeamFolderArchiveErrorAccessError;
}

- (BOOL)isStatusError {
  return _tag == DBTEAMTeamFolderArchiveErrorStatusError;
}

- (BOOL)isTeamSharedDropboxError {
  return _tag == DBTEAMTeamFolderArchiveErrorTeamSharedDropboxError;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderArchiveErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderArchiveErrorAccessError:
    return @"DBTEAMTeamFolderArchiveErrorAccessError";
  case DBTEAMTeamFolderArchiveErrorStatusError:
    return @"DBTEAMTeamFolderArchiveErrorStatusError";
  case DBTEAMTeamFolderArchiveErrorTeamSharedDropboxError:
    return @"DBTEAMTeamFolderArchiveErrorTeamSharedDropboxError";
  case DBTEAMTeamFolderArchiveErrorOther:
    return @"DBTEAMTeamFolderArchiveErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderArchiveErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderArchiveErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderArchiveErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderArchiveErrorAccessError:
    result = prime * result + [self.accessError hash];
  case DBTEAMTeamFolderArchiveErrorStatusError:
    result = prime * result + [self.statusError hash];
  case DBTEAMTeamFolderArchiveErrorTeamSharedDropboxError:
    result = prime * result + [self.teamSharedDropboxError hash];
  case DBTEAMTeamFolderArchiveErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderArchiveError:other];
}

- (BOOL)isEqualToTeamFolderArchiveError:(DBTEAMTeamFolderArchiveError *)aTeamFolderArchiveError {
  if (self == aTeamFolderArchiveError) {
    return YES;
  }
  if (self.tag != aTeamFolderArchiveError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderArchiveErrorAccessError:
    return [self.accessError isEqual:aTeamFolderArchiveError.accessError];
  case DBTEAMTeamFolderArchiveErrorStatusError:
    return [self.statusError isEqual:aTeamFolderArchiveError.statusError];
  case DBTEAMTeamFolderArchiveErrorTeamSharedDropboxError:
    return [self.teamSharedDropboxError isEqual:aTeamFolderArchiveError.teamSharedDropboxError];
  case DBTEAMTeamFolderArchiveErrorOther:
    return [[self tagName] isEqual:[aTeamFolderArchiveError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderArchiveErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderArchiveError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] = [[DBTEAMTeamFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isStatusError]) {
    jsonDict[@"status_error"] =
        [[DBTEAMTeamFolderInvalidStatusErrorSerializer serialize:valueObj.statusError] mutableCopy];
    jsonDict[@".tag"] = @"status_error";
  } else if ([valueObj isTeamSharedDropboxError]) {
    jsonDict[@"team_shared_dropbox_error"] =
        [[DBTEAMTeamFolderTeamSharedDropboxErrorSerializer serialize:valueObj.teamSharedDropboxError] mutableCopy];
    jsonDict[@".tag"] = @"team_shared_dropbox_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderArchiveError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBTEAMTeamFolderAccessError *accessError =
        [DBTEAMTeamFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBTEAMTeamFolderArchiveError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"status_error"]) {
    DBTEAMTeamFolderInvalidStatusError *statusError =
        [DBTEAMTeamFolderInvalidStatusErrorSerializer deserialize:valueDict[@"status_error"]];
    return [[DBTEAMTeamFolderArchiveError alloc] initWithStatusError:statusError];
  } else if ([tag isEqualToString:@"team_shared_dropbox_error"]) {
    DBTEAMTeamFolderTeamSharedDropboxError *teamSharedDropboxError =
        [DBTEAMTeamFolderTeamSharedDropboxErrorSerializer deserialize:valueDict[@"team_shared_dropbox_error"]];
    return [[DBTEAMTeamFolderArchiveError alloc] initWithTeamSharedDropboxError:teamSharedDropboxError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderArchiveError alloc] initWithOther];
  } else {
    return [[DBTEAMTeamFolderArchiveError alloc] initWithOther];
  }
}

@end

#import "DBASYNCPollResultBase.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderArchiveError.h"
#import "DBTEAMTeamFolderArchiveJobStatus.h"
#import "DBTEAMTeamFolderMetadata.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderArchiveJobStatus

@synthesize complete = _complete;
@synthesize failed = _failed;

#pragma mark - Constructors

- (instancetype)initWithInProgress {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderArchiveJobStatusInProgress;
  }
  return self;
}

- (instancetype)initWithComplete:(DBTEAMTeamFolderMetadata *)complete {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderArchiveJobStatusComplete;
    _complete = complete;
  }
  return self;
}

- (instancetype)initWithFailed:(DBTEAMTeamFolderArchiveError *)failed {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderArchiveJobStatusFailed;
    _failed = failed;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMTeamFolderMetadata *)complete {
  if (![self isComplete]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderArchiveJobStatusComplete, but was %@.", [self tagName]];
  }
  return _complete;
}

- (DBTEAMTeamFolderArchiveError *)failed {
  if (![self isFailed]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderArchiveJobStatusFailed, but was %@.", [self tagName]];
  }
  return _failed;
}

#pragma mark - Tag state methods

- (BOOL)isInProgress {
  return _tag == DBTEAMTeamFolderArchiveJobStatusInProgress;
}

- (BOOL)isComplete {
  return _tag == DBTEAMTeamFolderArchiveJobStatusComplete;
}

- (BOOL)isFailed {
  return _tag == DBTEAMTeamFolderArchiveJobStatusFailed;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderArchiveJobStatusInProgress:
    return @"DBTEAMTeamFolderArchiveJobStatusInProgress";
  case DBTEAMTeamFolderArchiveJobStatusComplete:
    return @"DBTEAMTeamFolderArchiveJobStatusComplete";
  case DBTEAMTeamFolderArchiveJobStatusFailed:
    return @"DBTEAMTeamFolderArchiveJobStatusFailed";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderArchiveJobStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderArchiveJobStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderArchiveJobStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderArchiveJobStatusInProgress:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderArchiveJobStatusComplete:
    result = prime * result + [self.complete hash];
  case DBTEAMTeamFolderArchiveJobStatusFailed:
    result = prime * result + [self.failed hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderArchiveJobStatus:other];
}

- (BOOL)isEqualToTeamFolderArchiveJobStatus:(DBTEAMTeamFolderArchiveJobStatus *)aTeamFolderArchiveJobStatus {
  if (self == aTeamFolderArchiveJobStatus) {
    return YES;
  }
  if (self.tag != aTeamFolderArchiveJobStatus.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderArchiveJobStatusInProgress:
    return [[self tagName] isEqual:[aTeamFolderArchiveJobStatus tagName]];
  case DBTEAMTeamFolderArchiveJobStatusComplete:
    return [self.complete isEqual:aTeamFolderArchiveJobStatus.complete];
  case DBTEAMTeamFolderArchiveJobStatusFailed:
    return [self.failed isEqual:aTeamFolderArchiveJobStatus.failed];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderArchiveJobStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderArchiveJobStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInProgress]) {
    jsonDict[@".tag"] = @"in_progress";
  } else if ([valueObj isComplete]) {
    jsonDict = [[DBTEAMTeamFolderMetadataSerializer serialize:valueObj.complete] mutableCopy];
    jsonDict[@".tag"] = @"complete";
  } else if ([valueObj isFailed]) {
    jsonDict[@"failed"] = [[DBTEAMTeamFolderArchiveErrorSerializer serialize:valueObj.failed] mutableCopy];
    jsonDict[@".tag"] = @"failed";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderArchiveJobStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"in_progress"]) {
    return [[DBTEAMTeamFolderArchiveJobStatus alloc] initWithInProgress];
  } else if ([tag isEqualToString:@"complete"]) {
    DBTEAMTeamFolderMetadata *complete = [DBTEAMTeamFolderMetadataSerializer deserialize:valueDict];
    return [[DBTEAMTeamFolderArchiveJobStatus alloc] initWithComplete:complete];
  } else if ([tag isEqualToString:@"failed"]) {
    DBTEAMTeamFolderArchiveError *failed = [DBTEAMTeamFolderArchiveErrorSerializer deserialize:valueDict[@"failed"]];
    return [[DBTEAMTeamFolderArchiveJobStatus alloc] initWithFailed:failed];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBASYNCLaunchResultBase.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderArchiveLaunch.h"
#import "DBTEAMTeamFolderMetadata.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderArchiveLaunch

@synthesize asyncJobId = _asyncJobId;
@synthesize complete = _complete;

#pragma mark - Constructors

- (instancetype)initWithAsyncJobId:(NSString *)asyncJobId {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderArchiveLaunchAsyncJobId;
    _asyncJobId = asyncJobId;
  }
  return self;
}

- (instancetype)initWithComplete:(DBTEAMTeamFolderMetadata *)complete {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderArchiveLaunchComplete;
    _complete = complete;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)asyncJobId {
  if (![self isAsyncJobId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderArchiveLaunchAsyncJobId, but was %@.", [self tagName]];
  }
  return _asyncJobId;
}

- (DBTEAMTeamFolderMetadata *)complete {
  if (![self isComplete]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderArchiveLaunchComplete, but was %@.", [self tagName]];
  }
  return _complete;
}

#pragma mark - Tag state methods

- (BOOL)isAsyncJobId {
  return _tag == DBTEAMTeamFolderArchiveLaunchAsyncJobId;
}

- (BOOL)isComplete {
  return _tag == DBTEAMTeamFolderArchiveLaunchComplete;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderArchiveLaunchAsyncJobId:
    return @"DBTEAMTeamFolderArchiveLaunchAsyncJobId";
  case DBTEAMTeamFolderArchiveLaunchComplete:
    return @"DBTEAMTeamFolderArchiveLaunchComplete";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderArchiveLaunchSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderArchiveLaunchSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderArchiveLaunchSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderArchiveLaunchAsyncJobId:
    result = prime * result + [self.asyncJobId hash];
  case DBTEAMTeamFolderArchiveLaunchComplete:
    result = prime * result + [self.complete hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderArchiveLaunch:other];
}

- (BOOL)isEqualToTeamFolderArchiveLaunch:(DBTEAMTeamFolderArchiveLaunch *)aTeamFolderArchiveLaunch {
  if (self == aTeamFolderArchiveLaunch) {
    return YES;
  }
  if (self.tag != aTeamFolderArchiveLaunch.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderArchiveLaunchAsyncJobId:
    return [self.asyncJobId isEqual:aTeamFolderArchiveLaunch.asyncJobId];
  case DBTEAMTeamFolderArchiveLaunchComplete:
    return [self.complete isEqual:aTeamFolderArchiveLaunch.complete];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderArchiveLaunchSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderArchiveLaunch *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAsyncJobId]) {
    jsonDict[@"async_job_id"] = valueObj.asyncJobId;
    jsonDict[@".tag"] = @"async_job_id";
  } else if ([valueObj isComplete]) {
    jsonDict = [[DBTEAMTeamFolderMetadataSerializer serialize:valueObj.complete] mutableCopy];
    jsonDict[@".tag"] = @"complete";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderArchiveLaunch *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"async_job_id"]) {
    NSString *asyncJobId = valueDict[@"async_job_id"];
    return [[DBTEAMTeamFolderArchiveLaunch alloc] initWithAsyncJobId:asyncJobId];
  } else if ([tag isEqualToString:@"complete"]) {
    DBTEAMTeamFolderMetadata *complete = [DBTEAMTeamFolderMetadataSerializer deserialize:valueDict];
    return [[DBTEAMTeamFolderArchiveLaunch alloc] initWithComplete:complete];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBFILESSyncSettingArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderCreateArg.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderCreateArg

#pragma mark - Constructors

- (instancetype)initWithName:(NSString *)name syncSetting:(DBFILESSyncSettingArg *)syncSetting {
  [DBStoneValidators nonnullValidator:nil](name);

  self = [super init];
  if (self) {
    _name = name;
    _syncSetting = syncSetting;
  }
  return self;
}

- (instancetype)initWithName:(NSString *)name {
  return [self initWithName:name syncSetting:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderCreateArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderCreateArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderCreateArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.name hash];
  if (self.syncSetting != nil) {
    result = prime * result + [self.syncSetting hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderCreateArg:other];
}

- (BOOL)isEqualToTeamFolderCreateArg:(DBTEAMTeamFolderCreateArg *)aTeamFolderCreateArg {
  if (self == aTeamFolderCreateArg) {
    return YES;
  }
  if (![self.name isEqual:aTeamFolderCreateArg.name]) {
    return NO;
  }
  if (self.syncSetting) {
    if (![self.syncSetting isEqual:aTeamFolderCreateArg.syncSetting]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderCreateArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderCreateArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"name"] = valueObj.name;
  if (valueObj.syncSetting) {
    jsonDict[@"sync_setting"] = [DBFILESSyncSettingArgSerializer serialize:valueObj.syncSetting];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderCreateArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *name = valueDict[@"name"];
  DBFILESSyncSettingArg *syncSetting =
      valueDict[@"sync_setting"] ? [DBFILESSyncSettingArgSerializer deserialize:valueDict[@"sync_setting"]] : nil;

  return [[DBTEAMTeamFolderCreateArg alloc] initWithName:name syncSetting:syncSetting];
}

@end

#import "DBFILESSyncSettingsError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderCreateError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderCreateError

@synthesize syncSettingsError = _syncSettingsError;

#pragma mark - Constructors

- (instancetype)initWithInvalidFolderName {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderCreateErrorInvalidFolderName;
  }
  return self;
}

- (instancetype)initWithFolderNameAlreadyUsed {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderCreateErrorFolderNameAlreadyUsed;
  }
  return self;
}

- (instancetype)initWithFolderNameReserved {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderCreateErrorFolderNameReserved;
  }
  return self;
}

- (instancetype)initWithSyncSettingsError:(DBFILESSyncSettingsError *)syncSettingsError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderCreateErrorSyncSettingsError;
    _syncSettingsError = syncSettingsError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderCreateErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBFILESSyncSettingsError *)syncSettingsError {
  if (![self isSyncSettingsError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMTeamFolderCreateErrorSyncSettingsError, but was %@.", [self tagName]];
  }
  return _syncSettingsError;
}

#pragma mark - Tag state methods

- (BOOL)isInvalidFolderName {
  return _tag == DBTEAMTeamFolderCreateErrorInvalidFolderName;
}

- (BOOL)isFolderNameAlreadyUsed {
  return _tag == DBTEAMTeamFolderCreateErrorFolderNameAlreadyUsed;
}

- (BOOL)isFolderNameReserved {
  return _tag == DBTEAMTeamFolderCreateErrorFolderNameReserved;
}

- (BOOL)isSyncSettingsError {
  return _tag == DBTEAMTeamFolderCreateErrorSyncSettingsError;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderCreateErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderCreateErrorInvalidFolderName:
    return @"DBTEAMTeamFolderCreateErrorInvalidFolderName";
  case DBTEAMTeamFolderCreateErrorFolderNameAlreadyUsed:
    return @"DBTEAMTeamFolderCreateErrorFolderNameAlreadyUsed";
  case DBTEAMTeamFolderCreateErrorFolderNameReserved:
    return @"DBTEAMTeamFolderCreateErrorFolderNameReserved";
  case DBTEAMTeamFolderCreateErrorSyncSettingsError:
    return @"DBTEAMTeamFolderCreateErrorSyncSettingsError";
  case DBTEAMTeamFolderCreateErrorOther:
    return @"DBTEAMTeamFolderCreateErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderCreateErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderCreateErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderCreateErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderCreateErrorInvalidFolderName:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderCreateErrorFolderNameAlreadyUsed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderCreateErrorFolderNameReserved:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderCreateErrorSyncSettingsError:
    result = prime * result + [self.syncSettingsError hash];
  case DBTEAMTeamFolderCreateErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderCreateError:other];
}

- (BOOL)isEqualToTeamFolderCreateError:(DBTEAMTeamFolderCreateError *)aTeamFolderCreateError {
  if (self == aTeamFolderCreateError) {
    return YES;
  }
  if (self.tag != aTeamFolderCreateError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderCreateErrorInvalidFolderName:
    return [[self tagName] isEqual:[aTeamFolderCreateError tagName]];
  case DBTEAMTeamFolderCreateErrorFolderNameAlreadyUsed:
    return [[self tagName] isEqual:[aTeamFolderCreateError tagName]];
  case DBTEAMTeamFolderCreateErrorFolderNameReserved:
    return [[self tagName] isEqual:[aTeamFolderCreateError tagName]];
  case DBTEAMTeamFolderCreateErrorSyncSettingsError:
    return [self.syncSettingsError isEqual:aTeamFolderCreateError.syncSettingsError];
  case DBTEAMTeamFolderCreateErrorOther:
    return [[self tagName] isEqual:[aTeamFolderCreateError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderCreateErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderCreateError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidFolderName]) {
    jsonDict[@".tag"] = @"invalid_folder_name";
  } else if ([valueObj isFolderNameAlreadyUsed]) {
    jsonDict[@".tag"] = @"folder_name_already_used";
  } else if ([valueObj isFolderNameReserved]) {
    jsonDict[@".tag"] = @"folder_name_reserved";
  } else if ([valueObj isSyncSettingsError]) {
    jsonDict[@"sync_settings_error"] =
        [[DBFILESSyncSettingsErrorSerializer serialize:valueObj.syncSettingsError] mutableCopy];
    jsonDict[@".tag"] = @"sync_settings_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderCreateError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_folder_name"]) {
    return [[DBTEAMTeamFolderCreateError alloc] initWithInvalidFolderName];
  } else if ([tag isEqualToString:@"folder_name_already_used"]) {
    return [[DBTEAMTeamFolderCreateError alloc] initWithFolderNameAlreadyUsed];
  } else if ([tag isEqualToString:@"folder_name_reserved"]) {
    return [[DBTEAMTeamFolderCreateError alloc] initWithFolderNameReserved];
  } else if ([tag isEqualToString:@"sync_settings_error"]) {
    DBFILESSyncSettingsError *syncSettingsError =
        [DBFILESSyncSettingsErrorSerializer deserialize:valueDict[@"sync_settings_error"]];
    return [[DBTEAMTeamFolderCreateError alloc] initWithSyncSettingsError:syncSettingsError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderCreateError alloc] initWithOther];
  } else {
    return [[DBTEAMTeamFolderCreateError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderGetInfoItem.h"
#import "DBTEAMTeamFolderMetadata.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderGetInfoItem

@synthesize idNotFound = _idNotFound;
@synthesize teamFolderMetadata = _teamFolderMetadata;

#pragma mark - Constructors

- (instancetype)initWithIdNotFound:(NSString *)idNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderGetInfoItemIdNotFound;
    _idNotFound = idNotFound;
  }
  return self;
}

- (instancetype)initWithTeamFolderMetadata:(DBTEAMTeamFolderMetadata *)teamFolderMetadata {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderGetInfoItemTeamFolderMetadata;
    _teamFolderMetadata = teamFolderMetadata;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)idNotFound {
  if (![self isIdNotFound]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderGetInfoItemIdNotFound, but was %@.", [self tagName]];
  }
  return _idNotFound;
}

- (DBTEAMTeamFolderMetadata *)teamFolderMetadata {
  if (![self isTeamFolderMetadata]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMTeamFolderGetInfoItemTeamFolderMetadata, but was %@.", [self tagName]];
  }
  return _teamFolderMetadata;
}

#pragma mark - Tag state methods

- (BOOL)isIdNotFound {
  return _tag == DBTEAMTeamFolderGetInfoItemIdNotFound;
}

- (BOOL)isTeamFolderMetadata {
  return _tag == DBTEAMTeamFolderGetInfoItemTeamFolderMetadata;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderGetInfoItemIdNotFound:
    return @"DBTEAMTeamFolderGetInfoItemIdNotFound";
  case DBTEAMTeamFolderGetInfoItemTeamFolderMetadata:
    return @"DBTEAMTeamFolderGetInfoItemTeamFolderMetadata";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderGetInfoItemSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderGetInfoItemSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderGetInfoItemSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderGetInfoItemIdNotFound:
    result = prime * result + [self.idNotFound hash];
  case DBTEAMTeamFolderGetInfoItemTeamFolderMetadata:
    result = prime * result + [self.teamFolderMetadata hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderGetInfoItem:other];
}

- (BOOL)isEqualToTeamFolderGetInfoItem:(DBTEAMTeamFolderGetInfoItem *)aTeamFolderGetInfoItem {
  if (self == aTeamFolderGetInfoItem) {
    return YES;
  }
  if (self.tag != aTeamFolderGetInfoItem.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderGetInfoItemIdNotFound:
    return [self.idNotFound isEqual:aTeamFolderGetInfoItem.idNotFound];
  case DBTEAMTeamFolderGetInfoItemTeamFolderMetadata:
    return [self.teamFolderMetadata isEqual:aTeamFolderGetInfoItem.teamFolderMetadata];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderGetInfoItemSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderGetInfoItem *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isIdNotFound]) {
    jsonDict[@"id_not_found"] = valueObj.idNotFound;
    jsonDict[@".tag"] = @"id_not_found";
  } else if ([valueObj isTeamFolderMetadata]) {
    jsonDict = [[DBTEAMTeamFolderMetadataSerializer serialize:valueObj.teamFolderMetadata] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_metadata";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderGetInfoItem *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"id_not_found"]) {
    NSString *idNotFound = valueDict[@"id_not_found"];
    return [[DBTEAMTeamFolderGetInfoItem alloc] initWithIdNotFound:idNotFound];
  } else if ([tag isEqualToString:@"team_folder_metadata"]) {
    DBTEAMTeamFolderMetadata *teamFolderMetadata = [DBTEAMTeamFolderMetadataSerializer deserialize:valueDict];
    return [[DBTEAMTeamFolderGetInfoItem alloc] initWithTeamFolderMetadata:teamFolderMetadata];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderIdListArg.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderIdListArg

#pragma mark - Constructors

- (instancetype)initWithTeamFolderIds:(NSArray<NSString *> *)teamFolderIds {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators
                        arrayValidator:@(1)
                              maxItems:nil
                         itemValidator:[DBStoneValidators
                                           nonnullValidator:[DBStoneValidators stringValidator:nil
                                                                                     maxLength:nil
                                                                                       pattern:@"[-_0-9a-zA-Z:]+"]]]](
      teamFolderIds);

  self = [super init];
  if (self) {
    _teamFolderIds = teamFolderIds;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderIdListArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderIdListArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderIdListArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamFolderIds hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderIdListArg:other];
}

- (BOOL)isEqualToTeamFolderIdListArg:(DBTEAMTeamFolderIdListArg *)aTeamFolderIdListArg {
  if (self == aTeamFolderIdListArg) {
    return YES;
  }
  if (![self.teamFolderIds isEqual:aTeamFolderIdListArg.teamFolderIds]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderIdListArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderIdListArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_folder_ids"] = [DBArraySerializer serialize:valueObj.teamFolderIds
                                                    withBlock:^id(id elem0) {
                                                      return elem0;
                                                    }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderIdListArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<NSString *> *teamFolderIds = [DBArraySerializer deserialize:valueDict[@"team_folder_ids"]
                                                            withBlock:^id(id elem0) {
                                                              return elem0;
                                                            }];

  return [[DBTEAMTeamFolderIdListArg alloc] initWithTeamFolderIds:teamFolderIds];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderInvalidStatusError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderInvalidStatusError

#pragma mark - Constructors

- (instancetype)initWithActive {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderInvalidStatusErrorActive;
  }
  return self;
}

- (instancetype)initWithArchived {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderInvalidStatusErrorArchived;
  }
  return self;
}

- (instancetype)initWithArchiveInProgress {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderInvalidStatusErrorArchiveInProgress;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderInvalidStatusErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isActive {
  return _tag == DBTEAMTeamFolderInvalidStatusErrorActive;
}

- (BOOL)isArchived {
  return _tag == DBTEAMTeamFolderInvalidStatusErrorArchived;
}

- (BOOL)isArchiveInProgress {
  return _tag == DBTEAMTeamFolderInvalidStatusErrorArchiveInProgress;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderInvalidStatusErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderInvalidStatusErrorActive:
    return @"DBTEAMTeamFolderInvalidStatusErrorActive";
  case DBTEAMTeamFolderInvalidStatusErrorArchived:
    return @"DBTEAMTeamFolderInvalidStatusErrorArchived";
  case DBTEAMTeamFolderInvalidStatusErrorArchiveInProgress:
    return @"DBTEAMTeamFolderInvalidStatusErrorArchiveInProgress";
  case DBTEAMTeamFolderInvalidStatusErrorOther:
    return @"DBTEAMTeamFolderInvalidStatusErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderInvalidStatusErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderInvalidStatusErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderInvalidStatusErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderInvalidStatusErrorActive:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderInvalidStatusErrorArchived:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderInvalidStatusErrorArchiveInProgress:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderInvalidStatusErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderInvalidStatusError:other];
}

- (BOOL)isEqualToTeamFolderInvalidStatusError:(DBTEAMTeamFolderInvalidStatusError *)aTeamFolderInvalidStatusError {
  if (self == aTeamFolderInvalidStatusError) {
    return YES;
  }
  if (self.tag != aTeamFolderInvalidStatusError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderInvalidStatusErrorActive:
    return [[self tagName] isEqual:[aTeamFolderInvalidStatusError tagName]];
  case DBTEAMTeamFolderInvalidStatusErrorArchived:
    return [[self tagName] isEqual:[aTeamFolderInvalidStatusError tagName]];
  case DBTEAMTeamFolderInvalidStatusErrorArchiveInProgress:
    return [[self tagName] isEqual:[aTeamFolderInvalidStatusError tagName]];
  case DBTEAMTeamFolderInvalidStatusErrorOther:
    return [[self tagName] isEqual:[aTeamFolderInvalidStatusError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderInvalidStatusErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderInvalidStatusError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isActive]) {
    jsonDict[@".tag"] = @"active";
  } else if ([valueObj isArchived]) {
    jsonDict[@".tag"] = @"archived";
  } else if ([valueObj isArchiveInProgress]) {
    jsonDict[@".tag"] = @"archive_in_progress";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderInvalidStatusError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"active"]) {
    return [[DBTEAMTeamFolderInvalidStatusError alloc] initWithActive];
  } else if ([tag isEqualToString:@"archived"]) {
    return [[DBTEAMTeamFolderInvalidStatusError alloc] initWithArchived];
  } else if ([tag isEqualToString:@"archive_in_progress"]) {
    return [[DBTEAMTeamFolderInvalidStatusError alloc] initWithArchiveInProgress];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderInvalidStatusError alloc] initWithOther];
  } else {
    return [[DBTEAMTeamFolderInvalidStatusError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderListArg.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderListArg

#pragma mark - Constructors

- (instancetype)initWithLimit:(NSNumber *)limit {

  self = [super init];
  if (self) {
    _limit = limit ?: @(1000);
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithLimit:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderListArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderListArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderListArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.limit hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderListArg:other];
}

- (BOOL)isEqualToTeamFolderListArg:(DBTEAMTeamFolderListArg *)aTeamFolderListArg {
  if (self == aTeamFolderListArg) {
    return YES;
  }
  if (![self.limit isEqual:aTeamFolderListArg.limit]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderListArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderListArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"limit"] = valueObj.limit;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderListArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);

  return [[DBTEAMTeamFolderListArg alloc] initWithLimit:limit];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderListContinueArg.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderListContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {
  [DBStoneValidators nonnullValidator:nil](cursor);

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderListContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderListContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderListContinueArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.cursor hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderListContinueArg:other];
}

- (BOOL)isEqualToTeamFolderListContinueArg:(DBTEAMTeamFolderListContinueArg *)aTeamFolderListContinueArg {
  if (self == aTeamFolderListContinueArg) {
    return YES;
  }
  if (![self.cursor isEqual:aTeamFolderListContinueArg.cursor]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderListContinueArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderListContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderListContinueArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBTEAMTeamFolderListContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderListContinueError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderListContinueError

#pragma mark - Constructors

- (instancetype)initWithInvalidCursor {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderListContinueErrorInvalidCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderListContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidCursor {
  return _tag == DBTEAMTeamFolderListContinueErrorInvalidCursor;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderListContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderListContinueErrorInvalidCursor:
    return @"DBTEAMTeamFolderListContinueErrorInvalidCursor";
  case DBTEAMTeamFolderListContinueErrorOther:
    return @"DBTEAMTeamFolderListContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderListContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderListContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderListContinueErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderListContinueErrorInvalidCursor:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderListContinueErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderListContinueError:other];
}

- (BOOL)isEqualToTeamFolderListContinueError:(DBTEAMTeamFolderListContinueError *)aTeamFolderListContinueError {
  if (self == aTeamFolderListContinueError) {
    return YES;
  }
  if (self.tag != aTeamFolderListContinueError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderListContinueErrorInvalidCursor:
    return [[self tagName] isEqual:[aTeamFolderListContinueError tagName]];
  case DBTEAMTeamFolderListContinueErrorOther:
    return [[self tagName] isEqual:[aTeamFolderListContinueError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderListContinueErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderListContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidCursor]) {
    jsonDict[@".tag"] = @"invalid_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderListContinueError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_cursor"]) {
    return [[DBTEAMTeamFolderListContinueError alloc] initWithInvalidCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderListContinueError alloc] initWithOther];
  } else {
    return [[DBTEAMTeamFolderListContinueError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderAccessError.h"
#import "DBTEAMTeamFolderListError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderListError

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBTEAMTeamFolderAccessError *)accessError {
  [DBStoneValidators nonnullValidator:nil](accessError);

  self = [super init];
  if (self) {
    _accessError = accessError;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderListErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderListErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderListErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.accessError hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderListError:other];
}

- (BOOL)isEqualToTeamFolderListError:(DBTEAMTeamFolderListError *)aTeamFolderListError {
  if (self == aTeamFolderListError) {
    return YES;
  }
  if (![self.accessError isEqual:aTeamFolderListError.accessError]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderListErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderListError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_error"] = [DBTEAMTeamFolderAccessErrorSerializer serialize:valueObj.accessError];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderListError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMTeamFolderAccessError *accessError =
      [DBTEAMTeamFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];

  return [[DBTEAMTeamFolderListError alloc] initWithAccessError:accessError];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderListResult.h"
#import "DBTEAMTeamFolderMetadata.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderListResult

#pragma mark - Constructors

- (instancetype)initWithTeamFolders:(NSArray<DBTEAMTeamFolderMetadata *> *)teamFolders
                             cursor:(NSString *)cursor
                            hasMore:(NSNumber *)hasMore {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](teamFolders);
  [DBStoneValidators nonnullValidator:nil](cursor);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _teamFolders = teamFolders;
    _cursor = cursor;
    _hasMore = hasMore;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderListResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderListResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderListResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamFolders hash];
  result = prime * result + [self.cursor hash];
  result = prime * result + [self.hasMore hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderListResult:other];
}

- (BOOL)isEqualToTeamFolderListResult:(DBTEAMTeamFolderListResult *)aTeamFolderListResult {
  if (self == aTeamFolderListResult) {
    return YES;
  }
  if (![self.teamFolders isEqual:aTeamFolderListResult.teamFolders]) {
    return NO;
  }
  if (![self.cursor isEqual:aTeamFolderListResult.cursor]) {
    return NO;
  }
  if (![self.hasMore isEqual:aTeamFolderListResult.hasMore]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderListResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderListResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_folders"] = [DBArraySerializer serialize:valueObj.teamFolders
                                                 withBlock:^id(id elem0) {
                                                   return [DBTEAMTeamFolderMetadataSerializer serialize:elem0];
                                                 }];
  jsonDict[@"cursor"] = valueObj.cursor;
  jsonDict[@"has_more"] = valueObj.hasMore;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderListResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMTeamFolderMetadata *> *teamFolders =
      [DBArraySerializer deserialize:valueDict[@"team_folders"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMTeamFolderMetadataSerializer deserialize:elem0];
                           }];
  NSString *cursor = valueDict[@"cursor"];
  NSNumber *hasMore = valueDict[@"has_more"];

  return [[DBTEAMTeamFolderListResult alloc] initWithTeamFolders:teamFolders cursor:cursor hasMore:hasMore];
}

@end

#import "DBFILESContentSyncSetting.h"
#import "DBFILESSyncSetting.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderMetadata.h"
#import "DBTEAMTeamFolderStatus.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderMetadata

#pragma mark - Constructors

- (instancetype)initWithTeamFolderId:(NSString *)teamFolderId
                                name:(NSString *)name
                              status:(DBTEAMTeamFolderStatus *)status
                 isTeamSharedDropbox:(NSNumber *)isTeamSharedDropbox
                         syncSetting:(DBFILESSyncSetting *)syncSetting
                 contentSyncSettings:(NSArray<DBFILESContentSyncSetting *> *)contentSyncSettings {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](teamFolderId);
  [DBStoneValidators nonnullValidator:nil](name);
  [DBStoneValidators nonnullValidator:nil](status);
  [DBStoneValidators nonnullValidator:nil](isTeamSharedDropbox);
  [DBStoneValidators nonnullValidator:nil](syncSetting);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](contentSyncSettings);

  self = [super init];
  if (self) {
    _teamFolderId = teamFolderId;
    _name = name;
    _status = status;
    _isTeamSharedDropbox = isTeamSharedDropbox;
    _syncSetting = syncSetting;
    _contentSyncSettings = contentSyncSettings;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderMetadataSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderMetadataSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderMetadataSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamFolderId hash];
  result = prime * result + [self.name hash];
  result = prime * result + [self.status hash];
  result = prime * result + [self.isTeamSharedDropbox hash];
  result = prime * result + [self.syncSetting hash];
  result = prime * result + [self.contentSyncSettings hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderMetadata:other];
}

- (BOOL)isEqualToTeamFolderMetadata:(DBTEAMTeamFolderMetadata *)aTeamFolderMetadata {
  if (self == aTeamFolderMetadata) {
    return YES;
  }
  if (![self.teamFolderId isEqual:aTeamFolderMetadata.teamFolderId]) {
    return NO;
  }
  if (![self.name isEqual:aTeamFolderMetadata.name]) {
    return NO;
  }
  if (![self.status isEqual:aTeamFolderMetadata.status]) {
    return NO;
  }
  if (![self.isTeamSharedDropbox isEqual:aTeamFolderMetadata.isTeamSharedDropbox]) {
    return NO;
  }
  if (![self.syncSetting isEqual:aTeamFolderMetadata.syncSetting]) {
    return NO;
  }
  if (![self.contentSyncSettings isEqual:aTeamFolderMetadata.contentSyncSettings]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderMetadataSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderMetadata *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_folder_id"] = valueObj.teamFolderId;
  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"status"] = [DBTEAMTeamFolderStatusSerializer serialize:valueObj.status];
  jsonDict[@"is_team_shared_dropbox"] = valueObj.isTeamSharedDropbox;
  jsonDict[@"sync_setting"] = [DBFILESSyncSettingSerializer serialize:valueObj.syncSetting];
  jsonDict[@"content_sync_settings"] =
      [DBArraySerializer serialize:valueObj.contentSyncSettings
                         withBlock:^id(id elem0) {
                           return [DBFILESContentSyncSettingSerializer serialize:elem0];
                         }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderMetadata *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamFolderId = valueDict[@"team_folder_id"];
  NSString *name = valueDict[@"name"];
  DBTEAMTeamFolderStatus *status = [DBTEAMTeamFolderStatusSerializer deserialize:valueDict[@"status"]];
  NSNumber *isTeamSharedDropbox = valueDict[@"is_team_shared_dropbox"];
  DBFILESSyncSetting *syncSetting = [DBFILESSyncSettingSerializer deserialize:valueDict[@"sync_setting"]];
  NSArray<DBFILESContentSyncSetting *> *contentSyncSettings =
      [DBArraySerializer deserialize:valueDict[@"content_sync_settings"]
                           withBlock:^id(id elem0) {
                             return [DBFILESContentSyncSettingSerializer deserialize:elem0];
                           }];

  return [[DBTEAMTeamFolderMetadata alloc] initWithTeamFolderId:teamFolderId
                                                           name:name
                                                         status:status
                                            isTeamSharedDropbox:isTeamSharedDropbox
                                                    syncSetting:syncSetting
                                            contentSyncSettings:contentSyncSettings];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseTeamFolderError.h"
#import "DBTEAMTeamFolderAccessError.h"
#import "DBTEAMTeamFolderInvalidStatusError.h"
#import "DBTEAMTeamFolderPermanentlyDeleteError.h"
#import "DBTEAMTeamFolderTeamSharedDropboxError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderPermanentlyDeleteError

@synthesize accessError = _accessError;
@synthesize statusError = _statusError;
@synthesize teamSharedDropboxError = _teamSharedDropboxError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBTEAMTeamFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderPermanentlyDeleteErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithStatusError:(DBTEAMTeamFolderInvalidStatusError *)statusError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderPermanentlyDeleteErrorStatusError;
    _statusError = statusError;
  }
  return self;
}

- (instancetype)initWithTeamSharedDropboxError:(DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderPermanentlyDeleteErrorTeamSharedDropboxError;
    _teamSharedDropboxError = teamSharedDropboxError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderPermanentlyDeleteErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMTeamFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMTeamFolderPermanentlyDeleteErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBTEAMTeamFolderInvalidStatusError *)statusError {
  if (![self isStatusError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMTeamFolderPermanentlyDeleteErrorStatusError, but was %@.", [self tagName]];
  }
  return _statusError;
}

- (DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  if (![self isTeamSharedDropboxError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMTeamFolderPermanentlyDeleteErrorTeamSharedDropboxError, but was %@.",
               [self tagName]];
  }
  return _teamSharedDropboxError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBTEAMTeamFolderPermanentlyDeleteErrorAccessError;
}

- (BOOL)isStatusError {
  return _tag == DBTEAMTeamFolderPermanentlyDeleteErrorStatusError;
}

- (BOOL)isTeamSharedDropboxError {
  return _tag == DBTEAMTeamFolderPermanentlyDeleteErrorTeamSharedDropboxError;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderPermanentlyDeleteErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderPermanentlyDeleteErrorAccessError:
    return @"DBTEAMTeamFolderPermanentlyDeleteErrorAccessError";
  case DBTEAMTeamFolderPermanentlyDeleteErrorStatusError:
    return @"DBTEAMTeamFolderPermanentlyDeleteErrorStatusError";
  case DBTEAMTeamFolderPermanentlyDeleteErrorTeamSharedDropboxError:
    return @"DBTEAMTeamFolderPermanentlyDeleteErrorTeamSharedDropboxError";
  case DBTEAMTeamFolderPermanentlyDeleteErrorOther:
    return @"DBTEAMTeamFolderPermanentlyDeleteErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderPermanentlyDeleteErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderPermanentlyDeleteErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderPermanentlyDeleteErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderPermanentlyDeleteErrorAccessError:
    result = prime * result + [self.accessError hash];
  case DBTEAMTeamFolderPermanentlyDeleteErrorStatusError:
    result = prime * result + [self.statusError hash];
  case DBTEAMTeamFolderPermanentlyDeleteErrorTeamSharedDropboxError:
    result = prime * result + [self.teamSharedDropboxError hash];
  case DBTEAMTeamFolderPermanentlyDeleteErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderPermanentlyDeleteError:other];
}

- (BOOL)isEqualToTeamFolderPermanentlyDeleteError:
    (DBTEAMTeamFolderPermanentlyDeleteError *)aTeamFolderPermanentlyDeleteError {
  if (self == aTeamFolderPermanentlyDeleteError) {
    return YES;
  }
  if (self.tag != aTeamFolderPermanentlyDeleteError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderPermanentlyDeleteErrorAccessError:
    return [self.accessError isEqual:aTeamFolderPermanentlyDeleteError.accessError];
  case DBTEAMTeamFolderPermanentlyDeleteErrorStatusError:
    return [self.statusError isEqual:aTeamFolderPermanentlyDeleteError.statusError];
  case DBTEAMTeamFolderPermanentlyDeleteErrorTeamSharedDropboxError:
    return [self.teamSharedDropboxError isEqual:aTeamFolderPermanentlyDeleteError.teamSharedDropboxError];
  case DBTEAMTeamFolderPermanentlyDeleteErrorOther:
    return [[self tagName] isEqual:[aTeamFolderPermanentlyDeleteError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderPermanentlyDeleteErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderPermanentlyDeleteError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] = [[DBTEAMTeamFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isStatusError]) {
    jsonDict[@"status_error"] =
        [[DBTEAMTeamFolderInvalidStatusErrorSerializer serialize:valueObj.statusError] mutableCopy];
    jsonDict[@".tag"] = @"status_error";
  } else if ([valueObj isTeamSharedDropboxError]) {
    jsonDict[@"team_shared_dropbox_error"] =
        [[DBTEAMTeamFolderTeamSharedDropboxErrorSerializer serialize:valueObj.teamSharedDropboxError] mutableCopy];
    jsonDict[@".tag"] = @"team_shared_dropbox_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderPermanentlyDeleteError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBTEAMTeamFolderAccessError *accessError =
        [DBTEAMTeamFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBTEAMTeamFolderPermanentlyDeleteError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"status_error"]) {
    DBTEAMTeamFolderInvalidStatusError *statusError =
        [DBTEAMTeamFolderInvalidStatusErrorSerializer deserialize:valueDict[@"status_error"]];
    return [[DBTEAMTeamFolderPermanentlyDeleteError alloc] initWithStatusError:statusError];
  } else if ([tag isEqualToString:@"team_shared_dropbox_error"]) {
    DBTEAMTeamFolderTeamSharedDropboxError *teamSharedDropboxError =
        [DBTEAMTeamFolderTeamSharedDropboxErrorSerializer deserialize:valueDict[@"team_shared_dropbox_error"]];
    return [[DBTEAMTeamFolderPermanentlyDeleteError alloc] initWithTeamSharedDropboxError:teamSharedDropboxError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderPermanentlyDeleteError alloc] initWithOther];
  } else {
    return [[DBTEAMTeamFolderPermanentlyDeleteError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderIdArg.h"
#import "DBTEAMTeamFolderRenameArg.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderRenameArg

#pragma mark - Constructors

- (instancetype)initWithTeamFolderId:(NSString *)teamFolderId name:(NSString *)name {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](teamFolderId);
  [DBStoneValidators nonnullValidator:nil](name);

  self = [super initWithTeamFolderId:teamFolderId];
  if (self) {
    _name = name;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderRenameArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderRenameArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderRenameArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamFolderId hash];
  result = prime * result + [self.name hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderRenameArg:other];
}

- (BOOL)isEqualToTeamFolderRenameArg:(DBTEAMTeamFolderRenameArg *)aTeamFolderRenameArg {
  if (self == aTeamFolderRenameArg) {
    return YES;
  }
  if (![self.teamFolderId isEqual:aTeamFolderRenameArg.teamFolderId]) {
    return NO;
  }
  if (![self.name isEqual:aTeamFolderRenameArg.name]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderRenameArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderRenameArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_folder_id"] = valueObj.teamFolderId;
  jsonDict[@"name"] = valueObj.name;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderRenameArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamFolderId = valueDict[@"team_folder_id"];
  NSString *name = valueDict[@"name"];

  return [[DBTEAMTeamFolderRenameArg alloc] initWithTeamFolderId:teamFolderId name:name];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseTeamFolderError.h"
#import "DBTEAMTeamFolderAccessError.h"
#import "DBTEAMTeamFolderInvalidStatusError.h"
#import "DBTEAMTeamFolderRenameError.h"
#import "DBTEAMTeamFolderTeamSharedDropboxError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderRenameError

@synthesize accessError = _accessError;
@synthesize statusError = _statusError;
@synthesize teamSharedDropboxError = _teamSharedDropboxError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBTEAMTeamFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderRenameErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithStatusError:(DBTEAMTeamFolderInvalidStatusError *)statusError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderRenameErrorStatusError;
    _statusError = statusError;
  }
  return self;
}

- (instancetype)initWithTeamSharedDropboxError:(DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderRenameErrorTeamSharedDropboxError;
    _teamSharedDropboxError = teamSharedDropboxError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderRenameErrorOther;
  }
  return self;
}

- (instancetype)initWithInvalidFolderName {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderRenameErrorInvalidFolderName;
  }
  return self;
}

- (instancetype)initWithFolderNameAlreadyUsed {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderRenameErrorFolderNameAlreadyUsed;
  }
  return self;
}

- (instancetype)initWithFolderNameReserved {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderRenameErrorFolderNameReserved;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMTeamFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderRenameErrorAccessError, but was %@.", [self tagName]];
  }
  return _accessError;
}

- (DBTEAMTeamFolderInvalidStatusError *)statusError {
  if (![self isStatusError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderRenameErrorStatusError, but was %@.", [self tagName]];
  }
  return _statusError;
}

- (DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  if (![self isTeamSharedDropboxError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMTeamFolderRenameErrorTeamSharedDropboxError, but was %@.", [self tagName]];
  }
  return _teamSharedDropboxError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBTEAMTeamFolderRenameErrorAccessError;
}

- (BOOL)isStatusError {
  return _tag == DBTEAMTeamFolderRenameErrorStatusError;
}

- (BOOL)isTeamSharedDropboxError {
  return _tag == DBTEAMTeamFolderRenameErrorTeamSharedDropboxError;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderRenameErrorOther;
}

- (BOOL)isInvalidFolderName {
  return _tag == DBTEAMTeamFolderRenameErrorInvalidFolderName;
}

- (BOOL)isFolderNameAlreadyUsed {
  return _tag == DBTEAMTeamFolderRenameErrorFolderNameAlreadyUsed;
}

- (BOOL)isFolderNameReserved {
  return _tag == DBTEAMTeamFolderRenameErrorFolderNameReserved;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderRenameErrorAccessError:
    return @"DBTEAMTeamFolderRenameErrorAccessError";
  case DBTEAMTeamFolderRenameErrorStatusError:
    return @"DBTEAMTeamFolderRenameErrorStatusError";
  case DBTEAMTeamFolderRenameErrorTeamSharedDropboxError:
    return @"DBTEAMTeamFolderRenameErrorTeamSharedDropboxError";
  case DBTEAMTeamFolderRenameErrorOther:
    return @"DBTEAMTeamFolderRenameErrorOther";
  case DBTEAMTeamFolderRenameErrorInvalidFolderName:
    return @"DBTEAMTeamFolderRenameErrorInvalidFolderName";
  case DBTEAMTeamFolderRenameErrorFolderNameAlreadyUsed:
    return @"DBTEAMTeamFolderRenameErrorFolderNameAlreadyUsed";
  case DBTEAMTeamFolderRenameErrorFolderNameReserved:
    return @"DBTEAMTeamFolderRenameErrorFolderNameReserved";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderRenameErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderRenameErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderRenameErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderRenameErrorAccessError:
    result = prime * result + [self.accessError hash];
  case DBTEAMTeamFolderRenameErrorStatusError:
    result = prime * result + [self.statusError hash];
  case DBTEAMTeamFolderRenameErrorTeamSharedDropboxError:
    result = prime * result + [self.teamSharedDropboxError hash];
  case DBTEAMTeamFolderRenameErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderRenameErrorInvalidFolderName:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderRenameErrorFolderNameAlreadyUsed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderRenameErrorFolderNameReserved:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderRenameError:other];
}

- (BOOL)isEqualToTeamFolderRenameError:(DBTEAMTeamFolderRenameError *)aTeamFolderRenameError {
  if (self == aTeamFolderRenameError) {
    return YES;
  }
  if (self.tag != aTeamFolderRenameError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderRenameErrorAccessError:
    return [self.accessError isEqual:aTeamFolderRenameError.accessError];
  case DBTEAMTeamFolderRenameErrorStatusError:
    return [self.statusError isEqual:aTeamFolderRenameError.statusError];
  case DBTEAMTeamFolderRenameErrorTeamSharedDropboxError:
    return [self.teamSharedDropboxError isEqual:aTeamFolderRenameError.teamSharedDropboxError];
  case DBTEAMTeamFolderRenameErrorOther:
    return [[self tagName] isEqual:[aTeamFolderRenameError tagName]];
  case DBTEAMTeamFolderRenameErrorInvalidFolderName:
    return [[self tagName] isEqual:[aTeamFolderRenameError tagName]];
  case DBTEAMTeamFolderRenameErrorFolderNameAlreadyUsed:
    return [[self tagName] isEqual:[aTeamFolderRenameError tagName]];
  case DBTEAMTeamFolderRenameErrorFolderNameReserved:
    return [[self tagName] isEqual:[aTeamFolderRenameError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderRenameErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderRenameError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] = [[DBTEAMTeamFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isStatusError]) {
    jsonDict[@"status_error"] =
        [[DBTEAMTeamFolderInvalidStatusErrorSerializer serialize:valueObj.statusError] mutableCopy];
    jsonDict[@".tag"] = @"status_error";
  } else if ([valueObj isTeamSharedDropboxError]) {
    jsonDict[@"team_shared_dropbox_error"] =
        [[DBTEAMTeamFolderTeamSharedDropboxErrorSerializer serialize:valueObj.teamSharedDropboxError] mutableCopy];
    jsonDict[@".tag"] = @"team_shared_dropbox_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isInvalidFolderName]) {
    jsonDict[@".tag"] = @"invalid_folder_name";
  } else if ([valueObj isFolderNameAlreadyUsed]) {
    jsonDict[@".tag"] = @"folder_name_already_used";
  } else if ([valueObj isFolderNameReserved]) {
    jsonDict[@".tag"] = @"folder_name_reserved";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderRenameError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBTEAMTeamFolderAccessError *accessError =
        [DBTEAMTeamFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBTEAMTeamFolderRenameError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"status_error"]) {
    DBTEAMTeamFolderInvalidStatusError *statusError =
        [DBTEAMTeamFolderInvalidStatusErrorSerializer deserialize:valueDict[@"status_error"]];
    return [[DBTEAMTeamFolderRenameError alloc] initWithStatusError:statusError];
  } else if ([tag isEqualToString:@"team_shared_dropbox_error"]) {
    DBTEAMTeamFolderTeamSharedDropboxError *teamSharedDropboxError =
        [DBTEAMTeamFolderTeamSharedDropboxErrorSerializer deserialize:valueDict[@"team_shared_dropbox_error"]];
    return [[DBTEAMTeamFolderRenameError alloc] initWithTeamSharedDropboxError:teamSharedDropboxError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderRenameError alloc] initWithOther];
  } else if ([tag isEqualToString:@"invalid_folder_name"]) {
    return [[DBTEAMTeamFolderRenameError alloc] initWithInvalidFolderName];
  } else if ([tag isEqualToString:@"folder_name_already_used"]) {
    return [[DBTEAMTeamFolderRenameError alloc] initWithFolderNameAlreadyUsed];
  } else if ([tag isEqualToString:@"folder_name_reserved"]) {
    return [[DBTEAMTeamFolderRenameError alloc] initWithFolderNameReserved];
  } else {
    return [[DBTEAMTeamFolderRenameError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderStatus.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderStatus

#pragma mark - Constructors

- (instancetype)initWithActive {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderStatusActive;
  }
  return self;
}

- (instancetype)initWithArchived {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderStatusArchived;
  }
  return self;
}

- (instancetype)initWithArchiveInProgress {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderStatusArchiveInProgress;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderStatusOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isActive {
  return _tag == DBTEAMTeamFolderStatusActive;
}

- (BOOL)isArchived {
  return _tag == DBTEAMTeamFolderStatusArchived;
}

- (BOOL)isArchiveInProgress {
  return _tag == DBTEAMTeamFolderStatusArchiveInProgress;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderStatusOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderStatusActive:
    return @"DBTEAMTeamFolderStatusActive";
  case DBTEAMTeamFolderStatusArchived:
    return @"DBTEAMTeamFolderStatusArchived";
  case DBTEAMTeamFolderStatusArchiveInProgress:
    return @"DBTEAMTeamFolderStatusArchiveInProgress";
  case DBTEAMTeamFolderStatusOther:
    return @"DBTEAMTeamFolderStatusOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderStatusActive:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderStatusArchived:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderStatusArchiveInProgress:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderStatusOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderStatus:other];
}

- (BOOL)isEqualToTeamFolderStatus:(DBTEAMTeamFolderStatus *)aTeamFolderStatus {
  if (self == aTeamFolderStatus) {
    return YES;
  }
  if (self.tag != aTeamFolderStatus.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderStatusActive:
    return [[self tagName] isEqual:[aTeamFolderStatus tagName]];
  case DBTEAMTeamFolderStatusArchived:
    return [[self tagName] isEqual:[aTeamFolderStatus tagName]];
  case DBTEAMTeamFolderStatusArchiveInProgress:
    return [[self tagName] isEqual:[aTeamFolderStatus tagName]];
  case DBTEAMTeamFolderStatusOther:
    return [[self tagName] isEqual:[aTeamFolderStatus tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isActive]) {
    jsonDict[@".tag"] = @"active";
  } else if ([valueObj isArchived]) {
    jsonDict[@".tag"] = @"archived";
  } else if ([valueObj isArchiveInProgress]) {
    jsonDict[@".tag"] = @"archive_in_progress";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"active"]) {
    return [[DBTEAMTeamFolderStatus alloc] initWithActive];
  } else if ([tag isEqualToString:@"archived"]) {
    return [[DBTEAMTeamFolderStatus alloc] initWithArchived];
  } else if ([tag isEqualToString:@"archive_in_progress"]) {
    return [[DBTEAMTeamFolderStatus alloc] initWithArchiveInProgress];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderStatus alloc] initWithOther];
  } else {
    return [[DBTEAMTeamFolderStatus alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderTeamSharedDropboxError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderTeamSharedDropboxError

#pragma mark - Constructors

- (instancetype)initWithDisallowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderTeamSharedDropboxErrorDisallowed;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderTeamSharedDropboxErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisallowed {
  return _tag == DBTEAMTeamFolderTeamSharedDropboxErrorDisallowed;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderTeamSharedDropboxErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderTeamSharedDropboxErrorDisallowed:
    return @"DBTEAMTeamFolderTeamSharedDropboxErrorDisallowed";
  case DBTEAMTeamFolderTeamSharedDropboxErrorOther:
    return @"DBTEAMTeamFolderTeamSharedDropboxErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderTeamSharedDropboxErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderTeamSharedDropboxErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderTeamSharedDropboxErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderTeamSharedDropboxErrorDisallowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderTeamSharedDropboxErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderTeamSharedDropboxError:other];
}

- (BOOL)isEqualToTeamFolderTeamSharedDropboxError:
    (DBTEAMTeamFolderTeamSharedDropboxError *)aTeamFolderTeamSharedDropboxError {
  if (self == aTeamFolderTeamSharedDropboxError) {
    return YES;
  }
  if (self.tag != aTeamFolderTeamSharedDropboxError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderTeamSharedDropboxErrorDisallowed:
    return [[self tagName] isEqual:[aTeamFolderTeamSharedDropboxError tagName]];
  case DBTEAMTeamFolderTeamSharedDropboxErrorOther:
    return [[self tagName] isEqual:[aTeamFolderTeamSharedDropboxError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderTeamSharedDropboxErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderTeamSharedDropboxError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisallowed]) {
    jsonDict[@".tag"] = @"disallowed";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderTeamSharedDropboxError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disallowed"]) {
    return [[DBTEAMTeamFolderTeamSharedDropboxError alloc] initWithDisallowed];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderTeamSharedDropboxError alloc] initWithOther];
  } else {
    return [[DBTEAMTeamFolderTeamSharedDropboxError alloc] initWithOther];
  }
}

@end

#import "DBFILESContentSyncSettingArg.h"
#import "DBFILESSyncSettingArg.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamFolderIdArg.h"
#import "DBTEAMTeamFolderUpdateSyncSettingsArg.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderUpdateSyncSettingsArg

#pragma mark - Constructors

- (instancetype)initWithTeamFolderId:(NSString *)teamFolderId
                         syncSetting:(DBFILESSyncSettingArg *)syncSetting
                 contentSyncSettings:(NSArray<DBFILESContentSyncSettingArg *> *)contentSyncSettings {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](teamFolderId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil
                                              maxItems:nil
                                         itemValidator:[DBStoneValidators nonnullValidator:nil]]](contentSyncSettings);

  self = [super initWithTeamFolderId:teamFolderId];
  if (self) {
    _syncSetting = syncSetting;
    _contentSyncSettings = contentSyncSettings;
  }
  return self;
}

- (instancetype)initWithTeamFolderId:(NSString *)teamFolderId {
  return [self initWithTeamFolderId:teamFolderId syncSetting:nil contentSyncSettings:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderUpdateSyncSettingsArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderUpdateSyncSettingsArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderUpdateSyncSettingsArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamFolderId hash];
  if (self.syncSetting != nil) {
    result = prime * result + [self.syncSetting hash];
  }
  if (self.contentSyncSettings != nil) {
    result = prime * result + [self.contentSyncSettings hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderUpdateSyncSettingsArg:other];
}

- (BOOL)isEqualToTeamFolderUpdateSyncSettingsArg:
    (DBTEAMTeamFolderUpdateSyncSettingsArg *)aTeamFolderUpdateSyncSettingsArg {
  if (self == aTeamFolderUpdateSyncSettingsArg) {
    return YES;
  }
  if (![self.teamFolderId isEqual:aTeamFolderUpdateSyncSettingsArg.teamFolderId]) {
    return NO;
  }
  if (self.syncSetting) {
    if (![self.syncSetting isEqual:aTeamFolderUpdateSyncSettingsArg.syncSetting]) {
      return NO;
    }
  }
  if (self.contentSyncSettings) {
    if (![self.contentSyncSettings isEqual:aTeamFolderUpdateSyncSettingsArg.contentSyncSettings]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderUpdateSyncSettingsArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderUpdateSyncSettingsArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_folder_id"] = valueObj.teamFolderId;
  if (valueObj.syncSetting) {
    jsonDict[@"sync_setting"] = [DBFILESSyncSettingArgSerializer serialize:valueObj.syncSetting];
  }
  if (valueObj.contentSyncSettings) {
    jsonDict[@"content_sync_settings"] =
        [DBArraySerializer serialize:valueObj.contentSyncSettings
                           withBlock:^id(id elem0) {
                             return [DBFILESContentSyncSettingArgSerializer serialize:elem0];
                           }];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderUpdateSyncSettingsArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamFolderId = valueDict[@"team_folder_id"];
  DBFILESSyncSettingArg *syncSetting =
      valueDict[@"sync_setting"] ? [DBFILESSyncSettingArgSerializer deserialize:valueDict[@"sync_setting"]] : nil;
  NSArray<DBFILESContentSyncSettingArg *> *contentSyncSettings =
      valueDict[@"content_sync_settings"]
          ? [DBArraySerializer deserialize:valueDict[@"content_sync_settings"]
                                 withBlock:^id(id elem0) {
                                   return [DBFILESContentSyncSettingArgSerializer deserialize:elem0];
                                 }]
          : nil;

  return [[DBTEAMTeamFolderUpdateSyncSettingsArg alloc] initWithTeamFolderId:teamFolderId
                                                                 syncSetting:syncSetting
                                                         contentSyncSettings:contentSyncSettings];
}

@end

#import "DBFILESSyncSettingsError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMBaseTeamFolderError.h"
#import "DBTEAMTeamFolderAccessError.h"
#import "DBTEAMTeamFolderInvalidStatusError.h"
#import "DBTEAMTeamFolderTeamSharedDropboxError.h"
#import "DBTEAMTeamFolderUpdateSyncSettingsError.h"

#pragma mark - API Object

@implementation DBTEAMTeamFolderUpdateSyncSettingsError

@synthesize accessError = _accessError;
@synthesize statusError = _statusError;
@synthesize teamSharedDropboxError = _teamSharedDropboxError;
@synthesize syncSettingsError = _syncSettingsError;

#pragma mark - Constructors

- (instancetype)initWithAccessError:(DBTEAMTeamFolderAccessError *)accessError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderUpdateSyncSettingsErrorAccessError;
    _accessError = accessError;
  }
  return self;
}

- (instancetype)initWithStatusError:(DBTEAMTeamFolderInvalidStatusError *)statusError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderUpdateSyncSettingsErrorStatusError;
    _statusError = statusError;
  }
  return self;
}

- (instancetype)initWithTeamSharedDropboxError:(DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderUpdateSyncSettingsErrorTeamSharedDropboxError;
    _teamSharedDropboxError = teamSharedDropboxError;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderUpdateSyncSettingsErrorOther;
  }
  return self;
}

- (instancetype)initWithSyncSettingsError:(DBFILESSyncSettingsError *)syncSettingsError {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamFolderUpdateSyncSettingsErrorSyncSettingsError;
    _syncSettingsError = syncSettingsError;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMTeamFolderAccessError *)accessError {
  if (![self isAccessError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderUpdateSyncSettingsErrorAccessError, but was %@.",
                       [self tagName]];
  }
  return _accessError;
}

- (DBTEAMTeamFolderInvalidStatusError *)statusError {
  if (![self isStatusError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderUpdateSyncSettingsErrorStatusError, but was %@.",
                       [self tagName]];
  }
  return _statusError;
}

- (DBTEAMTeamFolderTeamSharedDropboxError *)teamSharedDropboxError {
  if (![self isTeamSharedDropboxError]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMTeamFolderUpdateSyncSettingsErrorTeamSharedDropboxError, but was %@.",
               [self tagName]];
  }
  return _teamSharedDropboxError;
}

- (DBFILESSyncSettingsError *)syncSettingsError {
  if (![self isSyncSettingsError]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamFolderUpdateSyncSettingsErrorSyncSettingsError, but was %@.",
                       [self tagName]];
  }
  return _syncSettingsError;
}

#pragma mark - Tag state methods

- (BOOL)isAccessError {
  return _tag == DBTEAMTeamFolderUpdateSyncSettingsErrorAccessError;
}

- (BOOL)isStatusError {
  return _tag == DBTEAMTeamFolderUpdateSyncSettingsErrorStatusError;
}

- (BOOL)isTeamSharedDropboxError {
  return _tag == DBTEAMTeamFolderUpdateSyncSettingsErrorTeamSharedDropboxError;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamFolderUpdateSyncSettingsErrorOther;
}

- (BOOL)isSyncSettingsError {
  return _tag == DBTEAMTeamFolderUpdateSyncSettingsErrorSyncSettingsError;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamFolderUpdateSyncSettingsErrorAccessError:
    return @"DBTEAMTeamFolderUpdateSyncSettingsErrorAccessError";
  case DBTEAMTeamFolderUpdateSyncSettingsErrorStatusError:
    return @"DBTEAMTeamFolderUpdateSyncSettingsErrorStatusError";
  case DBTEAMTeamFolderUpdateSyncSettingsErrorTeamSharedDropboxError:
    return @"DBTEAMTeamFolderUpdateSyncSettingsErrorTeamSharedDropboxError";
  case DBTEAMTeamFolderUpdateSyncSettingsErrorOther:
    return @"DBTEAMTeamFolderUpdateSyncSettingsErrorOther";
  case DBTEAMTeamFolderUpdateSyncSettingsErrorSyncSettingsError:
    return @"DBTEAMTeamFolderUpdateSyncSettingsErrorSyncSettingsError";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamFolderUpdateSyncSettingsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamFolderUpdateSyncSettingsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamFolderUpdateSyncSettingsErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamFolderUpdateSyncSettingsErrorAccessError:
    result = prime * result + [self.accessError hash];
  case DBTEAMTeamFolderUpdateSyncSettingsErrorStatusError:
    result = prime * result + [self.statusError hash];
  case DBTEAMTeamFolderUpdateSyncSettingsErrorTeamSharedDropboxError:
    result = prime * result + [self.teamSharedDropboxError hash];
  case DBTEAMTeamFolderUpdateSyncSettingsErrorOther:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamFolderUpdateSyncSettingsErrorSyncSettingsError:
    result = prime * result + [self.syncSettingsError hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderUpdateSyncSettingsError:other];
}

- (BOOL)isEqualToTeamFolderUpdateSyncSettingsError:
    (DBTEAMTeamFolderUpdateSyncSettingsError *)aTeamFolderUpdateSyncSettingsError {
  if (self == aTeamFolderUpdateSyncSettingsError) {
    return YES;
  }
  if (self.tag != aTeamFolderUpdateSyncSettingsError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamFolderUpdateSyncSettingsErrorAccessError:
    return [self.accessError isEqual:aTeamFolderUpdateSyncSettingsError.accessError];
  case DBTEAMTeamFolderUpdateSyncSettingsErrorStatusError:
    return [self.statusError isEqual:aTeamFolderUpdateSyncSettingsError.statusError];
  case DBTEAMTeamFolderUpdateSyncSettingsErrorTeamSharedDropboxError:
    return [self.teamSharedDropboxError isEqual:aTeamFolderUpdateSyncSettingsError.teamSharedDropboxError];
  case DBTEAMTeamFolderUpdateSyncSettingsErrorOther:
    return [[self tagName] isEqual:[aTeamFolderUpdateSyncSettingsError tagName]];
  case DBTEAMTeamFolderUpdateSyncSettingsErrorSyncSettingsError:
    return [self.syncSettingsError isEqual:aTeamFolderUpdateSyncSettingsError.syncSettingsError];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamFolderUpdateSyncSettingsErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamFolderUpdateSyncSettingsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccessError]) {
    jsonDict[@"access_error"] = [[DBTEAMTeamFolderAccessErrorSerializer serialize:valueObj.accessError] mutableCopy];
    jsonDict[@".tag"] = @"access_error";
  } else if ([valueObj isStatusError]) {
    jsonDict[@"status_error"] =
        [[DBTEAMTeamFolderInvalidStatusErrorSerializer serialize:valueObj.statusError] mutableCopy];
    jsonDict[@".tag"] = @"status_error";
  } else if ([valueObj isTeamSharedDropboxError]) {
    jsonDict[@"team_shared_dropbox_error"] =
        [[DBTEAMTeamFolderTeamSharedDropboxErrorSerializer serialize:valueObj.teamSharedDropboxError] mutableCopy];
    jsonDict[@".tag"] = @"team_shared_dropbox_error";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else if ([valueObj isSyncSettingsError]) {
    jsonDict[@"sync_settings_error"] =
        [[DBFILESSyncSettingsErrorSerializer serialize:valueObj.syncSettingsError] mutableCopy];
    jsonDict[@".tag"] = @"sync_settings_error";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamFolderUpdateSyncSettingsError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"access_error"]) {
    DBTEAMTeamFolderAccessError *accessError =
        [DBTEAMTeamFolderAccessErrorSerializer deserialize:valueDict[@"access_error"]];
    return [[DBTEAMTeamFolderUpdateSyncSettingsError alloc] initWithAccessError:accessError];
  } else if ([tag isEqualToString:@"status_error"]) {
    DBTEAMTeamFolderInvalidStatusError *statusError =
        [DBTEAMTeamFolderInvalidStatusErrorSerializer deserialize:valueDict[@"status_error"]];
    return [[DBTEAMTeamFolderUpdateSyncSettingsError alloc] initWithStatusError:statusError];
  } else if ([tag isEqualToString:@"team_shared_dropbox_error"]) {
    DBTEAMTeamFolderTeamSharedDropboxError *teamSharedDropboxError =
        [DBTEAMTeamFolderTeamSharedDropboxErrorSerializer deserialize:valueDict[@"team_shared_dropbox_error"]];
    return [[DBTEAMTeamFolderUpdateSyncSettingsError alloc] initWithTeamSharedDropboxError:teamSharedDropboxError];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamFolderUpdateSyncSettingsError alloc] initWithOther];
  } else if ([tag isEqualToString:@"sync_settings_error"]) {
    DBFILESSyncSettingsError *syncSettingsError =
        [DBFILESSyncSettingsErrorSerializer deserialize:valueDict[@"sync_settings_error"]];
    return [[DBTEAMTeamFolderUpdateSyncSettingsError alloc] initWithSyncSettingsError:syncSettingsError];
  } else {
    return [[DBTEAMTeamFolderUpdateSyncSettingsError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMPOLICIESTeamMemberPolicies.h"
#import "DBTEAMTeamGetInfoResult.h"

#pragma mark - API Object

@implementation DBTEAMTeamGetInfoResult

#pragma mark - Constructors

- (instancetype)initWithName:(NSString *)name
                      teamId:(NSString *)teamId
            numLicensedUsers:(NSNumber *)numLicensedUsers
         numProvisionedUsers:(NSNumber *)numProvisionedUsers
                    policies:(DBTEAMPOLICIESTeamMemberPolicies *)policies {
  [DBStoneValidators nonnullValidator:nil](name);
  [DBStoneValidators nonnullValidator:nil](teamId);
  [DBStoneValidators nonnullValidator:nil](numLicensedUsers);
  [DBStoneValidators nonnullValidator:nil](numProvisionedUsers);
  [DBStoneValidators nonnullValidator:nil](policies);

  self = [super init];
  if (self) {
    _name = name;
    _teamId = teamId;
    _numLicensedUsers = numLicensedUsers;
    _numProvisionedUsers = numProvisionedUsers;
    _policies = policies;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamGetInfoResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamGetInfoResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamGetInfoResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.name hash];
  result = prime * result + [self.teamId hash];
  result = prime * result + [self.numLicensedUsers hash];
  result = prime * result + [self.numProvisionedUsers hash];
  result = prime * result + [self.policies hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamGetInfoResult:other];
}

- (BOOL)isEqualToTeamGetInfoResult:(DBTEAMTeamGetInfoResult *)aTeamGetInfoResult {
  if (self == aTeamGetInfoResult) {
    return YES;
  }
  if (![self.name isEqual:aTeamGetInfoResult.name]) {
    return NO;
  }
  if (![self.teamId isEqual:aTeamGetInfoResult.teamId]) {
    return NO;
  }
  if (![self.numLicensedUsers isEqual:aTeamGetInfoResult.numLicensedUsers]) {
    return NO;
  }
  if (![self.numProvisionedUsers isEqual:aTeamGetInfoResult.numProvisionedUsers]) {
    return NO;
  }
  if (![self.policies isEqual:aTeamGetInfoResult.policies]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamGetInfoResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamGetInfoResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"team_id"] = valueObj.teamId;
  jsonDict[@"num_licensed_users"] = valueObj.numLicensedUsers;
  jsonDict[@"num_provisioned_users"] = valueObj.numProvisionedUsers;
  jsonDict[@"policies"] = [DBTEAMPOLICIESTeamMemberPoliciesSerializer serialize:valueObj.policies];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamGetInfoResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *name = valueDict[@"name"];
  NSString *teamId = valueDict[@"team_id"];
  NSNumber *numLicensedUsers = valueDict[@"num_licensed_users"];
  NSNumber *numProvisionedUsers = valueDict[@"num_provisioned_users"];
  DBTEAMPOLICIESTeamMemberPolicies *policies =
      [DBTEAMPOLICIESTeamMemberPoliciesSerializer deserialize:valueDict[@"policies"]];

  return [[DBTEAMTeamGetInfoResult alloc] initWithName:name
                                                teamId:teamId
                                      numLicensedUsers:numLicensedUsers
                                   numProvisionedUsers:numProvisionedUsers
                                              policies:policies];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMAdminTier.h"
#import "DBTEAMTeamMemberInfo.h"
#import "DBTEAMTeamMemberProfile.h"

#pragma mark - API Object

@implementation DBTEAMTeamMemberInfo

#pragma mark - Constructors

- (instancetype)initWithProfile:(DBTEAMTeamMemberProfile *)profile role:(DBTEAMAdminTier *)role {
  [DBStoneValidators nonnullValidator:nil](profile);
  [DBStoneValidators nonnullValidator:nil](role);

  self = [super init];
  if (self) {
    _profile = profile;
    _role = role;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamMemberInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamMemberInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamMemberInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.profile hash];
  result = prime * result + [self.role hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMemberInfo:other];
}

- (BOOL)isEqualToTeamMemberInfo:(DBTEAMTeamMemberInfo *)aTeamMemberInfo {
  if (self == aTeamMemberInfo) {
    return YES;
  }
  if (![self.profile isEqual:aTeamMemberInfo.profile]) {
    return NO;
  }
  if (![self.role isEqual:aTeamMemberInfo.role]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamMemberInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamMemberInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"profile"] = [DBTEAMTeamMemberProfileSerializer serialize:valueObj.profile];
  jsonDict[@"role"] = [DBTEAMAdminTierSerializer serialize:valueObj.role];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamMemberInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMTeamMemberProfile *profile = [DBTEAMTeamMemberProfileSerializer deserialize:valueDict[@"profile"]];
  DBTEAMAdminTier *role = [DBTEAMAdminTierSerializer deserialize:valueDict[@"role"]];

  return [[DBTEAMTeamMemberInfo alloc] initWithProfile:profile role:role];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMMemberProfile.h"
#import "DBTEAMTeamMemberProfile.h"
#import "DBTEAMTeamMemberStatus.h"
#import "DBTEAMTeamMembershipType.h"
#import "DBUSERSName.h"

#pragma mark - API Object

@implementation DBTEAMTeamMemberProfile

#pragma mark - Constructors

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId
                               email:(NSString *)email
                       emailVerified:(NSNumber *)emailVerified
                              status:(DBTEAMTeamMemberStatus *)status
                                name:(DBUSERSName *)name
                      membershipType:(DBTEAMTeamMembershipType *)membershipType
                              groups:(NSArray<NSString *> *)groups
                      memberFolderId:(NSString *)memberFolderId
                          externalId:(NSString *)externalId
                           accountId:(NSString *)accountId
                            joinedOn:(NSDate *)joinedOn
                        persistentId:(NSString *)persistentId
               isDirectoryRestricted:(NSNumber *)isDirectoryRestricted {
  [DBStoneValidators nonnullValidator:nil](teamMemberId);
  [DBStoneValidators nonnullValidator:nil](email);
  [DBStoneValidators nonnullValidator:nil](emailVerified);
  [DBStoneValidators nonnullValidator:nil](status);
  [DBStoneValidators nonnullValidator:nil](name);
  [DBStoneValidators nonnullValidator:nil](membershipType);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](groups);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](memberFolderId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);

  self = [super initWithTeamMemberId:teamMemberId
                               email:email
                       emailVerified:emailVerified
                              status:status
                                name:name
                      membershipType:membershipType
                          externalId:externalId
                           accountId:accountId
                            joinedOn:joinedOn
                        persistentId:persistentId
               isDirectoryRestricted:isDirectoryRestricted];
  if (self) {
    _groups = groups;
    _memberFolderId = memberFolderId;
  }
  return self;
}

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId
                               email:(NSString *)email
                       emailVerified:(NSNumber *)emailVerified
                              status:(DBTEAMTeamMemberStatus *)status
                                name:(DBUSERSName *)name
                      membershipType:(DBTEAMTeamMembershipType *)membershipType
                              groups:(NSArray<NSString *> *)groups
                      memberFolderId:(NSString *)memberFolderId {
  return [self initWithTeamMemberId:teamMemberId
                              email:email
                      emailVerified:emailVerified
                             status:status
                               name:name
                     membershipType:membershipType
                             groups:groups
                     memberFolderId:memberFolderId
                         externalId:nil
                          accountId:nil
                           joinedOn:nil
                       persistentId:nil
              isDirectoryRestricted:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamMemberProfileSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamMemberProfileSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamMemberProfileSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamMemberId hash];
  result = prime * result + [self.email hash];
  result = prime * result + [self.emailVerified hash];
  result = prime * result + [self.status hash];
  result = prime * result + [self.name hash];
  result = prime * result + [self.membershipType hash];
  result = prime * result + [self.groups hash];
  result = prime * result + [self.memberFolderId hash];
  if (self.externalId != nil) {
    result = prime * result + [self.externalId hash];
  }
  if (self.accountId != nil) {
    result = prime * result + [self.accountId hash];
  }
  if (self.joinedOn != nil) {
    result = prime * result + [self.joinedOn hash];
  }
  if (self.persistentId != nil) {
    result = prime * result + [self.persistentId hash];
  }
  if (self.isDirectoryRestricted != nil) {
    result = prime * result + [self.isDirectoryRestricted hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMemberProfile:other];
}

- (BOOL)isEqualToTeamMemberProfile:(DBTEAMTeamMemberProfile *)aTeamMemberProfile {
  if (self == aTeamMemberProfile) {
    return YES;
  }
  if (![self.teamMemberId isEqual:aTeamMemberProfile.teamMemberId]) {
    return NO;
  }
  if (![self.email isEqual:aTeamMemberProfile.email]) {
    return NO;
  }
  if (![self.emailVerified isEqual:aTeamMemberProfile.emailVerified]) {
    return NO;
  }
  if (![self.status isEqual:aTeamMemberProfile.status]) {
    return NO;
  }
  if (![self.name isEqual:aTeamMemberProfile.name]) {
    return NO;
  }
  if (![self.membershipType isEqual:aTeamMemberProfile.membershipType]) {
    return NO;
  }
  if (![self.groups isEqual:aTeamMemberProfile.groups]) {
    return NO;
  }
  if (![self.memberFolderId isEqual:aTeamMemberProfile.memberFolderId]) {
    return NO;
  }
  if (self.externalId) {
    if (![self.externalId isEqual:aTeamMemberProfile.externalId]) {
      return NO;
    }
  }
  if (self.accountId) {
    if (![self.accountId isEqual:aTeamMemberProfile.accountId]) {
      return NO;
    }
  }
  if (self.joinedOn) {
    if (![self.joinedOn isEqual:aTeamMemberProfile.joinedOn]) {
      return NO;
    }
  }
  if (self.persistentId) {
    if (![self.persistentId isEqual:aTeamMemberProfile.persistentId]) {
      return NO;
    }
  }
  if (self.isDirectoryRestricted) {
    if (![self.isDirectoryRestricted isEqual:aTeamMemberProfile.isDirectoryRestricted]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamMemberProfileSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamMemberProfile *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  jsonDict[@"email"] = valueObj.email;
  jsonDict[@"email_verified"] = valueObj.emailVerified;
  jsonDict[@"status"] = [DBTEAMTeamMemberStatusSerializer serialize:valueObj.status];
  jsonDict[@"name"] = [DBUSERSNameSerializer serialize:valueObj.name];
  jsonDict[@"membership_type"] = [DBTEAMTeamMembershipTypeSerializer serialize:valueObj.membershipType];
  jsonDict[@"groups"] = [DBArraySerializer serialize:valueObj.groups
                                           withBlock:^id(id elem0) {
                                             return elem0;
                                           }];
  jsonDict[@"member_folder_id"] = valueObj.memberFolderId;
  if (valueObj.externalId) {
    jsonDict[@"external_id"] = valueObj.externalId;
  }
  if (valueObj.accountId) {
    jsonDict[@"account_id"] = valueObj.accountId;
  }
  if (valueObj.joinedOn) {
    jsonDict[@"joined_on"] = [DBNSDateSerializer serialize:valueObj.joinedOn dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.persistentId) {
    jsonDict[@"persistent_id"] = valueObj.persistentId;
  }
  if (valueObj.isDirectoryRestricted) {
    jsonDict[@"is_directory_restricted"] = valueObj.isDirectoryRestricted;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamMemberProfile *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamMemberId = valueDict[@"team_member_id"];
  NSString *email = valueDict[@"email"];
  NSNumber *emailVerified = valueDict[@"email_verified"];
  DBTEAMTeamMemberStatus *status = [DBTEAMTeamMemberStatusSerializer deserialize:valueDict[@"status"]];
  DBUSERSName *name = [DBUSERSNameSerializer deserialize:valueDict[@"name"]];
  DBTEAMTeamMembershipType *membershipType =
      [DBTEAMTeamMembershipTypeSerializer deserialize:valueDict[@"membership_type"]];
  NSArray<NSString *> *groups = [DBArraySerializer deserialize:valueDict[@"groups"]
                                                     withBlock:^id(id elem0) {
                                                       return elem0;
                                                     }];
  NSString *memberFolderId = valueDict[@"member_folder_id"];
  NSString *externalId = valueDict[@"external_id"] ?: nil;
  NSString *accountId = valueDict[@"account_id"] ?: nil;
  NSDate *joinedOn = valueDict[@"joined_on"]
                         ? [DBNSDateSerializer deserialize:valueDict[@"joined_on"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                         : nil;
  NSString *persistentId = valueDict[@"persistent_id"] ?: nil;
  NSNumber *isDirectoryRestricted = valueDict[@"is_directory_restricted"] ?: nil;

  return [[DBTEAMTeamMemberProfile alloc] initWithTeamMemberId:teamMemberId
                                                         email:email
                                                 emailVerified:emailVerified
                                                        status:status
                                                          name:name
                                                membershipType:membershipType
                                                        groups:groups
                                                memberFolderId:memberFolderId
                                                    externalId:externalId
                                                     accountId:accountId
                                                      joinedOn:joinedOn
                                                  persistentId:persistentId
                                         isDirectoryRestricted:isDirectoryRestricted];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMRemovedStatus.h"
#import "DBTEAMTeamMemberStatus.h"

#pragma mark - API Object

@implementation DBTEAMTeamMemberStatus

@synthesize removed = _removed;

#pragma mark - Constructors

- (instancetype)initWithActive {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamMemberStatusActive;
  }
  return self;
}

- (instancetype)initWithInvited {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamMemberStatusInvited;
  }
  return self;
}

- (instancetype)initWithSuspended {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamMemberStatusSuspended;
  }
  return self;
}

- (instancetype)initWithRemoved:(DBTEAMRemovedStatus *)removed {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamMemberStatusRemoved;
    _removed = removed;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMRemovedStatus *)removed {
  if (![self isRemoved]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMTeamMemberStatusRemoved, but was %@.", [self tagName]];
  }
  return _removed;
}

#pragma mark - Tag state methods

- (BOOL)isActive {
  return _tag == DBTEAMTeamMemberStatusActive;
}

- (BOOL)isInvited {
  return _tag == DBTEAMTeamMemberStatusInvited;
}

- (BOOL)isSuspended {
  return _tag == DBTEAMTeamMemberStatusSuspended;
}

- (BOOL)isRemoved {
  return _tag == DBTEAMTeamMemberStatusRemoved;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamMemberStatusActive:
    return @"DBTEAMTeamMemberStatusActive";
  case DBTEAMTeamMemberStatusInvited:
    return @"DBTEAMTeamMemberStatusInvited";
  case DBTEAMTeamMemberStatusSuspended:
    return @"DBTEAMTeamMemberStatusSuspended";
  case DBTEAMTeamMemberStatusRemoved:
    return @"DBTEAMTeamMemberStatusRemoved";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamMemberStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamMemberStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamMemberStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamMemberStatusActive:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamMemberStatusInvited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamMemberStatusSuspended:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamMemberStatusRemoved:
    result = prime * result + [self.removed hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMemberStatus:other];
}

- (BOOL)isEqualToTeamMemberStatus:(DBTEAMTeamMemberStatus *)aTeamMemberStatus {
  if (self == aTeamMemberStatus) {
    return YES;
  }
  if (self.tag != aTeamMemberStatus.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamMemberStatusActive:
    return [[self tagName] isEqual:[aTeamMemberStatus tagName]];
  case DBTEAMTeamMemberStatusInvited:
    return [[self tagName] isEqual:[aTeamMemberStatus tagName]];
  case DBTEAMTeamMemberStatusSuspended:
    return [[self tagName] isEqual:[aTeamMemberStatus tagName]];
  case DBTEAMTeamMemberStatusRemoved:
    return [self.removed isEqual:aTeamMemberStatus.removed];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamMemberStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamMemberStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isActive]) {
    jsonDict[@".tag"] = @"active";
  } else if ([valueObj isInvited]) {
    jsonDict[@".tag"] = @"invited";
  } else if ([valueObj isSuspended]) {
    jsonDict[@".tag"] = @"suspended";
  } else if ([valueObj isRemoved]) {
    jsonDict = [[DBTEAMRemovedStatusSerializer serialize:valueObj.removed] mutableCopy];
    jsonDict[@".tag"] = @"removed";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamMemberStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"active"]) {
    return [[DBTEAMTeamMemberStatus alloc] initWithActive];
  } else if ([tag isEqualToString:@"invited"]) {
    return [[DBTEAMTeamMemberStatus alloc] initWithInvited];
  } else if ([tag isEqualToString:@"suspended"]) {
    return [[DBTEAMTeamMemberStatus alloc] initWithSuspended];
  } else if ([tag isEqualToString:@"removed"]) {
    DBTEAMRemovedStatus *removed = [DBTEAMRemovedStatusSerializer deserialize:valueDict];
    return [[DBTEAMTeamMemberStatus alloc] initWithRemoved:removed];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamMembershipType.h"

#pragma mark - API Object

@implementation DBTEAMTeamMembershipType

#pragma mark - Constructors

- (instancetype)initWithFull {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamMembershipTypeFull;
  }
  return self;
}

- (instancetype)initWithLimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamMembershipTypeLimited;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isFull {
  return _tag == DBTEAMTeamMembershipTypeFull;
}

- (BOOL)isLimited {
  return _tag == DBTEAMTeamMembershipTypeLimited;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamMembershipTypeFull:
    return @"DBTEAMTeamMembershipTypeFull";
  case DBTEAMTeamMembershipTypeLimited:
    return @"DBTEAMTeamMembershipTypeLimited";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamMembershipTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamMembershipTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamMembershipTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamMembershipTypeFull:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamMembershipTypeLimited:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMembershipType:other];
}

- (BOOL)isEqualToTeamMembershipType:(DBTEAMTeamMembershipType *)aTeamMembershipType {
  if (self == aTeamMembershipType) {
    return YES;
  }
  if (self.tag != aTeamMembershipType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamMembershipTypeFull:
    return [[self tagName] isEqual:[aTeamMembershipType tagName]];
  case DBTEAMTeamMembershipTypeLimited:
    return [[self tagName] isEqual:[aTeamMembershipType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamMembershipTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamMembershipType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isFull]) {
    jsonDict[@".tag"] = @"full";
  } else if ([valueObj isLimited]) {
    jsonDict[@".tag"] = @"limited";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamMembershipType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"full"]) {
    return [[DBTEAMTeamMembershipType alloc] initWithFull];
  } else if ([tag isEqualToString:@"limited"]) {
    return [[DBTEAMTeamMembershipType alloc] initWithLimited];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamNamespacesListArg.h"

#pragma mark - API Object

@implementation DBTEAMTeamNamespacesListArg

#pragma mark - Constructors

- (instancetype)initWithLimit:(NSNumber *)limit {

  self = [super init];
  if (self) {
    _limit = limit ?: @(1000);
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithLimit:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamNamespacesListArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamNamespacesListArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamNamespacesListArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.limit hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamNamespacesListArg:other];
}

- (BOOL)isEqualToTeamNamespacesListArg:(DBTEAMTeamNamespacesListArg *)aTeamNamespacesListArg {
  if (self == aTeamNamespacesListArg) {
    return YES;
  }
  if (![self.limit isEqual:aTeamNamespacesListArg.limit]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamNamespacesListArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamNamespacesListArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"limit"] = valueObj.limit;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamNamespacesListArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);

  return [[DBTEAMTeamNamespacesListArg alloc] initWithLimit:limit];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamNamespacesListContinueArg.h"

#pragma mark - API Object

@implementation DBTEAMTeamNamespacesListContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {
  [DBStoneValidators nonnullValidator:nil](cursor);

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamNamespacesListContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamNamespacesListContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamNamespacesListContinueArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.cursor hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamNamespacesListContinueArg:other];
}

- (BOOL)isEqualToTeamNamespacesListContinueArg:(DBTEAMTeamNamespacesListContinueArg *)aTeamNamespacesListContinueArg {
  if (self == aTeamNamespacesListContinueArg) {
    return YES;
  }
  if (![self.cursor isEqual:aTeamNamespacesListContinueArg.cursor]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamNamespacesListContinueArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamNamespacesListContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamNamespacesListContinueArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBTEAMTeamNamespacesListContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamNamespacesListContinueError.h"

#pragma mark - API Object

@implementation DBTEAMTeamNamespacesListContinueError

#pragma mark - Constructors

- (instancetype)initWithInvalidCursor {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamNamespacesListContinueErrorInvalidCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTeamNamespacesListContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isInvalidCursor {
  return _tag == DBTEAMTeamNamespacesListContinueErrorInvalidCursor;
}

- (BOOL)isOther {
  return _tag == DBTEAMTeamNamespacesListContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTeamNamespacesListContinueErrorInvalidCursor:
    return @"DBTEAMTeamNamespacesListContinueErrorInvalidCursor";
  case DBTEAMTeamNamespacesListContinueErrorOther:
    return @"DBTEAMTeamNamespacesListContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamNamespacesListContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamNamespacesListContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamNamespacesListContinueErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTeamNamespacesListContinueErrorInvalidCursor:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTeamNamespacesListContinueErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamNamespacesListContinueError:other];
}

- (BOOL)isEqualToTeamNamespacesListContinueError:
    (DBTEAMTeamNamespacesListContinueError *)aTeamNamespacesListContinueError {
  if (self == aTeamNamespacesListContinueError) {
    return YES;
  }
  if (self.tag != aTeamNamespacesListContinueError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTeamNamespacesListContinueErrorInvalidCursor:
    return [[self tagName] isEqual:[aTeamNamespacesListContinueError tagName]];
  case DBTEAMTeamNamespacesListContinueErrorOther:
    return [[self tagName] isEqual:[aTeamNamespacesListContinueError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamNamespacesListContinueErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamNamespacesListContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalidCursor]) {
    jsonDict[@".tag"] = @"invalid_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamNamespacesListContinueError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid_cursor"]) {
    return [[DBTEAMTeamNamespacesListContinueError alloc] initWithInvalidCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTeamNamespacesListContinueError alloc] initWithOther];
  } else {
    return [[DBTEAMTeamNamespacesListContinueError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMNamespaceMetadata.h"
#import "DBTEAMTeamNamespacesListResult.h"

#pragma mark - API Object

@implementation DBTEAMTeamNamespacesListResult

#pragma mark - Constructors

- (instancetype)initWithNamespaces:(NSArray<DBTEAMNamespaceMetadata *> *)namespaces
                            cursor:(NSString *)cursor
                           hasMore:(NSNumber *)hasMore {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](namespaces);
  [DBStoneValidators nonnullValidator:nil](cursor);
  [DBStoneValidators nonnullValidator:nil](hasMore);

  self = [super init];
  if (self) {
    _namespaces = namespaces;
    _cursor = cursor;
    _hasMore = hasMore;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTeamNamespacesListResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTeamNamespacesListResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTeamNamespacesListResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.namespaces hash];
  result = prime * result + [self.cursor hash];
  result = prime * result + [self.hasMore hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamNamespacesListResult:other];
}

- (BOOL)isEqualToTeamNamespacesListResult:(DBTEAMTeamNamespacesListResult *)aTeamNamespacesListResult {
  if (self == aTeamNamespacesListResult) {
    return YES;
  }
  if (![self.namespaces isEqual:aTeamNamespacesListResult.namespaces]) {
    return NO;
  }
  if (![self.cursor isEqual:aTeamNamespacesListResult.cursor]) {
    return NO;
  }
  if (![self.hasMore isEqual:aTeamNamespacesListResult.hasMore]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTeamNamespacesListResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTeamNamespacesListResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"namespaces"] = [DBArraySerializer serialize:valueObj.namespaces
                                               withBlock:^id(id elem0) {
                                                 return [DBTEAMNamespaceMetadataSerializer serialize:elem0];
                                               }];
  jsonDict[@"cursor"] = valueObj.cursor;
  jsonDict[@"has_more"] = valueObj.hasMore;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTeamNamespacesListResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<DBTEAMNamespaceMetadata *> *namespaces =
      [DBArraySerializer deserialize:valueDict[@"namespaces"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMNamespaceMetadataSerializer deserialize:elem0];
                           }];
  NSString *cursor = valueDict[@"cursor"];
  NSNumber *hasMore = valueDict[@"has_more"];

  return [[DBTEAMTeamNamespacesListResult alloc] initWithNamespaces:namespaces cursor:cursor hasMore:hasMore];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTokenGetAuthenticatedAdminError.h"

#pragma mark - API Object

@implementation DBTEAMTokenGetAuthenticatedAdminError

#pragma mark - Constructors

- (instancetype)initWithMappingNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMTokenGetAuthenticatedAdminErrorMappingNotFound;
  }
  return self;
}

- (instancetype)initWithAdminNotActive {
  self = [super init];
  if (self) {
    _tag = DBTEAMTokenGetAuthenticatedAdminErrorAdminNotActive;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMTokenGetAuthenticatedAdminErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isMappingNotFound {
  return _tag == DBTEAMTokenGetAuthenticatedAdminErrorMappingNotFound;
}

- (BOOL)isAdminNotActive {
  return _tag == DBTEAMTokenGetAuthenticatedAdminErrorAdminNotActive;
}

- (BOOL)isOther {
  return _tag == DBTEAMTokenGetAuthenticatedAdminErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMTokenGetAuthenticatedAdminErrorMappingNotFound:
    return @"DBTEAMTokenGetAuthenticatedAdminErrorMappingNotFound";
  case DBTEAMTokenGetAuthenticatedAdminErrorAdminNotActive:
    return @"DBTEAMTokenGetAuthenticatedAdminErrorAdminNotActive";
  case DBTEAMTokenGetAuthenticatedAdminErrorOther:
    return @"DBTEAMTokenGetAuthenticatedAdminErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTokenGetAuthenticatedAdminErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTokenGetAuthenticatedAdminErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTokenGetAuthenticatedAdminErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMTokenGetAuthenticatedAdminErrorMappingNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTokenGetAuthenticatedAdminErrorAdminNotActive:
    result = prime * result + [[self tagName] hash];
  case DBTEAMTokenGetAuthenticatedAdminErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTokenGetAuthenticatedAdminError:other];
}

- (BOOL)isEqualToTokenGetAuthenticatedAdminError:
    (DBTEAMTokenGetAuthenticatedAdminError *)aTokenGetAuthenticatedAdminError {
  if (self == aTokenGetAuthenticatedAdminError) {
    return YES;
  }
  if (self.tag != aTokenGetAuthenticatedAdminError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMTokenGetAuthenticatedAdminErrorMappingNotFound:
    return [[self tagName] isEqual:[aTokenGetAuthenticatedAdminError tagName]];
  case DBTEAMTokenGetAuthenticatedAdminErrorAdminNotActive:
    return [[self tagName] isEqual:[aTokenGetAuthenticatedAdminError tagName]];
  case DBTEAMTokenGetAuthenticatedAdminErrorOther:
    return [[self tagName] isEqual:[aTokenGetAuthenticatedAdminError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTokenGetAuthenticatedAdminErrorSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTokenGetAuthenticatedAdminError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMappingNotFound]) {
    jsonDict[@".tag"] = @"mapping_not_found";
  } else if ([valueObj isAdminNotActive]) {
    jsonDict[@".tag"] = @"admin_not_active";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTokenGetAuthenticatedAdminError *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"mapping_not_found"]) {
    return [[DBTEAMTokenGetAuthenticatedAdminError alloc] initWithMappingNotFound];
  } else if ([tag isEqualToString:@"admin_not_active"]) {
    return [[DBTEAMTokenGetAuthenticatedAdminError alloc] initWithAdminNotActive];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMTokenGetAuthenticatedAdminError alloc] initWithOther];
  } else {
    return [[DBTEAMTokenGetAuthenticatedAdminError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMTeamMemberProfile.h"
#import "DBTEAMTokenGetAuthenticatedAdminResult.h"

#pragma mark - API Object

@implementation DBTEAMTokenGetAuthenticatedAdminResult

#pragma mark - Constructors

- (instancetype)initWithAdminProfile:(DBTEAMTeamMemberProfile *)adminProfile {
  [DBStoneValidators nonnullValidator:nil](adminProfile);

  self = [super init];
  if (self) {
    _adminProfile = adminProfile;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMTokenGetAuthenticatedAdminResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMTokenGetAuthenticatedAdminResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMTokenGetAuthenticatedAdminResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.adminProfile hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTokenGetAuthenticatedAdminResult:other];
}

- (BOOL)isEqualToTokenGetAuthenticatedAdminResult:
    (DBTEAMTokenGetAuthenticatedAdminResult *)aTokenGetAuthenticatedAdminResult {
  if (self == aTokenGetAuthenticatedAdminResult) {
    return YES;
  }
  if (![self.adminProfile isEqual:aTokenGetAuthenticatedAdminResult.adminProfile]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMTokenGetAuthenticatedAdminResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMTokenGetAuthenticatedAdminResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"admin_profile"] = [DBTEAMTeamMemberProfileSerializer serialize:valueObj.adminProfile];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMTokenGetAuthenticatedAdminResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMTeamMemberProfile *adminProfile = [DBTEAMTeamMemberProfileSerializer deserialize:valueDict[@"admin_profile"]];

  return [[DBTEAMTokenGetAuthenticatedAdminResult alloc] initWithAdminProfile:adminProfile];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMUploadApiRateLimitValue.h"

#pragma mark - API Object

@implementation DBTEAMUploadApiRateLimitValue

@synthesize limit = _limit;

#pragma mark - Constructors

- (instancetype)initWithUnlimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMUploadApiRateLimitValueUnlimited;
  }
  return self;
}

- (instancetype)initWithLimit:(NSNumber *)limit {
  self = [super init];
  if (self) {
    _tag = DBTEAMUploadApiRateLimitValueLimit;
    _limit = limit;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMUploadApiRateLimitValueOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSNumber *)limit {
  if (![self isLimit]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUploadApiRateLimitValueLimit, but was %@.", [self tagName]];
  }
  return _limit;
}

#pragma mark - Tag state methods

- (BOOL)isUnlimited {
  return _tag == DBTEAMUploadApiRateLimitValueUnlimited;
}

- (BOOL)isLimit {
  return _tag == DBTEAMUploadApiRateLimitValueLimit;
}

- (BOOL)isOther {
  return _tag == DBTEAMUploadApiRateLimitValueOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMUploadApiRateLimitValueUnlimited:
    return @"DBTEAMUploadApiRateLimitValueUnlimited";
  case DBTEAMUploadApiRateLimitValueLimit:
    return @"DBTEAMUploadApiRateLimitValueLimit";
  case DBTEAMUploadApiRateLimitValueOther:
    return @"DBTEAMUploadApiRateLimitValueOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMUploadApiRateLimitValueSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMUploadApiRateLimitValueSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMUploadApiRateLimitValueSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMUploadApiRateLimitValueUnlimited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMUploadApiRateLimitValueLimit:
    result = prime * result + [self.limit hash];
  case DBTEAMUploadApiRateLimitValueOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUploadApiRateLimitValue:other];
}

- (BOOL)isEqualToUploadApiRateLimitValue:(DBTEAMUploadApiRateLimitValue *)anUploadApiRateLimitValue {
  if (self == anUploadApiRateLimitValue) {
    return YES;
  }
  if (self.tag != anUploadApiRateLimitValue.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMUploadApiRateLimitValueUnlimited:
    return [[self tagName] isEqual:[anUploadApiRateLimitValue tagName]];
  case DBTEAMUploadApiRateLimitValueLimit:
    return [self.limit isEqual:anUploadApiRateLimitValue.limit];
  case DBTEAMUploadApiRateLimitValueOther:
    return [[self tagName] isEqual:[anUploadApiRateLimitValue tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMUploadApiRateLimitValueSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMUploadApiRateLimitValue *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUnlimited]) {
    jsonDict[@".tag"] = @"unlimited";
  } else if ([valueObj isLimit]) {
    jsonDict[@"limit"] = valueObj.limit;
    jsonDict[@".tag"] = @"limit";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMUploadApiRateLimitValue *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"unlimited"]) {
    return [[DBTEAMUploadApiRateLimitValue alloc] initWithUnlimited];
  } else if ([tag isEqualToString:@"limit"]) {
    NSNumber *limit = valueDict[@"limit"];
    return [[DBTEAMUploadApiRateLimitValue alloc] initWithLimit:limit];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMUploadApiRateLimitValue alloc] initWithOther];
  } else {
    return [[DBTEAMUploadApiRateLimitValue alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMUserCustomQuotaArg.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMUserCustomQuotaArg

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user quotaGb:(NSNumber *)quotaGb {
  [DBStoneValidators nonnullValidator:nil](user);
  [DBStoneValidators nonnullValidator:[DBStoneValidators numericValidator:@(15) maxValue:nil]](quotaGb);

  self = [super init];
  if (self) {
    _user = user;
    _quotaGb = quotaGb;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMUserCustomQuotaArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMUserCustomQuotaArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMUserCustomQuotaArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.user hash];
  result = prime * result + [self.quotaGb hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserCustomQuotaArg:other];
}

- (BOOL)isEqualToUserCustomQuotaArg:(DBTEAMUserCustomQuotaArg *)anUserCustomQuotaArg {
  if (self == anUserCustomQuotaArg) {
    return YES;
  }
  if (![self.user isEqual:anUserCustomQuotaArg.user]) {
    return NO;
  }
  if (![self.quotaGb isEqual:anUserCustomQuotaArg.quotaGb]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMUserCustomQuotaArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMUserCustomQuotaArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];
  jsonDict[@"quota_gb"] = valueObj.quotaGb;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMUserCustomQuotaArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];
  NSNumber *quotaGb = valueDict[@"quota_gb"];

  return [[DBTEAMUserCustomQuotaArg alloc] initWithUser:user quotaGb:quotaGb];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMUserCustomQuotaResult.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMUserCustomQuotaResult

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user quotaGb:(NSNumber *)quotaGb {
  [DBStoneValidators nonnullValidator:nil](user);
  [DBStoneValidators nullableValidator:[DBStoneValidators numericValidator:@(15) maxValue:nil]](quotaGb);

  self = [super init];
  if (self) {
    _user = user;
    _quotaGb = quotaGb;
  }
  return self;
}

- (instancetype)initWithUser:(DBTEAMUserSelectorArg *)user {
  return [self initWithUser:user quotaGb:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMUserCustomQuotaResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMUserCustomQuotaResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMUserCustomQuotaResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.user hash];
  if (self.quotaGb != nil) {
    result = prime * result + [self.quotaGb hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserCustomQuotaResult:other];
}

- (BOOL)isEqualToUserCustomQuotaResult:(DBTEAMUserCustomQuotaResult *)anUserCustomQuotaResult {
  if (self == anUserCustomQuotaResult) {
    return YES;
  }
  if (![self.user isEqual:anUserCustomQuotaResult.user]) {
    return NO;
  }
  if (self.quotaGb) {
    if (![self.quotaGb isEqual:anUserCustomQuotaResult.quotaGb]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMUserCustomQuotaResultSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMUserCustomQuotaResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user"] = [DBTEAMUserSelectorArgSerializer serialize:valueObj.user];
  if (valueObj.quotaGb) {
    jsonDict[@"quota_gb"] = valueObj.quotaGb;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMUserCustomQuotaResult *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMUserSelectorArg *user = [DBTEAMUserSelectorArgSerializer deserialize:valueDict[@"user"]];
  NSNumber *quotaGb = valueDict[@"quota_gb"] ?: nil;

  return [[DBTEAMUserCustomQuotaResult alloc] initWithUser:user quotaGb:quotaGb];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMUserSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMUserSelectorArg

@synthesize teamMemberId = _teamMemberId;
@synthesize externalId = _externalId;
@synthesize email = _email;

#pragma mark - Constructors

- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId {
  self = [super init];
  if (self) {
    _tag = DBTEAMUserSelectorArgTeamMemberId;
    _teamMemberId = teamMemberId;
  }
  return self;
}

- (instancetype)initWithExternalId:(NSString *)externalId {
  self = [super init];
  if (self) {
    _tag = DBTEAMUserSelectorArgExternalId;
    _externalId = externalId;
  }
  return self;
}

- (instancetype)initWithEmail:(NSString *)email {
  self = [super init];
  if (self) {
    _tag = DBTEAMUserSelectorArgEmail;
    _email = email;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)teamMemberId {
  if (![self isTeamMemberId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUserSelectorArgTeamMemberId, but was %@.", [self tagName]];
  }
  return _teamMemberId;
}

- (NSString *)externalId {
  if (![self isExternalId]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUserSelectorArgExternalId, but was %@.", [self tagName]];
  }
  return _externalId;
}

- (NSString *)email {
  if (![self isEmail]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUserSelectorArgEmail, but was %@.", [self tagName]];
  }
  return _email;
}

#pragma mark - Tag state methods

- (BOOL)isTeamMemberId {
  return _tag == DBTEAMUserSelectorArgTeamMemberId;
}

- (BOOL)isExternalId {
  return _tag == DBTEAMUserSelectorArgExternalId;
}

- (BOOL)isEmail {
  return _tag == DBTEAMUserSelectorArgEmail;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMUserSelectorArgTeamMemberId:
    return @"DBTEAMUserSelectorArgTeamMemberId";
  case DBTEAMUserSelectorArgExternalId:
    return @"DBTEAMUserSelectorArgExternalId";
  case DBTEAMUserSelectorArgEmail:
    return @"DBTEAMUserSelectorArgEmail";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMUserSelectorArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMUserSelectorArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMUserSelectorArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMUserSelectorArgTeamMemberId:
    result = prime * result + [self.teamMemberId hash];
  case DBTEAMUserSelectorArgExternalId:
    result = prime * result + [self.externalId hash];
  case DBTEAMUserSelectorArgEmail:
    result = prime * result + [self.email hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserSelectorArg:other];
}

- (BOOL)isEqualToUserSelectorArg:(DBTEAMUserSelectorArg *)anUserSelectorArg {
  if (self == anUserSelectorArg) {
    return YES;
  }
  if (self.tag != anUserSelectorArg.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMUserSelectorArgTeamMemberId:
    return [self.teamMemberId isEqual:anUserSelectorArg.teamMemberId];
  case DBTEAMUserSelectorArgExternalId:
    return [self.externalId isEqual:anUserSelectorArg.externalId];
  case DBTEAMUserSelectorArgEmail:
    return [self.email isEqual:anUserSelectorArg.email];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMUserSelectorArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMUserSelectorArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamMemberId]) {
    jsonDict[@"team_member_id"] = valueObj.teamMemberId;
    jsonDict[@".tag"] = @"team_member_id";
  } else if ([valueObj isExternalId]) {
    jsonDict[@"external_id"] = valueObj.externalId;
    jsonDict[@".tag"] = @"external_id";
  } else if ([valueObj isEmail]) {
    jsonDict[@"email"] = valueObj.email;
    jsonDict[@".tag"] = @"email";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMUserSelectorArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_member_id"]) {
    NSString *teamMemberId = valueDict[@"team_member_id"];
    return [[DBTEAMUserSelectorArg alloc] initWithTeamMemberId:teamMemberId];
  } else if ([tag isEqualToString:@"external_id"]) {
    NSString *externalId = valueDict[@"external_id"];
    return [[DBTEAMUserSelectorArg alloc] initWithExternalId:externalId];
  } else if ([tag isEqualToString:@"email"]) {
    NSString *email = valueDict[@"email"];
    return [[DBTEAMUserSelectorArg alloc] initWithEmail:email];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMUsersSelectorArg.h"

#pragma mark - API Object

@implementation DBTEAMUsersSelectorArg

@synthesize teamMemberIds = _teamMemberIds;
@synthesize externalIds = _externalIds;
@synthesize emails = _emails;

#pragma mark - Constructors

- (instancetype)initWithTeamMemberIds:(NSArray<NSString *> *)teamMemberIds {
  self = [super init];
  if (self) {
    _tag = DBTEAMUsersSelectorArgTeamMemberIds;
    _teamMemberIds = teamMemberIds;
  }
  return self;
}

- (instancetype)initWithExternalIds:(NSArray<NSString *> *)externalIds {
  self = [super init];
  if (self) {
    _tag = DBTEAMUsersSelectorArgExternalIds;
    _externalIds = externalIds;
  }
  return self;
}

- (instancetype)initWithEmails:(NSArray<NSString *> *)emails {
  self = [super init];
  if (self) {
    _tag = DBTEAMUsersSelectorArgEmails;
    _emails = emails;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSArray<NSString *> *)teamMemberIds {
  if (![self isTeamMemberIds]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUsersSelectorArgTeamMemberIds, but was %@.", [self tagName]];
  }
  return _teamMemberIds;
}

- (NSArray<NSString *> *)externalIds {
  if (![self isExternalIds]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUsersSelectorArgExternalIds, but was %@.", [self tagName]];
  }
  return _externalIds;
}

- (NSArray<NSString *> *)emails {
  if (![self isEmails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMUsersSelectorArgEmails, but was %@.", [self tagName]];
  }
  return _emails;
}

#pragma mark - Tag state methods

- (BOOL)isTeamMemberIds {
  return _tag == DBTEAMUsersSelectorArgTeamMemberIds;
}

- (BOOL)isExternalIds {
  return _tag == DBTEAMUsersSelectorArgExternalIds;
}

- (BOOL)isEmails {
  return _tag == DBTEAMUsersSelectorArgEmails;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMUsersSelectorArgTeamMemberIds:
    return @"DBTEAMUsersSelectorArgTeamMemberIds";
  case DBTEAMUsersSelectorArgExternalIds:
    return @"DBTEAMUsersSelectorArgExternalIds";
  case DBTEAMUsersSelectorArgEmails:
    return @"DBTEAMUsersSelectorArgEmails";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMUsersSelectorArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMUsersSelectorArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMUsersSelectorArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMUsersSelectorArgTeamMemberIds:
    result = prime * result + [self.teamMemberIds hash];
  case DBTEAMUsersSelectorArgExternalIds:
    result = prime * result + [self.externalIds hash];
  case DBTEAMUsersSelectorArgEmails:
    result = prime * result + [self.emails hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUsersSelectorArg:other];
}

- (BOOL)isEqualToUsersSelectorArg:(DBTEAMUsersSelectorArg *)anUsersSelectorArg {
  if (self == anUsersSelectorArg) {
    return YES;
  }
  if (self.tag != anUsersSelectorArg.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMUsersSelectorArgTeamMemberIds:
    return [self.teamMemberIds isEqual:anUsersSelectorArg.teamMemberIds];
  case DBTEAMUsersSelectorArgExternalIds:
    return [self.externalIds isEqual:anUsersSelectorArg.externalIds];
  case DBTEAMUsersSelectorArgEmails:
    return [self.emails isEqual:anUsersSelectorArg.emails];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMUsersSelectorArgSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMUsersSelectorArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamMemberIds]) {
    jsonDict[@"team_member_ids"] = [DBArraySerializer serialize:valueObj.teamMemberIds
                                                      withBlock:^id(id elem0) {
                                                        return elem0;
                                                      }];
    jsonDict[@".tag"] = @"team_member_ids";
  } else if ([valueObj isExternalIds]) {
    jsonDict[@"external_ids"] = [DBArraySerializer serialize:valueObj.externalIds
                                                   withBlock:^id(id elem0) {
                                                     return elem0;
                                                   }];
    jsonDict[@".tag"] = @"external_ids";
  } else if ([valueObj isEmails]) {
    jsonDict[@"emails"] = [DBArraySerializer serialize:valueObj.emails
                                             withBlock:^id(id elem0) {
                                               return elem0;
                                             }];
    jsonDict[@".tag"] = @"emails";
  } else {
    @throw([NSException exceptionWithName:@"InvalidTag"
                                   reason:@"Object not properly initialized. Tag has an unknown value."
                                 userInfo:nil]);
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMUsersSelectorArg *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_member_ids"]) {
    NSArray<NSString *> *teamMemberIds = [DBArraySerializer deserialize:valueDict[@"team_member_ids"]
                                                              withBlock:^id(id elem0) {
                                                                return elem0;
                                                              }];
    return [[DBTEAMUsersSelectorArg alloc] initWithTeamMemberIds:teamMemberIds];
  } else if ([tag isEqualToString:@"external_ids"]) {
    NSArray<NSString *> *externalIds = [DBArraySerializer deserialize:valueDict[@"external_ids"]
                                                            withBlock:^id(id elem0) {
                                                              return elem0;
                                                            }];
    return [[DBTEAMUsersSelectorArg alloc] initWithExternalIds:externalIds];
  } else if ([tag isEqualToString:@"emails"]) {
    NSArray<NSString *> *emails = [DBArraySerializer deserialize:valueDict[@"emails"]
                                                       withBlock:^id(id elem0) {
                                                         return elem0;
                                                       }];
    return [[DBTEAMUsersSelectorArg alloc] initWithEmails:emails];
  } else {
    @throw([NSException
        exceptionWithName:@"InvalidTag"
                   reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
                 userInfo:nil]);
  }
}

@end
